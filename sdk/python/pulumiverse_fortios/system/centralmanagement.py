# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CentralmanagementArgs', 'Centralmanagement']

@pulumi.input_type
class CentralmanagementArgs:
    def __init__(__self__, *,
                 allow_monitor: Optional[pulumi.Input[str]] = None,
                 allow_push_configuration: Optional[pulumi.Input[str]] = None,
                 allow_push_firmware: Optional[pulumi.Input[str]] = None,
                 allow_remote_firmware_upgrade: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enc_algorithm: Optional[pulumi.Input[str]] = None,
                 fmg: Optional[pulumi.Input[str]] = None,
                 fmg_source_ip: Optional[pulumi.Input[str]] = None,
                 fmg_source_ip6: Optional[pulumi.Input[str]] = None,
                 fmg_update_port: Optional[pulumi.Input[str]] = None,
                 fortigate_cloud_sso_default_profile: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 include_default_servers: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 local_cert: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 schedule_config_restore: Optional[pulumi.Input[str]] = None,
                 schedule_script_restore: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 server_lists: Optional[pulumi.Input[Sequence[pulumi.Input['CentralmanagementServerListArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Centralmanagement resource.
        :param pulumi.Input[str] allow_monitor: Enable/disable allowing the central management server to remotely monitor this FortiGate Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_configuration: Enable/disable allowing the central management server to push configuration changes to this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_firmware: Enable/disable allowing the central management server to push firmware updates to this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_remote_firmware_upgrade: Enable/disable remotely upgrading the firmware on this FortiGate from the central management server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ca_cert: CA certificate to be used by FGFM protocol.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] enc_algorithm: Encryption strength for communications between the FortiGate and central management. Valid values: `default`, `high`, `low`.
        :param pulumi.Input[str] fmg: IP address or FQDN of the FortiManager.
        :param pulumi.Input[str] fmg_source_ip: IPv4 source address that this FortiGate uses when communicating with FortiManager.
        :param pulumi.Input[str] fmg_source_ip6: IPv6 source address that this FortiGate uses when communicating with FortiManager.
        :param pulumi.Input[str] fmg_update_port: Port used to communicate with FortiManager that is acting as a FortiGuard update server. Valid values: `8890`, `443`.
        :param pulumi.Input[str] fortigate_cloud_sso_default_profile: Override access profile.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] include_default_servers: Enable/disable inclusion of public FortiGuard servers in the override server list. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] local_cert: Certificate to be used by FGFM protocol.
        :param pulumi.Input[str] mode: Central management mode. Valid values: `normal`, `backup`.
        :param pulumi.Input[str] schedule_config_restore: Enable/disable allowing the central management server to restore the configuration of this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] schedule_script_restore: Enable/disable allowing the central management server to restore the scripts stored on this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] serial_number: Serial number.
        :param pulumi.Input[Sequence[pulumi.Input['CentralmanagementServerListArgs']]] server_lists: Additional severs that the FortiGate can use for updates (for AV, IPS, updates) and ratings (for web filter and antispam ratings) servers. The structure of `server_list` block is documented below.
        :param pulumi.Input[str] type: Central management type. Valid values: `fortimanager`, `fortiguard`, `none`.
        :param pulumi.Input[str] vdom: Virtual domain (VDOM) name to use when communicating with FortiManager.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if allow_monitor is not None:
            pulumi.set(__self__, "allow_monitor", allow_monitor)
        if allow_push_configuration is not None:
            pulumi.set(__self__, "allow_push_configuration", allow_push_configuration)
        if allow_push_firmware is not None:
            pulumi.set(__self__, "allow_push_firmware", allow_push_firmware)
        if allow_remote_firmware_upgrade is not None:
            pulumi.set(__self__, "allow_remote_firmware_upgrade", allow_remote_firmware_upgrade)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if enc_algorithm is not None:
            pulumi.set(__self__, "enc_algorithm", enc_algorithm)
        if fmg is not None:
            pulumi.set(__self__, "fmg", fmg)
        if fmg_source_ip is not None:
            pulumi.set(__self__, "fmg_source_ip", fmg_source_ip)
        if fmg_source_ip6 is not None:
            pulumi.set(__self__, "fmg_source_ip6", fmg_source_ip6)
        if fmg_update_port is not None:
            pulumi.set(__self__, "fmg_update_port", fmg_update_port)
        if fortigate_cloud_sso_default_profile is not None:
            pulumi.set(__self__, "fortigate_cloud_sso_default_profile", fortigate_cloud_sso_default_profile)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if include_default_servers is not None:
            pulumi.set(__self__, "include_default_servers", include_default_servers)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if local_cert is not None:
            pulumi.set(__self__, "local_cert", local_cert)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if schedule_config_restore is not None:
            pulumi.set(__self__, "schedule_config_restore", schedule_config_restore)
        if schedule_script_restore is not None:
            pulumi.set(__self__, "schedule_script_restore", schedule_script_restore)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if server_lists is not None:
            pulumi.set(__self__, "server_lists", server_lists)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="allowMonitor")
    def allow_monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the central management server to remotely monitor this FortiGate Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_monitor")

    @allow_monitor.setter
    def allow_monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_monitor", value)

    @property
    @pulumi.getter(name="allowPushConfiguration")
    def allow_push_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the central management server to push configuration changes to this FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_push_configuration")

    @allow_push_configuration.setter
    def allow_push_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_push_configuration", value)

    @property
    @pulumi.getter(name="allowPushFirmware")
    def allow_push_firmware(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the central management server to push firmware updates to this FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_push_firmware")

    @allow_push_firmware.setter
    def allow_push_firmware(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_push_firmware", value)

    @property
    @pulumi.getter(name="allowRemoteFirmwareUpgrade")
    def allow_remote_firmware_upgrade(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable remotely upgrading the firmware on this FortiGate from the central management server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_remote_firmware_upgrade")

    @allow_remote_firmware_upgrade.setter
    def allow_remote_firmware_upgrade(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_remote_firmware_upgrade", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        CA certificate to be used by FGFM protocol.
        """
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="encAlgorithm")
    def enc_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption strength for communications between the FortiGate and central management. Valid values: `default`, `high`, `low`.
        """
        return pulumi.get(self, "enc_algorithm")

    @enc_algorithm.setter
    def enc_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_algorithm", value)

    @property
    @pulumi.getter
    def fmg(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or FQDN of the FortiManager.
        """
        return pulumi.get(self, "fmg")

    @fmg.setter
    def fmg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fmg", value)

    @property
    @pulumi.getter(name="fmgSourceIp")
    def fmg_source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 source address that this FortiGate uses when communicating with FortiManager.
        """
        return pulumi.get(self, "fmg_source_ip")

    @fmg_source_ip.setter
    def fmg_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fmg_source_ip", value)

    @property
    @pulumi.getter(name="fmgSourceIp6")
    def fmg_source_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 source address that this FortiGate uses when communicating with FortiManager.
        """
        return pulumi.get(self, "fmg_source_ip6")

    @fmg_source_ip6.setter
    def fmg_source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fmg_source_ip6", value)

    @property
    @pulumi.getter(name="fmgUpdatePort")
    def fmg_update_port(self) -> Optional[pulumi.Input[str]]:
        """
        Port used to communicate with FortiManager that is acting as a FortiGuard update server. Valid values: `8890`, `443`.
        """
        return pulumi.get(self, "fmg_update_port")

    @fmg_update_port.setter
    def fmg_update_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fmg_update_port", value)

    @property
    @pulumi.getter(name="fortigateCloudSsoDefaultProfile")
    def fortigate_cloud_sso_default_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Override access profile.
        """
        return pulumi.get(self, "fortigate_cloud_sso_default_profile")

    @fortigate_cloud_sso_default_profile.setter
    def fortigate_cloud_sso_default_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortigate_cloud_sso_default_profile", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="includeDefaultServers")
    def include_default_servers(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable inclusion of public FortiGuard servers in the override server list. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "include_default_servers")

    @include_default_servers.setter
    def include_default_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_default_servers", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="localCert")
    def local_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate to be used by FGFM protocol.
        """
        return pulumi.get(self, "local_cert")

    @local_cert.setter
    def local_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_cert", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Central management mode. Valid values: `normal`, `backup`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="scheduleConfigRestore")
    def schedule_config_restore(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the central management server to restore the configuration of this FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "schedule_config_restore")

    @schedule_config_restore.setter
    def schedule_config_restore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_config_restore", value)

    @property
    @pulumi.getter(name="scheduleScriptRestore")
    def schedule_script_restore(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the central management server to restore the scripts stored on this FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "schedule_script_restore")

    @schedule_script_restore.setter
    def schedule_script_restore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_script_restore", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="serverLists")
    def server_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralmanagementServerListArgs']]]]:
        """
        Additional severs that the FortiGate can use for updates (for AV, IPS, updates) and ratings (for web filter and antispam ratings) servers. The structure of `server_list` block is documented below.
        """
        return pulumi.get(self, "server_lists")

    @server_lists.setter
    def server_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralmanagementServerListArgs']]]]):
        pulumi.set(self, "server_lists", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Central management type. Valid values: `fortimanager`, `fortiguard`, `none`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain (VDOM) name to use when communicating with FortiManager.
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _CentralmanagementState:
    def __init__(__self__, *,
                 allow_monitor: Optional[pulumi.Input[str]] = None,
                 allow_push_configuration: Optional[pulumi.Input[str]] = None,
                 allow_push_firmware: Optional[pulumi.Input[str]] = None,
                 allow_remote_firmware_upgrade: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enc_algorithm: Optional[pulumi.Input[str]] = None,
                 fmg: Optional[pulumi.Input[str]] = None,
                 fmg_source_ip: Optional[pulumi.Input[str]] = None,
                 fmg_source_ip6: Optional[pulumi.Input[str]] = None,
                 fmg_update_port: Optional[pulumi.Input[str]] = None,
                 fortigate_cloud_sso_default_profile: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 include_default_servers: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 local_cert: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 schedule_config_restore: Optional[pulumi.Input[str]] = None,
                 schedule_script_restore: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 server_lists: Optional[pulumi.Input[Sequence[pulumi.Input['CentralmanagementServerListArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Centralmanagement resources.
        :param pulumi.Input[str] allow_monitor: Enable/disable allowing the central management server to remotely monitor this FortiGate Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_configuration: Enable/disable allowing the central management server to push configuration changes to this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_firmware: Enable/disable allowing the central management server to push firmware updates to this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_remote_firmware_upgrade: Enable/disable remotely upgrading the firmware on this FortiGate from the central management server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ca_cert: CA certificate to be used by FGFM protocol.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] enc_algorithm: Encryption strength for communications between the FortiGate and central management. Valid values: `default`, `high`, `low`.
        :param pulumi.Input[str] fmg: IP address or FQDN of the FortiManager.
        :param pulumi.Input[str] fmg_source_ip: IPv4 source address that this FortiGate uses when communicating with FortiManager.
        :param pulumi.Input[str] fmg_source_ip6: IPv6 source address that this FortiGate uses when communicating with FortiManager.
        :param pulumi.Input[str] fmg_update_port: Port used to communicate with FortiManager that is acting as a FortiGuard update server. Valid values: `8890`, `443`.
        :param pulumi.Input[str] fortigate_cloud_sso_default_profile: Override access profile.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] include_default_servers: Enable/disable inclusion of public FortiGuard servers in the override server list. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] local_cert: Certificate to be used by FGFM protocol.
        :param pulumi.Input[str] mode: Central management mode. Valid values: `normal`, `backup`.
        :param pulumi.Input[str] schedule_config_restore: Enable/disable allowing the central management server to restore the configuration of this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] schedule_script_restore: Enable/disable allowing the central management server to restore the scripts stored on this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] serial_number: Serial number.
        :param pulumi.Input[Sequence[pulumi.Input['CentralmanagementServerListArgs']]] server_lists: Additional severs that the FortiGate can use for updates (for AV, IPS, updates) and ratings (for web filter and antispam ratings) servers. The structure of `server_list` block is documented below.
        :param pulumi.Input[str] type: Central management type. Valid values: `fortimanager`, `fortiguard`, `none`.
        :param pulumi.Input[str] vdom: Virtual domain (VDOM) name to use when communicating with FortiManager.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if allow_monitor is not None:
            pulumi.set(__self__, "allow_monitor", allow_monitor)
        if allow_push_configuration is not None:
            pulumi.set(__self__, "allow_push_configuration", allow_push_configuration)
        if allow_push_firmware is not None:
            pulumi.set(__self__, "allow_push_firmware", allow_push_firmware)
        if allow_remote_firmware_upgrade is not None:
            pulumi.set(__self__, "allow_remote_firmware_upgrade", allow_remote_firmware_upgrade)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if enc_algorithm is not None:
            pulumi.set(__self__, "enc_algorithm", enc_algorithm)
        if fmg is not None:
            pulumi.set(__self__, "fmg", fmg)
        if fmg_source_ip is not None:
            pulumi.set(__self__, "fmg_source_ip", fmg_source_ip)
        if fmg_source_ip6 is not None:
            pulumi.set(__self__, "fmg_source_ip6", fmg_source_ip6)
        if fmg_update_port is not None:
            pulumi.set(__self__, "fmg_update_port", fmg_update_port)
        if fortigate_cloud_sso_default_profile is not None:
            pulumi.set(__self__, "fortigate_cloud_sso_default_profile", fortigate_cloud_sso_default_profile)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if include_default_servers is not None:
            pulumi.set(__self__, "include_default_servers", include_default_servers)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if local_cert is not None:
            pulumi.set(__self__, "local_cert", local_cert)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if schedule_config_restore is not None:
            pulumi.set(__self__, "schedule_config_restore", schedule_config_restore)
        if schedule_script_restore is not None:
            pulumi.set(__self__, "schedule_script_restore", schedule_script_restore)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if server_lists is not None:
            pulumi.set(__self__, "server_lists", server_lists)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="allowMonitor")
    def allow_monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the central management server to remotely monitor this FortiGate Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_monitor")

    @allow_monitor.setter
    def allow_monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_monitor", value)

    @property
    @pulumi.getter(name="allowPushConfiguration")
    def allow_push_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the central management server to push configuration changes to this FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_push_configuration")

    @allow_push_configuration.setter
    def allow_push_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_push_configuration", value)

    @property
    @pulumi.getter(name="allowPushFirmware")
    def allow_push_firmware(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the central management server to push firmware updates to this FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_push_firmware")

    @allow_push_firmware.setter
    def allow_push_firmware(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_push_firmware", value)

    @property
    @pulumi.getter(name="allowRemoteFirmwareUpgrade")
    def allow_remote_firmware_upgrade(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable remotely upgrading the firmware on this FortiGate from the central management server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_remote_firmware_upgrade")

    @allow_remote_firmware_upgrade.setter
    def allow_remote_firmware_upgrade(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_remote_firmware_upgrade", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        CA certificate to be used by FGFM protocol.
        """
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="encAlgorithm")
    def enc_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption strength for communications between the FortiGate and central management. Valid values: `default`, `high`, `low`.
        """
        return pulumi.get(self, "enc_algorithm")

    @enc_algorithm.setter
    def enc_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_algorithm", value)

    @property
    @pulumi.getter
    def fmg(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or FQDN of the FortiManager.
        """
        return pulumi.get(self, "fmg")

    @fmg.setter
    def fmg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fmg", value)

    @property
    @pulumi.getter(name="fmgSourceIp")
    def fmg_source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 source address that this FortiGate uses when communicating with FortiManager.
        """
        return pulumi.get(self, "fmg_source_ip")

    @fmg_source_ip.setter
    def fmg_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fmg_source_ip", value)

    @property
    @pulumi.getter(name="fmgSourceIp6")
    def fmg_source_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 source address that this FortiGate uses when communicating with FortiManager.
        """
        return pulumi.get(self, "fmg_source_ip6")

    @fmg_source_ip6.setter
    def fmg_source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fmg_source_ip6", value)

    @property
    @pulumi.getter(name="fmgUpdatePort")
    def fmg_update_port(self) -> Optional[pulumi.Input[str]]:
        """
        Port used to communicate with FortiManager that is acting as a FortiGuard update server. Valid values: `8890`, `443`.
        """
        return pulumi.get(self, "fmg_update_port")

    @fmg_update_port.setter
    def fmg_update_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fmg_update_port", value)

    @property
    @pulumi.getter(name="fortigateCloudSsoDefaultProfile")
    def fortigate_cloud_sso_default_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Override access profile.
        """
        return pulumi.get(self, "fortigate_cloud_sso_default_profile")

    @fortigate_cloud_sso_default_profile.setter
    def fortigate_cloud_sso_default_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortigate_cloud_sso_default_profile", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="includeDefaultServers")
    def include_default_servers(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable inclusion of public FortiGuard servers in the override server list. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "include_default_servers")

    @include_default_servers.setter
    def include_default_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_default_servers", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="localCert")
    def local_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate to be used by FGFM protocol.
        """
        return pulumi.get(self, "local_cert")

    @local_cert.setter
    def local_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_cert", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Central management mode. Valid values: `normal`, `backup`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="scheduleConfigRestore")
    def schedule_config_restore(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the central management server to restore the configuration of this FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "schedule_config_restore")

    @schedule_config_restore.setter
    def schedule_config_restore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_config_restore", value)

    @property
    @pulumi.getter(name="scheduleScriptRestore")
    def schedule_script_restore(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the central management server to restore the scripts stored on this FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "schedule_script_restore")

    @schedule_script_restore.setter
    def schedule_script_restore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_script_restore", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="serverLists")
    def server_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CentralmanagementServerListArgs']]]]:
        """
        Additional severs that the FortiGate can use for updates (for AV, IPS, updates) and ratings (for web filter and antispam ratings) servers. The structure of `server_list` block is documented below.
        """
        return pulumi.get(self, "server_lists")

    @server_lists.setter
    def server_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CentralmanagementServerListArgs']]]]):
        pulumi.set(self, "server_lists", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Central management type. Valid values: `fortimanager`, `fortiguard`, `none`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain (VDOM) name to use when communicating with FortiManager.
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Centralmanagement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_monitor: Optional[pulumi.Input[str]] = None,
                 allow_push_configuration: Optional[pulumi.Input[str]] = None,
                 allow_push_firmware: Optional[pulumi.Input[str]] = None,
                 allow_remote_firmware_upgrade: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enc_algorithm: Optional[pulumi.Input[str]] = None,
                 fmg: Optional[pulumi.Input[str]] = None,
                 fmg_source_ip: Optional[pulumi.Input[str]] = None,
                 fmg_source_ip6: Optional[pulumi.Input[str]] = None,
                 fmg_update_port: Optional[pulumi.Input[str]] = None,
                 fortigate_cloud_sso_default_profile: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 include_default_servers: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 local_cert: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 schedule_config_restore: Optional[pulumi.Input[str]] = None,
                 schedule_script_restore: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralmanagementServerListArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure central management.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname1 = fortios.system.Centralmanagement("trname1",
            allow_monitor="enable",
            allow_push_configuration="enable",
            allow_push_firmware="enable",
            allow_remote_firmware_upgrade="enable",
            enc_algorithm="high",
            fmg="0.0.0.0",
            fmg_source_ip6="::",
            include_default_servers="enable",
            mode="normal",
            schedule_config_restore="enable",
            schedule_script_restore="enable",
            type="fortimanager",
            vdom="root")
        trname2 = fortios.system.Centralmanagement("trname2",
            allow_monitor="enable",
            allow_push_configuration="enable",
            allow_push_firmware="enable",
            allow_remote_firmware_upgrade="enable",
            enc_algorithm="high",
            fmg="\\"192.168.52.177\\"",
            include_default_servers="enable",
            mode="normal",
            type="fortimanager",
            vdom="root")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System CentralManagement can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/centralmanagement:Centralmanagement labelname SystemCentralManagement
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/centralmanagement:Centralmanagement labelname SystemCentralManagement
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allow_monitor: Enable/disable allowing the central management server to remotely monitor this FortiGate Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_configuration: Enable/disable allowing the central management server to push configuration changes to this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_firmware: Enable/disable allowing the central management server to push firmware updates to this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_remote_firmware_upgrade: Enable/disable remotely upgrading the firmware on this FortiGate from the central management server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ca_cert: CA certificate to be used by FGFM protocol.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] enc_algorithm: Encryption strength for communications between the FortiGate and central management. Valid values: `default`, `high`, `low`.
        :param pulumi.Input[str] fmg: IP address or FQDN of the FortiManager.
        :param pulumi.Input[str] fmg_source_ip: IPv4 source address that this FortiGate uses when communicating with FortiManager.
        :param pulumi.Input[str] fmg_source_ip6: IPv6 source address that this FortiGate uses when communicating with FortiManager.
        :param pulumi.Input[str] fmg_update_port: Port used to communicate with FortiManager that is acting as a FortiGuard update server. Valid values: `8890`, `443`.
        :param pulumi.Input[str] fortigate_cloud_sso_default_profile: Override access profile.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] include_default_servers: Enable/disable inclusion of public FortiGuard servers in the override server list. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] local_cert: Certificate to be used by FGFM protocol.
        :param pulumi.Input[str] mode: Central management mode. Valid values: `normal`, `backup`.
        :param pulumi.Input[str] schedule_config_restore: Enable/disable allowing the central management server to restore the configuration of this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] schedule_script_restore: Enable/disable allowing the central management server to restore the scripts stored on this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] serial_number: Serial number.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralmanagementServerListArgs']]]] server_lists: Additional severs that the FortiGate can use for updates (for AV, IPS, updates) and ratings (for web filter and antispam ratings) servers. The structure of `server_list` block is documented below.
        :param pulumi.Input[str] type: Central management type. Valid values: `fortimanager`, `fortiguard`, `none`.
        :param pulumi.Input[str] vdom: Virtual domain (VDOM) name to use when communicating with FortiManager.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CentralmanagementArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure central management.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname1 = fortios.system.Centralmanagement("trname1",
            allow_monitor="enable",
            allow_push_configuration="enable",
            allow_push_firmware="enable",
            allow_remote_firmware_upgrade="enable",
            enc_algorithm="high",
            fmg="0.0.0.0",
            fmg_source_ip6="::",
            include_default_servers="enable",
            mode="normal",
            schedule_config_restore="enable",
            schedule_script_restore="enable",
            type="fortimanager",
            vdom="root")
        trname2 = fortios.system.Centralmanagement("trname2",
            allow_monitor="enable",
            allow_push_configuration="enable",
            allow_push_firmware="enable",
            allow_remote_firmware_upgrade="enable",
            enc_algorithm="high",
            fmg="\\"192.168.52.177\\"",
            include_default_servers="enable",
            mode="normal",
            type="fortimanager",
            vdom="root")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System CentralManagement can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/centralmanagement:Centralmanagement labelname SystemCentralManagement
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/centralmanagement:Centralmanagement labelname SystemCentralManagement
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param CentralmanagementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CentralmanagementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_monitor: Optional[pulumi.Input[str]] = None,
                 allow_push_configuration: Optional[pulumi.Input[str]] = None,
                 allow_push_firmware: Optional[pulumi.Input[str]] = None,
                 allow_remote_firmware_upgrade: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enc_algorithm: Optional[pulumi.Input[str]] = None,
                 fmg: Optional[pulumi.Input[str]] = None,
                 fmg_source_ip: Optional[pulumi.Input[str]] = None,
                 fmg_source_ip6: Optional[pulumi.Input[str]] = None,
                 fmg_update_port: Optional[pulumi.Input[str]] = None,
                 fortigate_cloud_sso_default_profile: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 include_default_servers: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 local_cert: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 schedule_config_restore: Optional[pulumi.Input[str]] = None,
                 schedule_script_restore: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralmanagementServerListArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CentralmanagementArgs.__new__(CentralmanagementArgs)

            __props__.__dict__["allow_monitor"] = allow_monitor
            __props__.__dict__["allow_push_configuration"] = allow_push_configuration
            __props__.__dict__["allow_push_firmware"] = allow_push_firmware
            __props__.__dict__["allow_remote_firmware_upgrade"] = allow_remote_firmware_upgrade
            __props__.__dict__["ca_cert"] = ca_cert
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["enc_algorithm"] = enc_algorithm
            __props__.__dict__["fmg"] = fmg
            __props__.__dict__["fmg_source_ip"] = fmg_source_ip
            __props__.__dict__["fmg_source_ip6"] = fmg_source_ip6
            __props__.__dict__["fmg_update_port"] = fmg_update_port
            __props__.__dict__["fortigate_cloud_sso_default_profile"] = fortigate_cloud_sso_default_profile
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["include_default_servers"] = include_default_servers
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interface_select_method"] = interface_select_method
            __props__.__dict__["local_cert"] = local_cert
            __props__.__dict__["mode"] = mode
            __props__.__dict__["schedule_config_restore"] = schedule_config_restore
            __props__.__dict__["schedule_script_restore"] = schedule_script_restore
            __props__.__dict__["serial_number"] = serial_number
            __props__.__dict__["server_lists"] = server_lists
            __props__.__dict__["type"] = type
            __props__.__dict__["vdom"] = vdom
            __props__.__dict__["vdomparam"] = vdomparam
        super(Centralmanagement, __self__).__init__(
            'fortios:system/centralmanagement:Centralmanagement',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_monitor: Optional[pulumi.Input[str]] = None,
            allow_push_configuration: Optional[pulumi.Input[str]] = None,
            allow_push_firmware: Optional[pulumi.Input[str]] = None,
            allow_remote_firmware_upgrade: Optional[pulumi.Input[str]] = None,
            ca_cert: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            enc_algorithm: Optional[pulumi.Input[str]] = None,
            fmg: Optional[pulumi.Input[str]] = None,
            fmg_source_ip: Optional[pulumi.Input[str]] = None,
            fmg_source_ip6: Optional[pulumi.Input[str]] = None,
            fmg_update_port: Optional[pulumi.Input[str]] = None,
            fortigate_cloud_sso_default_profile: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            include_default_servers: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interface_select_method: Optional[pulumi.Input[str]] = None,
            local_cert: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            schedule_config_restore: Optional[pulumi.Input[str]] = None,
            schedule_script_restore: Optional[pulumi.Input[str]] = None,
            serial_number: Optional[pulumi.Input[str]] = None,
            server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralmanagementServerListArgs']]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vdom: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Centralmanagement':
        """
        Get an existing Centralmanagement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allow_monitor: Enable/disable allowing the central management server to remotely monitor this FortiGate Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_configuration: Enable/disable allowing the central management server to push configuration changes to this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_firmware: Enable/disable allowing the central management server to push firmware updates to this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_remote_firmware_upgrade: Enable/disable remotely upgrading the firmware on this FortiGate from the central management server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ca_cert: CA certificate to be used by FGFM protocol.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] enc_algorithm: Encryption strength for communications between the FortiGate and central management. Valid values: `default`, `high`, `low`.
        :param pulumi.Input[str] fmg: IP address or FQDN of the FortiManager.
        :param pulumi.Input[str] fmg_source_ip: IPv4 source address that this FortiGate uses when communicating with FortiManager.
        :param pulumi.Input[str] fmg_source_ip6: IPv6 source address that this FortiGate uses when communicating with FortiManager.
        :param pulumi.Input[str] fmg_update_port: Port used to communicate with FortiManager that is acting as a FortiGuard update server. Valid values: `8890`, `443`.
        :param pulumi.Input[str] fortigate_cloud_sso_default_profile: Override access profile.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] include_default_servers: Enable/disable inclusion of public FortiGuard servers in the override server list. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] local_cert: Certificate to be used by FGFM protocol.
        :param pulumi.Input[str] mode: Central management mode. Valid values: `normal`, `backup`.
        :param pulumi.Input[str] schedule_config_restore: Enable/disable allowing the central management server to restore the configuration of this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] schedule_script_restore: Enable/disable allowing the central management server to restore the scripts stored on this FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] serial_number: Serial number.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CentralmanagementServerListArgs']]]] server_lists: Additional severs that the FortiGate can use for updates (for AV, IPS, updates) and ratings (for web filter and antispam ratings) servers. The structure of `server_list` block is documented below.
        :param pulumi.Input[str] type: Central management type. Valid values: `fortimanager`, `fortiguard`, `none`.
        :param pulumi.Input[str] vdom: Virtual domain (VDOM) name to use when communicating with FortiManager.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CentralmanagementState.__new__(_CentralmanagementState)

        __props__.__dict__["allow_monitor"] = allow_monitor
        __props__.__dict__["allow_push_configuration"] = allow_push_configuration
        __props__.__dict__["allow_push_firmware"] = allow_push_firmware
        __props__.__dict__["allow_remote_firmware_upgrade"] = allow_remote_firmware_upgrade
        __props__.__dict__["ca_cert"] = ca_cert
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["enc_algorithm"] = enc_algorithm
        __props__.__dict__["fmg"] = fmg
        __props__.__dict__["fmg_source_ip"] = fmg_source_ip
        __props__.__dict__["fmg_source_ip6"] = fmg_source_ip6
        __props__.__dict__["fmg_update_port"] = fmg_update_port
        __props__.__dict__["fortigate_cloud_sso_default_profile"] = fortigate_cloud_sso_default_profile
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["include_default_servers"] = include_default_servers
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interface_select_method"] = interface_select_method
        __props__.__dict__["local_cert"] = local_cert
        __props__.__dict__["mode"] = mode
        __props__.__dict__["schedule_config_restore"] = schedule_config_restore
        __props__.__dict__["schedule_script_restore"] = schedule_script_restore
        __props__.__dict__["serial_number"] = serial_number
        __props__.__dict__["server_lists"] = server_lists
        __props__.__dict__["type"] = type
        __props__.__dict__["vdom"] = vdom
        __props__.__dict__["vdomparam"] = vdomparam
        return Centralmanagement(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowMonitor")
    def allow_monitor(self) -> pulumi.Output[str]:
        """
        Enable/disable allowing the central management server to remotely monitor this FortiGate Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_monitor")

    @property
    @pulumi.getter(name="allowPushConfiguration")
    def allow_push_configuration(self) -> pulumi.Output[str]:
        """
        Enable/disable allowing the central management server to push configuration changes to this FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_push_configuration")

    @property
    @pulumi.getter(name="allowPushFirmware")
    def allow_push_firmware(self) -> pulumi.Output[str]:
        """
        Enable/disable allowing the central management server to push firmware updates to this FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_push_firmware")

    @property
    @pulumi.getter(name="allowRemoteFirmwareUpgrade")
    def allow_remote_firmware_upgrade(self) -> pulumi.Output[str]:
        """
        Enable/disable remotely upgrading the firmware on this FortiGate from the central management server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_remote_firmware_upgrade")

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> pulumi.Output[str]:
        """
        CA certificate to be used by FGFM protocol.
        """
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="encAlgorithm")
    def enc_algorithm(self) -> pulumi.Output[str]:
        """
        Encryption strength for communications between the FortiGate and central management. Valid values: `default`, `high`, `low`.
        """
        return pulumi.get(self, "enc_algorithm")

    @property
    @pulumi.getter
    def fmg(self) -> pulumi.Output[str]:
        """
        IP address or FQDN of the FortiManager.
        """
        return pulumi.get(self, "fmg")

    @property
    @pulumi.getter(name="fmgSourceIp")
    def fmg_source_ip(self) -> pulumi.Output[str]:
        """
        IPv4 source address that this FortiGate uses when communicating with FortiManager.
        """
        return pulumi.get(self, "fmg_source_ip")

    @property
    @pulumi.getter(name="fmgSourceIp6")
    def fmg_source_ip6(self) -> pulumi.Output[str]:
        """
        IPv6 source address that this FortiGate uses when communicating with FortiManager.
        """
        return pulumi.get(self, "fmg_source_ip6")

    @property
    @pulumi.getter(name="fmgUpdatePort")
    def fmg_update_port(self) -> pulumi.Output[str]:
        """
        Port used to communicate with FortiManager that is acting as a FortiGuard update server. Valid values: `8890`, `443`.
        """
        return pulumi.get(self, "fmg_update_port")

    @property
    @pulumi.getter(name="fortigateCloudSsoDefaultProfile")
    def fortigate_cloud_sso_default_profile(self) -> pulumi.Output[str]:
        """
        Override access profile.
        """
        return pulumi.get(self, "fortigate_cloud_sso_default_profile")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="includeDefaultServers")
    def include_default_servers(self) -> pulumi.Output[str]:
        """
        Enable/disable inclusion of public FortiGuard servers in the override server list. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "include_default_servers")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> pulumi.Output[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="localCert")
    def local_cert(self) -> pulumi.Output[str]:
        """
        Certificate to be used by FGFM protocol.
        """
        return pulumi.get(self, "local_cert")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        Central management mode. Valid values: `normal`, `backup`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="scheduleConfigRestore")
    def schedule_config_restore(self) -> pulumi.Output[str]:
        """
        Enable/disable allowing the central management server to restore the configuration of this FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "schedule_config_restore")

    @property
    @pulumi.getter(name="scheduleScriptRestore")
    def schedule_script_restore(self) -> pulumi.Output[str]:
        """
        Enable/disable allowing the central management server to restore the scripts stored on this FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "schedule_script_restore")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Output[str]:
        """
        Serial number.
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="serverLists")
    def server_lists(self) -> pulumi.Output[Optional[Sequence['outputs.CentralmanagementServerList']]]:
        """
        Additional severs that the FortiGate can use for updates (for AV, IPS, updates) and ratings (for web filter and antispam ratings) servers. The structure of `server_list` block is documented below.
        """
        return pulumi.get(self, "server_lists")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Central management type. Valid values: `fortimanager`, `fortiguard`, `none`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdom(self) -> pulumi.Output[str]:
        """
        Virtual domain (VDOM) name to use when communicating with FortiManager.
        """
        return pulumi.get(self, "vdom")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

