# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetFortiguardResult',
    'AwaitableGetFortiguardResult',
    'get_fortiguard',
    'get_fortiguard_output',
]

@pulumi.output_type
class GetFortiguardResult:
    """
    A collection of values returned by getFortiguard.
    """
    def __init__(__self__, antispam_cache=None, antispam_cache_mpercent=None, antispam_cache_mpermille=None, antispam_cache_ttl=None, antispam_expiration=None, antispam_force_off=None, antispam_license=None, antispam_timeout=None, anycast_sdns_server_ip=None, anycast_sdns_server_port=None, auto_firmware_upgrade=None, auto_firmware_upgrade_day=None, auto_firmware_upgrade_delay=None, auto_firmware_upgrade_end_hour=None, auto_firmware_upgrade_start_hour=None, auto_join_forticloud=None, ddns_server_ip=None, ddns_server_ip6=None, ddns_server_port=None, fds_license_expiring_days=None, fortiguard_anycast=None, fortiguard_anycast_source=None, gui_prompt_auto_upgrade=None, id=None, interface=None, interface_select_method=None, load_balance_servers=None, outbreak_prevention_cache=None, outbreak_prevention_cache_mpercent=None, outbreak_prevention_cache_mpermille=None, outbreak_prevention_cache_ttl=None, outbreak_prevention_expiration=None, outbreak_prevention_force_off=None, outbreak_prevention_license=None, outbreak_prevention_timeout=None, persistent_connection=None, port=None, protocol=None, proxy_password=None, proxy_server_ip=None, proxy_server_port=None, proxy_username=None, sandbox_inline_scan=None, sandbox_region=None, sdns_options=None, sdns_server_ip=None, sdns_server_port=None, service_account_id=None, source_ip=None, source_ip6=None, update_build_proxy=None, update_dldb=None, update_extdb=None, update_ffdb=None, update_server_location=None, update_uwdb=None, vdom=None, vdomparam=None, videofilter_expiration=None, videofilter_license=None, webfilter_cache=None, webfilter_cache_ttl=None, webfilter_expiration=None, webfilter_force_off=None, webfilter_license=None, webfilter_timeout=None):
        if antispam_cache and not isinstance(antispam_cache, str):
            raise TypeError("Expected argument 'antispam_cache' to be a str")
        pulumi.set(__self__, "antispam_cache", antispam_cache)
        if antispam_cache_mpercent and not isinstance(antispam_cache_mpercent, int):
            raise TypeError("Expected argument 'antispam_cache_mpercent' to be a int")
        pulumi.set(__self__, "antispam_cache_mpercent", antispam_cache_mpercent)
        if antispam_cache_mpermille and not isinstance(antispam_cache_mpermille, int):
            raise TypeError("Expected argument 'antispam_cache_mpermille' to be a int")
        pulumi.set(__self__, "antispam_cache_mpermille", antispam_cache_mpermille)
        if antispam_cache_ttl and not isinstance(antispam_cache_ttl, int):
            raise TypeError("Expected argument 'antispam_cache_ttl' to be a int")
        pulumi.set(__self__, "antispam_cache_ttl", antispam_cache_ttl)
        if antispam_expiration and not isinstance(antispam_expiration, int):
            raise TypeError("Expected argument 'antispam_expiration' to be a int")
        pulumi.set(__self__, "antispam_expiration", antispam_expiration)
        if antispam_force_off and not isinstance(antispam_force_off, str):
            raise TypeError("Expected argument 'antispam_force_off' to be a str")
        pulumi.set(__self__, "antispam_force_off", antispam_force_off)
        if antispam_license and not isinstance(antispam_license, int):
            raise TypeError("Expected argument 'antispam_license' to be a int")
        pulumi.set(__self__, "antispam_license", antispam_license)
        if antispam_timeout and not isinstance(antispam_timeout, int):
            raise TypeError("Expected argument 'antispam_timeout' to be a int")
        pulumi.set(__self__, "antispam_timeout", antispam_timeout)
        if anycast_sdns_server_ip and not isinstance(anycast_sdns_server_ip, str):
            raise TypeError("Expected argument 'anycast_sdns_server_ip' to be a str")
        pulumi.set(__self__, "anycast_sdns_server_ip", anycast_sdns_server_ip)
        if anycast_sdns_server_port and not isinstance(anycast_sdns_server_port, int):
            raise TypeError("Expected argument 'anycast_sdns_server_port' to be a int")
        pulumi.set(__self__, "anycast_sdns_server_port", anycast_sdns_server_port)
        if auto_firmware_upgrade and not isinstance(auto_firmware_upgrade, str):
            raise TypeError("Expected argument 'auto_firmware_upgrade' to be a str")
        pulumi.set(__self__, "auto_firmware_upgrade", auto_firmware_upgrade)
        if auto_firmware_upgrade_day and not isinstance(auto_firmware_upgrade_day, str):
            raise TypeError("Expected argument 'auto_firmware_upgrade_day' to be a str")
        pulumi.set(__self__, "auto_firmware_upgrade_day", auto_firmware_upgrade_day)
        if auto_firmware_upgrade_delay and not isinstance(auto_firmware_upgrade_delay, int):
            raise TypeError("Expected argument 'auto_firmware_upgrade_delay' to be a int")
        pulumi.set(__self__, "auto_firmware_upgrade_delay", auto_firmware_upgrade_delay)
        if auto_firmware_upgrade_end_hour and not isinstance(auto_firmware_upgrade_end_hour, int):
            raise TypeError("Expected argument 'auto_firmware_upgrade_end_hour' to be a int")
        pulumi.set(__self__, "auto_firmware_upgrade_end_hour", auto_firmware_upgrade_end_hour)
        if auto_firmware_upgrade_start_hour and not isinstance(auto_firmware_upgrade_start_hour, int):
            raise TypeError("Expected argument 'auto_firmware_upgrade_start_hour' to be a int")
        pulumi.set(__self__, "auto_firmware_upgrade_start_hour", auto_firmware_upgrade_start_hour)
        if auto_join_forticloud and not isinstance(auto_join_forticloud, str):
            raise TypeError("Expected argument 'auto_join_forticloud' to be a str")
        pulumi.set(__self__, "auto_join_forticloud", auto_join_forticloud)
        if ddns_server_ip and not isinstance(ddns_server_ip, str):
            raise TypeError("Expected argument 'ddns_server_ip' to be a str")
        pulumi.set(__self__, "ddns_server_ip", ddns_server_ip)
        if ddns_server_ip6 and not isinstance(ddns_server_ip6, str):
            raise TypeError("Expected argument 'ddns_server_ip6' to be a str")
        pulumi.set(__self__, "ddns_server_ip6", ddns_server_ip6)
        if ddns_server_port and not isinstance(ddns_server_port, int):
            raise TypeError("Expected argument 'ddns_server_port' to be a int")
        pulumi.set(__self__, "ddns_server_port", ddns_server_port)
        if fds_license_expiring_days and not isinstance(fds_license_expiring_days, int):
            raise TypeError("Expected argument 'fds_license_expiring_days' to be a int")
        pulumi.set(__self__, "fds_license_expiring_days", fds_license_expiring_days)
        if fortiguard_anycast and not isinstance(fortiguard_anycast, str):
            raise TypeError("Expected argument 'fortiguard_anycast' to be a str")
        pulumi.set(__self__, "fortiguard_anycast", fortiguard_anycast)
        if fortiguard_anycast_source and not isinstance(fortiguard_anycast_source, str):
            raise TypeError("Expected argument 'fortiguard_anycast_source' to be a str")
        pulumi.set(__self__, "fortiguard_anycast_source", fortiguard_anycast_source)
        if gui_prompt_auto_upgrade and not isinstance(gui_prompt_auto_upgrade, str):
            raise TypeError("Expected argument 'gui_prompt_auto_upgrade' to be a str")
        pulumi.set(__self__, "gui_prompt_auto_upgrade", gui_prompt_auto_upgrade)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface and not isinstance(interface, str):
            raise TypeError("Expected argument 'interface' to be a str")
        pulumi.set(__self__, "interface", interface)
        if interface_select_method and not isinstance(interface_select_method, str):
            raise TypeError("Expected argument 'interface_select_method' to be a str")
        pulumi.set(__self__, "interface_select_method", interface_select_method)
        if load_balance_servers and not isinstance(load_balance_servers, int):
            raise TypeError("Expected argument 'load_balance_servers' to be a int")
        pulumi.set(__self__, "load_balance_servers", load_balance_servers)
        if outbreak_prevention_cache and not isinstance(outbreak_prevention_cache, str):
            raise TypeError("Expected argument 'outbreak_prevention_cache' to be a str")
        pulumi.set(__self__, "outbreak_prevention_cache", outbreak_prevention_cache)
        if outbreak_prevention_cache_mpercent and not isinstance(outbreak_prevention_cache_mpercent, int):
            raise TypeError("Expected argument 'outbreak_prevention_cache_mpercent' to be a int")
        pulumi.set(__self__, "outbreak_prevention_cache_mpercent", outbreak_prevention_cache_mpercent)
        if outbreak_prevention_cache_mpermille and not isinstance(outbreak_prevention_cache_mpermille, int):
            raise TypeError("Expected argument 'outbreak_prevention_cache_mpermille' to be a int")
        pulumi.set(__self__, "outbreak_prevention_cache_mpermille", outbreak_prevention_cache_mpermille)
        if outbreak_prevention_cache_ttl and not isinstance(outbreak_prevention_cache_ttl, int):
            raise TypeError("Expected argument 'outbreak_prevention_cache_ttl' to be a int")
        pulumi.set(__self__, "outbreak_prevention_cache_ttl", outbreak_prevention_cache_ttl)
        if outbreak_prevention_expiration and not isinstance(outbreak_prevention_expiration, int):
            raise TypeError("Expected argument 'outbreak_prevention_expiration' to be a int")
        pulumi.set(__self__, "outbreak_prevention_expiration", outbreak_prevention_expiration)
        if outbreak_prevention_force_off and not isinstance(outbreak_prevention_force_off, str):
            raise TypeError("Expected argument 'outbreak_prevention_force_off' to be a str")
        pulumi.set(__self__, "outbreak_prevention_force_off", outbreak_prevention_force_off)
        if outbreak_prevention_license and not isinstance(outbreak_prevention_license, int):
            raise TypeError("Expected argument 'outbreak_prevention_license' to be a int")
        pulumi.set(__self__, "outbreak_prevention_license", outbreak_prevention_license)
        if outbreak_prevention_timeout and not isinstance(outbreak_prevention_timeout, int):
            raise TypeError("Expected argument 'outbreak_prevention_timeout' to be a int")
        pulumi.set(__self__, "outbreak_prevention_timeout", outbreak_prevention_timeout)
        if persistent_connection and not isinstance(persistent_connection, str):
            raise TypeError("Expected argument 'persistent_connection' to be a str")
        pulumi.set(__self__, "persistent_connection", persistent_connection)
        if port and not isinstance(port, str):
            raise TypeError("Expected argument 'port' to be a str")
        pulumi.set(__self__, "port", port)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if proxy_password and not isinstance(proxy_password, str):
            raise TypeError("Expected argument 'proxy_password' to be a str")
        pulumi.set(__self__, "proxy_password", proxy_password)
        if proxy_server_ip and not isinstance(proxy_server_ip, str):
            raise TypeError("Expected argument 'proxy_server_ip' to be a str")
        pulumi.set(__self__, "proxy_server_ip", proxy_server_ip)
        if proxy_server_port and not isinstance(proxy_server_port, int):
            raise TypeError("Expected argument 'proxy_server_port' to be a int")
        pulumi.set(__self__, "proxy_server_port", proxy_server_port)
        if proxy_username and not isinstance(proxy_username, str):
            raise TypeError("Expected argument 'proxy_username' to be a str")
        pulumi.set(__self__, "proxy_username", proxy_username)
        if sandbox_inline_scan and not isinstance(sandbox_inline_scan, str):
            raise TypeError("Expected argument 'sandbox_inline_scan' to be a str")
        pulumi.set(__self__, "sandbox_inline_scan", sandbox_inline_scan)
        if sandbox_region and not isinstance(sandbox_region, str):
            raise TypeError("Expected argument 'sandbox_region' to be a str")
        pulumi.set(__self__, "sandbox_region", sandbox_region)
        if sdns_options and not isinstance(sdns_options, str):
            raise TypeError("Expected argument 'sdns_options' to be a str")
        pulumi.set(__self__, "sdns_options", sdns_options)
        if sdns_server_ip and not isinstance(sdns_server_ip, str):
            raise TypeError("Expected argument 'sdns_server_ip' to be a str")
        pulumi.set(__self__, "sdns_server_ip", sdns_server_ip)
        if sdns_server_port and not isinstance(sdns_server_port, int):
            raise TypeError("Expected argument 'sdns_server_port' to be a int")
        pulumi.set(__self__, "sdns_server_port", sdns_server_port)
        if service_account_id and not isinstance(service_account_id, str):
            raise TypeError("Expected argument 'service_account_id' to be a str")
        pulumi.set(__self__, "service_account_id", service_account_id)
        if source_ip and not isinstance(source_ip, str):
            raise TypeError("Expected argument 'source_ip' to be a str")
        pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 and not isinstance(source_ip6, str):
            raise TypeError("Expected argument 'source_ip6' to be a str")
        pulumi.set(__self__, "source_ip6", source_ip6)
        if update_build_proxy and not isinstance(update_build_proxy, str):
            raise TypeError("Expected argument 'update_build_proxy' to be a str")
        pulumi.set(__self__, "update_build_proxy", update_build_proxy)
        if update_dldb and not isinstance(update_dldb, str):
            raise TypeError("Expected argument 'update_dldb' to be a str")
        pulumi.set(__self__, "update_dldb", update_dldb)
        if update_extdb and not isinstance(update_extdb, str):
            raise TypeError("Expected argument 'update_extdb' to be a str")
        pulumi.set(__self__, "update_extdb", update_extdb)
        if update_ffdb and not isinstance(update_ffdb, str):
            raise TypeError("Expected argument 'update_ffdb' to be a str")
        pulumi.set(__self__, "update_ffdb", update_ffdb)
        if update_server_location and not isinstance(update_server_location, str):
            raise TypeError("Expected argument 'update_server_location' to be a str")
        pulumi.set(__self__, "update_server_location", update_server_location)
        if update_uwdb and not isinstance(update_uwdb, str):
            raise TypeError("Expected argument 'update_uwdb' to be a str")
        pulumi.set(__self__, "update_uwdb", update_uwdb)
        if vdom and not isinstance(vdom, str):
            raise TypeError("Expected argument 'vdom' to be a str")
        pulumi.set(__self__, "vdom", vdom)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if videofilter_expiration and not isinstance(videofilter_expiration, int):
            raise TypeError("Expected argument 'videofilter_expiration' to be a int")
        pulumi.set(__self__, "videofilter_expiration", videofilter_expiration)
        if videofilter_license and not isinstance(videofilter_license, int):
            raise TypeError("Expected argument 'videofilter_license' to be a int")
        pulumi.set(__self__, "videofilter_license", videofilter_license)
        if webfilter_cache and not isinstance(webfilter_cache, str):
            raise TypeError("Expected argument 'webfilter_cache' to be a str")
        pulumi.set(__self__, "webfilter_cache", webfilter_cache)
        if webfilter_cache_ttl and not isinstance(webfilter_cache_ttl, int):
            raise TypeError("Expected argument 'webfilter_cache_ttl' to be a int")
        pulumi.set(__self__, "webfilter_cache_ttl", webfilter_cache_ttl)
        if webfilter_expiration and not isinstance(webfilter_expiration, int):
            raise TypeError("Expected argument 'webfilter_expiration' to be a int")
        pulumi.set(__self__, "webfilter_expiration", webfilter_expiration)
        if webfilter_force_off and not isinstance(webfilter_force_off, str):
            raise TypeError("Expected argument 'webfilter_force_off' to be a str")
        pulumi.set(__self__, "webfilter_force_off", webfilter_force_off)
        if webfilter_license and not isinstance(webfilter_license, int):
            raise TypeError("Expected argument 'webfilter_license' to be a int")
        pulumi.set(__self__, "webfilter_license", webfilter_license)
        if webfilter_timeout and not isinstance(webfilter_timeout, int):
            raise TypeError("Expected argument 'webfilter_timeout' to be a int")
        pulumi.set(__self__, "webfilter_timeout", webfilter_timeout)

    @property
    @pulumi.getter(name="antispamCache")
    def antispam_cache(self) -> str:
        """
        Enable/disable FortiGuard antispam request caching. Uses a small amount of memory but improves performance.
        """
        return pulumi.get(self, "antispam_cache")

    @property
    @pulumi.getter(name="antispamCacheMpercent")
    def antispam_cache_mpercent(self) -> int:
        """
        Maximum percent of FortiGate memory the antispam cache is allowed to use (1 - 15%!)(MISSING).
        """
        return pulumi.get(self, "antispam_cache_mpercent")

    @property
    @pulumi.getter(name="antispamCacheMpermille")
    def antispam_cache_mpermille(self) -> int:
        """
        Maximum permille of FortiGate memory the antispam cache is allowed to use (1 - 150).
        """
        return pulumi.get(self, "antispam_cache_mpermille")

    @property
    @pulumi.getter(name="antispamCacheTtl")
    def antispam_cache_ttl(self) -> int:
        """
        Time-to-live for antispam cache entries in seconds (300 - 86400). Lower times reduce the cache size. Higher times may improve performance since the cache will have more entries.
        """
        return pulumi.get(self, "antispam_cache_ttl")

    @property
    @pulumi.getter(name="antispamExpiration")
    def antispam_expiration(self) -> int:
        """
        Expiration date of the FortiGuard antispam contract.
        """
        return pulumi.get(self, "antispam_expiration")

    @property
    @pulumi.getter(name="antispamForceOff")
    def antispam_force_off(self) -> str:
        """
        Enable/disable turning off the FortiGuard antispam service.
        """
        return pulumi.get(self, "antispam_force_off")

    @property
    @pulumi.getter(name="antispamLicense")
    def antispam_license(self) -> int:
        """
        Interval of time between license checks for the FortiGuard antispam contract.
        """
        return pulumi.get(self, "antispam_license")

    @property
    @pulumi.getter(name="antispamTimeout")
    def antispam_timeout(self) -> int:
        """
        Antispam query time out (1 - 30 sec, default = 7).
        """
        return pulumi.get(self, "antispam_timeout")

    @property
    @pulumi.getter(name="anycastSdnsServerIp")
    def anycast_sdns_server_ip(self) -> str:
        """
        IP address of the FortiGuard anycast DNS rating server.
        """
        return pulumi.get(self, "anycast_sdns_server_ip")

    @property
    @pulumi.getter(name="anycastSdnsServerPort")
    def anycast_sdns_server_port(self) -> int:
        """
        Port to connect to on the FortiGuard anycast DNS rating server.
        """
        return pulumi.get(self, "anycast_sdns_server_port")

    @property
    @pulumi.getter(name="autoFirmwareUpgrade")
    def auto_firmware_upgrade(self) -> str:
        """
        Enable/disable automatic patch-level firmware upgrade from FortiGuard. The FortiGate unit searches for new patches only in the same major and minor version.
        """
        return pulumi.get(self, "auto_firmware_upgrade")

    @property
    @pulumi.getter(name="autoFirmwareUpgradeDay")
    def auto_firmware_upgrade_day(self) -> str:
        """
        Allowed day(s) of the week to start automatic patch-level firmware upgrade from FortiGuard.
        """
        return pulumi.get(self, "auto_firmware_upgrade_day")

    @property
    @pulumi.getter(name="autoFirmwareUpgradeDelay")
    def auto_firmware_upgrade_delay(self) -> int:
        """
        Delay of day(s) before installing an automatic patch-level firmware upgrade from FortiGuard (default = 3). Set it 0 to use auto-firmware-upgrade-day instead, which selects allowed day(s) of the week for installing an automatic patch-level firmware upgrade.
        """
        return pulumi.get(self, "auto_firmware_upgrade_delay")

    @property
    @pulumi.getter(name="autoFirmwareUpgradeEndHour")
    def auto_firmware_upgrade_end_hour(self) -> int:
        """
        End time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 4). When the end time is smaller than the start time, the end time is interpreted as the next day. The actual upgrade time is selected randomly within the time window.
        """
        return pulumi.get(self, "auto_firmware_upgrade_end_hour")

    @property
    @pulumi.getter(name="autoFirmwareUpgradeStartHour")
    def auto_firmware_upgrade_start_hour(self) -> int:
        """
        Start time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 2). The actual upgrade time is selected randomly within the time window.
        """
        return pulumi.get(self, "auto_firmware_upgrade_start_hour")

    @property
    @pulumi.getter(name="autoJoinForticloud")
    def auto_join_forticloud(self) -> str:
        """
        Automatically connect to and login to FortiCloud.
        """
        return pulumi.get(self, "auto_join_forticloud")

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> str:
        """
        IP address of the FortiDDNS server.
        """
        return pulumi.get(self, "ddns_server_ip")

    @property
    @pulumi.getter(name="ddnsServerIp6")
    def ddns_server_ip6(self) -> str:
        """
        IPv6 address of the FortiDDNS server.
        """
        return pulumi.get(self, "ddns_server_ip6")

    @property
    @pulumi.getter(name="ddnsServerPort")
    def ddns_server_port(self) -> int:
        """
        Port used to communicate with FortiDDNS servers.
        """
        return pulumi.get(self, "ddns_server_port")

    @property
    @pulumi.getter(name="fdsLicenseExpiringDays")
    def fds_license_expiring_days(self) -> int:
        """
        Threshold for number of days before FortiGuard license expiration to generate license expiring event log (1 - 100 days, default = 15).
        """
        return pulumi.get(self, "fds_license_expiring_days")

    @property
    @pulumi.getter(name="fortiguardAnycast")
    def fortiguard_anycast(self) -> str:
        """
        Enable/disable use of FortiGuard's anycast network.
        """
        return pulumi.get(self, "fortiguard_anycast")

    @property
    @pulumi.getter(name="fortiguardAnycastSource")
    def fortiguard_anycast_source(self) -> str:
        """
        Configure which of Fortinet's servers to provide FortiGuard services in FortiGuard's anycast network. Default is Fortinet.
        """
        return pulumi.get(self, "fortiguard_anycast_source")

    @property
    @pulumi.getter(name="guiPromptAutoUpgrade")
    def gui_prompt_auto_upgrade(self) -> str:
        """
        Enable/disable prompting of automatic patch-level firmware upgrade recommendation.
        """
        return pulumi.get(self, "gui_prompt_auto_upgrade")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> str:
        """
        Specify how to select outgoing interface to reach server.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="loadBalanceServers")
    def load_balance_servers(self) -> int:
        """
        Number of servers to alternate between as first FortiGuard option.
        """
        return pulumi.get(self, "load_balance_servers")

    @property
    @pulumi.getter(name="outbreakPreventionCache")
    def outbreak_prevention_cache(self) -> str:
        """
        Enable/disable FortiGuard Virus Outbreak Prevention cache.
        """
        return pulumi.get(self, "outbreak_prevention_cache")

    @property
    @pulumi.getter(name="outbreakPreventionCacheMpercent")
    def outbreak_prevention_cache_mpercent(self) -> int:
        """
        Maximum percent of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 15%!,(MISSING) default = 2).
        """
        return pulumi.get(self, "outbreak_prevention_cache_mpercent")

    @property
    @pulumi.getter(name="outbreakPreventionCacheMpermille")
    def outbreak_prevention_cache_mpermille(self) -> int:
        """
        Maximum permille of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 150 permille, default = 1).
        """
        return pulumi.get(self, "outbreak_prevention_cache_mpermille")

    @property
    @pulumi.getter(name="outbreakPreventionCacheTtl")
    def outbreak_prevention_cache_ttl(self) -> int:
        """
        Time-to-live for FortiGuard Virus Outbreak Prevention cache entries (300 - 86400 sec, default = 300).
        """
        return pulumi.get(self, "outbreak_prevention_cache_ttl")

    @property
    @pulumi.getter(name="outbreakPreventionExpiration")
    def outbreak_prevention_expiration(self) -> int:
        """
        Expiration date of FortiGuard Virus Outbreak Prevention contract.
        """
        return pulumi.get(self, "outbreak_prevention_expiration")

    @property
    @pulumi.getter(name="outbreakPreventionForceOff")
    def outbreak_prevention_force_off(self) -> str:
        """
        Turn off FortiGuard Virus Outbreak Prevention service.
        """
        return pulumi.get(self, "outbreak_prevention_force_off")

    @property
    @pulumi.getter(name="outbreakPreventionLicense")
    def outbreak_prevention_license(self) -> int:
        """
        Interval of time between license checks for FortiGuard Virus Outbreak Prevention contract.
        """
        return pulumi.get(self, "outbreak_prevention_license")

    @property
    @pulumi.getter(name="outbreakPreventionTimeout")
    def outbreak_prevention_timeout(self) -> int:
        """
        FortiGuard Virus Outbreak Prevention time out (1 - 30 sec, default = 7).
        """
        return pulumi.get(self, "outbreak_prevention_timeout")

    @property
    @pulumi.getter(name="persistentConnection")
    def persistent_connection(self) -> str:
        """
        Enable/disable use of persistent connection to receive update notification from FortiGuard.
        """
        return pulumi.get(self, "persistent_connection")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        Port used to communicate with the FortiGuard servers.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol used to communicate with the FortiGuard servers.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="proxyPassword")
    def proxy_password(self) -> str:
        """
        Proxy user password.
        """
        return pulumi.get(self, "proxy_password")

    @property
    @pulumi.getter(name="proxyServerIp")
    def proxy_server_ip(self) -> str:
        """
        IP address of the proxy server.
        """
        return pulumi.get(self, "proxy_server_ip")

    @property
    @pulumi.getter(name="proxyServerPort")
    def proxy_server_port(self) -> int:
        """
        Port used to communicate with the proxy server.
        """
        return pulumi.get(self, "proxy_server_port")

    @property
    @pulumi.getter(name="proxyUsername")
    def proxy_username(self) -> str:
        """
        Proxy user name.
        """
        return pulumi.get(self, "proxy_username")

    @property
    @pulumi.getter(name="sandboxInlineScan")
    def sandbox_inline_scan(self) -> str:
        """
        Enable/disable FortiCloud Sandbox inline-scan.
        """
        return pulumi.get(self, "sandbox_inline_scan")

    @property
    @pulumi.getter(name="sandboxRegion")
    def sandbox_region(self) -> str:
        """
        Cloud sandbox region.
        """
        return pulumi.get(self, "sandbox_region")

    @property
    @pulumi.getter(name="sdnsOptions")
    def sdns_options(self) -> str:
        """
        Customization options for the FortiGuard DNS service.
        """
        return pulumi.get(self, "sdns_options")

    @property
    @pulumi.getter(name="sdnsServerIp")
    def sdns_server_ip(self) -> str:
        """
        IP address of the FortiDNS server.
        """
        return pulumi.get(self, "sdns_server_ip")

    @property
    @pulumi.getter(name="sdnsServerPort")
    def sdns_server_port(self) -> int:
        """
        Port used to communicate with FortiDNS servers.
        """
        return pulumi.get(self, "sdns_server_port")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        """
        Service account ID.
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> str:
        """
        Source IPv4 address used to communicate with FortiGuard.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> str:
        """
        Source IPv6 address used to communicate with FortiGuard.
        """
        return pulumi.get(self, "source_ip6")

    @property
    @pulumi.getter(name="updateBuildProxy")
    def update_build_proxy(self) -> str:
        """
        Enable/disable proxy dictionary rebuild.
        """
        return pulumi.get(self, "update_build_proxy")

    @property
    @pulumi.getter(name="updateDldb")
    def update_dldb(self) -> str:
        """
        Enable/disable DLP signature update.
        """
        return pulumi.get(self, "update_dldb")

    @property
    @pulumi.getter(name="updateExtdb")
    def update_extdb(self) -> str:
        """
        Enable/disable external resource update.
        """
        return pulumi.get(self, "update_extdb")

    @property
    @pulumi.getter(name="updateFfdb")
    def update_ffdb(self) -> str:
        """
        Enable/disable Internet Service Database update.
        """
        return pulumi.get(self, "update_ffdb")

    @property
    @pulumi.getter(name="updateServerLocation")
    def update_server_location(self) -> str:
        """
        Signature update server location.
        """
        return pulumi.get(self, "update_server_location")

    @property
    @pulumi.getter(name="updateUwdb")
    def update_uwdb(self) -> str:
        """
        Enable/disable allowlist update.
        """
        return pulumi.get(self, "update_uwdb")

    @property
    @pulumi.getter
    def vdom(self) -> str:
        """
        FortiGuard Service virtual domain name.
        """
        return pulumi.get(self, "vdom")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="videofilterExpiration")
    def videofilter_expiration(self) -> int:
        """
        Expiration date of the FortiGuard video filter contract.
        """
        return pulumi.get(self, "videofilter_expiration")

    @property
    @pulumi.getter(name="videofilterLicense")
    def videofilter_license(self) -> int:
        """
        Interval of time between license checks for the FortiGuard video filter contract.
        """
        return pulumi.get(self, "videofilter_license")

    @property
    @pulumi.getter(name="webfilterCache")
    def webfilter_cache(self) -> str:
        """
        Enable/disable FortiGuard web filter caching.
        """
        return pulumi.get(self, "webfilter_cache")

    @property
    @pulumi.getter(name="webfilterCacheTtl")
    def webfilter_cache_ttl(self) -> int:
        """
        Time-to-live for web filter cache entries in seconds (300 - 86400).
        """
        return pulumi.get(self, "webfilter_cache_ttl")

    @property
    @pulumi.getter(name="webfilterExpiration")
    def webfilter_expiration(self) -> int:
        """
        Expiration date of the FortiGuard web filter contract.
        """
        return pulumi.get(self, "webfilter_expiration")

    @property
    @pulumi.getter(name="webfilterForceOff")
    def webfilter_force_off(self) -> str:
        """
        Enable/disable turning off the FortiGuard web filtering service.
        """
        return pulumi.get(self, "webfilter_force_off")

    @property
    @pulumi.getter(name="webfilterLicense")
    def webfilter_license(self) -> int:
        """
        Interval of time between license checks for the FortiGuard web filter contract.
        """
        return pulumi.get(self, "webfilter_license")

    @property
    @pulumi.getter(name="webfilterTimeout")
    def webfilter_timeout(self) -> int:
        """
        Web filter query time out (1 - 30 sec, default = 7).
        """
        return pulumi.get(self, "webfilter_timeout")


class AwaitableGetFortiguardResult(GetFortiguardResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFortiguardResult(
            antispam_cache=self.antispam_cache,
            antispam_cache_mpercent=self.antispam_cache_mpercent,
            antispam_cache_mpermille=self.antispam_cache_mpermille,
            antispam_cache_ttl=self.antispam_cache_ttl,
            antispam_expiration=self.antispam_expiration,
            antispam_force_off=self.antispam_force_off,
            antispam_license=self.antispam_license,
            antispam_timeout=self.antispam_timeout,
            anycast_sdns_server_ip=self.anycast_sdns_server_ip,
            anycast_sdns_server_port=self.anycast_sdns_server_port,
            auto_firmware_upgrade=self.auto_firmware_upgrade,
            auto_firmware_upgrade_day=self.auto_firmware_upgrade_day,
            auto_firmware_upgrade_delay=self.auto_firmware_upgrade_delay,
            auto_firmware_upgrade_end_hour=self.auto_firmware_upgrade_end_hour,
            auto_firmware_upgrade_start_hour=self.auto_firmware_upgrade_start_hour,
            auto_join_forticloud=self.auto_join_forticloud,
            ddns_server_ip=self.ddns_server_ip,
            ddns_server_ip6=self.ddns_server_ip6,
            ddns_server_port=self.ddns_server_port,
            fds_license_expiring_days=self.fds_license_expiring_days,
            fortiguard_anycast=self.fortiguard_anycast,
            fortiguard_anycast_source=self.fortiguard_anycast_source,
            gui_prompt_auto_upgrade=self.gui_prompt_auto_upgrade,
            id=self.id,
            interface=self.interface,
            interface_select_method=self.interface_select_method,
            load_balance_servers=self.load_balance_servers,
            outbreak_prevention_cache=self.outbreak_prevention_cache,
            outbreak_prevention_cache_mpercent=self.outbreak_prevention_cache_mpercent,
            outbreak_prevention_cache_mpermille=self.outbreak_prevention_cache_mpermille,
            outbreak_prevention_cache_ttl=self.outbreak_prevention_cache_ttl,
            outbreak_prevention_expiration=self.outbreak_prevention_expiration,
            outbreak_prevention_force_off=self.outbreak_prevention_force_off,
            outbreak_prevention_license=self.outbreak_prevention_license,
            outbreak_prevention_timeout=self.outbreak_prevention_timeout,
            persistent_connection=self.persistent_connection,
            port=self.port,
            protocol=self.protocol,
            proxy_password=self.proxy_password,
            proxy_server_ip=self.proxy_server_ip,
            proxy_server_port=self.proxy_server_port,
            proxy_username=self.proxy_username,
            sandbox_inline_scan=self.sandbox_inline_scan,
            sandbox_region=self.sandbox_region,
            sdns_options=self.sdns_options,
            sdns_server_ip=self.sdns_server_ip,
            sdns_server_port=self.sdns_server_port,
            service_account_id=self.service_account_id,
            source_ip=self.source_ip,
            source_ip6=self.source_ip6,
            update_build_proxy=self.update_build_proxy,
            update_dldb=self.update_dldb,
            update_extdb=self.update_extdb,
            update_ffdb=self.update_ffdb,
            update_server_location=self.update_server_location,
            update_uwdb=self.update_uwdb,
            vdom=self.vdom,
            vdomparam=self.vdomparam,
            videofilter_expiration=self.videofilter_expiration,
            videofilter_license=self.videofilter_license,
            webfilter_cache=self.webfilter_cache,
            webfilter_cache_ttl=self.webfilter_cache_ttl,
            webfilter_expiration=self.webfilter_expiration,
            webfilter_force_off=self.webfilter_force_off,
            webfilter_license=self.webfilter_license,
            webfilter_timeout=self.webfilter_timeout)


def get_fortiguard(vdomparam: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFortiguardResult:
    """
    Use this data source to get information on fortios system fortiguard


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:system/getFortiguard:getFortiguard', __args__, opts=opts, typ=GetFortiguardResult).value

    return AwaitableGetFortiguardResult(
        antispam_cache=pulumi.get(__ret__, 'antispam_cache'),
        antispam_cache_mpercent=pulumi.get(__ret__, 'antispam_cache_mpercent'),
        antispam_cache_mpermille=pulumi.get(__ret__, 'antispam_cache_mpermille'),
        antispam_cache_ttl=pulumi.get(__ret__, 'antispam_cache_ttl'),
        antispam_expiration=pulumi.get(__ret__, 'antispam_expiration'),
        antispam_force_off=pulumi.get(__ret__, 'antispam_force_off'),
        antispam_license=pulumi.get(__ret__, 'antispam_license'),
        antispam_timeout=pulumi.get(__ret__, 'antispam_timeout'),
        anycast_sdns_server_ip=pulumi.get(__ret__, 'anycast_sdns_server_ip'),
        anycast_sdns_server_port=pulumi.get(__ret__, 'anycast_sdns_server_port'),
        auto_firmware_upgrade=pulumi.get(__ret__, 'auto_firmware_upgrade'),
        auto_firmware_upgrade_day=pulumi.get(__ret__, 'auto_firmware_upgrade_day'),
        auto_firmware_upgrade_delay=pulumi.get(__ret__, 'auto_firmware_upgrade_delay'),
        auto_firmware_upgrade_end_hour=pulumi.get(__ret__, 'auto_firmware_upgrade_end_hour'),
        auto_firmware_upgrade_start_hour=pulumi.get(__ret__, 'auto_firmware_upgrade_start_hour'),
        auto_join_forticloud=pulumi.get(__ret__, 'auto_join_forticloud'),
        ddns_server_ip=pulumi.get(__ret__, 'ddns_server_ip'),
        ddns_server_ip6=pulumi.get(__ret__, 'ddns_server_ip6'),
        ddns_server_port=pulumi.get(__ret__, 'ddns_server_port'),
        fds_license_expiring_days=pulumi.get(__ret__, 'fds_license_expiring_days'),
        fortiguard_anycast=pulumi.get(__ret__, 'fortiguard_anycast'),
        fortiguard_anycast_source=pulumi.get(__ret__, 'fortiguard_anycast_source'),
        gui_prompt_auto_upgrade=pulumi.get(__ret__, 'gui_prompt_auto_upgrade'),
        id=pulumi.get(__ret__, 'id'),
        interface=pulumi.get(__ret__, 'interface'),
        interface_select_method=pulumi.get(__ret__, 'interface_select_method'),
        load_balance_servers=pulumi.get(__ret__, 'load_balance_servers'),
        outbreak_prevention_cache=pulumi.get(__ret__, 'outbreak_prevention_cache'),
        outbreak_prevention_cache_mpercent=pulumi.get(__ret__, 'outbreak_prevention_cache_mpercent'),
        outbreak_prevention_cache_mpermille=pulumi.get(__ret__, 'outbreak_prevention_cache_mpermille'),
        outbreak_prevention_cache_ttl=pulumi.get(__ret__, 'outbreak_prevention_cache_ttl'),
        outbreak_prevention_expiration=pulumi.get(__ret__, 'outbreak_prevention_expiration'),
        outbreak_prevention_force_off=pulumi.get(__ret__, 'outbreak_prevention_force_off'),
        outbreak_prevention_license=pulumi.get(__ret__, 'outbreak_prevention_license'),
        outbreak_prevention_timeout=pulumi.get(__ret__, 'outbreak_prevention_timeout'),
        persistent_connection=pulumi.get(__ret__, 'persistent_connection'),
        port=pulumi.get(__ret__, 'port'),
        protocol=pulumi.get(__ret__, 'protocol'),
        proxy_password=pulumi.get(__ret__, 'proxy_password'),
        proxy_server_ip=pulumi.get(__ret__, 'proxy_server_ip'),
        proxy_server_port=pulumi.get(__ret__, 'proxy_server_port'),
        proxy_username=pulumi.get(__ret__, 'proxy_username'),
        sandbox_inline_scan=pulumi.get(__ret__, 'sandbox_inline_scan'),
        sandbox_region=pulumi.get(__ret__, 'sandbox_region'),
        sdns_options=pulumi.get(__ret__, 'sdns_options'),
        sdns_server_ip=pulumi.get(__ret__, 'sdns_server_ip'),
        sdns_server_port=pulumi.get(__ret__, 'sdns_server_port'),
        service_account_id=pulumi.get(__ret__, 'service_account_id'),
        source_ip=pulumi.get(__ret__, 'source_ip'),
        source_ip6=pulumi.get(__ret__, 'source_ip6'),
        update_build_proxy=pulumi.get(__ret__, 'update_build_proxy'),
        update_dldb=pulumi.get(__ret__, 'update_dldb'),
        update_extdb=pulumi.get(__ret__, 'update_extdb'),
        update_ffdb=pulumi.get(__ret__, 'update_ffdb'),
        update_server_location=pulumi.get(__ret__, 'update_server_location'),
        update_uwdb=pulumi.get(__ret__, 'update_uwdb'),
        vdom=pulumi.get(__ret__, 'vdom'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        videofilter_expiration=pulumi.get(__ret__, 'videofilter_expiration'),
        videofilter_license=pulumi.get(__ret__, 'videofilter_license'),
        webfilter_cache=pulumi.get(__ret__, 'webfilter_cache'),
        webfilter_cache_ttl=pulumi.get(__ret__, 'webfilter_cache_ttl'),
        webfilter_expiration=pulumi.get(__ret__, 'webfilter_expiration'),
        webfilter_force_off=pulumi.get(__ret__, 'webfilter_force_off'),
        webfilter_license=pulumi.get(__ret__, 'webfilter_license'),
        webfilter_timeout=pulumi.get(__ret__, 'webfilter_timeout'))


@_utilities.lift_output_func(get_fortiguard)
def get_fortiguard_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFortiguardResult]:
    """
    Use this data source to get information on fortios system fortiguard


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
