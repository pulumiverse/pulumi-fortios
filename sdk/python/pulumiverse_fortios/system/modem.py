# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ModemArgs', 'Modem']

@pulumi.input_type
class ModemArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 altmode: Optional[pulumi.Input[str]] = None,
                 authtype1: Optional[pulumi.Input[str]] = None,
                 authtype2: Optional[pulumi.Input[str]] = None,
                 authtype3: Optional[pulumi.Input[str]] = None,
                 auto_dial: Optional[pulumi.Input[str]] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 dial_cmd1: Optional[pulumi.Input[str]] = None,
                 dial_cmd2: Optional[pulumi.Input[str]] = None,
                 dial_cmd3: Optional[pulumi.Input[str]] = None,
                 dial_on_demand: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dont_send_cr1: Optional[pulumi.Input[str]] = None,
                 dont_send_cr2: Optional[pulumi.Input[str]] = None,
                 dont_send_cr3: Optional[pulumi.Input[str]] = None,
                 extra_init1: Optional[pulumi.Input[str]] = None,
                 extra_init2: Optional[pulumi.Input[str]] = None,
                 extra_init3: Optional[pulumi.Input[str]] = None,
                 holddown_timer: Optional[pulumi.Input[int]] = None,
                 idle_timer: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 lockdown_lac: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 network_init: Optional[pulumi.Input[str]] = None,
                 passwd1: Optional[pulumi.Input[str]] = None,
                 passwd2: Optional[pulumi.Input[str]] = None,
                 passwd3: Optional[pulumi.Input[str]] = None,
                 peer_modem1: Optional[pulumi.Input[str]] = None,
                 peer_modem2: Optional[pulumi.Input[str]] = None,
                 peer_modem3: Optional[pulumi.Input[str]] = None,
                 phone1: Optional[pulumi.Input[str]] = None,
                 phone2: Optional[pulumi.Input[str]] = None,
                 phone3: Optional[pulumi.Input[str]] = None,
                 pin_init: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request1: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request2: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request3: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 redial: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 traffic_check: Optional[pulumi.Input[str]] = None,
                 username1: Optional[pulumi.Input[str]] = None,
                 username2: Optional[pulumi.Input[str]] = None,
                 username3: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wireless_port: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Modem resource.
        :param pulumi.Input[str] action: Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
        :param pulumi.Input[str] altmode: Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] authtype1: Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        :param pulumi.Input[str] authtype2: Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        :param pulumi.Input[str] authtype3: Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        :param pulumi.Input[str] auto_dial: Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] connect_timeout: Connection completion timeout (30 - 255 sec, default = 90).
        :param pulumi.Input[str] dial_cmd1: Dial command (this is often an ATD or ATDT command).
        :param pulumi.Input[str] dial_cmd2: Dial command (this is often an ATD or ATDT command).
        :param pulumi.Input[str] dial_cmd3: Dial command (this is often an ATD or ATDT command).
        :param pulumi.Input[str] dial_on_demand: Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] distance: Distance of learned routes (1 - 255, default = 1).
        :param pulumi.Input[str] dont_send_cr1: Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dont_send_cr2: Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dont_send_cr3: Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] extra_init1: Extra initialization string to ISP 1.
        :param pulumi.Input[str] extra_init2: Extra initialization string to ISP 2.
        :param pulumi.Input[str] extra_init3: Extra initialization string to ISP 3.
        :param pulumi.Input[int] holddown_timer: Hold down timer in seconds (1 - 60 sec).
        :param pulumi.Input[int] idle_timer: MODEM connection idle time (1 - 9999 min, default = 5).
        :param pulumi.Input[str] interface: Name of redundant interface.
        :param pulumi.Input[str] lockdown_lac: Allow connection only to the specified Location Area Code (LAC).
        :param pulumi.Input[str] mode: Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
        :param pulumi.Input[str] network_init: AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
        :param pulumi.Input[str] passwd1: Password to access the specified dialup account.
        :param pulumi.Input[str] passwd2: Password to access the specified dialup account.
        :param pulumi.Input[str] passwd3: Password to access the specified dialup account.
        :param pulumi.Input[str] peer_modem1: Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        :param pulumi.Input[str] peer_modem2: Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        :param pulumi.Input[str] peer_modem3: Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        :param pulumi.Input[str] phone1: Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        :param pulumi.Input[str] phone2: Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        :param pulumi.Input[str] phone3: Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        :param pulumi.Input[str] pin_init: AT command to set the PIN (AT+PIN=<pin>).
        :param pulumi.Input[str] ppp_echo_request1: Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_echo_request2: Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_echo_request3: Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Priority of learned routes (0 - 4294967295, default = 0).
        :param pulumi.Input[str] redial: Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
        :param pulumi.Input[int] reset: Number of dial attempts before resetting modem (0 = never reset).
        :param pulumi.Input[str] status: Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] traffic_check: Enable/disable traffic-check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] username1: User name to access the specified dialup account.
        :param pulumi.Input[str] username2: User name to access the specified dialup account.
        :param pulumi.Input[str] username3: User name to access the specified dialup account.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] wireless_port: Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if altmode is not None:
            pulumi.set(__self__, "altmode", altmode)
        if authtype1 is not None:
            pulumi.set(__self__, "authtype1", authtype1)
        if authtype2 is not None:
            pulumi.set(__self__, "authtype2", authtype2)
        if authtype3 is not None:
            pulumi.set(__self__, "authtype3", authtype3)
        if auto_dial is not None:
            pulumi.set(__self__, "auto_dial", auto_dial)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if dial_cmd1 is not None:
            pulumi.set(__self__, "dial_cmd1", dial_cmd1)
        if dial_cmd2 is not None:
            pulumi.set(__self__, "dial_cmd2", dial_cmd2)
        if dial_cmd3 is not None:
            pulumi.set(__self__, "dial_cmd3", dial_cmd3)
        if dial_on_demand is not None:
            pulumi.set(__self__, "dial_on_demand", dial_on_demand)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dont_send_cr1 is not None:
            pulumi.set(__self__, "dont_send_cr1", dont_send_cr1)
        if dont_send_cr2 is not None:
            pulumi.set(__self__, "dont_send_cr2", dont_send_cr2)
        if dont_send_cr3 is not None:
            pulumi.set(__self__, "dont_send_cr3", dont_send_cr3)
        if extra_init1 is not None:
            pulumi.set(__self__, "extra_init1", extra_init1)
        if extra_init2 is not None:
            pulumi.set(__self__, "extra_init2", extra_init2)
        if extra_init3 is not None:
            pulumi.set(__self__, "extra_init3", extra_init3)
        if holddown_timer is not None:
            pulumi.set(__self__, "holddown_timer", holddown_timer)
        if idle_timer is not None:
            pulumi.set(__self__, "idle_timer", idle_timer)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if lockdown_lac is not None:
            pulumi.set(__self__, "lockdown_lac", lockdown_lac)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if network_init is not None:
            pulumi.set(__self__, "network_init", network_init)
        if passwd1 is not None:
            pulumi.set(__self__, "passwd1", passwd1)
        if passwd2 is not None:
            pulumi.set(__self__, "passwd2", passwd2)
        if passwd3 is not None:
            pulumi.set(__self__, "passwd3", passwd3)
        if peer_modem1 is not None:
            pulumi.set(__self__, "peer_modem1", peer_modem1)
        if peer_modem2 is not None:
            pulumi.set(__self__, "peer_modem2", peer_modem2)
        if peer_modem3 is not None:
            pulumi.set(__self__, "peer_modem3", peer_modem3)
        if phone1 is not None:
            pulumi.set(__self__, "phone1", phone1)
        if phone2 is not None:
            pulumi.set(__self__, "phone2", phone2)
        if phone3 is not None:
            pulumi.set(__self__, "phone3", phone3)
        if pin_init is not None:
            pulumi.set(__self__, "pin_init", pin_init)
        if ppp_echo_request1 is not None:
            pulumi.set(__self__, "ppp_echo_request1", ppp_echo_request1)
        if ppp_echo_request2 is not None:
            pulumi.set(__self__, "ppp_echo_request2", ppp_echo_request2)
        if ppp_echo_request3 is not None:
            pulumi.set(__self__, "ppp_echo_request3", ppp_echo_request3)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if redial is not None:
            pulumi.set(__self__, "redial", redial)
        if reset is not None:
            pulumi.set(__self__, "reset", reset)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if traffic_check is not None:
            pulumi.set(__self__, "traffic_check", traffic_check)
        if username1 is not None:
            pulumi.set(__self__, "username1", username1)
        if username2 is not None:
            pulumi.set(__self__, "username2", username2)
        if username3 is not None:
            pulumi.set(__self__, "username3", username3)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wireless_port is not None:
            pulumi.set(__self__, "wireless_port", wireless_port)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def altmode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "altmode")

    @altmode.setter
    def altmode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "altmode", value)

    @property
    @pulumi.getter
    def authtype1(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        """
        return pulumi.get(self, "authtype1")

    @authtype1.setter
    def authtype1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authtype1", value)

    @property
    @pulumi.getter
    def authtype2(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        """
        return pulumi.get(self, "authtype2")

    @authtype2.setter
    def authtype2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authtype2", value)

    @property
    @pulumi.getter
    def authtype3(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        """
        return pulumi.get(self, "authtype3")

    @authtype3.setter
    def authtype3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authtype3", value)

    @property
    @pulumi.getter(name="autoDial")
    def auto_dial(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_dial")

    @auto_dial.setter
    def auto_dial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_dial", value)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Connection completion timeout (30 - 255 sec, default = 90).
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="dialCmd1")
    def dial_cmd1(self) -> Optional[pulumi.Input[str]]:
        """
        Dial command (this is often an ATD or ATDT command).
        """
        return pulumi.get(self, "dial_cmd1")

    @dial_cmd1.setter
    def dial_cmd1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dial_cmd1", value)

    @property
    @pulumi.getter(name="dialCmd2")
    def dial_cmd2(self) -> Optional[pulumi.Input[str]]:
        """
        Dial command (this is often an ATD or ATDT command).
        """
        return pulumi.get(self, "dial_cmd2")

    @dial_cmd2.setter
    def dial_cmd2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dial_cmd2", value)

    @property
    @pulumi.getter(name="dialCmd3")
    def dial_cmd3(self) -> Optional[pulumi.Input[str]]:
        """
        Dial command (this is often an ATD or ATDT command).
        """
        return pulumi.get(self, "dial_cmd3")

    @dial_cmd3.setter
    def dial_cmd3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dial_cmd3", value)

    @property
    @pulumi.getter(name="dialOnDemand")
    def dial_on_demand(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dial_on_demand")

    @dial_on_demand.setter
    def dial_on_demand(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dial_on_demand", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Distance of learned routes (1 - 255, default = 1).
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="dontSendCr1")
    def dont_send_cr1(self) -> Optional[pulumi.Input[str]]:
        """
        Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_send_cr1")

    @dont_send_cr1.setter
    def dont_send_cr1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dont_send_cr1", value)

    @property
    @pulumi.getter(name="dontSendCr2")
    def dont_send_cr2(self) -> Optional[pulumi.Input[str]]:
        """
        Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_send_cr2")

    @dont_send_cr2.setter
    def dont_send_cr2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dont_send_cr2", value)

    @property
    @pulumi.getter(name="dontSendCr3")
    def dont_send_cr3(self) -> Optional[pulumi.Input[str]]:
        """
        Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_send_cr3")

    @dont_send_cr3.setter
    def dont_send_cr3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dont_send_cr3", value)

    @property
    @pulumi.getter(name="extraInit1")
    def extra_init1(self) -> Optional[pulumi.Input[str]]:
        """
        Extra initialization string to ISP 1.
        """
        return pulumi.get(self, "extra_init1")

    @extra_init1.setter
    def extra_init1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_init1", value)

    @property
    @pulumi.getter(name="extraInit2")
    def extra_init2(self) -> Optional[pulumi.Input[str]]:
        """
        Extra initialization string to ISP 2.
        """
        return pulumi.get(self, "extra_init2")

    @extra_init2.setter
    def extra_init2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_init2", value)

    @property
    @pulumi.getter(name="extraInit3")
    def extra_init3(self) -> Optional[pulumi.Input[str]]:
        """
        Extra initialization string to ISP 3.
        """
        return pulumi.get(self, "extra_init3")

    @extra_init3.setter
    def extra_init3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_init3", value)

    @property
    @pulumi.getter(name="holddownTimer")
    def holddown_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Hold down timer in seconds (1 - 60 sec).
        """
        return pulumi.get(self, "holddown_timer")

    @holddown_timer.setter
    def holddown_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holddown_timer", value)

    @property
    @pulumi.getter(name="idleTimer")
    def idle_timer(self) -> Optional[pulumi.Input[int]]:
        """
        MODEM connection idle time (1 - 9999 min, default = 5).
        """
        return pulumi.get(self, "idle_timer")

    @idle_timer.setter
    def idle_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timer", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Name of redundant interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="lockdownLac")
    def lockdown_lac(self) -> Optional[pulumi.Input[str]]:
        """
        Allow connection only to the specified Location Area Code (LAC).
        """
        return pulumi.get(self, "lockdown_lac")

    @lockdown_lac.setter
    def lockdown_lac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lockdown_lac", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="networkInit")
    def network_init(self) -> Optional[pulumi.Input[str]]:
        """
        AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
        """
        return pulumi.get(self, "network_init")

    @network_init.setter
    def network_init(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_init", value)

    @property
    @pulumi.getter
    def passwd1(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access the specified dialup account.
        """
        return pulumi.get(self, "passwd1")

    @passwd1.setter
    def passwd1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd1", value)

    @property
    @pulumi.getter
    def passwd2(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access the specified dialup account.
        """
        return pulumi.get(self, "passwd2")

    @passwd2.setter
    def passwd2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd2", value)

    @property
    @pulumi.getter
    def passwd3(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access the specified dialup account.
        """
        return pulumi.get(self, "passwd3")

    @passwd3.setter
    def passwd3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd3", value)

    @property
    @pulumi.getter(name="peerModem1")
    def peer_modem1(self) -> Optional[pulumi.Input[str]]:
        """
        Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        """
        return pulumi.get(self, "peer_modem1")

    @peer_modem1.setter
    def peer_modem1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_modem1", value)

    @property
    @pulumi.getter(name="peerModem2")
    def peer_modem2(self) -> Optional[pulumi.Input[str]]:
        """
        Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        """
        return pulumi.get(self, "peer_modem2")

    @peer_modem2.setter
    def peer_modem2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_modem2", value)

    @property
    @pulumi.getter(name="peerModem3")
    def peer_modem3(self) -> Optional[pulumi.Input[str]]:
        """
        Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        """
        return pulumi.get(self, "peer_modem3")

    @peer_modem3.setter
    def peer_modem3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_modem3", value)

    @property
    @pulumi.getter
    def phone1(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        """
        return pulumi.get(self, "phone1")

    @phone1.setter
    def phone1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone1", value)

    @property
    @pulumi.getter
    def phone2(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        """
        return pulumi.get(self, "phone2")

    @phone2.setter
    def phone2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone2", value)

    @property
    @pulumi.getter
    def phone3(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        """
        return pulumi.get(self, "phone3")

    @phone3.setter
    def phone3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone3", value)

    @property
    @pulumi.getter(name="pinInit")
    def pin_init(self) -> Optional[pulumi.Input[str]]:
        """
        AT command to set the PIN (AT+PIN=<pin>).
        """
        return pulumi.get(self, "pin_init")

    @pin_init.setter
    def pin_init(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pin_init", value)

    @property
    @pulumi.getter(name="pppEchoRequest1")
    def ppp_echo_request1(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_echo_request1")

    @ppp_echo_request1.setter
    def ppp_echo_request1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_echo_request1", value)

    @property
    @pulumi.getter(name="pppEchoRequest2")
    def ppp_echo_request2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_echo_request2")

    @ppp_echo_request2.setter
    def ppp_echo_request2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_echo_request2", value)

    @property
    @pulumi.getter(name="pppEchoRequest3")
    def ppp_echo_request3(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_echo_request3")

    @ppp_echo_request3.setter
    def ppp_echo_request3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_echo_request3", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of learned routes (0 - 4294967295, default = 0).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def redial(self) -> Optional[pulumi.Input[str]]:
        """
        Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
        """
        return pulumi.get(self, "redial")

    @redial.setter
    def redial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redial", value)

    @property
    @pulumi.getter
    def reset(self) -> Optional[pulumi.Input[int]]:
        """
        Number of dial attempts before resetting modem (0 = never reset).
        """
        return pulumi.get(self, "reset")

    @reset.setter
    def reset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reset", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trafficCheck")
    def traffic_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable traffic-check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "traffic_check")

    @traffic_check.setter
    def traffic_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_check", value)

    @property
    @pulumi.getter
    def username1(self) -> Optional[pulumi.Input[str]]:
        """
        User name to access the specified dialup account.
        """
        return pulumi.get(self, "username1")

    @username1.setter
    def username1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username1", value)

    @property
    @pulumi.getter
    def username2(self) -> Optional[pulumi.Input[str]]:
        """
        User name to access the specified dialup account.
        """
        return pulumi.get(self, "username2")

    @username2.setter
    def username2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username2", value)

    @property
    @pulumi.getter
    def username3(self) -> Optional[pulumi.Input[str]]:
        """
        User name to access the specified dialup account.
        """
        return pulumi.get(self, "username3")

    @username3.setter
    def username3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username3", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wirelessPort")
    def wireless_port(self) -> Optional[pulumi.Input[int]]:
        """
        Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
        """
        return pulumi.get(self, "wireless_port")

    @wireless_port.setter
    def wireless_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wireless_port", value)


@pulumi.input_type
class _ModemState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 altmode: Optional[pulumi.Input[str]] = None,
                 authtype1: Optional[pulumi.Input[str]] = None,
                 authtype2: Optional[pulumi.Input[str]] = None,
                 authtype3: Optional[pulumi.Input[str]] = None,
                 auto_dial: Optional[pulumi.Input[str]] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 dial_cmd1: Optional[pulumi.Input[str]] = None,
                 dial_cmd2: Optional[pulumi.Input[str]] = None,
                 dial_cmd3: Optional[pulumi.Input[str]] = None,
                 dial_on_demand: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dont_send_cr1: Optional[pulumi.Input[str]] = None,
                 dont_send_cr2: Optional[pulumi.Input[str]] = None,
                 dont_send_cr3: Optional[pulumi.Input[str]] = None,
                 extra_init1: Optional[pulumi.Input[str]] = None,
                 extra_init2: Optional[pulumi.Input[str]] = None,
                 extra_init3: Optional[pulumi.Input[str]] = None,
                 holddown_timer: Optional[pulumi.Input[int]] = None,
                 idle_timer: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 lockdown_lac: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 network_init: Optional[pulumi.Input[str]] = None,
                 passwd1: Optional[pulumi.Input[str]] = None,
                 passwd2: Optional[pulumi.Input[str]] = None,
                 passwd3: Optional[pulumi.Input[str]] = None,
                 peer_modem1: Optional[pulumi.Input[str]] = None,
                 peer_modem2: Optional[pulumi.Input[str]] = None,
                 peer_modem3: Optional[pulumi.Input[str]] = None,
                 phone1: Optional[pulumi.Input[str]] = None,
                 phone2: Optional[pulumi.Input[str]] = None,
                 phone3: Optional[pulumi.Input[str]] = None,
                 pin_init: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request1: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request2: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request3: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 redial: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 traffic_check: Optional[pulumi.Input[str]] = None,
                 username1: Optional[pulumi.Input[str]] = None,
                 username2: Optional[pulumi.Input[str]] = None,
                 username3: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wireless_port: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Modem resources.
        :param pulumi.Input[str] action: Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
        :param pulumi.Input[str] altmode: Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] authtype1: Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        :param pulumi.Input[str] authtype2: Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        :param pulumi.Input[str] authtype3: Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        :param pulumi.Input[str] auto_dial: Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] connect_timeout: Connection completion timeout (30 - 255 sec, default = 90).
        :param pulumi.Input[str] dial_cmd1: Dial command (this is often an ATD or ATDT command).
        :param pulumi.Input[str] dial_cmd2: Dial command (this is often an ATD or ATDT command).
        :param pulumi.Input[str] dial_cmd3: Dial command (this is often an ATD or ATDT command).
        :param pulumi.Input[str] dial_on_demand: Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] distance: Distance of learned routes (1 - 255, default = 1).
        :param pulumi.Input[str] dont_send_cr1: Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dont_send_cr2: Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dont_send_cr3: Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] extra_init1: Extra initialization string to ISP 1.
        :param pulumi.Input[str] extra_init2: Extra initialization string to ISP 2.
        :param pulumi.Input[str] extra_init3: Extra initialization string to ISP 3.
        :param pulumi.Input[int] holddown_timer: Hold down timer in seconds (1 - 60 sec).
        :param pulumi.Input[int] idle_timer: MODEM connection idle time (1 - 9999 min, default = 5).
        :param pulumi.Input[str] interface: Name of redundant interface.
        :param pulumi.Input[str] lockdown_lac: Allow connection only to the specified Location Area Code (LAC).
        :param pulumi.Input[str] mode: Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
        :param pulumi.Input[str] network_init: AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
        :param pulumi.Input[str] passwd1: Password to access the specified dialup account.
        :param pulumi.Input[str] passwd2: Password to access the specified dialup account.
        :param pulumi.Input[str] passwd3: Password to access the specified dialup account.
        :param pulumi.Input[str] peer_modem1: Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        :param pulumi.Input[str] peer_modem2: Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        :param pulumi.Input[str] peer_modem3: Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        :param pulumi.Input[str] phone1: Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        :param pulumi.Input[str] phone2: Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        :param pulumi.Input[str] phone3: Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        :param pulumi.Input[str] pin_init: AT command to set the PIN (AT+PIN=<pin>).
        :param pulumi.Input[str] ppp_echo_request1: Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_echo_request2: Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_echo_request3: Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Priority of learned routes (0 - 4294967295, default = 0).
        :param pulumi.Input[str] redial: Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
        :param pulumi.Input[int] reset: Number of dial attempts before resetting modem (0 = never reset).
        :param pulumi.Input[str] status: Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] traffic_check: Enable/disable traffic-check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] username1: User name to access the specified dialup account.
        :param pulumi.Input[str] username2: User name to access the specified dialup account.
        :param pulumi.Input[str] username3: User name to access the specified dialup account.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] wireless_port: Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if altmode is not None:
            pulumi.set(__self__, "altmode", altmode)
        if authtype1 is not None:
            pulumi.set(__self__, "authtype1", authtype1)
        if authtype2 is not None:
            pulumi.set(__self__, "authtype2", authtype2)
        if authtype3 is not None:
            pulumi.set(__self__, "authtype3", authtype3)
        if auto_dial is not None:
            pulumi.set(__self__, "auto_dial", auto_dial)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if dial_cmd1 is not None:
            pulumi.set(__self__, "dial_cmd1", dial_cmd1)
        if dial_cmd2 is not None:
            pulumi.set(__self__, "dial_cmd2", dial_cmd2)
        if dial_cmd3 is not None:
            pulumi.set(__self__, "dial_cmd3", dial_cmd3)
        if dial_on_demand is not None:
            pulumi.set(__self__, "dial_on_demand", dial_on_demand)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dont_send_cr1 is not None:
            pulumi.set(__self__, "dont_send_cr1", dont_send_cr1)
        if dont_send_cr2 is not None:
            pulumi.set(__self__, "dont_send_cr2", dont_send_cr2)
        if dont_send_cr3 is not None:
            pulumi.set(__self__, "dont_send_cr3", dont_send_cr3)
        if extra_init1 is not None:
            pulumi.set(__self__, "extra_init1", extra_init1)
        if extra_init2 is not None:
            pulumi.set(__self__, "extra_init2", extra_init2)
        if extra_init3 is not None:
            pulumi.set(__self__, "extra_init3", extra_init3)
        if holddown_timer is not None:
            pulumi.set(__self__, "holddown_timer", holddown_timer)
        if idle_timer is not None:
            pulumi.set(__self__, "idle_timer", idle_timer)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if lockdown_lac is not None:
            pulumi.set(__self__, "lockdown_lac", lockdown_lac)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if network_init is not None:
            pulumi.set(__self__, "network_init", network_init)
        if passwd1 is not None:
            pulumi.set(__self__, "passwd1", passwd1)
        if passwd2 is not None:
            pulumi.set(__self__, "passwd2", passwd2)
        if passwd3 is not None:
            pulumi.set(__self__, "passwd3", passwd3)
        if peer_modem1 is not None:
            pulumi.set(__self__, "peer_modem1", peer_modem1)
        if peer_modem2 is not None:
            pulumi.set(__self__, "peer_modem2", peer_modem2)
        if peer_modem3 is not None:
            pulumi.set(__self__, "peer_modem3", peer_modem3)
        if phone1 is not None:
            pulumi.set(__self__, "phone1", phone1)
        if phone2 is not None:
            pulumi.set(__self__, "phone2", phone2)
        if phone3 is not None:
            pulumi.set(__self__, "phone3", phone3)
        if pin_init is not None:
            pulumi.set(__self__, "pin_init", pin_init)
        if ppp_echo_request1 is not None:
            pulumi.set(__self__, "ppp_echo_request1", ppp_echo_request1)
        if ppp_echo_request2 is not None:
            pulumi.set(__self__, "ppp_echo_request2", ppp_echo_request2)
        if ppp_echo_request3 is not None:
            pulumi.set(__self__, "ppp_echo_request3", ppp_echo_request3)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if redial is not None:
            pulumi.set(__self__, "redial", redial)
        if reset is not None:
            pulumi.set(__self__, "reset", reset)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if traffic_check is not None:
            pulumi.set(__self__, "traffic_check", traffic_check)
        if username1 is not None:
            pulumi.set(__self__, "username1", username1)
        if username2 is not None:
            pulumi.set(__self__, "username2", username2)
        if username3 is not None:
            pulumi.set(__self__, "username3", username3)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wireless_port is not None:
            pulumi.set(__self__, "wireless_port", wireless_port)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def altmode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "altmode")

    @altmode.setter
    def altmode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "altmode", value)

    @property
    @pulumi.getter
    def authtype1(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        """
        return pulumi.get(self, "authtype1")

    @authtype1.setter
    def authtype1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authtype1", value)

    @property
    @pulumi.getter
    def authtype2(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        """
        return pulumi.get(self, "authtype2")

    @authtype2.setter
    def authtype2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authtype2", value)

    @property
    @pulumi.getter
    def authtype3(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        """
        return pulumi.get(self, "authtype3")

    @authtype3.setter
    def authtype3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authtype3", value)

    @property
    @pulumi.getter(name="autoDial")
    def auto_dial(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_dial")

    @auto_dial.setter
    def auto_dial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_dial", value)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Connection completion timeout (30 - 255 sec, default = 90).
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="dialCmd1")
    def dial_cmd1(self) -> Optional[pulumi.Input[str]]:
        """
        Dial command (this is often an ATD or ATDT command).
        """
        return pulumi.get(self, "dial_cmd1")

    @dial_cmd1.setter
    def dial_cmd1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dial_cmd1", value)

    @property
    @pulumi.getter(name="dialCmd2")
    def dial_cmd2(self) -> Optional[pulumi.Input[str]]:
        """
        Dial command (this is often an ATD or ATDT command).
        """
        return pulumi.get(self, "dial_cmd2")

    @dial_cmd2.setter
    def dial_cmd2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dial_cmd2", value)

    @property
    @pulumi.getter(name="dialCmd3")
    def dial_cmd3(self) -> Optional[pulumi.Input[str]]:
        """
        Dial command (this is often an ATD or ATDT command).
        """
        return pulumi.get(self, "dial_cmd3")

    @dial_cmd3.setter
    def dial_cmd3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dial_cmd3", value)

    @property
    @pulumi.getter(name="dialOnDemand")
    def dial_on_demand(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dial_on_demand")

    @dial_on_demand.setter
    def dial_on_demand(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dial_on_demand", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Distance of learned routes (1 - 255, default = 1).
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="dontSendCr1")
    def dont_send_cr1(self) -> Optional[pulumi.Input[str]]:
        """
        Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_send_cr1")

    @dont_send_cr1.setter
    def dont_send_cr1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dont_send_cr1", value)

    @property
    @pulumi.getter(name="dontSendCr2")
    def dont_send_cr2(self) -> Optional[pulumi.Input[str]]:
        """
        Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_send_cr2")

    @dont_send_cr2.setter
    def dont_send_cr2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dont_send_cr2", value)

    @property
    @pulumi.getter(name="dontSendCr3")
    def dont_send_cr3(self) -> Optional[pulumi.Input[str]]:
        """
        Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_send_cr3")

    @dont_send_cr3.setter
    def dont_send_cr3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dont_send_cr3", value)

    @property
    @pulumi.getter(name="extraInit1")
    def extra_init1(self) -> Optional[pulumi.Input[str]]:
        """
        Extra initialization string to ISP 1.
        """
        return pulumi.get(self, "extra_init1")

    @extra_init1.setter
    def extra_init1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_init1", value)

    @property
    @pulumi.getter(name="extraInit2")
    def extra_init2(self) -> Optional[pulumi.Input[str]]:
        """
        Extra initialization string to ISP 2.
        """
        return pulumi.get(self, "extra_init2")

    @extra_init2.setter
    def extra_init2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_init2", value)

    @property
    @pulumi.getter(name="extraInit3")
    def extra_init3(self) -> Optional[pulumi.Input[str]]:
        """
        Extra initialization string to ISP 3.
        """
        return pulumi.get(self, "extra_init3")

    @extra_init3.setter
    def extra_init3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_init3", value)

    @property
    @pulumi.getter(name="holddownTimer")
    def holddown_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Hold down timer in seconds (1 - 60 sec).
        """
        return pulumi.get(self, "holddown_timer")

    @holddown_timer.setter
    def holddown_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holddown_timer", value)

    @property
    @pulumi.getter(name="idleTimer")
    def idle_timer(self) -> Optional[pulumi.Input[int]]:
        """
        MODEM connection idle time (1 - 9999 min, default = 5).
        """
        return pulumi.get(self, "idle_timer")

    @idle_timer.setter
    def idle_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timer", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Name of redundant interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="lockdownLac")
    def lockdown_lac(self) -> Optional[pulumi.Input[str]]:
        """
        Allow connection only to the specified Location Area Code (LAC).
        """
        return pulumi.get(self, "lockdown_lac")

    @lockdown_lac.setter
    def lockdown_lac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lockdown_lac", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="networkInit")
    def network_init(self) -> Optional[pulumi.Input[str]]:
        """
        AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
        """
        return pulumi.get(self, "network_init")

    @network_init.setter
    def network_init(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_init", value)

    @property
    @pulumi.getter
    def passwd1(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access the specified dialup account.
        """
        return pulumi.get(self, "passwd1")

    @passwd1.setter
    def passwd1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd1", value)

    @property
    @pulumi.getter
    def passwd2(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access the specified dialup account.
        """
        return pulumi.get(self, "passwd2")

    @passwd2.setter
    def passwd2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd2", value)

    @property
    @pulumi.getter
    def passwd3(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access the specified dialup account.
        """
        return pulumi.get(self, "passwd3")

    @passwd3.setter
    def passwd3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd3", value)

    @property
    @pulumi.getter(name="peerModem1")
    def peer_modem1(self) -> Optional[pulumi.Input[str]]:
        """
        Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        """
        return pulumi.get(self, "peer_modem1")

    @peer_modem1.setter
    def peer_modem1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_modem1", value)

    @property
    @pulumi.getter(name="peerModem2")
    def peer_modem2(self) -> Optional[pulumi.Input[str]]:
        """
        Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        """
        return pulumi.get(self, "peer_modem2")

    @peer_modem2.setter
    def peer_modem2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_modem2", value)

    @property
    @pulumi.getter(name="peerModem3")
    def peer_modem3(self) -> Optional[pulumi.Input[str]]:
        """
        Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        """
        return pulumi.get(self, "peer_modem3")

    @peer_modem3.setter
    def peer_modem3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_modem3", value)

    @property
    @pulumi.getter
    def phone1(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        """
        return pulumi.get(self, "phone1")

    @phone1.setter
    def phone1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone1", value)

    @property
    @pulumi.getter
    def phone2(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        """
        return pulumi.get(self, "phone2")

    @phone2.setter
    def phone2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone2", value)

    @property
    @pulumi.getter
    def phone3(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        """
        return pulumi.get(self, "phone3")

    @phone3.setter
    def phone3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone3", value)

    @property
    @pulumi.getter(name="pinInit")
    def pin_init(self) -> Optional[pulumi.Input[str]]:
        """
        AT command to set the PIN (AT+PIN=<pin>).
        """
        return pulumi.get(self, "pin_init")

    @pin_init.setter
    def pin_init(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pin_init", value)

    @property
    @pulumi.getter(name="pppEchoRequest1")
    def ppp_echo_request1(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_echo_request1")

    @ppp_echo_request1.setter
    def ppp_echo_request1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_echo_request1", value)

    @property
    @pulumi.getter(name="pppEchoRequest2")
    def ppp_echo_request2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_echo_request2")

    @ppp_echo_request2.setter
    def ppp_echo_request2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_echo_request2", value)

    @property
    @pulumi.getter(name="pppEchoRequest3")
    def ppp_echo_request3(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_echo_request3")

    @ppp_echo_request3.setter
    def ppp_echo_request3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppp_echo_request3", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of learned routes (0 - 4294967295, default = 0).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def redial(self) -> Optional[pulumi.Input[str]]:
        """
        Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
        """
        return pulumi.get(self, "redial")

    @redial.setter
    def redial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redial", value)

    @property
    @pulumi.getter
    def reset(self) -> Optional[pulumi.Input[int]]:
        """
        Number of dial attempts before resetting modem (0 = never reset).
        """
        return pulumi.get(self, "reset")

    @reset.setter
    def reset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reset", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trafficCheck")
    def traffic_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable traffic-check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "traffic_check")

    @traffic_check.setter
    def traffic_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_check", value)

    @property
    @pulumi.getter
    def username1(self) -> Optional[pulumi.Input[str]]:
        """
        User name to access the specified dialup account.
        """
        return pulumi.get(self, "username1")

    @username1.setter
    def username1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username1", value)

    @property
    @pulumi.getter
    def username2(self) -> Optional[pulumi.Input[str]]:
        """
        User name to access the specified dialup account.
        """
        return pulumi.get(self, "username2")

    @username2.setter
    def username2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username2", value)

    @property
    @pulumi.getter
    def username3(self) -> Optional[pulumi.Input[str]]:
        """
        User name to access the specified dialup account.
        """
        return pulumi.get(self, "username3")

    @username3.setter
    def username3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username3", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wirelessPort")
    def wireless_port(self) -> Optional[pulumi.Input[int]]:
        """
        Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
        """
        return pulumi.get(self, "wireless_port")

    @wireless_port.setter
    def wireless_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wireless_port", value)


class Modem(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 altmode: Optional[pulumi.Input[str]] = None,
                 authtype1: Optional[pulumi.Input[str]] = None,
                 authtype2: Optional[pulumi.Input[str]] = None,
                 authtype3: Optional[pulumi.Input[str]] = None,
                 auto_dial: Optional[pulumi.Input[str]] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 dial_cmd1: Optional[pulumi.Input[str]] = None,
                 dial_cmd2: Optional[pulumi.Input[str]] = None,
                 dial_cmd3: Optional[pulumi.Input[str]] = None,
                 dial_on_demand: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dont_send_cr1: Optional[pulumi.Input[str]] = None,
                 dont_send_cr2: Optional[pulumi.Input[str]] = None,
                 dont_send_cr3: Optional[pulumi.Input[str]] = None,
                 extra_init1: Optional[pulumi.Input[str]] = None,
                 extra_init2: Optional[pulumi.Input[str]] = None,
                 extra_init3: Optional[pulumi.Input[str]] = None,
                 holddown_timer: Optional[pulumi.Input[int]] = None,
                 idle_timer: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 lockdown_lac: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 network_init: Optional[pulumi.Input[str]] = None,
                 passwd1: Optional[pulumi.Input[str]] = None,
                 passwd2: Optional[pulumi.Input[str]] = None,
                 passwd3: Optional[pulumi.Input[str]] = None,
                 peer_modem1: Optional[pulumi.Input[str]] = None,
                 peer_modem2: Optional[pulumi.Input[str]] = None,
                 peer_modem3: Optional[pulumi.Input[str]] = None,
                 phone1: Optional[pulumi.Input[str]] = None,
                 phone2: Optional[pulumi.Input[str]] = None,
                 phone3: Optional[pulumi.Input[str]] = None,
                 pin_init: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request1: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request2: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request3: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 redial: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 traffic_check: Optional[pulumi.Input[str]] = None,
                 username1: Optional[pulumi.Input[str]] = None,
                 username2: Optional[pulumi.Input[str]] = None,
                 username3: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wireless_port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Configure MODEM. Applies to FortiOS Version `7.0.4`.

        ## Import

        System Modem can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/modem:Modem labelname SystemModem
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/modem:Modem labelname SystemModem
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
        :param pulumi.Input[str] altmode: Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] authtype1: Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        :param pulumi.Input[str] authtype2: Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        :param pulumi.Input[str] authtype3: Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        :param pulumi.Input[str] auto_dial: Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] connect_timeout: Connection completion timeout (30 - 255 sec, default = 90).
        :param pulumi.Input[str] dial_cmd1: Dial command (this is often an ATD or ATDT command).
        :param pulumi.Input[str] dial_cmd2: Dial command (this is often an ATD or ATDT command).
        :param pulumi.Input[str] dial_cmd3: Dial command (this is often an ATD or ATDT command).
        :param pulumi.Input[str] dial_on_demand: Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] distance: Distance of learned routes (1 - 255, default = 1).
        :param pulumi.Input[str] dont_send_cr1: Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dont_send_cr2: Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dont_send_cr3: Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] extra_init1: Extra initialization string to ISP 1.
        :param pulumi.Input[str] extra_init2: Extra initialization string to ISP 2.
        :param pulumi.Input[str] extra_init3: Extra initialization string to ISP 3.
        :param pulumi.Input[int] holddown_timer: Hold down timer in seconds (1 - 60 sec).
        :param pulumi.Input[int] idle_timer: MODEM connection idle time (1 - 9999 min, default = 5).
        :param pulumi.Input[str] interface: Name of redundant interface.
        :param pulumi.Input[str] lockdown_lac: Allow connection only to the specified Location Area Code (LAC).
        :param pulumi.Input[str] mode: Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
        :param pulumi.Input[str] network_init: AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
        :param pulumi.Input[str] passwd1: Password to access the specified dialup account.
        :param pulumi.Input[str] passwd2: Password to access the specified dialup account.
        :param pulumi.Input[str] passwd3: Password to access the specified dialup account.
        :param pulumi.Input[str] peer_modem1: Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        :param pulumi.Input[str] peer_modem2: Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        :param pulumi.Input[str] peer_modem3: Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        :param pulumi.Input[str] phone1: Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        :param pulumi.Input[str] phone2: Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        :param pulumi.Input[str] phone3: Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        :param pulumi.Input[str] pin_init: AT command to set the PIN (AT+PIN=<pin>).
        :param pulumi.Input[str] ppp_echo_request1: Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_echo_request2: Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_echo_request3: Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Priority of learned routes (0 - 4294967295, default = 0).
        :param pulumi.Input[str] redial: Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
        :param pulumi.Input[int] reset: Number of dial attempts before resetting modem (0 = never reset).
        :param pulumi.Input[str] status: Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] traffic_check: Enable/disable traffic-check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] username1: User name to access the specified dialup account.
        :param pulumi.Input[str] username2: User name to access the specified dialup account.
        :param pulumi.Input[str] username3: User name to access the specified dialup account.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] wireless_port: Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ModemArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure MODEM. Applies to FortiOS Version `7.0.4`.

        ## Import

        System Modem can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/modem:Modem labelname SystemModem
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/modem:Modem labelname SystemModem
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ModemArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModemArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 altmode: Optional[pulumi.Input[str]] = None,
                 authtype1: Optional[pulumi.Input[str]] = None,
                 authtype2: Optional[pulumi.Input[str]] = None,
                 authtype3: Optional[pulumi.Input[str]] = None,
                 auto_dial: Optional[pulumi.Input[str]] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 dial_cmd1: Optional[pulumi.Input[str]] = None,
                 dial_cmd2: Optional[pulumi.Input[str]] = None,
                 dial_cmd3: Optional[pulumi.Input[str]] = None,
                 dial_on_demand: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dont_send_cr1: Optional[pulumi.Input[str]] = None,
                 dont_send_cr2: Optional[pulumi.Input[str]] = None,
                 dont_send_cr3: Optional[pulumi.Input[str]] = None,
                 extra_init1: Optional[pulumi.Input[str]] = None,
                 extra_init2: Optional[pulumi.Input[str]] = None,
                 extra_init3: Optional[pulumi.Input[str]] = None,
                 holddown_timer: Optional[pulumi.Input[int]] = None,
                 idle_timer: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 lockdown_lac: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 network_init: Optional[pulumi.Input[str]] = None,
                 passwd1: Optional[pulumi.Input[str]] = None,
                 passwd2: Optional[pulumi.Input[str]] = None,
                 passwd3: Optional[pulumi.Input[str]] = None,
                 peer_modem1: Optional[pulumi.Input[str]] = None,
                 peer_modem2: Optional[pulumi.Input[str]] = None,
                 peer_modem3: Optional[pulumi.Input[str]] = None,
                 phone1: Optional[pulumi.Input[str]] = None,
                 phone2: Optional[pulumi.Input[str]] = None,
                 phone3: Optional[pulumi.Input[str]] = None,
                 pin_init: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request1: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request2: Optional[pulumi.Input[str]] = None,
                 ppp_echo_request3: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 redial: Optional[pulumi.Input[str]] = None,
                 reset: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 traffic_check: Optional[pulumi.Input[str]] = None,
                 username1: Optional[pulumi.Input[str]] = None,
                 username2: Optional[pulumi.Input[str]] = None,
                 username3: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wireless_port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModemArgs.__new__(ModemArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["altmode"] = altmode
            __props__.__dict__["authtype1"] = authtype1
            __props__.__dict__["authtype2"] = authtype2
            __props__.__dict__["authtype3"] = authtype3
            __props__.__dict__["auto_dial"] = auto_dial
            __props__.__dict__["connect_timeout"] = connect_timeout
            __props__.__dict__["dial_cmd1"] = dial_cmd1
            __props__.__dict__["dial_cmd2"] = dial_cmd2
            __props__.__dict__["dial_cmd3"] = dial_cmd3
            __props__.__dict__["dial_on_demand"] = dial_on_demand
            __props__.__dict__["distance"] = distance
            __props__.__dict__["dont_send_cr1"] = dont_send_cr1
            __props__.__dict__["dont_send_cr2"] = dont_send_cr2
            __props__.__dict__["dont_send_cr3"] = dont_send_cr3
            __props__.__dict__["extra_init1"] = extra_init1
            __props__.__dict__["extra_init2"] = extra_init2
            __props__.__dict__["extra_init3"] = extra_init3
            __props__.__dict__["holddown_timer"] = holddown_timer
            __props__.__dict__["idle_timer"] = idle_timer
            __props__.__dict__["interface"] = interface
            __props__.__dict__["lockdown_lac"] = lockdown_lac
            __props__.__dict__["mode"] = mode
            __props__.__dict__["network_init"] = network_init
            __props__.__dict__["passwd1"] = passwd1
            __props__.__dict__["passwd2"] = passwd2
            __props__.__dict__["passwd3"] = passwd3
            __props__.__dict__["peer_modem1"] = peer_modem1
            __props__.__dict__["peer_modem2"] = peer_modem2
            __props__.__dict__["peer_modem3"] = peer_modem3
            __props__.__dict__["phone1"] = phone1
            __props__.__dict__["phone2"] = phone2
            __props__.__dict__["phone3"] = phone3
            __props__.__dict__["pin_init"] = pin_init
            __props__.__dict__["ppp_echo_request1"] = ppp_echo_request1
            __props__.__dict__["ppp_echo_request2"] = ppp_echo_request2
            __props__.__dict__["ppp_echo_request3"] = ppp_echo_request3
            __props__.__dict__["priority"] = priority
            __props__.__dict__["redial"] = redial
            __props__.__dict__["reset"] = reset
            __props__.__dict__["status"] = status
            __props__.__dict__["traffic_check"] = traffic_check
            __props__.__dict__["username1"] = username1
            __props__.__dict__["username2"] = username2
            __props__.__dict__["username3"] = username3
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["wireless_port"] = wireless_port
        super(Modem, __self__).__init__(
            'fortios:system/modem:Modem',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            altmode: Optional[pulumi.Input[str]] = None,
            authtype1: Optional[pulumi.Input[str]] = None,
            authtype2: Optional[pulumi.Input[str]] = None,
            authtype3: Optional[pulumi.Input[str]] = None,
            auto_dial: Optional[pulumi.Input[str]] = None,
            connect_timeout: Optional[pulumi.Input[int]] = None,
            dial_cmd1: Optional[pulumi.Input[str]] = None,
            dial_cmd2: Optional[pulumi.Input[str]] = None,
            dial_cmd3: Optional[pulumi.Input[str]] = None,
            dial_on_demand: Optional[pulumi.Input[str]] = None,
            distance: Optional[pulumi.Input[int]] = None,
            dont_send_cr1: Optional[pulumi.Input[str]] = None,
            dont_send_cr2: Optional[pulumi.Input[str]] = None,
            dont_send_cr3: Optional[pulumi.Input[str]] = None,
            extra_init1: Optional[pulumi.Input[str]] = None,
            extra_init2: Optional[pulumi.Input[str]] = None,
            extra_init3: Optional[pulumi.Input[str]] = None,
            holddown_timer: Optional[pulumi.Input[int]] = None,
            idle_timer: Optional[pulumi.Input[int]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            lockdown_lac: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            network_init: Optional[pulumi.Input[str]] = None,
            passwd1: Optional[pulumi.Input[str]] = None,
            passwd2: Optional[pulumi.Input[str]] = None,
            passwd3: Optional[pulumi.Input[str]] = None,
            peer_modem1: Optional[pulumi.Input[str]] = None,
            peer_modem2: Optional[pulumi.Input[str]] = None,
            peer_modem3: Optional[pulumi.Input[str]] = None,
            phone1: Optional[pulumi.Input[str]] = None,
            phone2: Optional[pulumi.Input[str]] = None,
            phone3: Optional[pulumi.Input[str]] = None,
            pin_init: Optional[pulumi.Input[str]] = None,
            ppp_echo_request1: Optional[pulumi.Input[str]] = None,
            ppp_echo_request2: Optional[pulumi.Input[str]] = None,
            ppp_echo_request3: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            redial: Optional[pulumi.Input[str]] = None,
            reset: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            traffic_check: Optional[pulumi.Input[str]] = None,
            username1: Optional[pulumi.Input[str]] = None,
            username2: Optional[pulumi.Input[str]] = None,
            username3: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            wireless_port: Optional[pulumi.Input[int]] = None) -> 'Modem':
        """
        Get an existing Modem resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
        :param pulumi.Input[str] altmode: Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] authtype1: Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        :param pulumi.Input[str] authtype2: Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        :param pulumi.Input[str] authtype3: Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        :param pulumi.Input[str] auto_dial: Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] connect_timeout: Connection completion timeout (30 - 255 sec, default = 90).
        :param pulumi.Input[str] dial_cmd1: Dial command (this is often an ATD or ATDT command).
        :param pulumi.Input[str] dial_cmd2: Dial command (this is often an ATD or ATDT command).
        :param pulumi.Input[str] dial_cmd3: Dial command (this is often an ATD or ATDT command).
        :param pulumi.Input[str] dial_on_demand: Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] distance: Distance of learned routes (1 - 255, default = 1).
        :param pulumi.Input[str] dont_send_cr1: Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dont_send_cr2: Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dont_send_cr3: Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] extra_init1: Extra initialization string to ISP 1.
        :param pulumi.Input[str] extra_init2: Extra initialization string to ISP 2.
        :param pulumi.Input[str] extra_init3: Extra initialization string to ISP 3.
        :param pulumi.Input[int] holddown_timer: Hold down timer in seconds (1 - 60 sec).
        :param pulumi.Input[int] idle_timer: MODEM connection idle time (1 - 9999 min, default = 5).
        :param pulumi.Input[str] interface: Name of redundant interface.
        :param pulumi.Input[str] lockdown_lac: Allow connection only to the specified Location Area Code (LAC).
        :param pulumi.Input[str] mode: Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
        :param pulumi.Input[str] network_init: AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
        :param pulumi.Input[str] passwd1: Password to access the specified dialup account.
        :param pulumi.Input[str] passwd2: Password to access the specified dialup account.
        :param pulumi.Input[str] passwd3: Password to access the specified dialup account.
        :param pulumi.Input[str] peer_modem1: Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        :param pulumi.Input[str] peer_modem2: Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        :param pulumi.Input[str] peer_modem3: Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        :param pulumi.Input[str] phone1: Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        :param pulumi.Input[str] phone2: Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        :param pulumi.Input[str] phone3: Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        :param pulumi.Input[str] pin_init: AT command to set the PIN (AT+PIN=<pin>).
        :param pulumi.Input[str] ppp_echo_request1: Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_echo_request2: Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ppp_echo_request3: Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Priority of learned routes (0 - 4294967295, default = 0).
        :param pulumi.Input[str] redial: Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
        :param pulumi.Input[int] reset: Number of dial attempts before resetting modem (0 = never reset).
        :param pulumi.Input[str] status: Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] traffic_check: Enable/disable traffic-check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] username1: User name to access the specified dialup account.
        :param pulumi.Input[str] username2: User name to access the specified dialup account.
        :param pulumi.Input[str] username3: User name to access the specified dialup account.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] wireless_port: Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ModemState.__new__(_ModemState)

        __props__.__dict__["action"] = action
        __props__.__dict__["altmode"] = altmode
        __props__.__dict__["authtype1"] = authtype1
        __props__.__dict__["authtype2"] = authtype2
        __props__.__dict__["authtype3"] = authtype3
        __props__.__dict__["auto_dial"] = auto_dial
        __props__.__dict__["connect_timeout"] = connect_timeout
        __props__.__dict__["dial_cmd1"] = dial_cmd1
        __props__.__dict__["dial_cmd2"] = dial_cmd2
        __props__.__dict__["dial_cmd3"] = dial_cmd3
        __props__.__dict__["dial_on_demand"] = dial_on_demand
        __props__.__dict__["distance"] = distance
        __props__.__dict__["dont_send_cr1"] = dont_send_cr1
        __props__.__dict__["dont_send_cr2"] = dont_send_cr2
        __props__.__dict__["dont_send_cr3"] = dont_send_cr3
        __props__.__dict__["extra_init1"] = extra_init1
        __props__.__dict__["extra_init2"] = extra_init2
        __props__.__dict__["extra_init3"] = extra_init3
        __props__.__dict__["holddown_timer"] = holddown_timer
        __props__.__dict__["idle_timer"] = idle_timer
        __props__.__dict__["interface"] = interface
        __props__.__dict__["lockdown_lac"] = lockdown_lac
        __props__.__dict__["mode"] = mode
        __props__.__dict__["network_init"] = network_init
        __props__.__dict__["passwd1"] = passwd1
        __props__.__dict__["passwd2"] = passwd2
        __props__.__dict__["passwd3"] = passwd3
        __props__.__dict__["peer_modem1"] = peer_modem1
        __props__.__dict__["peer_modem2"] = peer_modem2
        __props__.__dict__["peer_modem3"] = peer_modem3
        __props__.__dict__["phone1"] = phone1
        __props__.__dict__["phone2"] = phone2
        __props__.__dict__["phone3"] = phone3
        __props__.__dict__["pin_init"] = pin_init
        __props__.__dict__["ppp_echo_request1"] = ppp_echo_request1
        __props__.__dict__["ppp_echo_request2"] = ppp_echo_request2
        __props__.__dict__["ppp_echo_request3"] = ppp_echo_request3
        __props__.__dict__["priority"] = priority
        __props__.__dict__["redial"] = redial
        __props__.__dict__["reset"] = reset
        __props__.__dict__["status"] = status
        __props__.__dict__["traffic_check"] = traffic_check
        __props__.__dict__["username1"] = username1
        __props__.__dict__["username2"] = username2
        __props__.__dict__["username3"] = username3
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["wireless_port"] = wireless_port
        return Modem(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Dial up/stop MODEM. Valid values: `dial`, `stop`, `none`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def altmode(self) -> pulumi.Output[str]:
        """
        Enable/disable altmode for installations using PPP in China. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "altmode")

    @property
    @pulumi.getter
    def authtype1(self) -> pulumi.Output[str]:
        """
        Allowed authentication types for ISP 1. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        """
        return pulumi.get(self, "authtype1")

    @property
    @pulumi.getter
    def authtype2(self) -> pulumi.Output[str]:
        """
        Allowed authentication types for ISP 2. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        """
        return pulumi.get(self, "authtype2")

    @property
    @pulumi.getter
    def authtype3(self) -> pulumi.Output[str]:
        """
        Allowed authentication types for ISP 3. Valid values: `pap`, `chap`, `mschap`, `mschapv2`.
        """
        return pulumi.get(self, "authtype3")

    @property
    @pulumi.getter(name="autoDial")
    def auto_dial(self) -> pulumi.Output[str]:
        """
        Enable/disable auto-dial after a reboot or disconnection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_dial")

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> pulumi.Output[int]:
        """
        Connection completion timeout (30 - 255 sec, default = 90).
        """
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter(name="dialCmd1")
    def dial_cmd1(self) -> pulumi.Output[str]:
        """
        Dial command (this is often an ATD or ATDT command).
        """
        return pulumi.get(self, "dial_cmd1")

    @property
    @pulumi.getter(name="dialCmd2")
    def dial_cmd2(self) -> pulumi.Output[str]:
        """
        Dial command (this is often an ATD or ATDT command).
        """
        return pulumi.get(self, "dial_cmd2")

    @property
    @pulumi.getter(name="dialCmd3")
    def dial_cmd3(self) -> pulumi.Output[str]:
        """
        Dial command (this is often an ATD or ATDT command).
        """
        return pulumi.get(self, "dial_cmd3")

    @property
    @pulumi.getter(name="dialOnDemand")
    def dial_on_demand(self) -> pulumi.Output[str]:
        """
        Enable/disable to dial the modem when packets are routed to the modem interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dial_on_demand")

    @property
    @pulumi.getter
    def distance(self) -> pulumi.Output[int]:
        """
        Distance of learned routes (1 - 255, default = 1).
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter(name="dontSendCr1")
    def dont_send_cr1(self) -> pulumi.Output[str]:
        """
        Do not send CR when connected (ISP1). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_send_cr1")

    @property
    @pulumi.getter(name="dontSendCr2")
    def dont_send_cr2(self) -> pulumi.Output[str]:
        """
        Do not send CR when connected (ISP2). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_send_cr2")

    @property
    @pulumi.getter(name="dontSendCr3")
    def dont_send_cr3(self) -> pulumi.Output[str]:
        """
        Do not send CR when connected (ISP3). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_send_cr3")

    @property
    @pulumi.getter(name="extraInit1")
    def extra_init1(self) -> pulumi.Output[str]:
        """
        Extra initialization string to ISP 1.
        """
        return pulumi.get(self, "extra_init1")

    @property
    @pulumi.getter(name="extraInit2")
    def extra_init2(self) -> pulumi.Output[str]:
        """
        Extra initialization string to ISP 2.
        """
        return pulumi.get(self, "extra_init2")

    @property
    @pulumi.getter(name="extraInit3")
    def extra_init3(self) -> pulumi.Output[str]:
        """
        Extra initialization string to ISP 3.
        """
        return pulumi.get(self, "extra_init3")

    @property
    @pulumi.getter(name="holddownTimer")
    def holddown_timer(self) -> pulumi.Output[int]:
        """
        Hold down timer in seconds (1 - 60 sec).
        """
        return pulumi.get(self, "holddown_timer")

    @property
    @pulumi.getter(name="idleTimer")
    def idle_timer(self) -> pulumi.Output[int]:
        """
        MODEM connection idle time (1 - 9999 min, default = 5).
        """
        return pulumi.get(self, "idle_timer")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Name of redundant interface.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="lockdownLac")
    def lockdown_lac(self) -> pulumi.Output[str]:
        """
        Allow connection only to the specified Location Area Code (LAC).
        """
        return pulumi.get(self, "lockdown_lac")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        Set MODEM operation mode to redundant or standalone. Valid values: `standalone`, `redundant`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="networkInit")
    def network_init(self) -> pulumi.Output[str]:
        """
        AT command to set the Network name/type (AT+COPS=<mode>,[<format>,<oper>[,<AcT>]]).
        """
        return pulumi.get(self, "network_init")

    @property
    @pulumi.getter
    def passwd1(self) -> pulumi.Output[Optional[str]]:
        """
        Password to access the specified dialup account.
        """
        return pulumi.get(self, "passwd1")

    @property
    @pulumi.getter
    def passwd2(self) -> pulumi.Output[Optional[str]]:
        """
        Password to access the specified dialup account.
        """
        return pulumi.get(self, "passwd2")

    @property
    @pulumi.getter
    def passwd3(self) -> pulumi.Output[Optional[str]]:
        """
        Password to access the specified dialup account.
        """
        return pulumi.get(self, "passwd3")

    @property
    @pulumi.getter(name="peerModem1")
    def peer_modem1(self) -> pulumi.Output[str]:
        """
        Specify peer MODEM type for phone1. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        """
        return pulumi.get(self, "peer_modem1")

    @property
    @pulumi.getter(name="peerModem2")
    def peer_modem2(self) -> pulumi.Output[str]:
        """
        Specify peer MODEM type for phone2. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        """
        return pulumi.get(self, "peer_modem2")

    @property
    @pulumi.getter(name="peerModem3")
    def peer_modem3(self) -> pulumi.Output[str]:
        """
        Specify peer MODEM type for phone3. Valid values: `generic`, `actiontec`, `ascend_TNT`.
        """
        return pulumi.get(self, "peer_modem3")

    @property
    @pulumi.getter
    def phone1(self) -> pulumi.Output[str]:
        """
        Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        """
        return pulumi.get(self, "phone1")

    @property
    @pulumi.getter
    def phone2(self) -> pulumi.Output[str]:
        """
        Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        """
        return pulumi.get(self, "phone2")

    @property
    @pulumi.getter
    def phone3(self) -> pulumi.Output[str]:
        """
        Phone number to connect to the dialup account (must not contain spaces, and should include standard special characters).
        """
        return pulumi.get(self, "phone3")

    @property
    @pulumi.getter(name="pinInit")
    def pin_init(self) -> pulumi.Output[str]:
        """
        AT command to set the PIN (AT+PIN=<pin>).
        """
        return pulumi.get(self, "pin_init")

    @property
    @pulumi.getter(name="pppEchoRequest1")
    def ppp_echo_request1(self) -> pulumi.Output[str]:
        """
        Enable/disable PPP echo-request to ISP 1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_echo_request1")

    @property
    @pulumi.getter(name="pppEchoRequest2")
    def ppp_echo_request2(self) -> pulumi.Output[str]:
        """
        Enable/disable PPP echo-request to ISP 2. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_echo_request2")

    @property
    @pulumi.getter(name="pppEchoRequest3")
    def ppp_echo_request3(self) -> pulumi.Output[str]:
        """
        Enable/disable PPP echo-request to ISP 3. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ppp_echo_request3")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Priority of learned routes (0 - 4294967295, default = 0).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def redial(self) -> pulumi.Output[str]:
        """
        Redial limit (1 - 10 attempts, none = redial forever). Valid values: `none`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`.
        """
        return pulumi.get(self, "redial")

    @property
    @pulumi.getter
    def reset(self) -> pulumi.Output[int]:
        """
        Number of dial attempts before resetting modem (0 = never reset).
        """
        return pulumi.get(self, "reset")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable Modem support (equivalent to bringing an interface up or down). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trafficCheck")
    def traffic_check(self) -> pulumi.Output[str]:
        """
        Enable/disable traffic-check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "traffic_check")

    @property
    @pulumi.getter
    def username1(self) -> pulumi.Output[str]:
        """
        User name to access the specified dialup account.
        """
        return pulumi.get(self, "username1")

    @property
    @pulumi.getter
    def username2(self) -> pulumi.Output[str]:
        """
        User name to access the specified dialup account.
        """
        return pulumi.get(self, "username2")

    @property
    @pulumi.getter
    def username3(self) -> pulumi.Output[str]:
        """
        User name to access the specified dialup account.
        """
        return pulumi.get(self, "username3")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="wirelessPort")
    def wireless_port(self) -> pulumi.Output[int]:
        """
        Enter wireless port number, 0 for default, 1 for first port, ... (0 - 4294967295, default = 0)
        """
        return pulumi.get(self, "wireless_port")

