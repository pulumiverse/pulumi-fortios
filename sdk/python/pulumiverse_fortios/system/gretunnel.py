# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GretunnelArgs', 'Gretunnel']

@pulumi.input_type
class GretunnelArgs:
    def __init__(__self__, *,
                 local_gw: pulumi.Input[str],
                 remote_gw: pulumi.Input[str],
                 checksum_reception: Optional[pulumi.Input[str]] = None,
                 checksum_transmission: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dscp_copying: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 keepalive_failtimes: Optional[pulumi.Input[int]] = None,
                 keepalive_interval: Optional[pulumi.Input[int]] = None,
                 key_inbound: Optional[pulumi.Input[int]] = None,
                 key_outbound: Optional[pulumi.Input[int]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 sequence_number_reception: Optional[pulumi.Input[str]] = None,
                 sequence_number_transmission: Optional[pulumi.Input[str]] = None,
                 use_sdwan: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Gretunnel resource.
        :param pulumi.Input[str] local_gw: IP address of the local gateway.
        :param pulumi.Input[str] remote_gw: IP address of the remote gateway.
        :param pulumi.Input[str] checksum_reception: Enable/disable validating checksums in received GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] checksum_transmission: Enable/disable including checksums in transmitted GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] diffservcode: DiffServ setting to be applied to GRE tunnel outer IP header.
        :param pulumi.Input[str] dscp_copying: Enable/disable DSCP copying. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] ip_version: IP version to use for VPN interface. Valid values: `4`, `6`.
        :param pulumi.Input[int] keepalive_failtimes: Number of consecutive unreturned keepalive messages before a GRE connection is considered down (1 - 255).
        :param pulumi.Input[int] keepalive_interval: Keepalive message interval (0 - 32767, 0 = disabled).
        :param pulumi.Input[int] key_inbound: Require received GRE packets contain this key (0 - 4294967295).
        :param pulumi.Input[int] key_outbound: Include this key in transmitted GRE packets (0 - 4294967295).
        :param pulumi.Input[str] local_gw6: IPv6 address of the local gateway.
        :param pulumi.Input[str] name: Tunnel name.
        :param pulumi.Input[str] remote_gw6: IPv6 address of the remote gateway.
        :param pulumi.Input[str] sequence_number_reception: Enable/disable validating sequence numbers in received GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sequence_number_transmission: Enable/disable including of sequence numbers in transmitted GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] use_sdwan: Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "local_gw", local_gw)
        pulumi.set(__self__, "remote_gw", remote_gw)
        if checksum_reception is not None:
            pulumi.set(__self__, "checksum_reception", checksum_reception)
        if checksum_transmission is not None:
            pulumi.set(__self__, "checksum_transmission", checksum_transmission)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dscp_copying is not None:
            pulumi.set(__self__, "dscp_copying", dscp_copying)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if keepalive_failtimes is not None:
            pulumi.set(__self__, "keepalive_failtimes", keepalive_failtimes)
        if keepalive_interval is not None:
            pulumi.set(__self__, "keepalive_interval", keepalive_interval)
        if key_inbound is not None:
            pulumi.set(__self__, "key_inbound", key_inbound)
        if key_outbound is not None:
            pulumi.set(__self__, "key_outbound", key_outbound)
        if local_gw6 is not None:
            pulumi.set(__self__, "local_gw6", local_gw6)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remote_gw6 is not None:
            pulumi.set(__self__, "remote_gw6", remote_gw6)
        if sequence_number_reception is not None:
            pulumi.set(__self__, "sequence_number_reception", sequence_number_reception)
        if sequence_number_transmission is not None:
            pulumi.set(__self__, "sequence_number_transmission", sequence_number_transmission)
        if use_sdwan is not None:
            pulumi.set(__self__, "use_sdwan", use_sdwan)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> pulumi.Input[str]:
        """
        IP address of the local gateway.
        """
        return pulumi.get(self, "local_gw")

    @local_gw.setter
    def local_gw(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_gw", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> pulumi.Input[str]:
        """
        IP address of the remote gateway.
        """
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="checksumReception")
    def checksum_reception(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable validating checksums in received GRE packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "checksum_reception")

    @checksum_reception.setter
    def checksum_reception(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum_reception", value)

    @property
    @pulumi.getter(name="checksumTransmission")
    def checksum_transmission(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable including checksums in transmitted GRE packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "checksum_transmission")

    @checksum_transmission.setter
    def checksum_transmission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum_transmission", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        """
        DiffServ setting to be applied to GRE tunnel outer IP header.
        """
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dscpCopying")
    def dscp_copying(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DSCP copying. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dscp_copying")

    @dscp_copying.setter
    def dscp_copying(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_copying", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        IP version to use for VPN interface. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="keepaliveFailtimes")
    def keepalive_failtimes(self) -> Optional[pulumi.Input[int]]:
        """
        Number of consecutive unreturned keepalive messages before a GRE connection is considered down (1 - 255).
        """
        return pulumi.get(self, "keepalive_failtimes")

    @keepalive_failtimes.setter
    def keepalive_failtimes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive_failtimes", value)

    @property
    @pulumi.getter(name="keepaliveInterval")
    def keepalive_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Keepalive message interval (0 - 32767, 0 = disabled).
        """
        return pulumi.get(self, "keepalive_interval")

    @keepalive_interval.setter
    def keepalive_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive_interval", value)

    @property
    @pulumi.getter(name="keyInbound")
    def key_inbound(self) -> Optional[pulumi.Input[int]]:
        """
        Require received GRE packets contain this key (0 - 4294967295).
        """
        return pulumi.get(self, "key_inbound")

    @key_inbound.setter
    def key_inbound(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_inbound", value)

    @property
    @pulumi.getter(name="keyOutbound")
    def key_outbound(self) -> Optional[pulumi.Input[int]]:
        """
        Include this key in transmitted GRE packets (0 - 4294967295).
        """
        return pulumi.get(self, "key_outbound")

    @key_outbound.setter
    def key_outbound(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_outbound", value)

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the local gateway.
        """
        return pulumi.get(self, "local_gw6")

    @local_gw6.setter
    def local_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw6", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the remote gateway.
        """
        return pulumi.get(self, "remote_gw6")

    @remote_gw6.setter
    def remote_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw6", value)

    @property
    @pulumi.getter(name="sequenceNumberReception")
    def sequence_number_reception(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable validating sequence numbers in received GRE packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sequence_number_reception")

    @sequence_number_reception.setter
    def sequence_number_reception(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sequence_number_reception", value)

    @property
    @pulumi.getter(name="sequenceNumberTransmission")
    def sequence_number_transmission(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable including of sequence numbers in transmitted GRE packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sequence_number_transmission")

    @sequence_number_transmission.setter
    def sequence_number_transmission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sequence_number_transmission", value)

    @property
    @pulumi.getter(name="useSdwan")
    def use_sdwan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "use_sdwan")

    @use_sdwan.setter
    def use_sdwan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_sdwan", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _GretunnelState:
    def __init__(__self__, *,
                 checksum_reception: Optional[pulumi.Input[str]] = None,
                 checksum_transmission: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dscp_copying: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 keepalive_failtimes: Optional[pulumi.Input[int]] = None,
                 keepalive_interval: Optional[pulumi.Input[int]] = None,
                 key_inbound: Optional[pulumi.Input[int]] = None,
                 key_outbound: Optional[pulumi.Input[int]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 sequence_number_reception: Optional[pulumi.Input[str]] = None,
                 sequence_number_transmission: Optional[pulumi.Input[str]] = None,
                 use_sdwan: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Gretunnel resources.
        :param pulumi.Input[str] checksum_reception: Enable/disable validating checksums in received GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] checksum_transmission: Enable/disable including checksums in transmitted GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] diffservcode: DiffServ setting to be applied to GRE tunnel outer IP header.
        :param pulumi.Input[str] dscp_copying: Enable/disable DSCP copying. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] ip_version: IP version to use for VPN interface. Valid values: `4`, `6`.
        :param pulumi.Input[int] keepalive_failtimes: Number of consecutive unreturned keepalive messages before a GRE connection is considered down (1 - 255).
        :param pulumi.Input[int] keepalive_interval: Keepalive message interval (0 - 32767, 0 = disabled).
        :param pulumi.Input[int] key_inbound: Require received GRE packets contain this key (0 - 4294967295).
        :param pulumi.Input[int] key_outbound: Include this key in transmitted GRE packets (0 - 4294967295).
        :param pulumi.Input[str] local_gw: IP address of the local gateway.
        :param pulumi.Input[str] local_gw6: IPv6 address of the local gateway.
        :param pulumi.Input[str] name: Tunnel name.
        :param pulumi.Input[str] remote_gw: IP address of the remote gateway.
        :param pulumi.Input[str] remote_gw6: IPv6 address of the remote gateway.
        :param pulumi.Input[str] sequence_number_reception: Enable/disable validating sequence numbers in received GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sequence_number_transmission: Enable/disable including of sequence numbers in transmitted GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] use_sdwan: Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if checksum_reception is not None:
            pulumi.set(__self__, "checksum_reception", checksum_reception)
        if checksum_transmission is not None:
            pulumi.set(__self__, "checksum_transmission", checksum_transmission)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dscp_copying is not None:
            pulumi.set(__self__, "dscp_copying", dscp_copying)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if keepalive_failtimes is not None:
            pulumi.set(__self__, "keepalive_failtimes", keepalive_failtimes)
        if keepalive_interval is not None:
            pulumi.set(__self__, "keepalive_interval", keepalive_interval)
        if key_inbound is not None:
            pulumi.set(__self__, "key_inbound", key_inbound)
        if key_outbound is not None:
            pulumi.set(__self__, "key_outbound", key_outbound)
        if local_gw is not None:
            pulumi.set(__self__, "local_gw", local_gw)
        if local_gw6 is not None:
            pulumi.set(__self__, "local_gw6", local_gw6)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if remote_gw6 is not None:
            pulumi.set(__self__, "remote_gw6", remote_gw6)
        if sequence_number_reception is not None:
            pulumi.set(__self__, "sequence_number_reception", sequence_number_reception)
        if sequence_number_transmission is not None:
            pulumi.set(__self__, "sequence_number_transmission", sequence_number_transmission)
        if use_sdwan is not None:
            pulumi.set(__self__, "use_sdwan", use_sdwan)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="checksumReception")
    def checksum_reception(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable validating checksums in received GRE packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "checksum_reception")

    @checksum_reception.setter
    def checksum_reception(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum_reception", value)

    @property
    @pulumi.getter(name="checksumTransmission")
    def checksum_transmission(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable including checksums in transmitted GRE packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "checksum_transmission")

    @checksum_transmission.setter
    def checksum_transmission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "checksum_transmission", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        """
        DiffServ setting to be applied to GRE tunnel outer IP header.
        """
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dscpCopying")
    def dscp_copying(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DSCP copying. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dscp_copying")

    @dscp_copying.setter
    def dscp_copying(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_copying", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        IP version to use for VPN interface. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="keepaliveFailtimes")
    def keepalive_failtimes(self) -> Optional[pulumi.Input[int]]:
        """
        Number of consecutive unreturned keepalive messages before a GRE connection is considered down (1 - 255).
        """
        return pulumi.get(self, "keepalive_failtimes")

    @keepalive_failtimes.setter
    def keepalive_failtimes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive_failtimes", value)

    @property
    @pulumi.getter(name="keepaliveInterval")
    def keepalive_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Keepalive message interval (0 - 32767, 0 = disabled).
        """
        return pulumi.get(self, "keepalive_interval")

    @keepalive_interval.setter
    def keepalive_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive_interval", value)

    @property
    @pulumi.getter(name="keyInbound")
    def key_inbound(self) -> Optional[pulumi.Input[int]]:
        """
        Require received GRE packets contain this key (0 - 4294967295).
        """
        return pulumi.get(self, "key_inbound")

    @key_inbound.setter
    def key_inbound(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_inbound", value)

    @property
    @pulumi.getter(name="keyOutbound")
    def key_outbound(self) -> Optional[pulumi.Input[int]]:
        """
        Include this key in transmitted GRE packets (0 - 4294967295).
        """
        return pulumi.get(self, "key_outbound")

    @key_outbound.setter
    def key_outbound(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_outbound", value)

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the local gateway.
        """
        return pulumi.get(self, "local_gw")

    @local_gw.setter
    def local_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw", value)

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the local gateway.
        """
        return pulumi.get(self, "local_gw6")

    @local_gw6.setter
    def local_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw6", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the remote gateway.
        """
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the remote gateway.
        """
        return pulumi.get(self, "remote_gw6")

    @remote_gw6.setter
    def remote_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw6", value)

    @property
    @pulumi.getter(name="sequenceNumberReception")
    def sequence_number_reception(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable validating sequence numbers in received GRE packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sequence_number_reception")

    @sequence_number_reception.setter
    def sequence_number_reception(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sequence_number_reception", value)

    @property
    @pulumi.getter(name="sequenceNumberTransmission")
    def sequence_number_transmission(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable including of sequence numbers in transmitted GRE packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sequence_number_transmission")

    @sequence_number_transmission.setter
    def sequence_number_transmission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sequence_number_transmission", value)

    @property
    @pulumi.getter(name="useSdwan")
    def use_sdwan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "use_sdwan")

    @use_sdwan.setter
    def use_sdwan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_sdwan", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Gretunnel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 checksum_reception: Optional[pulumi.Input[str]] = None,
                 checksum_transmission: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dscp_copying: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 keepalive_failtimes: Optional[pulumi.Input[int]] = None,
                 keepalive_interval: Optional[pulumi.Input[int]] = None,
                 key_inbound: Optional[pulumi.Input[int]] = None,
                 key_outbound: Optional[pulumi.Input[int]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 sequence_number_reception: Optional[pulumi.Input[str]] = None,
                 sequence_number_transmission: Optional[pulumi.Input[str]] = None,
                 use_sdwan: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure GRE tunnel.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Gretunnel("trname",
            checksum_reception="disable",
            checksum_transmission="disable",
            dscp_copying="disable",
            interface="port3",
            ip_version="4",
            keepalive_failtimes=10,
            keepalive_interval=0,
            key_inbound=0,
            key_outbound=0,
            local_gw="3.3.3.3",
            local_gw6="::",
            remote_gw="1.1.1.1",
            remote_gw6="::",
            sequence_number_reception="disable",
            sequence_number_transmission="enable")
        ```

        ## Import

        System GreTunnel can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/gretunnel:Gretunnel labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/gretunnel:Gretunnel labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] checksum_reception: Enable/disable validating checksums in received GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] checksum_transmission: Enable/disable including checksums in transmitted GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] diffservcode: DiffServ setting to be applied to GRE tunnel outer IP header.
        :param pulumi.Input[str] dscp_copying: Enable/disable DSCP copying. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] ip_version: IP version to use for VPN interface. Valid values: `4`, `6`.
        :param pulumi.Input[int] keepalive_failtimes: Number of consecutive unreturned keepalive messages before a GRE connection is considered down (1 - 255).
        :param pulumi.Input[int] keepalive_interval: Keepalive message interval (0 - 32767, 0 = disabled).
        :param pulumi.Input[int] key_inbound: Require received GRE packets contain this key (0 - 4294967295).
        :param pulumi.Input[int] key_outbound: Include this key in transmitted GRE packets (0 - 4294967295).
        :param pulumi.Input[str] local_gw: IP address of the local gateway.
        :param pulumi.Input[str] local_gw6: IPv6 address of the local gateway.
        :param pulumi.Input[str] name: Tunnel name.
        :param pulumi.Input[str] remote_gw: IP address of the remote gateway.
        :param pulumi.Input[str] remote_gw6: IPv6 address of the remote gateway.
        :param pulumi.Input[str] sequence_number_reception: Enable/disable validating sequence numbers in received GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sequence_number_transmission: Enable/disable including of sequence numbers in transmitted GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] use_sdwan: Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GretunnelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure GRE tunnel.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Gretunnel("trname",
            checksum_reception="disable",
            checksum_transmission="disable",
            dscp_copying="disable",
            interface="port3",
            ip_version="4",
            keepalive_failtimes=10,
            keepalive_interval=0,
            key_inbound=0,
            key_outbound=0,
            local_gw="3.3.3.3",
            local_gw6="::",
            remote_gw="1.1.1.1",
            remote_gw6="::",
            sequence_number_reception="disable",
            sequence_number_transmission="enable")
        ```

        ## Import

        System GreTunnel can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/gretunnel:Gretunnel labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/gretunnel:Gretunnel labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param GretunnelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GretunnelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 checksum_reception: Optional[pulumi.Input[str]] = None,
                 checksum_transmission: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dscp_copying: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 keepalive_failtimes: Optional[pulumi.Input[int]] = None,
                 keepalive_interval: Optional[pulumi.Input[int]] = None,
                 key_inbound: Optional[pulumi.Input[int]] = None,
                 key_outbound: Optional[pulumi.Input[int]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 sequence_number_reception: Optional[pulumi.Input[str]] = None,
                 sequence_number_transmission: Optional[pulumi.Input[str]] = None,
                 use_sdwan: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GretunnelArgs.__new__(GretunnelArgs)

            __props__.__dict__["checksum_reception"] = checksum_reception
            __props__.__dict__["checksum_transmission"] = checksum_transmission
            __props__.__dict__["diffservcode"] = diffservcode
            __props__.__dict__["dscp_copying"] = dscp_copying
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ip_version"] = ip_version
            __props__.__dict__["keepalive_failtimes"] = keepalive_failtimes
            __props__.__dict__["keepalive_interval"] = keepalive_interval
            __props__.__dict__["key_inbound"] = key_inbound
            __props__.__dict__["key_outbound"] = key_outbound
            if local_gw is None and not opts.urn:
                raise TypeError("Missing required property 'local_gw'")
            __props__.__dict__["local_gw"] = local_gw
            __props__.__dict__["local_gw6"] = local_gw6
            __props__.__dict__["name"] = name
            if remote_gw is None and not opts.urn:
                raise TypeError("Missing required property 'remote_gw'")
            __props__.__dict__["remote_gw"] = remote_gw
            __props__.__dict__["remote_gw6"] = remote_gw6
            __props__.__dict__["sequence_number_reception"] = sequence_number_reception
            __props__.__dict__["sequence_number_transmission"] = sequence_number_transmission
            __props__.__dict__["use_sdwan"] = use_sdwan
            __props__.__dict__["vdomparam"] = vdomparam
        super(Gretunnel, __self__).__init__(
            'fortios:system/gretunnel:Gretunnel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            checksum_reception: Optional[pulumi.Input[str]] = None,
            checksum_transmission: Optional[pulumi.Input[str]] = None,
            diffservcode: Optional[pulumi.Input[str]] = None,
            dscp_copying: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ip_version: Optional[pulumi.Input[str]] = None,
            keepalive_failtimes: Optional[pulumi.Input[int]] = None,
            keepalive_interval: Optional[pulumi.Input[int]] = None,
            key_inbound: Optional[pulumi.Input[int]] = None,
            key_outbound: Optional[pulumi.Input[int]] = None,
            local_gw: Optional[pulumi.Input[str]] = None,
            local_gw6: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            remote_gw: Optional[pulumi.Input[str]] = None,
            remote_gw6: Optional[pulumi.Input[str]] = None,
            sequence_number_reception: Optional[pulumi.Input[str]] = None,
            sequence_number_transmission: Optional[pulumi.Input[str]] = None,
            use_sdwan: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Gretunnel':
        """
        Get an existing Gretunnel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] checksum_reception: Enable/disable validating checksums in received GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] checksum_transmission: Enable/disable including checksums in transmitted GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] diffservcode: DiffServ setting to be applied to GRE tunnel outer IP header.
        :param pulumi.Input[str] dscp_copying: Enable/disable DSCP copying. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] ip_version: IP version to use for VPN interface. Valid values: `4`, `6`.
        :param pulumi.Input[int] keepalive_failtimes: Number of consecutive unreturned keepalive messages before a GRE connection is considered down (1 - 255).
        :param pulumi.Input[int] keepalive_interval: Keepalive message interval (0 - 32767, 0 = disabled).
        :param pulumi.Input[int] key_inbound: Require received GRE packets contain this key (0 - 4294967295).
        :param pulumi.Input[int] key_outbound: Include this key in transmitted GRE packets (0 - 4294967295).
        :param pulumi.Input[str] local_gw: IP address of the local gateway.
        :param pulumi.Input[str] local_gw6: IPv6 address of the local gateway.
        :param pulumi.Input[str] name: Tunnel name.
        :param pulumi.Input[str] remote_gw: IP address of the remote gateway.
        :param pulumi.Input[str] remote_gw6: IPv6 address of the remote gateway.
        :param pulumi.Input[str] sequence_number_reception: Enable/disable validating sequence numbers in received GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sequence_number_transmission: Enable/disable including of sequence numbers in transmitted GRE packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] use_sdwan: Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GretunnelState.__new__(_GretunnelState)

        __props__.__dict__["checksum_reception"] = checksum_reception
        __props__.__dict__["checksum_transmission"] = checksum_transmission
        __props__.__dict__["diffservcode"] = diffservcode
        __props__.__dict__["dscp_copying"] = dscp_copying
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["keepalive_failtimes"] = keepalive_failtimes
        __props__.__dict__["keepalive_interval"] = keepalive_interval
        __props__.__dict__["key_inbound"] = key_inbound
        __props__.__dict__["key_outbound"] = key_outbound
        __props__.__dict__["local_gw"] = local_gw
        __props__.__dict__["local_gw6"] = local_gw6
        __props__.__dict__["name"] = name
        __props__.__dict__["remote_gw"] = remote_gw
        __props__.__dict__["remote_gw6"] = remote_gw6
        __props__.__dict__["sequence_number_reception"] = sequence_number_reception
        __props__.__dict__["sequence_number_transmission"] = sequence_number_transmission
        __props__.__dict__["use_sdwan"] = use_sdwan
        __props__.__dict__["vdomparam"] = vdomparam
        return Gretunnel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="checksumReception")
    def checksum_reception(self) -> pulumi.Output[str]:
        """
        Enable/disable validating checksums in received GRE packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "checksum_reception")

    @property
    @pulumi.getter(name="checksumTransmission")
    def checksum_transmission(self) -> pulumi.Output[str]:
        """
        Enable/disable including checksums in transmitted GRE packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "checksum_transmission")

    @property
    @pulumi.getter
    def diffservcode(self) -> pulumi.Output[str]:
        """
        DiffServ setting to be applied to GRE tunnel outer IP header.
        """
        return pulumi.get(self, "diffservcode")

    @property
    @pulumi.getter(name="dscpCopying")
    def dscp_copying(self) -> pulumi.Output[str]:
        """
        Enable/disable DSCP copying. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dscp_copying")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[str]:
        """
        IP version to use for VPN interface. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="keepaliveFailtimes")
    def keepalive_failtimes(self) -> pulumi.Output[int]:
        """
        Number of consecutive unreturned keepalive messages before a GRE connection is considered down (1 - 255).
        """
        return pulumi.get(self, "keepalive_failtimes")

    @property
    @pulumi.getter(name="keepaliveInterval")
    def keepalive_interval(self) -> pulumi.Output[int]:
        """
        Keepalive message interval (0 - 32767, 0 = disabled).
        """
        return pulumi.get(self, "keepalive_interval")

    @property
    @pulumi.getter(name="keyInbound")
    def key_inbound(self) -> pulumi.Output[int]:
        """
        Require received GRE packets contain this key (0 - 4294967295).
        """
        return pulumi.get(self, "key_inbound")

    @property
    @pulumi.getter(name="keyOutbound")
    def key_outbound(self) -> pulumi.Output[int]:
        """
        Include this key in transmitted GRE packets (0 - 4294967295).
        """
        return pulumi.get(self, "key_outbound")

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> pulumi.Output[str]:
        """
        IP address of the local gateway.
        """
        return pulumi.get(self, "local_gw")

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> pulumi.Output[str]:
        """
        IPv6 address of the local gateway.
        """
        return pulumi.get(self, "local_gw6")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Tunnel name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> pulumi.Output[str]:
        """
        IP address of the remote gateway.
        """
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> pulumi.Output[str]:
        """
        IPv6 address of the remote gateway.
        """
        return pulumi.get(self, "remote_gw6")

    @property
    @pulumi.getter(name="sequenceNumberReception")
    def sequence_number_reception(self) -> pulumi.Output[str]:
        """
        Enable/disable validating sequence numbers in received GRE packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sequence_number_reception")

    @property
    @pulumi.getter(name="sequenceNumberTransmission")
    def sequence_number_transmission(self) -> pulumi.Output[str]:
        """
        Enable/disable including of sequence numbers in transmitted GRE packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sequence_number_transmission")

    @property
    @pulumi.getter(name="useSdwan")
    def use_sdwan(self) -> pulumi.Output[str]:
        """
        Enable/disable use of SD-WAN to reach remote gateway. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "use_sdwan")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

