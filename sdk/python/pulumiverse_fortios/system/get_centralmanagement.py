# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCentralmanagementResult',
    'AwaitableGetCentralmanagementResult',
    'get_centralmanagement',
    'get_centralmanagement_output',
]

@pulumi.output_type
class GetCentralmanagementResult:
    """
    A collection of values returned by getCentralmanagement.
    """
    def __init__(__self__, allow_monitor=None, allow_push_configuration=None, allow_push_firmware=None, allow_remote_firmware_upgrade=None, ca_cert=None, enc_algorithm=None, fmg=None, fmg_source_ip=None, fmg_source_ip6=None, fmg_update_port=None, fortigate_cloud_sso_default_profile=None, id=None, include_default_servers=None, interface=None, interface_select_method=None, local_cert=None, mode=None, schedule_config_restore=None, schedule_script_restore=None, serial_number=None, server_lists=None, type=None, vdom=None, vdomparam=None):
        if allow_monitor and not isinstance(allow_monitor, str):
            raise TypeError("Expected argument 'allow_monitor' to be a str")
        pulumi.set(__self__, "allow_monitor", allow_monitor)
        if allow_push_configuration and not isinstance(allow_push_configuration, str):
            raise TypeError("Expected argument 'allow_push_configuration' to be a str")
        pulumi.set(__self__, "allow_push_configuration", allow_push_configuration)
        if allow_push_firmware and not isinstance(allow_push_firmware, str):
            raise TypeError("Expected argument 'allow_push_firmware' to be a str")
        pulumi.set(__self__, "allow_push_firmware", allow_push_firmware)
        if allow_remote_firmware_upgrade and not isinstance(allow_remote_firmware_upgrade, str):
            raise TypeError("Expected argument 'allow_remote_firmware_upgrade' to be a str")
        pulumi.set(__self__, "allow_remote_firmware_upgrade", allow_remote_firmware_upgrade)
        if ca_cert and not isinstance(ca_cert, str):
            raise TypeError("Expected argument 'ca_cert' to be a str")
        pulumi.set(__self__, "ca_cert", ca_cert)
        if enc_algorithm and not isinstance(enc_algorithm, str):
            raise TypeError("Expected argument 'enc_algorithm' to be a str")
        pulumi.set(__self__, "enc_algorithm", enc_algorithm)
        if fmg and not isinstance(fmg, str):
            raise TypeError("Expected argument 'fmg' to be a str")
        pulumi.set(__self__, "fmg", fmg)
        if fmg_source_ip and not isinstance(fmg_source_ip, str):
            raise TypeError("Expected argument 'fmg_source_ip' to be a str")
        pulumi.set(__self__, "fmg_source_ip", fmg_source_ip)
        if fmg_source_ip6 and not isinstance(fmg_source_ip6, str):
            raise TypeError("Expected argument 'fmg_source_ip6' to be a str")
        pulumi.set(__self__, "fmg_source_ip6", fmg_source_ip6)
        if fmg_update_port and not isinstance(fmg_update_port, str):
            raise TypeError("Expected argument 'fmg_update_port' to be a str")
        pulumi.set(__self__, "fmg_update_port", fmg_update_port)
        if fortigate_cloud_sso_default_profile and not isinstance(fortigate_cloud_sso_default_profile, str):
            raise TypeError("Expected argument 'fortigate_cloud_sso_default_profile' to be a str")
        pulumi.set(__self__, "fortigate_cloud_sso_default_profile", fortigate_cloud_sso_default_profile)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_default_servers and not isinstance(include_default_servers, str):
            raise TypeError("Expected argument 'include_default_servers' to be a str")
        pulumi.set(__self__, "include_default_servers", include_default_servers)
        if interface and not isinstance(interface, str):
            raise TypeError("Expected argument 'interface' to be a str")
        pulumi.set(__self__, "interface", interface)
        if interface_select_method and not isinstance(interface_select_method, str):
            raise TypeError("Expected argument 'interface_select_method' to be a str")
        pulumi.set(__self__, "interface_select_method", interface_select_method)
        if local_cert and not isinstance(local_cert, str):
            raise TypeError("Expected argument 'local_cert' to be a str")
        pulumi.set(__self__, "local_cert", local_cert)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if schedule_config_restore and not isinstance(schedule_config_restore, str):
            raise TypeError("Expected argument 'schedule_config_restore' to be a str")
        pulumi.set(__self__, "schedule_config_restore", schedule_config_restore)
        if schedule_script_restore and not isinstance(schedule_script_restore, str):
            raise TypeError("Expected argument 'schedule_script_restore' to be a str")
        pulumi.set(__self__, "schedule_script_restore", schedule_script_restore)
        if serial_number and not isinstance(serial_number, str):
            raise TypeError("Expected argument 'serial_number' to be a str")
        pulumi.set(__self__, "serial_number", serial_number)
        if server_lists and not isinstance(server_lists, list):
            raise TypeError("Expected argument 'server_lists' to be a list")
        pulumi.set(__self__, "server_lists", server_lists)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vdom and not isinstance(vdom, str):
            raise TypeError("Expected argument 'vdom' to be a str")
        pulumi.set(__self__, "vdom", vdom)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="allowMonitor")
    def allow_monitor(self) -> str:
        """
        Enable/disable allowing the central management server to remotely monitor this FortiGate
        """
        return pulumi.get(self, "allow_monitor")

    @property
    @pulumi.getter(name="allowPushConfiguration")
    def allow_push_configuration(self) -> str:
        """
        Enable/disable allowing the central management server to push configuration changes to this FortiGate.
        """
        return pulumi.get(self, "allow_push_configuration")

    @property
    @pulumi.getter(name="allowPushFirmware")
    def allow_push_firmware(self) -> str:
        """
        Enable/disable allowing the central management server to push firmware updates to this FortiGate.
        """
        return pulumi.get(self, "allow_push_firmware")

    @property
    @pulumi.getter(name="allowRemoteFirmwareUpgrade")
    def allow_remote_firmware_upgrade(self) -> str:
        """
        Enable/disable remotely upgrading the firmware on this FortiGate from the central management server.
        """
        return pulumi.get(self, "allow_remote_firmware_upgrade")

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> str:
        """
        CA certificate to be used by FGFM protocol.
        """
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter(name="encAlgorithm")
    def enc_algorithm(self) -> str:
        """
        Encryption strength for communications between the FortiGate and central management.
        """
        return pulumi.get(self, "enc_algorithm")

    @property
    @pulumi.getter
    def fmg(self) -> str:
        """
        IP address or FQDN of the FortiManager.
        """
        return pulumi.get(self, "fmg")

    @property
    @pulumi.getter(name="fmgSourceIp")
    def fmg_source_ip(self) -> str:
        """
        IPv4 source address that this FortiGate uses when communicating with FortiManager.
        """
        return pulumi.get(self, "fmg_source_ip")

    @property
    @pulumi.getter(name="fmgSourceIp6")
    def fmg_source_ip6(self) -> str:
        """
        IPv6 source address that this FortiGate uses when communicating with FortiManager.
        """
        return pulumi.get(self, "fmg_source_ip6")

    @property
    @pulumi.getter(name="fmgUpdatePort")
    def fmg_update_port(self) -> str:
        """
        Port used to communicate with FortiManager that is acting as a FortiGuard update server.
        """
        return pulumi.get(self, "fmg_update_port")

    @property
    @pulumi.getter(name="fortigateCloudSsoDefaultProfile")
    def fortigate_cloud_sso_default_profile(self) -> str:
        """
        Override access profile.
        """
        return pulumi.get(self, "fortigate_cloud_sso_default_profile")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeDefaultServers")
    def include_default_servers(self) -> str:
        """
        Enable/disable inclusion of public FortiGuard servers in the override server list.
        """
        return pulumi.get(self, "include_default_servers")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> str:
        """
        Specify how to select outgoing interface to reach server.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="localCert")
    def local_cert(self) -> str:
        """
        Certificate to be used by FGFM protocol.
        """
        return pulumi.get(self, "local_cert")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Central management mode.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="scheduleConfigRestore")
    def schedule_config_restore(self) -> str:
        """
        Enable/disable allowing the central management server to restore the configuration of this FortiGate.
        """
        return pulumi.get(self, "schedule_config_restore")

    @property
    @pulumi.getter(name="scheduleScriptRestore")
    def schedule_script_restore(self) -> str:
        """
        Enable/disable allowing the central management server to restore the scripts stored on this FortiGate.
        """
        return pulumi.get(self, "schedule_script_restore")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> str:
        """
        Serial number.
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="serverLists")
    def server_lists(self) -> Sequence['outputs.GetCentralmanagementServerListResult']:
        """
        Additional severs that the FortiGate can use for updates (for AV, IPS, updates) and ratings (for web filter and antispam ratings) servers. The structure of `server_list` block is documented below.
        """
        return pulumi.get(self, "server_lists")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Central management type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdom(self) -> str:
        """
        Virtual domain (VDOM) name to use when communicating with FortiManager.
        """
        return pulumi.get(self, "vdom")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetCentralmanagementResult(GetCentralmanagementResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCentralmanagementResult(
            allow_monitor=self.allow_monitor,
            allow_push_configuration=self.allow_push_configuration,
            allow_push_firmware=self.allow_push_firmware,
            allow_remote_firmware_upgrade=self.allow_remote_firmware_upgrade,
            ca_cert=self.ca_cert,
            enc_algorithm=self.enc_algorithm,
            fmg=self.fmg,
            fmg_source_ip=self.fmg_source_ip,
            fmg_source_ip6=self.fmg_source_ip6,
            fmg_update_port=self.fmg_update_port,
            fortigate_cloud_sso_default_profile=self.fortigate_cloud_sso_default_profile,
            id=self.id,
            include_default_servers=self.include_default_servers,
            interface=self.interface,
            interface_select_method=self.interface_select_method,
            local_cert=self.local_cert,
            mode=self.mode,
            schedule_config_restore=self.schedule_config_restore,
            schedule_script_restore=self.schedule_script_restore,
            serial_number=self.serial_number,
            server_lists=self.server_lists,
            type=self.type,
            vdom=self.vdom,
            vdomparam=self.vdomparam)


def get_centralmanagement(vdomparam: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCentralmanagementResult:
    """
    Use this data source to get information on fortios system centralmanagement


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:system/getCentralmanagement:getCentralmanagement', __args__, opts=opts, typ=GetCentralmanagementResult).value

    return AwaitableGetCentralmanagementResult(
        allow_monitor=pulumi.get(__ret__, 'allow_monitor'),
        allow_push_configuration=pulumi.get(__ret__, 'allow_push_configuration'),
        allow_push_firmware=pulumi.get(__ret__, 'allow_push_firmware'),
        allow_remote_firmware_upgrade=pulumi.get(__ret__, 'allow_remote_firmware_upgrade'),
        ca_cert=pulumi.get(__ret__, 'ca_cert'),
        enc_algorithm=pulumi.get(__ret__, 'enc_algorithm'),
        fmg=pulumi.get(__ret__, 'fmg'),
        fmg_source_ip=pulumi.get(__ret__, 'fmg_source_ip'),
        fmg_source_ip6=pulumi.get(__ret__, 'fmg_source_ip6'),
        fmg_update_port=pulumi.get(__ret__, 'fmg_update_port'),
        fortigate_cloud_sso_default_profile=pulumi.get(__ret__, 'fortigate_cloud_sso_default_profile'),
        id=pulumi.get(__ret__, 'id'),
        include_default_servers=pulumi.get(__ret__, 'include_default_servers'),
        interface=pulumi.get(__ret__, 'interface'),
        interface_select_method=pulumi.get(__ret__, 'interface_select_method'),
        local_cert=pulumi.get(__ret__, 'local_cert'),
        mode=pulumi.get(__ret__, 'mode'),
        schedule_config_restore=pulumi.get(__ret__, 'schedule_config_restore'),
        schedule_script_restore=pulumi.get(__ret__, 'schedule_script_restore'),
        serial_number=pulumi.get(__ret__, 'serial_number'),
        server_lists=pulumi.get(__ret__, 'server_lists'),
        type=pulumi.get(__ret__, 'type'),
        vdom=pulumi.get(__ret__, 'vdom'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_centralmanagement)
def get_centralmanagement_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCentralmanagementResult]:
    """
    Use this data source to get information on fortios system centralmanagement


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
