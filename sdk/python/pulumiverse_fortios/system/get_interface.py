# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInterfaceResult',
    'AwaitableGetInterfaceResult',
    'get_interface',
    'get_interface_output',
]

@pulumi.output_type
class GetInterfaceResult:
    """
    A collection of values returned by getInterface.
    """
    def __init__(__self__, ac_name=None, aggregate=None, aggregate_type=None, algorithm=None, alias=None, allowaccess=None, ap_discover=None, arpforward=None, auth_cert=None, auth_portal_addr=None, auth_type=None, auto_auth_extension_device=None, bandwidth_measure_time=None, bfd=None, bfd_desired_min_tx=None, bfd_detect_mult=None, bfd_required_min_rx=None, broadcast_forticlient_discovery=None, broadcast_forward=None, captive_portal=None, cli_conn_status=None, client_options=None, color=None, dedicated_to=None, default_purdue_level=None, defaultgw=None, description=None, detected_peer_mtu=None, detectprotocol=None, detectserver=None, device_access_list=None, device_identification=None, device_identification_active_scan=None, device_netscan=None, device_user_identification=None, devindex=None, dhcp_broadcast_flag=None, dhcp_classless_route_addition=None, dhcp_client_identifier=None, dhcp_relay_agent_option=None, dhcp_relay_circuit_id=None, dhcp_relay_interface=None, dhcp_relay_interface_select_method=None, dhcp_relay_ip=None, dhcp_relay_link_selection=None, dhcp_relay_request_all_server=None, dhcp_relay_service=None, dhcp_relay_source_ip=None, dhcp_relay_type=None, dhcp_renew_time=None, dhcp_smart_relay=None, dhcp_snooping_server_lists=None, disc_retry_timeout=None, disconnect_threshold=None, distance=None, dns_server_override=None, dns_server_protocol=None, drop_fragment=None, drop_overlapped_fragment=None, eap_ca_cert=None, eap_identity=None, eap_method=None, eap_password=None, eap_supplicant=None, eap_user_cert=None, egress_shaping_profile=None, endpoint_compliance=None, estimated_downstream_bandwidth=None, estimated_upstream_bandwidth=None, explicit_ftp_proxy=None, explicit_web_proxy=None, external=None, fail_action_on_extender=None, fail_alert_interfaces=None, fail_alert_method=None, fail_detect=None, fail_detect_option=None, fortiheartbeat=None, fortilink=None, fortilink_backup_link=None, fortilink_neighbor_detect=None, fortilink_split_interface=None, fortilink_stacking=None, forward_domain=None, forward_error_correction=None, gwdetect=None, ha_priority=None, icmp_accept_redirect=None, icmp_send_redirect=None, id=None, ident_accept=None, idle_timeout=None, ike_saml_server=None, inbandwidth=None, ingress_shaping_profile=None, ingress_spillover_threshold=None, interface=None, internal=None, ip=None, ip_managed_by_fortiipam=None, ipmac=None, ips_sniffer_mode=None, ipunnumbered=None, ipv6s=None, l2forward=None, lacp_ha_secondary=None, lacp_ha_slave=None, lacp_mode=None, lacp_speed=None, lcp_echo_interval=None, lcp_max_echo_fails=None, link_up_delay=None, lldp_network_policy=None, lldp_reception=None, lldp_transmission=None, macaddr=None, managed_devices=None, managed_subnetwork_size=None, management_ip=None, measured_downstream_bandwidth=None, measured_upstream_bandwidth=None, mediatype=None, members=None, min_links=None, min_links_down=None, mode=None, monitor_bandwidth=None, mtu=None, mtu_override=None, name=None, ndiscforward=None, netbios_forward=None, netflow_sampler=None, outbandwidth=None, padt_retry_timeout=None, password=None, ping_serv_status=None, polling_interval=None, pppoe_unnumbered_negotiate=None, pptp_auth_type=None, pptp_client=None, pptp_password=None, pptp_server_ip=None, pptp_timeout=None, pptp_user=None, preserve_session_route=None, priority=None, priority_override=None, proxy_captive_portal=None, reachable_time=None, redundant_interface=None, remote_ip=None, replacemsg_override_group=None, ring_rx=None, ring_tx=None, role=None, sample_direction=None, sample_rate=None, scan_botnet_connections=None, secondary_ip=None, secondaryips=None, security_exempt_list=None, security_external_logout=None, security_external_web=None, security_groups=None, security_mac_auth_bypass=None, security_mode=None, security_redirect_url=None, service_name=None, sflow_sampler=None, snmp_index=None, speed=None, spillover_threshold=None, src_check=None, status=None, stp=None, stp_ha_secondary=None, stpforward=None, stpforward_mode=None, subst=None, substitute_dst_mac=None, swc_first_create=None, swc_vlan=None, switch=None, switch_controller_access_vlan=None, switch_controller_arp_inspection=None, switch_controller_dhcp_snooping=None, switch_controller_dhcp_snooping_option82=None, switch_controller_dhcp_snooping_verify_mac=None, switch_controller_dynamic=None, switch_controller_feature=None, switch_controller_igmp_snooping=None, switch_controller_igmp_snooping_fast_leave=None, switch_controller_igmp_snooping_proxy=None, switch_controller_iot_scanning=None, switch_controller_learning_limit=None, switch_controller_mgmt_vlan=None, switch_controller_nac=None, switch_controller_netflow_collect=None, switch_controller_offload=None, switch_controller_offload_gw=None, switch_controller_offload_ip=None, switch_controller_rspan_mode=None, switch_controller_source_ip=None, switch_controller_traffic_policy=None, system_id=None, system_id_type=None, taggings=None, tcp_mss=None, trunk=None, trust_ip1=None, trust_ip2=None, trust_ip3=None, trust_ip61=None, trust_ip62=None, trust_ip63=None, type=None, username=None, vdom=None, vdomparam=None, vindex=None, vlan_protocol=None, vlanforward=None, vlanid=None, vrf=None, vrrp_virtual_mac=None, vrrps=None, wccp=None, weight=None, wins_ip=None):
        if ac_name and not isinstance(ac_name, str):
            raise TypeError("Expected argument 'ac_name' to be a str")
        pulumi.set(__self__, "ac_name", ac_name)
        if aggregate and not isinstance(aggregate, str):
            raise TypeError("Expected argument 'aggregate' to be a str")
        pulumi.set(__self__, "aggregate", aggregate)
        if aggregate_type and not isinstance(aggregate_type, str):
            raise TypeError("Expected argument 'aggregate_type' to be a str")
        pulumi.set(__self__, "aggregate_type", aggregate_type)
        if algorithm and not isinstance(algorithm, str):
            raise TypeError("Expected argument 'algorithm' to be a str")
        pulumi.set(__self__, "algorithm", algorithm)
        if alias and not isinstance(alias, str):
            raise TypeError("Expected argument 'alias' to be a str")
        pulumi.set(__self__, "alias", alias)
        if allowaccess and not isinstance(allowaccess, str):
            raise TypeError("Expected argument 'allowaccess' to be a str")
        pulumi.set(__self__, "allowaccess", allowaccess)
        if ap_discover and not isinstance(ap_discover, str):
            raise TypeError("Expected argument 'ap_discover' to be a str")
        pulumi.set(__self__, "ap_discover", ap_discover)
        if arpforward and not isinstance(arpforward, str):
            raise TypeError("Expected argument 'arpforward' to be a str")
        pulumi.set(__self__, "arpforward", arpforward)
        if auth_cert and not isinstance(auth_cert, str):
            raise TypeError("Expected argument 'auth_cert' to be a str")
        pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_portal_addr and not isinstance(auth_portal_addr, str):
            raise TypeError("Expected argument 'auth_portal_addr' to be a str")
        pulumi.set(__self__, "auth_portal_addr", auth_portal_addr)
        if auth_type and not isinstance(auth_type, str):
            raise TypeError("Expected argument 'auth_type' to be a str")
        pulumi.set(__self__, "auth_type", auth_type)
        if auto_auth_extension_device and not isinstance(auto_auth_extension_device, str):
            raise TypeError("Expected argument 'auto_auth_extension_device' to be a str")
        pulumi.set(__self__, "auto_auth_extension_device", auto_auth_extension_device)
        if bandwidth_measure_time and not isinstance(bandwidth_measure_time, int):
            raise TypeError("Expected argument 'bandwidth_measure_time' to be a int")
        pulumi.set(__self__, "bandwidth_measure_time", bandwidth_measure_time)
        if bfd and not isinstance(bfd, str):
            raise TypeError("Expected argument 'bfd' to be a str")
        pulumi.set(__self__, "bfd", bfd)
        if bfd_desired_min_tx and not isinstance(bfd_desired_min_tx, int):
            raise TypeError("Expected argument 'bfd_desired_min_tx' to be a int")
        pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        if bfd_detect_mult and not isinstance(bfd_detect_mult, int):
            raise TypeError("Expected argument 'bfd_detect_mult' to be a int")
        pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        if bfd_required_min_rx and not isinstance(bfd_required_min_rx, int):
            raise TypeError("Expected argument 'bfd_required_min_rx' to be a int")
        pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        if broadcast_forticlient_discovery and not isinstance(broadcast_forticlient_discovery, str):
            raise TypeError("Expected argument 'broadcast_forticlient_discovery' to be a str")
        pulumi.set(__self__, "broadcast_forticlient_discovery", broadcast_forticlient_discovery)
        if broadcast_forward and not isinstance(broadcast_forward, str):
            raise TypeError("Expected argument 'broadcast_forward' to be a str")
        pulumi.set(__self__, "broadcast_forward", broadcast_forward)
        if captive_portal and not isinstance(captive_portal, int):
            raise TypeError("Expected argument 'captive_portal' to be a int")
        pulumi.set(__self__, "captive_portal", captive_portal)
        if cli_conn_status and not isinstance(cli_conn_status, int):
            raise TypeError("Expected argument 'cli_conn_status' to be a int")
        pulumi.set(__self__, "cli_conn_status", cli_conn_status)
        if client_options and not isinstance(client_options, list):
            raise TypeError("Expected argument 'client_options' to be a list")
        pulumi.set(__self__, "client_options", client_options)
        if color and not isinstance(color, int):
            raise TypeError("Expected argument 'color' to be a int")
        pulumi.set(__self__, "color", color)
        if dedicated_to and not isinstance(dedicated_to, str):
            raise TypeError("Expected argument 'dedicated_to' to be a str")
        pulumi.set(__self__, "dedicated_to", dedicated_to)
        if default_purdue_level and not isinstance(default_purdue_level, str):
            raise TypeError("Expected argument 'default_purdue_level' to be a str")
        pulumi.set(__self__, "default_purdue_level", default_purdue_level)
        if defaultgw and not isinstance(defaultgw, str):
            raise TypeError("Expected argument 'defaultgw' to be a str")
        pulumi.set(__self__, "defaultgw", defaultgw)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if detected_peer_mtu and not isinstance(detected_peer_mtu, int):
            raise TypeError("Expected argument 'detected_peer_mtu' to be a int")
        pulumi.set(__self__, "detected_peer_mtu", detected_peer_mtu)
        if detectprotocol and not isinstance(detectprotocol, str):
            raise TypeError("Expected argument 'detectprotocol' to be a str")
        pulumi.set(__self__, "detectprotocol", detectprotocol)
        if detectserver and not isinstance(detectserver, str):
            raise TypeError("Expected argument 'detectserver' to be a str")
        pulumi.set(__self__, "detectserver", detectserver)
        if device_access_list and not isinstance(device_access_list, str):
            raise TypeError("Expected argument 'device_access_list' to be a str")
        pulumi.set(__self__, "device_access_list", device_access_list)
        if device_identification and not isinstance(device_identification, str):
            raise TypeError("Expected argument 'device_identification' to be a str")
        pulumi.set(__self__, "device_identification", device_identification)
        if device_identification_active_scan and not isinstance(device_identification_active_scan, str):
            raise TypeError("Expected argument 'device_identification_active_scan' to be a str")
        pulumi.set(__self__, "device_identification_active_scan", device_identification_active_scan)
        if device_netscan and not isinstance(device_netscan, str):
            raise TypeError("Expected argument 'device_netscan' to be a str")
        pulumi.set(__self__, "device_netscan", device_netscan)
        if device_user_identification and not isinstance(device_user_identification, str):
            raise TypeError("Expected argument 'device_user_identification' to be a str")
        pulumi.set(__self__, "device_user_identification", device_user_identification)
        if devindex and not isinstance(devindex, int):
            raise TypeError("Expected argument 'devindex' to be a int")
        pulumi.set(__self__, "devindex", devindex)
        if dhcp_broadcast_flag and not isinstance(dhcp_broadcast_flag, str):
            raise TypeError("Expected argument 'dhcp_broadcast_flag' to be a str")
        pulumi.set(__self__, "dhcp_broadcast_flag", dhcp_broadcast_flag)
        if dhcp_classless_route_addition and not isinstance(dhcp_classless_route_addition, str):
            raise TypeError("Expected argument 'dhcp_classless_route_addition' to be a str")
        pulumi.set(__self__, "dhcp_classless_route_addition", dhcp_classless_route_addition)
        if dhcp_client_identifier and not isinstance(dhcp_client_identifier, str):
            raise TypeError("Expected argument 'dhcp_client_identifier' to be a str")
        pulumi.set(__self__, "dhcp_client_identifier", dhcp_client_identifier)
        if dhcp_relay_agent_option and not isinstance(dhcp_relay_agent_option, str):
            raise TypeError("Expected argument 'dhcp_relay_agent_option' to be a str")
        pulumi.set(__self__, "dhcp_relay_agent_option", dhcp_relay_agent_option)
        if dhcp_relay_circuit_id and not isinstance(dhcp_relay_circuit_id, str):
            raise TypeError("Expected argument 'dhcp_relay_circuit_id' to be a str")
        pulumi.set(__self__, "dhcp_relay_circuit_id", dhcp_relay_circuit_id)
        if dhcp_relay_interface and not isinstance(dhcp_relay_interface, str):
            raise TypeError("Expected argument 'dhcp_relay_interface' to be a str")
        pulumi.set(__self__, "dhcp_relay_interface", dhcp_relay_interface)
        if dhcp_relay_interface_select_method and not isinstance(dhcp_relay_interface_select_method, str):
            raise TypeError("Expected argument 'dhcp_relay_interface_select_method' to be a str")
        pulumi.set(__self__, "dhcp_relay_interface_select_method", dhcp_relay_interface_select_method)
        if dhcp_relay_ip and not isinstance(dhcp_relay_ip, str):
            raise TypeError("Expected argument 'dhcp_relay_ip' to be a str")
        pulumi.set(__self__, "dhcp_relay_ip", dhcp_relay_ip)
        if dhcp_relay_link_selection and not isinstance(dhcp_relay_link_selection, str):
            raise TypeError("Expected argument 'dhcp_relay_link_selection' to be a str")
        pulumi.set(__self__, "dhcp_relay_link_selection", dhcp_relay_link_selection)
        if dhcp_relay_request_all_server and not isinstance(dhcp_relay_request_all_server, str):
            raise TypeError("Expected argument 'dhcp_relay_request_all_server' to be a str")
        pulumi.set(__self__, "dhcp_relay_request_all_server", dhcp_relay_request_all_server)
        if dhcp_relay_service and not isinstance(dhcp_relay_service, str):
            raise TypeError("Expected argument 'dhcp_relay_service' to be a str")
        pulumi.set(__self__, "dhcp_relay_service", dhcp_relay_service)
        if dhcp_relay_source_ip and not isinstance(dhcp_relay_source_ip, str):
            raise TypeError("Expected argument 'dhcp_relay_source_ip' to be a str")
        pulumi.set(__self__, "dhcp_relay_source_ip", dhcp_relay_source_ip)
        if dhcp_relay_type and not isinstance(dhcp_relay_type, str):
            raise TypeError("Expected argument 'dhcp_relay_type' to be a str")
        pulumi.set(__self__, "dhcp_relay_type", dhcp_relay_type)
        if dhcp_renew_time and not isinstance(dhcp_renew_time, int):
            raise TypeError("Expected argument 'dhcp_renew_time' to be a int")
        pulumi.set(__self__, "dhcp_renew_time", dhcp_renew_time)
        if dhcp_smart_relay and not isinstance(dhcp_smart_relay, str):
            raise TypeError("Expected argument 'dhcp_smart_relay' to be a str")
        pulumi.set(__self__, "dhcp_smart_relay", dhcp_smart_relay)
        if dhcp_snooping_server_lists and not isinstance(dhcp_snooping_server_lists, list):
            raise TypeError("Expected argument 'dhcp_snooping_server_lists' to be a list")
        pulumi.set(__self__, "dhcp_snooping_server_lists", dhcp_snooping_server_lists)
        if disc_retry_timeout and not isinstance(disc_retry_timeout, int):
            raise TypeError("Expected argument 'disc_retry_timeout' to be a int")
        pulumi.set(__self__, "disc_retry_timeout", disc_retry_timeout)
        if disconnect_threshold and not isinstance(disconnect_threshold, int):
            raise TypeError("Expected argument 'disconnect_threshold' to be a int")
        pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if distance and not isinstance(distance, int):
            raise TypeError("Expected argument 'distance' to be a int")
        pulumi.set(__self__, "distance", distance)
        if dns_server_override and not isinstance(dns_server_override, str):
            raise TypeError("Expected argument 'dns_server_override' to be a str")
        pulumi.set(__self__, "dns_server_override", dns_server_override)
        if dns_server_protocol and not isinstance(dns_server_protocol, str):
            raise TypeError("Expected argument 'dns_server_protocol' to be a str")
        pulumi.set(__self__, "dns_server_protocol", dns_server_protocol)
        if drop_fragment and not isinstance(drop_fragment, str):
            raise TypeError("Expected argument 'drop_fragment' to be a str")
        pulumi.set(__self__, "drop_fragment", drop_fragment)
        if drop_overlapped_fragment and not isinstance(drop_overlapped_fragment, str):
            raise TypeError("Expected argument 'drop_overlapped_fragment' to be a str")
        pulumi.set(__self__, "drop_overlapped_fragment", drop_overlapped_fragment)
        if eap_ca_cert and not isinstance(eap_ca_cert, str):
            raise TypeError("Expected argument 'eap_ca_cert' to be a str")
        pulumi.set(__self__, "eap_ca_cert", eap_ca_cert)
        if eap_identity and not isinstance(eap_identity, str):
            raise TypeError("Expected argument 'eap_identity' to be a str")
        pulumi.set(__self__, "eap_identity", eap_identity)
        if eap_method and not isinstance(eap_method, str):
            raise TypeError("Expected argument 'eap_method' to be a str")
        pulumi.set(__self__, "eap_method", eap_method)
        if eap_password and not isinstance(eap_password, str):
            raise TypeError("Expected argument 'eap_password' to be a str")
        pulumi.set(__self__, "eap_password", eap_password)
        if eap_supplicant and not isinstance(eap_supplicant, str):
            raise TypeError("Expected argument 'eap_supplicant' to be a str")
        pulumi.set(__self__, "eap_supplicant", eap_supplicant)
        if eap_user_cert and not isinstance(eap_user_cert, str):
            raise TypeError("Expected argument 'eap_user_cert' to be a str")
        pulumi.set(__self__, "eap_user_cert", eap_user_cert)
        if egress_shaping_profile and not isinstance(egress_shaping_profile, str):
            raise TypeError("Expected argument 'egress_shaping_profile' to be a str")
        pulumi.set(__self__, "egress_shaping_profile", egress_shaping_profile)
        if endpoint_compliance and not isinstance(endpoint_compliance, str):
            raise TypeError("Expected argument 'endpoint_compliance' to be a str")
        pulumi.set(__self__, "endpoint_compliance", endpoint_compliance)
        if estimated_downstream_bandwidth and not isinstance(estimated_downstream_bandwidth, int):
            raise TypeError("Expected argument 'estimated_downstream_bandwidth' to be a int")
        pulumi.set(__self__, "estimated_downstream_bandwidth", estimated_downstream_bandwidth)
        if estimated_upstream_bandwidth and not isinstance(estimated_upstream_bandwidth, int):
            raise TypeError("Expected argument 'estimated_upstream_bandwidth' to be a int")
        pulumi.set(__self__, "estimated_upstream_bandwidth", estimated_upstream_bandwidth)
        if explicit_ftp_proxy and not isinstance(explicit_ftp_proxy, str):
            raise TypeError("Expected argument 'explicit_ftp_proxy' to be a str")
        pulumi.set(__self__, "explicit_ftp_proxy", explicit_ftp_proxy)
        if explicit_web_proxy and not isinstance(explicit_web_proxy, str):
            raise TypeError("Expected argument 'explicit_web_proxy' to be a str")
        pulumi.set(__self__, "explicit_web_proxy", explicit_web_proxy)
        if external and not isinstance(external, str):
            raise TypeError("Expected argument 'external' to be a str")
        pulumi.set(__self__, "external", external)
        if fail_action_on_extender and not isinstance(fail_action_on_extender, str):
            raise TypeError("Expected argument 'fail_action_on_extender' to be a str")
        pulumi.set(__self__, "fail_action_on_extender", fail_action_on_extender)
        if fail_alert_interfaces and not isinstance(fail_alert_interfaces, list):
            raise TypeError("Expected argument 'fail_alert_interfaces' to be a list")
        pulumi.set(__self__, "fail_alert_interfaces", fail_alert_interfaces)
        if fail_alert_method and not isinstance(fail_alert_method, str):
            raise TypeError("Expected argument 'fail_alert_method' to be a str")
        pulumi.set(__self__, "fail_alert_method", fail_alert_method)
        if fail_detect and not isinstance(fail_detect, str):
            raise TypeError("Expected argument 'fail_detect' to be a str")
        pulumi.set(__self__, "fail_detect", fail_detect)
        if fail_detect_option and not isinstance(fail_detect_option, str):
            raise TypeError("Expected argument 'fail_detect_option' to be a str")
        pulumi.set(__self__, "fail_detect_option", fail_detect_option)
        if fortiheartbeat and not isinstance(fortiheartbeat, str):
            raise TypeError("Expected argument 'fortiheartbeat' to be a str")
        pulumi.set(__self__, "fortiheartbeat", fortiheartbeat)
        if fortilink and not isinstance(fortilink, str):
            raise TypeError("Expected argument 'fortilink' to be a str")
        pulumi.set(__self__, "fortilink", fortilink)
        if fortilink_backup_link and not isinstance(fortilink_backup_link, int):
            raise TypeError("Expected argument 'fortilink_backup_link' to be a int")
        pulumi.set(__self__, "fortilink_backup_link", fortilink_backup_link)
        if fortilink_neighbor_detect and not isinstance(fortilink_neighbor_detect, str):
            raise TypeError("Expected argument 'fortilink_neighbor_detect' to be a str")
        pulumi.set(__self__, "fortilink_neighbor_detect", fortilink_neighbor_detect)
        if fortilink_split_interface and not isinstance(fortilink_split_interface, str):
            raise TypeError("Expected argument 'fortilink_split_interface' to be a str")
        pulumi.set(__self__, "fortilink_split_interface", fortilink_split_interface)
        if fortilink_stacking and not isinstance(fortilink_stacking, str):
            raise TypeError("Expected argument 'fortilink_stacking' to be a str")
        pulumi.set(__self__, "fortilink_stacking", fortilink_stacking)
        if forward_domain and not isinstance(forward_domain, int):
            raise TypeError("Expected argument 'forward_domain' to be a int")
        pulumi.set(__self__, "forward_domain", forward_domain)
        if forward_error_correction and not isinstance(forward_error_correction, str):
            raise TypeError("Expected argument 'forward_error_correction' to be a str")
        pulumi.set(__self__, "forward_error_correction", forward_error_correction)
        if gwdetect and not isinstance(gwdetect, str):
            raise TypeError("Expected argument 'gwdetect' to be a str")
        pulumi.set(__self__, "gwdetect", gwdetect)
        if ha_priority and not isinstance(ha_priority, int):
            raise TypeError("Expected argument 'ha_priority' to be a int")
        pulumi.set(__self__, "ha_priority", ha_priority)
        if icmp_accept_redirect and not isinstance(icmp_accept_redirect, str):
            raise TypeError("Expected argument 'icmp_accept_redirect' to be a str")
        pulumi.set(__self__, "icmp_accept_redirect", icmp_accept_redirect)
        if icmp_send_redirect and not isinstance(icmp_send_redirect, str):
            raise TypeError("Expected argument 'icmp_send_redirect' to be a str")
        pulumi.set(__self__, "icmp_send_redirect", icmp_send_redirect)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ident_accept and not isinstance(ident_accept, str):
            raise TypeError("Expected argument 'ident_accept' to be a str")
        pulumi.set(__self__, "ident_accept", ident_accept)
        if idle_timeout and not isinstance(idle_timeout, int):
            raise TypeError("Expected argument 'idle_timeout' to be a int")
        pulumi.set(__self__, "idle_timeout", idle_timeout)
        if ike_saml_server and not isinstance(ike_saml_server, str):
            raise TypeError("Expected argument 'ike_saml_server' to be a str")
        pulumi.set(__self__, "ike_saml_server", ike_saml_server)
        if inbandwidth and not isinstance(inbandwidth, int):
            raise TypeError("Expected argument 'inbandwidth' to be a int")
        pulumi.set(__self__, "inbandwidth", inbandwidth)
        if ingress_shaping_profile and not isinstance(ingress_shaping_profile, str):
            raise TypeError("Expected argument 'ingress_shaping_profile' to be a str")
        pulumi.set(__self__, "ingress_shaping_profile", ingress_shaping_profile)
        if ingress_spillover_threshold and not isinstance(ingress_spillover_threshold, int):
            raise TypeError("Expected argument 'ingress_spillover_threshold' to be a int")
        pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        if interface and not isinstance(interface, str):
            raise TypeError("Expected argument 'interface' to be a str")
        pulumi.set(__self__, "interface", interface)
        if internal and not isinstance(internal, int):
            raise TypeError("Expected argument 'internal' to be a int")
        pulumi.set(__self__, "internal", internal)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if ip_managed_by_fortiipam and not isinstance(ip_managed_by_fortiipam, str):
            raise TypeError("Expected argument 'ip_managed_by_fortiipam' to be a str")
        pulumi.set(__self__, "ip_managed_by_fortiipam", ip_managed_by_fortiipam)
        if ipmac and not isinstance(ipmac, str):
            raise TypeError("Expected argument 'ipmac' to be a str")
        pulumi.set(__self__, "ipmac", ipmac)
        if ips_sniffer_mode and not isinstance(ips_sniffer_mode, str):
            raise TypeError("Expected argument 'ips_sniffer_mode' to be a str")
        pulumi.set(__self__, "ips_sniffer_mode", ips_sniffer_mode)
        if ipunnumbered and not isinstance(ipunnumbered, str):
            raise TypeError("Expected argument 'ipunnumbered' to be a str")
        pulumi.set(__self__, "ipunnumbered", ipunnumbered)
        if ipv6s and not isinstance(ipv6s, list):
            raise TypeError("Expected argument 'ipv6s' to be a list")
        pulumi.set(__self__, "ipv6s", ipv6s)
        if l2forward and not isinstance(l2forward, str):
            raise TypeError("Expected argument 'l2forward' to be a str")
        pulumi.set(__self__, "l2forward", l2forward)
        if lacp_ha_secondary and not isinstance(lacp_ha_secondary, str):
            raise TypeError("Expected argument 'lacp_ha_secondary' to be a str")
        pulumi.set(__self__, "lacp_ha_secondary", lacp_ha_secondary)
        if lacp_ha_slave and not isinstance(lacp_ha_slave, str):
            raise TypeError("Expected argument 'lacp_ha_slave' to be a str")
        pulumi.set(__self__, "lacp_ha_slave", lacp_ha_slave)
        if lacp_mode and not isinstance(lacp_mode, str):
            raise TypeError("Expected argument 'lacp_mode' to be a str")
        pulumi.set(__self__, "lacp_mode", lacp_mode)
        if lacp_speed and not isinstance(lacp_speed, str):
            raise TypeError("Expected argument 'lacp_speed' to be a str")
        pulumi.set(__self__, "lacp_speed", lacp_speed)
        if lcp_echo_interval and not isinstance(lcp_echo_interval, int):
            raise TypeError("Expected argument 'lcp_echo_interval' to be a int")
        pulumi.set(__self__, "lcp_echo_interval", lcp_echo_interval)
        if lcp_max_echo_fails and not isinstance(lcp_max_echo_fails, int):
            raise TypeError("Expected argument 'lcp_max_echo_fails' to be a int")
        pulumi.set(__self__, "lcp_max_echo_fails", lcp_max_echo_fails)
        if link_up_delay and not isinstance(link_up_delay, int):
            raise TypeError("Expected argument 'link_up_delay' to be a int")
        pulumi.set(__self__, "link_up_delay", link_up_delay)
        if lldp_network_policy and not isinstance(lldp_network_policy, str):
            raise TypeError("Expected argument 'lldp_network_policy' to be a str")
        pulumi.set(__self__, "lldp_network_policy", lldp_network_policy)
        if lldp_reception and not isinstance(lldp_reception, str):
            raise TypeError("Expected argument 'lldp_reception' to be a str")
        pulumi.set(__self__, "lldp_reception", lldp_reception)
        if lldp_transmission and not isinstance(lldp_transmission, str):
            raise TypeError("Expected argument 'lldp_transmission' to be a str")
        pulumi.set(__self__, "lldp_transmission", lldp_transmission)
        if macaddr and not isinstance(macaddr, str):
            raise TypeError("Expected argument 'macaddr' to be a str")
        pulumi.set(__self__, "macaddr", macaddr)
        if managed_devices and not isinstance(managed_devices, list):
            raise TypeError("Expected argument 'managed_devices' to be a list")
        pulumi.set(__self__, "managed_devices", managed_devices)
        if managed_subnetwork_size and not isinstance(managed_subnetwork_size, str):
            raise TypeError("Expected argument 'managed_subnetwork_size' to be a str")
        pulumi.set(__self__, "managed_subnetwork_size", managed_subnetwork_size)
        if management_ip and not isinstance(management_ip, str):
            raise TypeError("Expected argument 'management_ip' to be a str")
        pulumi.set(__self__, "management_ip", management_ip)
        if measured_downstream_bandwidth and not isinstance(measured_downstream_bandwidth, int):
            raise TypeError("Expected argument 'measured_downstream_bandwidth' to be a int")
        pulumi.set(__self__, "measured_downstream_bandwidth", measured_downstream_bandwidth)
        if measured_upstream_bandwidth and not isinstance(measured_upstream_bandwidth, int):
            raise TypeError("Expected argument 'measured_upstream_bandwidth' to be a int")
        pulumi.set(__self__, "measured_upstream_bandwidth", measured_upstream_bandwidth)
        if mediatype and not isinstance(mediatype, str):
            raise TypeError("Expected argument 'mediatype' to be a str")
        pulumi.set(__self__, "mediatype", mediatype)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)
        if min_links and not isinstance(min_links, int):
            raise TypeError("Expected argument 'min_links' to be a int")
        pulumi.set(__self__, "min_links", min_links)
        if min_links_down and not isinstance(min_links_down, str):
            raise TypeError("Expected argument 'min_links_down' to be a str")
        pulumi.set(__self__, "min_links_down", min_links_down)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if monitor_bandwidth and not isinstance(monitor_bandwidth, str):
            raise TypeError("Expected argument 'monitor_bandwidth' to be a str")
        pulumi.set(__self__, "monitor_bandwidth", monitor_bandwidth)
        if mtu and not isinstance(mtu, int):
            raise TypeError("Expected argument 'mtu' to be a int")
        pulumi.set(__self__, "mtu", mtu)
        if mtu_override and not isinstance(mtu_override, str):
            raise TypeError("Expected argument 'mtu_override' to be a str")
        pulumi.set(__self__, "mtu_override", mtu_override)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if ndiscforward and not isinstance(ndiscforward, str):
            raise TypeError("Expected argument 'ndiscforward' to be a str")
        pulumi.set(__self__, "ndiscforward", ndiscforward)
        if netbios_forward and not isinstance(netbios_forward, str):
            raise TypeError("Expected argument 'netbios_forward' to be a str")
        pulumi.set(__self__, "netbios_forward", netbios_forward)
        if netflow_sampler and not isinstance(netflow_sampler, str):
            raise TypeError("Expected argument 'netflow_sampler' to be a str")
        pulumi.set(__self__, "netflow_sampler", netflow_sampler)
        if outbandwidth and not isinstance(outbandwidth, int):
            raise TypeError("Expected argument 'outbandwidth' to be a int")
        pulumi.set(__self__, "outbandwidth", outbandwidth)
        if padt_retry_timeout and not isinstance(padt_retry_timeout, int):
            raise TypeError("Expected argument 'padt_retry_timeout' to be a int")
        pulumi.set(__self__, "padt_retry_timeout", padt_retry_timeout)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if ping_serv_status and not isinstance(ping_serv_status, int):
            raise TypeError("Expected argument 'ping_serv_status' to be a int")
        pulumi.set(__self__, "ping_serv_status", ping_serv_status)
        if polling_interval and not isinstance(polling_interval, int):
            raise TypeError("Expected argument 'polling_interval' to be a int")
        pulumi.set(__self__, "polling_interval", polling_interval)
        if pppoe_unnumbered_negotiate and not isinstance(pppoe_unnumbered_negotiate, str):
            raise TypeError("Expected argument 'pppoe_unnumbered_negotiate' to be a str")
        pulumi.set(__self__, "pppoe_unnumbered_negotiate", pppoe_unnumbered_negotiate)
        if pptp_auth_type and not isinstance(pptp_auth_type, str):
            raise TypeError("Expected argument 'pptp_auth_type' to be a str")
        pulumi.set(__self__, "pptp_auth_type", pptp_auth_type)
        if pptp_client and not isinstance(pptp_client, str):
            raise TypeError("Expected argument 'pptp_client' to be a str")
        pulumi.set(__self__, "pptp_client", pptp_client)
        if pptp_password and not isinstance(pptp_password, str):
            raise TypeError("Expected argument 'pptp_password' to be a str")
        pulumi.set(__self__, "pptp_password", pptp_password)
        if pptp_server_ip and not isinstance(pptp_server_ip, str):
            raise TypeError("Expected argument 'pptp_server_ip' to be a str")
        pulumi.set(__self__, "pptp_server_ip", pptp_server_ip)
        if pptp_timeout and not isinstance(pptp_timeout, int):
            raise TypeError("Expected argument 'pptp_timeout' to be a int")
        pulumi.set(__self__, "pptp_timeout", pptp_timeout)
        if pptp_user and not isinstance(pptp_user, str):
            raise TypeError("Expected argument 'pptp_user' to be a str")
        pulumi.set(__self__, "pptp_user", pptp_user)
        if preserve_session_route and not isinstance(preserve_session_route, str):
            raise TypeError("Expected argument 'preserve_session_route' to be a str")
        pulumi.set(__self__, "preserve_session_route", preserve_session_route)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if priority_override and not isinstance(priority_override, str):
            raise TypeError("Expected argument 'priority_override' to be a str")
        pulumi.set(__self__, "priority_override", priority_override)
        if proxy_captive_portal and not isinstance(proxy_captive_portal, str):
            raise TypeError("Expected argument 'proxy_captive_portal' to be a str")
        pulumi.set(__self__, "proxy_captive_portal", proxy_captive_portal)
        if reachable_time and not isinstance(reachable_time, int):
            raise TypeError("Expected argument 'reachable_time' to be a int")
        pulumi.set(__self__, "reachable_time", reachable_time)
        if redundant_interface and not isinstance(redundant_interface, str):
            raise TypeError("Expected argument 'redundant_interface' to be a str")
        pulumi.set(__self__, "redundant_interface", redundant_interface)
        if remote_ip and not isinstance(remote_ip, str):
            raise TypeError("Expected argument 'remote_ip' to be a str")
        pulumi.set(__self__, "remote_ip", remote_ip)
        if replacemsg_override_group and not isinstance(replacemsg_override_group, str):
            raise TypeError("Expected argument 'replacemsg_override_group' to be a str")
        pulumi.set(__self__, "replacemsg_override_group", replacemsg_override_group)
        if ring_rx and not isinstance(ring_rx, int):
            raise TypeError("Expected argument 'ring_rx' to be a int")
        pulumi.set(__self__, "ring_rx", ring_rx)
        if ring_tx and not isinstance(ring_tx, int):
            raise TypeError("Expected argument 'ring_tx' to be a int")
        pulumi.set(__self__, "ring_tx", ring_tx)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if sample_direction and not isinstance(sample_direction, str):
            raise TypeError("Expected argument 'sample_direction' to be a str")
        pulumi.set(__self__, "sample_direction", sample_direction)
        if sample_rate and not isinstance(sample_rate, int):
            raise TypeError("Expected argument 'sample_rate' to be a int")
        pulumi.set(__self__, "sample_rate", sample_rate)
        if scan_botnet_connections and not isinstance(scan_botnet_connections, str):
            raise TypeError("Expected argument 'scan_botnet_connections' to be a str")
        pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if secondary_ip and not isinstance(secondary_ip, str):
            raise TypeError("Expected argument 'secondary_ip' to be a str")
        pulumi.set(__self__, "secondary_ip", secondary_ip)
        if secondaryips and not isinstance(secondaryips, list):
            raise TypeError("Expected argument 'secondaryips' to be a list")
        pulumi.set(__self__, "secondaryips", secondaryips)
        if security_exempt_list and not isinstance(security_exempt_list, str):
            raise TypeError("Expected argument 'security_exempt_list' to be a str")
        pulumi.set(__self__, "security_exempt_list", security_exempt_list)
        if security_external_logout and not isinstance(security_external_logout, str):
            raise TypeError("Expected argument 'security_external_logout' to be a str")
        pulumi.set(__self__, "security_external_logout", security_external_logout)
        if security_external_web and not isinstance(security_external_web, str):
            raise TypeError("Expected argument 'security_external_web' to be a str")
        pulumi.set(__self__, "security_external_web", security_external_web)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if security_mac_auth_bypass and not isinstance(security_mac_auth_bypass, str):
            raise TypeError("Expected argument 'security_mac_auth_bypass' to be a str")
        pulumi.set(__self__, "security_mac_auth_bypass", security_mac_auth_bypass)
        if security_mode and not isinstance(security_mode, str):
            raise TypeError("Expected argument 'security_mode' to be a str")
        pulumi.set(__self__, "security_mode", security_mode)
        if security_redirect_url and not isinstance(security_redirect_url, str):
            raise TypeError("Expected argument 'security_redirect_url' to be a str")
        pulumi.set(__self__, "security_redirect_url", security_redirect_url)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if sflow_sampler and not isinstance(sflow_sampler, str):
            raise TypeError("Expected argument 'sflow_sampler' to be a str")
        pulumi.set(__self__, "sflow_sampler", sflow_sampler)
        if snmp_index and not isinstance(snmp_index, int):
            raise TypeError("Expected argument 'snmp_index' to be a int")
        pulumi.set(__self__, "snmp_index", snmp_index)
        if speed and not isinstance(speed, str):
            raise TypeError("Expected argument 'speed' to be a str")
        pulumi.set(__self__, "speed", speed)
        if spillover_threshold and not isinstance(spillover_threshold, int):
            raise TypeError("Expected argument 'spillover_threshold' to be a int")
        pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        if src_check and not isinstance(src_check, str):
            raise TypeError("Expected argument 'src_check' to be a str")
        pulumi.set(__self__, "src_check", src_check)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if stp and not isinstance(stp, str):
            raise TypeError("Expected argument 'stp' to be a str")
        pulumi.set(__self__, "stp", stp)
        if stp_ha_secondary and not isinstance(stp_ha_secondary, str):
            raise TypeError("Expected argument 'stp_ha_secondary' to be a str")
        pulumi.set(__self__, "stp_ha_secondary", stp_ha_secondary)
        if stpforward and not isinstance(stpforward, str):
            raise TypeError("Expected argument 'stpforward' to be a str")
        pulumi.set(__self__, "stpforward", stpforward)
        if stpforward_mode and not isinstance(stpforward_mode, str):
            raise TypeError("Expected argument 'stpforward_mode' to be a str")
        pulumi.set(__self__, "stpforward_mode", stpforward_mode)
        if subst and not isinstance(subst, str):
            raise TypeError("Expected argument 'subst' to be a str")
        pulumi.set(__self__, "subst", subst)
        if substitute_dst_mac and not isinstance(substitute_dst_mac, str):
            raise TypeError("Expected argument 'substitute_dst_mac' to be a str")
        pulumi.set(__self__, "substitute_dst_mac", substitute_dst_mac)
        if swc_first_create and not isinstance(swc_first_create, int):
            raise TypeError("Expected argument 'swc_first_create' to be a int")
        pulumi.set(__self__, "swc_first_create", swc_first_create)
        if swc_vlan and not isinstance(swc_vlan, int):
            raise TypeError("Expected argument 'swc_vlan' to be a int")
        pulumi.set(__self__, "swc_vlan", swc_vlan)
        if switch and not isinstance(switch, str):
            raise TypeError("Expected argument 'switch' to be a str")
        pulumi.set(__self__, "switch", switch)
        if switch_controller_access_vlan and not isinstance(switch_controller_access_vlan, str):
            raise TypeError("Expected argument 'switch_controller_access_vlan' to be a str")
        pulumi.set(__self__, "switch_controller_access_vlan", switch_controller_access_vlan)
        if switch_controller_arp_inspection and not isinstance(switch_controller_arp_inspection, str):
            raise TypeError("Expected argument 'switch_controller_arp_inspection' to be a str")
        pulumi.set(__self__, "switch_controller_arp_inspection", switch_controller_arp_inspection)
        if switch_controller_dhcp_snooping and not isinstance(switch_controller_dhcp_snooping, str):
            raise TypeError("Expected argument 'switch_controller_dhcp_snooping' to be a str")
        pulumi.set(__self__, "switch_controller_dhcp_snooping", switch_controller_dhcp_snooping)
        if switch_controller_dhcp_snooping_option82 and not isinstance(switch_controller_dhcp_snooping_option82, str):
            raise TypeError("Expected argument 'switch_controller_dhcp_snooping_option82' to be a str")
        pulumi.set(__self__, "switch_controller_dhcp_snooping_option82", switch_controller_dhcp_snooping_option82)
        if switch_controller_dhcp_snooping_verify_mac and not isinstance(switch_controller_dhcp_snooping_verify_mac, str):
            raise TypeError("Expected argument 'switch_controller_dhcp_snooping_verify_mac' to be a str")
        pulumi.set(__self__, "switch_controller_dhcp_snooping_verify_mac", switch_controller_dhcp_snooping_verify_mac)
        if switch_controller_dynamic and not isinstance(switch_controller_dynamic, str):
            raise TypeError("Expected argument 'switch_controller_dynamic' to be a str")
        pulumi.set(__self__, "switch_controller_dynamic", switch_controller_dynamic)
        if switch_controller_feature and not isinstance(switch_controller_feature, str):
            raise TypeError("Expected argument 'switch_controller_feature' to be a str")
        pulumi.set(__self__, "switch_controller_feature", switch_controller_feature)
        if switch_controller_igmp_snooping and not isinstance(switch_controller_igmp_snooping, str):
            raise TypeError("Expected argument 'switch_controller_igmp_snooping' to be a str")
        pulumi.set(__self__, "switch_controller_igmp_snooping", switch_controller_igmp_snooping)
        if switch_controller_igmp_snooping_fast_leave and not isinstance(switch_controller_igmp_snooping_fast_leave, str):
            raise TypeError("Expected argument 'switch_controller_igmp_snooping_fast_leave' to be a str")
        pulumi.set(__self__, "switch_controller_igmp_snooping_fast_leave", switch_controller_igmp_snooping_fast_leave)
        if switch_controller_igmp_snooping_proxy and not isinstance(switch_controller_igmp_snooping_proxy, str):
            raise TypeError("Expected argument 'switch_controller_igmp_snooping_proxy' to be a str")
        pulumi.set(__self__, "switch_controller_igmp_snooping_proxy", switch_controller_igmp_snooping_proxy)
        if switch_controller_iot_scanning and not isinstance(switch_controller_iot_scanning, str):
            raise TypeError("Expected argument 'switch_controller_iot_scanning' to be a str")
        pulumi.set(__self__, "switch_controller_iot_scanning", switch_controller_iot_scanning)
        if switch_controller_learning_limit and not isinstance(switch_controller_learning_limit, int):
            raise TypeError("Expected argument 'switch_controller_learning_limit' to be a int")
        pulumi.set(__self__, "switch_controller_learning_limit", switch_controller_learning_limit)
        if switch_controller_mgmt_vlan and not isinstance(switch_controller_mgmt_vlan, int):
            raise TypeError("Expected argument 'switch_controller_mgmt_vlan' to be a int")
        pulumi.set(__self__, "switch_controller_mgmt_vlan", switch_controller_mgmt_vlan)
        if switch_controller_nac and not isinstance(switch_controller_nac, str):
            raise TypeError("Expected argument 'switch_controller_nac' to be a str")
        pulumi.set(__self__, "switch_controller_nac", switch_controller_nac)
        if switch_controller_netflow_collect and not isinstance(switch_controller_netflow_collect, str):
            raise TypeError("Expected argument 'switch_controller_netflow_collect' to be a str")
        pulumi.set(__self__, "switch_controller_netflow_collect", switch_controller_netflow_collect)
        if switch_controller_offload and not isinstance(switch_controller_offload, str):
            raise TypeError("Expected argument 'switch_controller_offload' to be a str")
        pulumi.set(__self__, "switch_controller_offload", switch_controller_offload)
        if switch_controller_offload_gw and not isinstance(switch_controller_offload_gw, str):
            raise TypeError("Expected argument 'switch_controller_offload_gw' to be a str")
        pulumi.set(__self__, "switch_controller_offload_gw", switch_controller_offload_gw)
        if switch_controller_offload_ip and not isinstance(switch_controller_offload_ip, str):
            raise TypeError("Expected argument 'switch_controller_offload_ip' to be a str")
        pulumi.set(__self__, "switch_controller_offload_ip", switch_controller_offload_ip)
        if switch_controller_rspan_mode and not isinstance(switch_controller_rspan_mode, str):
            raise TypeError("Expected argument 'switch_controller_rspan_mode' to be a str")
        pulumi.set(__self__, "switch_controller_rspan_mode", switch_controller_rspan_mode)
        if switch_controller_source_ip and not isinstance(switch_controller_source_ip, str):
            raise TypeError("Expected argument 'switch_controller_source_ip' to be a str")
        pulumi.set(__self__, "switch_controller_source_ip", switch_controller_source_ip)
        if switch_controller_traffic_policy and not isinstance(switch_controller_traffic_policy, str):
            raise TypeError("Expected argument 'switch_controller_traffic_policy' to be a str")
        pulumi.set(__self__, "switch_controller_traffic_policy", switch_controller_traffic_policy)
        if system_id and not isinstance(system_id, str):
            raise TypeError("Expected argument 'system_id' to be a str")
        pulumi.set(__self__, "system_id", system_id)
        if system_id_type and not isinstance(system_id_type, str):
            raise TypeError("Expected argument 'system_id_type' to be a str")
        pulumi.set(__self__, "system_id_type", system_id_type)
        if taggings and not isinstance(taggings, list):
            raise TypeError("Expected argument 'taggings' to be a list")
        pulumi.set(__self__, "taggings", taggings)
        if tcp_mss and not isinstance(tcp_mss, int):
            raise TypeError("Expected argument 'tcp_mss' to be a int")
        pulumi.set(__self__, "tcp_mss", tcp_mss)
        if trunk and not isinstance(trunk, str):
            raise TypeError("Expected argument 'trunk' to be a str")
        pulumi.set(__self__, "trunk", trunk)
        if trust_ip1 and not isinstance(trust_ip1, str):
            raise TypeError("Expected argument 'trust_ip1' to be a str")
        pulumi.set(__self__, "trust_ip1", trust_ip1)
        if trust_ip2 and not isinstance(trust_ip2, str):
            raise TypeError("Expected argument 'trust_ip2' to be a str")
        pulumi.set(__self__, "trust_ip2", trust_ip2)
        if trust_ip3 and not isinstance(trust_ip3, str):
            raise TypeError("Expected argument 'trust_ip3' to be a str")
        pulumi.set(__self__, "trust_ip3", trust_ip3)
        if trust_ip61 and not isinstance(trust_ip61, str):
            raise TypeError("Expected argument 'trust_ip61' to be a str")
        pulumi.set(__self__, "trust_ip61", trust_ip61)
        if trust_ip62 and not isinstance(trust_ip62, str):
            raise TypeError("Expected argument 'trust_ip62' to be a str")
        pulumi.set(__self__, "trust_ip62", trust_ip62)
        if trust_ip63 and not isinstance(trust_ip63, str):
            raise TypeError("Expected argument 'trust_ip63' to be a str")
        pulumi.set(__self__, "trust_ip63", trust_ip63)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if vdom and not isinstance(vdom, str):
            raise TypeError("Expected argument 'vdom' to be a str")
        pulumi.set(__self__, "vdom", vdom)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if vindex and not isinstance(vindex, int):
            raise TypeError("Expected argument 'vindex' to be a int")
        pulumi.set(__self__, "vindex", vindex)
        if vlan_protocol and not isinstance(vlan_protocol, str):
            raise TypeError("Expected argument 'vlan_protocol' to be a str")
        pulumi.set(__self__, "vlan_protocol", vlan_protocol)
        if vlanforward and not isinstance(vlanforward, str):
            raise TypeError("Expected argument 'vlanforward' to be a str")
        pulumi.set(__self__, "vlanforward", vlanforward)
        if vlanid and not isinstance(vlanid, int):
            raise TypeError("Expected argument 'vlanid' to be a int")
        pulumi.set(__self__, "vlanid", vlanid)
        if vrf and not isinstance(vrf, int):
            raise TypeError("Expected argument 'vrf' to be a int")
        pulumi.set(__self__, "vrf", vrf)
        if vrrp_virtual_mac and not isinstance(vrrp_virtual_mac, str):
            raise TypeError("Expected argument 'vrrp_virtual_mac' to be a str")
        pulumi.set(__self__, "vrrp_virtual_mac", vrrp_virtual_mac)
        if vrrps and not isinstance(vrrps, list):
            raise TypeError("Expected argument 'vrrps' to be a list")
        pulumi.set(__self__, "vrrps", vrrps)
        if wccp and not isinstance(wccp, str):
            raise TypeError("Expected argument 'wccp' to be a str")
        pulumi.set(__self__, "wccp", wccp)
        if weight and not isinstance(weight, int):
            raise TypeError("Expected argument 'weight' to be a int")
        pulumi.set(__self__, "weight", weight)
        if wins_ip and not isinstance(wins_ip, str):
            raise TypeError("Expected argument 'wins_ip' to be a str")
        pulumi.set(__self__, "wins_ip", wins_ip)

    @property
    @pulumi.getter(name="acName")
    def ac_name(self) -> str:
        """
        PPPoE server name.
        """
        return pulumi.get(self, "ac_name")

    @property
    @pulumi.getter
    def aggregate(self) -> str:
        """
        Aggregate interface.
        """
        return pulumi.get(self, "aggregate")

    @property
    @pulumi.getter(name="aggregateType")
    def aggregate_type(self) -> str:
        """
        Type of aggregation.
        """
        return pulumi.get(self, "aggregate_type")

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        """
        Frame distribution algorithm.
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def alias(self) -> str:
        """
        Alias will be displayed with the interface name to make it easier to distinguish.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def allowaccess(self) -> str:
        """
        Management access settings for the secondary IP address.
        """
        return pulumi.get(self, "allowaccess")

    @property
    @pulumi.getter(name="apDiscover")
    def ap_discover(self) -> str:
        """
        Enable/disable automatic registration of unknown FortiAP devices.
        """
        return pulumi.get(self, "ap_discover")

    @property
    @pulumi.getter
    def arpforward(self) -> str:
        """
        Enable/disable ARP forwarding.
        """
        return pulumi.get(self, "arpforward")

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> str:
        """
        HTTPS server certificate.
        """
        return pulumi.get(self, "auth_cert")

    @property
    @pulumi.getter(name="authPortalAddr")
    def auth_portal_addr(self) -> str:
        """
        Address of captive portal.
        """
        return pulumi.get(self, "auth_portal_addr")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        """
        PPP authentication type to use.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="autoAuthExtensionDevice")
    def auto_auth_extension_device(self) -> str:
        """
        Enable/disable automatic authorization of dedicated Fortinet extension device on this interface.
        """
        return pulumi.get(self, "auto_auth_extension_device")

    @property
    @pulumi.getter(name="bandwidthMeasureTime")
    def bandwidth_measure_time(self) -> int:
        """
        Bandwidth measure time
        """
        return pulumi.get(self, "bandwidth_measure_time")

    @property
    @pulumi.getter
    def bfd(self) -> str:
        """
        Bidirectional Forwarding Detection (BFD) settings.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> int:
        """
        BFD desired minimal transmit interval.
        """
        return pulumi.get(self, "bfd_desired_min_tx")

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> int:
        """
        BFD detection multiplier.
        """
        return pulumi.get(self, "bfd_detect_mult")

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> int:
        """
        BFD required minimal receive interval.
        """
        return pulumi.get(self, "bfd_required_min_rx")

    @property
    @pulumi.getter(name="broadcastForticlientDiscovery")
    def broadcast_forticlient_discovery(self) -> str:
        """
        Enable/disable broadcasting FortiClient discovery messages.
        """
        return pulumi.get(self, "broadcast_forticlient_discovery")

    @property
    @pulumi.getter(name="broadcastForward")
    def broadcast_forward(self) -> str:
        """
        Enable/disable broadcast forwarding.
        """
        return pulumi.get(self, "broadcast_forward")

    @property
    @pulumi.getter(name="captivePortal")
    def captive_portal(self) -> int:
        """
        Enable/disable captive portal.
        """
        return pulumi.get(self, "captive_portal")

    @property
    @pulumi.getter(name="cliConnStatus")
    def cli_conn_status(self) -> int:
        """
        CLI connection status.
        """
        return pulumi.get(self, "cli_conn_status")

    @property
    @pulumi.getter(name="clientOptions")
    def client_options(self) -> Sequence['outputs.GetInterfaceClientOptionResult']:
        """
        DHCP client options. The structure of `client_options` block is documented below.
        """
        return pulumi.get(self, "client_options")

    @property
    @pulumi.getter
    def color(self) -> int:
        """
        Color of icon on the GUI.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="dedicatedTo")
    def dedicated_to(self) -> str:
        """
        Configure interface for single purpose.
        """
        return pulumi.get(self, "dedicated_to")

    @property
    @pulumi.getter(name="defaultPurdueLevel")
    def default_purdue_level(self) -> str:
        """
        default purdue level of device detected on this interface.
        """
        return pulumi.get(self, "default_purdue_level")

    @property
    @pulumi.getter
    def defaultgw(self) -> str:
        """
        Enable to get the gateway IP from the DHCP or PPPoE server.
        """
        return pulumi.get(self, "defaultgw")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detectedPeerMtu")
    def detected_peer_mtu(self) -> int:
        """
        MTU of detected peer (0 - 4294967295).
        """
        return pulumi.get(self, "detected_peer_mtu")

    @property
    @pulumi.getter
    def detectprotocol(self) -> str:
        """
        Protocols used to detect the server.
        """
        return pulumi.get(self, "detectprotocol")

    @property
    @pulumi.getter
    def detectserver(self) -> str:
        """
        Gateway's ping server for this IP.
        """
        return pulumi.get(self, "detectserver")

    @property
    @pulumi.getter(name="deviceAccessList")
    def device_access_list(self) -> str:
        """
        Device access list.
        """
        return pulumi.get(self, "device_access_list")

    @property
    @pulumi.getter(name="deviceIdentification")
    def device_identification(self) -> str:
        """
        Enable/disable passively gathering of device identity information about the devices on the network connected to this interface.
        """
        return pulumi.get(self, "device_identification")

    @property
    @pulumi.getter(name="deviceIdentificationActiveScan")
    def device_identification_active_scan(self) -> str:
        """
        Enable/disable active gathering of device identity information about the devices on the network connected to this interface.
        """
        return pulumi.get(self, "device_identification_active_scan")

    @property
    @pulumi.getter(name="deviceNetscan")
    def device_netscan(self) -> str:
        """
        Enable/disable inclusion of devices detected on this interface in network vulnerability scans.
        """
        return pulumi.get(self, "device_netscan")

    @property
    @pulumi.getter(name="deviceUserIdentification")
    def device_user_identification(self) -> str:
        """
        Enable/disable passive gathering of user identity information about users on this interface.
        """
        return pulumi.get(self, "device_user_identification")

    @property
    @pulumi.getter
    def devindex(self) -> int:
        """
        Device Index.
        """
        return pulumi.get(self, "devindex")

    @property
    @pulumi.getter(name="dhcpBroadcastFlag")
    def dhcp_broadcast_flag(self) -> str:
        """
        Enable/disable setting of the broadcast flag in messages sent by the DHCP client (default = enable).
        """
        return pulumi.get(self, "dhcp_broadcast_flag")

    @property
    @pulumi.getter(name="dhcpClasslessRouteAddition")
    def dhcp_classless_route_addition(self) -> str:
        """
        Enable/disable addition of classless static routes retrieved from DHCP server.
        """
        return pulumi.get(self, "dhcp_classless_route_addition")

    @property
    @pulumi.getter(name="dhcpClientIdentifier")
    def dhcp_client_identifier(self) -> str:
        """
        DHCP client identifier.
        """
        return pulumi.get(self, "dhcp_client_identifier")

    @property
    @pulumi.getter(name="dhcpRelayAgentOption")
    def dhcp_relay_agent_option(self) -> str:
        """
        Enable/disable DHCP relay agent option.
        """
        return pulumi.get(self, "dhcp_relay_agent_option")

    @property
    @pulumi.getter(name="dhcpRelayCircuitId")
    def dhcp_relay_circuit_id(self) -> str:
        """
        DHCP relay circuit ID.
        """
        return pulumi.get(self, "dhcp_relay_circuit_id")

    @property
    @pulumi.getter(name="dhcpRelayInterface")
    def dhcp_relay_interface(self) -> str:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "dhcp_relay_interface")

    @property
    @pulumi.getter(name="dhcpRelayInterfaceSelectMethod")
    def dhcp_relay_interface_select_method(self) -> str:
        """
        Specify how to select outgoing interface to reach server.
        """
        return pulumi.get(self, "dhcp_relay_interface_select_method")

    @property
    @pulumi.getter(name="dhcpRelayIp")
    def dhcp_relay_ip(self) -> str:
        """
        DHCP relay IP address.
        """
        return pulumi.get(self, "dhcp_relay_ip")

    @property
    @pulumi.getter(name="dhcpRelayLinkSelection")
    def dhcp_relay_link_selection(self) -> str:
        """
        DHCP relay link selection.
        """
        return pulumi.get(self, "dhcp_relay_link_selection")

    @property
    @pulumi.getter(name="dhcpRelayRequestAllServer")
    def dhcp_relay_request_all_server(self) -> str:
        """
        Enable/disable sending DHCP request to all servers.
        """
        return pulumi.get(self, "dhcp_relay_request_all_server")

    @property
    @pulumi.getter(name="dhcpRelayService")
    def dhcp_relay_service(self) -> str:
        """
        Enable/disable allowing this interface to act as a DHCP relay.
        """
        return pulumi.get(self, "dhcp_relay_service")

    @property
    @pulumi.getter(name="dhcpRelaySourceIp")
    def dhcp_relay_source_ip(self) -> str:
        """
        IP address used by the DHCP relay as its source IP.
        """
        return pulumi.get(self, "dhcp_relay_source_ip")

    @property
    @pulumi.getter(name="dhcpRelayType")
    def dhcp_relay_type(self) -> str:
        """
        DHCP relay type (regular or IPsec).
        """
        return pulumi.get(self, "dhcp_relay_type")

    @property
    @pulumi.getter(name="dhcpRenewTime")
    def dhcp_renew_time(self) -> int:
        """
        DHCP renew time in seconds (300-604800), 0 means use the renew time provided by the server.
        """
        return pulumi.get(self, "dhcp_renew_time")

    @property
    @pulumi.getter(name="dhcpSmartRelay")
    def dhcp_smart_relay(self) -> str:
        """
        Enable/disable DHCP smart relay.
        """
        return pulumi.get(self, "dhcp_smart_relay")

    @property
    @pulumi.getter(name="dhcpSnoopingServerLists")
    def dhcp_snooping_server_lists(self) -> Sequence['outputs.GetInterfaceDhcpSnoopingServerListResult']:
        """
        Configure DHCP server access list. The structure of `dhcp_snooping_server_list` block is documented below.
        """
        return pulumi.get(self, "dhcp_snooping_server_lists")

    @property
    @pulumi.getter(name="discRetryTimeout")
    def disc_retry_timeout(self) -> int:
        """
        Time in seconds to wait before retrying to start a PPPoE discovery, 0 means no timeout.
        """
        return pulumi.get(self, "disc_retry_timeout")

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> int:
        """
        Time in milliseconds to wait before sending a notification that this interface is down or disconnected.
        """
        return pulumi.get(self, "disconnect_threshold")

    @property
    @pulumi.getter
    def distance(self) -> int:
        """
        Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter(name="dnsServerOverride")
    def dns_server_override(self) -> str:
        """
        Enable/disable use DNS acquired by DHCP or PPPoE.
        """
        return pulumi.get(self, "dns_server_override")

    @property
    @pulumi.getter(name="dnsServerProtocol")
    def dns_server_protocol(self) -> str:
        """
        DNS transport protocols.
        """
        return pulumi.get(self, "dns_server_protocol")

    @property
    @pulumi.getter(name="dropFragment")
    def drop_fragment(self) -> str:
        """
        Enable/disable drop fragment packets.
        """
        return pulumi.get(self, "drop_fragment")

    @property
    @pulumi.getter(name="dropOverlappedFragment")
    def drop_overlapped_fragment(self) -> str:
        """
        Enable/disable drop overlapped fragment packets.
        """
        return pulumi.get(self, "drop_overlapped_fragment")

    @property
    @pulumi.getter(name="eapCaCert")
    def eap_ca_cert(self) -> str:
        """
        EAP CA certificate name.
        """
        return pulumi.get(self, "eap_ca_cert")

    @property
    @pulumi.getter(name="eapIdentity")
    def eap_identity(self) -> str:
        """
        EAP identity.
        """
        return pulumi.get(self, "eap_identity")

    @property
    @pulumi.getter(name="eapMethod")
    def eap_method(self) -> str:
        """
        EAP method.
        """
        return pulumi.get(self, "eap_method")

    @property
    @pulumi.getter(name="eapPassword")
    def eap_password(self) -> str:
        """
        EAP password.
        """
        return pulumi.get(self, "eap_password")

    @property
    @pulumi.getter(name="eapSupplicant")
    def eap_supplicant(self) -> str:
        """
        Enable/disable EAP-Supplicant.
        """
        return pulumi.get(self, "eap_supplicant")

    @property
    @pulumi.getter(name="eapUserCert")
    def eap_user_cert(self) -> str:
        """
        EAP user certificate name.
        """
        return pulumi.get(self, "eap_user_cert")

    @property
    @pulumi.getter(name="egressShapingProfile")
    def egress_shaping_profile(self) -> str:
        """
        Outgoing traffic shaping profile.
        """
        return pulumi.get(self, "egress_shaping_profile")

    @property
    @pulumi.getter(name="endpointCompliance")
    def endpoint_compliance(self) -> str:
        """
        Enable/disable endpoint compliance enforcement.
        """
        return pulumi.get(self, "endpoint_compliance")

    @property
    @pulumi.getter(name="estimatedDownstreamBandwidth")
    def estimated_downstream_bandwidth(self) -> int:
        """
        Estimated maximum downstream bandwidth (kbps). Used to estimate link utilization.
        """
        return pulumi.get(self, "estimated_downstream_bandwidth")

    @property
    @pulumi.getter(name="estimatedUpstreamBandwidth")
    def estimated_upstream_bandwidth(self) -> int:
        """
        Estimated maximum upstream bandwidth (kbps). Used to estimate link utilization.
        """
        return pulumi.get(self, "estimated_upstream_bandwidth")

    @property
    @pulumi.getter(name="explicitFtpProxy")
    def explicit_ftp_proxy(self) -> str:
        """
        Enable/disable the explicit FTP proxy on this interface.
        """
        return pulumi.get(self, "explicit_ftp_proxy")

    @property
    @pulumi.getter(name="explicitWebProxy")
    def explicit_web_proxy(self) -> str:
        """
        Enable/disable the explicit web proxy on this interface.
        """
        return pulumi.get(self, "explicit_web_proxy")

    @property
    @pulumi.getter
    def external(self) -> str:
        """
        Enable/disable identifying the interface as an external interface (which usually means it's connected to the Internet).
        """
        return pulumi.get(self, "external")

    @property
    @pulumi.getter(name="failActionOnExtender")
    def fail_action_on_extender(self) -> str:
        """
        Action on extender when interface fail .
        """
        return pulumi.get(self, "fail_action_on_extender")

    @property
    @pulumi.getter(name="failAlertInterfaces")
    def fail_alert_interfaces(self) -> Sequence['outputs.GetInterfaceFailAlertInterfaceResult']:
        """
        Names of the FortiGate interfaces from which the link failure alert is sent for this interface. The structure of `fail_alert_interfaces` block is documented below.
        """
        return pulumi.get(self, "fail_alert_interfaces")

    @property
    @pulumi.getter(name="failAlertMethod")
    def fail_alert_method(self) -> str:
        """
        Select link-failed-signal or link-down method to alert about a failed link.
        """
        return pulumi.get(self, "fail_alert_method")

    @property
    @pulumi.getter(name="failDetect")
    def fail_detect(self) -> str:
        """
        Enable/disable fail detection features for this interface.
        """
        return pulumi.get(self, "fail_detect")

    @property
    @pulumi.getter(name="failDetectOption")
    def fail_detect_option(self) -> str:
        """
        Options for detecting that this interface has failed.
        """
        return pulumi.get(self, "fail_detect_option")

    @property
    @pulumi.getter
    def fortiheartbeat(self) -> str:
        """
        Enable/disable FortiHeartBeat (FortiTelemetry on GUI).
        """
        return pulumi.get(self, "fortiheartbeat")

    @property
    @pulumi.getter
    def fortilink(self) -> str:
        """
        Enable FortiLink to dedicate this interface to manage other Fortinet devices.
        """
        return pulumi.get(self, "fortilink")

    @property
    @pulumi.getter(name="fortilinkBackupLink")
    def fortilink_backup_link(self) -> int:
        """
        fortilink split interface backup link.
        """
        return pulumi.get(self, "fortilink_backup_link")

    @property
    @pulumi.getter(name="fortilinkNeighborDetect")
    def fortilink_neighbor_detect(self) -> str:
        """
        Protocol for FortiGate neighbor discovery.
        """
        return pulumi.get(self, "fortilink_neighbor_detect")

    @property
    @pulumi.getter(name="fortilinkSplitInterface")
    def fortilink_split_interface(self) -> str:
        """
        Enable/disable FortiLink split interface to connect member link to different FortiSwitch in stack for uplink redundancy.
        """
        return pulumi.get(self, "fortilink_split_interface")

    @property
    @pulumi.getter(name="fortilinkStacking")
    def fortilink_stacking(self) -> str:
        """
        Enable/disable FortiLink switch-stacking on this interface.
        """
        return pulumi.get(self, "fortilink_stacking")

    @property
    @pulumi.getter(name="forwardDomain")
    def forward_domain(self) -> int:
        """
        Transparent mode forward domain.
        """
        return pulumi.get(self, "forward_domain")

    @property
    @pulumi.getter(name="forwardErrorCorrection")
    def forward_error_correction(self) -> str:
        """
        Configure forward error correction (FEC).
        """
        return pulumi.get(self, "forward_error_correction")

    @property
    @pulumi.getter
    def gwdetect(self) -> str:
        """
        Enable/disable detect gateway alive for first.
        """
        return pulumi.get(self, "gwdetect")

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> int:
        """
        HA election priority for the PING server.
        """
        return pulumi.get(self, "ha_priority")

    @property
    @pulumi.getter(name="icmpAcceptRedirect")
    def icmp_accept_redirect(self) -> str:
        """
        Enable/disable ICMP accept redirect.
        """
        return pulumi.get(self, "icmp_accept_redirect")

    @property
    @pulumi.getter(name="icmpSendRedirect")
    def icmp_send_redirect(self) -> str:
        """
        Enable/disable ICMP send redirect.
        """
        return pulumi.get(self, "icmp_send_redirect")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identAccept")
    def ident_accept(self) -> str:
        """
        Enable/disable authentication for this interface.
        """
        return pulumi.get(self, "ident_accept")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> int:
        """
        PPPoE auto disconnect after idle timeout seconds, 0 means no timeout.
        """
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter(name="ikeSamlServer")
    def ike_saml_server(self) -> str:
        """
        Configure IKE authentication SAML server.
        """
        return pulumi.get(self, "ike_saml_server")

    @property
    @pulumi.getter
    def inbandwidth(self) -> int:
        """
        Bandwidth limit for incoming traffic (0 - 16776000 kbps), 0 means unlimited.
        """
        return pulumi.get(self, "inbandwidth")

    @property
    @pulumi.getter(name="ingressShapingProfile")
    def ingress_shaping_profile(self) -> str:
        """
        Incoming traffic shaping profile.
        """
        return pulumi.get(self, "ingress_shaping_profile")

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> int:
        """
        Ingress Spillover threshold (0 - 16776000 kbps).
        """
        return pulumi.get(self, "ingress_spillover_threshold")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def internal(self) -> int:
        """
        Implicitly created.
        """
        return pulumi.get(self, "internal")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Secondary IP address of the interface.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipManagedByFortiipam")
    def ip_managed_by_fortiipam(self) -> str:
        """
        Enable/disable automatic IP address assignment of this interface by FortiIPAM.
        """
        return pulumi.get(self, "ip_managed_by_fortiipam")

    @property
    @pulumi.getter
    def ipmac(self) -> str:
        """
        Enable/disable IP/MAC binding.
        """
        return pulumi.get(self, "ipmac")

    @property
    @pulumi.getter(name="ipsSnifferMode")
    def ips_sniffer_mode(self) -> str:
        """
        Enable/disable the use of this interface as a one-armed sniffer.
        """
        return pulumi.get(self, "ips_sniffer_mode")

    @property
    @pulumi.getter
    def ipunnumbered(self) -> str:
        """
        Unnumbered IP used for PPPoE interfaces for which no unique local address is provided.
        """
        return pulumi.get(self, "ipunnumbered")

    @property
    @pulumi.getter
    def ipv6s(self) -> Sequence['outputs.GetInterfaceIpv6Result']:
        """
        IPv6 of interface. The structure of `ipv6` block is documented below.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def l2forward(self) -> str:
        """
        Enable/disable l2 forwarding.
        """
        return pulumi.get(self, "l2forward")

    @property
    @pulumi.getter(name="lacpHaSecondary")
    def lacp_ha_secondary(self) -> str:
        """
        LACP HA secondary member.
        """
        return pulumi.get(self, "lacp_ha_secondary")

    @property
    @pulumi.getter(name="lacpHaSlave")
    def lacp_ha_slave(self) -> str:
        """
        LACP HA slave.
        """
        return pulumi.get(self, "lacp_ha_slave")

    @property
    @pulumi.getter(name="lacpMode")
    def lacp_mode(self) -> str:
        """
        LACP mode.
        """
        return pulumi.get(self, "lacp_mode")

    @property
    @pulumi.getter(name="lacpSpeed")
    def lacp_speed(self) -> str:
        """
        How often the interface sends LACP messages.
        """
        return pulumi.get(self, "lacp_speed")

    @property
    @pulumi.getter(name="lcpEchoInterval")
    def lcp_echo_interval(self) -> int:
        """
        Time in seconds between PPPoE Link Control Protocol (LCP) echo requests.
        """
        return pulumi.get(self, "lcp_echo_interval")

    @property
    @pulumi.getter(name="lcpMaxEchoFails")
    def lcp_max_echo_fails(self) -> int:
        """
        Maximum missed LCP echo messages before disconnect.
        """
        return pulumi.get(self, "lcp_max_echo_fails")

    @property
    @pulumi.getter(name="linkUpDelay")
    def link_up_delay(self) -> int:
        """
        Number of milliseconds to wait before considering a link is up.
        """
        return pulumi.get(self, "link_up_delay")

    @property
    @pulumi.getter(name="lldpNetworkPolicy")
    def lldp_network_policy(self) -> str:
        """
        LLDP-MED network policy profile.
        """
        return pulumi.get(self, "lldp_network_policy")

    @property
    @pulumi.getter(name="lldpReception")
    def lldp_reception(self) -> str:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) reception.
        """
        return pulumi.get(self, "lldp_reception")

    @property
    @pulumi.getter(name="lldpTransmission")
    def lldp_transmission(self) -> str:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) transmission.
        """
        return pulumi.get(self, "lldp_transmission")

    @property
    @pulumi.getter
    def macaddr(self) -> str:
        """
        Change the interface's MAC address.
        """
        return pulumi.get(self, "macaddr")

    @property
    @pulumi.getter(name="managedDevices")
    def managed_devices(self) -> Sequence['outputs.GetInterfaceManagedDeviceResult']:
        """
        Available when FortiLink is enabled, used for managed devices through FortiLink interface. The structure of `managed_device` block is documented below.
        """
        return pulumi.get(self, "managed_devices")

    @property
    @pulumi.getter(name="managedSubnetworkSize")
    def managed_subnetwork_size(self) -> str:
        """
        Number of IP addresses to be allocated by FortiIPAM and used by this FortiGate unit's DHCP server settings.
        """
        return pulumi.get(self, "managed_subnetwork_size")

    @property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> str:
        """
        High Availability in-band management IP address of this interface.
        """
        return pulumi.get(self, "management_ip")

    @property
    @pulumi.getter(name="measuredDownstreamBandwidth")
    def measured_downstream_bandwidth(self) -> int:
        """
        Measured downstream bandwidth (kbps).
        """
        return pulumi.get(self, "measured_downstream_bandwidth")

    @property
    @pulumi.getter(name="measuredUpstreamBandwidth")
    def measured_upstream_bandwidth(self) -> int:
        """
        Measured upstream bandwidth (kbps).
        """
        return pulumi.get(self, "measured_upstream_bandwidth")

    @property
    @pulumi.getter
    def mediatype(self) -> str:
        """
        Select SFP media interface type
        """
        return pulumi.get(self, "mediatype")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetInterfaceMemberResult']:
        """
        Physical interfaces that belong to the aggregate or redundant interface. The structure of `member` block is documented below.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="minLinks")
    def min_links(self) -> int:
        """
        Minimum number of aggregated ports that must be up.
        """
        return pulumi.get(self, "min_links")

    @property
    @pulumi.getter(name="minLinksDown")
    def min_links_down(self) -> str:
        """
        Action to take when less than the configured minimum number of links are active.
        """
        return pulumi.get(self, "min_links_down")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Addressing mode (static, DHCP, PPPoE).
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="monitorBandwidth")
    def monitor_bandwidth(self) -> str:
        """
        Enable monitoring bandwidth on this interface.
        """
        return pulumi.get(self, "monitor_bandwidth")

    @property
    @pulumi.getter
    def mtu(self) -> int:
        """
        MTU value for this interface.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="mtuOverride")
    def mtu_override(self) -> str:
        """
        Enable to set a custom MTU for this interface.
        """
        return pulumi.get(self, "mtu_override")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ndiscforward(self) -> str:
        """
        Enable/disable NDISC forwarding.
        """
        return pulumi.get(self, "ndiscforward")

    @property
    @pulumi.getter(name="netbiosForward")
    def netbios_forward(self) -> str:
        """
        Enable/disable NETBIOS forwarding.
        """
        return pulumi.get(self, "netbios_forward")

    @property
    @pulumi.getter(name="netflowSampler")
    def netflow_sampler(self) -> str:
        """
        Enable/disable NetFlow on this interface and set the data that NetFlow collects (rx, tx, or both).
        """
        return pulumi.get(self, "netflow_sampler")

    @property
    @pulumi.getter
    def outbandwidth(self) -> int:
        """
        Bandwidth limit for outgoing traffic (0 - 16776000 kbps).
        """
        return pulumi.get(self, "outbandwidth")

    @property
    @pulumi.getter(name="padtRetryTimeout")
    def padt_retry_timeout(self) -> int:
        """
        PPPoE Active Discovery Terminate (PADT) used to terminate sessions after an idle time.
        """
        return pulumi.get(self, "padt_retry_timeout")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        PPPoE account's password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="pingServStatus")
    def ping_serv_status(self) -> int:
        """
        PING server status.
        """
        return pulumi.get(self, "ping_serv_status")

    @property
    @pulumi.getter(name="pollingInterval")
    def polling_interval(self) -> int:
        """
        sFlow polling interval (1 - 255 sec).
        """
        return pulumi.get(self, "polling_interval")

    @property
    @pulumi.getter(name="pppoeUnnumberedNegotiate")
    def pppoe_unnumbered_negotiate(self) -> str:
        """
        Enable/disable PPPoE unnumbered negotiation.
        """
        return pulumi.get(self, "pppoe_unnumbered_negotiate")

    @property
    @pulumi.getter(name="pptpAuthType")
    def pptp_auth_type(self) -> str:
        """
        PPTP authentication type.
        """
        return pulumi.get(self, "pptp_auth_type")

    @property
    @pulumi.getter(name="pptpClient")
    def pptp_client(self) -> str:
        """
        Enable/disable PPTP client.
        """
        return pulumi.get(self, "pptp_client")

    @property
    @pulumi.getter(name="pptpPassword")
    def pptp_password(self) -> str:
        """
        PPTP password.
        """
        return pulumi.get(self, "pptp_password")

    @property
    @pulumi.getter(name="pptpServerIp")
    def pptp_server_ip(self) -> str:
        """
        PPTP server IP address.
        """
        return pulumi.get(self, "pptp_server_ip")

    @property
    @pulumi.getter(name="pptpTimeout")
    def pptp_timeout(self) -> int:
        """
        Idle timer in minutes (0 for disabled).
        """
        return pulumi.get(self, "pptp_timeout")

    @property
    @pulumi.getter(name="pptpUser")
    def pptp_user(self) -> str:
        """
        PPTP user name.
        """
        return pulumi.get(self, "pptp_user")

    @property
    @pulumi.getter(name="preserveSessionRoute")
    def preserve_session_route(self) -> str:
        """
        Enable/disable preservation of session route when dirty.
        """
        return pulumi.get(self, "preserve_session_route")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority of the virtual router (1 - 255).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="priorityOverride")
    def priority_override(self) -> str:
        """
        Enable/disable fail back to higher priority port once recovered.
        """
        return pulumi.get(self, "priority_override")

    @property
    @pulumi.getter(name="proxyCaptivePortal")
    def proxy_captive_portal(self) -> str:
        """
        Enable/disable proxy captive portal on this interface.
        """
        return pulumi.get(self, "proxy_captive_portal")

    @property
    @pulumi.getter(name="reachableTime")
    def reachable_time(self) -> int:
        """
        IPv4 reachable time in milliseconds (30000 - 3600000, default = 30000).
        """
        return pulumi.get(self, "reachable_time")

    @property
    @pulumi.getter(name="redundantInterface")
    def redundant_interface(self) -> str:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_interface")

    @property
    @pulumi.getter(name="remoteIp")
    def remote_ip(self) -> str:
        """
        Remote IP address of tunnel.
        """
        return pulumi.get(self, "remote_ip")

    @property
    @pulumi.getter(name="replacemsgOverrideGroup")
    def replacemsg_override_group(self) -> str:
        """
        Replacement message override group.
        """
        return pulumi.get(self, "replacemsg_override_group")

    @property
    @pulumi.getter(name="ringRx")
    def ring_rx(self) -> int:
        """
        RX ring size.
        """
        return pulumi.get(self, "ring_rx")

    @property
    @pulumi.getter(name="ringTx")
    def ring_tx(self) -> int:
        """
        TX ring size.
        """
        return pulumi.get(self, "ring_tx")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Interface role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="sampleDirection")
    def sample_direction(self) -> str:
        """
        Data that NetFlow collects (rx, tx, or both).
        """
        return pulumi.get(self, "sample_direction")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        """
        sFlow sample rate (10 - 99999).
        """
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> str:
        """
        Enable monitoring or blocking connections to Botnet servers through this interface.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @property
    @pulumi.getter(name="secondaryIp")
    def secondary_ip(self) -> str:
        """
        Enable/disable adding a secondary IP to this interface.
        """
        return pulumi.get(self, "secondary_ip")

    @property
    @pulumi.getter
    def secondaryips(self) -> Sequence['outputs.GetInterfaceSecondaryipResult']:
        """
        Second IP address of interface. The structure of `secondaryip` block is documented below.
        """
        return pulumi.get(self, "secondaryips")

    @property
    @pulumi.getter(name="securityExemptList")
    def security_exempt_list(self) -> str:
        """
        Name of security-exempt-list.
        """
        return pulumi.get(self, "security_exempt_list")

    @property
    @pulumi.getter(name="securityExternalLogout")
    def security_external_logout(self) -> str:
        """
        URL of external authentication logout server.
        """
        return pulumi.get(self, "security_external_logout")

    @property
    @pulumi.getter(name="securityExternalWeb")
    def security_external_web(self) -> str:
        """
        URL of external authentication web server.
        """
        return pulumi.get(self, "security_external_web")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetInterfaceSecurityGroupResult']:
        """
        User groups that can authenticate with the captive portal. The structure of `security_groups` block is documented below.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="securityMacAuthBypass")
    def security_mac_auth_bypass(self) -> str:
        """
        Enable/disable MAC authentication bypass.
        """
        return pulumi.get(self, "security_mac_auth_bypass")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> str:
        """
        Turn on captive portal authentication for this interface.
        """
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter(name="securityRedirectUrl")
    def security_redirect_url(self) -> str:
        """
        URL redirection after disclaimer/authentication.
        """
        return pulumi.get(self, "security_redirect_url")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        PPPoE service name.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="sflowSampler")
    def sflow_sampler(self) -> str:
        """
        Enable/disable sFlow on this interface.
        """
        return pulumi.get(self, "sflow_sampler")

    @property
    @pulumi.getter(name="snmpIndex")
    def snmp_index(self) -> int:
        """
        Permanent SNMP Index of the interface.
        """
        return pulumi.get(self, "snmp_index")

    @property
    @pulumi.getter
    def speed(self) -> str:
        """
        Interface speed. The default setting and the options available depend on the interface hardware.
        """
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> int:
        """
        Egress Spillover threshold (0 - 16776000 kbps), 0 means unlimited.
        """
        return pulumi.get(self, "spillover_threshold")

    @property
    @pulumi.getter(name="srcCheck")
    def src_check(self) -> str:
        """
        Enable/disable source IP check.
        """
        return pulumi.get(self, "src_check")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable VRRP.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def stp(self) -> str:
        """
        Enable/disable STP.
        """
        return pulumi.get(self, "stp")

    @property
    @pulumi.getter(name="stpHaSecondary")
    def stp_ha_secondary(self) -> str:
        """
        Control STP behaviour on HA secondary.
        """
        return pulumi.get(self, "stp_ha_secondary")

    @property
    @pulumi.getter
    def stpforward(self) -> str:
        """
        Enable/disable STP forwarding.
        """
        return pulumi.get(self, "stpforward")

    @property
    @pulumi.getter(name="stpforwardMode")
    def stpforward_mode(self) -> str:
        """
        Configure STP forwarding mode.
        """
        return pulumi.get(self, "stpforward_mode")

    @property
    @pulumi.getter
    def subst(self) -> str:
        """
        Enable to always send packets from this interface to a destination MAC address.
        """
        return pulumi.get(self, "subst")

    @property
    @pulumi.getter(name="substituteDstMac")
    def substitute_dst_mac(self) -> str:
        """
        Destination MAC address that all packets are sent to from this interface.
        """
        return pulumi.get(self, "substitute_dst_mac")

    @property
    @pulumi.getter(name="swcFirstCreate")
    def swc_first_create(self) -> int:
        """
        Initial create for switch-controller VLANs.
        """
        return pulumi.get(self, "swc_first_create")

    @property
    @pulumi.getter(name="swcVlan")
    def swc_vlan(self) -> int:
        """
        Creation status for switch-controller VLANs.
        """
        return pulumi.get(self, "swc_vlan")

    @property
    @pulumi.getter
    def switch(self) -> str:
        """
        Contained in switch.
        """
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="switchControllerAccessVlan")
    def switch_controller_access_vlan(self) -> str:
        """
        Block FortiSwitch port-to-port traffic.
        """
        return pulumi.get(self, "switch_controller_access_vlan")

    @property
    @pulumi.getter(name="switchControllerArpInspection")
    def switch_controller_arp_inspection(self) -> str:
        """
        Enable/disable FortiSwitch ARP inspection.
        """
        return pulumi.get(self, "switch_controller_arp_inspection")

    @property
    @pulumi.getter(name="switchControllerDhcpSnooping")
    def switch_controller_dhcp_snooping(self) -> str:
        """
        Switch controller DHCP snooping.
        """
        return pulumi.get(self, "switch_controller_dhcp_snooping")

    @property
    @pulumi.getter(name="switchControllerDhcpSnoopingOption82")
    def switch_controller_dhcp_snooping_option82(self) -> str:
        """
        Switch controller DHCP snooping option82.
        """
        return pulumi.get(self, "switch_controller_dhcp_snooping_option82")

    @property
    @pulumi.getter(name="switchControllerDhcpSnoopingVerifyMac")
    def switch_controller_dhcp_snooping_verify_mac(self) -> str:
        """
        Switch controller DHCP snooping verify MAC.
        """
        return pulumi.get(self, "switch_controller_dhcp_snooping_verify_mac")

    @property
    @pulumi.getter(name="switchControllerDynamic")
    def switch_controller_dynamic(self) -> str:
        """
        Integrated FortiLink settings for managed FortiSwitch.
        """
        return pulumi.get(self, "switch_controller_dynamic")

    @property
    @pulumi.getter(name="switchControllerFeature")
    def switch_controller_feature(self) -> str:
        """
        Interface's purpose when assigning traffic (read only).
        """
        return pulumi.get(self, "switch_controller_feature")

    @property
    @pulumi.getter(name="switchControllerIgmpSnooping")
    def switch_controller_igmp_snooping(self) -> str:
        """
        Switch controller IGMP snooping.
        """
        return pulumi.get(self, "switch_controller_igmp_snooping")

    @property
    @pulumi.getter(name="switchControllerIgmpSnoopingFastLeave")
    def switch_controller_igmp_snooping_fast_leave(self) -> str:
        """
        Switch controller IGMP snooping fast-leave.
        """
        return pulumi.get(self, "switch_controller_igmp_snooping_fast_leave")

    @property
    @pulumi.getter(name="switchControllerIgmpSnoopingProxy")
    def switch_controller_igmp_snooping_proxy(self) -> str:
        """
        Switch controller IGMP snooping proxy.
        """
        return pulumi.get(self, "switch_controller_igmp_snooping_proxy")

    @property
    @pulumi.getter(name="switchControllerIotScanning")
    def switch_controller_iot_scanning(self) -> str:
        """
        Enable/disable managed FortiSwitch IoT scanning.
        """
        return pulumi.get(self, "switch_controller_iot_scanning")

    @property
    @pulumi.getter(name="switchControllerLearningLimit")
    def switch_controller_learning_limit(self) -> int:
        """
        Limit the number of dynamic MAC addresses on this VLAN (1 - 128, 0 = no limit, default).
        """
        return pulumi.get(self, "switch_controller_learning_limit")

    @property
    @pulumi.getter(name="switchControllerMgmtVlan")
    def switch_controller_mgmt_vlan(self) -> int:
        """
        VLAN to use for FortiLink management purposes.
        """
        return pulumi.get(self, "switch_controller_mgmt_vlan")

    @property
    @pulumi.getter(name="switchControllerNac")
    def switch_controller_nac(self) -> str:
        """
        Integrated NAC settings for managed FortiSwitch.
        """
        return pulumi.get(self, "switch_controller_nac")

    @property
    @pulumi.getter(name="switchControllerNetflowCollect")
    def switch_controller_netflow_collect(self) -> str:
        """
        NetFlow collection and processing.
        """
        return pulumi.get(self, "switch_controller_netflow_collect")

    @property
    @pulumi.getter(name="switchControllerOffload")
    def switch_controller_offload(self) -> str:
        """
        Enable/disable managed FortiSwitch routing offload.
        """
        return pulumi.get(self, "switch_controller_offload")

    @property
    @pulumi.getter(name="switchControllerOffloadGw")
    def switch_controller_offload_gw(self) -> str:
        """
        Enable/disable managed FortiSwitch routing offload gateway.
        """
        return pulumi.get(self, "switch_controller_offload_gw")

    @property
    @pulumi.getter(name="switchControllerOffloadIp")
    def switch_controller_offload_ip(self) -> str:
        """
        IP for routing offload on FortiSwitch.
        """
        return pulumi.get(self, "switch_controller_offload_ip")

    @property
    @pulumi.getter(name="switchControllerRspanMode")
    def switch_controller_rspan_mode(self) -> str:
        """
        Stop Layer2 MAC learning and interception of BPDUs and other packets on this interface.
        """
        return pulumi.get(self, "switch_controller_rspan_mode")

    @property
    @pulumi.getter(name="switchControllerSourceIp")
    def switch_controller_source_ip(self) -> str:
        """
        Source IP address used in FortiLink over L3 connections.
        """
        return pulumi.get(self, "switch_controller_source_ip")

    @property
    @pulumi.getter(name="switchControllerTrafficPolicy")
    def switch_controller_traffic_policy(self) -> str:
        """
        Switch controller traffic policy for the VLAN.
        """
        return pulumi.get(self, "switch_controller_traffic_policy")

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> str:
        """
        Define a system ID for the aggregate interface.
        """
        return pulumi.get(self, "system_id")

    @property
    @pulumi.getter(name="systemIdType")
    def system_id_type(self) -> str:
        """
        Method in which system ID is generated.
        """
        return pulumi.get(self, "system_id_type")

    @property
    @pulumi.getter
    def taggings(self) -> Sequence['outputs.GetInterfaceTaggingResult']:
        """
        Config object tagging. The structure of `tagging` block is documented below.
        """
        return pulumi.get(self, "taggings")

    @property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> int:
        """
        TCP maximum segment size. 0 means do not change segment size.
        """
        return pulumi.get(self, "tcp_mss")

    @property
    @pulumi.getter
    def trunk(self) -> str:
        """
        Enable/disable VLAN trunk.
        """
        return pulumi.get(self, "trunk")

    @property
    @pulumi.getter(name="trustIp1")
    def trust_ip1(self) -> str:
        """
        Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        """
        return pulumi.get(self, "trust_ip1")

    @property
    @pulumi.getter(name="trustIp2")
    def trust_ip2(self) -> str:
        """
        Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        """
        return pulumi.get(self, "trust_ip2")

    @property
    @pulumi.getter(name="trustIp3")
    def trust_ip3(self) -> str:
        """
        Trusted host for dedicated management traffic (0.0.0.0/24 for all hosts).
        """
        return pulumi.get(self, "trust_ip3")

    @property
    @pulumi.getter(name="trustIp61")
    def trust_ip61(self) -> str:
        """
        Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        """
        return pulumi.get(self, "trust_ip61")

    @property
    @pulumi.getter(name="trustIp62")
    def trust_ip62(self) -> str:
        """
        Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        """
        return pulumi.get(self, "trust_ip62")

    @property
    @pulumi.getter(name="trustIp63")
    def trust_ip63(self) -> str:
        """
        Trusted IPv6 host for dedicated management traffic (::/0 for all hosts).
        """
        return pulumi.get(self, "trust_ip63")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        DHCP client option type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username of the PPPoE account, provided by your ISP.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def vdom(self) -> str:
        """
        Interface is in this virtual domain (VDOM).
        """
        return pulumi.get(self, "vdom")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vindex(self) -> int:
        """
        Switch control interface VLAN ID.
        """
        return pulumi.get(self, "vindex")

    @property
    @pulumi.getter(name="vlanProtocol")
    def vlan_protocol(self) -> str:
        """
        Ethernet protocol of VLAN.
        """
        return pulumi.get(self, "vlan_protocol")

    @property
    @pulumi.getter
    def vlanforward(self) -> str:
        """
        Enable/disable traffic forwarding between VLANs on this interface.
        """
        return pulumi.get(self, "vlanforward")

    @property
    @pulumi.getter
    def vlanid(self) -> int:
        """
        VLAN ID (1 - 4094).
        """
        return pulumi.get(self, "vlanid")

    @property
    @pulumi.getter
    def vrf(self) -> int:
        """
        Virtual Routing Forwarding ID.
        """
        return pulumi.get(self, "vrf")

    @property
    @pulumi.getter(name="vrrpVirtualMac")
    def vrrp_virtual_mac(self) -> str:
        """
        Enable/disable use of virtual MAC for VRRP.
        """
        return pulumi.get(self, "vrrp_virtual_mac")

    @property
    @pulumi.getter
    def vrrps(self) -> Sequence['outputs.GetInterfaceVrrpResult']:
        """
        VRRP configuration. The structure of `vrrp` block is documented below.
        """
        return pulumi.get(self, "vrrps")

    @property
    @pulumi.getter
    def wccp(self) -> str:
        """
        Enable/disable WCCP on this interface. Used for encapsulated WCCP communication between WCCP clients and servers.
        """
        return pulumi.get(self, "wccp")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Default weight for static routes (if route has no weight configured).
        """
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter(name="winsIp")
    def wins_ip(self) -> str:
        """
        WINS server IP.
        """
        return pulumi.get(self, "wins_ip")


class AwaitableGetInterfaceResult(GetInterfaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInterfaceResult(
            ac_name=self.ac_name,
            aggregate=self.aggregate,
            aggregate_type=self.aggregate_type,
            algorithm=self.algorithm,
            alias=self.alias,
            allowaccess=self.allowaccess,
            ap_discover=self.ap_discover,
            arpforward=self.arpforward,
            auth_cert=self.auth_cert,
            auth_portal_addr=self.auth_portal_addr,
            auth_type=self.auth_type,
            auto_auth_extension_device=self.auto_auth_extension_device,
            bandwidth_measure_time=self.bandwidth_measure_time,
            bfd=self.bfd,
            bfd_desired_min_tx=self.bfd_desired_min_tx,
            bfd_detect_mult=self.bfd_detect_mult,
            bfd_required_min_rx=self.bfd_required_min_rx,
            broadcast_forticlient_discovery=self.broadcast_forticlient_discovery,
            broadcast_forward=self.broadcast_forward,
            captive_portal=self.captive_portal,
            cli_conn_status=self.cli_conn_status,
            client_options=self.client_options,
            color=self.color,
            dedicated_to=self.dedicated_to,
            default_purdue_level=self.default_purdue_level,
            defaultgw=self.defaultgw,
            description=self.description,
            detected_peer_mtu=self.detected_peer_mtu,
            detectprotocol=self.detectprotocol,
            detectserver=self.detectserver,
            device_access_list=self.device_access_list,
            device_identification=self.device_identification,
            device_identification_active_scan=self.device_identification_active_scan,
            device_netscan=self.device_netscan,
            device_user_identification=self.device_user_identification,
            devindex=self.devindex,
            dhcp_broadcast_flag=self.dhcp_broadcast_flag,
            dhcp_classless_route_addition=self.dhcp_classless_route_addition,
            dhcp_client_identifier=self.dhcp_client_identifier,
            dhcp_relay_agent_option=self.dhcp_relay_agent_option,
            dhcp_relay_circuit_id=self.dhcp_relay_circuit_id,
            dhcp_relay_interface=self.dhcp_relay_interface,
            dhcp_relay_interface_select_method=self.dhcp_relay_interface_select_method,
            dhcp_relay_ip=self.dhcp_relay_ip,
            dhcp_relay_link_selection=self.dhcp_relay_link_selection,
            dhcp_relay_request_all_server=self.dhcp_relay_request_all_server,
            dhcp_relay_service=self.dhcp_relay_service,
            dhcp_relay_source_ip=self.dhcp_relay_source_ip,
            dhcp_relay_type=self.dhcp_relay_type,
            dhcp_renew_time=self.dhcp_renew_time,
            dhcp_smart_relay=self.dhcp_smart_relay,
            dhcp_snooping_server_lists=self.dhcp_snooping_server_lists,
            disc_retry_timeout=self.disc_retry_timeout,
            disconnect_threshold=self.disconnect_threshold,
            distance=self.distance,
            dns_server_override=self.dns_server_override,
            dns_server_protocol=self.dns_server_protocol,
            drop_fragment=self.drop_fragment,
            drop_overlapped_fragment=self.drop_overlapped_fragment,
            eap_ca_cert=self.eap_ca_cert,
            eap_identity=self.eap_identity,
            eap_method=self.eap_method,
            eap_password=self.eap_password,
            eap_supplicant=self.eap_supplicant,
            eap_user_cert=self.eap_user_cert,
            egress_shaping_profile=self.egress_shaping_profile,
            endpoint_compliance=self.endpoint_compliance,
            estimated_downstream_bandwidth=self.estimated_downstream_bandwidth,
            estimated_upstream_bandwidth=self.estimated_upstream_bandwidth,
            explicit_ftp_proxy=self.explicit_ftp_proxy,
            explicit_web_proxy=self.explicit_web_proxy,
            external=self.external,
            fail_action_on_extender=self.fail_action_on_extender,
            fail_alert_interfaces=self.fail_alert_interfaces,
            fail_alert_method=self.fail_alert_method,
            fail_detect=self.fail_detect,
            fail_detect_option=self.fail_detect_option,
            fortiheartbeat=self.fortiheartbeat,
            fortilink=self.fortilink,
            fortilink_backup_link=self.fortilink_backup_link,
            fortilink_neighbor_detect=self.fortilink_neighbor_detect,
            fortilink_split_interface=self.fortilink_split_interface,
            fortilink_stacking=self.fortilink_stacking,
            forward_domain=self.forward_domain,
            forward_error_correction=self.forward_error_correction,
            gwdetect=self.gwdetect,
            ha_priority=self.ha_priority,
            icmp_accept_redirect=self.icmp_accept_redirect,
            icmp_send_redirect=self.icmp_send_redirect,
            id=self.id,
            ident_accept=self.ident_accept,
            idle_timeout=self.idle_timeout,
            ike_saml_server=self.ike_saml_server,
            inbandwidth=self.inbandwidth,
            ingress_shaping_profile=self.ingress_shaping_profile,
            ingress_spillover_threshold=self.ingress_spillover_threshold,
            interface=self.interface,
            internal=self.internal,
            ip=self.ip,
            ip_managed_by_fortiipam=self.ip_managed_by_fortiipam,
            ipmac=self.ipmac,
            ips_sniffer_mode=self.ips_sniffer_mode,
            ipunnumbered=self.ipunnumbered,
            ipv6s=self.ipv6s,
            l2forward=self.l2forward,
            lacp_ha_secondary=self.lacp_ha_secondary,
            lacp_ha_slave=self.lacp_ha_slave,
            lacp_mode=self.lacp_mode,
            lacp_speed=self.lacp_speed,
            lcp_echo_interval=self.lcp_echo_interval,
            lcp_max_echo_fails=self.lcp_max_echo_fails,
            link_up_delay=self.link_up_delay,
            lldp_network_policy=self.lldp_network_policy,
            lldp_reception=self.lldp_reception,
            lldp_transmission=self.lldp_transmission,
            macaddr=self.macaddr,
            managed_devices=self.managed_devices,
            managed_subnetwork_size=self.managed_subnetwork_size,
            management_ip=self.management_ip,
            measured_downstream_bandwidth=self.measured_downstream_bandwidth,
            measured_upstream_bandwidth=self.measured_upstream_bandwidth,
            mediatype=self.mediatype,
            members=self.members,
            min_links=self.min_links,
            min_links_down=self.min_links_down,
            mode=self.mode,
            monitor_bandwidth=self.monitor_bandwidth,
            mtu=self.mtu,
            mtu_override=self.mtu_override,
            name=self.name,
            ndiscforward=self.ndiscforward,
            netbios_forward=self.netbios_forward,
            netflow_sampler=self.netflow_sampler,
            outbandwidth=self.outbandwidth,
            padt_retry_timeout=self.padt_retry_timeout,
            password=self.password,
            ping_serv_status=self.ping_serv_status,
            polling_interval=self.polling_interval,
            pppoe_unnumbered_negotiate=self.pppoe_unnumbered_negotiate,
            pptp_auth_type=self.pptp_auth_type,
            pptp_client=self.pptp_client,
            pptp_password=self.pptp_password,
            pptp_server_ip=self.pptp_server_ip,
            pptp_timeout=self.pptp_timeout,
            pptp_user=self.pptp_user,
            preserve_session_route=self.preserve_session_route,
            priority=self.priority,
            priority_override=self.priority_override,
            proxy_captive_portal=self.proxy_captive_portal,
            reachable_time=self.reachable_time,
            redundant_interface=self.redundant_interface,
            remote_ip=self.remote_ip,
            replacemsg_override_group=self.replacemsg_override_group,
            ring_rx=self.ring_rx,
            ring_tx=self.ring_tx,
            role=self.role,
            sample_direction=self.sample_direction,
            sample_rate=self.sample_rate,
            scan_botnet_connections=self.scan_botnet_connections,
            secondary_ip=self.secondary_ip,
            secondaryips=self.secondaryips,
            security_exempt_list=self.security_exempt_list,
            security_external_logout=self.security_external_logout,
            security_external_web=self.security_external_web,
            security_groups=self.security_groups,
            security_mac_auth_bypass=self.security_mac_auth_bypass,
            security_mode=self.security_mode,
            security_redirect_url=self.security_redirect_url,
            service_name=self.service_name,
            sflow_sampler=self.sflow_sampler,
            snmp_index=self.snmp_index,
            speed=self.speed,
            spillover_threshold=self.spillover_threshold,
            src_check=self.src_check,
            status=self.status,
            stp=self.stp,
            stp_ha_secondary=self.stp_ha_secondary,
            stpforward=self.stpforward,
            stpforward_mode=self.stpforward_mode,
            subst=self.subst,
            substitute_dst_mac=self.substitute_dst_mac,
            swc_first_create=self.swc_first_create,
            swc_vlan=self.swc_vlan,
            switch=self.switch,
            switch_controller_access_vlan=self.switch_controller_access_vlan,
            switch_controller_arp_inspection=self.switch_controller_arp_inspection,
            switch_controller_dhcp_snooping=self.switch_controller_dhcp_snooping,
            switch_controller_dhcp_snooping_option82=self.switch_controller_dhcp_snooping_option82,
            switch_controller_dhcp_snooping_verify_mac=self.switch_controller_dhcp_snooping_verify_mac,
            switch_controller_dynamic=self.switch_controller_dynamic,
            switch_controller_feature=self.switch_controller_feature,
            switch_controller_igmp_snooping=self.switch_controller_igmp_snooping,
            switch_controller_igmp_snooping_fast_leave=self.switch_controller_igmp_snooping_fast_leave,
            switch_controller_igmp_snooping_proxy=self.switch_controller_igmp_snooping_proxy,
            switch_controller_iot_scanning=self.switch_controller_iot_scanning,
            switch_controller_learning_limit=self.switch_controller_learning_limit,
            switch_controller_mgmt_vlan=self.switch_controller_mgmt_vlan,
            switch_controller_nac=self.switch_controller_nac,
            switch_controller_netflow_collect=self.switch_controller_netflow_collect,
            switch_controller_offload=self.switch_controller_offload,
            switch_controller_offload_gw=self.switch_controller_offload_gw,
            switch_controller_offload_ip=self.switch_controller_offload_ip,
            switch_controller_rspan_mode=self.switch_controller_rspan_mode,
            switch_controller_source_ip=self.switch_controller_source_ip,
            switch_controller_traffic_policy=self.switch_controller_traffic_policy,
            system_id=self.system_id,
            system_id_type=self.system_id_type,
            taggings=self.taggings,
            tcp_mss=self.tcp_mss,
            trunk=self.trunk,
            trust_ip1=self.trust_ip1,
            trust_ip2=self.trust_ip2,
            trust_ip3=self.trust_ip3,
            trust_ip61=self.trust_ip61,
            trust_ip62=self.trust_ip62,
            trust_ip63=self.trust_ip63,
            type=self.type,
            username=self.username,
            vdom=self.vdom,
            vdomparam=self.vdomparam,
            vindex=self.vindex,
            vlan_protocol=self.vlan_protocol,
            vlanforward=self.vlanforward,
            vlanid=self.vlanid,
            vrf=self.vrf,
            vrrp_virtual_mac=self.vrrp_virtual_mac,
            vrrps=self.vrrps,
            wccp=self.wccp,
            weight=self.weight,
            wins_ip=self.wins_ip)


def get_interface(name: Optional[str] = None,
                  vdomparam: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInterfaceResult:
    """
    Use this data source to get information on an fortios system interface

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_fortios as fortios

    sample1 = fortios.system.get_interface(name="port1")
    pulumi.export("output1", sample1.ip)
    ```
    <!--End PulumiCodeChooser -->


    :param str name: Specify the name of the desired system interface.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:system/getInterface:getInterface', __args__, opts=opts, typ=GetInterfaceResult).value

    return AwaitableGetInterfaceResult(
        ac_name=pulumi.get(__ret__, 'ac_name'),
        aggregate=pulumi.get(__ret__, 'aggregate'),
        aggregate_type=pulumi.get(__ret__, 'aggregate_type'),
        algorithm=pulumi.get(__ret__, 'algorithm'),
        alias=pulumi.get(__ret__, 'alias'),
        allowaccess=pulumi.get(__ret__, 'allowaccess'),
        ap_discover=pulumi.get(__ret__, 'ap_discover'),
        arpforward=pulumi.get(__ret__, 'arpforward'),
        auth_cert=pulumi.get(__ret__, 'auth_cert'),
        auth_portal_addr=pulumi.get(__ret__, 'auth_portal_addr'),
        auth_type=pulumi.get(__ret__, 'auth_type'),
        auto_auth_extension_device=pulumi.get(__ret__, 'auto_auth_extension_device'),
        bandwidth_measure_time=pulumi.get(__ret__, 'bandwidth_measure_time'),
        bfd=pulumi.get(__ret__, 'bfd'),
        bfd_desired_min_tx=pulumi.get(__ret__, 'bfd_desired_min_tx'),
        bfd_detect_mult=pulumi.get(__ret__, 'bfd_detect_mult'),
        bfd_required_min_rx=pulumi.get(__ret__, 'bfd_required_min_rx'),
        broadcast_forticlient_discovery=pulumi.get(__ret__, 'broadcast_forticlient_discovery'),
        broadcast_forward=pulumi.get(__ret__, 'broadcast_forward'),
        captive_portal=pulumi.get(__ret__, 'captive_portal'),
        cli_conn_status=pulumi.get(__ret__, 'cli_conn_status'),
        client_options=pulumi.get(__ret__, 'client_options'),
        color=pulumi.get(__ret__, 'color'),
        dedicated_to=pulumi.get(__ret__, 'dedicated_to'),
        default_purdue_level=pulumi.get(__ret__, 'default_purdue_level'),
        defaultgw=pulumi.get(__ret__, 'defaultgw'),
        description=pulumi.get(__ret__, 'description'),
        detected_peer_mtu=pulumi.get(__ret__, 'detected_peer_mtu'),
        detectprotocol=pulumi.get(__ret__, 'detectprotocol'),
        detectserver=pulumi.get(__ret__, 'detectserver'),
        device_access_list=pulumi.get(__ret__, 'device_access_list'),
        device_identification=pulumi.get(__ret__, 'device_identification'),
        device_identification_active_scan=pulumi.get(__ret__, 'device_identification_active_scan'),
        device_netscan=pulumi.get(__ret__, 'device_netscan'),
        device_user_identification=pulumi.get(__ret__, 'device_user_identification'),
        devindex=pulumi.get(__ret__, 'devindex'),
        dhcp_broadcast_flag=pulumi.get(__ret__, 'dhcp_broadcast_flag'),
        dhcp_classless_route_addition=pulumi.get(__ret__, 'dhcp_classless_route_addition'),
        dhcp_client_identifier=pulumi.get(__ret__, 'dhcp_client_identifier'),
        dhcp_relay_agent_option=pulumi.get(__ret__, 'dhcp_relay_agent_option'),
        dhcp_relay_circuit_id=pulumi.get(__ret__, 'dhcp_relay_circuit_id'),
        dhcp_relay_interface=pulumi.get(__ret__, 'dhcp_relay_interface'),
        dhcp_relay_interface_select_method=pulumi.get(__ret__, 'dhcp_relay_interface_select_method'),
        dhcp_relay_ip=pulumi.get(__ret__, 'dhcp_relay_ip'),
        dhcp_relay_link_selection=pulumi.get(__ret__, 'dhcp_relay_link_selection'),
        dhcp_relay_request_all_server=pulumi.get(__ret__, 'dhcp_relay_request_all_server'),
        dhcp_relay_service=pulumi.get(__ret__, 'dhcp_relay_service'),
        dhcp_relay_source_ip=pulumi.get(__ret__, 'dhcp_relay_source_ip'),
        dhcp_relay_type=pulumi.get(__ret__, 'dhcp_relay_type'),
        dhcp_renew_time=pulumi.get(__ret__, 'dhcp_renew_time'),
        dhcp_smart_relay=pulumi.get(__ret__, 'dhcp_smart_relay'),
        dhcp_snooping_server_lists=pulumi.get(__ret__, 'dhcp_snooping_server_lists'),
        disc_retry_timeout=pulumi.get(__ret__, 'disc_retry_timeout'),
        disconnect_threshold=pulumi.get(__ret__, 'disconnect_threshold'),
        distance=pulumi.get(__ret__, 'distance'),
        dns_server_override=pulumi.get(__ret__, 'dns_server_override'),
        dns_server_protocol=pulumi.get(__ret__, 'dns_server_protocol'),
        drop_fragment=pulumi.get(__ret__, 'drop_fragment'),
        drop_overlapped_fragment=pulumi.get(__ret__, 'drop_overlapped_fragment'),
        eap_ca_cert=pulumi.get(__ret__, 'eap_ca_cert'),
        eap_identity=pulumi.get(__ret__, 'eap_identity'),
        eap_method=pulumi.get(__ret__, 'eap_method'),
        eap_password=pulumi.get(__ret__, 'eap_password'),
        eap_supplicant=pulumi.get(__ret__, 'eap_supplicant'),
        eap_user_cert=pulumi.get(__ret__, 'eap_user_cert'),
        egress_shaping_profile=pulumi.get(__ret__, 'egress_shaping_profile'),
        endpoint_compliance=pulumi.get(__ret__, 'endpoint_compliance'),
        estimated_downstream_bandwidth=pulumi.get(__ret__, 'estimated_downstream_bandwidth'),
        estimated_upstream_bandwidth=pulumi.get(__ret__, 'estimated_upstream_bandwidth'),
        explicit_ftp_proxy=pulumi.get(__ret__, 'explicit_ftp_proxy'),
        explicit_web_proxy=pulumi.get(__ret__, 'explicit_web_proxy'),
        external=pulumi.get(__ret__, 'external'),
        fail_action_on_extender=pulumi.get(__ret__, 'fail_action_on_extender'),
        fail_alert_interfaces=pulumi.get(__ret__, 'fail_alert_interfaces'),
        fail_alert_method=pulumi.get(__ret__, 'fail_alert_method'),
        fail_detect=pulumi.get(__ret__, 'fail_detect'),
        fail_detect_option=pulumi.get(__ret__, 'fail_detect_option'),
        fortiheartbeat=pulumi.get(__ret__, 'fortiheartbeat'),
        fortilink=pulumi.get(__ret__, 'fortilink'),
        fortilink_backup_link=pulumi.get(__ret__, 'fortilink_backup_link'),
        fortilink_neighbor_detect=pulumi.get(__ret__, 'fortilink_neighbor_detect'),
        fortilink_split_interface=pulumi.get(__ret__, 'fortilink_split_interface'),
        fortilink_stacking=pulumi.get(__ret__, 'fortilink_stacking'),
        forward_domain=pulumi.get(__ret__, 'forward_domain'),
        forward_error_correction=pulumi.get(__ret__, 'forward_error_correction'),
        gwdetect=pulumi.get(__ret__, 'gwdetect'),
        ha_priority=pulumi.get(__ret__, 'ha_priority'),
        icmp_accept_redirect=pulumi.get(__ret__, 'icmp_accept_redirect'),
        icmp_send_redirect=pulumi.get(__ret__, 'icmp_send_redirect'),
        id=pulumi.get(__ret__, 'id'),
        ident_accept=pulumi.get(__ret__, 'ident_accept'),
        idle_timeout=pulumi.get(__ret__, 'idle_timeout'),
        ike_saml_server=pulumi.get(__ret__, 'ike_saml_server'),
        inbandwidth=pulumi.get(__ret__, 'inbandwidth'),
        ingress_shaping_profile=pulumi.get(__ret__, 'ingress_shaping_profile'),
        ingress_spillover_threshold=pulumi.get(__ret__, 'ingress_spillover_threshold'),
        interface=pulumi.get(__ret__, 'interface'),
        internal=pulumi.get(__ret__, 'internal'),
        ip=pulumi.get(__ret__, 'ip'),
        ip_managed_by_fortiipam=pulumi.get(__ret__, 'ip_managed_by_fortiipam'),
        ipmac=pulumi.get(__ret__, 'ipmac'),
        ips_sniffer_mode=pulumi.get(__ret__, 'ips_sniffer_mode'),
        ipunnumbered=pulumi.get(__ret__, 'ipunnumbered'),
        ipv6s=pulumi.get(__ret__, 'ipv6s'),
        l2forward=pulumi.get(__ret__, 'l2forward'),
        lacp_ha_secondary=pulumi.get(__ret__, 'lacp_ha_secondary'),
        lacp_ha_slave=pulumi.get(__ret__, 'lacp_ha_slave'),
        lacp_mode=pulumi.get(__ret__, 'lacp_mode'),
        lacp_speed=pulumi.get(__ret__, 'lacp_speed'),
        lcp_echo_interval=pulumi.get(__ret__, 'lcp_echo_interval'),
        lcp_max_echo_fails=pulumi.get(__ret__, 'lcp_max_echo_fails'),
        link_up_delay=pulumi.get(__ret__, 'link_up_delay'),
        lldp_network_policy=pulumi.get(__ret__, 'lldp_network_policy'),
        lldp_reception=pulumi.get(__ret__, 'lldp_reception'),
        lldp_transmission=pulumi.get(__ret__, 'lldp_transmission'),
        macaddr=pulumi.get(__ret__, 'macaddr'),
        managed_devices=pulumi.get(__ret__, 'managed_devices'),
        managed_subnetwork_size=pulumi.get(__ret__, 'managed_subnetwork_size'),
        management_ip=pulumi.get(__ret__, 'management_ip'),
        measured_downstream_bandwidth=pulumi.get(__ret__, 'measured_downstream_bandwidth'),
        measured_upstream_bandwidth=pulumi.get(__ret__, 'measured_upstream_bandwidth'),
        mediatype=pulumi.get(__ret__, 'mediatype'),
        members=pulumi.get(__ret__, 'members'),
        min_links=pulumi.get(__ret__, 'min_links'),
        min_links_down=pulumi.get(__ret__, 'min_links_down'),
        mode=pulumi.get(__ret__, 'mode'),
        monitor_bandwidth=pulumi.get(__ret__, 'monitor_bandwidth'),
        mtu=pulumi.get(__ret__, 'mtu'),
        mtu_override=pulumi.get(__ret__, 'mtu_override'),
        name=pulumi.get(__ret__, 'name'),
        ndiscforward=pulumi.get(__ret__, 'ndiscforward'),
        netbios_forward=pulumi.get(__ret__, 'netbios_forward'),
        netflow_sampler=pulumi.get(__ret__, 'netflow_sampler'),
        outbandwidth=pulumi.get(__ret__, 'outbandwidth'),
        padt_retry_timeout=pulumi.get(__ret__, 'padt_retry_timeout'),
        password=pulumi.get(__ret__, 'password'),
        ping_serv_status=pulumi.get(__ret__, 'ping_serv_status'),
        polling_interval=pulumi.get(__ret__, 'polling_interval'),
        pppoe_unnumbered_negotiate=pulumi.get(__ret__, 'pppoe_unnumbered_negotiate'),
        pptp_auth_type=pulumi.get(__ret__, 'pptp_auth_type'),
        pptp_client=pulumi.get(__ret__, 'pptp_client'),
        pptp_password=pulumi.get(__ret__, 'pptp_password'),
        pptp_server_ip=pulumi.get(__ret__, 'pptp_server_ip'),
        pptp_timeout=pulumi.get(__ret__, 'pptp_timeout'),
        pptp_user=pulumi.get(__ret__, 'pptp_user'),
        preserve_session_route=pulumi.get(__ret__, 'preserve_session_route'),
        priority=pulumi.get(__ret__, 'priority'),
        priority_override=pulumi.get(__ret__, 'priority_override'),
        proxy_captive_portal=pulumi.get(__ret__, 'proxy_captive_portal'),
        reachable_time=pulumi.get(__ret__, 'reachable_time'),
        redundant_interface=pulumi.get(__ret__, 'redundant_interface'),
        remote_ip=pulumi.get(__ret__, 'remote_ip'),
        replacemsg_override_group=pulumi.get(__ret__, 'replacemsg_override_group'),
        ring_rx=pulumi.get(__ret__, 'ring_rx'),
        ring_tx=pulumi.get(__ret__, 'ring_tx'),
        role=pulumi.get(__ret__, 'role'),
        sample_direction=pulumi.get(__ret__, 'sample_direction'),
        sample_rate=pulumi.get(__ret__, 'sample_rate'),
        scan_botnet_connections=pulumi.get(__ret__, 'scan_botnet_connections'),
        secondary_ip=pulumi.get(__ret__, 'secondary_ip'),
        secondaryips=pulumi.get(__ret__, 'secondaryips'),
        security_exempt_list=pulumi.get(__ret__, 'security_exempt_list'),
        security_external_logout=pulumi.get(__ret__, 'security_external_logout'),
        security_external_web=pulumi.get(__ret__, 'security_external_web'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        security_mac_auth_bypass=pulumi.get(__ret__, 'security_mac_auth_bypass'),
        security_mode=pulumi.get(__ret__, 'security_mode'),
        security_redirect_url=pulumi.get(__ret__, 'security_redirect_url'),
        service_name=pulumi.get(__ret__, 'service_name'),
        sflow_sampler=pulumi.get(__ret__, 'sflow_sampler'),
        snmp_index=pulumi.get(__ret__, 'snmp_index'),
        speed=pulumi.get(__ret__, 'speed'),
        spillover_threshold=pulumi.get(__ret__, 'spillover_threshold'),
        src_check=pulumi.get(__ret__, 'src_check'),
        status=pulumi.get(__ret__, 'status'),
        stp=pulumi.get(__ret__, 'stp'),
        stp_ha_secondary=pulumi.get(__ret__, 'stp_ha_secondary'),
        stpforward=pulumi.get(__ret__, 'stpforward'),
        stpforward_mode=pulumi.get(__ret__, 'stpforward_mode'),
        subst=pulumi.get(__ret__, 'subst'),
        substitute_dst_mac=pulumi.get(__ret__, 'substitute_dst_mac'),
        swc_first_create=pulumi.get(__ret__, 'swc_first_create'),
        swc_vlan=pulumi.get(__ret__, 'swc_vlan'),
        switch=pulumi.get(__ret__, 'switch'),
        switch_controller_access_vlan=pulumi.get(__ret__, 'switch_controller_access_vlan'),
        switch_controller_arp_inspection=pulumi.get(__ret__, 'switch_controller_arp_inspection'),
        switch_controller_dhcp_snooping=pulumi.get(__ret__, 'switch_controller_dhcp_snooping'),
        switch_controller_dhcp_snooping_option82=pulumi.get(__ret__, 'switch_controller_dhcp_snooping_option82'),
        switch_controller_dhcp_snooping_verify_mac=pulumi.get(__ret__, 'switch_controller_dhcp_snooping_verify_mac'),
        switch_controller_dynamic=pulumi.get(__ret__, 'switch_controller_dynamic'),
        switch_controller_feature=pulumi.get(__ret__, 'switch_controller_feature'),
        switch_controller_igmp_snooping=pulumi.get(__ret__, 'switch_controller_igmp_snooping'),
        switch_controller_igmp_snooping_fast_leave=pulumi.get(__ret__, 'switch_controller_igmp_snooping_fast_leave'),
        switch_controller_igmp_snooping_proxy=pulumi.get(__ret__, 'switch_controller_igmp_snooping_proxy'),
        switch_controller_iot_scanning=pulumi.get(__ret__, 'switch_controller_iot_scanning'),
        switch_controller_learning_limit=pulumi.get(__ret__, 'switch_controller_learning_limit'),
        switch_controller_mgmt_vlan=pulumi.get(__ret__, 'switch_controller_mgmt_vlan'),
        switch_controller_nac=pulumi.get(__ret__, 'switch_controller_nac'),
        switch_controller_netflow_collect=pulumi.get(__ret__, 'switch_controller_netflow_collect'),
        switch_controller_offload=pulumi.get(__ret__, 'switch_controller_offload'),
        switch_controller_offload_gw=pulumi.get(__ret__, 'switch_controller_offload_gw'),
        switch_controller_offload_ip=pulumi.get(__ret__, 'switch_controller_offload_ip'),
        switch_controller_rspan_mode=pulumi.get(__ret__, 'switch_controller_rspan_mode'),
        switch_controller_source_ip=pulumi.get(__ret__, 'switch_controller_source_ip'),
        switch_controller_traffic_policy=pulumi.get(__ret__, 'switch_controller_traffic_policy'),
        system_id=pulumi.get(__ret__, 'system_id'),
        system_id_type=pulumi.get(__ret__, 'system_id_type'),
        taggings=pulumi.get(__ret__, 'taggings'),
        tcp_mss=pulumi.get(__ret__, 'tcp_mss'),
        trunk=pulumi.get(__ret__, 'trunk'),
        trust_ip1=pulumi.get(__ret__, 'trust_ip1'),
        trust_ip2=pulumi.get(__ret__, 'trust_ip2'),
        trust_ip3=pulumi.get(__ret__, 'trust_ip3'),
        trust_ip61=pulumi.get(__ret__, 'trust_ip61'),
        trust_ip62=pulumi.get(__ret__, 'trust_ip62'),
        trust_ip63=pulumi.get(__ret__, 'trust_ip63'),
        type=pulumi.get(__ret__, 'type'),
        username=pulumi.get(__ret__, 'username'),
        vdom=pulumi.get(__ret__, 'vdom'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        vindex=pulumi.get(__ret__, 'vindex'),
        vlan_protocol=pulumi.get(__ret__, 'vlan_protocol'),
        vlanforward=pulumi.get(__ret__, 'vlanforward'),
        vlanid=pulumi.get(__ret__, 'vlanid'),
        vrf=pulumi.get(__ret__, 'vrf'),
        vrrp_virtual_mac=pulumi.get(__ret__, 'vrrp_virtual_mac'),
        vrrps=pulumi.get(__ret__, 'vrrps'),
        wccp=pulumi.get(__ret__, 'wccp'),
        weight=pulumi.get(__ret__, 'weight'),
        wins_ip=pulumi.get(__ret__, 'wins_ip'))


@_utilities.lift_output_func(get_interface)
def get_interface_output(name: Optional[pulumi.Input[str]] = None,
                         vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInterfaceResult]:
    """
    Use this data source to get information on an fortios system interface

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_fortios as fortios

    sample1 = fortios.system.get_interface(name="port1")
    pulumi.export("output1", sample1.ip)
    ```
    <!--End PulumiCodeChooser -->


    :param str name: Specify the name of the desired system interface.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
