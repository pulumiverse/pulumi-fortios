# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AdminArgs', 'Admin']

@pulumi.input_type
class AdminArgs:
    def __init__(__self__, *,
                 accprofile: Optional[pulumi.Input[str]] = None,
                 accprofile_override: Optional[pulumi.Input[str]] = None,
                 allow_remove_admin_session: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_to: Optional[pulumi.Input[str]] = None,
                 force_password_change: Optional[pulumi.Input[str]] = None,
                 fortitoken: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 guest_auth: Optional[pulumi.Input[str]] = None,
                 guest_lang: Optional[pulumi.Input[str]] = None,
                 guest_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuestUsergroupArgs']]]] = None,
                 gui_dashboards: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardArgs']]]] = None,
                 gui_global_menu_favorites: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiGlobalMenuFavoriteArgs']]]] = None,
                 gui_new_feature_acknowledges: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiNewFeatureAcknowledgeArgs']]]] = None,
                 gui_vdom_menu_favorites: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiVdomMenuFavoriteArgs']]]] = None,
                 hidden: Optional[pulumi.Input[int]] = None,
                 history0: Optional[pulumi.Input[str]] = None,
                 history1: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost1: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost10: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost2: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost3: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost4: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost5: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost6: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost7: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost8: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost9: Optional[pulumi.Input[str]] = None,
                 login_times: Optional[pulumi.Input[Sequence[pulumi.Input['AdminLoginTimeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_expire: Optional[pulumi.Input[str]] = None,
                 peer_auth: Optional[pulumi.Input[str]] = None,
                 peer_group: Optional[pulumi.Input[str]] = None,
                 radius_vdom_override: Optional[pulumi.Input[str]] = None,
                 remote_auth: Optional[pulumi.Input[str]] = None,
                 remote_group: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_phone: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 ssh_certificate: Optional[pulumi.Input[str]] = None,
                 ssh_public_key1: Optional[pulumi.Input[str]] = None,
                 ssh_public_key2: Optional[pulumi.Input[str]] = None,
                 ssh_public_key3: Optional[pulumi.Input[str]] = None,
                 trusthost1: Optional[pulumi.Input[str]] = None,
                 trusthost10: Optional[pulumi.Input[str]] = None,
                 trusthost2: Optional[pulumi.Input[str]] = None,
                 trusthost3: Optional[pulumi.Input[str]] = None,
                 trusthost4: Optional[pulumi.Input[str]] = None,
                 trusthost5: Optional[pulumi.Input[str]] = None,
                 trusthost6: Optional[pulumi.Input[str]] = None,
                 trusthost7: Optional[pulumi.Input[str]] = None,
                 trusthost8: Optional[pulumi.Input[str]] = None,
                 trusthost9: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 vdom_override: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['AdminVdomArgs']]]] = None,
                 wildcard: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Admin resource.
        :param pulumi.Input[str] accprofile: Access profile for this administrator. Access profiles control administrator access to FortiGate features.
        :param pulumi.Input[str] accprofile_override: Enable to use the name of an access profile provided by the remote authentication server to control the FortiGate features that this administrator can access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_remove_admin_session: Enable/disable allow admin session to be removed by privileged admin users. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email_to: This administrator's email address.
        :param pulumi.Input[str] force_password_change: Enable/disable force password change on next login. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortitoken: This administrator's FortiToken serial number.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] guest_auth: Enable/disable guest authentication. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] guest_lang: Guest management portal language.
        :param pulumi.Input[Sequence[pulumi.Input['AdminGuestUsergroupArgs']]] guest_usergroups: Select guest user groups. The structure of `guest_usergroups` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardArgs']]] gui_dashboards: GUI dashboards. The structure of `gui_dashboard` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AdminGuiGlobalMenuFavoriteArgs']]] gui_global_menu_favorites: Favorite GUI menu IDs for the global VDOM. The structure of `gui_global_menu_favorites` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AdminGuiNewFeatureAcknowledgeArgs']]] gui_new_feature_acknowledges: Acknowledgement of new features. The structure of `gui_new_feature_acknowledge` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AdminGuiVdomMenuFavoriteArgs']]] gui_vdom_menu_favorites: Favorite GUI menu IDs for VDOMs. The structure of `gui_vdom_menu_favorites` block is documented below.
        :param pulumi.Input[int] hidden: Admin user hidden attribute.
        :param pulumi.Input[str] history0: history0
        :param pulumi.Input[str] history1: history1
        :param pulumi.Input[str] ip6_trusthost1: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost10: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost2: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost3: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost4: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost5: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost6: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost7: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost8: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost9: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[Sequence[pulumi.Input['AdminLoginTimeArgs']]] login_times: Record user login time. The structure of `login_time` block is documented below.
        :param pulumi.Input[str] name: User name.
        :param pulumi.Input[str] password: Admin user password. :warning: **Due security reason and API's design, you need to use Generic resource with the monitor API [/api/v2/monitor/system/change-password/select](https://fndn.fortinet.net/index.php?/fortiapi/1-fortios/2271/1/system) to update the password for existing admin user. `Create` and `Delete` operation will works using this resource.**
        :param pulumi.Input[str] password_expire: Password expire time.
        :param pulumi.Input[str] peer_auth: Set to enable peer certificate authentication (for HTTPS admin access). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] peer_group: Name of peer group defined under config user group which has PKI members. Used for peer certificate authentication (for HTTPS admin access).
        :param pulumi.Input[str] radius_vdom_override: Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_auth: Enable/disable authentication using a remote RADIUS, LDAP, or TACACS+ server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_group: User group name used for remote auth.
        :param pulumi.Input[str] schedule: Firewall schedule used to restrict when the administrator can log in. No schedule means no restrictions.
        :param pulumi.Input[str] sms_custom_server: Custom SMS server to send SMS messages to.
        :param pulumi.Input[str] sms_phone: Phone number on which the administrator receives SMS messages.
        :param pulumi.Input[str] sms_server: Send SMS messages using the FortiGuard SMS server or a custom server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] ssh_certificate: Select the certificate to be used by the FortiGate for authentication with an SSH client.
        :param pulumi.Input[str] ssh_public_key1: Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        :param pulumi.Input[str] ssh_public_key2: Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        :param pulumi.Input[str] ssh_public_key3: Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        :param pulumi.Input[str] trusthost1: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost10: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost2: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost3: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost4: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost5: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost6: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost7: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost8: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost9: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] two_factor: Enable/disable two-factor authentication.
        :param pulumi.Input[str] two_factor_authentication: Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
        :param pulumi.Input[str] two_factor_notification: Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
        :param pulumi.Input[str] vdom_override: Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input['AdminVdomArgs']]] vdoms: Virtual domain(s) that the administrator can access. The structure of `vdom` block is documented below.
        :param pulumi.Input[str] wildcard: Enable/disable wildcard RADIUS authentication. Valid values: `enable`, `disable`.
        """
        if accprofile is not None:
            pulumi.set(__self__, "accprofile", accprofile)
        if accprofile_override is not None:
            pulumi.set(__self__, "accprofile_override", accprofile_override)
        if allow_remove_admin_session is not None:
            pulumi.set(__self__, "allow_remove_admin_session", allow_remove_admin_session)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if email_to is not None:
            pulumi.set(__self__, "email_to", email_to)
        if force_password_change is not None:
            pulumi.set(__self__, "force_password_change", force_password_change)
        if fortitoken is not None:
            pulumi.set(__self__, "fortitoken", fortitoken)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if guest_auth is not None:
            pulumi.set(__self__, "guest_auth", guest_auth)
        if guest_lang is not None:
            pulumi.set(__self__, "guest_lang", guest_lang)
        if guest_usergroups is not None:
            pulumi.set(__self__, "guest_usergroups", guest_usergroups)
        if gui_dashboards is not None:
            pulumi.set(__self__, "gui_dashboards", gui_dashboards)
        if gui_global_menu_favorites is not None:
            pulumi.set(__self__, "gui_global_menu_favorites", gui_global_menu_favorites)
        if gui_new_feature_acknowledges is not None:
            pulumi.set(__self__, "gui_new_feature_acknowledges", gui_new_feature_acknowledges)
        if gui_vdom_menu_favorites is not None:
            pulumi.set(__self__, "gui_vdom_menu_favorites", gui_vdom_menu_favorites)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if history0 is not None:
            pulumi.set(__self__, "history0", history0)
        if history1 is not None:
            pulumi.set(__self__, "history1", history1)
        if ip6_trusthost1 is not None:
            pulumi.set(__self__, "ip6_trusthost1", ip6_trusthost1)
        if ip6_trusthost10 is not None:
            pulumi.set(__self__, "ip6_trusthost10", ip6_trusthost10)
        if ip6_trusthost2 is not None:
            pulumi.set(__self__, "ip6_trusthost2", ip6_trusthost2)
        if ip6_trusthost3 is not None:
            pulumi.set(__self__, "ip6_trusthost3", ip6_trusthost3)
        if ip6_trusthost4 is not None:
            pulumi.set(__self__, "ip6_trusthost4", ip6_trusthost4)
        if ip6_trusthost5 is not None:
            pulumi.set(__self__, "ip6_trusthost5", ip6_trusthost5)
        if ip6_trusthost6 is not None:
            pulumi.set(__self__, "ip6_trusthost6", ip6_trusthost6)
        if ip6_trusthost7 is not None:
            pulumi.set(__self__, "ip6_trusthost7", ip6_trusthost7)
        if ip6_trusthost8 is not None:
            pulumi.set(__self__, "ip6_trusthost8", ip6_trusthost8)
        if ip6_trusthost9 is not None:
            pulumi.set(__self__, "ip6_trusthost9", ip6_trusthost9)
        if login_times is not None:
            pulumi.set(__self__, "login_times", login_times)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_expire is not None:
            pulumi.set(__self__, "password_expire", password_expire)
        if peer_auth is not None:
            pulumi.set(__self__, "peer_auth", peer_auth)
        if peer_group is not None:
            pulumi.set(__self__, "peer_group", peer_group)
        if radius_vdom_override is not None:
            pulumi.set(__self__, "radius_vdom_override", radius_vdom_override)
        if remote_auth is not None:
            pulumi.set(__self__, "remote_auth", remote_auth)
        if remote_group is not None:
            pulumi.set(__self__, "remote_group", remote_group)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if sms_custom_server is not None:
            pulumi.set(__self__, "sms_custom_server", sms_custom_server)
        if sms_phone is not None:
            pulumi.set(__self__, "sms_phone", sms_phone)
        if sms_server is not None:
            pulumi.set(__self__, "sms_server", sms_server)
        if ssh_certificate is not None:
            pulumi.set(__self__, "ssh_certificate", ssh_certificate)
        if ssh_public_key1 is not None:
            pulumi.set(__self__, "ssh_public_key1", ssh_public_key1)
        if ssh_public_key2 is not None:
            pulumi.set(__self__, "ssh_public_key2", ssh_public_key2)
        if ssh_public_key3 is not None:
            pulumi.set(__self__, "ssh_public_key3", ssh_public_key3)
        if trusthost1 is not None:
            pulumi.set(__self__, "trusthost1", trusthost1)
        if trusthost10 is not None:
            pulumi.set(__self__, "trusthost10", trusthost10)
        if trusthost2 is not None:
            pulumi.set(__self__, "trusthost2", trusthost2)
        if trusthost3 is not None:
            pulumi.set(__self__, "trusthost3", trusthost3)
        if trusthost4 is not None:
            pulumi.set(__self__, "trusthost4", trusthost4)
        if trusthost5 is not None:
            pulumi.set(__self__, "trusthost5", trusthost5)
        if trusthost6 is not None:
            pulumi.set(__self__, "trusthost6", trusthost6)
        if trusthost7 is not None:
            pulumi.set(__self__, "trusthost7", trusthost7)
        if trusthost8 is not None:
            pulumi.set(__self__, "trusthost8", trusthost8)
        if trusthost9 is not None:
            pulumi.set(__self__, "trusthost9", trusthost9)
        if two_factor is not None:
            pulumi.set(__self__, "two_factor", two_factor)
        if two_factor_authentication is not None:
            pulumi.set(__self__, "two_factor_authentication", two_factor_authentication)
        if two_factor_notification is not None:
            pulumi.set(__self__, "two_factor_notification", two_factor_notification)
        if vdom_override is not None:
            pulumi.set(__self__, "vdom_override", vdom_override)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def accprofile(self) -> Optional[pulumi.Input[str]]:
        """
        Access profile for this administrator. Access profiles control administrator access to FortiGate features.
        """
        return pulumi.get(self, "accprofile")

    @accprofile.setter
    def accprofile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accprofile", value)

    @property
    @pulumi.getter(name="accprofileOverride")
    def accprofile_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to use the name of an access profile provided by the remote authentication server to control the FortiGate features that this administrator can access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "accprofile_override")

    @accprofile_override.setter
    def accprofile_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accprofile_override", value)

    @property
    @pulumi.getter(name="allowRemoveAdminSession")
    def allow_remove_admin_session(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow admin session to be removed by privileged admin users. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_remove_admin_session")

    @allow_remove_admin_session.setter
    def allow_remove_admin_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_remove_admin_session", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailTo")
    def email_to(self) -> Optional[pulumi.Input[str]]:
        """
        This administrator's email address.
        """
        return pulumi.get(self, "email_to")

    @email_to.setter
    def email_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_to", value)

    @property
    @pulumi.getter(name="forcePasswordChange")
    def force_password_change(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable force password change on next login. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "force_password_change")

    @force_password_change.setter
    def force_password_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_password_change", value)

    @property
    @pulumi.getter
    def fortitoken(self) -> Optional[pulumi.Input[str]]:
        """
        This administrator's FortiToken serial number.
        """
        return pulumi.get(self, "fortitoken")

    @fortitoken.setter
    def fortitoken(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortitoken", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="guestAuth")
    def guest_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable guest authentication. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "guest_auth")

    @guest_auth.setter
    def guest_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guest_auth", value)

    @property
    @pulumi.getter(name="guestLang")
    def guest_lang(self) -> Optional[pulumi.Input[str]]:
        """
        Guest management portal language.
        """
        return pulumi.get(self, "guest_lang")

    @guest_lang.setter
    def guest_lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guest_lang", value)

    @property
    @pulumi.getter(name="guestUsergroups")
    def guest_usergroups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuestUsergroupArgs']]]]:
        """
        Select guest user groups. The structure of `guest_usergroups` block is documented below.
        """
        return pulumi.get(self, "guest_usergroups")

    @guest_usergroups.setter
    def guest_usergroups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuestUsergroupArgs']]]]):
        pulumi.set(self, "guest_usergroups", value)

    @property
    @pulumi.getter(name="guiDashboards")
    def gui_dashboards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardArgs']]]]:
        """
        GUI dashboards. The structure of `gui_dashboard` block is documented below.
        """
        return pulumi.get(self, "gui_dashboards")

    @gui_dashboards.setter
    def gui_dashboards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardArgs']]]]):
        pulumi.set(self, "gui_dashboards", value)

    @property
    @pulumi.getter(name="guiGlobalMenuFavorites")
    def gui_global_menu_favorites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiGlobalMenuFavoriteArgs']]]]:
        """
        Favorite GUI menu IDs for the global VDOM. The structure of `gui_global_menu_favorites` block is documented below.
        """
        return pulumi.get(self, "gui_global_menu_favorites")

    @gui_global_menu_favorites.setter
    def gui_global_menu_favorites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiGlobalMenuFavoriteArgs']]]]):
        pulumi.set(self, "gui_global_menu_favorites", value)

    @property
    @pulumi.getter(name="guiNewFeatureAcknowledges")
    def gui_new_feature_acknowledges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiNewFeatureAcknowledgeArgs']]]]:
        """
        Acknowledgement of new features. The structure of `gui_new_feature_acknowledge` block is documented below.
        """
        return pulumi.get(self, "gui_new_feature_acknowledges")

    @gui_new_feature_acknowledges.setter
    def gui_new_feature_acknowledges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiNewFeatureAcknowledgeArgs']]]]):
        pulumi.set(self, "gui_new_feature_acknowledges", value)

    @property
    @pulumi.getter(name="guiVdomMenuFavorites")
    def gui_vdom_menu_favorites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiVdomMenuFavoriteArgs']]]]:
        """
        Favorite GUI menu IDs for VDOMs. The structure of `gui_vdom_menu_favorites` block is documented below.
        """
        return pulumi.get(self, "gui_vdom_menu_favorites")

    @gui_vdom_menu_favorites.setter
    def gui_vdom_menu_favorites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiVdomMenuFavoriteArgs']]]]):
        pulumi.set(self, "gui_vdom_menu_favorites", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[int]]:
        """
        Admin user hidden attribute.
        """
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def history0(self) -> Optional[pulumi.Input[str]]:
        """
        history0
        """
        return pulumi.get(self, "history0")

    @history0.setter
    def history0(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "history0", value)

    @property
    @pulumi.getter
    def history1(self) -> Optional[pulumi.Input[str]]:
        """
        history1
        """
        return pulumi.get(self, "history1")

    @history1.setter
    def history1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "history1", value)

    @property
    @pulumi.getter(name="ip6Trusthost1")
    def ip6_trusthost1(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost1")

    @ip6_trusthost1.setter
    def ip6_trusthost1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost1", value)

    @property
    @pulumi.getter(name="ip6Trusthost10")
    def ip6_trusthost10(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost10")

    @ip6_trusthost10.setter
    def ip6_trusthost10(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost10", value)

    @property
    @pulumi.getter(name="ip6Trusthost2")
    def ip6_trusthost2(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost2")

    @ip6_trusthost2.setter
    def ip6_trusthost2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost2", value)

    @property
    @pulumi.getter(name="ip6Trusthost3")
    def ip6_trusthost3(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost3")

    @ip6_trusthost3.setter
    def ip6_trusthost3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost3", value)

    @property
    @pulumi.getter(name="ip6Trusthost4")
    def ip6_trusthost4(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost4")

    @ip6_trusthost4.setter
    def ip6_trusthost4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost4", value)

    @property
    @pulumi.getter(name="ip6Trusthost5")
    def ip6_trusthost5(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost5")

    @ip6_trusthost5.setter
    def ip6_trusthost5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost5", value)

    @property
    @pulumi.getter(name="ip6Trusthost6")
    def ip6_trusthost6(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost6")

    @ip6_trusthost6.setter
    def ip6_trusthost6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost6", value)

    @property
    @pulumi.getter(name="ip6Trusthost7")
    def ip6_trusthost7(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost7")

    @ip6_trusthost7.setter
    def ip6_trusthost7(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost7", value)

    @property
    @pulumi.getter(name="ip6Trusthost8")
    def ip6_trusthost8(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost8")

    @ip6_trusthost8.setter
    def ip6_trusthost8(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost8", value)

    @property
    @pulumi.getter(name="ip6Trusthost9")
    def ip6_trusthost9(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost9")

    @ip6_trusthost9.setter
    def ip6_trusthost9(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost9", value)

    @property
    @pulumi.getter(name="loginTimes")
    def login_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminLoginTimeArgs']]]]:
        """
        Record user login time. The structure of `login_time` block is documented below.
        """
        return pulumi.get(self, "login_times")

    @login_times.setter
    def login_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminLoginTimeArgs']]]]):
        pulumi.set(self, "login_times", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Admin user password. :warning: **Due security reason and API's design, you need to use Generic resource with the monitor API [/api/v2/monitor/system/change-password/select](https://fndn.fortinet.net/index.php?/fortiapi/1-fortios/2271/1/system) to update the password for existing admin user. `Create` and `Delete` operation will works using this resource.**
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordExpire")
    def password_expire(self) -> Optional[pulumi.Input[str]]:
        """
        Password expire time.
        """
        return pulumi.get(self, "password_expire")

    @password_expire.setter
    def password_expire(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_expire", value)

    @property
    @pulumi.getter(name="peerAuth")
    def peer_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Set to enable peer certificate authentication (for HTTPS admin access). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "peer_auth")

    @peer_auth.setter
    def peer_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_auth", value)

    @property
    @pulumi.getter(name="peerGroup")
    def peer_group(self) -> Optional[pulumi.Input[str]]:
        """
        Name of peer group defined under config user group which has PKI members. Used for peer certificate authentication (for HTTPS admin access).
        """
        return pulumi.get(self, "peer_group")

    @peer_group.setter
    def peer_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_group", value)

    @property
    @pulumi.getter(name="radiusVdomOverride")
    def radius_vdom_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "radius_vdom_override")

    @radius_vdom_override.setter
    def radius_vdom_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_vdom_override", value)

    @property
    @pulumi.getter(name="remoteAuth")
    def remote_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable authentication using a remote RADIUS, LDAP, or TACACS+ server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remote_auth")

    @remote_auth.setter
    def remote_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_auth", value)

    @property
    @pulumi.getter(name="remoteGroup")
    def remote_group(self) -> Optional[pulumi.Input[str]]:
        """
        User group name used for remote auth.
        """
        return pulumi.get(self, "remote_group")

    @remote_group.setter
    def remote_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_group", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Firewall schedule used to restrict when the administrator can log in. No schedule means no restrictions.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="smsCustomServer")
    def sms_custom_server(self) -> Optional[pulumi.Input[str]]:
        """
        Custom SMS server to send SMS messages to.
        """
        return pulumi.get(self, "sms_custom_server")

    @sms_custom_server.setter
    def sms_custom_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_custom_server", value)

    @property
    @pulumi.getter(name="smsPhone")
    def sms_phone(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number on which the administrator receives SMS messages.
        """
        return pulumi.get(self, "sms_phone")

    @sms_phone.setter
    def sms_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_phone", value)

    @property
    @pulumi.getter(name="smsServer")
    def sms_server(self) -> Optional[pulumi.Input[str]]:
        """
        Send SMS messages using the FortiGuard SMS server or a custom server. Valid values: `fortiguard`, `custom`.
        """
        return pulumi.get(self, "sms_server")

    @sms_server.setter
    def sms_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_server", value)

    @property
    @pulumi.getter(name="sshCertificate")
    def ssh_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Select the certificate to be used by the FortiGate for authentication with an SSH client.
        """
        return pulumi.get(self, "ssh_certificate")

    @ssh_certificate.setter
    def ssh_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_certificate", value)

    @property
    @pulumi.getter(name="sshPublicKey1")
    def ssh_public_key1(self) -> Optional[pulumi.Input[str]]:
        """
        Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        """
        return pulumi.get(self, "ssh_public_key1")

    @ssh_public_key1.setter
    def ssh_public_key1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key1", value)

    @property
    @pulumi.getter(name="sshPublicKey2")
    def ssh_public_key2(self) -> Optional[pulumi.Input[str]]:
        """
        Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        """
        return pulumi.get(self, "ssh_public_key2")

    @ssh_public_key2.setter
    def ssh_public_key2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key2", value)

    @property
    @pulumi.getter(name="sshPublicKey3")
    def ssh_public_key3(self) -> Optional[pulumi.Input[str]]:
        """
        Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        """
        return pulumi.get(self, "ssh_public_key3")

    @ssh_public_key3.setter
    def ssh_public_key3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key3", value)

    @property
    @pulumi.getter
    def trusthost1(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost1")

    @trusthost1.setter
    def trusthost1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost1", value)

    @property
    @pulumi.getter
    def trusthost10(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost10")

    @trusthost10.setter
    def trusthost10(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost10", value)

    @property
    @pulumi.getter
    def trusthost2(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost2")

    @trusthost2.setter
    def trusthost2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost2", value)

    @property
    @pulumi.getter
    def trusthost3(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost3")

    @trusthost3.setter
    def trusthost3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost3", value)

    @property
    @pulumi.getter
    def trusthost4(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost4")

    @trusthost4.setter
    def trusthost4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost4", value)

    @property
    @pulumi.getter
    def trusthost5(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost5")

    @trusthost5.setter
    def trusthost5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost5", value)

    @property
    @pulumi.getter
    def trusthost6(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost6")

    @trusthost6.setter
    def trusthost6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost6", value)

    @property
    @pulumi.getter
    def trusthost7(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost7")

    @trusthost7.setter
    def trusthost7(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost7", value)

    @property
    @pulumi.getter
    def trusthost8(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost8")

    @trusthost8.setter
    def trusthost8(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost8", value)

    @property
    @pulumi.getter
    def trusthost9(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost9")

    @trusthost9.setter
    def trusthost9(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost9", value)

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable two-factor authentication.
        """
        return pulumi.get(self, "two_factor")

    @two_factor.setter
    def two_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor", value)

    @property
    @pulumi.getter(name="twoFactorAuthentication")
    def two_factor_authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
        """
        return pulumi.get(self, "two_factor_authentication")

    @two_factor_authentication.setter
    def two_factor_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_authentication", value)

    @property
    @pulumi.getter(name="twoFactorNotification")
    def two_factor_notification(self) -> Optional[pulumi.Input[str]]:
        """
        Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
        """
        return pulumi.get(self, "two_factor_notification")

    @two_factor_notification.setter
    def two_factor_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_notification", value)

    @property
    @pulumi.getter(name="vdomOverride")
    def vdom_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vdom_override")

    @vdom_override.setter
    def vdom_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom_override", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminVdomArgs']]]]:
        """
        Virtual domain(s) that the administrator can access. The structure of `vdom` block is documented below.
        """
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable wildcard RADIUS authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wildcard")

    @wildcard.setter
    def wildcard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard", value)


@pulumi.input_type
class _AdminState:
    def __init__(__self__, *,
                 accprofile: Optional[pulumi.Input[str]] = None,
                 accprofile_override: Optional[pulumi.Input[str]] = None,
                 allow_remove_admin_session: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_to: Optional[pulumi.Input[str]] = None,
                 force_password_change: Optional[pulumi.Input[str]] = None,
                 fortitoken: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 guest_auth: Optional[pulumi.Input[str]] = None,
                 guest_lang: Optional[pulumi.Input[str]] = None,
                 guest_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuestUsergroupArgs']]]] = None,
                 gui_dashboards: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardArgs']]]] = None,
                 gui_global_menu_favorites: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiGlobalMenuFavoriteArgs']]]] = None,
                 gui_new_feature_acknowledges: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiNewFeatureAcknowledgeArgs']]]] = None,
                 gui_vdom_menu_favorites: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiVdomMenuFavoriteArgs']]]] = None,
                 hidden: Optional[pulumi.Input[int]] = None,
                 history0: Optional[pulumi.Input[str]] = None,
                 history1: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost1: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost10: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost2: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost3: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost4: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost5: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost6: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost7: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost8: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost9: Optional[pulumi.Input[str]] = None,
                 login_times: Optional[pulumi.Input[Sequence[pulumi.Input['AdminLoginTimeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_expire: Optional[pulumi.Input[str]] = None,
                 peer_auth: Optional[pulumi.Input[str]] = None,
                 peer_group: Optional[pulumi.Input[str]] = None,
                 radius_vdom_override: Optional[pulumi.Input[str]] = None,
                 remote_auth: Optional[pulumi.Input[str]] = None,
                 remote_group: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_phone: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 ssh_certificate: Optional[pulumi.Input[str]] = None,
                 ssh_public_key1: Optional[pulumi.Input[str]] = None,
                 ssh_public_key2: Optional[pulumi.Input[str]] = None,
                 ssh_public_key3: Optional[pulumi.Input[str]] = None,
                 trusthost1: Optional[pulumi.Input[str]] = None,
                 trusthost10: Optional[pulumi.Input[str]] = None,
                 trusthost2: Optional[pulumi.Input[str]] = None,
                 trusthost3: Optional[pulumi.Input[str]] = None,
                 trusthost4: Optional[pulumi.Input[str]] = None,
                 trusthost5: Optional[pulumi.Input[str]] = None,
                 trusthost6: Optional[pulumi.Input[str]] = None,
                 trusthost7: Optional[pulumi.Input[str]] = None,
                 trusthost8: Optional[pulumi.Input[str]] = None,
                 trusthost9: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 vdom_override: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['AdminVdomArgs']]]] = None,
                 wildcard: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Admin resources.
        :param pulumi.Input[str] accprofile: Access profile for this administrator. Access profiles control administrator access to FortiGate features.
        :param pulumi.Input[str] accprofile_override: Enable to use the name of an access profile provided by the remote authentication server to control the FortiGate features that this administrator can access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_remove_admin_session: Enable/disable allow admin session to be removed by privileged admin users. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email_to: This administrator's email address.
        :param pulumi.Input[str] force_password_change: Enable/disable force password change on next login. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortitoken: This administrator's FortiToken serial number.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] guest_auth: Enable/disable guest authentication. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] guest_lang: Guest management portal language.
        :param pulumi.Input[Sequence[pulumi.Input['AdminGuestUsergroupArgs']]] guest_usergroups: Select guest user groups. The structure of `guest_usergroups` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardArgs']]] gui_dashboards: GUI dashboards. The structure of `gui_dashboard` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AdminGuiGlobalMenuFavoriteArgs']]] gui_global_menu_favorites: Favorite GUI menu IDs for the global VDOM. The structure of `gui_global_menu_favorites` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AdminGuiNewFeatureAcknowledgeArgs']]] gui_new_feature_acknowledges: Acknowledgement of new features. The structure of `gui_new_feature_acknowledge` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AdminGuiVdomMenuFavoriteArgs']]] gui_vdom_menu_favorites: Favorite GUI menu IDs for VDOMs. The structure of `gui_vdom_menu_favorites` block is documented below.
        :param pulumi.Input[int] hidden: Admin user hidden attribute.
        :param pulumi.Input[str] history0: history0
        :param pulumi.Input[str] history1: history1
        :param pulumi.Input[str] ip6_trusthost1: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost10: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost2: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost3: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost4: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost5: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost6: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost7: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost8: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost9: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[Sequence[pulumi.Input['AdminLoginTimeArgs']]] login_times: Record user login time. The structure of `login_time` block is documented below.
        :param pulumi.Input[str] name: User name.
        :param pulumi.Input[str] password: Admin user password. :warning: **Due security reason and API's design, you need to use Generic resource with the monitor API [/api/v2/monitor/system/change-password/select](https://fndn.fortinet.net/index.php?/fortiapi/1-fortios/2271/1/system) to update the password for existing admin user. `Create` and `Delete` operation will works using this resource.**
        :param pulumi.Input[str] password_expire: Password expire time.
        :param pulumi.Input[str] peer_auth: Set to enable peer certificate authentication (for HTTPS admin access). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] peer_group: Name of peer group defined under config user group which has PKI members. Used for peer certificate authentication (for HTTPS admin access).
        :param pulumi.Input[str] radius_vdom_override: Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_auth: Enable/disable authentication using a remote RADIUS, LDAP, or TACACS+ server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_group: User group name used for remote auth.
        :param pulumi.Input[str] schedule: Firewall schedule used to restrict when the administrator can log in. No schedule means no restrictions.
        :param pulumi.Input[str] sms_custom_server: Custom SMS server to send SMS messages to.
        :param pulumi.Input[str] sms_phone: Phone number on which the administrator receives SMS messages.
        :param pulumi.Input[str] sms_server: Send SMS messages using the FortiGuard SMS server or a custom server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] ssh_certificate: Select the certificate to be used by the FortiGate for authentication with an SSH client.
        :param pulumi.Input[str] ssh_public_key1: Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        :param pulumi.Input[str] ssh_public_key2: Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        :param pulumi.Input[str] ssh_public_key3: Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        :param pulumi.Input[str] trusthost1: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost10: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost2: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost3: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost4: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost5: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost6: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost7: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost8: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost9: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] two_factor: Enable/disable two-factor authentication.
        :param pulumi.Input[str] two_factor_authentication: Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
        :param pulumi.Input[str] two_factor_notification: Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
        :param pulumi.Input[str] vdom_override: Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input['AdminVdomArgs']]] vdoms: Virtual domain(s) that the administrator can access. The structure of `vdom` block is documented below.
        :param pulumi.Input[str] wildcard: Enable/disable wildcard RADIUS authentication. Valid values: `enable`, `disable`.
        """
        if accprofile is not None:
            pulumi.set(__self__, "accprofile", accprofile)
        if accprofile_override is not None:
            pulumi.set(__self__, "accprofile_override", accprofile_override)
        if allow_remove_admin_session is not None:
            pulumi.set(__self__, "allow_remove_admin_session", allow_remove_admin_session)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if email_to is not None:
            pulumi.set(__self__, "email_to", email_to)
        if force_password_change is not None:
            pulumi.set(__self__, "force_password_change", force_password_change)
        if fortitoken is not None:
            pulumi.set(__self__, "fortitoken", fortitoken)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if guest_auth is not None:
            pulumi.set(__self__, "guest_auth", guest_auth)
        if guest_lang is not None:
            pulumi.set(__self__, "guest_lang", guest_lang)
        if guest_usergroups is not None:
            pulumi.set(__self__, "guest_usergroups", guest_usergroups)
        if gui_dashboards is not None:
            pulumi.set(__self__, "gui_dashboards", gui_dashboards)
        if gui_global_menu_favorites is not None:
            pulumi.set(__self__, "gui_global_menu_favorites", gui_global_menu_favorites)
        if gui_new_feature_acknowledges is not None:
            pulumi.set(__self__, "gui_new_feature_acknowledges", gui_new_feature_acknowledges)
        if gui_vdom_menu_favorites is not None:
            pulumi.set(__self__, "gui_vdom_menu_favorites", gui_vdom_menu_favorites)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if history0 is not None:
            pulumi.set(__self__, "history0", history0)
        if history1 is not None:
            pulumi.set(__self__, "history1", history1)
        if ip6_trusthost1 is not None:
            pulumi.set(__self__, "ip6_trusthost1", ip6_trusthost1)
        if ip6_trusthost10 is not None:
            pulumi.set(__self__, "ip6_trusthost10", ip6_trusthost10)
        if ip6_trusthost2 is not None:
            pulumi.set(__self__, "ip6_trusthost2", ip6_trusthost2)
        if ip6_trusthost3 is not None:
            pulumi.set(__self__, "ip6_trusthost3", ip6_trusthost3)
        if ip6_trusthost4 is not None:
            pulumi.set(__self__, "ip6_trusthost4", ip6_trusthost4)
        if ip6_trusthost5 is not None:
            pulumi.set(__self__, "ip6_trusthost5", ip6_trusthost5)
        if ip6_trusthost6 is not None:
            pulumi.set(__self__, "ip6_trusthost6", ip6_trusthost6)
        if ip6_trusthost7 is not None:
            pulumi.set(__self__, "ip6_trusthost7", ip6_trusthost7)
        if ip6_trusthost8 is not None:
            pulumi.set(__self__, "ip6_trusthost8", ip6_trusthost8)
        if ip6_trusthost9 is not None:
            pulumi.set(__self__, "ip6_trusthost9", ip6_trusthost9)
        if login_times is not None:
            pulumi.set(__self__, "login_times", login_times)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_expire is not None:
            pulumi.set(__self__, "password_expire", password_expire)
        if peer_auth is not None:
            pulumi.set(__self__, "peer_auth", peer_auth)
        if peer_group is not None:
            pulumi.set(__self__, "peer_group", peer_group)
        if radius_vdom_override is not None:
            pulumi.set(__self__, "radius_vdom_override", radius_vdom_override)
        if remote_auth is not None:
            pulumi.set(__self__, "remote_auth", remote_auth)
        if remote_group is not None:
            pulumi.set(__self__, "remote_group", remote_group)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if sms_custom_server is not None:
            pulumi.set(__self__, "sms_custom_server", sms_custom_server)
        if sms_phone is not None:
            pulumi.set(__self__, "sms_phone", sms_phone)
        if sms_server is not None:
            pulumi.set(__self__, "sms_server", sms_server)
        if ssh_certificate is not None:
            pulumi.set(__self__, "ssh_certificate", ssh_certificate)
        if ssh_public_key1 is not None:
            pulumi.set(__self__, "ssh_public_key1", ssh_public_key1)
        if ssh_public_key2 is not None:
            pulumi.set(__self__, "ssh_public_key2", ssh_public_key2)
        if ssh_public_key3 is not None:
            pulumi.set(__self__, "ssh_public_key3", ssh_public_key3)
        if trusthost1 is not None:
            pulumi.set(__self__, "trusthost1", trusthost1)
        if trusthost10 is not None:
            pulumi.set(__self__, "trusthost10", trusthost10)
        if trusthost2 is not None:
            pulumi.set(__self__, "trusthost2", trusthost2)
        if trusthost3 is not None:
            pulumi.set(__self__, "trusthost3", trusthost3)
        if trusthost4 is not None:
            pulumi.set(__self__, "trusthost4", trusthost4)
        if trusthost5 is not None:
            pulumi.set(__self__, "trusthost5", trusthost5)
        if trusthost6 is not None:
            pulumi.set(__self__, "trusthost6", trusthost6)
        if trusthost7 is not None:
            pulumi.set(__self__, "trusthost7", trusthost7)
        if trusthost8 is not None:
            pulumi.set(__self__, "trusthost8", trusthost8)
        if trusthost9 is not None:
            pulumi.set(__self__, "trusthost9", trusthost9)
        if two_factor is not None:
            pulumi.set(__self__, "two_factor", two_factor)
        if two_factor_authentication is not None:
            pulumi.set(__self__, "two_factor_authentication", two_factor_authentication)
        if two_factor_notification is not None:
            pulumi.set(__self__, "two_factor_notification", two_factor_notification)
        if vdom_override is not None:
            pulumi.set(__self__, "vdom_override", vdom_override)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def accprofile(self) -> Optional[pulumi.Input[str]]:
        """
        Access profile for this administrator. Access profiles control administrator access to FortiGate features.
        """
        return pulumi.get(self, "accprofile")

    @accprofile.setter
    def accprofile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accprofile", value)

    @property
    @pulumi.getter(name="accprofileOverride")
    def accprofile_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to use the name of an access profile provided by the remote authentication server to control the FortiGate features that this administrator can access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "accprofile_override")

    @accprofile_override.setter
    def accprofile_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accprofile_override", value)

    @property
    @pulumi.getter(name="allowRemoveAdminSession")
    def allow_remove_admin_session(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow admin session to be removed by privileged admin users. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_remove_admin_session")

    @allow_remove_admin_session.setter
    def allow_remove_admin_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_remove_admin_session", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailTo")
    def email_to(self) -> Optional[pulumi.Input[str]]:
        """
        This administrator's email address.
        """
        return pulumi.get(self, "email_to")

    @email_to.setter
    def email_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_to", value)

    @property
    @pulumi.getter(name="forcePasswordChange")
    def force_password_change(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable force password change on next login. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "force_password_change")

    @force_password_change.setter
    def force_password_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_password_change", value)

    @property
    @pulumi.getter
    def fortitoken(self) -> Optional[pulumi.Input[str]]:
        """
        This administrator's FortiToken serial number.
        """
        return pulumi.get(self, "fortitoken")

    @fortitoken.setter
    def fortitoken(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortitoken", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="guestAuth")
    def guest_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable guest authentication. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "guest_auth")

    @guest_auth.setter
    def guest_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guest_auth", value)

    @property
    @pulumi.getter(name="guestLang")
    def guest_lang(self) -> Optional[pulumi.Input[str]]:
        """
        Guest management portal language.
        """
        return pulumi.get(self, "guest_lang")

    @guest_lang.setter
    def guest_lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guest_lang", value)

    @property
    @pulumi.getter(name="guestUsergroups")
    def guest_usergroups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuestUsergroupArgs']]]]:
        """
        Select guest user groups. The structure of `guest_usergroups` block is documented below.
        """
        return pulumi.get(self, "guest_usergroups")

    @guest_usergroups.setter
    def guest_usergroups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuestUsergroupArgs']]]]):
        pulumi.set(self, "guest_usergroups", value)

    @property
    @pulumi.getter(name="guiDashboards")
    def gui_dashboards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardArgs']]]]:
        """
        GUI dashboards. The structure of `gui_dashboard` block is documented below.
        """
        return pulumi.get(self, "gui_dashboards")

    @gui_dashboards.setter
    def gui_dashboards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardArgs']]]]):
        pulumi.set(self, "gui_dashboards", value)

    @property
    @pulumi.getter(name="guiGlobalMenuFavorites")
    def gui_global_menu_favorites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiGlobalMenuFavoriteArgs']]]]:
        """
        Favorite GUI menu IDs for the global VDOM. The structure of `gui_global_menu_favorites` block is documented below.
        """
        return pulumi.get(self, "gui_global_menu_favorites")

    @gui_global_menu_favorites.setter
    def gui_global_menu_favorites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiGlobalMenuFavoriteArgs']]]]):
        pulumi.set(self, "gui_global_menu_favorites", value)

    @property
    @pulumi.getter(name="guiNewFeatureAcknowledges")
    def gui_new_feature_acknowledges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiNewFeatureAcknowledgeArgs']]]]:
        """
        Acknowledgement of new features. The structure of `gui_new_feature_acknowledge` block is documented below.
        """
        return pulumi.get(self, "gui_new_feature_acknowledges")

    @gui_new_feature_acknowledges.setter
    def gui_new_feature_acknowledges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiNewFeatureAcknowledgeArgs']]]]):
        pulumi.set(self, "gui_new_feature_acknowledges", value)

    @property
    @pulumi.getter(name="guiVdomMenuFavorites")
    def gui_vdom_menu_favorites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiVdomMenuFavoriteArgs']]]]:
        """
        Favorite GUI menu IDs for VDOMs. The structure of `gui_vdom_menu_favorites` block is documented below.
        """
        return pulumi.get(self, "gui_vdom_menu_favorites")

    @gui_vdom_menu_favorites.setter
    def gui_vdom_menu_favorites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiVdomMenuFavoriteArgs']]]]):
        pulumi.set(self, "gui_vdom_menu_favorites", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[int]]:
        """
        Admin user hidden attribute.
        """
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def history0(self) -> Optional[pulumi.Input[str]]:
        """
        history0
        """
        return pulumi.get(self, "history0")

    @history0.setter
    def history0(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "history0", value)

    @property
    @pulumi.getter
    def history1(self) -> Optional[pulumi.Input[str]]:
        """
        history1
        """
        return pulumi.get(self, "history1")

    @history1.setter
    def history1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "history1", value)

    @property
    @pulumi.getter(name="ip6Trusthost1")
    def ip6_trusthost1(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost1")

    @ip6_trusthost1.setter
    def ip6_trusthost1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost1", value)

    @property
    @pulumi.getter(name="ip6Trusthost10")
    def ip6_trusthost10(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost10")

    @ip6_trusthost10.setter
    def ip6_trusthost10(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost10", value)

    @property
    @pulumi.getter(name="ip6Trusthost2")
    def ip6_trusthost2(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost2")

    @ip6_trusthost2.setter
    def ip6_trusthost2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost2", value)

    @property
    @pulumi.getter(name="ip6Trusthost3")
    def ip6_trusthost3(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost3")

    @ip6_trusthost3.setter
    def ip6_trusthost3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost3", value)

    @property
    @pulumi.getter(name="ip6Trusthost4")
    def ip6_trusthost4(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost4")

    @ip6_trusthost4.setter
    def ip6_trusthost4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost4", value)

    @property
    @pulumi.getter(name="ip6Trusthost5")
    def ip6_trusthost5(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost5")

    @ip6_trusthost5.setter
    def ip6_trusthost5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost5", value)

    @property
    @pulumi.getter(name="ip6Trusthost6")
    def ip6_trusthost6(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost6")

    @ip6_trusthost6.setter
    def ip6_trusthost6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost6", value)

    @property
    @pulumi.getter(name="ip6Trusthost7")
    def ip6_trusthost7(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost7")

    @ip6_trusthost7.setter
    def ip6_trusthost7(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost7", value)

    @property
    @pulumi.getter(name="ip6Trusthost8")
    def ip6_trusthost8(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost8")

    @ip6_trusthost8.setter
    def ip6_trusthost8(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost8", value)

    @property
    @pulumi.getter(name="ip6Trusthost9")
    def ip6_trusthost9(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost9")

    @ip6_trusthost9.setter
    def ip6_trusthost9(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_trusthost9", value)

    @property
    @pulumi.getter(name="loginTimes")
    def login_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminLoginTimeArgs']]]]:
        """
        Record user login time. The structure of `login_time` block is documented below.
        """
        return pulumi.get(self, "login_times")

    @login_times.setter
    def login_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminLoginTimeArgs']]]]):
        pulumi.set(self, "login_times", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Admin user password. :warning: **Due security reason and API's design, you need to use Generic resource with the monitor API [/api/v2/monitor/system/change-password/select](https://fndn.fortinet.net/index.php?/fortiapi/1-fortios/2271/1/system) to update the password for existing admin user. `Create` and `Delete` operation will works using this resource.**
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordExpire")
    def password_expire(self) -> Optional[pulumi.Input[str]]:
        """
        Password expire time.
        """
        return pulumi.get(self, "password_expire")

    @password_expire.setter
    def password_expire(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_expire", value)

    @property
    @pulumi.getter(name="peerAuth")
    def peer_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Set to enable peer certificate authentication (for HTTPS admin access). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "peer_auth")

    @peer_auth.setter
    def peer_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_auth", value)

    @property
    @pulumi.getter(name="peerGroup")
    def peer_group(self) -> Optional[pulumi.Input[str]]:
        """
        Name of peer group defined under config user group which has PKI members. Used for peer certificate authentication (for HTTPS admin access).
        """
        return pulumi.get(self, "peer_group")

    @peer_group.setter
    def peer_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_group", value)

    @property
    @pulumi.getter(name="radiusVdomOverride")
    def radius_vdom_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "radius_vdom_override")

    @radius_vdom_override.setter
    def radius_vdom_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_vdom_override", value)

    @property
    @pulumi.getter(name="remoteAuth")
    def remote_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable authentication using a remote RADIUS, LDAP, or TACACS+ server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remote_auth")

    @remote_auth.setter
    def remote_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_auth", value)

    @property
    @pulumi.getter(name="remoteGroup")
    def remote_group(self) -> Optional[pulumi.Input[str]]:
        """
        User group name used for remote auth.
        """
        return pulumi.get(self, "remote_group")

    @remote_group.setter
    def remote_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_group", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Firewall schedule used to restrict when the administrator can log in. No schedule means no restrictions.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="smsCustomServer")
    def sms_custom_server(self) -> Optional[pulumi.Input[str]]:
        """
        Custom SMS server to send SMS messages to.
        """
        return pulumi.get(self, "sms_custom_server")

    @sms_custom_server.setter
    def sms_custom_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_custom_server", value)

    @property
    @pulumi.getter(name="smsPhone")
    def sms_phone(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number on which the administrator receives SMS messages.
        """
        return pulumi.get(self, "sms_phone")

    @sms_phone.setter
    def sms_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_phone", value)

    @property
    @pulumi.getter(name="smsServer")
    def sms_server(self) -> Optional[pulumi.Input[str]]:
        """
        Send SMS messages using the FortiGuard SMS server or a custom server. Valid values: `fortiguard`, `custom`.
        """
        return pulumi.get(self, "sms_server")

    @sms_server.setter
    def sms_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_server", value)

    @property
    @pulumi.getter(name="sshCertificate")
    def ssh_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Select the certificate to be used by the FortiGate for authentication with an SSH client.
        """
        return pulumi.get(self, "ssh_certificate")

    @ssh_certificate.setter
    def ssh_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_certificate", value)

    @property
    @pulumi.getter(name="sshPublicKey1")
    def ssh_public_key1(self) -> Optional[pulumi.Input[str]]:
        """
        Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        """
        return pulumi.get(self, "ssh_public_key1")

    @ssh_public_key1.setter
    def ssh_public_key1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key1", value)

    @property
    @pulumi.getter(name="sshPublicKey2")
    def ssh_public_key2(self) -> Optional[pulumi.Input[str]]:
        """
        Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        """
        return pulumi.get(self, "ssh_public_key2")

    @ssh_public_key2.setter
    def ssh_public_key2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key2", value)

    @property
    @pulumi.getter(name="sshPublicKey3")
    def ssh_public_key3(self) -> Optional[pulumi.Input[str]]:
        """
        Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        """
        return pulumi.get(self, "ssh_public_key3")

    @ssh_public_key3.setter
    def ssh_public_key3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_public_key3", value)

    @property
    @pulumi.getter
    def trusthost1(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost1")

    @trusthost1.setter
    def trusthost1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost1", value)

    @property
    @pulumi.getter
    def trusthost10(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost10")

    @trusthost10.setter
    def trusthost10(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost10", value)

    @property
    @pulumi.getter
    def trusthost2(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost2")

    @trusthost2.setter
    def trusthost2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost2", value)

    @property
    @pulumi.getter
    def trusthost3(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost3")

    @trusthost3.setter
    def trusthost3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost3", value)

    @property
    @pulumi.getter
    def trusthost4(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost4")

    @trusthost4.setter
    def trusthost4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost4", value)

    @property
    @pulumi.getter
    def trusthost5(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost5")

    @trusthost5.setter
    def trusthost5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost5", value)

    @property
    @pulumi.getter
    def trusthost6(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost6")

    @trusthost6.setter
    def trusthost6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost6", value)

    @property
    @pulumi.getter
    def trusthost7(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost7")

    @trusthost7.setter
    def trusthost7(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost7", value)

    @property
    @pulumi.getter
    def trusthost8(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost8")

    @trusthost8.setter
    def trusthost8(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost8", value)

    @property
    @pulumi.getter
    def trusthost9(self) -> Optional[pulumi.Input[str]]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost9")

    @trusthost9.setter
    def trusthost9(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusthost9", value)

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable two-factor authentication.
        """
        return pulumi.get(self, "two_factor")

    @two_factor.setter
    def two_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor", value)

    @property
    @pulumi.getter(name="twoFactorAuthentication")
    def two_factor_authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
        """
        return pulumi.get(self, "two_factor_authentication")

    @two_factor_authentication.setter
    def two_factor_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_authentication", value)

    @property
    @pulumi.getter(name="twoFactorNotification")
    def two_factor_notification(self) -> Optional[pulumi.Input[str]]:
        """
        Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
        """
        return pulumi.get(self, "two_factor_notification")

    @two_factor_notification.setter
    def two_factor_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_notification", value)

    @property
    @pulumi.getter(name="vdomOverride")
    def vdom_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vdom_override")

    @vdom_override.setter
    def vdom_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom_override", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminVdomArgs']]]]:
        """
        Virtual domain(s) that the administrator can access. The structure of `vdom` block is documented below.
        """
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable wildcard RADIUS authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wildcard")

    @wildcard.setter
    def wildcard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard", value)


class Admin(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accprofile: Optional[pulumi.Input[str]] = None,
                 accprofile_override: Optional[pulumi.Input[str]] = None,
                 allow_remove_admin_session: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_to: Optional[pulumi.Input[str]] = None,
                 force_password_change: Optional[pulumi.Input[str]] = None,
                 fortitoken: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 guest_auth: Optional[pulumi.Input[str]] = None,
                 guest_lang: Optional[pulumi.Input[str]] = None,
                 guest_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuestUsergroupArgs']]]]] = None,
                 gui_dashboards: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiDashboardArgs']]]]] = None,
                 gui_global_menu_favorites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiGlobalMenuFavoriteArgs']]]]] = None,
                 gui_new_feature_acknowledges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiNewFeatureAcknowledgeArgs']]]]] = None,
                 gui_vdom_menu_favorites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiVdomMenuFavoriteArgs']]]]] = None,
                 hidden: Optional[pulumi.Input[int]] = None,
                 history0: Optional[pulumi.Input[str]] = None,
                 history1: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost1: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost10: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost2: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost3: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost4: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost5: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost6: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost7: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost8: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost9: Optional[pulumi.Input[str]] = None,
                 login_times: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminLoginTimeArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_expire: Optional[pulumi.Input[str]] = None,
                 peer_auth: Optional[pulumi.Input[str]] = None,
                 peer_group: Optional[pulumi.Input[str]] = None,
                 radius_vdom_override: Optional[pulumi.Input[str]] = None,
                 remote_auth: Optional[pulumi.Input[str]] = None,
                 remote_group: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_phone: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 ssh_certificate: Optional[pulumi.Input[str]] = None,
                 ssh_public_key1: Optional[pulumi.Input[str]] = None,
                 ssh_public_key2: Optional[pulumi.Input[str]] = None,
                 ssh_public_key3: Optional[pulumi.Input[str]] = None,
                 trusthost1: Optional[pulumi.Input[str]] = None,
                 trusthost10: Optional[pulumi.Input[str]] = None,
                 trusthost2: Optional[pulumi.Input[str]] = None,
                 trusthost3: Optional[pulumi.Input[str]] = None,
                 trusthost4: Optional[pulumi.Input[str]] = None,
                 trusthost5: Optional[pulumi.Input[str]] = None,
                 trusthost6: Optional[pulumi.Input[str]] = None,
                 trusthost7: Optional[pulumi.Input[str]] = None,
                 trusthost8: Optional[pulumi.Input[str]] = None,
                 trusthost9: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 vdom_override: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminVdomArgs']]]]] = None,
                 wildcard: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure admin users.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Admin("trname",
            accprofile="super_admin",
            accprofile_override="disable",
            allow_remove_admin_session="enable",
            force_password_change="disable",
            guest_auth="disable",
            hidden=0,
            password="fdafdace",
            password_expire="0000-00-00 00:00:00",
            peer_auth="disable",
            radius_vdom_override="disable",
            remote_auth="disable",
            two_factor="disable",
            vdoms=[fortios.system.AdminVdomArgs(
                name="root",
            )],
            wildcard="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Admin can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/admin:Admin labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/admin:Admin labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accprofile: Access profile for this administrator. Access profiles control administrator access to FortiGate features.
        :param pulumi.Input[str] accprofile_override: Enable to use the name of an access profile provided by the remote authentication server to control the FortiGate features that this administrator can access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_remove_admin_session: Enable/disable allow admin session to be removed by privileged admin users. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email_to: This administrator's email address.
        :param pulumi.Input[str] force_password_change: Enable/disable force password change on next login. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortitoken: This administrator's FortiToken serial number.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] guest_auth: Enable/disable guest authentication. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] guest_lang: Guest management portal language.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuestUsergroupArgs']]]] guest_usergroups: Select guest user groups. The structure of `guest_usergroups` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiDashboardArgs']]]] gui_dashboards: GUI dashboards. The structure of `gui_dashboard` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiGlobalMenuFavoriteArgs']]]] gui_global_menu_favorites: Favorite GUI menu IDs for the global VDOM. The structure of `gui_global_menu_favorites` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiNewFeatureAcknowledgeArgs']]]] gui_new_feature_acknowledges: Acknowledgement of new features. The structure of `gui_new_feature_acknowledge` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiVdomMenuFavoriteArgs']]]] gui_vdom_menu_favorites: Favorite GUI menu IDs for VDOMs. The structure of `gui_vdom_menu_favorites` block is documented below.
        :param pulumi.Input[int] hidden: Admin user hidden attribute.
        :param pulumi.Input[str] history0: history0
        :param pulumi.Input[str] history1: history1
        :param pulumi.Input[str] ip6_trusthost1: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost10: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost2: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost3: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost4: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost5: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost6: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost7: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost8: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost9: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminLoginTimeArgs']]]] login_times: Record user login time. The structure of `login_time` block is documented below.
        :param pulumi.Input[str] name: User name.
        :param pulumi.Input[str] password: Admin user password. :warning: **Due security reason and API's design, you need to use Generic resource with the monitor API [/api/v2/monitor/system/change-password/select](https://fndn.fortinet.net/index.php?/fortiapi/1-fortios/2271/1/system) to update the password for existing admin user. `Create` and `Delete` operation will works using this resource.**
        :param pulumi.Input[str] password_expire: Password expire time.
        :param pulumi.Input[str] peer_auth: Set to enable peer certificate authentication (for HTTPS admin access). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] peer_group: Name of peer group defined under config user group which has PKI members. Used for peer certificate authentication (for HTTPS admin access).
        :param pulumi.Input[str] radius_vdom_override: Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_auth: Enable/disable authentication using a remote RADIUS, LDAP, or TACACS+ server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_group: User group name used for remote auth.
        :param pulumi.Input[str] schedule: Firewall schedule used to restrict when the administrator can log in. No schedule means no restrictions.
        :param pulumi.Input[str] sms_custom_server: Custom SMS server to send SMS messages to.
        :param pulumi.Input[str] sms_phone: Phone number on which the administrator receives SMS messages.
        :param pulumi.Input[str] sms_server: Send SMS messages using the FortiGuard SMS server or a custom server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] ssh_certificate: Select the certificate to be used by the FortiGate for authentication with an SSH client.
        :param pulumi.Input[str] ssh_public_key1: Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        :param pulumi.Input[str] ssh_public_key2: Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        :param pulumi.Input[str] ssh_public_key3: Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        :param pulumi.Input[str] trusthost1: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost10: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost2: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost3: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost4: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost5: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost6: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost7: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost8: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost9: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] two_factor: Enable/disable two-factor authentication.
        :param pulumi.Input[str] two_factor_authentication: Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
        :param pulumi.Input[str] two_factor_notification: Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
        :param pulumi.Input[str] vdom_override: Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminVdomArgs']]]] vdoms: Virtual domain(s) that the administrator can access. The structure of `vdom` block is documented below.
        :param pulumi.Input[str] wildcard: Enable/disable wildcard RADIUS authentication. Valid values: `enable`, `disable`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AdminArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure admin users.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Admin("trname",
            accprofile="super_admin",
            accprofile_override="disable",
            allow_remove_admin_session="enable",
            force_password_change="disable",
            guest_auth="disable",
            hidden=0,
            password="fdafdace",
            password_expire="0000-00-00 00:00:00",
            peer_auth="disable",
            radius_vdom_override="disable",
            remote_auth="disable",
            two_factor="disable",
            vdoms=[fortios.system.AdminVdomArgs(
                name="root",
            )],
            wildcard="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Admin can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/admin:Admin labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/admin:Admin labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param AdminArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AdminArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accprofile: Optional[pulumi.Input[str]] = None,
                 accprofile_override: Optional[pulumi.Input[str]] = None,
                 allow_remove_admin_session: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_to: Optional[pulumi.Input[str]] = None,
                 force_password_change: Optional[pulumi.Input[str]] = None,
                 fortitoken: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 guest_auth: Optional[pulumi.Input[str]] = None,
                 guest_lang: Optional[pulumi.Input[str]] = None,
                 guest_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuestUsergroupArgs']]]]] = None,
                 gui_dashboards: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiDashboardArgs']]]]] = None,
                 gui_global_menu_favorites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiGlobalMenuFavoriteArgs']]]]] = None,
                 gui_new_feature_acknowledges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiNewFeatureAcknowledgeArgs']]]]] = None,
                 gui_vdom_menu_favorites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiVdomMenuFavoriteArgs']]]]] = None,
                 hidden: Optional[pulumi.Input[int]] = None,
                 history0: Optional[pulumi.Input[str]] = None,
                 history1: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost1: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost10: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost2: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost3: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost4: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost5: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost6: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost7: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost8: Optional[pulumi.Input[str]] = None,
                 ip6_trusthost9: Optional[pulumi.Input[str]] = None,
                 login_times: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminLoginTimeArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_expire: Optional[pulumi.Input[str]] = None,
                 peer_auth: Optional[pulumi.Input[str]] = None,
                 peer_group: Optional[pulumi.Input[str]] = None,
                 radius_vdom_override: Optional[pulumi.Input[str]] = None,
                 remote_auth: Optional[pulumi.Input[str]] = None,
                 remote_group: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_phone: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 ssh_certificate: Optional[pulumi.Input[str]] = None,
                 ssh_public_key1: Optional[pulumi.Input[str]] = None,
                 ssh_public_key2: Optional[pulumi.Input[str]] = None,
                 ssh_public_key3: Optional[pulumi.Input[str]] = None,
                 trusthost1: Optional[pulumi.Input[str]] = None,
                 trusthost10: Optional[pulumi.Input[str]] = None,
                 trusthost2: Optional[pulumi.Input[str]] = None,
                 trusthost3: Optional[pulumi.Input[str]] = None,
                 trusthost4: Optional[pulumi.Input[str]] = None,
                 trusthost5: Optional[pulumi.Input[str]] = None,
                 trusthost6: Optional[pulumi.Input[str]] = None,
                 trusthost7: Optional[pulumi.Input[str]] = None,
                 trusthost8: Optional[pulumi.Input[str]] = None,
                 trusthost9: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 vdom_override: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminVdomArgs']]]]] = None,
                 wildcard: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AdminArgs.__new__(AdminArgs)

            __props__.__dict__["accprofile"] = accprofile
            __props__.__dict__["accprofile_override"] = accprofile_override
            __props__.__dict__["allow_remove_admin_session"] = allow_remove_admin_session
            __props__.__dict__["comments"] = comments
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["email_to"] = email_to
            __props__.__dict__["force_password_change"] = force_password_change
            __props__.__dict__["fortitoken"] = fortitoken
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["guest_auth"] = guest_auth
            __props__.__dict__["guest_lang"] = guest_lang
            __props__.__dict__["guest_usergroups"] = guest_usergroups
            __props__.__dict__["gui_dashboards"] = gui_dashboards
            __props__.__dict__["gui_global_menu_favorites"] = gui_global_menu_favorites
            __props__.__dict__["gui_new_feature_acknowledges"] = gui_new_feature_acknowledges
            __props__.__dict__["gui_vdom_menu_favorites"] = gui_vdom_menu_favorites
            __props__.__dict__["hidden"] = hidden
            __props__.__dict__["history0"] = None if history0 is None else pulumi.Output.secret(history0)
            __props__.__dict__["history1"] = None if history1 is None else pulumi.Output.secret(history1)
            __props__.__dict__["ip6_trusthost1"] = ip6_trusthost1
            __props__.__dict__["ip6_trusthost10"] = ip6_trusthost10
            __props__.__dict__["ip6_trusthost2"] = ip6_trusthost2
            __props__.__dict__["ip6_trusthost3"] = ip6_trusthost3
            __props__.__dict__["ip6_trusthost4"] = ip6_trusthost4
            __props__.__dict__["ip6_trusthost5"] = ip6_trusthost5
            __props__.__dict__["ip6_trusthost6"] = ip6_trusthost6
            __props__.__dict__["ip6_trusthost7"] = ip6_trusthost7
            __props__.__dict__["ip6_trusthost8"] = ip6_trusthost8
            __props__.__dict__["ip6_trusthost9"] = ip6_trusthost9
            __props__.__dict__["login_times"] = login_times
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["password_expire"] = password_expire
            __props__.__dict__["peer_auth"] = peer_auth
            __props__.__dict__["peer_group"] = peer_group
            __props__.__dict__["radius_vdom_override"] = radius_vdom_override
            __props__.__dict__["remote_auth"] = remote_auth
            __props__.__dict__["remote_group"] = remote_group
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["sms_custom_server"] = sms_custom_server
            __props__.__dict__["sms_phone"] = sms_phone
            __props__.__dict__["sms_server"] = sms_server
            __props__.__dict__["ssh_certificate"] = ssh_certificate
            __props__.__dict__["ssh_public_key1"] = None if ssh_public_key1 is None else pulumi.Output.secret(ssh_public_key1)
            __props__.__dict__["ssh_public_key2"] = None if ssh_public_key2 is None else pulumi.Output.secret(ssh_public_key2)
            __props__.__dict__["ssh_public_key3"] = None if ssh_public_key3 is None else pulumi.Output.secret(ssh_public_key3)
            __props__.__dict__["trusthost1"] = trusthost1
            __props__.__dict__["trusthost10"] = trusthost10
            __props__.__dict__["trusthost2"] = trusthost2
            __props__.__dict__["trusthost3"] = trusthost3
            __props__.__dict__["trusthost4"] = trusthost4
            __props__.__dict__["trusthost5"] = trusthost5
            __props__.__dict__["trusthost6"] = trusthost6
            __props__.__dict__["trusthost7"] = trusthost7
            __props__.__dict__["trusthost8"] = trusthost8
            __props__.__dict__["trusthost9"] = trusthost9
            __props__.__dict__["two_factor"] = two_factor
            __props__.__dict__["two_factor_authentication"] = two_factor_authentication
            __props__.__dict__["two_factor_notification"] = two_factor_notification
            __props__.__dict__["vdom_override"] = vdom_override
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vdoms"] = vdoms
            __props__.__dict__["wildcard"] = wildcard
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["history0", "history1", "password", "sshPublicKey1", "sshPublicKey2", "sshPublicKey3"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Admin, __self__).__init__(
            'fortios:system/admin:Admin',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accprofile: Optional[pulumi.Input[str]] = None,
            accprofile_override: Optional[pulumi.Input[str]] = None,
            allow_remove_admin_session: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            email_to: Optional[pulumi.Input[str]] = None,
            force_password_change: Optional[pulumi.Input[str]] = None,
            fortitoken: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            guest_auth: Optional[pulumi.Input[str]] = None,
            guest_lang: Optional[pulumi.Input[str]] = None,
            guest_usergroups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuestUsergroupArgs']]]]] = None,
            gui_dashboards: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiDashboardArgs']]]]] = None,
            gui_global_menu_favorites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiGlobalMenuFavoriteArgs']]]]] = None,
            gui_new_feature_acknowledges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiNewFeatureAcknowledgeArgs']]]]] = None,
            gui_vdom_menu_favorites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiVdomMenuFavoriteArgs']]]]] = None,
            hidden: Optional[pulumi.Input[int]] = None,
            history0: Optional[pulumi.Input[str]] = None,
            history1: Optional[pulumi.Input[str]] = None,
            ip6_trusthost1: Optional[pulumi.Input[str]] = None,
            ip6_trusthost10: Optional[pulumi.Input[str]] = None,
            ip6_trusthost2: Optional[pulumi.Input[str]] = None,
            ip6_trusthost3: Optional[pulumi.Input[str]] = None,
            ip6_trusthost4: Optional[pulumi.Input[str]] = None,
            ip6_trusthost5: Optional[pulumi.Input[str]] = None,
            ip6_trusthost6: Optional[pulumi.Input[str]] = None,
            ip6_trusthost7: Optional[pulumi.Input[str]] = None,
            ip6_trusthost8: Optional[pulumi.Input[str]] = None,
            ip6_trusthost9: Optional[pulumi.Input[str]] = None,
            login_times: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminLoginTimeArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            password_expire: Optional[pulumi.Input[str]] = None,
            peer_auth: Optional[pulumi.Input[str]] = None,
            peer_group: Optional[pulumi.Input[str]] = None,
            radius_vdom_override: Optional[pulumi.Input[str]] = None,
            remote_auth: Optional[pulumi.Input[str]] = None,
            remote_group: Optional[pulumi.Input[str]] = None,
            schedule: Optional[pulumi.Input[str]] = None,
            sms_custom_server: Optional[pulumi.Input[str]] = None,
            sms_phone: Optional[pulumi.Input[str]] = None,
            sms_server: Optional[pulumi.Input[str]] = None,
            ssh_certificate: Optional[pulumi.Input[str]] = None,
            ssh_public_key1: Optional[pulumi.Input[str]] = None,
            ssh_public_key2: Optional[pulumi.Input[str]] = None,
            ssh_public_key3: Optional[pulumi.Input[str]] = None,
            trusthost1: Optional[pulumi.Input[str]] = None,
            trusthost10: Optional[pulumi.Input[str]] = None,
            trusthost2: Optional[pulumi.Input[str]] = None,
            trusthost3: Optional[pulumi.Input[str]] = None,
            trusthost4: Optional[pulumi.Input[str]] = None,
            trusthost5: Optional[pulumi.Input[str]] = None,
            trusthost6: Optional[pulumi.Input[str]] = None,
            trusthost7: Optional[pulumi.Input[str]] = None,
            trusthost8: Optional[pulumi.Input[str]] = None,
            trusthost9: Optional[pulumi.Input[str]] = None,
            two_factor: Optional[pulumi.Input[str]] = None,
            two_factor_authentication: Optional[pulumi.Input[str]] = None,
            two_factor_notification: Optional[pulumi.Input[str]] = None,
            vdom_override: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminVdomArgs']]]]] = None,
            wildcard: Optional[pulumi.Input[str]] = None) -> 'Admin':
        """
        Get an existing Admin resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accprofile: Access profile for this administrator. Access profiles control administrator access to FortiGate features.
        :param pulumi.Input[str] accprofile_override: Enable to use the name of an access profile provided by the remote authentication server to control the FortiGate features that this administrator can access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_remove_admin_session: Enable/disable allow admin session to be removed by privileged admin users. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email_to: This administrator's email address.
        :param pulumi.Input[str] force_password_change: Enable/disable force password change on next login. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortitoken: This administrator's FortiToken serial number.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] guest_auth: Enable/disable guest authentication. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] guest_lang: Guest management portal language.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuestUsergroupArgs']]]] guest_usergroups: Select guest user groups. The structure of `guest_usergroups` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiDashboardArgs']]]] gui_dashboards: GUI dashboards. The structure of `gui_dashboard` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiGlobalMenuFavoriteArgs']]]] gui_global_menu_favorites: Favorite GUI menu IDs for the global VDOM. The structure of `gui_global_menu_favorites` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiNewFeatureAcknowledgeArgs']]]] gui_new_feature_acknowledges: Acknowledgement of new features. The structure of `gui_new_feature_acknowledge` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminGuiVdomMenuFavoriteArgs']]]] gui_vdom_menu_favorites: Favorite GUI menu IDs for VDOMs. The structure of `gui_vdom_menu_favorites` block is documented below.
        :param pulumi.Input[int] hidden: Admin user hidden attribute.
        :param pulumi.Input[str] history0: history0
        :param pulumi.Input[str] history1: history1
        :param pulumi.Input[str] ip6_trusthost1: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost10: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost2: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost3: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost4: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost5: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost6: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost7: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost8: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[str] ip6_trusthost9: Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminLoginTimeArgs']]]] login_times: Record user login time. The structure of `login_time` block is documented below.
        :param pulumi.Input[str] name: User name.
        :param pulumi.Input[str] password: Admin user password. :warning: **Due security reason and API's design, you need to use Generic resource with the monitor API [/api/v2/monitor/system/change-password/select](https://fndn.fortinet.net/index.php?/fortiapi/1-fortios/2271/1/system) to update the password for existing admin user. `Create` and `Delete` operation will works using this resource.**
        :param pulumi.Input[str] password_expire: Password expire time.
        :param pulumi.Input[str] peer_auth: Set to enable peer certificate authentication (for HTTPS admin access). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] peer_group: Name of peer group defined under config user group which has PKI members. Used for peer certificate authentication (for HTTPS admin access).
        :param pulumi.Input[str] radius_vdom_override: Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_auth: Enable/disable authentication using a remote RADIUS, LDAP, or TACACS+ server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_group: User group name used for remote auth.
        :param pulumi.Input[str] schedule: Firewall schedule used to restrict when the administrator can log in. No schedule means no restrictions.
        :param pulumi.Input[str] sms_custom_server: Custom SMS server to send SMS messages to.
        :param pulumi.Input[str] sms_phone: Phone number on which the administrator receives SMS messages.
        :param pulumi.Input[str] sms_server: Send SMS messages using the FortiGuard SMS server or a custom server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] ssh_certificate: Select the certificate to be used by the FortiGate for authentication with an SSH client.
        :param pulumi.Input[str] ssh_public_key1: Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        :param pulumi.Input[str] ssh_public_key2: Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        :param pulumi.Input[str] ssh_public_key3: Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        :param pulumi.Input[str] trusthost1: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost10: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost2: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost3: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost4: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost5: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost6: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost7: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost8: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] trusthost9: Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        :param pulumi.Input[str] two_factor: Enable/disable two-factor authentication.
        :param pulumi.Input[str] two_factor_authentication: Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
        :param pulumi.Input[str] two_factor_notification: Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
        :param pulumi.Input[str] vdom_override: Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminVdomArgs']]]] vdoms: Virtual domain(s) that the administrator can access. The structure of `vdom` block is documented below.
        :param pulumi.Input[str] wildcard: Enable/disable wildcard RADIUS authentication. Valid values: `enable`, `disable`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AdminState.__new__(_AdminState)

        __props__.__dict__["accprofile"] = accprofile
        __props__.__dict__["accprofile_override"] = accprofile_override
        __props__.__dict__["allow_remove_admin_session"] = allow_remove_admin_session
        __props__.__dict__["comments"] = comments
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["email_to"] = email_to
        __props__.__dict__["force_password_change"] = force_password_change
        __props__.__dict__["fortitoken"] = fortitoken
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["guest_auth"] = guest_auth
        __props__.__dict__["guest_lang"] = guest_lang
        __props__.__dict__["guest_usergroups"] = guest_usergroups
        __props__.__dict__["gui_dashboards"] = gui_dashboards
        __props__.__dict__["gui_global_menu_favorites"] = gui_global_menu_favorites
        __props__.__dict__["gui_new_feature_acknowledges"] = gui_new_feature_acknowledges
        __props__.__dict__["gui_vdom_menu_favorites"] = gui_vdom_menu_favorites
        __props__.__dict__["hidden"] = hidden
        __props__.__dict__["history0"] = history0
        __props__.__dict__["history1"] = history1
        __props__.__dict__["ip6_trusthost1"] = ip6_trusthost1
        __props__.__dict__["ip6_trusthost10"] = ip6_trusthost10
        __props__.__dict__["ip6_trusthost2"] = ip6_trusthost2
        __props__.__dict__["ip6_trusthost3"] = ip6_trusthost3
        __props__.__dict__["ip6_trusthost4"] = ip6_trusthost4
        __props__.__dict__["ip6_trusthost5"] = ip6_trusthost5
        __props__.__dict__["ip6_trusthost6"] = ip6_trusthost6
        __props__.__dict__["ip6_trusthost7"] = ip6_trusthost7
        __props__.__dict__["ip6_trusthost8"] = ip6_trusthost8
        __props__.__dict__["ip6_trusthost9"] = ip6_trusthost9
        __props__.__dict__["login_times"] = login_times
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["password_expire"] = password_expire
        __props__.__dict__["peer_auth"] = peer_auth
        __props__.__dict__["peer_group"] = peer_group
        __props__.__dict__["radius_vdom_override"] = radius_vdom_override
        __props__.__dict__["remote_auth"] = remote_auth
        __props__.__dict__["remote_group"] = remote_group
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["sms_custom_server"] = sms_custom_server
        __props__.__dict__["sms_phone"] = sms_phone
        __props__.__dict__["sms_server"] = sms_server
        __props__.__dict__["ssh_certificate"] = ssh_certificate
        __props__.__dict__["ssh_public_key1"] = ssh_public_key1
        __props__.__dict__["ssh_public_key2"] = ssh_public_key2
        __props__.__dict__["ssh_public_key3"] = ssh_public_key3
        __props__.__dict__["trusthost1"] = trusthost1
        __props__.__dict__["trusthost10"] = trusthost10
        __props__.__dict__["trusthost2"] = trusthost2
        __props__.__dict__["trusthost3"] = trusthost3
        __props__.__dict__["trusthost4"] = trusthost4
        __props__.__dict__["trusthost5"] = trusthost5
        __props__.__dict__["trusthost6"] = trusthost6
        __props__.__dict__["trusthost7"] = trusthost7
        __props__.__dict__["trusthost8"] = trusthost8
        __props__.__dict__["trusthost9"] = trusthost9
        __props__.__dict__["two_factor"] = two_factor
        __props__.__dict__["two_factor_authentication"] = two_factor_authentication
        __props__.__dict__["two_factor_notification"] = two_factor_notification
        __props__.__dict__["vdom_override"] = vdom_override
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vdoms"] = vdoms
        __props__.__dict__["wildcard"] = wildcard
        return Admin(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def accprofile(self) -> pulumi.Output[str]:
        """
        Access profile for this administrator. Access profiles control administrator access to FortiGate features.
        """
        return pulumi.get(self, "accprofile")

    @property
    @pulumi.getter(name="accprofileOverride")
    def accprofile_override(self) -> pulumi.Output[str]:
        """
        Enable to use the name of an access profile provided by the remote authentication server to control the FortiGate features that this administrator can access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "accprofile_override")

    @property
    @pulumi.getter(name="allowRemoveAdminSession")
    def allow_remove_admin_session(self) -> pulumi.Output[str]:
        """
        Enable/disable allow admin session to be removed by privileged admin users. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_remove_admin_session")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emailTo")
    def email_to(self) -> pulumi.Output[str]:
        """
        This administrator's email address.
        """
        return pulumi.get(self, "email_to")

    @property
    @pulumi.getter(name="forcePasswordChange")
    def force_password_change(self) -> pulumi.Output[str]:
        """
        Enable/disable force password change on next login. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "force_password_change")

    @property
    @pulumi.getter
    def fortitoken(self) -> pulumi.Output[str]:
        """
        This administrator's FortiToken serial number.
        """
        return pulumi.get(self, "fortitoken")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="guestAuth")
    def guest_auth(self) -> pulumi.Output[str]:
        """
        Enable/disable guest authentication. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "guest_auth")

    @property
    @pulumi.getter(name="guestLang")
    def guest_lang(self) -> pulumi.Output[str]:
        """
        Guest management portal language.
        """
        return pulumi.get(self, "guest_lang")

    @property
    @pulumi.getter(name="guestUsergroups")
    def guest_usergroups(self) -> pulumi.Output[Optional[Sequence['outputs.AdminGuestUsergroup']]]:
        """
        Select guest user groups. The structure of `guest_usergroups` block is documented below.
        """
        return pulumi.get(self, "guest_usergroups")

    @property
    @pulumi.getter(name="guiDashboards")
    def gui_dashboards(self) -> pulumi.Output[Optional[Sequence['outputs.AdminGuiDashboard']]]:
        """
        GUI dashboards. The structure of `gui_dashboard` block is documented below.
        """
        return pulumi.get(self, "gui_dashboards")

    @property
    @pulumi.getter(name="guiGlobalMenuFavorites")
    def gui_global_menu_favorites(self) -> pulumi.Output[Optional[Sequence['outputs.AdminGuiGlobalMenuFavorite']]]:
        """
        Favorite GUI menu IDs for the global VDOM. The structure of `gui_global_menu_favorites` block is documented below.
        """
        return pulumi.get(self, "gui_global_menu_favorites")

    @property
    @pulumi.getter(name="guiNewFeatureAcknowledges")
    def gui_new_feature_acknowledges(self) -> pulumi.Output[Optional[Sequence['outputs.AdminGuiNewFeatureAcknowledge']]]:
        """
        Acknowledgement of new features. The structure of `gui_new_feature_acknowledge` block is documented below.
        """
        return pulumi.get(self, "gui_new_feature_acknowledges")

    @property
    @pulumi.getter(name="guiVdomMenuFavorites")
    def gui_vdom_menu_favorites(self) -> pulumi.Output[Optional[Sequence['outputs.AdminGuiVdomMenuFavorite']]]:
        """
        Favorite GUI menu IDs for VDOMs. The structure of `gui_vdom_menu_favorites` block is documented below.
        """
        return pulumi.get(self, "gui_vdom_menu_favorites")

    @property
    @pulumi.getter
    def hidden(self) -> pulumi.Output[int]:
        """
        Admin user hidden attribute.
        """
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def history0(self) -> pulumi.Output[Optional[str]]:
        """
        history0
        """
        return pulumi.get(self, "history0")

    @property
    @pulumi.getter
    def history1(self) -> pulumi.Output[Optional[str]]:
        """
        history1
        """
        return pulumi.get(self, "history1")

    @property
    @pulumi.getter(name="ip6Trusthost1")
    def ip6_trusthost1(self) -> pulumi.Output[str]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost1")

    @property
    @pulumi.getter(name="ip6Trusthost10")
    def ip6_trusthost10(self) -> pulumi.Output[str]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost10")

    @property
    @pulumi.getter(name="ip6Trusthost2")
    def ip6_trusthost2(self) -> pulumi.Output[str]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost2")

    @property
    @pulumi.getter(name="ip6Trusthost3")
    def ip6_trusthost3(self) -> pulumi.Output[str]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost3")

    @property
    @pulumi.getter(name="ip6Trusthost4")
    def ip6_trusthost4(self) -> pulumi.Output[str]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost4")

    @property
    @pulumi.getter(name="ip6Trusthost5")
    def ip6_trusthost5(self) -> pulumi.Output[str]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost5")

    @property
    @pulumi.getter(name="ip6Trusthost6")
    def ip6_trusthost6(self) -> pulumi.Output[str]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost6")

    @property
    @pulumi.getter(name="ip6Trusthost7")
    def ip6_trusthost7(self) -> pulumi.Output[str]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost7")

    @property
    @pulumi.getter(name="ip6Trusthost8")
    def ip6_trusthost8(self) -> pulumi.Output[str]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost8")

    @property
    @pulumi.getter(name="ip6Trusthost9")
    def ip6_trusthost9(self) -> pulumi.Output[str]:
        """
        Any IPv6 address from which the administrator can connect to the FortiGate unit. Default allows access from any IPv6 address.
        """
        return pulumi.get(self, "ip6_trusthost9")

    @property
    @pulumi.getter(name="loginTimes")
    def login_times(self) -> pulumi.Output[Optional[Sequence['outputs.AdminLoginTime']]]:
        """
        Record user login time. The structure of `login_time` block is documented below.
        """
        return pulumi.get(self, "login_times")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        User name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Admin user password. :warning: **Due security reason and API's design, you need to use Generic resource with the monitor API [/api/v2/monitor/system/change-password/select](https://fndn.fortinet.net/index.php?/fortiapi/1-fortios/2271/1/system) to update the password for existing admin user. `Create` and `Delete` operation will works using this resource.**
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordExpire")
    def password_expire(self) -> pulumi.Output[str]:
        """
        Password expire time.
        """
        return pulumi.get(self, "password_expire")

    @property
    @pulumi.getter(name="peerAuth")
    def peer_auth(self) -> pulumi.Output[str]:
        """
        Set to enable peer certificate authentication (for HTTPS admin access). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "peer_auth")

    @property
    @pulumi.getter(name="peerGroup")
    def peer_group(self) -> pulumi.Output[str]:
        """
        Name of peer group defined under config user group which has PKI members. Used for peer certificate authentication (for HTTPS admin access).
        """
        return pulumi.get(self, "peer_group")

    @property
    @pulumi.getter(name="radiusVdomOverride")
    def radius_vdom_override(self) -> pulumi.Output[str]:
        """
        Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "radius_vdom_override")

    @property
    @pulumi.getter(name="remoteAuth")
    def remote_auth(self) -> pulumi.Output[str]:
        """
        Enable/disable authentication using a remote RADIUS, LDAP, or TACACS+ server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remote_auth")

    @property
    @pulumi.getter(name="remoteGroup")
    def remote_group(self) -> pulumi.Output[str]:
        """
        User group name used for remote auth.
        """
        return pulumi.get(self, "remote_group")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[str]:
        """
        Firewall schedule used to restrict when the administrator can log in. No schedule means no restrictions.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="smsCustomServer")
    def sms_custom_server(self) -> pulumi.Output[str]:
        """
        Custom SMS server to send SMS messages to.
        """
        return pulumi.get(self, "sms_custom_server")

    @property
    @pulumi.getter(name="smsPhone")
    def sms_phone(self) -> pulumi.Output[str]:
        """
        Phone number on which the administrator receives SMS messages.
        """
        return pulumi.get(self, "sms_phone")

    @property
    @pulumi.getter(name="smsServer")
    def sms_server(self) -> pulumi.Output[str]:
        """
        Send SMS messages using the FortiGuard SMS server or a custom server. Valid values: `fortiguard`, `custom`.
        """
        return pulumi.get(self, "sms_server")

    @property
    @pulumi.getter(name="sshCertificate")
    def ssh_certificate(self) -> pulumi.Output[str]:
        """
        Select the certificate to be used by the FortiGate for authentication with an SSH client.
        """
        return pulumi.get(self, "ssh_certificate")

    @property
    @pulumi.getter(name="sshPublicKey1")
    def ssh_public_key1(self) -> pulumi.Output[str]:
        """
        Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        """
        return pulumi.get(self, "ssh_public_key1")

    @property
    @pulumi.getter(name="sshPublicKey2")
    def ssh_public_key2(self) -> pulumi.Output[str]:
        """
        Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        """
        return pulumi.get(self, "ssh_public_key2")

    @property
    @pulumi.getter(name="sshPublicKey3")
    def ssh_public_key3(self) -> pulumi.Output[str]:
        """
        Public key of an SSH client. The client is authenticated without being asked for credentials. Create the public-private key pair in the SSH client application.
        """
        return pulumi.get(self, "ssh_public_key3")

    @property
    @pulumi.getter
    def trusthost1(self) -> pulumi.Output[str]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost1")

    @property
    @pulumi.getter
    def trusthost10(self) -> pulumi.Output[str]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost10")

    @property
    @pulumi.getter
    def trusthost2(self) -> pulumi.Output[str]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost2")

    @property
    @pulumi.getter
    def trusthost3(self) -> pulumi.Output[str]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost3")

    @property
    @pulumi.getter
    def trusthost4(self) -> pulumi.Output[str]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost4")

    @property
    @pulumi.getter
    def trusthost5(self) -> pulumi.Output[str]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost5")

    @property
    @pulumi.getter
    def trusthost6(self) -> pulumi.Output[str]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost6")

    @property
    @pulumi.getter
    def trusthost7(self) -> pulumi.Output[str]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost7")

    @property
    @pulumi.getter
    def trusthost8(self) -> pulumi.Output[str]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost8")

    @property
    @pulumi.getter
    def trusthost9(self) -> pulumi.Output[str]:
        """
        Any IPv4 address or subnet address and netmask from which the administrator can connect to the FortiGate unit. Default allows access from any IPv4 address.
        """
        return pulumi.get(self, "trusthost9")

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> pulumi.Output[str]:
        """
        Enable/disable two-factor authentication.
        """
        return pulumi.get(self, "two_factor")

    @property
    @pulumi.getter(name="twoFactorAuthentication")
    def two_factor_authentication(self) -> pulumi.Output[str]:
        """
        Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
        """
        return pulumi.get(self, "two_factor_authentication")

    @property
    @pulumi.getter(name="twoFactorNotification")
    def two_factor_notification(self) -> pulumi.Output[str]:
        """
        Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
        """
        return pulumi.get(self, "two_factor_notification")

    @property
    @pulumi.getter(name="vdomOverride")
    def vdom_override(self) -> pulumi.Output[str]:
        """
        Enable to use the names of VDOMs provided by the remote authentication server to control the VDOMs that this administrator can access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vdom_override")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vdoms(self) -> pulumi.Output[Optional[Sequence['outputs.AdminVdom']]]:
        """
        Virtual domain(s) that the administrator can access. The structure of `vdom` block is documented below.
        """
        return pulumi.get(self, "vdoms")

    @property
    @pulumi.getter
    def wildcard(self) -> pulumi.Output[str]:
        """
        Enable/disable wildcard RADIUS authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wildcard")

