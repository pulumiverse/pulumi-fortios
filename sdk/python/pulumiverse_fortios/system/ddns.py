# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DdnsArgs', 'Ddns']

@pulumi.input_type
class DdnsArgs:
    def __init__(__self__, *,
                 ddns_server: pulumi.Input[str],
                 monitor_interfaces: pulumi.Input[Sequence[pulumi.Input['DdnsMonitorInterfaceArgs']]],
                 addr_type: Optional[pulumi.Input[str]] = None,
                 bound_ip: Optional[pulumi.Input[str]] = None,
                 clear_text: Optional[pulumi.Input[str]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_domain: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_password: Optional[pulumi.Input[str]] = None,
                 ddns_server_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['DdnsDdnsServerAddrArgs']]]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_sn: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_username: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 ddnsid: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 update_interval: Optional[pulumi.Input[int]] = None,
                 use_public_ip: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ddns resource.
        :param pulumi.Input[str] ddns_server: Select a DDNS service provider. Valid values: `dyndns.org`, `dyns.net`, `tzo.com`, `vavic.com`, `dipdns.net`, `now.net.cn`, `dhs.org`, `easydns.com`, `genericDDNS`, `FortiGuardDDNS`, `noip.com`.
        :param pulumi.Input[Sequence[pulumi.Input['DdnsMonitorInterfaceArgs']]] monitor_interfaces: Monitored interface. The structure of `monitor_interface` block is documented below.
        :param pulumi.Input[str] addr_type: Address type of interface address in DDNS update. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] bound_ip: Bound IP address.
        :param pulumi.Input[str] clear_text: Enable/disable use of clear text connections. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ddns_auth: Enable/disable TSIG authentication for your DDNS server. Valid values: `disable`, `tsig`.
        :param pulumi.Input[str] ddns_domain: Your fully qualified domain name (for example, yourname.DDNS.com).
        :param pulumi.Input[str] ddns_key: DDNS update key (base 64 encoding).
        :param pulumi.Input[str] ddns_keyname: DDNS update key name.
        :param pulumi.Input[str] ddns_password: DDNS password.
        :param pulumi.Input[Sequence[pulumi.Input['DdnsDdnsServerAddrArgs']]] ddns_server_addrs: Generic DDNS server IP/FQDN list. The structure of `ddns_server_addr` block is documented below.
        :param pulumi.Input[str] ddns_server_ip: Generic DDNS server IP.
        :param pulumi.Input[str] ddns_sn: DDNS Serial Number.
        :param pulumi.Input[int] ddns_ttl: Time-to-live for DDNS packets.
        :param pulumi.Input[str] ddns_username: DDNS user name.
        :param pulumi.Input[str] ddns_zone: Zone of your domain name (for example, DDNS.com).
        :param pulumi.Input[int] ddnsid: DDNS ID.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] server_type: Address type of the DDNS server. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] ssl_certificate: Name of local certificate for SSL connections.
        :param pulumi.Input[int] update_interval: DDNS update interval (60 - 2592000 sec, default = 300).
        :param pulumi.Input[str] use_public_ip: Enable/disable use of public IP address. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "ddns_server", ddns_server)
        pulumi.set(__self__, "monitor_interfaces", monitor_interfaces)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if bound_ip is not None:
            pulumi.set(__self__, "bound_ip", bound_ip)
        if clear_text is not None:
            pulumi.set(__self__, "clear_text", clear_text)
        if ddns_auth is not None:
            pulumi.set(__self__, "ddns_auth", ddns_auth)
        if ddns_domain is not None:
            pulumi.set(__self__, "ddns_domain", ddns_domain)
        if ddns_key is not None:
            pulumi.set(__self__, "ddns_key", ddns_key)
        if ddns_keyname is not None:
            pulumi.set(__self__, "ddns_keyname", ddns_keyname)
        if ddns_password is not None:
            pulumi.set(__self__, "ddns_password", ddns_password)
        if ddns_server_addrs is not None:
            pulumi.set(__self__, "ddns_server_addrs", ddns_server_addrs)
        if ddns_server_ip is not None:
            pulumi.set(__self__, "ddns_server_ip", ddns_server_ip)
        if ddns_sn is not None:
            pulumi.set(__self__, "ddns_sn", ddns_sn)
        if ddns_ttl is not None:
            pulumi.set(__self__, "ddns_ttl", ddns_ttl)
        if ddns_username is not None:
            pulumi.set(__self__, "ddns_username", ddns_username)
        if ddns_zone is not None:
            pulumi.set(__self__, "ddns_zone", ddns_zone)
        if ddnsid is not None:
            pulumi.set(__self__, "ddnsid", ddnsid)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if update_interval is not None:
            pulumi.set(__self__, "update_interval", update_interval)
        if use_public_ip is not None:
            pulumi.set(__self__, "use_public_ip", use_public_ip)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="ddnsServer")
    def ddns_server(self) -> pulumi.Input[str]:
        """
        Select a DDNS service provider. Valid values: `dyndns.org`, `dyns.net`, `tzo.com`, `vavic.com`, `dipdns.net`, `now.net.cn`, `dhs.org`, `easydns.com`, `genericDDNS`, `FortiGuardDDNS`, `noip.com`.
        """
        return pulumi.get(self, "ddns_server")

    @ddns_server.setter
    def ddns_server(self, value: pulumi.Input[str]):
        pulumi.set(self, "ddns_server", value)

    @property
    @pulumi.getter(name="monitorInterfaces")
    def monitor_interfaces(self) -> pulumi.Input[Sequence[pulumi.Input['DdnsMonitorInterfaceArgs']]]:
        """
        Monitored interface. The structure of `monitor_interface` block is documented below.
        """
        return pulumi.get(self, "monitor_interfaces")

    @monitor_interfaces.setter
    def monitor_interfaces(self, value: pulumi.Input[Sequence[pulumi.Input['DdnsMonitorInterfaceArgs']]]):
        pulumi.set(self, "monitor_interfaces", value)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Address type of interface address in DDNS update. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="boundIp")
    def bound_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Bound IP address.
        """
        return pulumi.get(self, "bound_ip")

    @bound_ip.setter
    def bound_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bound_ip", value)

    @property
    @pulumi.getter(name="clearText")
    def clear_text(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of clear text connections. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "clear_text")

    @clear_text.setter
    def clear_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clear_text", value)

    @property
    @pulumi.getter(name="ddnsAuth")
    def ddns_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable TSIG authentication for your DDNS server. Valid values: `disable`, `tsig`.
        """
        return pulumi.get(self, "ddns_auth")

    @ddns_auth.setter
    def ddns_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_auth", value)

    @property
    @pulumi.getter(name="ddnsDomain")
    def ddns_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Your fully qualified domain name (for example, yourname.DDNS.com).
        """
        return pulumi.get(self, "ddns_domain")

    @ddns_domain.setter
    def ddns_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_domain", value)

    @property
    @pulumi.getter(name="ddnsKey")
    def ddns_key(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS update key (base 64 encoding).
        """
        return pulumi.get(self, "ddns_key")

    @ddns_key.setter
    def ddns_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_key", value)

    @property
    @pulumi.getter(name="ddnsKeyname")
    def ddns_keyname(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS update key name.
        """
        return pulumi.get(self, "ddns_keyname")

    @ddns_keyname.setter
    def ddns_keyname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_keyname", value)

    @property
    @pulumi.getter(name="ddnsPassword")
    def ddns_password(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS password.
        """
        return pulumi.get(self, "ddns_password")

    @ddns_password.setter
    def ddns_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_password", value)

    @property
    @pulumi.getter(name="ddnsServerAddrs")
    def ddns_server_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DdnsDdnsServerAddrArgs']]]]:
        """
        Generic DDNS server IP/FQDN list. The structure of `ddns_server_addr` block is documented below.
        """
        return pulumi.get(self, "ddns_server_addrs")

    @ddns_server_addrs.setter
    def ddns_server_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DdnsDdnsServerAddrArgs']]]]):
        pulumi.set(self, "ddns_server_addrs", value)

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Generic DDNS server IP.
        """
        return pulumi.get(self, "ddns_server_ip")

    @ddns_server_ip.setter
    def ddns_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_server_ip", value)

    @property
    @pulumi.getter(name="ddnsSn")
    def ddns_sn(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS Serial Number.
        """
        return pulumi.get(self, "ddns_sn")

    @ddns_sn.setter
    def ddns_sn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_sn", value)

    @property
    @pulumi.getter(name="ddnsTtl")
    def ddns_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Time-to-live for DDNS packets.
        """
        return pulumi.get(self, "ddns_ttl")

    @ddns_ttl.setter
    def ddns_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ddns_ttl", value)

    @property
    @pulumi.getter(name="ddnsUsername")
    def ddns_username(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS user name.
        """
        return pulumi.get(self, "ddns_username")

    @ddns_username.setter
    def ddns_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_username", value)

    @property
    @pulumi.getter(name="ddnsZone")
    def ddns_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone of your domain name (for example, DDNS.com).
        """
        return pulumi.get(self, "ddns_zone")

    @ddns_zone.setter
    def ddns_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_zone", value)

    @property
    @pulumi.getter
    def ddnsid(self) -> Optional[pulumi.Input[int]]:
        """
        DDNS ID.
        """
        return pulumi.get(self, "ddnsid")

    @ddnsid.setter
    def ddnsid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ddnsid", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Address type of the DDNS server. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Name of local certificate for SSL connections.
        """
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="updateInterval")
    def update_interval(self) -> Optional[pulumi.Input[int]]:
        """
        DDNS update interval (60 - 2592000 sec, default = 300).
        """
        return pulumi.get(self, "update_interval")

    @update_interval.setter
    def update_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_interval", value)

    @property
    @pulumi.getter(name="usePublicIp")
    def use_public_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of public IP address. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "use_public_ip")

    @use_public_ip.setter
    def use_public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_public_ip", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _DdnsState:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 bound_ip: Optional[pulumi.Input[str]] = None,
                 clear_text: Optional[pulumi.Input[str]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_domain: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_password: Optional[pulumi.Input[str]] = None,
                 ddns_server: Optional[pulumi.Input[str]] = None,
                 ddns_server_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['DdnsDdnsServerAddrArgs']]]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_sn: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_username: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 ddnsid: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 monitor_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['DdnsMonitorInterfaceArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 update_interval: Optional[pulumi.Input[int]] = None,
                 use_public_ip: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ddns resources.
        :param pulumi.Input[str] addr_type: Address type of interface address in DDNS update. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] bound_ip: Bound IP address.
        :param pulumi.Input[str] clear_text: Enable/disable use of clear text connections. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ddns_auth: Enable/disable TSIG authentication for your DDNS server. Valid values: `disable`, `tsig`.
        :param pulumi.Input[str] ddns_domain: Your fully qualified domain name (for example, yourname.DDNS.com).
        :param pulumi.Input[str] ddns_key: DDNS update key (base 64 encoding).
        :param pulumi.Input[str] ddns_keyname: DDNS update key name.
        :param pulumi.Input[str] ddns_password: DDNS password.
        :param pulumi.Input[str] ddns_server: Select a DDNS service provider. Valid values: `dyndns.org`, `dyns.net`, `tzo.com`, `vavic.com`, `dipdns.net`, `now.net.cn`, `dhs.org`, `easydns.com`, `genericDDNS`, `FortiGuardDDNS`, `noip.com`.
        :param pulumi.Input[Sequence[pulumi.Input['DdnsDdnsServerAddrArgs']]] ddns_server_addrs: Generic DDNS server IP/FQDN list. The structure of `ddns_server_addr` block is documented below.
        :param pulumi.Input[str] ddns_server_ip: Generic DDNS server IP.
        :param pulumi.Input[str] ddns_sn: DDNS Serial Number.
        :param pulumi.Input[int] ddns_ttl: Time-to-live for DDNS packets.
        :param pulumi.Input[str] ddns_username: DDNS user name.
        :param pulumi.Input[str] ddns_zone: Zone of your domain name (for example, DDNS.com).
        :param pulumi.Input[int] ddnsid: DDNS ID.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['DdnsMonitorInterfaceArgs']]] monitor_interfaces: Monitored interface. The structure of `monitor_interface` block is documented below.
        :param pulumi.Input[str] server_type: Address type of the DDNS server. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] ssl_certificate: Name of local certificate for SSL connections.
        :param pulumi.Input[int] update_interval: DDNS update interval (60 - 2592000 sec, default = 300).
        :param pulumi.Input[str] use_public_ip: Enable/disable use of public IP address. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if bound_ip is not None:
            pulumi.set(__self__, "bound_ip", bound_ip)
        if clear_text is not None:
            pulumi.set(__self__, "clear_text", clear_text)
        if ddns_auth is not None:
            pulumi.set(__self__, "ddns_auth", ddns_auth)
        if ddns_domain is not None:
            pulumi.set(__self__, "ddns_domain", ddns_domain)
        if ddns_key is not None:
            pulumi.set(__self__, "ddns_key", ddns_key)
        if ddns_keyname is not None:
            pulumi.set(__self__, "ddns_keyname", ddns_keyname)
        if ddns_password is not None:
            pulumi.set(__self__, "ddns_password", ddns_password)
        if ddns_server is not None:
            pulumi.set(__self__, "ddns_server", ddns_server)
        if ddns_server_addrs is not None:
            pulumi.set(__self__, "ddns_server_addrs", ddns_server_addrs)
        if ddns_server_ip is not None:
            pulumi.set(__self__, "ddns_server_ip", ddns_server_ip)
        if ddns_sn is not None:
            pulumi.set(__self__, "ddns_sn", ddns_sn)
        if ddns_ttl is not None:
            pulumi.set(__self__, "ddns_ttl", ddns_ttl)
        if ddns_username is not None:
            pulumi.set(__self__, "ddns_username", ddns_username)
        if ddns_zone is not None:
            pulumi.set(__self__, "ddns_zone", ddns_zone)
        if ddnsid is not None:
            pulumi.set(__self__, "ddnsid", ddnsid)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if monitor_interfaces is not None:
            pulumi.set(__self__, "monitor_interfaces", monitor_interfaces)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if update_interval is not None:
            pulumi.set(__self__, "update_interval", update_interval)
        if use_public_ip is not None:
            pulumi.set(__self__, "use_public_ip", use_public_ip)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Address type of interface address in DDNS update. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="boundIp")
    def bound_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Bound IP address.
        """
        return pulumi.get(self, "bound_ip")

    @bound_ip.setter
    def bound_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bound_ip", value)

    @property
    @pulumi.getter(name="clearText")
    def clear_text(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of clear text connections. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "clear_text")

    @clear_text.setter
    def clear_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clear_text", value)

    @property
    @pulumi.getter(name="ddnsAuth")
    def ddns_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable TSIG authentication for your DDNS server. Valid values: `disable`, `tsig`.
        """
        return pulumi.get(self, "ddns_auth")

    @ddns_auth.setter
    def ddns_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_auth", value)

    @property
    @pulumi.getter(name="ddnsDomain")
    def ddns_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Your fully qualified domain name (for example, yourname.DDNS.com).
        """
        return pulumi.get(self, "ddns_domain")

    @ddns_domain.setter
    def ddns_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_domain", value)

    @property
    @pulumi.getter(name="ddnsKey")
    def ddns_key(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS update key (base 64 encoding).
        """
        return pulumi.get(self, "ddns_key")

    @ddns_key.setter
    def ddns_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_key", value)

    @property
    @pulumi.getter(name="ddnsKeyname")
    def ddns_keyname(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS update key name.
        """
        return pulumi.get(self, "ddns_keyname")

    @ddns_keyname.setter
    def ddns_keyname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_keyname", value)

    @property
    @pulumi.getter(name="ddnsPassword")
    def ddns_password(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS password.
        """
        return pulumi.get(self, "ddns_password")

    @ddns_password.setter
    def ddns_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_password", value)

    @property
    @pulumi.getter(name="ddnsServer")
    def ddns_server(self) -> Optional[pulumi.Input[str]]:
        """
        Select a DDNS service provider. Valid values: `dyndns.org`, `dyns.net`, `tzo.com`, `vavic.com`, `dipdns.net`, `now.net.cn`, `dhs.org`, `easydns.com`, `genericDDNS`, `FortiGuardDDNS`, `noip.com`.
        """
        return pulumi.get(self, "ddns_server")

    @ddns_server.setter
    def ddns_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_server", value)

    @property
    @pulumi.getter(name="ddnsServerAddrs")
    def ddns_server_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DdnsDdnsServerAddrArgs']]]]:
        """
        Generic DDNS server IP/FQDN list. The structure of `ddns_server_addr` block is documented below.
        """
        return pulumi.get(self, "ddns_server_addrs")

    @ddns_server_addrs.setter
    def ddns_server_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DdnsDdnsServerAddrArgs']]]]):
        pulumi.set(self, "ddns_server_addrs", value)

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Generic DDNS server IP.
        """
        return pulumi.get(self, "ddns_server_ip")

    @ddns_server_ip.setter
    def ddns_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_server_ip", value)

    @property
    @pulumi.getter(name="ddnsSn")
    def ddns_sn(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS Serial Number.
        """
        return pulumi.get(self, "ddns_sn")

    @ddns_sn.setter
    def ddns_sn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_sn", value)

    @property
    @pulumi.getter(name="ddnsTtl")
    def ddns_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Time-to-live for DDNS packets.
        """
        return pulumi.get(self, "ddns_ttl")

    @ddns_ttl.setter
    def ddns_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ddns_ttl", value)

    @property
    @pulumi.getter(name="ddnsUsername")
    def ddns_username(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS user name.
        """
        return pulumi.get(self, "ddns_username")

    @ddns_username.setter
    def ddns_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_username", value)

    @property
    @pulumi.getter(name="ddnsZone")
    def ddns_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone of your domain name (for example, DDNS.com).
        """
        return pulumi.get(self, "ddns_zone")

    @ddns_zone.setter
    def ddns_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_zone", value)

    @property
    @pulumi.getter
    def ddnsid(self) -> Optional[pulumi.Input[int]]:
        """
        DDNS ID.
        """
        return pulumi.get(self, "ddnsid")

    @ddnsid.setter
    def ddnsid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ddnsid", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="monitorInterfaces")
    def monitor_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DdnsMonitorInterfaceArgs']]]]:
        """
        Monitored interface. The structure of `monitor_interface` block is documented below.
        """
        return pulumi.get(self, "monitor_interfaces")

    @monitor_interfaces.setter
    def monitor_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DdnsMonitorInterfaceArgs']]]]):
        pulumi.set(self, "monitor_interfaces", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Address type of the DDNS server. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Name of local certificate for SSL connections.
        """
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="updateInterval")
    def update_interval(self) -> Optional[pulumi.Input[int]]:
        """
        DDNS update interval (60 - 2592000 sec, default = 300).
        """
        return pulumi.get(self, "update_interval")

    @update_interval.setter
    def update_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_interval", value)

    @property
    @pulumi.getter(name="usePublicIp")
    def use_public_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of public IP address. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "use_public_ip")

    @use_public_ip.setter
    def use_public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_public_ip", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Ddns(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 bound_ip: Optional[pulumi.Input[str]] = None,
                 clear_text: Optional[pulumi.Input[str]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_domain: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_password: Optional[pulumi.Input[str]] = None,
                 ddns_server: Optional[pulumi.Input[str]] = None,
                 ddns_server_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdnsDdnsServerAddrArgs']]]]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_sn: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_username: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 ddnsid: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 monitor_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdnsMonitorInterfaceArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 update_interval: Optional[pulumi.Input[int]] = None,
                 use_public_ip: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure DDNS.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Ddns("trname",
            bound_ip="0.0.0.0",
            clear_text="disable",
            ddns_auth="disable",
            ddns_domain="www.s.com",
            ddns_password="ewewcd",
            ddns_server="tzo.com",
            ddns_server_ip="0.0.0.0",
            ddns_ttl=300,
            ddns_username="sie2ae",
            ddnsid=1,
            monitor_interfaces=[fortios.system.DdnsMonitorInterfaceArgs(
                interface_name="port2",
            )],
            ssl_certificate="Fortinet_Factory",
            update_interval=300,
            use_public_ip="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Ddns can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/ddns:Ddns labelname {{ddnsid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/ddns:Ddns labelname {{ddnsid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addr_type: Address type of interface address in DDNS update. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] bound_ip: Bound IP address.
        :param pulumi.Input[str] clear_text: Enable/disable use of clear text connections. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ddns_auth: Enable/disable TSIG authentication for your DDNS server. Valid values: `disable`, `tsig`.
        :param pulumi.Input[str] ddns_domain: Your fully qualified domain name (for example, yourname.DDNS.com).
        :param pulumi.Input[str] ddns_key: DDNS update key (base 64 encoding).
        :param pulumi.Input[str] ddns_keyname: DDNS update key name.
        :param pulumi.Input[str] ddns_password: DDNS password.
        :param pulumi.Input[str] ddns_server: Select a DDNS service provider. Valid values: `dyndns.org`, `dyns.net`, `tzo.com`, `vavic.com`, `dipdns.net`, `now.net.cn`, `dhs.org`, `easydns.com`, `genericDDNS`, `FortiGuardDDNS`, `noip.com`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdnsDdnsServerAddrArgs']]]] ddns_server_addrs: Generic DDNS server IP/FQDN list. The structure of `ddns_server_addr` block is documented below.
        :param pulumi.Input[str] ddns_server_ip: Generic DDNS server IP.
        :param pulumi.Input[str] ddns_sn: DDNS Serial Number.
        :param pulumi.Input[int] ddns_ttl: Time-to-live for DDNS packets.
        :param pulumi.Input[str] ddns_username: DDNS user name.
        :param pulumi.Input[str] ddns_zone: Zone of your domain name (for example, DDNS.com).
        :param pulumi.Input[int] ddnsid: DDNS ID.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdnsMonitorInterfaceArgs']]]] monitor_interfaces: Monitored interface. The structure of `monitor_interface` block is documented below.
        :param pulumi.Input[str] server_type: Address type of the DDNS server. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] ssl_certificate: Name of local certificate for SSL connections.
        :param pulumi.Input[int] update_interval: DDNS update interval (60 - 2592000 sec, default = 300).
        :param pulumi.Input[str] use_public_ip: Enable/disable use of public IP address. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DdnsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure DDNS.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Ddns("trname",
            bound_ip="0.0.0.0",
            clear_text="disable",
            ddns_auth="disable",
            ddns_domain="www.s.com",
            ddns_password="ewewcd",
            ddns_server="tzo.com",
            ddns_server_ip="0.0.0.0",
            ddns_ttl=300,
            ddns_username="sie2ae",
            ddnsid=1,
            monitor_interfaces=[fortios.system.DdnsMonitorInterfaceArgs(
                interface_name="port2",
            )],
            ssl_certificate="Fortinet_Factory",
            update_interval=300,
            use_public_ip="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Ddns can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/ddns:Ddns labelname {{ddnsid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/ddns:Ddns labelname {{ddnsid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param DdnsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DdnsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 bound_ip: Optional[pulumi.Input[str]] = None,
                 clear_text: Optional[pulumi.Input[str]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_domain: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_password: Optional[pulumi.Input[str]] = None,
                 ddns_server: Optional[pulumi.Input[str]] = None,
                 ddns_server_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdnsDdnsServerAddrArgs']]]]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_sn: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_username: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 ddnsid: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 monitor_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdnsMonitorInterfaceArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 update_interval: Optional[pulumi.Input[int]] = None,
                 use_public_ip: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DdnsArgs.__new__(DdnsArgs)

            __props__.__dict__["addr_type"] = addr_type
            __props__.__dict__["bound_ip"] = bound_ip
            __props__.__dict__["clear_text"] = clear_text
            __props__.__dict__["ddns_auth"] = ddns_auth
            __props__.__dict__["ddns_domain"] = ddns_domain
            __props__.__dict__["ddns_key"] = None if ddns_key is None else pulumi.Output.secret(ddns_key)
            __props__.__dict__["ddns_keyname"] = ddns_keyname
            __props__.__dict__["ddns_password"] = None if ddns_password is None else pulumi.Output.secret(ddns_password)
            if ddns_server is None and not opts.urn:
                raise TypeError("Missing required property 'ddns_server'")
            __props__.__dict__["ddns_server"] = ddns_server
            __props__.__dict__["ddns_server_addrs"] = ddns_server_addrs
            __props__.__dict__["ddns_server_ip"] = ddns_server_ip
            __props__.__dict__["ddns_sn"] = ddns_sn
            __props__.__dict__["ddns_ttl"] = ddns_ttl
            __props__.__dict__["ddns_username"] = ddns_username
            __props__.__dict__["ddns_zone"] = ddns_zone
            __props__.__dict__["ddnsid"] = ddnsid
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            if monitor_interfaces is None and not opts.urn:
                raise TypeError("Missing required property 'monitor_interfaces'")
            __props__.__dict__["monitor_interfaces"] = monitor_interfaces
            __props__.__dict__["server_type"] = server_type
            __props__.__dict__["ssl_certificate"] = ssl_certificate
            __props__.__dict__["update_interval"] = update_interval
            __props__.__dict__["use_public_ip"] = use_public_ip
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["ddnsKey", "ddnsPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Ddns, __self__).__init__(
            'fortios:system/ddns:Ddns',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addr_type: Optional[pulumi.Input[str]] = None,
            bound_ip: Optional[pulumi.Input[str]] = None,
            clear_text: Optional[pulumi.Input[str]] = None,
            ddns_auth: Optional[pulumi.Input[str]] = None,
            ddns_domain: Optional[pulumi.Input[str]] = None,
            ddns_key: Optional[pulumi.Input[str]] = None,
            ddns_keyname: Optional[pulumi.Input[str]] = None,
            ddns_password: Optional[pulumi.Input[str]] = None,
            ddns_server: Optional[pulumi.Input[str]] = None,
            ddns_server_addrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdnsDdnsServerAddrArgs']]]]] = None,
            ddns_server_ip: Optional[pulumi.Input[str]] = None,
            ddns_sn: Optional[pulumi.Input[str]] = None,
            ddns_ttl: Optional[pulumi.Input[int]] = None,
            ddns_username: Optional[pulumi.Input[str]] = None,
            ddns_zone: Optional[pulumi.Input[str]] = None,
            ddnsid: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            monitor_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdnsMonitorInterfaceArgs']]]]] = None,
            server_type: Optional[pulumi.Input[str]] = None,
            ssl_certificate: Optional[pulumi.Input[str]] = None,
            update_interval: Optional[pulumi.Input[int]] = None,
            use_public_ip: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Ddns':
        """
        Get an existing Ddns resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addr_type: Address type of interface address in DDNS update. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] bound_ip: Bound IP address.
        :param pulumi.Input[str] clear_text: Enable/disable use of clear text connections. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ddns_auth: Enable/disable TSIG authentication for your DDNS server. Valid values: `disable`, `tsig`.
        :param pulumi.Input[str] ddns_domain: Your fully qualified domain name (for example, yourname.DDNS.com).
        :param pulumi.Input[str] ddns_key: DDNS update key (base 64 encoding).
        :param pulumi.Input[str] ddns_keyname: DDNS update key name.
        :param pulumi.Input[str] ddns_password: DDNS password.
        :param pulumi.Input[str] ddns_server: Select a DDNS service provider. Valid values: `dyndns.org`, `dyns.net`, `tzo.com`, `vavic.com`, `dipdns.net`, `now.net.cn`, `dhs.org`, `easydns.com`, `genericDDNS`, `FortiGuardDDNS`, `noip.com`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdnsDdnsServerAddrArgs']]]] ddns_server_addrs: Generic DDNS server IP/FQDN list. The structure of `ddns_server_addr` block is documented below.
        :param pulumi.Input[str] ddns_server_ip: Generic DDNS server IP.
        :param pulumi.Input[str] ddns_sn: DDNS Serial Number.
        :param pulumi.Input[int] ddns_ttl: Time-to-live for DDNS packets.
        :param pulumi.Input[str] ddns_username: DDNS user name.
        :param pulumi.Input[str] ddns_zone: Zone of your domain name (for example, DDNS.com).
        :param pulumi.Input[int] ddnsid: DDNS ID.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdnsMonitorInterfaceArgs']]]] monitor_interfaces: Monitored interface. The structure of `monitor_interface` block is documented below.
        :param pulumi.Input[str] server_type: Address type of the DDNS server. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] ssl_certificate: Name of local certificate for SSL connections.
        :param pulumi.Input[int] update_interval: DDNS update interval (60 - 2592000 sec, default = 300).
        :param pulumi.Input[str] use_public_ip: Enable/disable use of public IP address. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DdnsState.__new__(_DdnsState)

        __props__.__dict__["addr_type"] = addr_type
        __props__.__dict__["bound_ip"] = bound_ip
        __props__.__dict__["clear_text"] = clear_text
        __props__.__dict__["ddns_auth"] = ddns_auth
        __props__.__dict__["ddns_domain"] = ddns_domain
        __props__.__dict__["ddns_key"] = ddns_key
        __props__.__dict__["ddns_keyname"] = ddns_keyname
        __props__.__dict__["ddns_password"] = ddns_password
        __props__.__dict__["ddns_server"] = ddns_server
        __props__.__dict__["ddns_server_addrs"] = ddns_server_addrs
        __props__.__dict__["ddns_server_ip"] = ddns_server_ip
        __props__.__dict__["ddns_sn"] = ddns_sn
        __props__.__dict__["ddns_ttl"] = ddns_ttl
        __props__.__dict__["ddns_username"] = ddns_username
        __props__.__dict__["ddns_zone"] = ddns_zone
        __props__.__dict__["ddnsid"] = ddnsid
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["monitor_interfaces"] = monitor_interfaces
        __props__.__dict__["server_type"] = server_type
        __props__.__dict__["ssl_certificate"] = ssl_certificate
        __props__.__dict__["update_interval"] = update_interval
        __props__.__dict__["use_public_ip"] = use_public_ip
        __props__.__dict__["vdomparam"] = vdomparam
        return Ddns(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> pulumi.Output[str]:
        """
        Address type of interface address in DDNS update. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter(name="boundIp")
    def bound_ip(self) -> pulumi.Output[str]:
        """
        Bound IP address.
        """
        return pulumi.get(self, "bound_ip")

    @property
    @pulumi.getter(name="clearText")
    def clear_text(self) -> pulumi.Output[str]:
        """
        Enable/disable use of clear text connections. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "clear_text")

    @property
    @pulumi.getter(name="ddnsAuth")
    def ddns_auth(self) -> pulumi.Output[str]:
        """
        Enable/disable TSIG authentication for your DDNS server. Valid values: `disable`, `tsig`.
        """
        return pulumi.get(self, "ddns_auth")

    @property
    @pulumi.getter(name="ddnsDomain")
    def ddns_domain(self) -> pulumi.Output[str]:
        """
        Your fully qualified domain name (for example, yourname.DDNS.com).
        """
        return pulumi.get(self, "ddns_domain")

    @property
    @pulumi.getter(name="ddnsKey")
    def ddns_key(self) -> pulumi.Output[str]:
        """
        DDNS update key (base 64 encoding).
        """
        return pulumi.get(self, "ddns_key")

    @property
    @pulumi.getter(name="ddnsKeyname")
    def ddns_keyname(self) -> pulumi.Output[str]:
        """
        DDNS update key name.
        """
        return pulumi.get(self, "ddns_keyname")

    @property
    @pulumi.getter(name="ddnsPassword")
    def ddns_password(self) -> pulumi.Output[Optional[str]]:
        """
        DDNS password.
        """
        return pulumi.get(self, "ddns_password")

    @property
    @pulumi.getter(name="ddnsServer")
    def ddns_server(self) -> pulumi.Output[str]:
        """
        Select a DDNS service provider. Valid values: `dyndns.org`, `dyns.net`, `tzo.com`, `vavic.com`, `dipdns.net`, `now.net.cn`, `dhs.org`, `easydns.com`, `genericDDNS`, `FortiGuardDDNS`, `noip.com`.
        """
        return pulumi.get(self, "ddns_server")

    @property
    @pulumi.getter(name="ddnsServerAddrs")
    def ddns_server_addrs(self) -> pulumi.Output[Optional[Sequence['outputs.DdnsDdnsServerAddr']]]:
        """
        Generic DDNS server IP/FQDN list. The structure of `ddns_server_addr` block is documented below.
        """
        return pulumi.get(self, "ddns_server_addrs")

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> pulumi.Output[str]:
        """
        Generic DDNS server IP.
        """
        return pulumi.get(self, "ddns_server_ip")

    @property
    @pulumi.getter(name="ddnsSn")
    def ddns_sn(self) -> pulumi.Output[str]:
        """
        DDNS Serial Number.
        """
        return pulumi.get(self, "ddns_sn")

    @property
    @pulumi.getter(name="ddnsTtl")
    def ddns_ttl(self) -> pulumi.Output[int]:
        """
        Time-to-live for DDNS packets.
        """
        return pulumi.get(self, "ddns_ttl")

    @property
    @pulumi.getter(name="ddnsUsername")
    def ddns_username(self) -> pulumi.Output[str]:
        """
        DDNS user name.
        """
        return pulumi.get(self, "ddns_username")

    @property
    @pulumi.getter(name="ddnsZone")
    def ddns_zone(self) -> pulumi.Output[str]:
        """
        Zone of your domain name (for example, DDNS.com).
        """
        return pulumi.get(self, "ddns_zone")

    @property
    @pulumi.getter
    def ddnsid(self) -> pulumi.Output[int]:
        """
        DDNS ID.
        """
        return pulumi.get(self, "ddnsid")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="monitorInterfaces")
    def monitor_interfaces(self) -> pulumi.Output[Sequence['outputs.DdnsMonitorInterface']]:
        """
        Monitored interface. The structure of `monitor_interface` block is documented below.
        """
        return pulumi.get(self, "monitor_interfaces")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[str]:
        """
        Address type of the DDNS server. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> pulumi.Output[str]:
        """
        Name of local certificate for SSL connections.
        """
        return pulumi.get(self, "ssl_certificate")

    @property
    @pulumi.getter(name="updateInterval")
    def update_interval(self) -> pulumi.Output[int]:
        """
        DDNS update interval (60 - 2592000 sec, default = 300).
        """
        return pulumi.get(self, "update_interval")

    @property
    @pulumi.getter(name="usePublicIp")
    def use_public_ip(self) -> pulumi.Output[str]:
        """
        Enable/disable use of public IP address. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "use_public_ip")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

