# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'CommunityHostArgs',
    'CommunityHosts6Args',
    'CommunityVdomArgs',
    'UserVdomArgs',
]

@pulumi.input_type
class CommunityHostArgs:
    def __init__(__self__, *,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 host_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ha_direct: Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] host_type: Control whether the SNMP manager sends SNMP queries, receives SNMP traps, or both. Valid values: `any`, `query`, `trap`.
        :param pulumi.Input[int] id: Host6 entry ID.
        :param pulumi.Input[str] ip: IPv4 address of the SNMP manager (host).
        :param pulumi.Input[str] source_ip: Source IPv4 address for SNMP traps.
        """
        if ha_direct is not None:
            pulumi.set(__self__, "ha_direct", ha_direct)
        if host_type is not None:
            pulumi.set(__self__, "host_type", host_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_direct")

    @ha_direct.setter
    def ha_direct(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_direct", value)

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[pulumi.Input[str]]:
        """
        Control whether the SNMP manager sends SNMP queries, receives SNMP traps, or both. Valid values: `any`, `query`, `trap`.
        """
        return pulumi.get(self, "host_type")

    @host_type.setter
    def host_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Host6 entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the SNMP manager (host).
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv4 address for SNMP traps.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)


@pulumi.input_type
class CommunityHosts6Args:
    def __init__(__self__, *,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 host_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 source_ipv6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: an identifier for the resource with format {{fosid}}.
        """
        if ha_direct is not None:
            pulumi.set(__self__, "ha_direct", ha_direct)
        if host_type is not None:
            pulumi.set(__self__, "host_type", host_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if source_ipv6 is not None:
            pulumi.set(__self__, "source_ipv6", source_ipv6)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ha_direct")

    @ha_direct.setter
    def ha_direct(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_direct", value)

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_type")

    @host_type.setter
    def host_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        an identifier for the resource with format {{fosid}}.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter(name="sourceIpv6")
    def source_ipv6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_ipv6")

    @source_ipv6.setter
    def source_ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ipv6", value)


@pulumi.input_type
class CommunityVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VDOM name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VDOM name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


