# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = ['SysinfoArgs', 'Sysinfo']

@pulumi.input_type
class SysinfoArgs:
    def __init__(__self__, *,
                 contact_info: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine_id: Optional[pulumi.Input[str]] = None,
                 engine_id_type: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_free_memory_threshold: Optional[pulumi.Input[int]] = None,
                 trap_freeable_memory_threshold: Optional[pulumi.Input[int]] = None,
                 trap_high_cpu_threshold: Optional[pulumi.Input[int]] = None,
                 trap_log_full_threshold: Optional[pulumi.Input[int]] = None,
                 trap_low_memory_threshold: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Sysinfo resource.
        :param pulumi.Input[str] contact_info: Contact information.
        :param pulumi.Input[str] description: System description.
        :param pulumi.Input[str] engine_id: Local SNMP engineID string (maximum 24 characters).
        :param pulumi.Input[str] engine_id_type: Local SNMP engineID type (text/hex/mac). Valid values: `text`, `hex`, `mac`.
        :param pulumi.Input[str] location: System location.
        :param pulumi.Input[str] status: Enable/disable SNMP. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] trap_free_memory_threshold: Free memory usage when trap is sent.
        :param pulumi.Input[int] trap_freeable_memory_threshold: Freeable memory usage when trap is sent.
        :param pulumi.Input[int] trap_high_cpu_threshold: CPU usage when trap is sent.
        :param pulumi.Input[int] trap_log_full_threshold: Log disk usage when trap is sent.
        :param pulumi.Input[int] trap_low_memory_threshold: Memory usage when trap is sent.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if contact_info is not None:
            pulumi.set(__self__, "contact_info", contact_info)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine_id is not None:
            pulumi.set(__self__, "engine_id", engine_id)
        if engine_id_type is not None:
            pulumi.set(__self__, "engine_id_type", engine_id_type)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_free_memory_threshold is not None:
            pulumi.set(__self__, "trap_free_memory_threshold", trap_free_memory_threshold)
        if trap_freeable_memory_threshold is not None:
            pulumi.set(__self__, "trap_freeable_memory_threshold", trap_freeable_memory_threshold)
        if trap_high_cpu_threshold is not None:
            pulumi.set(__self__, "trap_high_cpu_threshold", trap_high_cpu_threshold)
        if trap_log_full_threshold is not None:
            pulumi.set(__self__, "trap_log_full_threshold", trap_log_full_threshold)
        if trap_low_memory_threshold is not None:
            pulumi.set(__self__, "trap_low_memory_threshold", trap_low_memory_threshold)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="contactInfo")
    def contact_info(self) -> Optional[pulumi.Input[str]]:
        """
        Contact information.
        """
        return pulumi.get(self, "contact_info")

    @contact_info.setter
    def contact_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_info", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        System description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> Optional[pulumi.Input[str]]:
        """
        Local SNMP engineID string (maximum 24 characters).
        """
        return pulumi.get(self, "engine_id")

    @engine_id.setter
    def engine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_id", value)

    @property
    @pulumi.getter(name="engineIdType")
    def engine_id_type(self) -> Optional[pulumi.Input[str]]:
        """
        Local SNMP engineID type (text/hex/mac). Valid values: `text`, `hex`, `mac`.
        """
        return pulumi.get(self, "engine_id_type")

    @engine_id_type.setter
    def engine_id_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_id_type", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        System location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapFreeMemoryThreshold")
    def trap_free_memory_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Free memory usage when trap is sent.
        """
        return pulumi.get(self, "trap_free_memory_threshold")

    @trap_free_memory_threshold.setter
    def trap_free_memory_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_free_memory_threshold", value)

    @property
    @pulumi.getter(name="trapFreeableMemoryThreshold")
    def trap_freeable_memory_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Freeable memory usage when trap is sent.
        """
        return pulumi.get(self, "trap_freeable_memory_threshold")

    @trap_freeable_memory_threshold.setter
    def trap_freeable_memory_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_freeable_memory_threshold", value)

    @property
    @pulumi.getter(name="trapHighCpuThreshold")
    def trap_high_cpu_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        CPU usage when trap is sent.
        """
        return pulumi.get(self, "trap_high_cpu_threshold")

    @trap_high_cpu_threshold.setter
    def trap_high_cpu_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_high_cpu_threshold", value)

    @property
    @pulumi.getter(name="trapLogFullThreshold")
    def trap_log_full_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Log disk usage when trap is sent.
        """
        return pulumi.get(self, "trap_log_full_threshold")

    @trap_log_full_threshold.setter
    def trap_log_full_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_log_full_threshold", value)

    @property
    @pulumi.getter(name="trapLowMemoryThreshold")
    def trap_low_memory_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Memory usage when trap is sent.
        """
        return pulumi.get(self, "trap_low_memory_threshold")

    @trap_low_memory_threshold.setter
    def trap_low_memory_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_low_memory_threshold", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SysinfoState:
    def __init__(__self__, *,
                 contact_info: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine_id: Optional[pulumi.Input[str]] = None,
                 engine_id_type: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_free_memory_threshold: Optional[pulumi.Input[int]] = None,
                 trap_freeable_memory_threshold: Optional[pulumi.Input[int]] = None,
                 trap_high_cpu_threshold: Optional[pulumi.Input[int]] = None,
                 trap_log_full_threshold: Optional[pulumi.Input[int]] = None,
                 trap_low_memory_threshold: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Sysinfo resources.
        :param pulumi.Input[str] contact_info: Contact information.
        :param pulumi.Input[str] description: System description.
        :param pulumi.Input[str] engine_id: Local SNMP engineID string (maximum 24 characters).
        :param pulumi.Input[str] engine_id_type: Local SNMP engineID type (text/hex/mac). Valid values: `text`, `hex`, `mac`.
        :param pulumi.Input[str] location: System location.
        :param pulumi.Input[str] status: Enable/disable SNMP. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] trap_free_memory_threshold: Free memory usage when trap is sent.
        :param pulumi.Input[int] trap_freeable_memory_threshold: Freeable memory usage when trap is sent.
        :param pulumi.Input[int] trap_high_cpu_threshold: CPU usage when trap is sent.
        :param pulumi.Input[int] trap_log_full_threshold: Log disk usage when trap is sent.
        :param pulumi.Input[int] trap_low_memory_threshold: Memory usage when trap is sent.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if contact_info is not None:
            pulumi.set(__self__, "contact_info", contact_info)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine_id is not None:
            pulumi.set(__self__, "engine_id", engine_id)
        if engine_id_type is not None:
            pulumi.set(__self__, "engine_id_type", engine_id_type)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_free_memory_threshold is not None:
            pulumi.set(__self__, "trap_free_memory_threshold", trap_free_memory_threshold)
        if trap_freeable_memory_threshold is not None:
            pulumi.set(__self__, "trap_freeable_memory_threshold", trap_freeable_memory_threshold)
        if trap_high_cpu_threshold is not None:
            pulumi.set(__self__, "trap_high_cpu_threshold", trap_high_cpu_threshold)
        if trap_log_full_threshold is not None:
            pulumi.set(__self__, "trap_log_full_threshold", trap_log_full_threshold)
        if trap_low_memory_threshold is not None:
            pulumi.set(__self__, "trap_low_memory_threshold", trap_low_memory_threshold)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="contactInfo")
    def contact_info(self) -> Optional[pulumi.Input[str]]:
        """
        Contact information.
        """
        return pulumi.get(self, "contact_info")

    @contact_info.setter
    def contact_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_info", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        System description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> Optional[pulumi.Input[str]]:
        """
        Local SNMP engineID string (maximum 24 characters).
        """
        return pulumi.get(self, "engine_id")

    @engine_id.setter
    def engine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_id", value)

    @property
    @pulumi.getter(name="engineIdType")
    def engine_id_type(self) -> Optional[pulumi.Input[str]]:
        """
        Local SNMP engineID type (text/hex/mac). Valid values: `text`, `hex`, `mac`.
        """
        return pulumi.get(self, "engine_id_type")

    @engine_id_type.setter
    def engine_id_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_id_type", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        System location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapFreeMemoryThreshold")
    def trap_free_memory_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Free memory usage when trap is sent.
        """
        return pulumi.get(self, "trap_free_memory_threshold")

    @trap_free_memory_threshold.setter
    def trap_free_memory_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_free_memory_threshold", value)

    @property
    @pulumi.getter(name="trapFreeableMemoryThreshold")
    def trap_freeable_memory_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Freeable memory usage when trap is sent.
        """
        return pulumi.get(self, "trap_freeable_memory_threshold")

    @trap_freeable_memory_threshold.setter
    def trap_freeable_memory_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_freeable_memory_threshold", value)

    @property
    @pulumi.getter(name="trapHighCpuThreshold")
    def trap_high_cpu_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        CPU usage when trap is sent.
        """
        return pulumi.get(self, "trap_high_cpu_threshold")

    @trap_high_cpu_threshold.setter
    def trap_high_cpu_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_high_cpu_threshold", value)

    @property
    @pulumi.getter(name="trapLogFullThreshold")
    def trap_log_full_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Log disk usage when trap is sent.
        """
        return pulumi.get(self, "trap_log_full_threshold")

    @trap_log_full_threshold.setter
    def trap_log_full_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_log_full_threshold", value)

    @property
    @pulumi.getter(name="trapLowMemoryThreshold")
    def trap_low_memory_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Memory usage when trap is sent.
        """
        return pulumi.get(self, "trap_low_memory_threshold")

    @trap_low_memory_threshold.setter
    def trap_low_memory_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_low_memory_threshold", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Sysinfo(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contact_info: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine_id: Optional[pulumi.Input[str]] = None,
                 engine_id_type: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_free_memory_threshold: Optional[pulumi.Input[int]] = None,
                 trap_freeable_memory_threshold: Optional[pulumi.Input[int]] = None,
                 trap_high_cpu_threshold: Optional[pulumi.Input[int]] = None,
                 trap_log_full_threshold: Optional[pulumi.Input[int]] = None,
                 trap_low_memory_threshold: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        SNMP system info configuration.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.snmp.Sysinfo("trname",
            status="disable",
            trap_high_cpu_threshold=80,
            trap_log_full_threshold=90,
            trap_low_memory_threshold=80)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SystemSnmp Sysinfo can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/snmp/sysinfo:Sysinfo labelname SystemSnmpSysinfo
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/snmp/sysinfo:Sysinfo labelname SystemSnmpSysinfo
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] contact_info: Contact information.
        :param pulumi.Input[str] description: System description.
        :param pulumi.Input[str] engine_id: Local SNMP engineID string (maximum 24 characters).
        :param pulumi.Input[str] engine_id_type: Local SNMP engineID type (text/hex/mac). Valid values: `text`, `hex`, `mac`.
        :param pulumi.Input[str] location: System location.
        :param pulumi.Input[str] status: Enable/disable SNMP. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] trap_free_memory_threshold: Free memory usage when trap is sent.
        :param pulumi.Input[int] trap_freeable_memory_threshold: Freeable memory usage when trap is sent.
        :param pulumi.Input[int] trap_high_cpu_threshold: CPU usage when trap is sent.
        :param pulumi.Input[int] trap_log_full_threshold: Log disk usage when trap is sent.
        :param pulumi.Input[int] trap_low_memory_threshold: Memory usage when trap is sent.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SysinfoArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        SNMP system info configuration.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.snmp.Sysinfo("trname",
            status="disable",
            trap_high_cpu_threshold=80,
            trap_log_full_threshold=90,
            trap_low_memory_threshold=80)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SystemSnmp Sysinfo can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/snmp/sysinfo:Sysinfo labelname SystemSnmpSysinfo
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/snmp/sysinfo:Sysinfo labelname SystemSnmpSysinfo
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SysinfoArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SysinfoArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contact_info: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine_id: Optional[pulumi.Input[str]] = None,
                 engine_id_type: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_free_memory_threshold: Optional[pulumi.Input[int]] = None,
                 trap_freeable_memory_threshold: Optional[pulumi.Input[int]] = None,
                 trap_high_cpu_threshold: Optional[pulumi.Input[int]] = None,
                 trap_log_full_threshold: Optional[pulumi.Input[int]] = None,
                 trap_low_memory_threshold: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SysinfoArgs.__new__(SysinfoArgs)

            __props__.__dict__["contact_info"] = contact_info
            __props__.__dict__["description"] = description
            __props__.__dict__["engine_id"] = engine_id
            __props__.__dict__["engine_id_type"] = engine_id_type
            __props__.__dict__["location"] = location
            __props__.__dict__["status"] = status
            __props__.__dict__["trap_free_memory_threshold"] = trap_free_memory_threshold
            __props__.__dict__["trap_freeable_memory_threshold"] = trap_freeable_memory_threshold
            __props__.__dict__["trap_high_cpu_threshold"] = trap_high_cpu_threshold
            __props__.__dict__["trap_log_full_threshold"] = trap_log_full_threshold
            __props__.__dict__["trap_low_memory_threshold"] = trap_low_memory_threshold
            __props__.__dict__["vdomparam"] = vdomparam
        super(Sysinfo, __self__).__init__(
            'fortios:system/snmp/sysinfo:Sysinfo',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            contact_info: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            engine_id: Optional[pulumi.Input[str]] = None,
            engine_id_type: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            trap_free_memory_threshold: Optional[pulumi.Input[int]] = None,
            trap_freeable_memory_threshold: Optional[pulumi.Input[int]] = None,
            trap_high_cpu_threshold: Optional[pulumi.Input[int]] = None,
            trap_log_full_threshold: Optional[pulumi.Input[int]] = None,
            trap_low_memory_threshold: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Sysinfo':
        """
        Get an existing Sysinfo resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] contact_info: Contact information.
        :param pulumi.Input[str] description: System description.
        :param pulumi.Input[str] engine_id: Local SNMP engineID string (maximum 24 characters).
        :param pulumi.Input[str] engine_id_type: Local SNMP engineID type (text/hex/mac). Valid values: `text`, `hex`, `mac`.
        :param pulumi.Input[str] location: System location.
        :param pulumi.Input[str] status: Enable/disable SNMP. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] trap_free_memory_threshold: Free memory usage when trap is sent.
        :param pulumi.Input[int] trap_freeable_memory_threshold: Freeable memory usage when trap is sent.
        :param pulumi.Input[int] trap_high_cpu_threshold: CPU usage when trap is sent.
        :param pulumi.Input[int] trap_log_full_threshold: Log disk usage when trap is sent.
        :param pulumi.Input[int] trap_low_memory_threshold: Memory usage when trap is sent.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SysinfoState.__new__(_SysinfoState)

        __props__.__dict__["contact_info"] = contact_info
        __props__.__dict__["description"] = description
        __props__.__dict__["engine_id"] = engine_id
        __props__.__dict__["engine_id_type"] = engine_id_type
        __props__.__dict__["location"] = location
        __props__.__dict__["status"] = status
        __props__.__dict__["trap_free_memory_threshold"] = trap_free_memory_threshold
        __props__.__dict__["trap_freeable_memory_threshold"] = trap_freeable_memory_threshold
        __props__.__dict__["trap_high_cpu_threshold"] = trap_high_cpu_threshold
        __props__.__dict__["trap_log_full_threshold"] = trap_log_full_threshold
        __props__.__dict__["trap_low_memory_threshold"] = trap_low_memory_threshold
        __props__.__dict__["vdomparam"] = vdomparam
        return Sysinfo(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="contactInfo")
    def contact_info(self) -> pulumi.Output[Optional[str]]:
        """
        Contact information.
        """
        return pulumi.get(self, "contact_info")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        System description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> pulumi.Output[str]:
        """
        Local SNMP engineID string (maximum 24 characters).
        """
        return pulumi.get(self, "engine_id")

    @property
    @pulumi.getter(name="engineIdType")
    def engine_id_type(self) -> pulumi.Output[str]:
        """
        Local SNMP engineID type (text/hex/mac). Valid values: `text`, `hex`, `mac`.
        """
        return pulumi.get(self, "engine_id_type")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        System location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable SNMP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trapFreeMemoryThreshold")
    def trap_free_memory_threshold(self) -> pulumi.Output[int]:
        """
        Free memory usage when trap is sent.
        """
        return pulumi.get(self, "trap_free_memory_threshold")

    @property
    @pulumi.getter(name="trapFreeableMemoryThreshold")
    def trap_freeable_memory_threshold(self) -> pulumi.Output[int]:
        """
        Freeable memory usage when trap is sent.
        """
        return pulumi.get(self, "trap_freeable_memory_threshold")

    @property
    @pulumi.getter(name="trapHighCpuThreshold")
    def trap_high_cpu_threshold(self) -> pulumi.Output[int]:
        """
        CPU usage when trap is sent.
        """
        return pulumi.get(self, "trap_high_cpu_threshold")

    @property
    @pulumi.getter(name="trapLogFullThreshold")
    def trap_log_full_threshold(self) -> pulumi.Output[int]:
        """
        Log disk usage when trap is sent.
        """
        return pulumi.get(self, "trap_log_full_threshold")

    @property
    @pulumi.getter(name="trapLowMemoryThreshold")
    def trap_low_memory_threshold(self) -> pulumi.Output[int]:
        """
        Memory usage when trap is sent.
        """
        return pulumi.get(self, "trap_low_memory_threshold")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

