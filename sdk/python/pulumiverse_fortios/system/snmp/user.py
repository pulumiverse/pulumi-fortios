# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 mib_view: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_hosts: Optional[pulumi.Input[str]] = None,
                 notify_hosts6: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 query_port: Optional[pulumi.Input[int]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ipv6: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_lport: Optional[pulumi.Input[int]] = None,
                 trap_rport: Optional[pulumi.Input[int]] = None,
                 trap_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['UserVdomArgs']]]] = None):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[str] auth_proto: Authentication protocol.
        :param pulumi.Input[str] auth_pwd: Password for authentication protocol.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] events: SNMP notifications (traps) to send.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_direct: Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mib_view: SNMP access control MIB view.
        :param pulumi.Input[str] name: SNMP user name.
        :param pulumi.Input[str] notify_hosts: SNMP managers to send notifications (traps) to.
        :param pulumi.Input[str] notify_hosts6: IPv6 SNMP managers to send notifications (traps) to.
        :param pulumi.Input[str] priv_proto: Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
        :param pulumi.Input[str] priv_pwd: Password for privacy (encryption) protocol.
        :param pulumi.Input[str] queries: Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] query_port: SNMPv3 query port (default = 161).
        :param pulumi.Input[str] security_level: Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
        :param pulumi.Input[str] source_ip: Source IP for SNMP trap.
        :param pulumi.Input[str] source_ipv6: Source IPv6 for SNMP trap.
        :param pulumi.Input[str] status: Enable/disable this SNMP user. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] trap_lport: SNMPv3 local trap port (default = 162).
        :param pulumi.Input[int] trap_rport: SNMPv3 trap remote port (default = 162).
        :param pulumi.Input[str] trap_status: Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input['UserVdomArgs']]] vdoms: SNMP access control VDOMs. The structure of `vdoms` block is documented below.
        """
        if auth_proto is not None:
            pulumi.set(__self__, "auth_proto", auth_proto)
        if auth_pwd is not None:
            pulumi.set(__self__, "auth_pwd", auth_pwd)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ha_direct is not None:
            pulumi.set(__self__, "ha_direct", ha_direct)
        if mib_view is not None:
            pulumi.set(__self__, "mib_view", mib_view)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_hosts is not None:
            pulumi.set(__self__, "notify_hosts", notify_hosts)
        if notify_hosts6 is not None:
            pulumi.set(__self__, "notify_hosts6", notify_hosts6)
        if priv_proto is not None:
            pulumi.set(__self__, "priv_proto", priv_proto)
        if priv_pwd is not None:
            pulumi.set(__self__, "priv_pwd", priv_pwd)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if query_port is not None:
            pulumi.set(__self__, "query_port", query_port)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ipv6 is not None:
            pulumi.set(__self__, "source_ipv6", source_ipv6)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_lport is not None:
            pulumi.set(__self__, "trap_lport", trap_lport)
        if trap_rport is not None:
            pulumi.set(__self__, "trap_rport", trap_rport)
        if trap_status is not None:
            pulumi.set(__self__, "trap_status", trap_status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication protocol.
        """
        return pulumi.get(self, "auth_proto")

    @auth_proto.setter
    def auth_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_proto", value)

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> Optional[pulumi.Input[str]]:
        """
        Password for authentication protocol.
        """
        return pulumi.get(self, "auth_pwd")

    @auth_pwd.setter
    def auth_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_pwd", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP notifications (traps) to send.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_direct")

    @ha_direct.setter
    def ha_direct(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_direct", value)

    @property
    @pulumi.getter(name="mibView")
    def mib_view(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP access control MIB view.
        """
        return pulumi.get(self, "mib_view")

    @mib_view.setter
    def mib_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mib_view", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP user name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyHosts")
    def notify_hosts(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP managers to send notifications (traps) to.
        """
        return pulumi.get(self, "notify_hosts")

    @notify_hosts.setter
    def notify_hosts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_hosts", value)

    @property
    @pulumi.getter(name="notifyHosts6")
    def notify_hosts6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 SNMP managers to send notifications (traps) to.
        """
        return pulumi.get(self, "notify_hosts6")

    @notify_hosts6.setter
    def notify_hosts6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_hosts6", value)

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
        """
        return pulumi.get(self, "priv_proto")

    @priv_proto.setter
    def priv_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_proto", value)

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> Optional[pulumi.Input[str]]:
        """
        Password for privacy (encryption) protocol.
        """
        return pulumi.get(self, "priv_pwd")

    @priv_pwd.setter
    def priv_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_pwd", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="queryPort")
    def query_port(self) -> Optional[pulumi.Input[int]]:
        """
        SNMPv3 query port (default = 161).
        """
        return pulumi.get(self, "query_port")

    @query_port.setter
    def query_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_port", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        """
        Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP for SNMP trap.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIpv6")
    def source_ipv6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 for SNMP trap.
        """
        return pulumi.get(self, "source_ipv6")

    @source_ipv6.setter
    def source_ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ipv6", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this SNMP user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapLport")
    def trap_lport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMPv3 local trap port (default = 162).
        """
        return pulumi.get(self, "trap_lport")

    @trap_lport.setter
    def trap_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_lport", value)

    @property
    @pulumi.getter(name="trapRport")
    def trap_rport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMPv3 trap remote port (default = 162).
        """
        return pulumi.get(self, "trap_rport")

    @trap_rport.setter
    def trap_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_rport", value)

    @property
    @pulumi.getter(name="trapStatus")
    def trap_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trap_status")

    @trap_status.setter
    def trap_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserVdomArgs']]]]:
        """
        SNMP access control VDOMs. The structure of `vdoms` block is documented below.
        """
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 mib_view: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_hosts: Optional[pulumi.Input[str]] = None,
                 notify_hosts6: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 query_port: Optional[pulumi.Input[int]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ipv6: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_lport: Optional[pulumi.Input[int]] = None,
                 trap_rport: Optional[pulumi.Input[int]] = None,
                 trap_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['UserVdomArgs']]]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input[str] auth_proto: Authentication protocol.
        :param pulumi.Input[str] auth_pwd: Password for authentication protocol.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] events: SNMP notifications (traps) to send.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_direct: Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mib_view: SNMP access control MIB view.
        :param pulumi.Input[str] name: SNMP user name.
        :param pulumi.Input[str] notify_hosts: SNMP managers to send notifications (traps) to.
        :param pulumi.Input[str] notify_hosts6: IPv6 SNMP managers to send notifications (traps) to.
        :param pulumi.Input[str] priv_proto: Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
        :param pulumi.Input[str] priv_pwd: Password for privacy (encryption) protocol.
        :param pulumi.Input[str] queries: Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] query_port: SNMPv3 query port (default = 161).
        :param pulumi.Input[str] security_level: Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
        :param pulumi.Input[str] source_ip: Source IP for SNMP trap.
        :param pulumi.Input[str] source_ipv6: Source IPv6 for SNMP trap.
        :param pulumi.Input[str] status: Enable/disable this SNMP user. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] trap_lport: SNMPv3 local trap port (default = 162).
        :param pulumi.Input[int] trap_rport: SNMPv3 trap remote port (default = 162).
        :param pulumi.Input[str] trap_status: Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input['UserVdomArgs']]] vdoms: SNMP access control VDOMs. The structure of `vdoms` block is documented below.
        """
        if auth_proto is not None:
            pulumi.set(__self__, "auth_proto", auth_proto)
        if auth_pwd is not None:
            pulumi.set(__self__, "auth_pwd", auth_pwd)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ha_direct is not None:
            pulumi.set(__self__, "ha_direct", ha_direct)
        if mib_view is not None:
            pulumi.set(__self__, "mib_view", mib_view)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_hosts is not None:
            pulumi.set(__self__, "notify_hosts", notify_hosts)
        if notify_hosts6 is not None:
            pulumi.set(__self__, "notify_hosts6", notify_hosts6)
        if priv_proto is not None:
            pulumi.set(__self__, "priv_proto", priv_proto)
        if priv_pwd is not None:
            pulumi.set(__self__, "priv_pwd", priv_pwd)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if query_port is not None:
            pulumi.set(__self__, "query_port", query_port)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ipv6 is not None:
            pulumi.set(__self__, "source_ipv6", source_ipv6)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_lport is not None:
            pulumi.set(__self__, "trap_lport", trap_lport)
        if trap_rport is not None:
            pulumi.set(__self__, "trap_rport", trap_rport)
        if trap_status is not None:
            pulumi.set(__self__, "trap_status", trap_status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication protocol.
        """
        return pulumi.get(self, "auth_proto")

    @auth_proto.setter
    def auth_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_proto", value)

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> Optional[pulumi.Input[str]]:
        """
        Password for authentication protocol.
        """
        return pulumi.get(self, "auth_pwd")

    @auth_pwd.setter
    def auth_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_pwd", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP notifications (traps) to send.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_direct")

    @ha_direct.setter
    def ha_direct(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_direct", value)

    @property
    @pulumi.getter(name="mibView")
    def mib_view(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP access control MIB view.
        """
        return pulumi.get(self, "mib_view")

    @mib_view.setter
    def mib_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mib_view", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP user name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyHosts")
    def notify_hosts(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP managers to send notifications (traps) to.
        """
        return pulumi.get(self, "notify_hosts")

    @notify_hosts.setter
    def notify_hosts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_hosts", value)

    @property
    @pulumi.getter(name="notifyHosts6")
    def notify_hosts6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 SNMP managers to send notifications (traps) to.
        """
        return pulumi.get(self, "notify_hosts6")

    @notify_hosts6.setter
    def notify_hosts6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_hosts6", value)

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
        """
        return pulumi.get(self, "priv_proto")

    @priv_proto.setter
    def priv_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_proto", value)

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> Optional[pulumi.Input[str]]:
        """
        Password for privacy (encryption) protocol.
        """
        return pulumi.get(self, "priv_pwd")

    @priv_pwd.setter
    def priv_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_pwd", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="queryPort")
    def query_port(self) -> Optional[pulumi.Input[int]]:
        """
        SNMPv3 query port (default = 161).
        """
        return pulumi.get(self, "query_port")

    @query_port.setter
    def query_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_port", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        """
        Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP for SNMP trap.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIpv6")
    def source_ipv6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 for SNMP trap.
        """
        return pulumi.get(self, "source_ipv6")

    @source_ipv6.setter
    def source_ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ipv6", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this SNMP user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapLport")
    def trap_lport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMPv3 local trap port (default = 162).
        """
        return pulumi.get(self, "trap_lport")

    @trap_lport.setter
    def trap_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_lport", value)

    @property
    @pulumi.getter(name="trapRport")
    def trap_rport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMPv3 trap remote port (default = 162).
        """
        return pulumi.get(self, "trap_rport")

    @trap_rport.setter
    def trap_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_rport", value)

    @property
    @pulumi.getter(name="trapStatus")
    def trap_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trap_status")

    @trap_status.setter
    def trap_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserVdomArgs']]]]:
        """
        SNMP access control VDOMs. The structure of `vdoms` block is documented below.
        """
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)


class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 mib_view: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_hosts: Optional[pulumi.Input[str]] = None,
                 notify_hosts6: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 query_port: Optional[pulumi.Input[int]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ipv6: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_lport: Optional[pulumi.Input[int]] = None,
                 trap_rport: Optional[pulumi.Input[int]] = None,
                 trap_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserVdomArgs']]]]] = None,
                 __props__=None):
        """
        SNMP user configuration.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.snmp.User("trname",
            auth_proto="sha",
            events="cpu-high mem-low log-full intf-ip vpn-tun-up vpn-tun-down ha-switch ha-hb-failure ips-signature ips-anomaly av-virus av-oversize av-pattern av-fragmented fm-if-change bgp-established bgp-backward-transition ha-member-up ha-member-down ent-conf-change av-conserve av-bypass av-oversize-passed av-oversize-blocked ips-pkg-update ips-fail-open faz-disconnect wc-ap-up wc-ap-down fswctl-session-up fswctl-session-down load-balance-real-server-down per-cpu-high",
            ha_direct="disable",
            priv_proto="aes",
            queries="disable",
            query_port=161,
            security_level="no-auth-no-priv",
            source_ip="0.0.0.0",
            source_ipv6="::",
            status="disable",
            trap_lport=162,
            trap_rport=162,
            trap_status="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SystemSnmp User can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/snmp/user:User labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/snmp/user:User labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_proto: Authentication protocol.
        :param pulumi.Input[str] auth_pwd: Password for authentication protocol.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] events: SNMP notifications (traps) to send.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_direct: Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mib_view: SNMP access control MIB view.
        :param pulumi.Input[str] name: SNMP user name.
        :param pulumi.Input[str] notify_hosts: SNMP managers to send notifications (traps) to.
        :param pulumi.Input[str] notify_hosts6: IPv6 SNMP managers to send notifications (traps) to.
        :param pulumi.Input[str] priv_proto: Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
        :param pulumi.Input[str] priv_pwd: Password for privacy (encryption) protocol.
        :param pulumi.Input[str] queries: Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] query_port: SNMPv3 query port (default = 161).
        :param pulumi.Input[str] security_level: Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
        :param pulumi.Input[str] source_ip: Source IP for SNMP trap.
        :param pulumi.Input[str] source_ipv6: Source IPv6 for SNMP trap.
        :param pulumi.Input[str] status: Enable/disable this SNMP user. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] trap_lport: SNMPv3 local trap port (default = 162).
        :param pulumi.Input[int] trap_rport: SNMPv3 trap remote port (default = 162).
        :param pulumi.Input[str] trap_status: Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserVdomArgs']]]] vdoms: SNMP access control VDOMs. The structure of `vdoms` block is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[UserArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        SNMP user configuration.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.snmp.User("trname",
            auth_proto="sha",
            events="cpu-high mem-low log-full intf-ip vpn-tun-up vpn-tun-down ha-switch ha-hb-failure ips-signature ips-anomaly av-virus av-oversize av-pattern av-fragmented fm-if-change bgp-established bgp-backward-transition ha-member-up ha-member-down ent-conf-change av-conserve av-bypass av-oversize-passed av-oversize-blocked ips-pkg-update ips-fail-open faz-disconnect wc-ap-up wc-ap-down fswctl-session-up fswctl-session-down load-balance-real-server-down per-cpu-high",
            ha_direct="disable",
            priv_proto="aes",
            queries="disable",
            query_port=161,
            security_level="no-auth-no-priv",
            source_ip="0.0.0.0",
            source_ipv6="::",
            status="disable",
            trap_lport=162,
            trap_rport=162,
            trap_status="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SystemSnmp User can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/snmp/user:User labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/snmp/user:User labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 mib_view: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_hosts: Optional[pulumi.Input[str]] = None,
                 notify_hosts6: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 query_port: Optional[pulumi.Input[int]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ipv6: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_lport: Optional[pulumi.Input[int]] = None,
                 trap_rport: Optional[pulumi.Input[int]] = None,
                 trap_status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserVdomArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            __props__.__dict__["auth_proto"] = auth_proto
            __props__.__dict__["auth_pwd"] = None if auth_pwd is None else pulumi.Output.secret(auth_pwd)
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["events"] = events
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ha_direct"] = ha_direct
            __props__.__dict__["mib_view"] = mib_view
            __props__.__dict__["name"] = name
            __props__.__dict__["notify_hosts"] = notify_hosts
            __props__.__dict__["notify_hosts6"] = notify_hosts6
            __props__.__dict__["priv_proto"] = priv_proto
            __props__.__dict__["priv_pwd"] = None if priv_pwd is None else pulumi.Output.secret(priv_pwd)
            __props__.__dict__["queries"] = queries
            __props__.__dict__["query_port"] = query_port
            __props__.__dict__["security_level"] = security_level
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["source_ipv6"] = source_ipv6
            __props__.__dict__["status"] = status
            __props__.__dict__["trap_lport"] = trap_lport
            __props__.__dict__["trap_rport"] = trap_rport
            __props__.__dict__["trap_status"] = trap_status
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vdoms"] = vdoms
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authPwd", "privPwd"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(User, __self__).__init__(
            'fortios:system/snmp/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_proto: Optional[pulumi.Input[str]] = None,
            auth_pwd: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            events: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ha_direct: Optional[pulumi.Input[str]] = None,
            mib_view: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notify_hosts: Optional[pulumi.Input[str]] = None,
            notify_hosts6: Optional[pulumi.Input[str]] = None,
            priv_proto: Optional[pulumi.Input[str]] = None,
            priv_pwd: Optional[pulumi.Input[str]] = None,
            queries: Optional[pulumi.Input[str]] = None,
            query_port: Optional[pulumi.Input[int]] = None,
            security_level: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            source_ipv6: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            trap_lport: Optional[pulumi.Input[int]] = None,
            trap_rport: Optional[pulumi.Input[int]] = None,
            trap_status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserVdomArgs']]]]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_proto: Authentication protocol.
        :param pulumi.Input[str] auth_pwd: Password for authentication protocol.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] events: SNMP notifications (traps) to send.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_direct: Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mib_view: SNMP access control MIB view.
        :param pulumi.Input[str] name: SNMP user name.
        :param pulumi.Input[str] notify_hosts: SNMP managers to send notifications (traps) to.
        :param pulumi.Input[str] notify_hosts6: IPv6 SNMP managers to send notifications (traps) to.
        :param pulumi.Input[str] priv_proto: Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
        :param pulumi.Input[str] priv_pwd: Password for privacy (encryption) protocol.
        :param pulumi.Input[str] queries: Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] query_port: SNMPv3 query port (default = 161).
        :param pulumi.Input[str] security_level: Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
        :param pulumi.Input[str] source_ip: Source IP for SNMP trap.
        :param pulumi.Input[str] source_ipv6: Source IPv6 for SNMP trap.
        :param pulumi.Input[str] status: Enable/disable this SNMP user. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] trap_lport: SNMPv3 local trap port (default = 162).
        :param pulumi.Input[int] trap_rport: SNMPv3 trap remote port (default = 162).
        :param pulumi.Input[str] trap_status: Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserVdomArgs']]]] vdoms: SNMP access control VDOMs. The structure of `vdoms` block is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["auth_proto"] = auth_proto
        __props__.__dict__["auth_pwd"] = auth_pwd
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["events"] = events
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ha_direct"] = ha_direct
        __props__.__dict__["mib_view"] = mib_view
        __props__.__dict__["name"] = name
        __props__.__dict__["notify_hosts"] = notify_hosts
        __props__.__dict__["notify_hosts6"] = notify_hosts6
        __props__.__dict__["priv_proto"] = priv_proto
        __props__.__dict__["priv_pwd"] = priv_pwd
        __props__.__dict__["queries"] = queries
        __props__.__dict__["query_port"] = query_port
        __props__.__dict__["security_level"] = security_level
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["source_ipv6"] = source_ipv6
        __props__.__dict__["status"] = status
        __props__.__dict__["trap_lport"] = trap_lport
        __props__.__dict__["trap_rport"] = trap_rport
        __props__.__dict__["trap_status"] = trap_status
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vdoms"] = vdoms
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> pulumi.Output[str]:
        """
        Authentication protocol.
        """
        return pulumi.get(self, "auth_proto")

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> pulumi.Output[Optional[str]]:
        """
        Password for authentication protocol.
        """
        return pulumi.get(self, "auth_pwd")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def events(self) -> pulumi.Output[str]:
        """
        SNMP notifications (traps) to send.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> pulumi.Output[str]:
        """
        Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_direct")

    @property
    @pulumi.getter(name="mibView")
    def mib_view(self) -> pulumi.Output[str]:
        """
        SNMP access control MIB view.
        """
        return pulumi.get(self, "mib_view")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        SNMP user name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifyHosts")
    def notify_hosts(self) -> pulumi.Output[str]:
        """
        SNMP managers to send notifications (traps) to.
        """
        return pulumi.get(self, "notify_hosts")

    @property
    @pulumi.getter(name="notifyHosts6")
    def notify_hosts6(self) -> pulumi.Output[str]:
        """
        IPv6 SNMP managers to send notifications (traps) to.
        """
        return pulumi.get(self, "notify_hosts6")

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> pulumi.Output[str]:
        """
        Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
        """
        return pulumi.get(self, "priv_proto")

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> pulumi.Output[Optional[str]]:
        """
        Password for privacy (encryption) protocol.
        """
        return pulumi.get(self, "priv_pwd")

    @property
    @pulumi.getter
    def queries(self) -> pulumi.Output[str]:
        """
        Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="queryPort")
    def query_port(self) -> pulumi.Output[int]:
        """
        SNMPv3 query port (default = 161).
        """
        return pulumi.get(self, "query_port")

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> pulumi.Output[str]:
        """
        Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
        """
        return pulumi.get(self, "security_level")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        """
        Source IP for SNMP trap.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourceIpv6")
    def source_ipv6(self) -> pulumi.Output[str]:
        """
        Source IPv6 for SNMP trap.
        """
        return pulumi.get(self, "source_ipv6")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable this SNMP user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trapLport")
    def trap_lport(self) -> pulumi.Output[int]:
        """
        SNMPv3 local trap port (default = 162).
        """
        return pulumi.get(self, "trap_lport")

    @property
    @pulumi.getter(name="trapRport")
    def trap_rport(self) -> pulumi.Output[int]:
        """
        SNMPv3 trap remote port (default = 162).
        """
        return pulumi.get(self, "trap_rport")

    @property
    @pulumi.getter(name="trapStatus")
    def trap_status(self) -> pulumi.Output[str]:
        """
        Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trap_status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vdoms(self) -> pulumi.Output[Optional[Sequence['outputs.UserVdom']]]:
        """
        SNMP access control VDOMs. The structure of `vdoms` block is documented below.
        """
        return pulumi.get(self, "vdoms")

