# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SdnconnectorArgs', 'Sdnconnector']

@pulumi.input_type
class SdnconnectorArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 alt_resource_ip: Optional[pulumi.Input[str]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 azure_region: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 compartment_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorCompartmentListArgs']]]] = None,
                 compute_generation: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 external_account_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalAccountListArgs']]]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalIpArgs']]]] = None,
                 forwarding_rules: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorForwardingRuleArgs']]]] = None,
                 gcp_project: Optional[pulumi.Input[str]] = None,
                 gcp_project_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorGcpProjectListArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ha_status: Optional[pulumi.Input[str]] = None,
                 ibm_region: Optional[pulumi.Input[str]] = None,
                 ibm_region_gen1: Optional[pulumi.Input[str]] = None,
                 ibm_region_gen2: Optional[pulumi.Input[str]] = None,
                 key_passwd: Optional[pulumi.Input[str]] = None,
                 login_endpoint: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorNicArgs']]]] = None,
                 oci_cert: Optional[pulumi.Input[str]] = None,
                 oci_fingerprint: Optional[pulumi.Input[str]] = None,
                 oci_region: Optional[pulumi.Input[str]] = None,
                 oci_region_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorOciRegionListArgs']]]] = None,
                 oci_region_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 resource_url: Optional[pulumi.Input[str]] = None,
                 route_tables: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteTableArgs']]]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteArgs']]]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 secret_token: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_ca_cert: Optional[pulumi.Input[str]] = None,
                 server_cert: Optional[pulumi.Input[str]] = None,
                 server_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorServerListArgs']]]] = None,
                 server_port: Optional[pulumi.Input[int]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 update_interval: Optional[pulumi.Input[int]] = None,
                 use_metadata_iam: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vcenter_password: Optional[pulumi.Input[str]] = None,
                 vcenter_server: Optional[pulumi.Input[str]] = None,
                 vcenter_username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 verify_certificate: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Sdnconnector resource.
        :param pulumi.Input[str] status: Enable/disable connection to the remote SDN connector. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] type: Type of SDN connector.
        :param pulumi.Input[str] access_key: AWS access key ID.
        :param pulumi.Input[str] alt_resource_ip: Enable/disable AWS alternative resource IP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] api_key: IBM cloud API key or service ID API key.
        :param pulumi.Input[str] azure_region: Azure server region. Valid values: `global`, `china`, `germany`, `usgov`, `local`.
        :param pulumi.Input[str] client_id: Azure client ID (application ID).
        :param pulumi.Input[str] client_secret: Azure client secret (application key).
        :param pulumi.Input[str] compartment_id: Compartment ID.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorCompartmentListArgs']]] compartment_lists: Configure OCI compartment list. The structure of `compartment_list` block is documented below.
        :param pulumi.Input[int] compute_generation: Compute generation for IBM cloud infrastructure.
        :param pulumi.Input[str] domain: Domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalAccountListArgs']]] external_account_lists: Configure AWS external account list. The structure of `external_account_list` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalIpArgs']]] external_ips: Configure GCP external IP. The structure of `external_ip` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorForwardingRuleArgs']]] forwarding_rules: Configure GCP forwarding rule. The structure of `forwarding_rule` block is documented below.
        :param pulumi.Input[str] gcp_project: GCP project name.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorGcpProjectListArgs']]] gcp_project_lists: Configure GCP project list. The structure of `gcp_project_list` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_name: Group name of computers.
        :param pulumi.Input[str] ha_status: Enable/disable use for FortiGate HA service. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ibm_region: IBM cloud region name.
        :param pulumi.Input[str] ibm_region_gen1: IBM cloud compute generation 1 region name. Valid values: `us-south`, `us-east`, `germany`, `great-britain`, `japan`, `australia`.
        :param pulumi.Input[str] ibm_region_gen2: IBM cloud compute generation 2 region name. Valid values: `us-south`, `us-east`, `great-britain`.
        :param pulumi.Input[str] key_passwd: Private key password.
        :param pulumi.Input[str] login_endpoint: Azure Stack login endpoint.
        :param pulumi.Input[str] name: SDN connector name.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorNicArgs']]] nics: Configure Azure network interface. The structure of `nic` block is documented below.
        :param pulumi.Input[str] oci_cert: OCI certificate.
        :param pulumi.Input[str] oci_fingerprint: OCI pubkey fingerprint.
        :param pulumi.Input[str] oci_region: OCI server region.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorOciRegionListArgs']]] oci_region_lists: Configure OCI region list. The structure of `oci_region_list` block is documented below.
        :param pulumi.Input[str] oci_region_type: OCI region type. Valid values: `commercial`, `government`.
        :param pulumi.Input[str] password: Password of the remote SDN connector as login credentials.
        :param pulumi.Input[str] private_key: Private key of GCP service account.
        :param pulumi.Input[str] proxy: SDN proxy.
        :param pulumi.Input[str] region: AWS region name.
        :param pulumi.Input[str] resource_group: Azure resource group.
        :param pulumi.Input[str] resource_url: Azure Stack resource URL.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteTableArgs']]] route_tables: Configure Azure route table. The structure of `route_table` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteArgs']]] routes: Configure GCP route. The structure of `route` block is documented below.
        :param pulumi.Input[str] secret_key: AWS secret access key.
        :param pulumi.Input[str] secret_token: Secret token of Kubernetes service account.
        :param pulumi.Input[str] server: Server address of the remote SDN connector.
        :param pulumi.Input[str] server_ca_cert: Trust only those servers whose certificate is directly/indirectly signed by this certificate.
        :param pulumi.Input[str] server_cert: Trust servers that contain this certificate only.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorServerListArgs']]] server_lists: Server address list of the remote SDN connector. The structure of `server_list` block is documented below.
        :param pulumi.Input[int] server_port: Port number of the remote SDN connector.
        :param pulumi.Input[str] service_account: GCP service account email.
        :param pulumi.Input[str] subscription_id: Azure subscription ID.
        :param pulumi.Input[str] tenant_id: Tenant ID (directory ID).
        :param pulumi.Input[int] update_interval: Dynamic object update interval (0 - 3600 sec, 0 means disabled, default = 60).
        :param pulumi.Input[str] use_metadata_iam: Enable/disable using IAM role from metadata to call API. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] user_id: User ID.
        :param pulumi.Input[str] username: Username of the remote SDN connector as login credentials.
        :param pulumi.Input[str] vcenter_password: vCenter server password for NSX quarantine.
        :param pulumi.Input[str] vcenter_server: vCenter server address for NSX quarantine.
        :param pulumi.Input[str] vcenter_username: vCenter server username for NSX quarantine.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] verify_certificate: Enable/disable server certificate verification. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vpc_id: AWS VPC ID.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if alt_resource_ip is not None:
            pulumi.set(__self__, "alt_resource_ip", alt_resource_ip)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if azure_region is not None:
            pulumi.set(__self__, "azure_region", azure_region)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compartment_lists is not None:
            pulumi.set(__self__, "compartment_lists", compartment_lists)
        if compute_generation is not None:
            pulumi.set(__self__, "compute_generation", compute_generation)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if external_account_lists is not None:
            pulumi.set(__self__, "external_account_lists", external_account_lists)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if forwarding_rules is not None:
            pulumi.set(__self__, "forwarding_rules", forwarding_rules)
        if gcp_project is not None:
            pulumi.set(__self__, "gcp_project", gcp_project)
        if gcp_project_lists is not None:
            pulumi.set(__self__, "gcp_project_lists", gcp_project_lists)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if ha_status is not None:
            pulumi.set(__self__, "ha_status", ha_status)
        if ibm_region is not None:
            pulumi.set(__self__, "ibm_region", ibm_region)
        if ibm_region_gen1 is not None:
            pulumi.set(__self__, "ibm_region_gen1", ibm_region_gen1)
        if ibm_region_gen2 is not None:
            pulumi.set(__self__, "ibm_region_gen2", ibm_region_gen2)
        if key_passwd is not None:
            pulumi.set(__self__, "key_passwd", key_passwd)
        if login_endpoint is not None:
            pulumi.set(__self__, "login_endpoint", login_endpoint)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nics is not None:
            pulumi.set(__self__, "nics", nics)
        if oci_cert is not None:
            pulumi.set(__self__, "oci_cert", oci_cert)
        if oci_fingerprint is not None:
            pulumi.set(__self__, "oci_fingerprint", oci_fingerprint)
        if oci_region is not None:
            pulumi.set(__self__, "oci_region", oci_region)
        if oci_region_lists is not None:
            pulumi.set(__self__, "oci_region_lists", oci_region_lists)
        if oci_region_type is not None:
            pulumi.set(__self__, "oci_region_type", oci_region_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_url is not None:
            pulumi.set(__self__, "resource_url", resource_url)
        if route_tables is not None:
            pulumi.set(__self__, "route_tables", route_tables)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if secret_token is not None:
            pulumi.set(__self__, "secret_token", secret_token)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if server_ca_cert is not None:
            pulumi.set(__self__, "server_ca_cert", server_ca_cert)
        if server_cert is not None:
            pulumi.set(__self__, "server_cert", server_cert)
        if server_lists is not None:
            pulumi.set(__self__, "server_lists", server_lists)
        if server_port is not None:
            pulumi.set(__self__, "server_port", server_port)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if update_interval is not None:
            pulumi.set(__self__, "update_interval", update_interval)
        if use_metadata_iam is not None:
            pulumi.set(__self__, "use_metadata_iam", use_metadata_iam)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vcenter_password is not None:
            pulumi.set(__self__, "vcenter_password", vcenter_password)
        if vcenter_server is not None:
            pulumi.set(__self__, "vcenter_server", vcenter_server)
        if vcenter_username is not None:
            pulumi.set(__self__, "vcenter_username", vcenter_username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if verify_certificate is not None:
            pulumi.set(__self__, "verify_certificate", verify_certificate)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Enable/disable connection to the remote SDN connector. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of SDN connector.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS access key ID.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="altResourceIp")
    def alt_resource_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AWS alternative resource IP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "alt_resource_ip")

    @alt_resource_ip.setter
    def alt_resource_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_resource_ip", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        IBM cloud API key or service ID API key.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="azureRegion")
    def azure_region(self) -> Optional[pulumi.Input[str]]:
        """
        Azure server region. Valid values: `global`, `china`, `germany`, `usgov`, `local`.
        """
        return pulumi.get(self, "azure_region")

    @azure_region.setter
    def azure_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_region", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure client ID (application ID).
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Azure client secret (application key).
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        Compartment ID.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="compartmentLists")
    def compartment_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorCompartmentListArgs']]]]:
        """
        Configure OCI compartment list. The structure of `compartment_list` block is documented below.
        """
        return pulumi.get(self, "compartment_lists")

    @compartment_lists.setter
    def compartment_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorCompartmentListArgs']]]]):
        pulumi.set(self, "compartment_lists", value)

    @property
    @pulumi.getter(name="computeGeneration")
    def compute_generation(self) -> Optional[pulumi.Input[int]]:
        """
        Compute generation for IBM cloud infrastructure.
        """
        return pulumi.get(self, "compute_generation")

    @compute_generation.setter
    def compute_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute_generation", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="externalAccountLists")
    def external_account_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalAccountListArgs']]]]:
        """
        Configure AWS external account list. The structure of `external_account_list` block is documented below.
        """
        return pulumi.get(self, "external_account_lists")

    @external_account_lists.setter
    def external_account_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalAccountListArgs']]]]):
        pulumi.set(self, "external_account_lists", value)

    @property
    @pulumi.getter(name="externalIps")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalIpArgs']]]]:
        """
        Configure GCP external IP. The structure of `external_ip` block is documented below.
        """
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalIpArgs']]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="forwardingRules")
    def forwarding_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorForwardingRuleArgs']]]]:
        """
        Configure GCP forwarding rule. The structure of `forwarding_rule` block is documented below.
        """
        return pulumi.get(self, "forwarding_rules")

    @forwarding_rules.setter
    def forwarding_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorForwardingRuleArgs']]]]):
        pulumi.set(self, "forwarding_rules", value)

    @property
    @pulumi.getter(name="gcpProject")
    def gcp_project(self) -> Optional[pulumi.Input[str]]:
        """
        GCP project name.
        """
        return pulumi.get(self, "gcp_project")

    @gcp_project.setter
    def gcp_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_project", value)

    @property
    @pulumi.getter(name="gcpProjectLists")
    def gcp_project_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorGcpProjectListArgs']]]]:
        """
        Configure GCP project list. The structure of `gcp_project_list` block is documented below.
        """
        return pulumi.get(self, "gcp_project_lists")

    @gcp_project_lists.setter
    def gcp_project_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorGcpProjectListArgs']]]]):
        pulumi.set(self, "gcp_project_lists", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name of computers.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="haStatus")
    def ha_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use for FortiGate HA service. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ha_status")

    @ha_status.setter
    def ha_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_status", value)

    @property
    @pulumi.getter(name="ibmRegion")
    def ibm_region(self) -> Optional[pulumi.Input[str]]:
        """
        IBM cloud region name.
        """
        return pulumi.get(self, "ibm_region")

    @ibm_region.setter
    def ibm_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibm_region", value)

    @property
    @pulumi.getter(name="ibmRegionGen1")
    def ibm_region_gen1(self) -> Optional[pulumi.Input[str]]:
        """
        IBM cloud compute generation 1 region name. Valid values: `us-south`, `us-east`, `germany`, `great-britain`, `japan`, `australia`.
        """
        return pulumi.get(self, "ibm_region_gen1")

    @ibm_region_gen1.setter
    def ibm_region_gen1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibm_region_gen1", value)

    @property
    @pulumi.getter(name="ibmRegionGen2")
    def ibm_region_gen2(self) -> Optional[pulumi.Input[str]]:
        """
        IBM cloud compute generation 2 region name. Valid values: `us-south`, `us-east`, `great-britain`.
        """
        return pulumi.get(self, "ibm_region_gen2")

    @ibm_region_gen2.setter
    def ibm_region_gen2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibm_region_gen2", value)

    @property
    @pulumi.getter(name="keyPasswd")
    def key_passwd(self) -> Optional[pulumi.Input[str]]:
        """
        Private key password.
        """
        return pulumi.get(self, "key_passwd")

    @key_passwd.setter
    def key_passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_passwd", value)

    @property
    @pulumi.getter(name="loginEndpoint")
    def login_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Stack login endpoint.
        """
        return pulumi.get(self, "login_endpoint")

    @login_endpoint.setter
    def login_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_endpoint", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SDN connector name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorNicArgs']]]]:
        """
        Configure Azure network interface. The structure of `nic` block is documented below.
        """
        return pulumi.get(self, "nics")

    @nics.setter
    def nics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorNicArgs']]]]):
        pulumi.set(self, "nics", value)

    @property
    @pulumi.getter(name="ociCert")
    def oci_cert(self) -> Optional[pulumi.Input[str]]:
        """
        OCI certificate.
        """
        return pulumi.get(self, "oci_cert")

    @oci_cert.setter
    def oci_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oci_cert", value)

    @property
    @pulumi.getter(name="ociFingerprint")
    def oci_fingerprint(self) -> Optional[pulumi.Input[str]]:
        """
        OCI pubkey fingerprint.
        """
        return pulumi.get(self, "oci_fingerprint")

    @oci_fingerprint.setter
    def oci_fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oci_fingerprint", value)

    @property
    @pulumi.getter(name="ociRegion")
    def oci_region(self) -> Optional[pulumi.Input[str]]:
        """
        OCI server region.
        """
        return pulumi.get(self, "oci_region")

    @oci_region.setter
    def oci_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oci_region", value)

    @property
    @pulumi.getter(name="ociRegionLists")
    def oci_region_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorOciRegionListArgs']]]]:
        """
        Configure OCI region list. The structure of `oci_region_list` block is documented below.
        """
        return pulumi.get(self, "oci_region_lists")

    @oci_region_lists.setter
    def oci_region_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorOciRegionListArgs']]]]):
        pulumi.set(self, "oci_region_lists", value)

    @property
    @pulumi.getter(name="ociRegionType")
    def oci_region_type(self) -> Optional[pulumi.Input[str]]:
        """
        OCI region type. Valid values: `commercial`, `government`.
        """
        return pulumi.get(self, "oci_region_type")

    @oci_region_type.setter
    def oci_region_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oci_region_type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the remote SDN connector as login credentials.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key of GCP service account.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        """
        SDN proxy.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        AWS region name.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Azure resource group.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="resourceUrl")
    def resource_url(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Stack resource URL.
        """
        return pulumi.get(self, "resource_url")

    @resource_url.setter
    def resource_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_url", value)

    @property
    @pulumi.getter(name="routeTables")
    def route_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteTableArgs']]]]:
        """
        Configure Azure route table. The structure of `route_table` block is documented below.
        """
        return pulumi.get(self, "route_tables")

    @route_tables.setter
    def route_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteTableArgs']]]]):
        pulumi.set(self, "route_tables", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteArgs']]]]:
        """
        Configure GCP route. The structure of `route` block is documented below.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteArgs']]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS secret access key.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> Optional[pulumi.Input[str]]:
        """
        Secret token of Kubernetes service account.
        """
        return pulumi.get(self, "secret_token")

    @secret_token.setter
    def secret_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_token", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server address of the remote SDN connector.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="serverCaCert")
    def server_ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Trust only those servers whose certificate is directly/indirectly signed by this certificate.
        """
        return pulumi.get(self, "server_ca_cert")

    @server_ca_cert.setter
    def server_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_ca_cert", value)

    @property
    @pulumi.getter(name="serverCert")
    def server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Trust servers that contain this certificate only.
        """
        return pulumi.get(self, "server_cert")

    @server_cert.setter
    def server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_cert", value)

    @property
    @pulumi.getter(name="serverLists")
    def server_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorServerListArgs']]]]:
        """
        Server address list of the remote SDN connector. The structure of `server_list` block is documented below.
        """
        return pulumi.get(self, "server_lists")

    @server_lists.setter
    def server_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorServerListArgs']]]]):
        pulumi.set(self, "server_lists", value)

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number of the remote SDN connector.
        """
        return pulumi.get(self, "server_port")

    @server_port.setter
    def server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "server_port", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        GCP service account email.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure subscription ID.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tenant ID (directory ID).
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="updateInterval")
    def update_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Dynamic object update interval (0 - 3600 sec, 0 means disabled, default = 60).
        """
        return pulumi.get(self, "update_interval")

    @update_interval.setter
    def update_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_interval", value)

    @property
    @pulumi.getter(name="useMetadataIam")
    def use_metadata_iam(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable using IAM role from metadata to call API. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "use_metadata_iam")

    @use_metadata_iam.setter
    def use_metadata_iam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_metadata_iam", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        User ID.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username of the remote SDN connector as login credentials.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="vcenterPassword")
    def vcenter_password(self) -> Optional[pulumi.Input[str]]:
        """
        vCenter server password for NSX quarantine.
        """
        return pulumi.get(self, "vcenter_password")

    @vcenter_password.setter
    def vcenter_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter_password", value)

    @property
    @pulumi.getter(name="vcenterServer")
    def vcenter_server(self) -> Optional[pulumi.Input[str]]:
        """
        vCenter server address for NSX quarantine.
        """
        return pulumi.get(self, "vcenter_server")

    @vcenter_server.setter
    def vcenter_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter_server", value)

    @property
    @pulumi.getter(name="vcenterUsername")
    def vcenter_username(self) -> Optional[pulumi.Input[str]]:
        """
        vCenter server username for NSX quarantine.
        """
        return pulumi.get(self, "vcenter_username")

    @vcenter_username.setter
    def vcenter_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter_username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="verifyCertificate")
    def verify_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable server certificate verification. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "verify_certificate")

    @verify_certificate.setter
    def verify_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_certificate", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        AWS VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _SdnconnectorState:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 alt_resource_ip: Optional[pulumi.Input[str]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 azure_region: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 compartment_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorCompartmentListArgs']]]] = None,
                 compute_generation: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 external_account_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalAccountListArgs']]]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalIpArgs']]]] = None,
                 forwarding_rules: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorForwardingRuleArgs']]]] = None,
                 gcp_project: Optional[pulumi.Input[str]] = None,
                 gcp_project_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorGcpProjectListArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ha_status: Optional[pulumi.Input[str]] = None,
                 ibm_region: Optional[pulumi.Input[str]] = None,
                 ibm_region_gen1: Optional[pulumi.Input[str]] = None,
                 ibm_region_gen2: Optional[pulumi.Input[str]] = None,
                 key_passwd: Optional[pulumi.Input[str]] = None,
                 login_endpoint: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorNicArgs']]]] = None,
                 oci_cert: Optional[pulumi.Input[str]] = None,
                 oci_fingerprint: Optional[pulumi.Input[str]] = None,
                 oci_region: Optional[pulumi.Input[str]] = None,
                 oci_region_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorOciRegionListArgs']]]] = None,
                 oci_region_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 resource_url: Optional[pulumi.Input[str]] = None,
                 route_tables: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteTableArgs']]]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteArgs']]]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 secret_token: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_ca_cert: Optional[pulumi.Input[str]] = None,
                 server_cert: Optional[pulumi.Input[str]] = None,
                 server_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorServerListArgs']]]] = None,
                 server_port: Optional[pulumi.Input[int]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 update_interval: Optional[pulumi.Input[int]] = None,
                 use_metadata_iam: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vcenter_password: Optional[pulumi.Input[str]] = None,
                 vcenter_server: Optional[pulumi.Input[str]] = None,
                 vcenter_username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 verify_certificate: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Sdnconnector resources.
        :param pulumi.Input[str] access_key: AWS access key ID.
        :param pulumi.Input[str] alt_resource_ip: Enable/disable AWS alternative resource IP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] api_key: IBM cloud API key or service ID API key.
        :param pulumi.Input[str] azure_region: Azure server region. Valid values: `global`, `china`, `germany`, `usgov`, `local`.
        :param pulumi.Input[str] client_id: Azure client ID (application ID).
        :param pulumi.Input[str] client_secret: Azure client secret (application key).
        :param pulumi.Input[str] compartment_id: Compartment ID.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorCompartmentListArgs']]] compartment_lists: Configure OCI compartment list. The structure of `compartment_list` block is documented below.
        :param pulumi.Input[int] compute_generation: Compute generation for IBM cloud infrastructure.
        :param pulumi.Input[str] domain: Domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalAccountListArgs']]] external_account_lists: Configure AWS external account list. The structure of `external_account_list` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalIpArgs']]] external_ips: Configure GCP external IP. The structure of `external_ip` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorForwardingRuleArgs']]] forwarding_rules: Configure GCP forwarding rule. The structure of `forwarding_rule` block is documented below.
        :param pulumi.Input[str] gcp_project: GCP project name.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorGcpProjectListArgs']]] gcp_project_lists: Configure GCP project list. The structure of `gcp_project_list` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_name: Group name of computers.
        :param pulumi.Input[str] ha_status: Enable/disable use for FortiGate HA service. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ibm_region: IBM cloud region name.
        :param pulumi.Input[str] ibm_region_gen1: IBM cloud compute generation 1 region name. Valid values: `us-south`, `us-east`, `germany`, `great-britain`, `japan`, `australia`.
        :param pulumi.Input[str] ibm_region_gen2: IBM cloud compute generation 2 region name. Valid values: `us-south`, `us-east`, `great-britain`.
        :param pulumi.Input[str] key_passwd: Private key password.
        :param pulumi.Input[str] login_endpoint: Azure Stack login endpoint.
        :param pulumi.Input[str] name: SDN connector name.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorNicArgs']]] nics: Configure Azure network interface. The structure of `nic` block is documented below.
        :param pulumi.Input[str] oci_cert: OCI certificate.
        :param pulumi.Input[str] oci_fingerprint: OCI pubkey fingerprint.
        :param pulumi.Input[str] oci_region: OCI server region.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorOciRegionListArgs']]] oci_region_lists: Configure OCI region list. The structure of `oci_region_list` block is documented below.
        :param pulumi.Input[str] oci_region_type: OCI region type. Valid values: `commercial`, `government`.
        :param pulumi.Input[str] password: Password of the remote SDN connector as login credentials.
        :param pulumi.Input[str] private_key: Private key of GCP service account.
        :param pulumi.Input[str] proxy: SDN proxy.
        :param pulumi.Input[str] region: AWS region name.
        :param pulumi.Input[str] resource_group: Azure resource group.
        :param pulumi.Input[str] resource_url: Azure Stack resource URL.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteTableArgs']]] route_tables: Configure Azure route table. The structure of `route_table` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteArgs']]] routes: Configure GCP route. The structure of `route` block is documented below.
        :param pulumi.Input[str] secret_key: AWS secret access key.
        :param pulumi.Input[str] secret_token: Secret token of Kubernetes service account.
        :param pulumi.Input[str] server: Server address of the remote SDN connector.
        :param pulumi.Input[str] server_ca_cert: Trust only those servers whose certificate is directly/indirectly signed by this certificate.
        :param pulumi.Input[str] server_cert: Trust servers that contain this certificate only.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorServerListArgs']]] server_lists: Server address list of the remote SDN connector. The structure of `server_list` block is documented below.
        :param pulumi.Input[int] server_port: Port number of the remote SDN connector.
        :param pulumi.Input[str] service_account: GCP service account email.
        :param pulumi.Input[str] status: Enable/disable connection to the remote SDN connector. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] subscription_id: Azure subscription ID.
        :param pulumi.Input[str] tenant_id: Tenant ID (directory ID).
        :param pulumi.Input[str] type: Type of SDN connector.
        :param pulumi.Input[int] update_interval: Dynamic object update interval (0 - 3600 sec, 0 means disabled, default = 60).
        :param pulumi.Input[str] use_metadata_iam: Enable/disable using IAM role from metadata to call API. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] user_id: User ID.
        :param pulumi.Input[str] username: Username of the remote SDN connector as login credentials.
        :param pulumi.Input[str] vcenter_password: vCenter server password for NSX quarantine.
        :param pulumi.Input[str] vcenter_server: vCenter server address for NSX quarantine.
        :param pulumi.Input[str] vcenter_username: vCenter server username for NSX quarantine.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] verify_certificate: Enable/disable server certificate verification. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vpc_id: AWS VPC ID.
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if alt_resource_ip is not None:
            pulumi.set(__self__, "alt_resource_ip", alt_resource_ip)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if azure_region is not None:
            pulumi.set(__self__, "azure_region", azure_region)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compartment_lists is not None:
            pulumi.set(__self__, "compartment_lists", compartment_lists)
        if compute_generation is not None:
            pulumi.set(__self__, "compute_generation", compute_generation)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if external_account_lists is not None:
            pulumi.set(__self__, "external_account_lists", external_account_lists)
        if external_ips is not None:
            pulumi.set(__self__, "external_ips", external_ips)
        if forwarding_rules is not None:
            pulumi.set(__self__, "forwarding_rules", forwarding_rules)
        if gcp_project is not None:
            pulumi.set(__self__, "gcp_project", gcp_project)
        if gcp_project_lists is not None:
            pulumi.set(__self__, "gcp_project_lists", gcp_project_lists)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if ha_status is not None:
            pulumi.set(__self__, "ha_status", ha_status)
        if ibm_region is not None:
            pulumi.set(__self__, "ibm_region", ibm_region)
        if ibm_region_gen1 is not None:
            pulumi.set(__self__, "ibm_region_gen1", ibm_region_gen1)
        if ibm_region_gen2 is not None:
            pulumi.set(__self__, "ibm_region_gen2", ibm_region_gen2)
        if key_passwd is not None:
            pulumi.set(__self__, "key_passwd", key_passwd)
        if login_endpoint is not None:
            pulumi.set(__self__, "login_endpoint", login_endpoint)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nics is not None:
            pulumi.set(__self__, "nics", nics)
        if oci_cert is not None:
            pulumi.set(__self__, "oci_cert", oci_cert)
        if oci_fingerprint is not None:
            pulumi.set(__self__, "oci_fingerprint", oci_fingerprint)
        if oci_region is not None:
            pulumi.set(__self__, "oci_region", oci_region)
        if oci_region_lists is not None:
            pulumi.set(__self__, "oci_region_lists", oci_region_lists)
        if oci_region_type is not None:
            pulumi.set(__self__, "oci_region_type", oci_region_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if resource_url is not None:
            pulumi.set(__self__, "resource_url", resource_url)
        if route_tables is not None:
            pulumi.set(__self__, "route_tables", route_tables)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if secret_token is not None:
            pulumi.set(__self__, "secret_token", secret_token)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if server_ca_cert is not None:
            pulumi.set(__self__, "server_ca_cert", server_ca_cert)
        if server_cert is not None:
            pulumi.set(__self__, "server_cert", server_cert)
        if server_lists is not None:
            pulumi.set(__self__, "server_lists", server_lists)
        if server_port is not None:
            pulumi.set(__self__, "server_port", server_port)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if update_interval is not None:
            pulumi.set(__self__, "update_interval", update_interval)
        if use_metadata_iam is not None:
            pulumi.set(__self__, "use_metadata_iam", use_metadata_iam)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vcenter_password is not None:
            pulumi.set(__self__, "vcenter_password", vcenter_password)
        if vcenter_server is not None:
            pulumi.set(__self__, "vcenter_server", vcenter_server)
        if vcenter_username is not None:
            pulumi.set(__self__, "vcenter_username", vcenter_username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if verify_certificate is not None:
            pulumi.set(__self__, "verify_certificate", verify_certificate)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS access key ID.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="altResourceIp")
    def alt_resource_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AWS alternative resource IP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "alt_resource_ip")

    @alt_resource_ip.setter
    def alt_resource_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_resource_ip", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        IBM cloud API key or service ID API key.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="azureRegion")
    def azure_region(self) -> Optional[pulumi.Input[str]]:
        """
        Azure server region. Valid values: `global`, `china`, `germany`, `usgov`, `local`.
        """
        return pulumi.get(self, "azure_region")

    @azure_region.setter
    def azure_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_region", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure client ID (application ID).
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Azure client secret (application key).
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        Compartment ID.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="compartmentLists")
    def compartment_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorCompartmentListArgs']]]]:
        """
        Configure OCI compartment list. The structure of `compartment_list` block is documented below.
        """
        return pulumi.get(self, "compartment_lists")

    @compartment_lists.setter
    def compartment_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorCompartmentListArgs']]]]):
        pulumi.set(self, "compartment_lists", value)

    @property
    @pulumi.getter(name="computeGeneration")
    def compute_generation(self) -> Optional[pulumi.Input[int]]:
        """
        Compute generation for IBM cloud infrastructure.
        """
        return pulumi.get(self, "compute_generation")

    @compute_generation.setter
    def compute_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute_generation", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="externalAccountLists")
    def external_account_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalAccountListArgs']]]]:
        """
        Configure AWS external account list. The structure of `external_account_list` block is documented below.
        """
        return pulumi.get(self, "external_account_lists")

    @external_account_lists.setter
    def external_account_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalAccountListArgs']]]]):
        pulumi.set(self, "external_account_lists", value)

    @property
    @pulumi.getter(name="externalIps")
    def external_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalIpArgs']]]]:
        """
        Configure GCP external IP. The structure of `external_ip` block is documented below.
        """
        return pulumi.get(self, "external_ips")

    @external_ips.setter
    def external_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalIpArgs']]]]):
        pulumi.set(self, "external_ips", value)

    @property
    @pulumi.getter(name="forwardingRules")
    def forwarding_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorForwardingRuleArgs']]]]:
        """
        Configure GCP forwarding rule. The structure of `forwarding_rule` block is documented below.
        """
        return pulumi.get(self, "forwarding_rules")

    @forwarding_rules.setter
    def forwarding_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorForwardingRuleArgs']]]]):
        pulumi.set(self, "forwarding_rules", value)

    @property
    @pulumi.getter(name="gcpProject")
    def gcp_project(self) -> Optional[pulumi.Input[str]]:
        """
        GCP project name.
        """
        return pulumi.get(self, "gcp_project")

    @gcp_project.setter
    def gcp_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_project", value)

    @property
    @pulumi.getter(name="gcpProjectLists")
    def gcp_project_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorGcpProjectListArgs']]]]:
        """
        Configure GCP project list. The structure of `gcp_project_list` block is documented below.
        """
        return pulumi.get(self, "gcp_project_lists")

    @gcp_project_lists.setter
    def gcp_project_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorGcpProjectListArgs']]]]):
        pulumi.set(self, "gcp_project_lists", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name of computers.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="haStatus")
    def ha_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use for FortiGate HA service. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ha_status")

    @ha_status.setter
    def ha_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_status", value)

    @property
    @pulumi.getter(name="ibmRegion")
    def ibm_region(self) -> Optional[pulumi.Input[str]]:
        """
        IBM cloud region name.
        """
        return pulumi.get(self, "ibm_region")

    @ibm_region.setter
    def ibm_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibm_region", value)

    @property
    @pulumi.getter(name="ibmRegionGen1")
    def ibm_region_gen1(self) -> Optional[pulumi.Input[str]]:
        """
        IBM cloud compute generation 1 region name. Valid values: `us-south`, `us-east`, `germany`, `great-britain`, `japan`, `australia`.
        """
        return pulumi.get(self, "ibm_region_gen1")

    @ibm_region_gen1.setter
    def ibm_region_gen1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibm_region_gen1", value)

    @property
    @pulumi.getter(name="ibmRegionGen2")
    def ibm_region_gen2(self) -> Optional[pulumi.Input[str]]:
        """
        IBM cloud compute generation 2 region name. Valid values: `us-south`, `us-east`, `great-britain`.
        """
        return pulumi.get(self, "ibm_region_gen2")

    @ibm_region_gen2.setter
    def ibm_region_gen2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibm_region_gen2", value)

    @property
    @pulumi.getter(name="keyPasswd")
    def key_passwd(self) -> Optional[pulumi.Input[str]]:
        """
        Private key password.
        """
        return pulumi.get(self, "key_passwd")

    @key_passwd.setter
    def key_passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_passwd", value)

    @property
    @pulumi.getter(name="loginEndpoint")
    def login_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Stack login endpoint.
        """
        return pulumi.get(self, "login_endpoint")

    @login_endpoint.setter
    def login_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_endpoint", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SDN connector name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorNicArgs']]]]:
        """
        Configure Azure network interface. The structure of `nic` block is documented below.
        """
        return pulumi.get(self, "nics")

    @nics.setter
    def nics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorNicArgs']]]]):
        pulumi.set(self, "nics", value)

    @property
    @pulumi.getter(name="ociCert")
    def oci_cert(self) -> Optional[pulumi.Input[str]]:
        """
        OCI certificate.
        """
        return pulumi.get(self, "oci_cert")

    @oci_cert.setter
    def oci_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oci_cert", value)

    @property
    @pulumi.getter(name="ociFingerprint")
    def oci_fingerprint(self) -> Optional[pulumi.Input[str]]:
        """
        OCI pubkey fingerprint.
        """
        return pulumi.get(self, "oci_fingerprint")

    @oci_fingerprint.setter
    def oci_fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oci_fingerprint", value)

    @property
    @pulumi.getter(name="ociRegion")
    def oci_region(self) -> Optional[pulumi.Input[str]]:
        """
        OCI server region.
        """
        return pulumi.get(self, "oci_region")

    @oci_region.setter
    def oci_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oci_region", value)

    @property
    @pulumi.getter(name="ociRegionLists")
    def oci_region_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorOciRegionListArgs']]]]:
        """
        Configure OCI region list. The structure of `oci_region_list` block is documented below.
        """
        return pulumi.get(self, "oci_region_lists")

    @oci_region_lists.setter
    def oci_region_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorOciRegionListArgs']]]]):
        pulumi.set(self, "oci_region_lists", value)

    @property
    @pulumi.getter(name="ociRegionType")
    def oci_region_type(self) -> Optional[pulumi.Input[str]]:
        """
        OCI region type. Valid values: `commercial`, `government`.
        """
        return pulumi.get(self, "oci_region_type")

    @oci_region_type.setter
    def oci_region_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oci_region_type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the remote SDN connector as login credentials.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key of GCP service account.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        """
        SDN proxy.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        AWS region name.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Azure resource group.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="resourceUrl")
    def resource_url(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Stack resource URL.
        """
        return pulumi.get(self, "resource_url")

    @resource_url.setter
    def resource_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_url", value)

    @property
    @pulumi.getter(name="routeTables")
    def route_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteTableArgs']]]]:
        """
        Configure Azure route table. The structure of `route_table` block is documented below.
        """
        return pulumi.get(self, "route_tables")

    @route_tables.setter
    def route_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteTableArgs']]]]):
        pulumi.set(self, "route_tables", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteArgs']]]]:
        """
        Configure GCP route. The structure of `route` block is documented below.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteArgs']]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS secret access key.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> Optional[pulumi.Input[str]]:
        """
        Secret token of Kubernetes service account.
        """
        return pulumi.get(self, "secret_token")

    @secret_token.setter
    def secret_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_token", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Server address of the remote SDN connector.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="serverCaCert")
    def server_ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Trust only those servers whose certificate is directly/indirectly signed by this certificate.
        """
        return pulumi.get(self, "server_ca_cert")

    @server_ca_cert.setter
    def server_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_ca_cert", value)

    @property
    @pulumi.getter(name="serverCert")
    def server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Trust servers that contain this certificate only.
        """
        return pulumi.get(self, "server_cert")

    @server_cert.setter
    def server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_cert", value)

    @property
    @pulumi.getter(name="serverLists")
    def server_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorServerListArgs']]]]:
        """
        Server address list of the remote SDN connector. The structure of `server_list` block is documented below.
        """
        return pulumi.get(self, "server_lists")

    @server_lists.setter
    def server_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorServerListArgs']]]]):
        pulumi.set(self, "server_lists", value)

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number of the remote SDN connector.
        """
        return pulumi.get(self, "server_port")

    @server_port.setter
    def server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "server_port", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        GCP service account email.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable connection to the remote SDN connector. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure subscription ID.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tenant ID (directory ID).
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of SDN connector.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updateInterval")
    def update_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Dynamic object update interval (0 - 3600 sec, 0 means disabled, default = 60).
        """
        return pulumi.get(self, "update_interval")

    @update_interval.setter
    def update_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_interval", value)

    @property
    @pulumi.getter(name="useMetadataIam")
    def use_metadata_iam(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable using IAM role from metadata to call API. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "use_metadata_iam")

    @use_metadata_iam.setter
    def use_metadata_iam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_metadata_iam", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        User ID.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username of the remote SDN connector as login credentials.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="vcenterPassword")
    def vcenter_password(self) -> Optional[pulumi.Input[str]]:
        """
        vCenter server password for NSX quarantine.
        """
        return pulumi.get(self, "vcenter_password")

    @vcenter_password.setter
    def vcenter_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter_password", value)

    @property
    @pulumi.getter(name="vcenterServer")
    def vcenter_server(self) -> Optional[pulumi.Input[str]]:
        """
        vCenter server address for NSX quarantine.
        """
        return pulumi.get(self, "vcenter_server")

    @vcenter_server.setter
    def vcenter_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter_server", value)

    @property
    @pulumi.getter(name="vcenterUsername")
    def vcenter_username(self) -> Optional[pulumi.Input[str]]:
        """
        vCenter server username for NSX quarantine.
        """
        return pulumi.get(self, "vcenter_username")

    @vcenter_username.setter
    def vcenter_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter_username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="verifyCertificate")
    def verify_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable server certificate verification. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "verify_certificate")

    @verify_certificate.setter
    def verify_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_certificate", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        AWS VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Sdnconnector(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 alt_resource_ip: Optional[pulumi.Input[str]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 azure_region: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 compartment_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorCompartmentListArgs']]]]] = None,
                 compute_generation: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 external_account_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorExternalAccountListArgs']]]]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorExternalIpArgs']]]]] = None,
                 forwarding_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorForwardingRuleArgs']]]]] = None,
                 gcp_project: Optional[pulumi.Input[str]] = None,
                 gcp_project_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorGcpProjectListArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ha_status: Optional[pulumi.Input[str]] = None,
                 ibm_region: Optional[pulumi.Input[str]] = None,
                 ibm_region_gen1: Optional[pulumi.Input[str]] = None,
                 ibm_region_gen2: Optional[pulumi.Input[str]] = None,
                 key_passwd: Optional[pulumi.Input[str]] = None,
                 login_endpoint: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorNicArgs']]]]] = None,
                 oci_cert: Optional[pulumi.Input[str]] = None,
                 oci_fingerprint: Optional[pulumi.Input[str]] = None,
                 oci_region: Optional[pulumi.Input[str]] = None,
                 oci_region_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorOciRegionListArgs']]]]] = None,
                 oci_region_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 resource_url: Optional[pulumi.Input[str]] = None,
                 route_tables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorRouteTableArgs']]]]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorRouteArgs']]]]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 secret_token: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_ca_cert: Optional[pulumi.Input[str]] = None,
                 server_cert: Optional[pulumi.Input[str]] = None,
                 server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorServerListArgs']]]]] = None,
                 server_port: Optional[pulumi.Input[int]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 update_interval: Optional[pulumi.Input[int]] = None,
                 use_metadata_iam: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vcenter_password: Optional[pulumi.Input[str]] = None,
                 vcenter_server: Optional[pulumi.Input[str]] = None,
                 vcenter_username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 verify_certificate: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure connection to SDN Connector.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Sdnconnector("trname",
            azure_region="global",
            ha_status="disable",
            password="deWdf321ds",
            server="1.1.1.1",
            server_port=3,
            status="disable",
            type="aci",
            update_interval=60,
            use_metadata_iam="disable",
            username="sg")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System SdnConnector can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/sdnconnector:Sdnconnector labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/sdnconnector:Sdnconnector labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_key: AWS access key ID.
        :param pulumi.Input[str] alt_resource_ip: Enable/disable AWS alternative resource IP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] api_key: IBM cloud API key or service ID API key.
        :param pulumi.Input[str] azure_region: Azure server region. Valid values: `global`, `china`, `germany`, `usgov`, `local`.
        :param pulumi.Input[str] client_id: Azure client ID (application ID).
        :param pulumi.Input[str] client_secret: Azure client secret (application key).
        :param pulumi.Input[str] compartment_id: Compartment ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorCompartmentListArgs']]]] compartment_lists: Configure OCI compartment list. The structure of `compartment_list` block is documented below.
        :param pulumi.Input[int] compute_generation: Compute generation for IBM cloud infrastructure.
        :param pulumi.Input[str] domain: Domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorExternalAccountListArgs']]]] external_account_lists: Configure AWS external account list. The structure of `external_account_list` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorExternalIpArgs']]]] external_ips: Configure GCP external IP. The structure of `external_ip` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorForwardingRuleArgs']]]] forwarding_rules: Configure GCP forwarding rule. The structure of `forwarding_rule` block is documented below.
        :param pulumi.Input[str] gcp_project: GCP project name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorGcpProjectListArgs']]]] gcp_project_lists: Configure GCP project list. The structure of `gcp_project_list` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_name: Group name of computers.
        :param pulumi.Input[str] ha_status: Enable/disable use for FortiGate HA service. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ibm_region: IBM cloud region name.
        :param pulumi.Input[str] ibm_region_gen1: IBM cloud compute generation 1 region name. Valid values: `us-south`, `us-east`, `germany`, `great-britain`, `japan`, `australia`.
        :param pulumi.Input[str] ibm_region_gen2: IBM cloud compute generation 2 region name. Valid values: `us-south`, `us-east`, `great-britain`.
        :param pulumi.Input[str] key_passwd: Private key password.
        :param pulumi.Input[str] login_endpoint: Azure Stack login endpoint.
        :param pulumi.Input[str] name: SDN connector name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorNicArgs']]]] nics: Configure Azure network interface. The structure of `nic` block is documented below.
        :param pulumi.Input[str] oci_cert: OCI certificate.
        :param pulumi.Input[str] oci_fingerprint: OCI pubkey fingerprint.
        :param pulumi.Input[str] oci_region: OCI server region.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorOciRegionListArgs']]]] oci_region_lists: Configure OCI region list. The structure of `oci_region_list` block is documented below.
        :param pulumi.Input[str] oci_region_type: OCI region type. Valid values: `commercial`, `government`.
        :param pulumi.Input[str] password: Password of the remote SDN connector as login credentials.
        :param pulumi.Input[str] private_key: Private key of GCP service account.
        :param pulumi.Input[str] proxy: SDN proxy.
        :param pulumi.Input[str] region: AWS region name.
        :param pulumi.Input[str] resource_group: Azure resource group.
        :param pulumi.Input[str] resource_url: Azure Stack resource URL.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorRouteTableArgs']]]] route_tables: Configure Azure route table. The structure of `route_table` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorRouteArgs']]]] routes: Configure GCP route. The structure of `route` block is documented below.
        :param pulumi.Input[str] secret_key: AWS secret access key.
        :param pulumi.Input[str] secret_token: Secret token of Kubernetes service account.
        :param pulumi.Input[str] server: Server address of the remote SDN connector.
        :param pulumi.Input[str] server_ca_cert: Trust only those servers whose certificate is directly/indirectly signed by this certificate.
        :param pulumi.Input[str] server_cert: Trust servers that contain this certificate only.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorServerListArgs']]]] server_lists: Server address list of the remote SDN connector. The structure of `server_list` block is documented below.
        :param pulumi.Input[int] server_port: Port number of the remote SDN connector.
        :param pulumi.Input[str] service_account: GCP service account email.
        :param pulumi.Input[str] status: Enable/disable connection to the remote SDN connector. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] subscription_id: Azure subscription ID.
        :param pulumi.Input[str] tenant_id: Tenant ID (directory ID).
        :param pulumi.Input[str] type: Type of SDN connector.
        :param pulumi.Input[int] update_interval: Dynamic object update interval (0 - 3600 sec, 0 means disabled, default = 60).
        :param pulumi.Input[str] use_metadata_iam: Enable/disable using IAM role from metadata to call API. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] user_id: User ID.
        :param pulumi.Input[str] username: Username of the remote SDN connector as login credentials.
        :param pulumi.Input[str] vcenter_password: vCenter server password for NSX quarantine.
        :param pulumi.Input[str] vcenter_server: vCenter server address for NSX quarantine.
        :param pulumi.Input[str] vcenter_username: vCenter server username for NSX quarantine.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] verify_certificate: Enable/disable server certificate verification. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vpc_id: AWS VPC ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SdnconnectorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure connection to SDN Connector.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Sdnconnector("trname",
            azure_region="global",
            ha_status="disable",
            password="deWdf321ds",
            server="1.1.1.1",
            server_port=3,
            status="disable",
            type="aci",
            update_interval=60,
            use_metadata_iam="disable",
            username="sg")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System SdnConnector can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/sdnconnector:Sdnconnector labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/sdnconnector:Sdnconnector labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SdnconnectorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SdnconnectorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 alt_resource_ip: Optional[pulumi.Input[str]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 azure_region: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 compartment_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorCompartmentListArgs']]]]] = None,
                 compute_generation: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 external_account_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorExternalAccountListArgs']]]]] = None,
                 external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorExternalIpArgs']]]]] = None,
                 forwarding_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorForwardingRuleArgs']]]]] = None,
                 gcp_project: Optional[pulumi.Input[str]] = None,
                 gcp_project_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorGcpProjectListArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ha_status: Optional[pulumi.Input[str]] = None,
                 ibm_region: Optional[pulumi.Input[str]] = None,
                 ibm_region_gen1: Optional[pulumi.Input[str]] = None,
                 ibm_region_gen2: Optional[pulumi.Input[str]] = None,
                 key_passwd: Optional[pulumi.Input[str]] = None,
                 login_endpoint: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorNicArgs']]]]] = None,
                 oci_cert: Optional[pulumi.Input[str]] = None,
                 oci_fingerprint: Optional[pulumi.Input[str]] = None,
                 oci_region: Optional[pulumi.Input[str]] = None,
                 oci_region_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorOciRegionListArgs']]]]] = None,
                 oci_region_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 resource_url: Optional[pulumi.Input[str]] = None,
                 route_tables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorRouteTableArgs']]]]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorRouteArgs']]]]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 secret_token: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_ca_cert: Optional[pulumi.Input[str]] = None,
                 server_cert: Optional[pulumi.Input[str]] = None,
                 server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorServerListArgs']]]]] = None,
                 server_port: Optional[pulumi.Input[int]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 update_interval: Optional[pulumi.Input[int]] = None,
                 use_metadata_iam: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vcenter_password: Optional[pulumi.Input[str]] = None,
                 vcenter_server: Optional[pulumi.Input[str]] = None,
                 vcenter_username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 verify_certificate: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SdnconnectorArgs.__new__(SdnconnectorArgs)

            __props__.__dict__["access_key"] = None if access_key is None else pulumi.Output.secret(access_key)
            __props__.__dict__["alt_resource_ip"] = alt_resource_ip
            __props__.__dict__["api_key"] = None if api_key is None else pulumi.Output.secret(api_key)
            __props__.__dict__["azure_region"] = azure_region
            __props__.__dict__["client_id"] = client_id
            __props__.__dict__["client_secret"] = None if client_secret is None else pulumi.Output.secret(client_secret)
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["compartment_lists"] = compartment_lists
            __props__.__dict__["compute_generation"] = compute_generation
            __props__.__dict__["domain"] = domain
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["external_account_lists"] = external_account_lists
            __props__.__dict__["external_ips"] = external_ips
            __props__.__dict__["forwarding_rules"] = forwarding_rules
            __props__.__dict__["gcp_project"] = gcp_project
            __props__.__dict__["gcp_project_lists"] = gcp_project_lists
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["ha_status"] = ha_status
            __props__.__dict__["ibm_region"] = ibm_region
            __props__.__dict__["ibm_region_gen1"] = ibm_region_gen1
            __props__.__dict__["ibm_region_gen2"] = ibm_region_gen2
            __props__.__dict__["key_passwd"] = None if key_passwd is None else pulumi.Output.secret(key_passwd)
            __props__.__dict__["login_endpoint"] = login_endpoint
            __props__.__dict__["name"] = name
            __props__.__dict__["nics"] = nics
            __props__.__dict__["oci_cert"] = oci_cert
            __props__.__dict__["oci_fingerprint"] = oci_fingerprint
            __props__.__dict__["oci_region"] = oci_region
            __props__.__dict__["oci_region_lists"] = oci_region_lists
            __props__.__dict__["oci_region_type"] = oci_region_type
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["private_key"] = None if private_key is None else pulumi.Output.secret(private_key)
            __props__.__dict__["proxy"] = proxy
            __props__.__dict__["region"] = region
            __props__.__dict__["resource_group"] = resource_group
            __props__.__dict__["resource_url"] = resource_url
            __props__.__dict__["route_tables"] = route_tables
            __props__.__dict__["routes"] = routes
            __props__.__dict__["secret_key"] = None if secret_key is None else pulumi.Output.secret(secret_key)
            __props__.__dict__["secret_token"] = None if secret_token is None else pulumi.Output.secret(secret_token)
            __props__.__dict__["server"] = server
            __props__.__dict__["server_ca_cert"] = server_ca_cert
            __props__.__dict__["server_cert"] = server_cert
            __props__.__dict__["server_lists"] = server_lists
            __props__.__dict__["server_port"] = server_port
            __props__.__dict__["service_account"] = service_account
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["subscription_id"] = subscription_id
            __props__.__dict__["tenant_id"] = tenant_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["update_interval"] = update_interval
            __props__.__dict__["use_metadata_iam"] = use_metadata_iam
            __props__.__dict__["user_id"] = user_id
            __props__.__dict__["username"] = username
            __props__.__dict__["vcenter_password"] = None if vcenter_password is None else pulumi.Output.secret(vcenter_password)
            __props__.__dict__["vcenter_server"] = vcenter_server
            __props__.__dict__["vcenter_username"] = vcenter_username
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["verify_certificate"] = verify_certificate
            __props__.__dict__["vpc_id"] = vpc_id
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessKey", "apiKey", "clientSecret", "keyPasswd", "password", "privateKey", "secretKey", "secretToken", "vcenterPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Sdnconnector, __self__).__init__(
            'fortios:system/sdnconnector:Sdnconnector',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_key: Optional[pulumi.Input[str]] = None,
            alt_resource_ip: Optional[pulumi.Input[str]] = None,
            api_key: Optional[pulumi.Input[str]] = None,
            azure_region: Optional[pulumi.Input[str]] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            client_secret: Optional[pulumi.Input[str]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            compartment_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorCompartmentListArgs']]]]] = None,
            compute_generation: Optional[pulumi.Input[int]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            external_account_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorExternalAccountListArgs']]]]] = None,
            external_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorExternalIpArgs']]]]] = None,
            forwarding_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorForwardingRuleArgs']]]]] = None,
            gcp_project: Optional[pulumi.Input[str]] = None,
            gcp_project_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorGcpProjectListArgs']]]]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            ha_status: Optional[pulumi.Input[str]] = None,
            ibm_region: Optional[pulumi.Input[str]] = None,
            ibm_region_gen1: Optional[pulumi.Input[str]] = None,
            ibm_region_gen2: Optional[pulumi.Input[str]] = None,
            key_passwd: Optional[pulumi.Input[str]] = None,
            login_endpoint: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorNicArgs']]]]] = None,
            oci_cert: Optional[pulumi.Input[str]] = None,
            oci_fingerprint: Optional[pulumi.Input[str]] = None,
            oci_region: Optional[pulumi.Input[str]] = None,
            oci_region_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorOciRegionListArgs']]]]] = None,
            oci_region_type: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            private_key: Optional[pulumi.Input[str]] = None,
            proxy: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            resource_group: Optional[pulumi.Input[str]] = None,
            resource_url: Optional[pulumi.Input[str]] = None,
            route_tables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorRouteTableArgs']]]]] = None,
            routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorRouteArgs']]]]] = None,
            secret_key: Optional[pulumi.Input[str]] = None,
            secret_token: Optional[pulumi.Input[str]] = None,
            server: Optional[pulumi.Input[str]] = None,
            server_ca_cert: Optional[pulumi.Input[str]] = None,
            server_cert: Optional[pulumi.Input[str]] = None,
            server_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorServerListArgs']]]]] = None,
            server_port: Optional[pulumi.Input[int]] = None,
            service_account: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subscription_id: Optional[pulumi.Input[str]] = None,
            tenant_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            update_interval: Optional[pulumi.Input[int]] = None,
            use_metadata_iam: Optional[pulumi.Input[str]] = None,
            user_id: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None,
            vcenter_password: Optional[pulumi.Input[str]] = None,
            vcenter_server: Optional[pulumi.Input[str]] = None,
            vcenter_username: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            verify_certificate: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Sdnconnector':
        """
        Get an existing Sdnconnector resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_key: AWS access key ID.
        :param pulumi.Input[str] alt_resource_ip: Enable/disable AWS alternative resource IP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] api_key: IBM cloud API key or service ID API key.
        :param pulumi.Input[str] azure_region: Azure server region. Valid values: `global`, `china`, `germany`, `usgov`, `local`.
        :param pulumi.Input[str] client_id: Azure client ID (application ID).
        :param pulumi.Input[str] client_secret: Azure client secret (application key).
        :param pulumi.Input[str] compartment_id: Compartment ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorCompartmentListArgs']]]] compartment_lists: Configure OCI compartment list. The structure of `compartment_list` block is documented below.
        :param pulumi.Input[int] compute_generation: Compute generation for IBM cloud infrastructure.
        :param pulumi.Input[str] domain: Domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorExternalAccountListArgs']]]] external_account_lists: Configure AWS external account list. The structure of `external_account_list` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorExternalIpArgs']]]] external_ips: Configure GCP external IP. The structure of `external_ip` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorForwardingRuleArgs']]]] forwarding_rules: Configure GCP forwarding rule. The structure of `forwarding_rule` block is documented below.
        :param pulumi.Input[str] gcp_project: GCP project name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorGcpProjectListArgs']]]] gcp_project_lists: Configure GCP project list. The structure of `gcp_project_list` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_name: Group name of computers.
        :param pulumi.Input[str] ha_status: Enable/disable use for FortiGate HA service. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ibm_region: IBM cloud region name.
        :param pulumi.Input[str] ibm_region_gen1: IBM cloud compute generation 1 region name. Valid values: `us-south`, `us-east`, `germany`, `great-britain`, `japan`, `australia`.
        :param pulumi.Input[str] ibm_region_gen2: IBM cloud compute generation 2 region name. Valid values: `us-south`, `us-east`, `great-britain`.
        :param pulumi.Input[str] key_passwd: Private key password.
        :param pulumi.Input[str] login_endpoint: Azure Stack login endpoint.
        :param pulumi.Input[str] name: SDN connector name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorNicArgs']]]] nics: Configure Azure network interface. The structure of `nic` block is documented below.
        :param pulumi.Input[str] oci_cert: OCI certificate.
        :param pulumi.Input[str] oci_fingerprint: OCI pubkey fingerprint.
        :param pulumi.Input[str] oci_region: OCI server region.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorOciRegionListArgs']]]] oci_region_lists: Configure OCI region list. The structure of `oci_region_list` block is documented below.
        :param pulumi.Input[str] oci_region_type: OCI region type. Valid values: `commercial`, `government`.
        :param pulumi.Input[str] password: Password of the remote SDN connector as login credentials.
        :param pulumi.Input[str] private_key: Private key of GCP service account.
        :param pulumi.Input[str] proxy: SDN proxy.
        :param pulumi.Input[str] region: AWS region name.
        :param pulumi.Input[str] resource_group: Azure resource group.
        :param pulumi.Input[str] resource_url: Azure Stack resource URL.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorRouteTableArgs']]]] route_tables: Configure Azure route table. The structure of `route_table` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorRouteArgs']]]] routes: Configure GCP route. The structure of `route` block is documented below.
        :param pulumi.Input[str] secret_key: AWS secret access key.
        :param pulumi.Input[str] secret_token: Secret token of Kubernetes service account.
        :param pulumi.Input[str] server: Server address of the remote SDN connector.
        :param pulumi.Input[str] server_ca_cert: Trust only those servers whose certificate is directly/indirectly signed by this certificate.
        :param pulumi.Input[str] server_cert: Trust servers that contain this certificate only.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdnconnectorServerListArgs']]]] server_lists: Server address list of the remote SDN connector. The structure of `server_list` block is documented below.
        :param pulumi.Input[int] server_port: Port number of the remote SDN connector.
        :param pulumi.Input[str] service_account: GCP service account email.
        :param pulumi.Input[str] status: Enable/disable connection to the remote SDN connector. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] subscription_id: Azure subscription ID.
        :param pulumi.Input[str] tenant_id: Tenant ID (directory ID).
        :param pulumi.Input[str] type: Type of SDN connector.
        :param pulumi.Input[int] update_interval: Dynamic object update interval (0 - 3600 sec, 0 means disabled, default = 60).
        :param pulumi.Input[str] use_metadata_iam: Enable/disable using IAM role from metadata to call API. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] user_id: User ID.
        :param pulumi.Input[str] username: Username of the remote SDN connector as login credentials.
        :param pulumi.Input[str] vcenter_password: vCenter server password for NSX quarantine.
        :param pulumi.Input[str] vcenter_server: vCenter server address for NSX quarantine.
        :param pulumi.Input[str] vcenter_username: vCenter server username for NSX quarantine.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] verify_certificate: Enable/disable server certificate verification. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vpc_id: AWS VPC ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SdnconnectorState.__new__(_SdnconnectorState)

        __props__.__dict__["access_key"] = access_key
        __props__.__dict__["alt_resource_ip"] = alt_resource_ip
        __props__.__dict__["api_key"] = api_key
        __props__.__dict__["azure_region"] = azure_region
        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["client_secret"] = client_secret
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["compartment_lists"] = compartment_lists
        __props__.__dict__["compute_generation"] = compute_generation
        __props__.__dict__["domain"] = domain
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["external_account_lists"] = external_account_lists
        __props__.__dict__["external_ips"] = external_ips
        __props__.__dict__["forwarding_rules"] = forwarding_rules
        __props__.__dict__["gcp_project"] = gcp_project
        __props__.__dict__["gcp_project_lists"] = gcp_project_lists
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["ha_status"] = ha_status
        __props__.__dict__["ibm_region"] = ibm_region
        __props__.__dict__["ibm_region_gen1"] = ibm_region_gen1
        __props__.__dict__["ibm_region_gen2"] = ibm_region_gen2
        __props__.__dict__["key_passwd"] = key_passwd
        __props__.__dict__["login_endpoint"] = login_endpoint
        __props__.__dict__["name"] = name
        __props__.__dict__["nics"] = nics
        __props__.__dict__["oci_cert"] = oci_cert
        __props__.__dict__["oci_fingerprint"] = oci_fingerprint
        __props__.__dict__["oci_region"] = oci_region
        __props__.__dict__["oci_region_lists"] = oci_region_lists
        __props__.__dict__["oci_region_type"] = oci_region_type
        __props__.__dict__["password"] = password
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["proxy"] = proxy
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_group"] = resource_group
        __props__.__dict__["resource_url"] = resource_url
        __props__.__dict__["route_tables"] = route_tables
        __props__.__dict__["routes"] = routes
        __props__.__dict__["secret_key"] = secret_key
        __props__.__dict__["secret_token"] = secret_token
        __props__.__dict__["server"] = server
        __props__.__dict__["server_ca_cert"] = server_ca_cert
        __props__.__dict__["server_cert"] = server_cert
        __props__.__dict__["server_lists"] = server_lists
        __props__.__dict__["server_port"] = server_port
        __props__.__dict__["service_account"] = service_account
        __props__.__dict__["status"] = status
        __props__.__dict__["subscription_id"] = subscription_id
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["type"] = type
        __props__.__dict__["update_interval"] = update_interval
        __props__.__dict__["use_metadata_iam"] = use_metadata_iam
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["username"] = username
        __props__.__dict__["vcenter_password"] = vcenter_password
        __props__.__dict__["vcenter_server"] = vcenter_server
        __props__.__dict__["vcenter_username"] = vcenter_username
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["verify_certificate"] = verify_certificate
        __props__.__dict__["vpc_id"] = vpc_id
        return Sdnconnector(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Output[str]:
        """
        AWS access key ID.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="altResourceIp")
    def alt_resource_ip(self) -> pulumi.Output[str]:
        """
        Enable/disable AWS alternative resource IP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "alt_resource_ip")

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Output[Optional[str]]:
        """
        IBM cloud API key or service ID API key.
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="azureRegion")
    def azure_region(self) -> pulumi.Output[str]:
        """
        Azure server region. Valid values: `global`, `china`, `germany`, `usgov`, `local`.
        """
        return pulumi.get(self, "azure_region")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[str]:
        """
        Azure client ID (application ID).
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[Optional[str]]:
        """
        Azure client secret (application key).
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        """
        Compartment ID.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compartmentLists")
    def compartment_lists(self) -> pulumi.Output[Optional[Sequence['outputs.SdnconnectorCompartmentList']]]:
        """
        Configure OCI compartment list. The structure of `compartment_list` block is documented below.
        """
        return pulumi.get(self, "compartment_lists")

    @property
    @pulumi.getter(name="computeGeneration")
    def compute_generation(self) -> pulumi.Output[int]:
        """
        Compute generation for IBM cloud infrastructure.
        """
        return pulumi.get(self, "compute_generation")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain name.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="externalAccountLists")
    def external_account_lists(self) -> pulumi.Output[Optional[Sequence['outputs.SdnconnectorExternalAccountList']]]:
        """
        Configure AWS external account list. The structure of `external_account_list` block is documented below.
        """
        return pulumi.get(self, "external_account_lists")

    @property
    @pulumi.getter(name="externalIps")
    def external_ips(self) -> pulumi.Output[Optional[Sequence['outputs.SdnconnectorExternalIp']]]:
        """
        Configure GCP external IP. The structure of `external_ip` block is documented below.
        """
        return pulumi.get(self, "external_ips")

    @property
    @pulumi.getter(name="forwardingRules")
    def forwarding_rules(self) -> pulumi.Output[Optional[Sequence['outputs.SdnconnectorForwardingRule']]]:
        """
        Configure GCP forwarding rule. The structure of `forwarding_rule` block is documented below.
        """
        return pulumi.get(self, "forwarding_rules")

    @property
    @pulumi.getter(name="gcpProject")
    def gcp_project(self) -> pulumi.Output[str]:
        """
        GCP project name.
        """
        return pulumi.get(self, "gcp_project")

    @property
    @pulumi.getter(name="gcpProjectLists")
    def gcp_project_lists(self) -> pulumi.Output[Optional[Sequence['outputs.SdnconnectorGcpProjectList']]]:
        """
        Configure GCP project list. The structure of `gcp_project_list` block is documented below.
        """
        return pulumi.get(self, "gcp_project_lists")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[str]:
        """
        Group name of computers.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="haStatus")
    def ha_status(self) -> pulumi.Output[str]:
        """
        Enable/disable use for FortiGate HA service. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ha_status")

    @property
    @pulumi.getter(name="ibmRegion")
    def ibm_region(self) -> pulumi.Output[str]:
        """
        IBM cloud region name.
        """
        return pulumi.get(self, "ibm_region")

    @property
    @pulumi.getter(name="ibmRegionGen1")
    def ibm_region_gen1(self) -> pulumi.Output[str]:
        """
        IBM cloud compute generation 1 region name. Valid values: `us-south`, `us-east`, `germany`, `great-britain`, `japan`, `australia`.
        """
        return pulumi.get(self, "ibm_region_gen1")

    @property
    @pulumi.getter(name="ibmRegionGen2")
    def ibm_region_gen2(self) -> pulumi.Output[str]:
        """
        IBM cloud compute generation 2 region name. Valid values: `us-south`, `us-east`, `great-britain`.
        """
        return pulumi.get(self, "ibm_region_gen2")

    @property
    @pulumi.getter(name="keyPasswd")
    def key_passwd(self) -> pulumi.Output[Optional[str]]:
        """
        Private key password.
        """
        return pulumi.get(self, "key_passwd")

    @property
    @pulumi.getter(name="loginEndpoint")
    def login_endpoint(self) -> pulumi.Output[str]:
        """
        Azure Stack login endpoint.
        """
        return pulumi.get(self, "login_endpoint")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        SDN connector name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nics(self) -> pulumi.Output[Optional[Sequence['outputs.SdnconnectorNic']]]:
        """
        Configure Azure network interface. The structure of `nic` block is documented below.
        """
        return pulumi.get(self, "nics")

    @property
    @pulumi.getter(name="ociCert")
    def oci_cert(self) -> pulumi.Output[str]:
        """
        OCI certificate.
        """
        return pulumi.get(self, "oci_cert")

    @property
    @pulumi.getter(name="ociFingerprint")
    def oci_fingerprint(self) -> pulumi.Output[str]:
        """
        OCI pubkey fingerprint.
        """
        return pulumi.get(self, "oci_fingerprint")

    @property
    @pulumi.getter(name="ociRegion")
    def oci_region(self) -> pulumi.Output[str]:
        """
        OCI server region.
        """
        return pulumi.get(self, "oci_region")

    @property
    @pulumi.getter(name="ociRegionLists")
    def oci_region_lists(self) -> pulumi.Output[Optional[Sequence['outputs.SdnconnectorOciRegionList']]]:
        """
        Configure OCI region list. The structure of `oci_region_list` block is documented below.
        """
        return pulumi.get(self, "oci_region_lists")

    @property
    @pulumi.getter(name="ociRegionType")
    def oci_region_type(self) -> pulumi.Output[str]:
        """
        OCI region type. Valid values: `commercial`, `government`.
        """
        return pulumi.get(self, "oci_region_type")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password of the remote SDN connector as login credentials.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[str]:
        """
        Private key of GCP service account.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Output[str]:
        """
        SDN proxy.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        AWS region name.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Output[str]:
        """
        Azure resource group.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter(name="resourceUrl")
    def resource_url(self) -> pulumi.Output[str]:
        """
        Azure Stack resource URL.
        """
        return pulumi.get(self, "resource_url")

    @property
    @pulumi.getter(name="routeTables")
    def route_tables(self) -> pulumi.Output[Optional[Sequence['outputs.SdnconnectorRouteTable']]]:
        """
        Configure Azure route table. The structure of `route_table` block is documented below.
        """
        return pulumi.get(self, "route_tables")

    @property
    @pulumi.getter
    def routes(self) -> pulumi.Output[Optional[Sequence['outputs.SdnconnectorRoute']]]:
        """
        Configure GCP route. The structure of `route` block is documented below.
        """
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Output[Optional[str]]:
        """
        AWS secret access key.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="secretToken")
    def secret_token(self) -> pulumi.Output[str]:
        """
        Secret token of Kubernetes service account.
        """
        return pulumi.get(self, "secret_token")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        Server address of the remote SDN connector.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="serverCaCert")
    def server_ca_cert(self) -> pulumi.Output[str]:
        """
        Trust only those servers whose certificate is directly/indirectly signed by this certificate.
        """
        return pulumi.get(self, "server_ca_cert")

    @property
    @pulumi.getter(name="serverCert")
    def server_cert(self) -> pulumi.Output[str]:
        """
        Trust servers that contain this certificate only.
        """
        return pulumi.get(self, "server_cert")

    @property
    @pulumi.getter(name="serverLists")
    def server_lists(self) -> pulumi.Output[Optional[Sequence['outputs.SdnconnectorServerList']]]:
        """
        Server address list of the remote SDN connector. The structure of `server_list` block is documented below.
        """
        return pulumi.get(self, "server_lists")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> pulumi.Output[int]:
        """
        Port number of the remote SDN connector.
        """
        return pulumi.get(self, "server_port")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> pulumi.Output[str]:
        """
        GCP service account email.
        """
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable connection to the remote SDN connector. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Output[str]:
        """
        Azure subscription ID.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[str]:
        """
        Tenant ID (directory ID).
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of SDN connector.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateInterval")
    def update_interval(self) -> pulumi.Output[int]:
        """
        Dynamic object update interval (0 - 3600 sec, 0 means disabled, default = 60).
        """
        return pulumi.get(self, "update_interval")

    @property
    @pulumi.getter(name="useMetadataIam")
    def use_metadata_iam(self) -> pulumi.Output[str]:
        """
        Enable/disable using IAM role from metadata to call API. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "use_metadata_iam")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[str]:
        """
        User ID.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Username of the remote SDN connector as login credentials.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="vcenterPassword")
    def vcenter_password(self) -> pulumi.Output[Optional[str]]:
        """
        vCenter server password for NSX quarantine.
        """
        return pulumi.get(self, "vcenter_password")

    @property
    @pulumi.getter(name="vcenterServer")
    def vcenter_server(self) -> pulumi.Output[str]:
        """
        vCenter server address for NSX quarantine.
        """
        return pulumi.get(self, "vcenter_server")

    @property
    @pulumi.getter(name="vcenterUsername")
    def vcenter_username(self) -> pulumi.Output[str]:
        """
        vCenter server username for NSX quarantine.
        """
        return pulumi.get(self, "vcenter_username")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="verifyCertificate")
    def verify_certificate(self) -> pulumi.Output[str]:
        """
        Enable/disable server certificate verification. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "verify_certificate")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        AWS VPC ID.
        """
        return pulumi.get(self, "vpc_id")

