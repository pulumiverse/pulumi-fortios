# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VdomdnsArgs', 'Vdomdns']

@pulumi.input_type
class VdomdnsArgs:
    def __init__(__self__, *,
                 alt_primary: Optional[pulumi.Input[str]] = None,
                 alt_secondary: Optional[pulumi.Input[str]] = None,
                 dns_over_tls: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6_primary: Optional[pulumi.Input[str]] = None,
                 ip6_secondary: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 secondary: Optional[pulumi.Input[str]] = None,
                 server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input['VdomdnsServerHostnameArgs']]]] = None,
                 server_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 vdom_dns: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Vdomdns resource.
        :param pulumi.Input[str] alt_primary: Alternate primary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] alt_secondary: Alternate secondary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] dns_over_tls: Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ip6_primary: Primary IPv6 DNS server IP address for the VDOM.
        :param pulumi.Input[str] ip6_secondary: Secondary IPv6 DNS server IP address for the VDOM.
        :param pulumi.Input[str] primary: Primary DNS server IP address for the VDOM.
        :param pulumi.Input[str] protocol: DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
        :param pulumi.Input[str] secondary: Secondary DNS server IP address for the VDOM.
        :param pulumi.Input[Sequence[pulumi.Input['VdomdnsServerHostnameArgs']]] server_hostnames: DNS server host name list. The structure of `server_hostname` block is documented below.
        :param pulumi.Input[str] server_select_method: Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
        :param pulumi.Input[str] source_ip: Source IP for communications with the DNS server.
        :param pulumi.Input[str] ssl_certificate: Name of local certificate for SSL connections.
        :param pulumi.Input[str] vdom_dns: Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if alt_primary is not None:
            pulumi.set(__self__, "alt_primary", alt_primary)
        if alt_secondary is not None:
            pulumi.set(__self__, "alt_secondary", alt_secondary)
        if dns_over_tls is not None:
            pulumi.set(__self__, "dns_over_tls", dns_over_tls)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ip6_primary is not None:
            pulumi.set(__self__, "ip6_primary", ip6_primary)
        if ip6_secondary is not None:
            pulumi.set(__self__, "ip6_secondary", ip6_secondary)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if server_hostnames is not None:
            pulumi.set(__self__, "server_hostnames", server_hostnames)
        if server_select_method is not None:
            pulumi.set(__self__, "server_select_method", server_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if vdom_dns is not None:
            pulumi.set(__self__, "vdom_dns", vdom_dns)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="altPrimary")
    def alt_primary(self) -> Optional[pulumi.Input[str]]:
        """
        Alternate primary DNS server. (This is not used as a failover DNS server.)
        """
        return pulumi.get(self, "alt_primary")

    @alt_primary.setter
    def alt_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_primary", value)

    @property
    @pulumi.getter(name="altSecondary")
    def alt_secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Alternate secondary DNS server. (This is not used as a failover DNS server.)
        """
        return pulumi.get(self, "alt_secondary")

    @alt_secondary.setter
    def alt_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_secondary", value)

    @property
    @pulumi.getter(name="dnsOverTls")
    def dns_over_tls(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
        """
        return pulumi.get(self, "dns_over_tls")

    @dns_over_tls.setter
    def dns_over_tls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_over_tls", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ip6Primary")
    def ip6_primary(self) -> Optional[pulumi.Input[str]]:
        """
        Primary IPv6 DNS server IP address for the VDOM.
        """
        return pulumi.get(self, "ip6_primary")

    @ip6_primary.setter
    def ip6_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_primary", value)

    @property
    @pulumi.getter(name="ip6Secondary")
    def ip6_secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary IPv6 DNS server IP address for the VDOM.
        """
        return pulumi.get(self, "ip6_secondary")

    @ip6_secondary.setter
    def ip6_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_secondary", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[str]]:
        """
        Primary DNS server IP address for the VDOM.
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary DNS server IP address for the VDOM.
        """
        return pulumi.get(self, "secondary")

    @secondary.setter
    def secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary", value)

    @property
    @pulumi.getter(name="serverHostnames")
    def server_hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VdomdnsServerHostnameArgs']]]]:
        """
        DNS server host name list. The structure of `server_hostname` block is documented below.
        """
        return pulumi.get(self, "server_hostnames")

    @server_hostnames.setter
    def server_hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VdomdnsServerHostnameArgs']]]]):
        pulumi.set(self, "server_hostnames", value)

    @property
    @pulumi.getter(name="serverSelectMethod")
    def server_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
        """
        return pulumi.get(self, "server_select_method")

    @server_select_method.setter
    def server_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_select_method", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP for communications with the DNS server.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Name of local certificate for SSL connections.
        """
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="vdomDns")
    def vdom_dns(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vdom_dns")

    @vdom_dns.setter
    def vdom_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom_dns", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _VdomdnsState:
    def __init__(__self__, *,
                 alt_primary: Optional[pulumi.Input[str]] = None,
                 alt_secondary: Optional[pulumi.Input[str]] = None,
                 dns_over_tls: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6_primary: Optional[pulumi.Input[str]] = None,
                 ip6_secondary: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 secondary: Optional[pulumi.Input[str]] = None,
                 server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input['VdomdnsServerHostnameArgs']]]] = None,
                 server_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 vdom_dns: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Vdomdns resources.
        :param pulumi.Input[str] alt_primary: Alternate primary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] alt_secondary: Alternate secondary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] dns_over_tls: Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ip6_primary: Primary IPv6 DNS server IP address for the VDOM.
        :param pulumi.Input[str] ip6_secondary: Secondary IPv6 DNS server IP address for the VDOM.
        :param pulumi.Input[str] primary: Primary DNS server IP address for the VDOM.
        :param pulumi.Input[str] protocol: DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
        :param pulumi.Input[str] secondary: Secondary DNS server IP address for the VDOM.
        :param pulumi.Input[Sequence[pulumi.Input['VdomdnsServerHostnameArgs']]] server_hostnames: DNS server host name list. The structure of `server_hostname` block is documented below.
        :param pulumi.Input[str] server_select_method: Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
        :param pulumi.Input[str] source_ip: Source IP for communications with the DNS server.
        :param pulumi.Input[str] ssl_certificate: Name of local certificate for SSL connections.
        :param pulumi.Input[str] vdom_dns: Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if alt_primary is not None:
            pulumi.set(__self__, "alt_primary", alt_primary)
        if alt_secondary is not None:
            pulumi.set(__self__, "alt_secondary", alt_secondary)
        if dns_over_tls is not None:
            pulumi.set(__self__, "dns_over_tls", dns_over_tls)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ip6_primary is not None:
            pulumi.set(__self__, "ip6_primary", ip6_primary)
        if ip6_secondary is not None:
            pulumi.set(__self__, "ip6_secondary", ip6_secondary)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if server_hostnames is not None:
            pulumi.set(__self__, "server_hostnames", server_hostnames)
        if server_select_method is not None:
            pulumi.set(__self__, "server_select_method", server_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if vdom_dns is not None:
            pulumi.set(__self__, "vdom_dns", vdom_dns)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="altPrimary")
    def alt_primary(self) -> Optional[pulumi.Input[str]]:
        """
        Alternate primary DNS server. (This is not used as a failover DNS server.)
        """
        return pulumi.get(self, "alt_primary")

    @alt_primary.setter
    def alt_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_primary", value)

    @property
    @pulumi.getter(name="altSecondary")
    def alt_secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Alternate secondary DNS server. (This is not used as a failover DNS server.)
        """
        return pulumi.get(self, "alt_secondary")

    @alt_secondary.setter
    def alt_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_secondary", value)

    @property
    @pulumi.getter(name="dnsOverTls")
    def dns_over_tls(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
        """
        return pulumi.get(self, "dns_over_tls")

    @dns_over_tls.setter
    def dns_over_tls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_over_tls", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ip6Primary")
    def ip6_primary(self) -> Optional[pulumi.Input[str]]:
        """
        Primary IPv6 DNS server IP address for the VDOM.
        """
        return pulumi.get(self, "ip6_primary")

    @ip6_primary.setter
    def ip6_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_primary", value)

    @property
    @pulumi.getter(name="ip6Secondary")
    def ip6_secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary IPv6 DNS server IP address for the VDOM.
        """
        return pulumi.get(self, "ip6_secondary")

    @ip6_secondary.setter
    def ip6_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_secondary", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[str]]:
        """
        Primary DNS server IP address for the VDOM.
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary DNS server IP address for the VDOM.
        """
        return pulumi.get(self, "secondary")

    @secondary.setter
    def secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary", value)

    @property
    @pulumi.getter(name="serverHostnames")
    def server_hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VdomdnsServerHostnameArgs']]]]:
        """
        DNS server host name list. The structure of `server_hostname` block is documented below.
        """
        return pulumi.get(self, "server_hostnames")

    @server_hostnames.setter
    def server_hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VdomdnsServerHostnameArgs']]]]):
        pulumi.set(self, "server_hostnames", value)

    @property
    @pulumi.getter(name="serverSelectMethod")
    def server_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
        """
        return pulumi.get(self, "server_select_method")

    @server_select_method.setter
    def server_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_select_method", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP for communications with the DNS server.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Name of local certificate for SSL connections.
        """
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter(name="vdomDns")
    def vdom_dns(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vdom_dns")

    @vdom_dns.setter
    def vdom_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom_dns", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Vdomdns(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alt_primary: Optional[pulumi.Input[str]] = None,
                 alt_secondary: Optional[pulumi.Input[str]] = None,
                 dns_over_tls: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6_primary: Optional[pulumi.Input[str]] = None,
                 ip6_secondary: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 secondary: Optional[pulumi.Input[str]] = None,
                 server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VdomdnsServerHostnameArgs']]]]] = None,
                 server_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 vdom_dns: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure DNS servers for a non-management VDOM.

        ## Import

        System VdomDns can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/vdomdns:Vdomdns labelname SystemVdomDns
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/vdomdns:Vdomdns labelname SystemVdomDns
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alt_primary: Alternate primary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] alt_secondary: Alternate secondary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] dns_over_tls: Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ip6_primary: Primary IPv6 DNS server IP address for the VDOM.
        :param pulumi.Input[str] ip6_secondary: Secondary IPv6 DNS server IP address for the VDOM.
        :param pulumi.Input[str] primary: Primary DNS server IP address for the VDOM.
        :param pulumi.Input[str] protocol: DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
        :param pulumi.Input[str] secondary: Secondary DNS server IP address for the VDOM.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VdomdnsServerHostnameArgs']]]] server_hostnames: DNS server host name list. The structure of `server_hostname` block is documented below.
        :param pulumi.Input[str] server_select_method: Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
        :param pulumi.Input[str] source_ip: Source IP for communications with the DNS server.
        :param pulumi.Input[str] ssl_certificate: Name of local certificate for SSL connections.
        :param pulumi.Input[str] vdom_dns: Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VdomdnsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure DNS servers for a non-management VDOM.

        ## Import

        System VdomDns can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/vdomdns:Vdomdns labelname SystemVdomDns
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/vdomdns:Vdomdns labelname SystemVdomDns
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param VdomdnsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VdomdnsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alt_primary: Optional[pulumi.Input[str]] = None,
                 alt_secondary: Optional[pulumi.Input[str]] = None,
                 dns_over_tls: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6_primary: Optional[pulumi.Input[str]] = None,
                 ip6_secondary: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 secondary: Optional[pulumi.Input[str]] = None,
                 server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VdomdnsServerHostnameArgs']]]]] = None,
                 server_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 vdom_dns: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VdomdnsArgs.__new__(VdomdnsArgs)

            __props__.__dict__["alt_primary"] = alt_primary
            __props__.__dict__["alt_secondary"] = alt_secondary
            __props__.__dict__["dns_over_tls"] = dns_over_tls
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interface_select_method"] = interface_select_method
            __props__.__dict__["ip6_primary"] = ip6_primary
            __props__.__dict__["ip6_secondary"] = ip6_secondary
            __props__.__dict__["primary"] = primary
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["secondary"] = secondary
            __props__.__dict__["server_hostnames"] = server_hostnames
            __props__.__dict__["server_select_method"] = server_select_method
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["ssl_certificate"] = ssl_certificate
            __props__.__dict__["vdom_dns"] = vdom_dns
            __props__.__dict__["vdomparam"] = vdomparam
        super(Vdomdns, __self__).__init__(
            'fortios:system/vdomdns:Vdomdns',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alt_primary: Optional[pulumi.Input[str]] = None,
            alt_secondary: Optional[pulumi.Input[str]] = None,
            dns_over_tls: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interface_select_method: Optional[pulumi.Input[str]] = None,
            ip6_primary: Optional[pulumi.Input[str]] = None,
            ip6_secondary: Optional[pulumi.Input[str]] = None,
            primary: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            secondary: Optional[pulumi.Input[str]] = None,
            server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VdomdnsServerHostnameArgs']]]]] = None,
            server_select_method: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            ssl_certificate: Optional[pulumi.Input[str]] = None,
            vdom_dns: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Vdomdns':
        """
        Get an existing Vdomdns resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alt_primary: Alternate primary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] alt_secondary: Alternate secondary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] dns_over_tls: Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ip6_primary: Primary IPv6 DNS server IP address for the VDOM.
        :param pulumi.Input[str] ip6_secondary: Secondary IPv6 DNS server IP address for the VDOM.
        :param pulumi.Input[str] primary: Primary DNS server IP address for the VDOM.
        :param pulumi.Input[str] protocol: DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
        :param pulumi.Input[str] secondary: Secondary DNS server IP address for the VDOM.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VdomdnsServerHostnameArgs']]]] server_hostnames: DNS server host name list. The structure of `server_hostname` block is documented below.
        :param pulumi.Input[str] server_select_method: Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
        :param pulumi.Input[str] source_ip: Source IP for communications with the DNS server.
        :param pulumi.Input[str] ssl_certificate: Name of local certificate for SSL connections.
        :param pulumi.Input[str] vdom_dns: Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VdomdnsState.__new__(_VdomdnsState)

        __props__.__dict__["alt_primary"] = alt_primary
        __props__.__dict__["alt_secondary"] = alt_secondary
        __props__.__dict__["dns_over_tls"] = dns_over_tls
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interface_select_method"] = interface_select_method
        __props__.__dict__["ip6_primary"] = ip6_primary
        __props__.__dict__["ip6_secondary"] = ip6_secondary
        __props__.__dict__["primary"] = primary
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["secondary"] = secondary
        __props__.__dict__["server_hostnames"] = server_hostnames
        __props__.__dict__["server_select_method"] = server_select_method
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["ssl_certificate"] = ssl_certificate
        __props__.__dict__["vdom_dns"] = vdom_dns
        __props__.__dict__["vdomparam"] = vdomparam
        return Vdomdns(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="altPrimary")
    def alt_primary(self) -> pulumi.Output[str]:
        """
        Alternate primary DNS server. (This is not used as a failover DNS server.)
        """
        return pulumi.get(self, "alt_primary")

    @property
    @pulumi.getter(name="altSecondary")
    def alt_secondary(self) -> pulumi.Output[str]:
        """
        Alternate secondary DNS server. (This is not used as a failover DNS server.)
        """
        return pulumi.get(self, "alt_secondary")

    @property
    @pulumi.getter(name="dnsOverTls")
    def dns_over_tls(self) -> pulumi.Output[str]:
        """
        Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
        """
        return pulumi.get(self, "dns_over_tls")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> pulumi.Output[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="ip6Primary")
    def ip6_primary(self) -> pulumi.Output[str]:
        """
        Primary IPv6 DNS server IP address for the VDOM.
        """
        return pulumi.get(self, "ip6_primary")

    @property
    @pulumi.getter(name="ip6Secondary")
    def ip6_secondary(self) -> pulumi.Output[str]:
        """
        Secondary IPv6 DNS server IP address for the VDOM.
        """
        return pulumi.get(self, "ip6_secondary")

    @property
    @pulumi.getter
    def primary(self) -> pulumi.Output[str]:
        """
        Primary DNS server IP address for the VDOM.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def secondary(self) -> pulumi.Output[str]:
        """
        Secondary DNS server IP address for the VDOM.
        """
        return pulumi.get(self, "secondary")

    @property
    @pulumi.getter(name="serverHostnames")
    def server_hostnames(self) -> pulumi.Output[Optional[Sequence['outputs.VdomdnsServerHostname']]]:
        """
        DNS server host name list. The structure of `server_hostname` block is documented below.
        """
        return pulumi.get(self, "server_hostnames")

    @property
    @pulumi.getter(name="serverSelectMethod")
    def server_select_method(self) -> pulumi.Output[str]:
        """
        Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
        """
        return pulumi.get(self, "server_select_method")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        """
        Source IP for communications with the DNS server.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> pulumi.Output[str]:
        """
        Name of local certificate for SSL connections.
        """
        return pulumi.get(self, "ssl_certificate")

    @property
    @pulumi.getter(name="vdomDns")
    def vdom_dns(self) -> pulumi.Output[str]:
        """
        Enable/disable configuring DNS servers for the current VDOM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vdom_dns")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

