# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SettingsArgs', 'Settings']

@pulumi.input_type
class SettingsArgs:
    def __init__(__self__, *,
                 allow_linkdown_path: Optional[pulumi.Input[str]] = None,
                 allow_subnet_overlap: Optional[pulumi.Input[str]] = None,
                 application_bandwidth_tracking: Optional[pulumi.Input[str]] = None,
                 asymroute: Optional[pulumi.Input[str]] = None,
                 asymroute6: Optional[pulumi.Input[str]] = None,
                 asymroute6_icmp: Optional[pulumi.Input[str]] = None,
                 asymroute_icmp: Optional[pulumi.Input[str]] = None,
                 auxiliary_session: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 bfd_desired_min_tx: Optional[pulumi.Input[int]] = None,
                 bfd_detect_mult: Optional[pulumi.Input[int]] = None,
                 bfd_dont_enforce_src_port: Optional[pulumi.Input[str]] = None,
                 bfd_required_min_rx: Optional[pulumi.Input[int]] = None,
                 block_land_attack: Optional[pulumi.Input[str]] = None,
                 central_nat: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 compliance_check: Optional[pulumi.Input[str]] = None,
                 consolidated_firewall_mode: Optional[pulumi.Input[str]] = None,
                 default_app_port_as_service: Optional[pulumi.Input[str]] = None,
                 default_policy_expiry_days: Optional[pulumi.Input[int]] = None,
                 default_voip_alg_mode: Optional[pulumi.Input[str]] = None,
                 deny_tcp_with_icmp: Optional[pulumi.Input[str]] = None,
                 detect_unknown_esp: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dhcp6_server_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_proxy: Optional[pulumi.Input[str]] = None,
                 dhcp_proxy_interface: Optional[pulumi.Input[str]] = None,
                 dhcp_proxy_interface_select_method: Optional[pulumi.Input[str]] = None,
                 dhcp_server_ip: Optional[pulumi.Input[str]] = None,
                 discovered_device_timeout: Optional[pulumi.Input[int]] = None,
                 dyn_addr_session_check: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ecmp_max_paths: Optional[pulumi.Input[int]] = None,
                 email_portal_check_dns: Optional[pulumi.Input[str]] = None,
                 ext_resource_session_check: Optional[pulumi.Input[str]] = None,
                 firewall_session_dirty: Optional[pulumi.Input[str]] = None,
                 fqdn_session_check: Optional[pulumi.Input[str]] = None,
                 fw_session_hairpin: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gui_advanced_policy: Optional[pulumi.Input[str]] = None,
                 gui_advanced_wireless_features: Optional[pulumi.Input[str]] = None,
                 gui_allow_unnamed_policy: Optional[pulumi.Input[str]] = None,
                 gui_antivirus: Optional[pulumi.Input[str]] = None,
                 gui_ap_profile: Optional[pulumi.Input[str]] = None,
                 gui_application_control: Optional[pulumi.Input[str]] = None,
                 gui_casb: Optional[pulumi.Input[str]] = None,
                 gui_default_policy_columns: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsGuiDefaultPolicyColumnArgs']]]] = None,
                 gui_dhcp_advanced: Optional[pulumi.Input[str]] = None,
                 gui_dlp: Optional[pulumi.Input[str]] = None,
                 gui_dlp_profile: Optional[pulumi.Input[str]] = None,
                 gui_dns_database: Optional[pulumi.Input[str]] = None,
                 gui_dnsfilter: Optional[pulumi.Input[str]] = None,
                 gui_domain_ip_reputation: Optional[pulumi.Input[str]] = None,
                 gui_dos_policy: Optional[pulumi.Input[str]] = None,
                 gui_dynamic_device_os_id: Optional[pulumi.Input[str]] = None,
                 gui_dynamic_profile_display: Optional[pulumi.Input[str]] = None,
                 gui_dynamic_routing: Optional[pulumi.Input[str]] = None,
                 gui_email_collection: Optional[pulumi.Input[str]] = None,
                 gui_endpoint_control: Optional[pulumi.Input[str]] = None,
                 gui_endpoint_control_advanced: Optional[pulumi.Input[str]] = None,
                 gui_enforce_change_summary: Optional[pulumi.Input[str]] = None,
                 gui_explicit_proxy: Optional[pulumi.Input[str]] = None,
                 gui_file_filter: Optional[pulumi.Input[str]] = None,
                 gui_fortiap_split_tunneling: Optional[pulumi.Input[str]] = None,
                 gui_fortiextender_controller: Optional[pulumi.Input[str]] = None,
                 gui_icap: Optional[pulumi.Input[str]] = None,
                 gui_implicit_policy: Optional[pulumi.Input[str]] = None,
                 gui_ips: Optional[pulumi.Input[str]] = None,
                 gui_load_balance: Optional[pulumi.Input[str]] = None,
                 gui_local_in_policy: Optional[pulumi.Input[str]] = None,
                 gui_local_reports: Optional[pulumi.Input[str]] = None,
                 gui_multicast_policy: Optional[pulumi.Input[str]] = None,
                 gui_multiple_interface_policy: Optional[pulumi.Input[str]] = None,
                 gui_multiple_utm_profiles: Optional[pulumi.Input[str]] = None,
                 gui_nat4664: Optional[pulumi.Input[str]] = None,
                 gui_object_colors: Optional[pulumi.Input[str]] = None,
                 gui_ot: Optional[pulumi.Input[str]] = None,
                 gui_per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 gui_policy_based_ipsec: Optional[pulumi.Input[str]] = None,
                 gui_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 gui_policy_learning: Optional[pulumi.Input[str]] = None,
                 gui_proxy_inspection: Optional[pulumi.Input[str]] = None,
                 gui_replacement_message_groups: Optional[pulumi.Input[str]] = None,
                 gui_route_tag_address_creation: Optional[pulumi.Input[str]] = None,
                 gui_security_profile_group: Optional[pulumi.Input[str]] = None,
                 gui_spamfilter: Optional[pulumi.Input[str]] = None,
                 gui_sslvpn: Optional[pulumi.Input[str]] = None,
                 gui_sslvpn_personal_bookmarks: Optional[pulumi.Input[str]] = None,
                 gui_sslvpn_realms: Optional[pulumi.Input[str]] = None,
                 gui_switch_controller: Optional[pulumi.Input[str]] = None,
                 gui_threat_weight: Optional[pulumi.Input[str]] = None,
                 gui_traffic_shaping: Optional[pulumi.Input[str]] = None,
                 gui_videofilter: Optional[pulumi.Input[str]] = None,
                 gui_virtual_patch_profile: Optional[pulumi.Input[str]] = None,
                 gui_voip_profile: Optional[pulumi.Input[str]] = None,
                 gui_vpn: Optional[pulumi.Input[str]] = None,
                 gui_waf_profile: Optional[pulumi.Input[str]] = None,
                 gui_wan_load_balancing: Optional[pulumi.Input[str]] = None,
                 gui_wanopt_cache: Optional[pulumi.Input[str]] = None,
                 gui_webfilter: Optional[pulumi.Input[str]] = None,
                 gui_webfilter_advanced: Optional[pulumi.Input[str]] = None,
                 gui_wireless_controller: Optional[pulumi.Input[str]] = None,
                 gui_ztna: Optional[pulumi.Input[str]] = None,
                 h323_direct_model: Optional[pulumi.Input[str]] = None,
                 http_external_dest: Optional[pulumi.Input[str]] = None,
                 ike_dn_format: Optional[pulumi.Input[str]] = None,
                 ike_natt_port: Optional[pulumi.Input[int]] = None,
                 ike_policy_route: Optional[pulumi.Input[str]] = None,
                 ike_port: Optional[pulumi.Input[int]] = None,
                 ike_quick_crash_detect: Optional[pulumi.Input[str]] = None,
                 ike_session_resume: Optional[pulumi.Input[str]] = None,
                 ike_tcp_port: Optional[pulumi.Input[int]] = None,
                 implicit_allow_dns: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service_database_cache: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ip6: Optional[pulumi.Input[str]] = None,
                 lan_extension_controller_addr: Optional[pulumi.Input[str]] = None,
                 link_down_access: Optional[pulumi.Input[str]] = None,
                 lldp_reception: Optional[pulumi.Input[str]] = None,
                 lldp_transmission: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[str]] = None,
                 mac_ttl: Optional[pulumi.Input[int]] = None,
                 manageip: Optional[pulumi.Input[str]] = None,
                 manageip6: Optional[pulumi.Input[str]] = None,
                 multicast_forward: Optional[pulumi.Input[str]] = None,
                 multicast_skip_policy: Optional[pulumi.Input[str]] = None,
                 multicast_ttl_notchange: Optional[pulumi.Input[str]] = None,
                 nat46_force_ipv4_packet_forwarding: Optional[pulumi.Input[str]] = None,
                 nat46_generate_ipv6_fragment_header: Optional[pulumi.Input[str]] = None,
                 nat64_force_ipv6_packet_forwarding: Optional[pulumi.Input[str]] = None,
                 ngfw_mode: Optional[pulumi.Input[str]] = None,
                 opmode: Optional[pulumi.Input[str]] = None,
                 prp_trailer_action: Optional[pulumi.Input[str]] = None,
                 sccp_port: Optional[pulumi.Input[int]] = None,
                 sctp_session_without_init: Optional[pulumi.Input[str]] = None,
                 ses_denied_traffic: Optional[pulumi.Input[str]] = None,
                 sip_expectation: Optional[pulumi.Input[str]] = None,
                 sip_helper: Optional[pulumi.Input[str]] = None,
                 sip_nat_trace: Optional[pulumi.Input[str]] = None,
                 sip_ssl_port: Optional[pulumi.Input[int]] = None,
                 sip_tcp_port: Optional[pulumi.Input[int]] = None,
                 sip_udp_port: Optional[pulumi.Input[int]] = None,
                 snat_hairpin_traffic: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_src_check: Optional[pulumi.Input[str]] = None,
                 tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
                 utf8_spam_tagging: Optional[pulumi.Input[str]] = None,
                 v4_ecmp_mode: Optional[pulumi.Input[str]] = None,
                 vdom_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpn_stats_log: Optional[pulumi.Input[str]] = None,
                 vpn_stats_period: Optional[pulumi.Input[int]] = None,
                 wccp_cache_engine: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Settings resource.
        :param pulumi.Input[str] allow_linkdown_path: Enable/disable link down path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_subnet_overlap: Enable/disable allowing interface subnets to use overlapping IP addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] application_bandwidth_tracking: Enable/disable application bandwidth tracking. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] asymroute: Enable/disable IPv4 asymmetric routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] asymroute6: Enable/disable asymmetric IPv6 routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] asymroute6_icmp: Enable/disable asymmetric ICMPv6 routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] asymroute_icmp: Enable/disable ICMP asymmetric routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auxiliary_session: Enable/disable auxiliary session. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bfd: Enable/disable Bi-directional Forwarding Detection (BFD) on all interfaces. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bfd_desired_min_tx: BFD desired minimal transmit interval (1 - 100000 ms, default = 50).
        :param pulumi.Input[int] bfd_detect_mult: BFD detection multiplier (1 - 50, default = 3).
        :param pulumi.Input[str] bfd_dont_enforce_src_port: Enable to not enforce verifying the source port of BFD Packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bfd_required_min_rx: BFD required minimal receive interval (1 - 100000 ms, default = 50).
        :param pulumi.Input[str] block_land_attack: Enable/disable blocking of land attacks. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] central_nat: Enable/disable central NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: VDOM comments.
        :param pulumi.Input[str] compliance_check: Enable/disable PCI DSS compliance checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] consolidated_firewall_mode: Consolidated firewall mode.
        :param pulumi.Input[str] default_app_port_as_service: Enable/disable policy service enforcement based on application default ports. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] default_policy_expiry_days: Default policy expiry in days (0 - 365 days, default = 30).
        :param pulumi.Input[str] default_voip_alg_mode: Configure how the FortiGate handles VoIP traffic when a policy that accepts the traffic doesn't include a VoIP profile. Valid values: `proxy-based`, `kernel-helper-based`.
        :param pulumi.Input[str] deny_tcp_with_icmp: Enable/disable denying TCP by sending an ICMP communication prohibited packet. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] detect_unknown_esp: Enable/disable detection of unknown ESP packets (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device: Interface to use for management access for NAT mode.
        :param pulumi.Input[str] dhcp6_server_ip: DHCPv6 server IPv6 address.
        :param pulumi.Input[str] dhcp_proxy: Enable/disable the DHCP Proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp_proxy_interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] dhcp_proxy_interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] dhcp_server_ip: DHCP Server IPv4 address.
        :param pulumi.Input[int] discovered_device_timeout: Timeout for discovered devices (1 - 365 days, default = 28).
        :param pulumi.Input[str] dyn_addr_session_check: Enable/disable dirty session check caused by dynamic address updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] ecmp_max_paths: Maximum number of Equal Cost Multi-Path (ECMP) next-hops. Set to 1 to disable ECMP routing (1 - 100, default = 10).
        :param pulumi.Input[str] email_portal_check_dns: Enable/disable using DNS to validate email addresses collected by a captive portal. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ext_resource_session_check: Enable/disable dirty session check caused by external resource updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] firewall_session_dirty: Select how to manage sessions affected by firewall policy configuration changes. Valid values: `check-all`, `check-new`, `check-policy-option`.
        :param pulumi.Input[str] fqdn_session_check: Enable/disable dirty session check caused by FQDN updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fw_session_hairpin: Enable/disable checking for a matching policy each time hairpin traffic goes through the FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gateway: Transparent mode IPv4 default gateway IP address.
        :param pulumi.Input[str] gateway6: Transparent mode IPv4 default gateway IP address.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] gui_advanced_policy: Enable/disable advanced policy configuration on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_advanced_wireless_features: Enable/disable advanced wireless features in GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_allow_unnamed_policy: Enable/disable the requirement for policy naming on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_antivirus: Enable/disable AntiVirus on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ap_profile: Enable/disable FortiAP profiles on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_application_control: Enable/disable application control on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_casb: Enable/disable Inline-CASB on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SettingsGuiDefaultPolicyColumnArgs']]] gui_default_policy_columns: Default columns to display for policy lists on GUI. The structure of `gui_default_policy_columns` block is documented below.
        :param pulumi.Input[str] gui_dhcp_advanced: Enable/disable advanced DHCP options on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dlp: Enable/disable DLP on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dlp_profile: Enable/disable Data Leak Prevention on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dns_database: Enable/disable DNS database settings on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dnsfilter: Enable/disable DNS Filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_domain_ip_reputation: Enable/disable Domain and IP Reputation on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dos_policy: Enable/disable DoS policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dynamic_device_os_id: Enable/disable Create dynamic addresses to manage known devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dynamic_profile_display: Enable/disable RADIUS Single Sign On (RSSO) on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dynamic_routing: Enable/disable dynamic routing on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_email_collection: Enable/disable email collection on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_endpoint_control: Enable/disable endpoint control on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_endpoint_control_advanced: Enable/disable advanced endpoint control options on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_enforce_change_summary: Enforce change summaries for select tables in the GUI. Valid values: `disable`, `require`, `optional`.
        :param pulumi.Input[str] gui_explicit_proxy: Enable/disable the explicit proxy on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_file_filter: Enable/disable File-filter on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_fortiap_split_tunneling: Enable/disable FortiAP split tunneling on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_fortiextender_controller: Enable/disable FortiExtender on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_icap: Enable/disable ICAP on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_implicit_policy: Enable/disable implicit firewall policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ips: Enable/disable IPS on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_load_balance: Enable/disable server load balancing on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_local_in_policy: Enable/disable Local-In policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_local_reports: Enable/disable local reports on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_multicast_policy: Enable/disable multicast firewall policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_multiple_interface_policy: Enable/disable adding multiple interfaces to a policy on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_multiple_utm_profiles: Enable/disable multiple UTM profiles on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_nat4664: Enable/disable NAT46 and NAT64 settings on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_object_colors: Enable/disable object colors on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ot: Enable/disable Show Operational Technology Purdue Model. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_per_policy_disclaimer: Enable/disable policy disclaimer on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_policy_based_ipsec: Enable/disable policy-based IPsec VPN on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_policy_disclaimer: Enable/disable policy disclaimer on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_policy_learning: Enable/disable firewall policy learning mode on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_proxy_inspection: Enable/disable the proxy features on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_replacement_message_groups: Enable/disable replacement message groups on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_route_tag_address_creation: Enable/disable route-tag addresses on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_security_profile_group: Enable/disable Security Profile Groups on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_spamfilter: Enable/disable Antispam on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_sslvpn: Enable/disable SSL-VPN settings pages on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_sslvpn_personal_bookmarks: Enable/disable SSL-VPN personal bookmark management on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_sslvpn_realms: Enable/disable SSL-VPN realms on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_switch_controller: Enable/disable the switch controller on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_threat_weight: Enable/disable threat weight on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_traffic_shaping: Enable/disable traffic shaping on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_videofilter: Enable/disable Video filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_virtual_patch_profile: Enable/disable Virtual Patching on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_voip_profile: Enable/disable VoIP profiles on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_vpn: Enable/disable VPN tunnels on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_waf_profile: Enable/disable Web Application Firewall on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_wan_load_balancing: Enable/disable SD-WAN on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_wanopt_cache: Enable/disable WAN Optimization and Web Caching on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_webfilter: Enable/disable Web filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_webfilter_advanced: Enable/disable advanced web filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_wireless_controller: Enable/disable the wireless controller on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ztna: Enable/disable Zero Trust Network Access features on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] h323_direct_model: Enable/disable H323 direct model. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] http_external_dest: Offload HTTP traffic to FortiWeb or FortiCache. Valid values: `fortiweb`, `forticache`.
        :param pulumi.Input[str] ike_dn_format: Configure IKE ASN.1 Distinguished Name format conventions. Valid values: `with-space`, `no-space`.
        :param pulumi.Input[int] ike_natt_port: UDP port for IKE/IPsec traffic in NAT-T mode (default 4500).
        :param pulumi.Input[str] ike_policy_route: Enable/disable IKE Policy Based Routing (PBR). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ike_port: UDP port for IKE/IPsec traffic (default 500).
        :param pulumi.Input[str] ike_quick_crash_detect: Enable/disable IKE quick crash detection (RFC 6290). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ike_session_resume: Enable/disable IKEv2 session resumption (RFC 5723). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ike_tcp_port: TCP port for IKE/IPsec traffic (default 4500).
        :param pulumi.Input[str] implicit_allow_dns: Enable/disable implicitly allowing DNS traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] inspection_mode: Inspection mode (proxy-based or flow-based). Valid values: `proxy`, `flow`.
        :param pulumi.Input[str] internet_service_database_cache: Enable/disable Internet Service database caching. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ip: IP address and netmask.
        :param pulumi.Input[str] ip6: IPv6 address prefix for NAT mode.
        :param pulumi.Input[str] lan_extension_controller_addr: Controller IP address or FQDN to connect.
        :param pulumi.Input[str] link_down_access: Enable/disable link down access traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lldp_reception: Enable/disable Link Layer Discovery Protocol (LLDP) reception for this VDOM or apply global settings to this VDOM. Valid values: `enable`, `disable`, `global`.
        :param pulumi.Input[str] lldp_transmission: Enable/disable Link Layer Discovery Protocol (LLDP) transmission for this VDOM or apply global settings to this VDOM. Valid values: `enable`, `disable`, `global`.
        :param pulumi.Input[str] location_id: Local location ID in the form of an IPv4 address.
        :param pulumi.Input[int] mac_ttl: Duration of MAC addresses in Transparent mode (300 - 8640000 sec, default = 300).
        :param pulumi.Input[str] manageip: Transparent mode IPv4 management IP address and netmask.
        :param pulumi.Input[str] manageip6: Transparent mode IPv6 management IP address and netmask.
        :param pulumi.Input[str] multicast_forward: Enable/disable multicast forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] multicast_skip_policy: Enable/disable allowing multicast traffic through the FortiGate without a policy check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] multicast_ttl_notchange: Enable/disable preventing the FortiGate from changing the TTL for forwarded multicast packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat46_force_ipv4_packet_forwarding: Enable/disable mandatory IPv4 packet forwarding in NAT46. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat46_generate_ipv6_fragment_header: Enable/disable NAT46 IPv6 fragment header generation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat64_force_ipv6_packet_forwarding: Enable/disable mandatory IPv6 packet forwarding in NAT64. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ngfw_mode: Next Generation Firewall (NGFW) mode. Valid values: `profile-based`, `policy-based`.
        :param pulumi.Input[str] opmode: Firewall operation mode (NAT or Transparent). Valid values: `nat`, `transparent`.
        :param pulumi.Input[str] prp_trailer_action: Enable/disable action to take on PRP trailer. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] sccp_port: TCP port the SCCP proxy monitors for SCCP traffic (0 - 65535, default = 2000).
        :param pulumi.Input[str] sctp_session_without_init: Enable/disable SCTP session creation without SCTP INIT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ses_denied_traffic: Enable/disable including denied session in the session table. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sip_expectation: Enable/disable the SIP kernel session helper to create an expectation for port 5060. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sip_helper: Enable/disable the SIP session helper to process SIP sessions unless SIP sessions are accepted by the SIP application layer gateway (ALG). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sip_nat_trace: Enable/disable recording the original SIP source IP address when NAT is used. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] sip_ssl_port: TCP port the SIP proxy monitors for SIP SSL/TLS traffic (0 - 65535, default = 5061).
        :param pulumi.Input[int] sip_tcp_port: TCP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
        :param pulumi.Input[int] sip_udp_port: UDP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
        :param pulumi.Input[str] snat_hairpin_traffic: Enable/disable source NAT (SNAT) for hairpin traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_ssh_profile: Profile for SSL/SSH inspection.
        :param pulumi.Input[str] status: Enable/disable this VDOM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_src_check: Enable/disable strict source verification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tcp_session_without_syn: Enable/disable allowing TCP session without SYN flags. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] utf8_spam_tagging: Enable/disable converting antispam tags to UTF-8 for better non-ASCII character support. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] v4_ecmp_mode: IPv4 Equal-cost multi-path (ECMP) routing and load balancing mode. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`.
        :param pulumi.Input[str] vdom_type: VDOM type (traffic or admin).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vpn_stats_log: Enable/disable periodic VPN log statistics for one or more types of VPN. Separate names with a space. Valid values: `ipsec`, `pptp`, `l2tp`, `ssl`.
        :param pulumi.Input[int] vpn_stats_period: Period to send VPN log statistics (0 or 60 - 86400 sec).
        :param pulumi.Input[str] wccp_cache_engine: Enable/disable WCCP cache engine. Valid values: `enable`, `disable`.
        """
        if allow_linkdown_path is not None:
            pulumi.set(__self__, "allow_linkdown_path", allow_linkdown_path)
        if allow_subnet_overlap is not None:
            pulumi.set(__self__, "allow_subnet_overlap", allow_subnet_overlap)
        if application_bandwidth_tracking is not None:
            pulumi.set(__self__, "application_bandwidth_tracking", application_bandwidth_tracking)
        if asymroute is not None:
            pulumi.set(__self__, "asymroute", asymroute)
        if asymroute6 is not None:
            pulumi.set(__self__, "asymroute6", asymroute6)
        if asymroute6_icmp is not None:
            pulumi.set(__self__, "asymroute6_icmp", asymroute6_icmp)
        if asymroute_icmp is not None:
            pulumi.set(__self__, "asymroute_icmp", asymroute_icmp)
        if auxiliary_session is not None:
            pulumi.set(__self__, "auxiliary_session", auxiliary_session)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if bfd_desired_min_tx is not None:
            pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        if bfd_detect_mult is not None:
            pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        if bfd_dont_enforce_src_port is not None:
            pulumi.set(__self__, "bfd_dont_enforce_src_port", bfd_dont_enforce_src_port)
        if bfd_required_min_rx is not None:
            pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        if block_land_attack is not None:
            pulumi.set(__self__, "block_land_attack", block_land_attack)
        if central_nat is not None:
            pulumi.set(__self__, "central_nat", central_nat)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if compliance_check is not None:
            pulumi.set(__self__, "compliance_check", compliance_check)
        if consolidated_firewall_mode is not None:
            pulumi.set(__self__, "consolidated_firewall_mode", consolidated_firewall_mode)
        if default_app_port_as_service is not None:
            pulumi.set(__self__, "default_app_port_as_service", default_app_port_as_service)
        if default_policy_expiry_days is not None:
            pulumi.set(__self__, "default_policy_expiry_days", default_policy_expiry_days)
        if default_voip_alg_mode is not None:
            pulumi.set(__self__, "default_voip_alg_mode", default_voip_alg_mode)
        if deny_tcp_with_icmp is not None:
            pulumi.set(__self__, "deny_tcp_with_icmp", deny_tcp_with_icmp)
        if detect_unknown_esp is not None:
            pulumi.set(__self__, "detect_unknown_esp", detect_unknown_esp)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if dhcp6_server_ip is not None:
            pulumi.set(__self__, "dhcp6_server_ip", dhcp6_server_ip)
        if dhcp_proxy is not None:
            pulumi.set(__self__, "dhcp_proxy", dhcp_proxy)
        if dhcp_proxy_interface is not None:
            pulumi.set(__self__, "dhcp_proxy_interface", dhcp_proxy_interface)
        if dhcp_proxy_interface_select_method is not None:
            pulumi.set(__self__, "dhcp_proxy_interface_select_method", dhcp_proxy_interface_select_method)
        if dhcp_server_ip is not None:
            pulumi.set(__self__, "dhcp_server_ip", dhcp_server_ip)
        if discovered_device_timeout is not None:
            pulumi.set(__self__, "discovered_device_timeout", discovered_device_timeout)
        if dyn_addr_session_check is not None:
            pulumi.set(__self__, "dyn_addr_session_check", dyn_addr_session_check)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ecmp_max_paths is not None:
            pulumi.set(__self__, "ecmp_max_paths", ecmp_max_paths)
        if email_portal_check_dns is not None:
            pulumi.set(__self__, "email_portal_check_dns", email_portal_check_dns)
        if ext_resource_session_check is not None:
            pulumi.set(__self__, "ext_resource_session_check", ext_resource_session_check)
        if firewall_session_dirty is not None:
            pulumi.set(__self__, "firewall_session_dirty", firewall_session_dirty)
        if fqdn_session_check is not None:
            pulumi.set(__self__, "fqdn_session_check", fqdn_session_check)
        if fw_session_hairpin is not None:
            pulumi.set(__self__, "fw_session_hairpin", fw_session_hairpin)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gui_advanced_policy is not None:
            pulumi.set(__self__, "gui_advanced_policy", gui_advanced_policy)
        if gui_advanced_wireless_features is not None:
            pulumi.set(__self__, "gui_advanced_wireless_features", gui_advanced_wireless_features)
        if gui_allow_unnamed_policy is not None:
            pulumi.set(__self__, "gui_allow_unnamed_policy", gui_allow_unnamed_policy)
        if gui_antivirus is not None:
            pulumi.set(__self__, "gui_antivirus", gui_antivirus)
        if gui_ap_profile is not None:
            pulumi.set(__self__, "gui_ap_profile", gui_ap_profile)
        if gui_application_control is not None:
            pulumi.set(__self__, "gui_application_control", gui_application_control)
        if gui_casb is not None:
            pulumi.set(__self__, "gui_casb", gui_casb)
        if gui_default_policy_columns is not None:
            pulumi.set(__self__, "gui_default_policy_columns", gui_default_policy_columns)
        if gui_dhcp_advanced is not None:
            pulumi.set(__self__, "gui_dhcp_advanced", gui_dhcp_advanced)
        if gui_dlp is not None:
            pulumi.set(__self__, "gui_dlp", gui_dlp)
        if gui_dlp_profile is not None:
            pulumi.set(__self__, "gui_dlp_profile", gui_dlp_profile)
        if gui_dns_database is not None:
            pulumi.set(__self__, "gui_dns_database", gui_dns_database)
        if gui_dnsfilter is not None:
            pulumi.set(__self__, "gui_dnsfilter", gui_dnsfilter)
        if gui_domain_ip_reputation is not None:
            pulumi.set(__self__, "gui_domain_ip_reputation", gui_domain_ip_reputation)
        if gui_dos_policy is not None:
            pulumi.set(__self__, "gui_dos_policy", gui_dos_policy)
        if gui_dynamic_device_os_id is not None:
            pulumi.set(__self__, "gui_dynamic_device_os_id", gui_dynamic_device_os_id)
        if gui_dynamic_profile_display is not None:
            pulumi.set(__self__, "gui_dynamic_profile_display", gui_dynamic_profile_display)
        if gui_dynamic_routing is not None:
            pulumi.set(__self__, "gui_dynamic_routing", gui_dynamic_routing)
        if gui_email_collection is not None:
            pulumi.set(__self__, "gui_email_collection", gui_email_collection)
        if gui_endpoint_control is not None:
            pulumi.set(__self__, "gui_endpoint_control", gui_endpoint_control)
        if gui_endpoint_control_advanced is not None:
            pulumi.set(__self__, "gui_endpoint_control_advanced", gui_endpoint_control_advanced)
        if gui_enforce_change_summary is not None:
            pulumi.set(__self__, "gui_enforce_change_summary", gui_enforce_change_summary)
        if gui_explicit_proxy is not None:
            pulumi.set(__self__, "gui_explicit_proxy", gui_explicit_proxy)
        if gui_file_filter is not None:
            pulumi.set(__self__, "gui_file_filter", gui_file_filter)
        if gui_fortiap_split_tunneling is not None:
            pulumi.set(__self__, "gui_fortiap_split_tunneling", gui_fortiap_split_tunneling)
        if gui_fortiextender_controller is not None:
            pulumi.set(__self__, "gui_fortiextender_controller", gui_fortiextender_controller)
        if gui_icap is not None:
            pulumi.set(__self__, "gui_icap", gui_icap)
        if gui_implicit_policy is not None:
            pulumi.set(__self__, "gui_implicit_policy", gui_implicit_policy)
        if gui_ips is not None:
            pulumi.set(__self__, "gui_ips", gui_ips)
        if gui_load_balance is not None:
            pulumi.set(__self__, "gui_load_balance", gui_load_balance)
        if gui_local_in_policy is not None:
            pulumi.set(__self__, "gui_local_in_policy", gui_local_in_policy)
        if gui_local_reports is not None:
            pulumi.set(__self__, "gui_local_reports", gui_local_reports)
        if gui_multicast_policy is not None:
            pulumi.set(__self__, "gui_multicast_policy", gui_multicast_policy)
        if gui_multiple_interface_policy is not None:
            pulumi.set(__self__, "gui_multiple_interface_policy", gui_multiple_interface_policy)
        if gui_multiple_utm_profiles is not None:
            pulumi.set(__self__, "gui_multiple_utm_profiles", gui_multiple_utm_profiles)
        if gui_nat4664 is not None:
            pulumi.set(__self__, "gui_nat4664", gui_nat4664)
        if gui_object_colors is not None:
            pulumi.set(__self__, "gui_object_colors", gui_object_colors)
        if gui_ot is not None:
            pulumi.set(__self__, "gui_ot", gui_ot)
        if gui_per_policy_disclaimer is not None:
            pulumi.set(__self__, "gui_per_policy_disclaimer", gui_per_policy_disclaimer)
        if gui_policy_based_ipsec is not None:
            pulumi.set(__self__, "gui_policy_based_ipsec", gui_policy_based_ipsec)
        if gui_policy_disclaimer is not None:
            pulumi.set(__self__, "gui_policy_disclaimer", gui_policy_disclaimer)
        if gui_policy_learning is not None:
            pulumi.set(__self__, "gui_policy_learning", gui_policy_learning)
        if gui_proxy_inspection is not None:
            pulumi.set(__self__, "gui_proxy_inspection", gui_proxy_inspection)
        if gui_replacement_message_groups is not None:
            pulumi.set(__self__, "gui_replacement_message_groups", gui_replacement_message_groups)
        if gui_route_tag_address_creation is not None:
            pulumi.set(__self__, "gui_route_tag_address_creation", gui_route_tag_address_creation)
        if gui_security_profile_group is not None:
            pulumi.set(__self__, "gui_security_profile_group", gui_security_profile_group)
        if gui_spamfilter is not None:
            pulumi.set(__self__, "gui_spamfilter", gui_spamfilter)
        if gui_sslvpn is not None:
            pulumi.set(__self__, "gui_sslvpn", gui_sslvpn)
        if gui_sslvpn_personal_bookmarks is not None:
            pulumi.set(__self__, "gui_sslvpn_personal_bookmarks", gui_sslvpn_personal_bookmarks)
        if gui_sslvpn_realms is not None:
            pulumi.set(__self__, "gui_sslvpn_realms", gui_sslvpn_realms)
        if gui_switch_controller is not None:
            pulumi.set(__self__, "gui_switch_controller", gui_switch_controller)
        if gui_threat_weight is not None:
            pulumi.set(__self__, "gui_threat_weight", gui_threat_weight)
        if gui_traffic_shaping is not None:
            pulumi.set(__self__, "gui_traffic_shaping", gui_traffic_shaping)
        if gui_videofilter is not None:
            pulumi.set(__self__, "gui_videofilter", gui_videofilter)
        if gui_virtual_patch_profile is not None:
            pulumi.set(__self__, "gui_virtual_patch_profile", gui_virtual_patch_profile)
        if gui_voip_profile is not None:
            pulumi.set(__self__, "gui_voip_profile", gui_voip_profile)
        if gui_vpn is not None:
            pulumi.set(__self__, "gui_vpn", gui_vpn)
        if gui_waf_profile is not None:
            pulumi.set(__self__, "gui_waf_profile", gui_waf_profile)
        if gui_wan_load_balancing is not None:
            pulumi.set(__self__, "gui_wan_load_balancing", gui_wan_load_balancing)
        if gui_wanopt_cache is not None:
            pulumi.set(__self__, "gui_wanopt_cache", gui_wanopt_cache)
        if gui_webfilter is not None:
            pulumi.set(__self__, "gui_webfilter", gui_webfilter)
        if gui_webfilter_advanced is not None:
            pulumi.set(__self__, "gui_webfilter_advanced", gui_webfilter_advanced)
        if gui_wireless_controller is not None:
            pulumi.set(__self__, "gui_wireless_controller", gui_wireless_controller)
        if gui_ztna is not None:
            pulumi.set(__self__, "gui_ztna", gui_ztna)
        if h323_direct_model is not None:
            pulumi.set(__self__, "h323_direct_model", h323_direct_model)
        if http_external_dest is not None:
            pulumi.set(__self__, "http_external_dest", http_external_dest)
        if ike_dn_format is not None:
            pulumi.set(__self__, "ike_dn_format", ike_dn_format)
        if ike_natt_port is not None:
            pulumi.set(__self__, "ike_natt_port", ike_natt_port)
        if ike_policy_route is not None:
            pulumi.set(__self__, "ike_policy_route", ike_policy_route)
        if ike_port is not None:
            pulumi.set(__self__, "ike_port", ike_port)
        if ike_quick_crash_detect is not None:
            pulumi.set(__self__, "ike_quick_crash_detect", ike_quick_crash_detect)
        if ike_session_resume is not None:
            pulumi.set(__self__, "ike_session_resume", ike_session_resume)
        if ike_tcp_port is not None:
            pulumi.set(__self__, "ike_tcp_port", ike_tcp_port)
        if implicit_allow_dns is not None:
            pulumi.set(__self__, "implicit_allow_dns", implicit_allow_dns)
        if inspection_mode is not None:
            pulumi.set(__self__, "inspection_mode", inspection_mode)
        if internet_service_database_cache is not None:
            pulumi.set(__self__, "internet_service_database_cache", internet_service_database_cache)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if lan_extension_controller_addr is not None:
            pulumi.set(__self__, "lan_extension_controller_addr", lan_extension_controller_addr)
        if link_down_access is not None:
            pulumi.set(__self__, "link_down_access", link_down_access)
        if lldp_reception is not None:
            pulumi.set(__self__, "lldp_reception", lldp_reception)
        if lldp_transmission is not None:
            pulumi.set(__self__, "lldp_transmission", lldp_transmission)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if mac_ttl is not None:
            pulumi.set(__self__, "mac_ttl", mac_ttl)
        if manageip is not None:
            pulumi.set(__self__, "manageip", manageip)
        if manageip6 is not None:
            pulumi.set(__self__, "manageip6", manageip6)
        if multicast_forward is not None:
            pulumi.set(__self__, "multicast_forward", multicast_forward)
        if multicast_skip_policy is not None:
            pulumi.set(__self__, "multicast_skip_policy", multicast_skip_policy)
        if multicast_ttl_notchange is not None:
            pulumi.set(__self__, "multicast_ttl_notchange", multicast_ttl_notchange)
        if nat46_force_ipv4_packet_forwarding is not None:
            pulumi.set(__self__, "nat46_force_ipv4_packet_forwarding", nat46_force_ipv4_packet_forwarding)
        if nat46_generate_ipv6_fragment_header is not None:
            pulumi.set(__self__, "nat46_generate_ipv6_fragment_header", nat46_generate_ipv6_fragment_header)
        if nat64_force_ipv6_packet_forwarding is not None:
            pulumi.set(__self__, "nat64_force_ipv6_packet_forwarding", nat64_force_ipv6_packet_forwarding)
        if ngfw_mode is not None:
            pulumi.set(__self__, "ngfw_mode", ngfw_mode)
        if opmode is not None:
            pulumi.set(__self__, "opmode", opmode)
        if prp_trailer_action is not None:
            pulumi.set(__self__, "prp_trailer_action", prp_trailer_action)
        if sccp_port is not None:
            pulumi.set(__self__, "sccp_port", sccp_port)
        if sctp_session_without_init is not None:
            pulumi.set(__self__, "sctp_session_without_init", sctp_session_without_init)
        if ses_denied_traffic is not None:
            pulumi.set(__self__, "ses_denied_traffic", ses_denied_traffic)
        if sip_expectation is not None:
            pulumi.set(__self__, "sip_expectation", sip_expectation)
        if sip_helper is not None:
            pulumi.set(__self__, "sip_helper", sip_helper)
        if sip_nat_trace is not None:
            pulumi.set(__self__, "sip_nat_trace", sip_nat_trace)
        if sip_ssl_port is not None:
            pulumi.set(__self__, "sip_ssl_port", sip_ssl_port)
        if sip_tcp_port is not None:
            pulumi.set(__self__, "sip_tcp_port", sip_tcp_port)
        if sip_udp_port is not None:
            pulumi.set(__self__, "sip_udp_port", sip_udp_port)
        if snat_hairpin_traffic is not None:
            pulumi.set(__self__, "snat_hairpin_traffic", snat_hairpin_traffic)
        if ssl_ssh_profile is not None:
            pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strict_src_check is not None:
            pulumi.set(__self__, "strict_src_check", strict_src_check)
        if tcp_session_without_syn is not None:
            pulumi.set(__self__, "tcp_session_without_syn", tcp_session_without_syn)
        if utf8_spam_tagging is not None:
            pulumi.set(__self__, "utf8_spam_tagging", utf8_spam_tagging)
        if v4_ecmp_mode is not None:
            pulumi.set(__self__, "v4_ecmp_mode", v4_ecmp_mode)
        if vdom_type is not None:
            pulumi.set(__self__, "vdom_type", vdom_type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vpn_stats_log is not None:
            pulumi.set(__self__, "vpn_stats_log", vpn_stats_log)
        if vpn_stats_period is not None:
            pulumi.set(__self__, "vpn_stats_period", vpn_stats_period)
        if wccp_cache_engine is not None:
            pulumi.set(__self__, "wccp_cache_engine", wccp_cache_engine)

    @property
    @pulumi.getter(name="allowLinkdownPath")
    def allow_linkdown_path(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable link down path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_linkdown_path")

    @allow_linkdown_path.setter
    def allow_linkdown_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_linkdown_path", value)

    @property
    @pulumi.getter(name="allowSubnetOverlap")
    def allow_subnet_overlap(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing interface subnets to use overlapping IP addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_subnet_overlap")

    @allow_subnet_overlap.setter
    def allow_subnet_overlap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_subnet_overlap", value)

    @property
    @pulumi.getter(name="applicationBandwidthTracking")
    def application_bandwidth_tracking(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable application bandwidth tracking. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "application_bandwidth_tracking")

    @application_bandwidth_tracking.setter
    def application_bandwidth_tracking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_bandwidth_tracking", value)

    @property
    @pulumi.getter
    def asymroute(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 asymmetric routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asymroute")

    @asymroute.setter
    def asymroute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asymroute", value)

    @property
    @pulumi.getter
    def asymroute6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable asymmetric IPv6 routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asymroute6")

    @asymroute6.setter
    def asymroute6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asymroute6", value)

    @property
    @pulumi.getter(name="asymroute6Icmp")
    def asymroute6_icmp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable asymmetric ICMPv6 routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asymroute6_icmp")

    @asymroute6_icmp.setter
    def asymroute6_icmp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asymroute6_icmp", value)

    @property
    @pulumi.getter(name="asymrouteIcmp")
    def asymroute_icmp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ICMP asymmetric routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asymroute_icmp")

    @asymroute_icmp.setter
    def asymroute_icmp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asymroute_icmp", value)

    @property
    @pulumi.getter(name="auxiliarySession")
    def auxiliary_session(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable auxiliary session. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auxiliary_session")

    @auxiliary_session.setter
    def auxiliary_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auxiliary_session", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Bi-directional Forwarding Detection (BFD) on all interfaces. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> Optional[pulumi.Input[int]]:
        """
        BFD desired minimal transmit interval (1 - 100000 ms, default = 50).
        """
        return pulumi.get(self, "bfd_desired_min_tx")

    @bfd_desired_min_tx.setter
    def bfd_desired_min_tx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_desired_min_tx", value)

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> Optional[pulumi.Input[int]]:
        """
        BFD detection multiplier (1 - 50, default = 3).
        """
        return pulumi.get(self, "bfd_detect_mult")

    @bfd_detect_mult.setter
    def bfd_detect_mult(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_detect_mult", value)

    @property
    @pulumi.getter(name="bfdDontEnforceSrcPort")
    def bfd_dont_enforce_src_port(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to not enforce verifying the source port of BFD Packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd_dont_enforce_src_port")

    @bfd_dont_enforce_src_port.setter
    def bfd_dont_enforce_src_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd_dont_enforce_src_port", value)

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> Optional[pulumi.Input[int]]:
        """
        BFD required minimal receive interval (1 - 100000 ms, default = 50).
        """
        return pulumi.get(self, "bfd_required_min_rx")

    @bfd_required_min_rx.setter
    def bfd_required_min_rx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_required_min_rx", value)

    @property
    @pulumi.getter(name="blockLandAttack")
    def block_land_attack(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable blocking of land attacks. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_land_attack")

    @block_land_attack.setter
    def block_land_attack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_land_attack", value)

    @property
    @pulumi.getter(name="centralNat")
    def central_nat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable central NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "central_nat")

    @central_nat.setter
    def central_nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "central_nat", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM comments.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="complianceCheck")
    def compliance_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PCI DSS compliance checking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "compliance_check")

    @compliance_check.setter
    def compliance_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compliance_check", value)

    @property
    @pulumi.getter(name="consolidatedFirewallMode")
    def consolidated_firewall_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Consolidated firewall mode.
        """
        return pulumi.get(self, "consolidated_firewall_mode")

    @consolidated_firewall_mode.setter
    def consolidated_firewall_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consolidated_firewall_mode", value)

    @property
    @pulumi.getter(name="defaultAppPortAsService")
    def default_app_port_as_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy service enforcement based on application default ports. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default_app_port_as_service")

    @default_app_port_as_service.setter
    def default_app_port_as_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_app_port_as_service", value)

    @property
    @pulumi.getter(name="defaultPolicyExpiryDays")
    def default_policy_expiry_days(self) -> Optional[pulumi.Input[int]]:
        """
        Default policy expiry in days (0 - 365 days, default = 30).
        """
        return pulumi.get(self, "default_policy_expiry_days")

    @default_policy_expiry_days.setter
    def default_policy_expiry_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_policy_expiry_days", value)

    @property
    @pulumi.getter(name="defaultVoipAlgMode")
    def default_voip_alg_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how the FortiGate handles VoIP traffic when a policy that accepts the traffic doesn't include a VoIP profile. Valid values: `proxy-based`, `kernel-helper-based`.
        """
        return pulumi.get(self, "default_voip_alg_mode")

    @default_voip_alg_mode.setter
    def default_voip_alg_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_voip_alg_mode", value)

    @property
    @pulumi.getter(name="denyTcpWithIcmp")
    def deny_tcp_with_icmp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable denying TCP by sending an ICMP communication prohibited packet. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "deny_tcp_with_icmp")

    @deny_tcp_with_icmp.setter
    def deny_tcp_with_icmp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deny_tcp_with_icmp", value)

    @property
    @pulumi.getter(name="detectUnknownEsp")
    def detect_unknown_esp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable detection of unknown ESP packets (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "detect_unknown_esp")

    @detect_unknown_esp.setter
    def detect_unknown_esp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detect_unknown_esp", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        Interface to use for management access for NAT mode.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="dhcp6ServerIp")
    def dhcp6_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        DHCPv6 server IPv6 address.
        """
        return pulumi.get(self, "dhcp6_server_ip")

    @dhcp6_server_ip.setter
    def dhcp6_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_server_ip", value)

    @property
    @pulumi.getter(name="dhcpProxy")
    def dhcp_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the DHCP Proxy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_proxy")

    @dhcp_proxy.setter
    def dhcp_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_proxy", value)

    @property
    @pulumi.getter(name="dhcpProxyInterface")
    def dhcp_proxy_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "dhcp_proxy_interface")

    @dhcp_proxy_interface.setter
    def dhcp_proxy_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_proxy_interface", value)

    @property
    @pulumi.getter(name="dhcpProxyInterfaceSelectMethod")
    def dhcp_proxy_interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "dhcp_proxy_interface_select_method")

    @dhcp_proxy_interface_select_method.setter
    def dhcp_proxy_interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_proxy_interface_select_method", value)

    @property
    @pulumi.getter(name="dhcpServerIp")
    def dhcp_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP Server IPv4 address.
        """
        return pulumi.get(self, "dhcp_server_ip")

    @dhcp_server_ip.setter
    def dhcp_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_server_ip", value)

    @property
    @pulumi.getter(name="discoveredDeviceTimeout")
    def discovered_device_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for discovered devices (1 - 365 days, default = 28).
        """
        return pulumi.get(self, "discovered_device_timeout")

    @discovered_device_timeout.setter
    def discovered_device_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "discovered_device_timeout", value)

    @property
    @pulumi.getter(name="dynAddrSessionCheck")
    def dyn_addr_session_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dirty session check caused by dynamic address updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dyn_addr_session_check")

    @dyn_addr_session_check.setter
    def dyn_addr_session_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dyn_addr_session_check", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="ecmpMaxPaths")
    def ecmp_max_paths(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of Equal Cost Multi-Path (ECMP) next-hops. Set to 1 to disable ECMP routing (1 - 100, default = 10).
        """
        return pulumi.get(self, "ecmp_max_paths")

    @ecmp_max_paths.setter
    def ecmp_max_paths(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ecmp_max_paths", value)

    @property
    @pulumi.getter(name="emailPortalCheckDns")
    def email_portal_check_dns(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable using DNS to validate email addresses collected by a captive portal. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "email_portal_check_dns")

    @email_portal_check_dns.setter
    def email_portal_check_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_portal_check_dns", value)

    @property
    @pulumi.getter(name="extResourceSessionCheck")
    def ext_resource_session_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dirty session check caused by external resource updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ext_resource_session_check")

    @ext_resource_session_check.setter
    def ext_resource_session_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_resource_session_check", value)

    @property
    @pulumi.getter(name="firewallSessionDirty")
    def firewall_session_dirty(self) -> Optional[pulumi.Input[str]]:
        """
        Select how to manage sessions affected by firewall policy configuration changes. Valid values: `check-all`, `check-new`, `check-policy-option`.
        """
        return pulumi.get(self, "firewall_session_dirty")

    @firewall_session_dirty.setter
    def firewall_session_dirty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_session_dirty", value)

    @property
    @pulumi.getter(name="fqdnSessionCheck")
    def fqdn_session_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dirty session check caused by FQDN updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fqdn_session_check")

    @fqdn_session_check.setter
    def fqdn_session_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn_session_check", value)

    @property
    @pulumi.getter(name="fwSessionHairpin")
    def fw_session_hairpin(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable checking for a matching policy each time hairpin traffic goes through the FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fw_session_hairpin")

    @fw_session_hairpin.setter
    def fw_session_hairpin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fw_session_hairpin", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Transparent mode IPv4 default gateway IP address.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[pulumi.Input[str]]:
        """
        Transparent mode IPv4 default gateway IP address.
        """
        return pulumi.get(self, "gateway6")

    @gateway6.setter
    def gateway6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway6", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="guiAdvancedPolicy")
    def gui_advanced_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advanced policy configuration on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_advanced_policy")

    @gui_advanced_policy.setter
    def gui_advanced_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_advanced_policy", value)

    @property
    @pulumi.getter(name="guiAdvancedWirelessFeatures")
    def gui_advanced_wireless_features(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advanced wireless features in GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_advanced_wireless_features")

    @gui_advanced_wireless_features.setter
    def gui_advanced_wireless_features(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_advanced_wireless_features", value)

    @property
    @pulumi.getter(name="guiAllowUnnamedPolicy")
    def gui_allow_unnamed_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the requirement for policy naming on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_allow_unnamed_policy")

    @gui_allow_unnamed_policy.setter
    def gui_allow_unnamed_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_allow_unnamed_policy", value)

    @property
    @pulumi.getter(name="guiAntivirus")
    def gui_antivirus(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AntiVirus on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_antivirus")

    @gui_antivirus.setter
    def gui_antivirus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_antivirus", value)

    @property
    @pulumi.getter(name="guiApProfile")
    def gui_ap_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiAP profiles on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_ap_profile")

    @gui_ap_profile.setter
    def gui_ap_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_ap_profile", value)

    @property
    @pulumi.getter(name="guiApplicationControl")
    def gui_application_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable application control on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_application_control")

    @gui_application_control.setter
    def gui_application_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_application_control", value)

    @property
    @pulumi.getter(name="guiCasb")
    def gui_casb(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Inline-CASB on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_casb")

    @gui_casb.setter
    def gui_casb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_casb", value)

    @property
    @pulumi.getter(name="guiDefaultPolicyColumns")
    def gui_default_policy_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingsGuiDefaultPolicyColumnArgs']]]]:
        """
        Default columns to display for policy lists on GUI. The structure of `gui_default_policy_columns` block is documented below.
        """
        return pulumi.get(self, "gui_default_policy_columns")

    @gui_default_policy_columns.setter
    def gui_default_policy_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsGuiDefaultPolicyColumnArgs']]]]):
        pulumi.set(self, "gui_default_policy_columns", value)

    @property
    @pulumi.getter(name="guiDhcpAdvanced")
    def gui_dhcp_advanced(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advanced DHCP options on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dhcp_advanced")

    @gui_dhcp_advanced.setter
    def gui_dhcp_advanced(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dhcp_advanced", value)

    @property
    @pulumi.getter(name="guiDlp")
    def gui_dlp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DLP on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dlp")

    @gui_dlp.setter
    def gui_dlp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dlp", value)

    @property
    @pulumi.getter(name="guiDlpProfile")
    def gui_dlp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Data Leak Prevention on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dlp_profile")

    @gui_dlp_profile.setter
    def gui_dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dlp_profile", value)

    @property
    @pulumi.getter(name="guiDnsDatabase")
    def gui_dns_database(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DNS database settings on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dns_database")

    @gui_dns_database.setter
    def gui_dns_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dns_database", value)

    @property
    @pulumi.getter(name="guiDnsfilter")
    def gui_dnsfilter(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DNS Filtering on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dnsfilter")

    @gui_dnsfilter.setter
    def gui_dnsfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dnsfilter", value)

    @property
    @pulumi.getter(name="guiDomainIpReputation")
    def gui_domain_ip_reputation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Domain and IP Reputation on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_domain_ip_reputation")

    @gui_domain_ip_reputation.setter
    def gui_domain_ip_reputation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_domain_ip_reputation", value)

    @property
    @pulumi.getter(name="guiDosPolicy")
    def gui_dos_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DoS policies on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dos_policy")

    @gui_dos_policy.setter
    def gui_dos_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dos_policy", value)

    @property
    @pulumi.getter(name="guiDynamicDeviceOsId")
    def gui_dynamic_device_os_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Create dynamic addresses to manage known devices. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dynamic_device_os_id")

    @gui_dynamic_device_os_id.setter
    def gui_dynamic_device_os_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dynamic_device_os_id", value)

    @property
    @pulumi.getter(name="guiDynamicProfileDisplay")
    def gui_dynamic_profile_display(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable RADIUS Single Sign On (RSSO) on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dynamic_profile_display")

    @gui_dynamic_profile_display.setter
    def gui_dynamic_profile_display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dynamic_profile_display", value)

    @property
    @pulumi.getter(name="guiDynamicRouting")
    def gui_dynamic_routing(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic routing on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dynamic_routing")

    @gui_dynamic_routing.setter
    def gui_dynamic_routing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dynamic_routing", value)

    @property
    @pulumi.getter(name="guiEmailCollection")
    def gui_email_collection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable email collection on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_email_collection")

    @gui_email_collection.setter
    def gui_email_collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_email_collection", value)

    @property
    @pulumi.getter(name="guiEndpointControl")
    def gui_endpoint_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable endpoint control on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_endpoint_control")

    @gui_endpoint_control.setter
    def gui_endpoint_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_endpoint_control", value)

    @property
    @pulumi.getter(name="guiEndpointControlAdvanced")
    def gui_endpoint_control_advanced(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advanced endpoint control options on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_endpoint_control_advanced")

    @gui_endpoint_control_advanced.setter
    def gui_endpoint_control_advanced(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_endpoint_control_advanced", value)

    @property
    @pulumi.getter(name="guiEnforceChangeSummary")
    def gui_enforce_change_summary(self) -> Optional[pulumi.Input[str]]:
        """
        Enforce change summaries for select tables in the GUI. Valid values: `disable`, `require`, `optional`.
        """
        return pulumi.get(self, "gui_enforce_change_summary")

    @gui_enforce_change_summary.setter
    def gui_enforce_change_summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_enforce_change_summary", value)

    @property
    @pulumi.getter(name="guiExplicitProxy")
    def gui_explicit_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the explicit proxy on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_explicit_proxy")

    @gui_explicit_proxy.setter
    def gui_explicit_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_explicit_proxy", value)

    @property
    @pulumi.getter(name="guiFileFilter")
    def gui_file_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable File-filter on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_file_filter")

    @gui_file_filter.setter
    def gui_file_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_file_filter", value)

    @property
    @pulumi.getter(name="guiFortiapSplitTunneling")
    def gui_fortiap_split_tunneling(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiAP split tunneling on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_fortiap_split_tunneling")

    @gui_fortiap_split_tunneling.setter
    def gui_fortiap_split_tunneling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_fortiap_split_tunneling", value)

    @property
    @pulumi.getter(name="guiFortiextenderController")
    def gui_fortiextender_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiExtender on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_fortiextender_controller")

    @gui_fortiextender_controller.setter
    def gui_fortiextender_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_fortiextender_controller", value)

    @property
    @pulumi.getter(name="guiIcap")
    def gui_icap(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ICAP on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_icap")

    @gui_icap.setter
    def gui_icap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_icap", value)

    @property
    @pulumi.getter(name="guiImplicitPolicy")
    def gui_implicit_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable implicit firewall policies on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_implicit_policy")

    @gui_implicit_policy.setter
    def gui_implicit_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_implicit_policy", value)

    @property
    @pulumi.getter(name="guiIps")
    def gui_ips(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_ips")

    @gui_ips.setter
    def gui_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_ips", value)

    @property
    @pulumi.getter(name="guiLoadBalance")
    def gui_load_balance(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable server load balancing on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_load_balance")

    @gui_load_balance.setter
    def gui_load_balance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_load_balance", value)

    @property
    @pulumi.getter(name="guiLocalInPolicy")
    def gui_local_in_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Local-In policies on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_local_in_policy")

    @gui_local_in_policy.setter
    def gui_local_in_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_local_in_policy", value)

    @property
    @pulumi.getter(name="guiLocalReports")
    def gui_local_reports(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local reports on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_local_reports")

    @gui_local_reports.setter
    def gui_local_reports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_local_reports", value)

    @property
    @pulumi.getter(name="guiMulticastPolicy")
    def gui_multicast_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable multicast firewall policies on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_multicast_policy")

    @gui_multicast_policy.setter
    def gui_multicast_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_multicast_policy", value)

    @property
    @pulumi.getter(name="guiMultipleInterfacePolicy")
    def gui_multiple_interface_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding multiple interfaces to a policy on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_multiple_interface_policy")

    @gui_multiple_interface_policy.setter
    def gui_multiple_interface_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_multiple_interface_policy", value)

    @property
    @pulumi.getter(name="guiMultipleUtmProfiles")
    def gui_multiple_utm_profiles(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable multiple UTM profiles on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_multiple_utm_profiles")

    @gui_multiple_utm_profiles.setter
    def gui_multiple_utm_profiles(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_multiple_utm_profiles", value)

    @property
    @pulumi.getter(name="guiNat4664")
    def gui_nat4664(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT46 and NAT64 settings on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_nat4664")

    @gui_nat4664.setter
    def gui_nat4664(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_nat4664", value)

    @property
    @pulumi.getter(name="guiObjectColors")
    def gui_object_colors(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable object colors on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_object_colors")

    @gui_object_colors.setter
    def gui_object_colors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_object_colors", value)

    @property
    @pulumi.getter(name="guiOt")
    def gui_ot(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Show Operational Technology Purdue Model. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_ot")

    @gui_ot.setter
    def gui_ot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_ot", value)

    @property
    @pulumi.getter(name="guiPerPolicyDisclaimer")
    def gui_per_policy_disclaimer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy disclaimer on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_per_policy_disclaimer")

    @gui_per_policy_disclaimer.setter
    def gui_per_policy_disclaimer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_per_policy_disclaimer", value)

    @property
    @pulumi.getter(name="guiPolicyBasedIpsec")
    def gui_policy_based_ipsec(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy-based IPsec VPN on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_policy_based_ipsec")

    @gui_policy_based_ipsec.setter
    def gui_policy_based_ipsec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_policy_based_ipsec", value)

    @property
    @pulumi.getter(name="guiPolicyDisclaimer")
    def gui_policy_disclaimer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy disclaimer on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_policy_disclaimer")

    @gui_policy_disclaimer.setter
    def gui_policy_disclaimer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_policy_disclaimer", value)

    @property
    @pulumi.getter(name="guiPolicyLearning")
    def gui_policy_learning(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable firewall policy learning mode on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_policy_learning")

    @gui_policy_learning.setter
    def gui_policy_learning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_policy_learning", value)

    @property
    @pulumi.getter(name="guiProxyInspection")
    def gui_proxy_inspection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the proxy features on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_proxy_inspection")

    @gui_proxy_inspection.setter
    def gui_proxy_inspection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_proxy_inspection", value)

    @property
    @pulumi.getter(name="guiReplacementMessageGroups")
    def gui_replacement_message_groups(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable replacement message groups on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_replacement_message_groups")

    @gui_replacement_message_groups.setter
    def gui_replacement_message_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_replacement_message_groups", value)

    @property
    @pulumi.getter(name="guiRouteTagAddressCreation")
    def gui_route_tag_address_creation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable route-tag addresses on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_route_tag_address_creation")

    @gui_route_tag_address_creation.setter
    def gui_route_tag_address_creation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_route_tag_address_creation", value)

    @property
    @pulumi.getter(name="guiSecurityProfileGroup")
    def gui_security_profile_group(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Security Profile Groups on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_security_profile_group")

    @gui_security_profile_group.setter
    def gui_security_profile_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_security_profile_group", value)

    @property
    @pulumi.getter(name="guiSpamfilter")
    def gui_spamfilter(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Antispam on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_spamfilter")

    @gui_spamfilter.setter
    def gui_spamfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_spamfilter", value)

    @property
    @pulumi.getter(name="guiSslvpn")
    def gui_sslvpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL-VPN settings pages on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_sslvpn")

    @gui_sslvpn.setter
    def gui_sslvpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_sslvpn", value)

    @property
    @pulumi.getter(name="guiSslvpnPersonalBookmarks")
    def gui_sslvpn_personal_bookmarks(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL-VPN personal bookmark management on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_sslvpn_personal_bookmarks")

    @gui_sslvpn_personal_bookmarks.setter
    def gui_sslvpn_personal_bookmarks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_sslvpn_personal_bookmarks", value)

    @property
    @pulumi.getter(name="guiSslvpnRealms")
    def gui_sslvpn_realms(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL-VPN realms on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_sslvpn_realms")

    @gui_sslvpn_realms.setter
    def gui_sslvpn_realms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_sslvpn_realms", value)

    @property
    @pulumi.getter(name="guiSwitchController")
    def gui_switch_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the switch controller on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_switch_controller")

    @gui_switch_controller.setter
    def gui_switch_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_switch_controller", value)

    @property
    @pulumi.getter(name="guiThreatWeight")
    def gui_threat_weight(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable threat weight on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_threat_weight")

    @gui_threat_weight.setter
    def gui_threat_weight(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_threat_weight", value)

    @property
    @pulumi.getter(name="guiTrafficShaping")
    def gui_traffic_shaping(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable traffic shaping on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_traffic_shaping")

    @gui_traffic_shaping.setter
    def gui_traffic_shaping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_traffic_shaping", value)

    @property
    @pulumi.getter(name="guiVideofilter")
    def gui_videofilter(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Video filtering on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_videofilter")

    @gui_videofilter.setter
    def gui_videofilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_videofilter", value)

    @property
    @pulumi.getter(name="guiVirtualPatchProfile")
    def gui_virtual_patch_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Virtual Patching on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_virtual_patch_profile")

    @gui_virtual_patch_profile.setter
    def gui_virtual_patch_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_virtual_patch_profile", value)

    @property
    @pulumi.getter(name="guiVoipProfile")
    def gui_voip_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VoIP profiles on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_voip_profile")

    @gui_voip_profile.setter
    def gui_voip_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_voip_profile", value)

    @property
    @pulumi.getter(name="guiVpn")
    def gui_vpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPN tunnels on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_vpn")

    @gui_vpn.setter
    def gui_vpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_vpn", value)

    @property
    @pulumi.getter(name="guiWafProfile")
    def gui_waf_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Web Application Firewall on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_waf_profile")

    @gui_waf_profile.setter
    def gui_waf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_waf_profile", value)

    @property
    @pulumi.getter(name="guiWanLoadBalancing")
    def gui_wan_load_balancing(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_wan_load_balancing")

    @gui_wan_load_balancing.setter
    def gui_wan_load_balancing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_wan_load_balancing", value)

    @property
    @pulumi.getter(name="guiWanoptCache")
    def gui_wanopt_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WAN Optimization and Web Caching on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_wanopt_cache")

    @gui_wanopt_cache.setter
    def gui_wanopt_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_wanopt_cache", value)

    @property
    @pulumi.getter(name="guiWebfilter")
    def gui_webfilter(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Web filtering on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_webfilter")

    @gui_webfilter.setter
    def gui_webfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_webfilter", value)

    @property
    @pulumi.getter(name="guiWebfilterAdvanced")
    def gui_webfilter_advanced(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advanced web filtering on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_webfilter_advanced")

    @gui_webfilter_advanced.setter
    def gui_webfilter_advanced(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_webfilter_advanced", value)

    @property
    @pulumi.getter(name="guiWirelessController")
    def gui_wireless_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the wireless controller on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_wireless_controller")

    @gui_wireless_controller.setter
    def gui_wireless_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_wireless_controller", value)

    @property
    @pulumi.getter(name="guiZtna")
    def gui_ztna(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Zero Trust Network Access features on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_ztna")

    @gui_ztna.setter
    def gui_ztna(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_ztna", value)

    @property
    @pulumi.getter(name="h323DirectModel")
    def h323_direct_model(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable H323 direct model. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "h323_direct_model")

    @h323_direct_model.setter
    def h323_direct_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h323_direct_model", value)

    @property
    @pulumi.getter(name="httpExternalDest")
    def http_external_dest(self) -> Optional[pulumi.Input[str]]:
        """
        Offload HTTP traffic to FortiWeb or FortiCache. Valid values: `fortiweb`, `forticache`.
        """
        return pulumi.get(self, "http_external_dest")

    @http_external_dest.setter
    def http_external_dest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_external_dest", value)

    @property
    @pulumi.getter(name="ikeDnFormat")
    def ike_dn_format(self) -> Optional[pulumi.Input[str]]:
        """
        Configure IKE ASN.1 Distinguished Name format conventions. Valid values: `with-space`, `no-space`.
        """
        return pulumi.get(self, "ike_dn_format")

    @ike_dn_format.setter
    def ike_dn_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_dn_format", value)

    @property
    @pulumi.getter(name="ikeNattPort")
    def ike_natt_port(self) -> Optional[pulumi.Input[int]]:
        """
        UDP port for IKE/IPsec traffic in NAT-T mode (default 4500).
        """
        return pulumi.get(self, "ike_natt_port")

    @ike_natt_port.setter
    def ike_natt_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_natt_port", value)

    @property
    @pulumi.getter(name="ikePolicyRoute")
    def ike_policy_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKE Policy Based Routing (PBR). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ike_policy_route")

    @ike_policy_route.setter
    def ike_policy_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_policy_route", value)

    @property
    @pulumi.getter(name="ikePort")
    def ike_port(self) -> Optional[pulumi.Input[int]]:
        """
        UDP port for IKE/IPsec traffic (default 500).
        """
        return pulumi.get(self, "ike_port")

    @ike_port.setter
    def ike_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_port", value)

    @property
    @pulumi.getter(name="ikeQuickCrashDetect")
    def ike_quick_crash_detect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKE quick crash detection (RFC 6290). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ike_quick_crash_detect")

    @ike_quick_crash_detect.setter
    def ike_quick_crash_detect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_quick_crash_detect", value)

    @property
    @pulumi.getter(name="ikeSessionResume")
    def ike_session_resume(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKEv2 session resumption (RFC 5723). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ike_session_resume")

    @ike_session_resume.setter
    def ike_session_resume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_session_resume", value)

    @property
    @pulumi.getter(name="ikeTcpPort")
    def ike_tcp_port(self) -> Optional[pulumi.Input[int]]:
        """
        TCP port for IKE/IPsec traffic (default 4500).
        """
        return pulumi.get(self, "ike_tcp_port")

    @ike_tcp_port.setter
    def ike_tcp_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_tcp_port", value)

    @property
    @pulumi.getter(name="implicitAllowDns")
    def implicit_allow_dns(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable implicitly allowing DNS traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "implicit_allow_dns")

    @implicit_allow_dns.setter
    def implicit_allow_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "implicit_allow_dns", value)

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Inspection mode (proxy-based or flow-based). Valid values: `proxy`, `flow`.
        """
        return pulumi.get(self, "inspection_mode")

    @inspection_mode.setter
    def inspection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspection_mode", value)

    @property
    @pulumi.getter(name="internetServiceDatabaseCache")
    def internet_service_database_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Internet Service database caching. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "internet_service_database_cache")

    @internet_service_database_cache.setter
    def internet_service_database_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_database_cache", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address and netmask.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address prefix for NAT mode.
        """
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6", value)

    @property
    @pulumi.getter(name="lanExtensionControllerAddr")
    def lan_extension_controller_addr(self) -> Optional[pulumi.Input[str]]:
        """
        Controller IP address or FQDN to connect.
        """
        return pulumi.get(self, "lan_extension_controller_addr")

    @lan_extension_controller_addr.setter
    def lan_extension_controller_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_extension_controller_addr", value)

    @property
    @pulumi.getter(name="linkDownAccess")
    def link_down_access(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable link down access traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_down_access")

    @link_down_access.setter
    def link_down_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_down_access", value)

    @property
    @pulumi.getter(name="lldpReception")
    def lldp_reception(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) reception for this VDOM or apply global settings to this VDOM. Valid values: `enable`, `disable`, `global`.
        """
        return pulumi.get(self, "lldp_reception")

    @lldp_reception.setter
    def lldp_reception(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_reception", value)

    @property
    @pulumi.getter(name="lldpTransmission")
    def lldp_transmission(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) transmission for this VDOM or apply global settings to this VDOM. Valid values: `enable`, `disable`, `global`.
        """
        return pulumi.get(self, "lldp_transmission")

    @lldp_transmission.setter
    def lldp_transmission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_transmission", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[str]]:
        """
        Local location ID in the form of an IPv4 address.
        """
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter(name="macTtl")
    def mac_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Duration of MAC addresses in Transparent mode (300 - 8640000 sec, default = 300).
        """
        return pulumi.get(self, "mac_ttl")

    @mac_ttl.setter
    def mac_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_ttl", value)

    @property
    @pulumi.getter
    def manageip(self) -> Optional[pulumi.Input[str]]:
        """
        Transparent mode IPv4 management IP address and netmask.
        """
        return pulumi.get(self, "manageip")

    @manageip.setter
    def manageip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manageip", value)

    @property
    @pulumi.getter
    def manageip6(self) -> Optional[pulumi.Input[str]]:
        """
        Transparent mode IPv6 management IP address and netmask.
        """
        return pulumi.get(self, "manageip6")

    @manageip6.setter
    def manageip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manageip6", value)

    @property
    @pulumi.getter(name="multicastForward")
    def multicast_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable multicast forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "multicast_forward")

    @multicast_forward.setter
    def multicast_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_forward", value)

    @property
    @pulumi.getter(name="multicastSkipPolicy")
    def multicast_skip_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing multicast traffic through the FortiGate without a policy check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "multicast_skip_policy")

    @multicast_skip_policy.setter
    def multicast_skip_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_skip_policy", value)

    @property
    @pulumi.getter(name="multicastTtlNotchange")
    def multicast_ttl_notchange(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable preventing the FortiGate from changing the TTL for forwarded multicast packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "multicast_ttl_notchange")

    @multicast_ttl_notchange.setter
    def multicast_ttl_notchange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_ttl_notchange", value)

    @property
    @pulumi.getter(name="nat46ForceIpv4PacketForwarding")
    def nat46_force_ipv4_packet_forwarding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable mandatory IPv4 packet forwarding in NAT46. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat46_force_ipv4_packet_forwarding")

    @nat46_force_ipv4_packet_forwarding.setter
    def nat46_force_ipv4_packet_forwarding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat46_force_ipv4_packet_forwarding", value)

    @property
    @pulumi.getter(name="nat46GenerateIpv6FragmentHeader")
    def nat46_generate_ipv6_fragment_header(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT46 IPv6 fragment header generation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat46_generate_ipv6_fragment_header")

    @nat46_generate_ipv6_fragment_header.setter
    def nat46_generate_ipv6_fragment_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat46_generate_ipv6_fragment_header", value)

    @property
    @pulumi.getter(name="nat64ForceIpv6PacketForwarding")
    def nat64_force_ipv6_packet_forwarding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable mandatory IPv6 packet forwarding in NAT64. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat64_force_ipv6_packet_forwarding")

    @nat64_force_ipv6_packet_forwarding.setter
    def nat64_force_ipv6_packet_forwarding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64_force_ipv6_packet_forwarding", value)

    @property
    @pulumi.getter(name="ngfwMode")
    def ngfw_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Next Generation Firewall (NGFW) mode. Valid values: `profile-based`, `policy-based`.
        """
        return pulumi.get(self, "ngfw_mode")

    @ngfw_mode.setter
    def ngfw_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ngfw_mode", value)

    @property
    @pulumi.getter
    def opmode(self) -> Optional[pulumi.Input[str]]:
        """
        Firewall operation mode (NAT or Transparent). Valid values: `nat`, `transparent`.
        """
        return pulumi.get(self, "opmode")

    @opmode.setter
    def opmode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opmode", value)

    @property
    @pulumi.getter(name="prpTrailerAction")
    def prp_trailer_action(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable action to take on PRP trailer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "prp_trailer_action")

    @prp_trailer_action.setter
    def prp_trailer_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prp_trailer_action", value)

    @property
    @pulumi.getter(name="sccpPort")
    def sccp_port(self) -> Optional[pulumi.Input[int]]:
        """
        TCP port the SCCP proxy monitors for SCCP traffic (0 - 65535, default = 2000).
        """
        return pulumi.get(self, "sccp_port")

    @sccp_port.setter
    def sccp_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sccp_port", value)

    @property
    @pulumi.getter(name="sctpSessionWithoutInit")
    def sctp_session_without_init(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SCTP session creation without SCTP INIT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sctp_session_without_init")

    @sctp_session_without_init.setter
    def sctp_session_without_init(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_session_without_init", value)

    @property
    @pulumi.getter(name="sesDeniedTraffic")
    def ses_denied_traffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable including denied session in the session table. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ses_denied_traffic")

    @ses_denied_traffic.setter
    def ses_denied_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ses_denied_traffic", value)

    @property
    @pulumi.getter(name="sipExpectation")
    def sip_expectation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the SIP kernel session helper to create an expectation for port 5060. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sip_expectation")

    @sip_expectation.setter
    def sip_expectation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sip_expectation", value)

    @property
    @pulumi.getter(name="sipHelper")
    def sip_helper(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the SIP session helper to process SIP sessions unless SIP sessions are accepted by the SIP application layer gateway (ALG). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sip_helper")

    @sip_helper.setter
    def sip_helper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sip_helper", value)

    @property
    @pulumi.getter(name="sipNatTrace")
    def sip_nat_trace(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable recording the original SIP source IP address when NAT is used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sip_nat_trace")

    @sip_nat_trace.setter
    def sip_nat_trace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sip_nat_trace", value)

    @property
    @pulumi.getter(name="sipSslPort")
    def sip_ssl_port(self) -> Optional[pulumi.Input[int]]:
        """
        TCP port the SIP proxy monitors for SIP SSL/TLS traffic (0 - 65535, default = 5061).
        """
        return pulumi.get(self, "sip_ssl_port")

    @sip_ssl_port.setter
    def sip_ssl_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sip_ssl_port", value)

    @property
    @pulumi.getter(name="sipTcpPort")
    def sip_tcp_port(self) -> Optional[pulumi.Input[int]]:
        """
        TCP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
        """
        return pulumi.get(self, "sip_tcp_port")

    @sip_tcp_port.setter
    def sip_tcp_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sip_tcp_port", value)

    @property
    @pulumi.getter(name="sipUdpPort")
    def sip_udp_port(self) -> Optional[pulumi.Input[int]]:
        """
        UDP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
        """
        return pulumi.get(self, "sip_udp_port")

    @sip_udp_port.setter
    def sip_udp_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sip_udp_port", value)

    @property
    @pulumi.getter(name="snatHairpinTraffic")
    def snat_hairpin_traffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable source NAT (SNAT) for hairpin traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "snat_hairpin_traffic")

    @snat_hairpin_traffic.setter
    def snat_hairpin_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_hairpin_traffic", value)

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Profile for SSL/SSH inspection.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @ssl_ssh_profile.setter
    def ssl_ssh_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ssh_profile", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this VDOM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="strictSrcCheck")
    def strict_src_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable strict source verification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_src_check")

    @strict_src_check.setter
    def strict_src_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_src_check", value)

    @property
    @pulumi.getter(name="tcpSessionWithoutSyn")
    def tcp_session_without_syn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing TCP session without SYN flags. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tcp_session_without_syn")

    @tcp_session_without_syn.setter
    def tcp_session_without_syn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_session_without_syn", value)

    @property
    @pulumi.getter(name="utf8SpamTagging")
    def utf8_spam_tagging(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable converting antispam tags to UTF-8 for better non-ASCII character support. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utf8_spam_tagging")

    @utf8_spam_tagging.setter
    def utf8_spam_tagging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utf8_spam_tagging", value)

    @property
    @pulumi.getter(name="v4EcmpMode")
    def v4_ecmp_mode(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Equal-cost multi-path (ECMP) routing and load balancing mode. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`.
        """
        return pulumi.get(self, "v4_ecmp_mode")

    @v4_ecmp_mode.setter
    def v4_ecmp_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v4_ecmp_mode", value)

    @property
    @pulumi.getter(name="vdomType")
    def vdom_type(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM type (traffic or admin).
        """
        return pulumi.get(self, "vdom_type")

    @vdom_type.setter
    def vdom_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom_type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vpnStatsLog")
    def vpn_stats_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable periodic VPN log statistics for one or more types of VPN. Separate names with a space. Valid values: `ipsec`, `pptp`, `l2tp`, `ssl`.
        """
        return pulumi.get(self, "vpn_stats_log")

    @vpn_stats_log.setter
    def vpn_stats_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_stats_log", value)

    @property
    @pulumi.getter(name="vpnStatsPeriod")
    def vpn_stats_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period to send VPN log statistics (0 or 60 - 86400 sec).
        """
        return pulumi.get(self, "vpn_stats_period")

    @vpn_stats_period.setter
    def vpn_stats_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vpn_stats_period", value)

    @property
    @pulumi.getter(name="wccpCacheEngine")
    def wccp_cache_engine(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WCCP cache engine. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wccp_cache_engine")

    @wccp_cache_engine.setter
    def wccp_cache_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wccp_cache_engine", value)


@pulumi.input_type
class _SettingsState:
    def __init__(__self__, *,
                 allow_linkdown_path: Optional[pulumi.Input[str]] = None,
                 allow_subnet_overlap: Optional[pulumi.Input[str]] = None,
                 application_bandwidth_tracking: Optional[pulumi.Input[str]] = None,
                 asymroute: Optional[pulumi.Input[str]] = None,
                 asymroute6: Optional[pulumi.Input[str]] = None,
                 asymroute6_icmp: Optional[pulumi.Input[str]] = None,
                 asymroute_icmp: Optional[pulumi.Input[str]] = None,
                 auxiliary_session: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 bfd_desired_min_tx: Optional[pulumi.Input[int]] = None,
                 bfd_detect_mult: Optional[pulumi.Input[int]] = None,
                 bfd_dont_enforce_src_port: Optional[pulumi.Input[str]] = None,
                 bfd_required_min_rx: Optional[pulumi.Input[int]] = None,
                 block_land_attack: Optional[pulumi.Input[str]] = None,
                 central_nat: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 compliance_check: Optional[pulumi.Input[str]] = None,
                 consolidated_firewall_mode: Optional[pulumi.Input[str]] = None,
                 default_app_port_as_service: Optional[pulumi.Input[str]] = None,
                 default_policy_expiry_days: Optional[pulumi.Input[int]] = None,
                 default_voip_alg_mode: Optional[pulumi.Input[str]] = None,
                 deny_tcp_with_icmp: Optional[pulumi.Input[str]] = None,
                 detect_unknown_esp: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dhcp6_server_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_proxy: Optional[pulumi.Input[str]] = None,
                 dhcp_proxy_interface: Optional[pulumi.Input[str]] = None,
                 dhcp_proxy_interface_select_method: Optional[pulumi.Input[str]] = None,
                 dhcp_server_ip: Optional[pulumi.Input[str]] = None,
                 discovered_device_timeout: Optional[pulumi.Input[int]] = None,
                 dyn_addr_session_check: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ecmp_max_paths: Optional[pulumi.Input[int]] = None,
                 email_portal_check_dns: Optional[pulumi.Input[str]] = None,
                 ext_resource_session_check: Optional[pulumi.Input[str]] = None,
                 firewall_session_dirty: Optional[pulumi.Input[str]] = None,
                 fqdn_session_check: Optional[pulumi.Input[str]] = None,
                 fw_session_hairpin: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gui_advanced_policy: Optional[pulumi.Input[str]] = None,
                 gui_advanced_wireless_features: Optional[pulumi.Input[str]] = None,
                 gui_allow_unnamed_policy: Optional[pulumi.Input[str]] = None,
                 gui_antivirus: Optional[pulumi.Input[str]] = None,
                 gui_ap_profile: Optional[pulumi.Input[str]] = None,
                 gui_application_control: Optional[pulumi.Input[str]] = None,
                 gui_casb: Optional[pulumi.Input[str]] = None,
                 gui_default_policy_columns: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsGuiDefaultPolicyColumnArgs']]]] = None,
                 gui_dhcp_advanced: Optional[pulumi.Input[str]] = None,
                 gui_dlp: Optional[pulumi.Input[str]] = None,
                 gui_dlp_profile: Optional[pulumi.Input[str]] = None,
                 gui_dns_database: Optional[pulumi.Input[str]] = None,
                 gui_dnsfilter: Optional[pulumi.Input[str]] = None,
                 gui_domain_ip_reputation: Optional[pulumi.Input[str]] = None,
                 gui_dos_policy: Optional[pulumi.Input[str]] = None,
                 gui_dynamic_device_os_id: Optional[pulumi.Input[str]] = None,
                 gui_dynamic_profile_display: Optional[pulumi.Input[str]] = None,
                 gui_dynamic_routing: Optional[pulumi.Input[str]] = None,
                 gui_email_collection: Optional[pulumi.Input[str]] = None,
                 gui_endpoint_control: Optional[pulumi.Input[str]] = None,
                 gui_endpoint_control_advanced: Optional[pulumi.Input[str]] = None,
                 gui_enforce_change_summary: Optional[pulumi.Input[str]] = None,
                 gui_explicit_proxy: Optional[pulumi.Input[str]] = None,
                 gui_file_filter: Optional[pulumi.Input[str]] = None,
                 gui_fortiap_split_tunneling: Optional[pulumi.Input[str]] = None,
                 gui_fortiextender_controller: Optional[pulumi.Input[str]] = None,
                 gui_icap: Optional[pulumi.Input[str]] = None,
                 gui_implicit_policy: Optional[pulumi.Input[str]] = None,
                 gui_ips: Optional[pulumi.Input[str]] = None,
                 gui_load_balance: Optional[pulumi.Input[str]] = None,
                 gui_local_in_policy: Optional[pulumi.Input[str]] = None,
                 gui_local_reports: Optional[pulumi.Input[str]] = None,
                 gui_multicast_policy: Optional[pulumi.Input[str]] = None,
                 gui_multiple_interface_policy: Optional[pulumi.Input[str]] = None,
                 gui_multiple_utm_profiles: Optional[pulumi.Input[str]] = None,
                 gui_nat4664: Optional[pulumi.Input[str]] = None,
                 gui_object_colors: Optional[pulumi.Input[str]] = None,
                 gui_ot: Optional[pulumi.Input[str]] = None,
                 gui_per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 gui_policy_based_ipsec: Optional[pulumi.Input[str]] = None,
                 gui_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 gui_policy_learning: Optional[pulumi.Input[str]] = None,
                 gui_proxy_inspection: Optional[pulumi.Input[str]] = None,
                 gui_replacement_message_groups: Optional[pulumi.Input[str]] = None,
                 gui_route_tag_address_creation: Optional[pulumi.Input[str]] = None,
                 gui_security_profile_group: Optional[pulumi.Input[str]] = None,
                 gui_spamfilter: Optional[pulumi.Input[str]] = None,
                 gui_sslvpn: Optional[pulumi.Input[str]] = None,
                 gui_sslvpn_personal_bookmarks: Optional[pulumi.Input[str]] = None,
                 gui_sslvpn_realms: Optional[pulumi.Input[str]] = None,
                 gui_switch_controller: Optional[pulumi.Input[str]] = None,
                 gui_threat_weight: Optional[pulumi.Input[str]] = None,
                 gui_traffic_shaping: Optional[pulumi.Input[str]] = None,
                 gui_videofilter: Optional[pulumi.Input[str]] = None,
                 gui_virtual_patch_profile: Optional[pulumi.Input[str]] = None,
                 gui_voip_profile: Optional[pulumi.Input[str]] = None,
                 gui_vpn: Optional[pulumi.Input[str]] = None,
                 gui_waf_profile: Optional[pulumi.Input[str]] = None,
                 gui_wan_load_balancing: Optional[pulumi.Input[str]] = None,
                 gui_wanopt_cache: Optional[pulumi.Input[str]] = None,
                 gui_webfilter: Optional[pulumi.Input[str]] = None,
                 gui_webfilter_advanced: Optional[pulumi.Input[str]] = None,
                 gui_wireless_controller: Optional[pulumi.Input[str]] = None,
                 gui_ztna: Optional[pulumi.Input[str]] = None,
                 h323_direct_model: Optional[pulumi.Input[str]] = None,
                 http_external_dest: Optional[pulumi.Input[str]] = None,
                 ike_dn_format: Optional[pulumi.Input[str]] = None,
                 ike_natt_port: Optional[pulumi.Input[int]] = None,
                 ike_policy_route: Optional[pulumi.Input[str]] = None,
                 ike_port: Optional[pulumi.Input[int]] = None,
                 ike_quick_crash_detect: Optional[pulumi.Input[str]] = None,
                 ike_session_resume: Optional[pulumi.Input[str]] = None,
                 ike_tcp_port: Optional[pulumi.Input[int]] = None,
                 implicit_allow_dns: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service_database_cache: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ip6: Optional[pulumi.Input[str]] = None,
                 lan_extension_controller_addr: Optional[pulumi.Input[str]] = None,
                 link_down_access: Optional[pulumi.Input[str]] = None,
                 lldp_reception: Optional[pulumi.Input[str]] = None,
                 lldp_transmission: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[str]] = None,
                 mac_ttl: Optional[pulumi.Input[int]] = None,
                 manageip: Optional[pulumi.Input[str]] = None,
                 manageip6: Optional[pulumi.Input[str]] = None,
                 multicast_forward: Optional[pulumi.Input[str]] = None,
                 multicast_skip_policy: Optional[pulumi.Input[str]] = None,
                 multicast_ttl_notchange: Optional[pulumi.Input[str]] = None,
                 nat46_force_ipv4_packet_forwarding: Optional[pulumi.Input[str]] = None,
                 nat46_generate_ipv6_fragment_header: Optional[pulumi.Input[str]] = None,
                 nat64_force_ipv6_packet_forwarding: Optional[pulumi.Input[str]] = None,
                 ngfw_mode: Optional[pulumi.Input[str]] = None,
                 opmode: Optional[pulumi.Input[str]] = None,
                 prp_trailer_action: Optional[pulumi.Input[str]] = None,
                 sccp_port: Optional[pulumi.Input[int]] = None,
                 sctp_session_without_init: Optional[pulumi.Input[str]] = None,
                 ses_denied_traffic: Optional[pulumi.Input[str]] = None,
                 sip_expectation: Optional[pulumi.Input[str]] = None,
                 sip_helper: Optional[pulumi.Input[str]] = None,
                 sip_nat_trace: Optional[pulumi.Input[str]] = None,
                 sip_ssl_port: Optional[pulumi.Input[int]] = None,
                 sip_tcp_port: Optional[pulumi.Input[int]] = None,
                 sip_udp_port: Optional[pulumi.Input[int]] = None,
                 snat_hairpin_traffic: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_src_check: Optional[pulumi.Input[str]] = None,
                 tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
                 utf8_spam_tagging: Optional[pulumi.Input[str]] = None,
                 v4_ecmp_mode: Optional[pulumi.Input[str]] = None,
                 vdom_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpn_stats_log: Optional[pulumi.Input[str]] = None,
                 vpn_stats_period: Optional[pulumi.Input[int]] = None,
                 wccp_cache_engine: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Settings resources.
        :param pulumi.Input[str] allow_linkdown_path: Enable/disable link down path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_subnet_overlap: Enable/disable allowing interface subnets to use overlapping IP addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] application_bandwidth_tracking: Enable/disable application bandwidth tracking. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] asymroute: Enable/disable IPv4 asymmetric routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] asymroute6: Enable/disable asymmetric IPv6 routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] asymroute6_icmp: Enable/disable asymmetric ICMPv6 routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] asymroute_icmp: Enable/disable ICMP asymmetric routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auxiliary_session: Enable/disable auxiliary session. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bfd: Enable/disable Bi-directional Forwarding Detection (BFD) on all interfaces. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bfd_desired_min_tx: BFD desired minimal transmit interval (1 - 100000 ms, default = 50).
        :param pulumi.Input[int] bfd_detect_mult: BFD detection multiplier (1 - 50, default = 3).
        :param pulumi.Input[str] bfd_dont_enforce_src_port: Enable to not enforce verifying the source port of BFD Packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bfd_required_min_rx: BFD required minimal receive interval (1 - 100000 ms, default = 50).
        :param pulumi.Input[str] block_land_attack: Enable/disable blocking of land attacks. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] central_nat: Enable/disable central NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: VDOM comments.
        :param pulumi.Input[str] compliance_check: Enable/disable PCI DSS compliance checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] consolidated_firewall_mode: Consolidated firewall mode.
        :param pulumi.Input[str] default_app_port_as_service: Enable/disable policy service enforcement based on application default ports. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] default_policy_expiry_days: Default policy expiry in days (0 - 365 days, default = 30).
        :param pulumi.Input[str] default_voip_alg_mode: Configure how the FortiGate handles VoIP traffic when a policy that accepts the traffic doesn't include a VoIP profile. Valid values: `proxy-based`, `kernel-helper-based`.
        :param pulumi.Input[str] deny_tcp_with_icmp: Enable/disable denying TCP by sending an ICMP communication prohibited packet. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] detect_unknown_esp: Enable/disable detection of unknown ESP packets (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device: Interface to use for management access for NAT mode.
        :param pulumi.Input[str] dhcp6_server_ip: DHCPv6 server IPv6 address.
        :param pulumi.Input[str] dhcp_proxy: Enable/disable the DHCP Proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp_proxy_interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] dhcp_proxy_interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] dhcp_server_ip: DHCP Server IPv4 address.
        :param pulumi.Input[int] discovered_device_timeout: Timeout for discovered devices (1 - 365 days, default = 28).
        :param pulumi.Input[str] dyn_addr_session_check: Enable/disable dirty session check caused by dynamic address updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] ecmp_max_paths: Maximum number of Equal Cost Multi-Path (ECMP) next-hops. Set to 1 to disable ECMP routing (1 - 100, default = 10).
        :param pulumi.Input[str] email_portal_check_dns: Enable/disable using DNS to validate email addresses collected by a captive portal. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ext_resource_session_check: Enable/disable dirty session check caused by external resource updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] firewall_session_dirty: Select how to manage sessions affected by firewall policy configuration changes. Valid values: `check-all`, `check-new`, `check-policy-option`.
        :param pulumi.Input[str] fqdn_session_check: Enable/disable dirty session check caused by FQDN updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fw_session_hairpin: Enable/disable checking for a matching policy each time hairpin traffic goes through the FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gateway: Transparent mode IPv4 default gateway IP address.
        :param pulumi.Input[str] gateway6: Transparent mode IPv4 default gateway IP address.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] gui_advanced_policy: Enable/disable advanced policy configuration on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_advanced_wireless_features: Enable/disable advanced wireless features in GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_allow_unnamed_policy: Enable/disable the requirement for policy naming on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_antivirus: Enable/disable AntiVirus on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ap_profile: Enable/disable FortiAP profiles on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_application_control: Enable/disable application control on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_casb: Enable/disable Inline-CASB on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SettingsGuiDefaultPolicyColumnArgs']]] gui_default_policy_columns: Default columns to display for policy lists on GUI. The structure of `gui_default_policy_columns` block is documented below.
        :param pulumi.Input[str] gui_dhcp_advanced: Enable/disable advanced DHCP options on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dlp: Enable/disable DLP on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dlp_profile: Enable/disable Data Leak Prevention on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dns_database: Enable/disable DNS database settings on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dnsfilter: Enable/disable DNS Filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_domain_ip_reputation: Enable/disable Domain and IP Reputation on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dos_policy: Enable/disable DoS policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dynamic_device_os_id: Enable/disable Create dynamic addresses to manage known devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dynamic_profile_display: Enable/disable RADIUS Single Sign On (RSSO) on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dynamic_routing: Enable/disable dynamic routing on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_email_collection: Enable/disable email collection on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_endpoint_control: Enable/disable endpoint control on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_endpoint_control_advanced: Enable/disable advanced endpoint control options on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_enforce_change_summary: Enforce change summaries for select tables in the GUI. Valid values: `disable`, `require`, `optional`.
        :param pulumi.Input[str] gui_explicit_proxy: Enable/disable the explicit proxy on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_file_filter: Enable/disable File-filter on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_fortiap_split_tunneling: Enable/disable FortiAP split tunneling on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_fortiextender_controller: Enable/disable FortiExtender on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_icap: Enable/disable ICAP on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_implicit_policy: Enable/disable implicit firewall policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ips: Enable/disable IPS on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_load_balance: Enable/disable server load balancing on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_local_in_policy: Enable/disable Local-In policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_local_reports: Enable/disable local reports on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_multicast_policy: Enable/disable multicast firewall policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_multiple_interface_policy: Enable/disable adding multiple interfaces to a policy on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_multiple_utm_profiles: Enable/disable multiple UTM profiles on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_nat4664: Enable/disable NAT46 and NAT64 settings on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_object_colors: Enable/disable object colors on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ot: Enable/disable Show Operational Technology Purdue Model. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_per_policy_disclaimer: Enable/disable policy disclaimer on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_policy_based_ipsec: Enable/disable policy-based IPsec VPN on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_policy_disclaimer: Enable/disable policy disclaimer on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_policy_learning: Enable/disable firewall policy learning mode on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_proxy_inspection: Enable/disable the proxy features on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_replacement_message_groups: Enable/disable replacement message groups on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_route_tag_address_creation: Enable/disable route-tag addresses on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_security_profile_group: Enable/disable Security Profile Groups on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_spamfilter: Enable/disable Antispam on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_sslvpn: Enable/disable SSL-VPN settings pages on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_sslvpn_personal_bookmarks: Enable/disable SSL-VPN personal bookmark management on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_sslvpn_realms: Enable/disable SSL-VPN realms on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_switch_controller: Enable/disable the switch controller on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_threat_weight: Enable/disable threat weight on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_traffic_shaping: Enable/disable traffic shaping on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_videofilter: Enable/disable Video filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_virtual_patch_profile: Enable/disable Virtual Patching on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_voip_profile: Enable/disable VoIP profiles on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_vpn: Enable/disable VPN tunnels on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_waf_profile: Enable/disable Web Application Firewall on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_wan_load_balancing: Enable/disable SD-WAN on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_wanopt_cache: Enable/disable WAN Optimization and Web Caching on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_webfilter: Enable/disable Web filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_webfilter_advanced: Enable/disable advanced web filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_wireless_controller: Enable/disable the wireless controller on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ztna: Enable/disable Zero Trust Network Access features on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] h323_direct_model: Enable/disable H323 direct model. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] http_external_dest: Offload HTTP traffic to FortiWeb or FortiCache. Valid values: `fortiweb`, `forticache`.
        :param pulumi.Input[str] ike_dn_format: Configure IKE ASN.1 Distinguished Name format conventions. Valid values: `with-space`, `no-space`.
        :param pulumi.Input[int] ike_natt_port: UDP port for IKE/IPsec traffic in NAT-T mode (default 4500).
        :param pulumi.Input[str] ike_policy_route: Enable/disable IKE Policy Based Routing (PBR). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ike_port: UDP port for IKE/IPsec traffic (default 500).
        :param pulumi.Input[str] ike_quick_crash_detect: Enable/disable IKE quick crash detection (RFC 6290). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ike_session_resume: Enable/disable IKEv2 session resumption (RFC 5723). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ike_tcp_port: TCP port for IKE/IPsec traffic (default 4500).
        :param pulumi.Input[str] implicit_allow_dns: Enable/disable implicitly allowing DNS traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] inspection_mode: Inspection mode (proxy-based or flow-based). Valid values: `proxy`, `flow`.
        :param pulumi.Input[str] internet_service_database_cache: Enable/disable Internet Service database caching. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ip: IP address and netmask.
        :param pulumi.Input[str] ip6: IPv6 address prefix for NAT mode.
        :param pulumi.Input[str] lan_extension_controller_addr: Controller IP address or FQDN to connect.
        :param pulumi.Input[str] link_down_access: Enable/disable link down access traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lldp_reception: Enable/disable Link Layer Discovery Protocol (LLDP) reception for this VDOM or apply global settings to this VDOM. Valid values: `enable`, `disable`, `global`.
        :param pulumi.Input[str] lldp_transmission: Enable/disable Link Layer Discovery Protocol (LLDP) transmission for this VDOM or apply global settings to this VDOM. Valid values: `enable`, `disable`, `global`.
        :param pulumi.Input[str] location_id: Local location ID in the form of an IPv4 address.
        :param pulumi.Input[int] mac_ttl: Duration of MAC addresses in Transparent mode (300 - 8640000 sec, default = 300).
        :param pulumi.Input[str] manageip: Transparent mode IPv4 management IP address and netmask.
        :param pulumi.Input[str] manageip6: Transparent mode IPv6 management IP address and netmask.
        :param pulumi.Input[str] multicast_forward: Enable/disable multicast forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] multicast_skip_policy: Enable/disable allowing multicast traffic through the FortiGate without a policy check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] multicast_ttl_notchange: Enable/disable preventing the FortiGate from changing the TTL for forwarded multicast packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat46_force_ipv4_packet_forwarding: Enable/disable mandatory IPv4 packet forwarding in NAT46. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat46_generate_ipv6_fragment_header: Enable/disable NAT46 IPv6 fragment header generation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat64_force_ipv6_packet_forwarding: Enable/disable mandatory IPv6 packet forwarding in NAT64. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ngfw_mode: Next Generation Firewall (NGFW) mode. Valid values: `profile-based`, `policy-based`.
        :param pulumi.Input[str] opmode: Firewall operation mode (NAT or Transparent). Valid values: `nat`, `transparent`.
        :param pulumi.Input[str] prp_trailer_action: Enable/disable action to take on PRP trailer. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] sccp_port: TCP port the SCCP proxy monitors for SCCP traffic (0 - 65535, default = 2000).
        :param pulumi.Input[str] sctp_session_without_init: Enable/disable SCTP session creation without SCTP INIT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ses_denied_traffic: Enable/disable including denied session in the session table. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sip_expectation: Enable/disable the SIP kernel session helper to create an expectation for port 5060. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sip_helper: Enable/disable the SIP session helper to process SIP sessions unless SIP sessions are accepted by the SIP application layer gateway (ALG). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sip_nat_trace: Enable/disable recording the original SIP source IP address when NAT is used. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] sip_ssl_port: TCP port the SIP proxy monitors for SIP SSL/TLS traffic (0 - 65535, default = 5061).
        :param pulumi.Input[int] sip_tcp_port: TCP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
        :param pulumi.Input[int] sip_udp_port: UDP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
        :param pulumi.Input[str] snat_hairpin_traffic: Enable/disable source NAT (SNAT) for hairpin traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_ssh_profile: Profile for SSL/SSH inspection.
        :param pulumi.Input[str] status: Enable/disable this VDOM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_src_check: Enable/disable strict source verification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tcp_session_without_syn: Enable/disable allowing TCP session without SYN flags. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] utf8_spam_tagging: Enable/disable converting antispam tags to UTF-8 for better non-ASCII character support. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] v4_ecmp_mode: IPv4 Equal-cost multi-path (ECMP) routing and load balancing mode. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`.
        :param pulumi.Input[str] vdom_type: VDOM type (traffic or admin).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vpn_stats_log: Enable/disable periodic VPN log statistics for one or more types of VPN. Separate names with a space. Valid values: `ipsec`, `pptp`, `l2tp`, `ssl`.
        :param pulumi.Input[int] vpn_stats_period: Period to send VPN log statistics (0 or 60 - 86400 sec).
        :param pulumi.Input[str] wccp_cache_engine: Enable/disable WCCP cache engine. Valid values: `enable`, `disable`.
        """
        if allow_linkdown_path is not None:
            pulumi.set(__self__, "allow_linkdown_path", allow_linkdown_path)
        if allow_subnet_overlap is not None:
            pulumi.set(__self__, "allow_subnet_overlap", allow_subnet_overlap)
        if application_bandwidth_tracking is not None:
            pulumi.set(__self__, "application_bandwidth_tracking", application_bandwidth_tracking)
        if asymroute is not None:
            pulumi.set(__self__, "asymroute", asymroute)
        if asymroute6 is not None:
            pulumi.set(__self__, "asymroute6", asymroute6)
        if asymroute6_icmp is not None:
            pulumi.set(__self__, "asymroute6_icmp", asymroute6_icmp)
        if asymroute_icmp is not None:
            pulumi.set(__self__, "asymroute_icmp", asymroute_icmp)
        if auxiliary_session is not None:
            pulumi.set(__self__, "auxiliary_session", auxiliary_session)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if bfd_desired_min_tx is not None:
            pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        if bfd_detect_mult is not None:
            pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        if bfd_dont_enforce_src_port is not None:
            pulumi.set(__self__, "bfd_dont_enforce_src_port", bfd_dont_enforce_src_port)
        if bfd_required_min_rx is not None:
            pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        if block_land_attack is not None:
            pulumi.set(__self__, "block_land_attack", block_land_attack)
        if central_nat is not None:
            pulumi.set(__self__, "central_nat", central_nat)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if compliance_check is not None:
            pulumi.set(__self__, "compliance_check", compliance_check)
        if consolidated_firewall_mode is not None:
            pulumi.set(__self__, "consolidated_firewall_mode", consolidated_firewall_mode)
        if default_app_port_as_service is not None:
            pulumi.set(__self__, "default_app_port_as_service", default_app_port_as_service)
        if default_policy_expiry_days is not None:
            pulumi.set(__self__, "default_policy_expiry_days", default_policy_expiry_days)
        if default_voip_alg_mode is not None:
            pulumi.set(__self__, "default_voip_alg_mode", default_voip_alg_mode)
        if deny_tcp_with_icmp is not None:
            pulumi.set(__self__, "deny_tcp_with_icmp", deny_tcp_with_icmp)
        if detect_unknown_esp is not None:
            pulumi.set(__self__, "detect_unknown_esp", detect_unknown_esp)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if dhcp6_server_ip is not None:
            pulumi.set(__self__, "dhcp6_server_ip", dhcp6_server_ip)
        if dhcp_proxy is not None:
            pulumi.set(__self__, "dhcp_proxy", dhcp_proxy)
        if dhcp_proxy_interface is not None:
            pulumi.set(__self__, "dhcp_proxy_interface", dhcp_proxy_interface)
        if dhcp_proxy_interface_select_method is not None:
            pulumi.set(__self__, "dhcp_proxy_interface_select_method", dhcp_proxy_interface_select_method)
        if dhcp_server_ip is not None:
            pulumi.set(__self__, "dhcp_server_ip", dhcp_server_ip)
        if discovered_device_timeout is not None:
            pulumi.set(__self__, "discovered_device_timeout", discovered_device_timeout)
        if dyn_addr_session_check is not None:
            pulumi.set(__self__, "dyn_addr_session_check", dyn_addr_session_check)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ecmp_max_paths is not None:
            pulumi.set(__self__, "ecmp_max_paths", ecmp_max_paths)
        if email_portal_check_dns is not None:
            pulumi.set(__self__, "email_portal_check_dns", email_portal_check_dns)
        if ext_resource_session_check is not None:
            pulumi.set(__self__, "ext_resource_session_check", ext_resource_session_check)
        if firewall_session_dirty is not None:
            pulumi.set(__self__, "firewall_session_dirty", firewall_session_dirty)
        if fqdn_session_check is not None:
            pulumi.set(__self__, "fqdn_session_check", fqdn_session_check)
        if fw_session_hairpin is not None:
            pulumi.set(__self__, "fw_session_hairpin", fw_session_hairpin)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gui_advanced_policy is not None:
            pulumi.set(__self__, "gui_advanced_policy", gui_advanced_policy)
        if gui_advanced_wireless_features is not None:
            pulumi.set(__self__, "gui_advanced_wireless_features", gui_advanced_wireless_features)
        if gui_allow_unnamed_policy is not None:
            pulumi.set(__self__, "gui_allow_unnamed_policy", gui_allow_unnamed_policy)
        if gui_antivirus is not None:
            pulumi.set(__self__, "gui_antivirus", gui_antivirus)
        if gui_ap_profile is not None:
            pulumi.set(__self__, "gui_ap_profile", gui_ap_profile)
        if gui_application_control is not None:
            pulumi.set(__self__, "gui_application_control", gui_application_control)
        if gui_casb is not None:
            pulumi.set(__self__, "gui_casb", gui_casb)
        if gui_default_policy_columns is not None:
            pulumi.set(__self__, "gui_default_policy_columns", gui_default_policy_columns)
        if gui_dhcp_advanced is not None:
            pulumi.set(__self__, "gui_dhcp_advanced", gui_dhcp_advanced)
        if gui_dlp is not None:
            pulumi.set(__self__, "gui_dlp", gui_dlp)
        if gui_dlp_profile is not None:
            pulumi.set(__self__, "gui_dlp_profile", gui_dlp_profile)
        if gui_dns_database is not None:
            pulumi.set(__self__, "gui_dns_database", gui_dns_database)
        if gui_dnsfilter is not None:
            pulumi.set(__self__, "gui_dnsfilter", gui_dnsfilter)
        if gui_domain_ip_reputation is not None:
            pulumi.set(__self__, "gui_domain_ip_reputation", gui_domain_ip_reputation)
        if gui_dos_policy is not None:
            pulumi.set(__self__, "gui_dos_policy", gui_dos_policy)
        if gui_dynamic_device_os_id is not None:
            pulumi.set(__self__, "gui_dynamic_device_os_id", gui_dynamic_device_os_id)
        if gui_dynamic_profile_display is not None:
            pulumi.set(__self__, "gui_dynamic_profile_display", gui_dynamic_profile_display)
        if gui_dynamic_routing is not None:
            pulumi.set(__self__, "gui_dynamic_routing", gui_dynamic_routing)
        if gui_email_collection is not None:
            pulumi.set(__self__, "gui_email_collection", gui_email_collection)
        if gui_endpoint_control is not None:
            pulumi.set(__self__, "gui_endpoint_control", gui_endpoint_control)
        if gui_endpoint_control_advanced is not None:
            pulumi.set(__self__, "gui_endpoint_control_advanced", gui_endpoint_control_advanced)
        if gui_enforce_change_summary is not None:
            pulumi.set(__self__, "gui_enforce_change_summary", gui_enforce_change_summary)
        if gui_explicit_proxy is not None:
            pulumi.set(__self__, "gui_explicit_proxy", gui_explicit_proxy)
        if gui_file_filter is not None:
            pulumi.set(__self__, "gui_file_filter", gui_file_filter)
        if gui_fortiap_split_tunneling is not None:
            pulumi.set(__self__, "gui_fortiap_split_tunneling", gui_fortiap_split_tunneling)
        if gui_fortiextender_controller is not None:
            pulumi.set(__self__, "gui_fortiextender_controller", gui_fortiextender_controller)
        if gui_icap is not None:
            pulumi.set(__self__, "gui_icap", gui_icap)
        if gui_implicit_policy is not None:
            pulumi.set(__self__, "gui_implicit_policy", gui_implicit_policy)
        if gui_ips is not None:
            pulumi.set(__self__, "gui_ips", gui_ips)
        if gui_load_balance is not None:
            pulumi.set(__self__, "gui_load_balance", gui_load_balance)
        if gui_local_in_policy is not None:
            pulumi.set(__self__, "gui_local_in_policy", gui_local_in_policy)
        if gui_local_reports is not None:
            pulumi.set(__self__, "gui_local_reports", gui_local_reports)
        if gui_multicast_policy is not None:
            pulumi.set(__self__, "gui_multicast_policy", gui_multicast_policy)
        if gui_multiple_interface_policy is not None:
            pulumi.set(__self__, "gui_multiple_interface_policy", gui_multiple_interface_policy)
        if gui_multiple_utm_profiles is not None:
            pulumi.set(__self__, "gui_multiple_utm_profiles", gui_multiple_utm_profiles)
        if gui_nat4664 is not None:
            pulumi.set(__self__, "gui_nat4664", gui_nat4664)
        if gui_object_colors is not None:
            pulumi.set(__self__, "gui_object_colors", gui_object_colors)
        if gui_ot is not None:
            pulumi.set(__self__, "gui_ot", gui_ot)
        if gui_per_policy_disclaimer is not None:
            pulumi.set(__self__, "gui_per_policy_disclaimer", gui_per_policy_disclaimer)
        if gui_policy_based_ipsec is not None:
            pulumi.set(__self__, "gui_policy_based_ipsec", gui_policy_based_ipsec)
        if gui_policy_disclaimer is not None:
            pulumi.set(__self__, "gui_policy_disclaimer", gui_policy_disclaimer)
        if gui_policy_learning is not None:
            pulumi.set(__self__, "gui_policy_learning", gui_policy_learning)
        if gui_proxy_inspection is not None:
            pulumi.set(__self__, "gui_proxy_inspection", gui_proxy_inspection)
        if gui_replacement_message_groups is not None:
            pulumi.set(__self__, "gui_replacement_message_groups", gui_replacement_message_groups)
        if gui_route_tag_address_creation is not None:
            pulumi.set(__self__, "gui_route_tag_address_creation", gui_route_tag_address_creation)
        if gui_security_profile_group is not None:
            pulumi.set(__self__, "gui_security_profile_group", gui_security_profile_group)
        if gui_spamfilter is not None:
            pulumi.set(__self__, "gui_spamfilter", gui_spamfilter)
        if gui_sslvpn is not None:
            pulumi.set(__self__, "gui_sslvpn", gui_sslvpn)
        if gui_sslvpn_personal_bookmarks is not None:
            pulumi.set(__self__, "gui_sslvpn_personal_bookmarks", gui_sslvpn_personal_bookmarks)
        if gui_sslvpn_realms is not None:
            pulumi.set(__self__, "gui_sslvpn_realms", gui_sslvpn_realms)
        if gui_switch_controller is not None:
            pulumi.set(__self__, "gui_switch_controller", gui_switch_controller)
        if gui_threat_weight is not None:
            pulumi.set(__self__, "gui_threat_weight", gui_threat_weight)
        if gui_traffic_shaping is not None:
            pulumi.set(__self__, "gui_traffic_shaping", gui_traffic_shaping)
        if gui_videofilter is not None:
            pulumi.set(__self__, "gui_videofilter", gui_videofilter)
        if gui_virtual_patch_profile is not None:
            pulumi.set(__self__, "gui_virtual_patch_profile", gui_virtual_patch_profile)
        if gui_voip_profile is not None:
            pulumi.set(__self__, "gui_voip_profile", gui_voip_profile)
        if gui_vpn is not None:
            pulumi.set(__self__, "gui_vpn", gui_vpn)
        if gui_waf_profile is not None:
            pulumi.set(__self__, "gui_waf_profile", gui_waf_profile)
        if gui_wan_load_balancing is not None:
            pulumi.set(__self__, "gui_wan_load_balancing", gui_wan_load_balancing)
        if gui_wanopt_cache is not None:
            pulumi.set(__self__, "gui_wanopt_cache", gui_wanopt_cache)
        if gui_webfilter is not None:
            pulumi.set(__self__, "gui_webfilter", gui_webfilter)
        if gui_webfilter_advanced is not None:
            pulumi.set(__self__, "gui_webfilter_advanced", gui_webfilter_advanced)
        if gui_wireless_controller is not None:
            pulumi.set(__self__, "gui_wireless_controller", gui_wireless_controller)
        if gui_ztna is not None:
            pulumi.set(__self__, "gui_ztna", gui_ztna)
        if h323_direct_model is not None:
            pulumi.set(__self__, "h323_direct_model", h323_direct_model)
        if http_external_dest is not None:
            pulumi.set(__self__, "http_external_dest", http_external_dest)
        if ike_dn_format is not None:
            pulumi.set(__self__, "ike_dn_format", ike_dn_format)
        if ike_natt_port is not None:
            pulumi.set(__self__, "ike_natt_port", ike_natt_port)
        if ike_policy_route is not None:
            pulumi.set(__self__, "ike_policy_route", ike_policy_route)
        if ike_port is not None:
            pulumi.set(__self__, "ike_port", ike_port)
        if ike_quick_crash_detect is not None:
            pulumi.set(__self__, "ike_quick_crash_detect", ike_quick_crash_detect)
        if ike_session_resume is not None:
            pulumi.set(__self__, "ike_session_resume", ike_session_resume)
        if ike_tcp_port is not None:
            pulumi.set(__self__, "ike_tcp_port", ike_tcp_port)
        if implicit_allow_dns is not None:
            pulumi.set(__self__, "implicit_allow_dns", implicit_allow_dns)
        if inspection_mode is not None:
            pulumi.set(__self__, "inspection_mode", inspection_mode)
        if internet_service_database_cache is not None:
            pulumi.set(__self__, "internet_service_database_cache", internet_service_database_cache)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if lan_extension_controller_addr is not None:
            pulumi.set(__self__, "lan_extension_controller_addr", lan_extension_controller_addr)
        if link_down_access is not None:
            pulumi.set(__self__, "link_down_access", link_down_access)
        if lldp_reception is not None:
            pulumi.set(__self__, "lldp_reception", lldp_reception)
        if lldp_transmission is not None:
            pulumi.set(__self__, "lldp_transmission", lldp_transmission)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if mac_ttl is not None:
            pulumi.set(__self__, "mac_ttl", mac_ttl)
        if manageip is not None:
            pulumi.set(__self__, "manageip", manageip)
        if manageip6 is not None:
            pulumi.set(__self__, "manageip6", manageip6)
        if multicast_forward is not None:
            pulumi.set(__self__, "multicast_forward", multicast_forward)
        if multicast_skip_policy is not None:
            pulumi.set(__self__, "multicast_skip_policy", multicast_skip_policy)
        if multicast_ttl_notchange is not None:
            pulumi.set(__self__, "multicast_ttl_notchange", multicast_ttl_notchange)
        if nat46_force_ipv4_packet_forwarding is not None:
            pulumi.set(__self__, "nat46_force_ipv4_packet_forwarding", nat46_force_ipv4_packet_forwarding)
        if nat46_generate_ipv6_fragment_header is not None:
            pulumi.set(__self__, "nat46_generate_ipv6_fragment_header", nat46_generate_ipv6_fragment_header)
        if nat64_force_ipv6_packet_forwarding is not None:
            pulumi.set(__self__, "nat64_force_ipv6_packet_forwarding", nat64_force_ipv6_packet_forwarding)
        if ngfw_mode is not None:
            pulumi.set(__self__, "ngfw_mode", ngfw_mode)
        if opmode is not None:
            pulumi.set(__self__, "opmode", opmode)
        if prp_trailer_action is not None:
            pulumi.set(__self__, "prp_trailer_action", prp_trailer_action)
        if sccp_port is not None:
            pulumi.set(__self__, "sccp_port", sccp_port)
        if sctp_session_without_init is not None:
            pulumi.set(__self__, "sctp_session_without_init", sctp_session_without_init)
        if ses_denied_traffic is not None:
            pulumi.set(__self__, "ses_denied_traffic", ses_denied_traffic)
        if sip_expectation is not None:
            pulumi.set(__self__, "sip_expectation", sip_expectation)
        if sip_helper is not None:
            pulumi.set(__self__, "sip_helper", sip_helper)
        if sip_nat_trace is not None:
            pulumi.set(__self__, "sip_nat_trace", sip_nat_trace)
        if sip_ssl_port is not None:
            pulumi.set(__self__, "sip_ssl_port", sip_ssl_port)
        if sip_tcp_port is not None:
            pulumi.set(__self__, "sip_tcp_port", sip_tcp_port)
        if sip_udp_port is not None:
            pulumi.set(__self__, "sip_udp_port", sip_udp_port)
        if snat_hairpin_traffic is not None:
            pulumi.set(__self__, "snat_hairpin_traffic", snat_hairpin_traffic)
        if ssl_ssh_profile is not None:
            pulumi.set(__self__, "ssl_ssh_profile", ssl_ssh_profile)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strict_src_check is not None:
            pulumi.set(__self__, "strict_src_check", strict_src_check)
        if tcp_session_without_syn is not None:
            pulumi.set(__self__, "tcp_session_without_syn", tcp_session_without_syn)
        if utf8_spam_tagging is not None:
            pulumi.set(__self__, "utf8_spam_tagging", utf8_spam_tagging)
        if v4_ecmp_mode is not None:
            pulumi.set(__self__, "v4_ecmp_mode", v4_ecmp_mode)
        if vdom_type is not None:
            pulumi.set(__self__, "vdom_type", vdom_type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vpn_stats_log is not None:
            pulumi.set(__self__, "vpn_stats_log", vpn_stats_log)
        if vpn_stats_period is not None:
            pulumi.set(__self__, "vpn_stats_period", vpn_stats_period)
        if wccp_cache_engine is not None:
            pulumi.set(__self__, "wccp_cache_engine", wccp_cache_engine)

    @property
    @pulumi.getter(name="allowLinkdownPath")
    def allow_linkdown_path(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable link down path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_linkdown_path")

    @allow_linkdown_path.setter
    def allow_linkdown_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_linkdown_path", value)

    @property
    @pulumi.getter(name="allowSubnetOverlap")
    def allow_subnet_overlap(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing interface subnets to use overlapping IP addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_subnet_overlap")

    @allow_subnet_overlap.setter
    def allow_subnet_overlap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_subnet_overlap", value)

    @property
    @pulumi.getter(name="applicationBandwidthTracking")
    def application_bandwidth_tracking(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable application bandwidth tracking. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "application_bandwidth_tracking")

    @application_bandwidth_tracking.setter
    def application_bandwidth_tracking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_bandwidth_tracking", value)

    @property
    @pulumi.getter
    def asymroute(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 asymmetric routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asymroute")

    @asymroute.setter
    def asymroute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asymroute", value)

    @property
    @pulumi.getter
    def asymroute6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable asymmetric IPv6 routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asymroute6")

    @asymroute6.setter
    def asymroute6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asymroute6", value)

    @property
    @pulumi.getter(name="asymroute6Icmp")
    def asymroute6_icmp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable asymmetric ICMPv6 routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asymroute6_icmp")

    @asymroute6_icmp.setter
    def asymroute6_icmp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asymroute6_icmp", value)

    @property
    @pulumi.getter(name="asymrouteIcmp")
    def asymroute_icmp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ICMP asymmetric routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asymroute_icmp")

    @asymroute_icmp.setter
    def asymroute_icmp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asymroute_icmp", value)

    @property
    @pulumi.getter(name="auxiliarySession")
    def auxiliary_session(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable auxiliary session. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auxiliary_session")

    @auxiliary_session.setter
    def auxiliary_session(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auxiliary_session", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Bi-directional Forwarding Detection (BFD) on all interfaces. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> Optional[pulumi.Input[int]]:
        """
        BFD desired minimal transmit interval (1 - 100000 ms, default = 50).
        """
        return pulumi.get(self, "bfd_desired_min_tx")

    @bfd_desired_min_tx.setter
    def bfd_desired_min_tx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_desired_min_tx", value)

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> Optional[pulumi.Input[int]]:
        """
        BFD detection multiplier (1 - 50, default = 3).
        """
        return pulumi.get(self, "bfd_detect_mult")

    @bfd_detect_mult.setter
    def bfd_detect_mult(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_detect_mult", value)

    @property
    @pulumi.getter(name="bfdDontEnforceSrcPort")
    def bfd_dont_enforce_src_port(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to not enforce verifying the source port of BFD Packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd_dont_enforce_src_port")

    @bfd_dont_enforce_src_port.setter
    def bfd_dont_enforce_src_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd_dont_enforce_src_port", value)

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> Optional[pulumi.Input[int]]:
        """
        BFD required minimal receive interval (1 - 100000 ms, default = 50).
        """
        return pulumi.get(self, "bfd_required_min_rx")

    @bfd_required_min_rx.setter
    def bfd_required_min_rx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_required_min_rx", value)

    @property
    @pulumi.getter(name="blockLandAttack")
    def block_land_attack(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable blocking of land attacks. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_land_attack")

    @block_land_attack.setter
    def block_land_attack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_land_attack", value)

    @property
    @pulumi.getter(name="centralNat")
    def central_nat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable central NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "central_nat")

    @central_nat.setter
    def central_nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "central_nat", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM comments.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="complianceCheck")
    def compliance_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PCI DSS compliance checking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "compliance_check")

    @compliance_check.setter
    def compliance_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compliance_check", value)

    @property
    @pulumi.getter(name="consolidatedFirewallMode")
    def consolidated_firewall_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Consolidated firewall mode.
        """
        return pulumi.get(self, "consolidated_firewall_mode")

    @consolidated_firewall_mode.setter
    def consolidated_firewall_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consolidated_firewall_mode", value)

    @property
    @pulumi.getter(name="defaultAppPortAsService")
    def default_app_port_as_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy service enforcement based on application default ports. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default_app_port_as_service")

    @default_app_port_as_service.setter
    def default_app_port_as_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_app_port_as_service", value)

    @property
    @pulumi.getter(name="defaultPolicyExpiryDays")
    def default_policy_expiry_days(self) -> Optional[pulumi.Input[int]]:
        """
        Default policy expiry in days (0 - 365 days, default = 30).
        """
        return pulumi.get(self, "default_policy_expiry_days")

    @default_policy_expiry_days.setter
    def default_policy_expiry_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_policy_expiry_days", value)

    @property
    @pulumi.getter(name="defaultVoipAlgMode")
    def default_voip_alg_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how the FortiGate handles VoIP traffic when a policy that accepts the traffic doesn't include a VoIP profile. Valid values: `proxy-based`, `kernel-helper-based`.
        """
        return pulumi.get(self, "default_voip_alg_mode")

    @default_voip_alg_mode.setter
    def default_voip_alg_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_voip_alg_mode", value)

    @property
    @pulumi.getter(name="denyTcpWithIcmp")
    def deny_tcp_with_icmp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable denying TCP by sending an ICMP communication prohibited packet. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "deny_tcp_with_icmp")

    @deny_tcp_with_icmp.setter
    def deny_tcp_with_icmp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deny_tcp_with_icmp", value)

    @property
    @pulumi.getter(name="detectUnknownEsp")
    def detect_unknown_esp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable detection of unknown ESP packets (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "detect_unknown_esp")

    @detect_unknown_esp.setter
    def detect_unknown_esp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detect_unknown_esp", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        Interface to use for management access for NAT mode.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="dhcp6ServerIp")
    def dhcp6_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        DHCPv6 server IPv6 address.
        """
        return pulumi.get(self, "dhcp6_server_ip")

    @dhcp6_server_ip.setter
    def dhcp6_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_server_ip", value)

    @property
    @pulumi.getter(name="dhcpProxy")
    def dhcp_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the DHCP Proxy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_proxy")

    @dhcp_proxy.setter
    def dhcp_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_proxy", value)

    @property
    @pulumi.getter(name="dhcpProxyInterface")
    def dhcp_proxy_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "dhcp_proxy_interface")

    @dhcp_proxy_interface.setter
    def dhcp_proxy_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_proxy_interface", value)

    @property
    @pulumi.getter(name="dhcpProxyInterfaceSelectMethod")
    def dhcp_proxy_interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "dhcp_proxy_interface_select_method")

    @dhcp_proxy_interface_select_method.setter
    def dhcp_proxy_interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_proxy_interface_select_method", value)

    @property
    @pulumi.getter(name="dhcpServerIp")
    def dhcp_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP Server IPv4 address.
        """
        return pulumi.get(self, "dhcp_server_ip")

    @dhcp_server_ip.setter
    def dhcp_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_server_ip", value)

    @property
    @pulumi.getter(name="discoveredDeviceTimeout")
    def discovered_device_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for discovered devices (1 - 365 days, default = 28).
        """
        return pulumi.get(self, "discovered_device_timeout")

    @discovered_device_timeout.setter
    def discovered_device_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "discovered_device_timeout", value)

    @property
    @pulumi.getter(name="dynAddrSessionCheck")
    def dyn_addr_session_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dirty session check caused by dynamic address updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dyn_addr_session_check")

    @dyn_addr_session_check.setter
    def dyn_addr_session_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dyn_addr_session_check", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="ecmpMaxPaths")
    def ecmp_max_paths(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of Equal Cost Multi-Path (ECMP) next-hops. Set to 1 to disable ECMP routing (1 - 100, default = 10).
        """
        return pulumi.get(self, "ecmp_max_paths")

    @ecmp_max_paths.setter
    def ecmp_max_paths(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ecmp_max_paths", value)

    @property
    @pulumi.getter(name="emailPortalCheckDns")
    def email_portal_check_dns(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable using DNS to validate email addresses collected by a captive portal. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "email_portal_check_dns")

    @email_portal_check_dns.setter
    def email_portal_check_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_portal_check_dns", value)

    @property
    @pulumi.getter(name="extResourceSessionCheck")
    def ext_resource_session_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dirty session check caused by external resource updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ext_resource_session_check")

    @ext_resource_session_check.setter
    def ext_resource_session_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_resource_session_check", value)

    @property
    @pulumi.getter(name="firewallSessionDirty")
    def firewall_session_dirty(self) -> Optional[pulumi.Input[str]]:
        """
        Select how to manage sessions affected by firewall policy configuration changes. Valid values: `check-all`, `check-new`, `check-policy-option`.
        """
        return pulumi.get(self, "firewall_session_dirty")

    @firewall_session_dirty.setter
    def firewall_session_dirty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_session_dirty", value)

    @property
    @pulumi.getter(name="fqdnSessionCheck")
    def fqdn_session_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dirty session check caused by FQDN updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fqdn_session_check")

    @fqdn_session_check.setter
    def fqdn_session_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn_session_check", value)

    @property
    @pulumi.getter(name="fwSessionHairpin")
    def fw_session_hairpin(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable checking for a matching policy each time hairpin traffic goes through the FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fw_session_hairpin")

    @fw_session_hairpin.setter
    def fw_session_hairpin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fw_session_hairpin", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Transparent mode IPv4 default gateway IP address.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[pulumi.Input[str]]:
        """
        Transparent mode IPv4 default gateway IP address.
        """
        return pulumi.get(self, "gateway6")

    @gateway6.setter
    def gateway6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway6", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="guiAdvancedPolicy")
    def gui_advanced_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advanced policy configuration on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_advanced_policy")

    @gui_advanced_policy.setter
    def gui_advanced_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_advanced_policy", value)

    @property
    @pulumi.getter(name="guiAdvancedWirelessFeatures")
    def gui_advanced_wireless_features(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advanced wireless features in GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_advanced_wireless_features")

    @gui_advanced_wireless_features.setter
    def gui_advanced_wireless_features(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_advanced_wireless_features", value)

    @property
    @pulumi.getter(name="guiAllowUnnamedPolicy")
    def gui_allow_unnamed_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the requirement for policy naming on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_allow_unnamed_policy")

    @gui_allow_unnamed_policy.setter
    def gui_allow_unnamed_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_allow_unnamed_policy", value)

    @property
    @pulumi.getter(name="guiAntivirus")
    def gui_antivirus(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AntiVirus on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_antivirus")

    @gui_antivirus.setter
    def gui_antivirus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_antivirus", value)

    @property
    @pulumi.getter(name="guiApProfile")
    def gui_ap_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiAP profiles on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_ap_profile")

    @gui_ap_profile.setter
    def gui_ap_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_ap_profile", value)

    @property
    @pulumi.getter(name="guiApplicationControl")
    def gui_application_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable application control on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_application_control")

    @gui_application_control.setter
    def gui_application_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_application_control", value)

    @property
    @pulumi.getter(name="guiCasb")
    def gui_casb(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Inline-CASB on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_casb")

    @gui_casb.setter
    def gui_casb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_casb", value)

    @property
    @pulumi.getter(name="guiDefaultPolicyColumns")
    def gui_default_policy_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingsGuiDefaultPolicyColumnArgs']]]]:
        """
        Default columns to display for policy lists on GUI. The structure of `gui_default_policy_columns` block is documented below.
        """
        return pulumi.get(self, "gui_default_policy_columns")

    @gui_default_policy_columns.setter
    def gui_default_policy_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsGuiDefaultPolicyColumnArgs']]]]):
        pulumi.set(self, "gui_default_policy_columns", value)

    @property
    @pulumi.getter(name="guiDhcpAdvanced")
    def gui_dhcp_advanced(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advanced DHCP options on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dhcp_advanced")

    @gui_dhcp_advanced.setter
    def gui_dhcp_advanced(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dhcp_advanced", value)

    @property
    @pulumi.getter(name="guiDlp")
    def gui_dlp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DLP on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dlp")

    @gui_dlp.setter
    def gui_dlp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dlp", value)

    @property
    @pulumi.getter(name="guiDlpProfile")
    def gui_dlp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Data Leak Prevention on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dlp_profile")

    @gui_dlp_profile.setter
    def gui_dlp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dlp_profile", value)

    @property
    @pulumi.getter(name="guiDnsDatabase")
    def gui_dns_database(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DNS database settings on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dns_database")

    @gui_dns_database.setter
    def gui_dns_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dns_database", value)

    @property
    @pulumi.getter(name="guiDnsfilter")
    def gui_dnsfilter(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DNS Filtering on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dnsfilter")

    @gui_dnsfilter.setter
    def gui_dnsfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dnsfilter", value)

    @property
    @pulumi.getter(name="guiDomainIpReputation")
    def gui_domain_ip_reputation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Domain and IP Reputation on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_domain_ip_reputation")

    @gui_domain_ip_reputation.setter
    def gui_domain_ip_reputation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_domain_ip_reputation", value)

    @property
    @pulumi.getter(name="guiDosPolicy")
    def gui_dos_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DoS policies on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dos_policy")

    @gui_dos_policy.setter
    def gui_dos_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dos_policy", value)

    @property
    @pulumi.getter(name="guiDynamicDeviceOsId")
    def gui_dynamic_device_os_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Create dynamic addresses to manage known devices. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dynamic_device_os_id")

    @gui_dynamic_device_os_id.setter
    def gui_dynamic_device_os_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dynamic_device_os_id", value)

    @property
    @pulumi.getter(name="guiDynamicProfileDisplay")
    def gui_dynamic_profile_display(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable RADIUS Single Sign On (RSSO) on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dynamic_profile_display")

    @gui_dynamic_profile_display.setter
    def gui_dynamic_profile_display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dynamic_profile_display", value)

    @property
    @pulumi.getter(name="guiDynamicRouting")
    def gui_dynamic_routing(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic routing on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dynamic_routing")

    @gui_dynamic_routing.setter
    def gui_dynamic_routing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_dynamic_routing", value)

    @property
    @pulumi.getter(name="guiEmailCollection")
    def gui_email_collection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable email collection on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_email_collection")

    @gui_email_collection.setter
    def gui_email_collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_email_collection", value)

    @property
    @pulumi.getter(name="guiEndpointControl")
    def gui_endpoint_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable endpoint control on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_endpoint_control")

    @gui_endpoint_control.setter
    def gui_endpoint_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_endpoint_control", value)

    @property
    @pulumi.getter(name="guiEndpointControlAdvanced")
    def gui_endpoint_control_advanced(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advanced endpoint control options on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_endpoint_control_advanced")

    @gui_endpoint_control_advanced.setter
    def gui_endpoint_control_advanced(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_endpoint_control_advanced", value)

    @property
    @pulumi.getter(name="guiEnforceChangeSummary")
    def gui_enforce_change_summary(self) -> Optional[pulumi.Input[str]]:
        """
        Enforce change summaries for select tables in the GUI. Valid values: `disable`, `require`, `optional`.
        """
        return pulumi.get(self, "gui_enforce_change_summary")

    @gui_enforce_change_summary.setter
    def gui_enforce_change_summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_enforce_change_summary", value)

    @property
    @pulumi.getter(name="guiExplicitProxy")
    def gui_explicit_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the explicit proxy on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_explicit_proxy")

    @gui_explicit_proxy.setter
    def gui_explicit_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_explicit_proxy", value)

    @property
    @pulumi.getter(name="guiFileFilter")
    def gui_file_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable File-filter on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_file_filter")

    @gui_file_filter.setter
    def gui_file_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_file_filter", value)

    @property
    @pulumi.getter(name="guiFortiapSplitTunneling")
    def gui_fortiap_split_tunneling(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiAP split tunneling on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_fortiap_split_tunneling")

    @gui_fortiap_split_tunneling.setter
    def gui_fortiap_split_tunneling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_fortiap_split_tunneling", value)

    @property
    @pulumi.getter(name="guiFortiextenderController")
    def gui_fortiextender_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiExtender on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_fortiextender_controller")

    @gui_fortiextender_controller.setter
    def gui_fortiextender_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_fortiextender_controller", value)

    @property
    @pulumi.getter(name="guiIcap")
    def gui_icap(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ICAP on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_icap")

    @gui_icap.setter
    def gui_icap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_icap", value)

    @property
    @pulumi.getter(name="guiImplicitPolicy")
    def gui_implicit_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable implicit firewall policies on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_implicit_policy")

    @gui_implicit_policy.setter
    def gui_implicit_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_implicit_policy", value)

    @property
    @pulumi.getter(name="guiIps")
    def gui_ips(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_ips")

    @gui_ips.setter
    def gui_ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_ips", value)

    @property
    @pulumi.getter(name="guiLoadBalance")
    def gui_load_balance(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable server load balancing on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_load_balance")

    @gui_load_balance.setter
    def gui_load_balance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_load_balance", value)

    @property
    @pulumi.getter(name="guiLocalInPolicy")
    def gui_local_in_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Local-In policies on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_local_in_policy")

    @gui_local_in_policy.setter
    def gui_local_in_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_local_in_policy", value)

    @property
    @pulumi.getter(name="guiLocalReports")
    def gui_local_reports(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local reports on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_local_reports")

    @gui_local_reports.setter
    def gui_local_reports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_local_reports", value)

    @property
    @pulumi.getter(name="guiMulticastPolicy")
    def gui_multicast_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable multicast firewall policies on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_multicast_policy")

    @gui_multicast_policy.setter
    def gui_multicast_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_multicast_policy", value)

    @property
    @pulumi.getter(name="guiMultipleInterfacePolicy")
    def gui_multiple_interface_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding multiple interfaces to a policy on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_multiple_interface_policy")

    @gui_multiple_interface_policy.setter
    def gui_multiple_interface_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_multiple_interface_policy", value)

    @property
    @pulumi.getter(name="guiMultipleUtmProfiles")
    def gui_multiple_utm_profiles(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable multiple UTM profiles on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_multiple_utm_profiles")

    @gui_multiple_utm_profiles.setter
    def gui_multiple_utm_profiles(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_multiple_utm_profiles", value)

    @property
    @pulumi.getter(name="guiNat4664")
    def gui_nat4664(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT46 and NAT64 settings on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_nat4664")

    @gui_nat4664.setter
    def gui_nat4664(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_nat4664", value)

    @property
    @pulumi.getter(name="guiObjectColors")
    def gui_object_colors(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable object colors on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_object_colors")

    @gui_object_colors.setter
    def gui_object_colors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_object_colors", value)

    @property
    @pulumi.getter(name="guiOt")
    def gui_ot(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Show Operational Technology Purdue Model. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_ot")

    @gui_ot.setter
    def gui_ot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_ot", value)

    @property
    @pulumi.getter(name="guiPerPolicyDisclaimer")
    def gui_per_policy_disclaimer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy disclaimer on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_per_policy_disclaimer")

    @gui_per_policy_disclaimer.setter
    def gui_per_policy_disclaimer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_per_policy_disclaimer", value)

    @property
    @pulumi.getter(name="guiPolicyBasedIpsec")
    def gui_policy_based_ipsec(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy-based IPsec VPN on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_policy_based_ipsec")

    @gui_policy_based_ipsec.setter
    def gui_policy_based_ipsec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_policy_based_ipsec", value)

    @property
    @pulumi.getter(name="guiPolicyDisclaimer")
    def gui_policy_disclaimer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy disclaimer on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_policy_disclaimer")

    @gui_policy_disclaimer.setter
    def gui_policy_disclaimer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_policy_disclaimer", value)

    @property
    @pulumi.getter(name="guiPolicyLearning")
    def gui_policy_learning(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable firewall policy learning mode on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_policy_learning")

    @gui_policy_learning.setter
    def gui_policy_learning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_policy_learning", value)

    @property
    @pulumi.getter(name="guiProxyInspection")
    def gui_proxy_inspection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the proxy features on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_proxy_inspection")

    @gui_proxy_inspection.setter
    def gui_proxy_inspection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_proxy_inspection", value)

    @property
    @pulumi.getter(name="guiReplacementMessageGroups")
    def gui_replacement_message_groups(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable replacement message groups on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_replacement_message_groups")

    @gui_replacement_message_groups.setter
    def gui_replacement_message_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_replacement_message_groups", value)

    @property
    @pulumi.getter(name="guiRouteTagAddressCreation")
    def gui_route_tag_address_creation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable route-tag addresses on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_route_tag_address_creation")

    @gui_route_tag_address_creation.setter
    def gui_route_tag_address_creation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_route_tag_address_creation", value)

    @property
    @pulumi.getter(name="guiSecurityProfileGroup")
    def gui_security_profile_group(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Security Profile Groups on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_security_profile_group")

    @gui_security_profile_group.setter
    def gui_security_profile_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_security_profile_group", value)

    @property
    @pulumi.getter(name="guiSpamfilter")
    def gui_spamfilter(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Antispam on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_spamfilter")

    @gui_spamfilter.setter
    def gui_spamfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_spamfilter", value)

    @property
    @pulumi.getter(name="guiSslvpn")
    def gui_sslvpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL-VPN settings pages on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_sslvpn")

    @gui_sslvpn.setter
    def gui_sslvpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_sslvpn", value)

    @property
    @pulumi.getter(name="guiSslvpnPersonalBookmarks")
    def gui_sslvpn_personal_bookmarks(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL-VPN personal bookmark management on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_sslvpn_personal_bookmarks")

    @gui_sslvpn_personal_bookmarks.setter
    def gui_sslvpn_personal_bookmarks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_sslvpn_personal_bookmarks", value)

    @property
    @pulumi.getter(name="guiSslvpnRealms")
    def gui_sslvpn_realms(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL-VPN realms on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_sslvpn_realms")

    @gui_sslvpn_realms.setter
    def gui_sslvpn_realms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_sslvpn_realms", value)

    @property
    @pulumi.getter(name="guiSwitchController")
    def gui_switch_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the switch controller on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_switch_controller")

    @gui_switch_controller.setter
    def gui_switch_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_switch_controller", value)

    @property
    @pulumi.getter(name="guiThreatWeight")
    def gui_threat_weight(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable threat weight on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_threat_weight")

    @gui_threat_weight.setter
    def gui_threat_weight(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_threat_weight", value)

    @property
    @pulumi.getter(name="guiTrafficShaping")
    def gui_traffic_shaping(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable traffic shaping on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_traffic_shaping")

    @gui_traffic_shaping.setter
    def gui_traffic_shaping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_traffic_shaping", value)

    @property
    @pulumi.getter(name="guiVideofilter")
    def gui_videofilter(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Video filtering on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_videofilter")

    @gui_videofilter.setter
    def gui_videofilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_videofilter", value)

    @property
    @pulumi.getter(name="guiVirtualPatchProfile")
    def gui_virtual_patch_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Virtual Patching on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_virtual_patch_profile")

    @gui_virtual_patch_profile.setter
    def gui_virtual_patch_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_virtual_patch_profile", value)

    @property
    @pulumi.getter(name="guiVoipProfile")
    def gui_voip_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VoIP profiles on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_voip_profile")

    @gui_voip_profile.setter
    def gui_voip_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_voip_profile", value)

    @property
    @pulumi.getter(name="guiVpn")
    def gui_vpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPN tunnels on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_vpn")

    @gui_vpn.setter
    def gui_vpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_vpn", value)

    @property
    @pulumi.getter(name="guiWafProfile")
    def gui_waf_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Web Application Firewall on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_waf_profile")

    @gui_waf_profile.setter
    def gui_waf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_waf_profile", value)

    @property
    @pulumi.getter(name="guiWanLoadBalancing")
    def gui_wan_load_balancing(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_wan_load_balancing")

    @gui_wan_load_balancing.setter
    def gui_wan_load_balancing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_wan_load_balancing", value)

    @property
    @pulumi.getter(name="guiWanoptCache")
    def gui_wanopt_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WAN Optimization and Web Caching on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_wanopt_cache")

    @gui_wanopt_cache.setter
    def gui_wanopt_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_wanopt_cache", value)

    @property
    @pulumi.getter(name="guiWebfilter")
    def gui_webfilter(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Web filtering on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_webfilter")

    @gui_webfilter.setter
    def gui_webfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_webfilter", value)

    @property
    @pulumi.getter(name="guiWebfilterAdvanced")
    def gui_webfilter_advanced(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advanced web filtering on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_webfilter_advanced")

    @gui_webfilter_advanced.setter
    def gui_webfilter_advanced(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_webfilter_advanced", value)

    @property
    @pulumi.getter(name="guiWirelessController")
    def gui_wireless_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the wireless controller on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_wireless_controller")

    @gui_wireless_controller.setter
    def gui_wireless_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_wireless_controller", value)

    @property
    @pulumi.getter(name="guiZtna")
    def gui_ztna(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Zero Trust Network Access features on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_ztna")

    @gui_ztna.setter
    def gui_ztna(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_ztna", value)

    @property
    @pulumi.getter(name="h323DirectModel")
    def h323_direct_model(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable H323 direct model. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "h323_direct_model")

    @h323_direct_model.setter
    def h323_direct_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h323_direct_model", value)

    @property
    @pulumi.getter(name="httpExternalDest")
    def http_external_dest(self) -> Optional[pulumi.Input[str]]:
        """
        Offload HTTP traffic to FortiWeb or FortiCache. Valid values: `fortiweb`, `forticache`.
        """
        return pulumi.get(self, "http_external_dest")

    @http_external_dest.setter
    def http_external_dest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_external_dest", value)

    @property
    @pulumi.getter(name="ikeDnFormat")
    def ike_dn_format(self) -> Optional[pulumi.Input[str]]:
        """
        Configure IKE ASN.1 Distinguished Name format conventions. Valid values: `with-space`, `no-space`.
        """
        return pulumi.get(self, "ike_dn_format")

    @ike_dn_format.setter
    def ike_dn_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_dn_format", value)

    @property
    @pulumi.getter(name="ikeNattPort")
    def ike_natt_port(self) -> Optional[pulumi.Input[int]]:
        """
        UDP port for IKE/IPsec traffic in NAT-T mode (default 4500).
        """
        return pulumi.get(self, "ike_natt_port")

    @ike_natt_port.setter
    def ike_natt_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_natt_port", value)

    @property
    @pulumi.getter(name="ikePolicyRoute")
    def ike_policy_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKE Policy Based Routing (PBR). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ike_policy_route")

    @ike_policy_route.setter
    def ike_policy_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_policy_route", value)

    @property
    @pulumi.getter(name="ikePort")
    def ike_port(self) -> Optional[pulumi.Input[int]]:
        """
        UDP port for IKE/IPsec traffic (default 500).
        """
        return pulumi.get(self, "ike_port")

    @ike_port.setter
    def ike_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_port", value)

    @property
    @pulumi.getter(name="ikeQuickCrashDetect")
    def ike_quick_crash_detect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKE quick crash detection (RFC 6290). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ike_quick_crash_detect")

    @ike_quick_crash_detect.setter
    def ike_quick_crash_detect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_quick_crash_detect", value)

    @property
    @pulumi.getter(name="ikeSessionResume")
    def ike_session_resume(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKEv2 session resumption (RFC 5723). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ike_session_resume")

    @ike_session_resume.setter
    def ike_session_resume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_session_resume", value)

    @property
    @pulumi.getter(name="ikeTcpPort")
    def ike_tcp_port(self) -> Optional[pulumi.Input[int]]:
        """
        TCP port for IKE/IPsec traffic (default 4500).
        """
        return pulumi.get(self, "ike_tcp_port")

    @ike_tcp_port.setter
    def ike_tcp_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_tcp_port", value)

    @property
    @pulumi.getter(name="implicitAllowDns")
    def implicit_allow_dns(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable implicitly allowing DNS traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "implicit_allow_dns")

    @implicit_allow_dns.setter
    def implicit_allow_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "implicit_allow_dns", value)

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Inspection mode (proxy-based or flow-based). Valid values: `proxy`, `flow`.
        """
        return pulumi.get(self, "inspection_mode")

    @inspection_mode.setter
    def inspection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspection_mode", value)

    @property
    @pulumi.getter(name="internetServiceDatabaseCache")
    def internet_service_database_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Internet Service database caching. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "internet_service_database_cache")

    @internet_service_database_cache.setter
    def internet_service_database_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_database_cache", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address and netmask.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address prefix for NAT mode.
        """
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6", value)

    @property
    @pulumi.getter(name="lanExtensionControllerAddr")
    def lan_extension_controller_addr(self) -> Optional[pulumi.Input[str]]:
        """
        Controller IP address or FQDN to connect.
        """
        return pulumi.get(self, "lan_extension_controller_addr")

    @lan_extension_controller_addr.setter
    def lan_extension_controller_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_extension_controller_addr", value)

    @property
    @pulumi.getter(name="linkDownAccess")
    def link_down_access(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable link down access traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_down_access")

    @link_down_access.setter
    def link_down_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_down_access", value)

    @property
    @pulumi.getter(name="lldpReception")
    def lldp_reception(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) reception for this VDOM or apply global settings to this VDOM. Valid values: `enable`, `disable`, `global`.
        """
        return pulumi.get(self, "lldp_reception")

    @lldp_reception.setter
    def lldp_reception(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_reception", value)

    @property
    @pulumi.getter(name="lldpTransmission")
    def lldp_transmission(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) transmission for this VDOM or apply global settings to this VDOM. Valid values: `enable`, `disable`, `global`.
        """
        return pulumi.get(self, "lldp_transmission")

    @lldp_transmission.setter
    def lldp_transmission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_transmission", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[str]]:
        """
        Local location ID in the form of an IPv4 address.
        """
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter(name="macTtl")
    def mac_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Duration of MAC addresses in Transparent mode (300 - 8640000 sec, default = 300).
        """
        return pulumi.get(self, "mac_ttl")

    @mac_ttl.setter
    def mac_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_ttl", value)

    @property
    @pulumi.getter
    def manageip(self) -> Optional[pulumi.Input[str]]:
        """
        Transparent mode IPv4 management IP address and netmask.
        """
        return pulumi.get(self, "manageip")

    @manageip.setter
    def manageip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manageip", value)

    @property
    @pulumi.getter
    def manageip6(self) -> Optional[pulumi.Input[str]]:
        """
        Transparent mode IPv6 management IP address and netmask.
        """
        return pulumi.get(self, "manageip6")

    @manageip6.setter
    def manageip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manageip6", value)

    @property
    @pulumi.getter(name="multicastForward")
    def multicast_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable multicast forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "multicast_forward")

    @multicast_forward.setter
    def multicast_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_forward", value)

    @property
    @pulumi.getter(name="multicastSkipPolicy")
    def multicast_skip_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing multicast traffic through the FortiGate without a policy check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "multicast_skip_policy")

    @multicast_skip_policy.setter
    def multicast_skip_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_skip_policy", value)

    @property
    @pulumi.getter(name="multicastTtlNotchange")
    def multicast_ttl_notchange(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable preventing the FortiGate from changing the TTL for forwarded multicast packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "multicast_ttl_notchange")

    @multicast_ttl_notchange.setter
    def multicast_ttl_notchange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_ttl_notchange", value)

    @property
    @pulumi.getter(name="nat46ForceIpv4PacketForwarding")
    def nat46_force_ipv4_packet_forwarding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable mandatory IPv4 packet forwarding in NAT46. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat46_force_ipv4_packet_forwarding")

    @nat46_force_ipv4_packet_forwarding.setter
    def nat46_force_ipv4_packet_forwarding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat46_force_ipv4_packet_forwarding", value)

    @property
    @pulumi.getter(name="nat46GenerateIpv6FragmentHeader")
    def nat46_generate_ipv6_fragment_header(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT46 IPv6 fragment header generation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat46_generate_ipv6_fragment_header")

    @nat46_generate_ipv6_fragment_header.setter
    def nat46_generate_ipv6_fragment_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat46_generate_ipv6_fragment_header", value)

    @property
    @pulumi.getter(name="nat64ForceIpv6PacketForwarding")
    def nat64_force_ipv6_packet_forwarding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable mandatory IPv6 packet forwarding in NAT64. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat64_force_ipv6_packet_forwarding")

    @nat64_force_ipv6_packet_forwarding.setter
    def nat64_force_ipv6_packet_forwarding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64_force_ipv6_packet_forwarding", value)

    @property
    @pulumi.getter(name="ngfwMode")
    def ngfw_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Next Generation Firewall (NGFW) mode. Valid values: `profile-based`, `policy-based`.
        """
        return pulumi.get(self, "ngfw_mode")

    @ngfw_mode.setter
    def ngfw_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ngfw_mode", value)

    @property
    @pulumi.getter
    def opmode(self) -> Optional[pulumi.Input[str]]:
        """
        Firewall operation mode (NAT or Transparent). Valid values: `nat`, `transparent`.
        """
        return pulumi.get(self, "opmode")

    @opmode.setter
    def opmode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opmode", value)

    @property
    @pulumi.getter(name="prpTrailerAction")
    def prp_trailer_action(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable action to take on PRP trailer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "prp_trailer_action")

    @prp_trailer_action.setter
    def prp_trailer_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prp_trailer_action", value)

    @property
    @pulumi.getter(name="sccpPort")
    def sccp_port(self) -> Optional[pulumi.Input[int]]:
        """
        TCP port the SCCP proxy monitors for SCCP traffic (0 - 65535, default = 2000).
        """
        return pulumi.get(self, "sccp_port")

    @sccp_port.setter
    def sccp_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sccp_port", value)

    @property
    @pulumi.getter(name="sctpSessionWithoutInit")
    def sctp_session_without_init(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SCTP session creation without SCTP INIT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sctp_session_without_init")

    @sctp_session_without_init.setter
    def sctp_session_without_init(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sctp_session_without_init", value)

    @property
    @pulumi.getter(name="sesDeniedTraffic")
    def ses_denied_traffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable including denied session in the session table. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ses_denied_traffic")

    @ses_denied_traffic.setter
    def ses_denied_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ses_denied_traffic", value)

    @property
    @pulumi.getter(name="sipExpectation")
    def sip_expectation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the SIP kernel session helper to create an expectation for port 5060. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sip_expectation")

    @sip_expectation.setter
    def sip_expectation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sip_expectation", value)

    @property
    @pulumi.getter(name="sipHelper")
    def sip_helper(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the SIP session helper to process SIP sessions unless SIP sessions are accepted by the SIP application layer gateway (ALG). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sip_helper")

    @sip_helper.setter
    def sip_helper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sip_helper", value)

    @property
    @pulumi.getter(name="sipNatTrace")
    def sip_nat_trace(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable recording the original SIP source IP address when NAT is used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sip_nat_trace")

    @sip_nat_trace.setter
    def sip_nat_trace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sip_nat_trace", value)

    @property
    @pulumi.getter(name="sipSslPort")
    def sip_ssl_port(self) -> Optional[pulumi.Input[int]]:
        """
        TCP port the SIP proxy monitors for SIP SSL/TLS traffic (0 - 65535, default = 5061).
        """
        return pulumi.get(self, "sip_ssl_port")

    @sip_ssl_port.setter
    def sip_ssl_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sip_ssl_port", value)

    @property
    @pulumi.getter(name="sipTcpPort")
    def sip_tcp_port(self) -> Optional[pulumi.Input[int]]:
        """
        TCP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
        """
        return pulumi.get(self, "sip_tcp_port")

    @sip_tcp_port.setter
    def sip_tcp_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sip_tcp_port", value)

    @property
    @pulumi.getter(name="sipUdpPort")
    def sip_udp_port(self) -> Optional[pulumi.Input[int]]:
        """
        UDP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
        """
        return pulumi.get(self, "sip_udp_port")

    @sip_udp_port.setter
    def sip_udp_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sip_udp_port", value)

    @property
    @pulumi.getter(name="snatHairpinTraffic")
    def snat_hairpin_traffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable source NAT (SNAT) for hairpin traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "snat_hairpin_traffic")

    @snat_hairpin_traffic.setter
    def snat_hairpin_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_hairpin_traffic", value)

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Profile for SSL/SSH inspection.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @ssl_ssh_profile.setter
    def ssl_ssh_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ssh_profile", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this VDOM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="strictSrcCheck")
    def strict_src_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable strict source verification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_src_check")

    @strict_src_check.setter
    def strict_src_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_src_check", value)

    @property
    @pulumi.getter(name="tcpSessionWithoutSyn")
    def tcp_session_without_syn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing TCP session without SYN flags. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tcp_session_without_syn")

    @tcp_session_without_syn.setter
    def tcp_session_without_syn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_session_without_syn", value)

    @property
    @pulumi.getter(name="utf8SpamTagging")
    def utf8_spam_tagging(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable converting antispam tags to UTF-8 for better non-ASCII character support. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utf8_spam_tagging")

    @utf8_spam_tagging.setter
    def utf8_spam_tagging(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utf8_spam_tagging", value)

    @property
    @pulumi.getter(name="v4EcmpMode")
    def v4_ecmp_mode(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Equal-cost multi-path (ECMP) routing and load balancing mode. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`.
        """
        return pulumi.get(self, "v4_ecmp_mode")

    @v4_ecmp_mode.setter
    def v4_ecmp_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v4_ecmp_mode", value)

    @property
    @pulumi.getter(name="vdomType")
    def vdom_type(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM type (traffic or admin).
        """
        return pulumi.get(self, "vdom_type")

    @vdom_type.setter
    def vdom_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom_type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vpnStatsLog")
    def vpn_stats_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable periodic VPN log statistics for one or more types of VPN. Separate names with a space. Valid values: `ipsec`, `pptp`, `l2tp`, `ssl`.
        """
        return pulumi.get(self, "vpn_stats_log")

    @vpn_stats_log.setter
    def vpn_stats_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_stats_log", value)

    @property
    @pulumi.getter(name="vpnStatsPeriod")
    def vpn_stats_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period to send VPN log statistics (0 or 60 - 86400 sec).
        """
        return pulumi.get(self, "vpn_stats_period")

    @vpn_stats_period.setter
    def vpn_stats_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vpn_stats_period", value)

    @property
    @pulumi.getter(name="wccpCacheEngine")
    def wccp_cache_engine(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WCCP cache engine. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wccp_cache_engine")

    @wccp_cache_engine.setter
    def wccp_cache_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wccp_cache_engine", value)


class Settings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_linkdown_path: Optional[pulumi.Input[str]] = None,
                 allow_subnet_overlap: Optional[pulumi.Input[str]] = None,
                 application_bandwidth_tracking: Optional[pulumi.Input[str]] = None,
                 asymroute: Optional[pulumi.Input[str]] = None,
                 asymroute6: Optional[pulumi.Input[str]] = None,
                 asymroute6_icmp: Optional[pulumi.Input[str]] = None,
                 asymroute_icmp: Optional[pulumi.Input[str]] = None,
                 auxiliary_session: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 bfd_desired_min_tx: Optional[pulumi.Input[int]] = None,
                 bfd_detect_mult: Optional[pulumi.Input[int]] = None,
                 bfd_dont_enforce_src_port: Optional[pulumi.Input[str]] = None,
                 bfd_required_min_rx: Optional[pulumi.Input[int]] = None,
                 block_land_attack: Optional[pulumi.Input[str]] = None,
                 central_nat: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 compliance_check: Optional[pulumi.Input[str]] = None,
                 consolidated_firewall_mode: Optional[pulumi.Input[str]] = None,
                 default_app_port_as_service: Optional[pulumi.Input[str]] = None,
                 default_policy_expiry_days: Optional[pulumi.Input[int]] = None,
                 default_voip_alg_mode: Optional[pulumi.Input[str]] = None,
                 deny_tcp_with_icmp: Optional[pulumi.Input[str]] = None,
                 detect_unknown_esp: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dhcp6_server_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_proxy: Optional[pulumi.Input[str]] = None,
                 dhcp_proxy_interface: Optional[pulumi.Input[str]] = None,
                 dhcp_proxy_interface_select_method: Optional[pulumi.Input[str]] = None,
                 dhcp_server_ip: Optional[pulumi.Input[str]] = None,
                 discovered_device_timeout: Optional[pulumi.Input[int]] = None,
                 dyn_addr_session_check: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ecmp_max_paths: Optional[pulumi.Input[int]] = None,
                 email_portal_check_dns: Optional[pulumi.Input[str]] = None,
                 ext_resource_session_check: Optional[pulumi.Input[str]] = None,
                 firewall_session_dirty: Optional[pulumi.Input[str]] = None,
                 fqdn_session_check: Optional[pulumi.Input[str]] = None,
                 fw_session_hairpin: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gui_advanced_policy: Optional[pulumi.Input[str]] = None,
                 gui_advanced_wireless_features: Optional[pulumi.Input[str]] = None,
                 gui_allow_unnamed_policy: Optional[pulumi.Input[str]] = None,
                 gui_antivirus: Optional[pulumi.Input[str]] = None,
                 gui_ap_profile: Optional[pulumi.Input[str]] = None,
                 gui_application_control: Optional[pulumi.Input[str]] = None,
                 gui_casb: Optional[pulumi.Input[str]] = None,
                 gui_default_policy_columns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsGuiDefaultPolicyColumnArgs']]]]] = None,
                 gui_dhcp_advanced: Optional[pulumi.Input[str]] = None,
                 gui_dlp: Optional[pulumi.Input[str]] = None,
                 gui_dlp_profile: Optional[pulumi.Input[str]] = None,
                 gui_dns_database: Optional[pulumi.Input[str]] = None,
                 gui_dnsfilter: Optional[pulumi.Input[str]] = None,
                 gui_domain_ip_reputation: Optional[pulumi.Input[str]] = None,
                 gui_dos_policy: Optional[pulumi.Input[str]] = None,
                 gui_dynamic_device_os_id: Optional[pulumi.Input[str]] = None,
                 gui_dynamic_profile_display: Optional[pulumi.Input[str]] = None,
                 gui_dynamic_routing: Optional[pulumi.Input[str]] = None,
                 gui_email_collection: Optional[pulumi.Input[str]] = None,
                 gui_endpoint_control: Optional[pulumi.Input[str]] = None,
                 gui_endpoint_control_advanced: Optional[pulumi.Input[str]] = None,
                 gui_enforce_change_summary: Optional[pulumi.Input[str]] = None,
                 gui_explicit_proxy: Optional[pulumi.Input[str]] = None,
                 gui_file_filter: Optional[pulumi.Input[str]] = None,
                 gui_fortiap_split_tunneling: Optional[pulumi.Input[str]] = None,
                 gui_fortiextender_controller: Optional[pulumi.Input[str]] = None,
                 gui_icap: Optional[pulumi.Input[str]] = None,
                 gui_implicit_policy: Optional[pulumi.Input[str]] = None,
                 gui_ips: Optional[pulumi.Input[str]] = None,
                 gui_load_balance: Optional[pulumi.Input[str]] = None,
                 gui_local_in_policy: Optional[pulumi.Input[str]] = None,
                 gui_local_reports: Optional[pulumi.Input[str]] = None,
                 gui_multicast_policy: Optional[pulumi.Input[str]] = None,
                 gui_multiple_interface_policy: Optional[pulumi.Input[str]] = None,
                 gui_multiple_utm_profiles: Optional[pulumi.Input[str]] = None,
                 gui_nat4664: Optional[pulumi.Input[str]] = None,
                 gui_object_colors: Optional[pulumi.Input[str]] = None,
                 gui_ot: Optional[pulumi.Input[str]] = None,
                 gui_per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 gui_policy_based_ipsec: Optional[pulumi.Input[str]] = None,
                 gui_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 gui_policy_learning: Optional[pulumi.Input[str]] = None,
                 gui_proxy_inspection: Optional[pulumi.Input[str]] = None,
                 gui_replacement_message_groups: Optional[pulumi.Input[str]] = None,
                 gui_route_tag_address_creation: Optional[pulumi.Input[str]] = None,
                 gui_security_profile_group: Optional[pulumi.Input[str]] = None,
                 gui_spamfilter: Optional[pulumi.Input[str]] = None,
                 gui_sslvpn: Optional[pulumi.Input[str]] = None,
                 gui_sslvpn_personal_bookmarks: Optional[pulumi.Input[str]] = None,
                 gui_sslvpn_realms: Optional[pulumi.Input[str]] = None,
                 gui_switch_controller: Optional[pulumi.Input[str]] = None,
                 gui_threat_weight: Optional[pulumi.Input[str]] = None,
                 gui_traffic_shaping: Optional[pulumi.Input[str]] = None,
                 gui_videofilter: Optional[pulumi.Input[str]] = None,
                 gui_virtual_patch_profile: Optional[pulumi.Input[str]] = None,
                 gui_voip_profile: Optional[pulumi.Input[str]] = None,
                 gui_vpn: Optional[pulumi.Input[str]] = None,
                 gui_waf_profile: Optional[pulumi.Input[str]] = None,
                 gui_wan_load_balancing: Optional[pulumi.Input[str]] = None,
                 gui_wanopt_cache: Optional[pulumi.Input[str]] = None,
                 gui_webfilter: Optional[pulumi.Input[str]] = None,
                 gui_webfilter_advanced: Optional[pulumi.Input[str]] = None,
                 gui_wireless_controller: Optional[pulumi.Input[str]] = None,
                 gui_ztna: Optional[pulumi.Input[str]] = None,
                 h323_direct_model: Optional[pulumi.Input[str]] = None,
                 http_external_dest: Optional[pulumi.Input[str]] = None,
                 ike_dn_format: Optional[pulumi.Input[str]] = None,
                 ike_natt_port: Optional[pulumi.Input[int]] = None,
                 ike_policy_route: Optional[pulumi.Input[str]] = None,
                 ike_port: Optional[pulumi.Input[int]] = None,
                 ike_quick_crash_detect: Optional[pulumi.Input[str]] = None,
                 ike_session_resume: Optional[pulumi.Input[str]] = None,
                 ike_tcp_port: Optional[pulumi.Input[int]] = None,
                 implicit_allow_dns: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service_database_cache: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ip6: Optional[pulumi.Input[str]] = None,
                 lan_extension_controller_addr: Optional[pulumi.Input[str]] = None,
                 link_down_access: Optional[pulumi.Input[str]] = None,
                 lldp_reception: Optional[pulumi.Input[str]] = None,
                 lldp_transmission: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[str]] = None,
                 mac_ttl: Optional[pulumi.Input[int]] = None,
                 manageip: Optional[pulumi.Input[str]] = None,
                 manageip6: Optional[pulumi.Input[str]] = None,
                 multicast_forward: Optional[pulumi.Input[str]] = None,
                 multicast_skip_policy: Optional[pulumi.Input[str]] = None,
                 multicast_ttl_notchange: Optional[pulumi.Input[str]] = None,
                 nat46_force_ipv4_packet_forwarding: Optional[pulumi.Input[str]] = None,
                 nat46_generate_ipv6_fragment_header: Optional[pulumi.Input[str]] = None,
                 nat64_force_ipv6_packet_forwarding: Optional[pulumi.Input[str]] = None,
                 ngfw_mode: Optional[pulumi.Input[str]] = None,
                 opmode: Optional[pulumi.Input[str]] = None,
                 prp_trailer_action: Optional[pulumi.Input[str]] = None,
                 sccp_port: Optional[pulumi.Input[int]] = None,
                 sctp_session_without_init: Optional[pulumi.Input[str]] = None,
                 ses_denied_traffic: Optional[pulumi.Input[str]] = None,
                 sip_expectation: Optional[pulumi.Input[str]] = None,
                 sip_helper: Optional[pulumi.Input[str]] = None,
                 sip_nat_trace: Optional[pulumi.Input[str]] = None,
                 sip_ssl_port: Optional[pulumi.Input[int]] = None,
                 sip_tcp_port: Optional[pulumi.Input[int]] = None,
                 sip_udp_port: Optional[pulumi.Input[int]] = None,
                 snat_hairpin_traffic: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_src_check: Optional[pulumi.Input[str]] = None,
                 tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
                 utf8_spam_tagging: Optional[pulumi.Input[str]] = None,
                 v4_ecmp_mode: Optional[pulumi.Input[str]] = None,
                 vdom_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpn_stats_log: Optional[pulumi.Input[str]] = None,
                 vpn_stats_period: Optional[pulumi.Input[int]] = None,
                 wccp_cache_engine: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure VDOM settings.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Settings("trname",
            allow_linkdown_path="disable",
            gui_webfilter="enable",
            opmode="nat",
            sip_ssl_port=5061,
            status="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Settings can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/settings:Settings labelname SystemSettings
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/settings:Settings labelname SystemSettings
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allow_linkdown_path: Enable/disable link down path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_subnet_overlap: Enable/disable allowing interface subnets to use overlapping IP addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] application_bandwidth_tracking: Enable/disable application bandwidth tracking. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] asymroute: Enable/disable IPv4 asymmetric routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] asymroute6: Enable/disable asymmetric IPv6 routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] asymroute6_icmp: Enable/disable asymmetric ICMPv6 routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] asymroute_icmp: Enable/disable ICMP asymmetric routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auxiliary_session: Enable/disable auxiliary session. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bfd: Enable/disable Bi-directional Forwarding Detection (BFD) on all interfaces. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bfd_desired_min_tx: BFD desired minimal transmit interval (1 - 100000 ms, default = 50).
        :param pulumi.Input[int] bfd_detect_mult: BFD detection multiplier (1 - 50, default = 3).
        :param pulumi.Input[str] bfd_dont_enforce_src_port: Enable to not enforce verifying the source port of BFD Packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bfd_required_min_rx: BFD required minimal receive interval (1 - 100000 ms, default = 50).
        :param pulumi.Input[str] block_land_attack: Enable/disable blocking of land attacks. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] central_nat: Enable/disable central NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: VDOM comments.
        :param pulumi.Input[str] compliance_check: Enable/disable PCI DSS compliance checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] consolidated_firewall_mode: Consolidated firewall mode.
        :param pulumi.Input[str] default_app_port_as_service: Enable/disable policy service enforcement based on application default ports. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] default_policy_expiry_days: Default policy expiry in days (0 - 365 days, default = 30).
        :param pulumi.Input[str] default_voip_alg_mode: Configure how the FortiGate handles VoIP traffic when a policy that accepts the traffic doesn't include a VoIP profile. Valid values: `proxy-based`, `kernel-helper-based`.
        :param pulumi.Input[str] deny_tcp_with_icmp: Enable/disable denying TCP by sending an ICMP communication prohibited packet. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] detect_unknown_esp: Enable/disable detection of unknown ESP packets (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device: Interface to use for management access for NAT mode.
        :param pulumi.Input[str] dhcp6_server_ip: DHCPv6 server IPv6 address.
        :param pulumi.Input[str] dhcp_proxy: Enable/disable the DHCP Proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp_proxy_interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] dhcp_proxy_interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] dhcp_server_ip: DHCP Server IPv4 address.
        :param pulumi.Input[int] discovered_device_timeout: Timeout for discovered devices (1 - 365 days, default = 28).
        :param pulumi.Input[str] dyn_addr_session_check: Enable/disable dirty session check caused by dynamic address updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] ecmp_max_paths: Maximum number of Equal Cost Multi-Path (ECMP) next-hops. Set to 1 to disable ECMP routing (1 - 100, default = 10).
        :param pulumi.Input[str] email_portal_check_dns: Enable/disable using DNS to validate email addresses collected by a captive portal. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ext_resource_session_check: Enable/disable dirty session check caused by external resource updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] firewall_session_dirty: Select how to manage sessions affected by firewall policy configuration changes. Valid values: `check-all`, `check-new`, `check-policy-option`.
        :param pulumi.Input[str] fqdn_session_check: Enable/disable dirty session check caused by FQDN updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fw_session_hairpin: Enable/disable checking for a matching policy each time hairpin traffic goes through the FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gateway: Transparent mode IPv4 default gateway IP address.
        :param pulumi.Input[str] gateway6: Transparent mode IPv4 default gateway IP address.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] gui_advanced_policy: Enable/disable advanced policy configuration on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_advanced_wireless_features: Enable/disable advanced wireless features in GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_allow_unnamed_policy: Enable/disable the requirement for policy naming on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_antivirus: Enable/disable AntiVirus on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ap_profile: Enable/disable FortiAP profiles on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_application_control: Enable/disable application control on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_casb: Enable/disable Inline-CASB on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsGuiDefaultPolicyColumnArgs']]]] gui_default_policy_columns: Default columns to display for policy lists on GUI. The structure of `gui_default_policy_columns` block is documented below.
        :param pulumi.Input[str] gui_dhcp_advanced: Enable/disable advanced DHCP options on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dlp: Enable/disable DLP on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dlp_profile: Enable/disable Data Leak Prevention on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dns_database: Enable/disable DNS database settings on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dnsfilter: Enable/disable DNS Filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_domain_ip_reputation: Enable/disable Domain and IP Reputation on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dos_policy: Enable/disable DoS policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dynamic_device_os_id: Enable/disable Create dynamic addresses to manage known devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dynamic_profile_display: Enable/disable RADIUS Single Sign On (RSSO) on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dynamic_routing: Enable/disable dynamic routing on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_email_collection: Enable/disable email collection on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_endpoint_control: Enable/disable endpoint control on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_endpoint_control_advanced: Enable/disable advanced endpoint control options on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_enforce_change_summary: Enforce change summaries for select tables in the GUI. Valid values: `disable`, `require`, `optional`.
        :param pulumi.Input[str] gui_explicit_proxy: Enable/disable the explicit proxy on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_file_filter: Enable/disable File-filter on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_fortiap_split_tunneling: Enable/disable FortiAP split tunneling on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_fortiextender_controller: Enable/disable FortiExtender on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_icap: Enable/disable ICAP on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_implicit_policy: Enable/disable implicit firewall policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ips: Enable/disable IPS on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_load_balance: Enable/disable server load balancing on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_local_in_policy: Enable/disable Local-In policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_local_reports: Enable/disable local reports on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_multicast_policy: Enable/disable multicast firewall policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_multiple_interface_policy: Enable/disable adding multiple interfaces to a policy on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_multiple_utm_profiles: Enable/disable multiple UTM profiles on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_nat4664: Enable/disable NAT46 and NAT64 settings on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_object_colors: Enable/disable object colors on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ot: Enable/disable Show Operational Technology Purdue Model. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_per_policy_disclaimer: Enable/disable policy disclaimer on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_policy_based_ipsec: Enable/disable policy-based IPsec VPN on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_policy_disclaimer: Enable/disable policy disclaimer on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_policy_learning: Enable/disable firewall policy learning mode on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_proxy_inspection: Enable/disable the proxy features on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_replacement_message_groups: Enable/disable replacement message groups on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_route_tag_address_creation: Enable/disable route-tag addresses on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_security_profile_group: Enable/disable Security Profile Groups on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_spamfilter: Enable/disable Antispam on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_sslvpn: Enable/disable SSL-VPN settings pages on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_sslvpn_personal_bookmarks: Enable/disable SSL-VPN personal bookmark management on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_sslvpn_realms: Enable/disable SSL-VPN realms on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_switch_controller: Enable/disable the switch controller on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_threat_weight: Enable/disable threat weight on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_traffic_shaping: Enable/disable traffic shaping on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_videofilter: Enable/disable Video filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_virtual_patch_profile: Enable/disable Virtual Patching on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_voip_profile: Enable/disable VoIP profiles on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_vpn: Enable/disable VPN tunnels on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_waf_profile: Enable/disable Web Application Firewall on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_wan_load_balancing: Enable/disable SD-WAN on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_wanopt_cache: Enable/disable WAN Optimization and Web Caching on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_webfilter: Enable/disable Web filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_webfilter_advanced: Enable/disable advanced web filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_wireless_controller: Enable/disable the wireless controller on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ztna: Enable/disable Zero Trust Network Access features on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] h323_direct_model: Enable/disable H323 direct model. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] http_external_dest: Offload HTTP traffic to FortiWeb or FortiCache. Valid values: `fortiweb`, `forticache`.
        :param pulumi.Input[str] ike_dn_format: Configure IKE ASN.1 Distinguished Name format conventions. Valid values: `with-space`, `no-space`.
        :param pulumi.Input[int] ike_natt_port: UDP port for IKE/IPsec traffic in NAT-T mode (default 4500).
        :param pulumi.Input[str] ike_policy_route: Enable/disable IKE Policy Based Routing (PBR). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ike_port: UDP port for IKE/IPsec traffic (default 500).
        :param pulumi.Input[str] ike_quick_crash_detect: Enable/disable IKE quick crash detection (RFC 6290). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ike_session_resume: Enable/disable IKEv2 session resumption (RFC 5723). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ike_tcp_port: TCP port for IKE/IPsec traffic (default 4500).
        :param pulumi.Input[str] implicit_allow_dns: Enable/disable implicitly allowing DNS traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] inspection_mode: Inspection mode (proxy-based or flow-based). Valid values: `proxy`, `flow`.
        :param pulumi.Input[str] internet_service_database_cache: Enable/disable Internet Service database caching. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ip: IP address and netmask.
        :param pulumi.Input[str] ip6: IPv6 address prefix for NAT mode.
        :param pulumi.Input[str] lan_extension_controller_addr: Controller IP address or FQDN to connect.
        :param pulumi.Input[str] link_down_access: Enable/disable link down access traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lldp_reception: Enable/disable Link Layer Discovery Protocol (LLDP) reception for this VDOM or apply global settings to this VDOM. Valid values: `enable`, `disable`, `global`.
        :param pulumi.Input[str] lldp_transmission: Enable/disable Link Layer Discovery Protocol (LLDP) transmission for this VDOM or apply global settings to this VDOM. Valid values: `enable`, `disable`, `global`.
        :param pulumi.Input[str] location_id: Local location ID in the form of an IPv4 address.
        :param pulumi.Input[int] mac_ttl: Duration of MAC addresses in Transparent mode (300 - 8640000 sec, default = 300).
        :param pulumi.Input[str] manageip: Transparent mode IPv4 management IP address and netmask.
        :param pulumi.Input[str] manageip6: Transparent mode IPv6 management IP address and netmask.
        :param pulumi.Input[str] multicast_forward: Enable/disable multicast forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] multicast_skip_policy: Enable/disable allowing multicast traffic through the FortiGate without a policy check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] multicast_ttl_notchange: Enable/disable preventing the FortiGate from changing the TTL for forwarded multicast packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat46_force_ipv4_packet_forwarding: Enable/disable mandatory IPv4 packet forwarding in NAT46. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat46_generate_ipv6_fragment_header: Enable/disable NAT46 IPv6 fragment header generation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat64_force_ipv6_packet_forwarding: Enable/disable mandatory IPv6 packet forwarding in NAT64. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ngfw_mode: Next Generation Firewall (NGFW) mode. Valid values: `profile-based`, `policy-based`.
        :param pulumi.Input[str] opmode: Firewall operation mode (NAT or Transparent). Valid values: `nat`, `transparent`.
        :param pulumi.Input[str] prp_trailer_action: Enable/disable action to take on PRP trailer. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] sccp_port: TCP port the SCCP proxy monitors for SCCP traffic (0 - 65535, default = 2000).
        :param pulumi.Input[str] sctp_session_without_init: Enable/disable SCTP session creation without SCTP INIT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ses_denied_traffic: Enable/disable including denied session in the session table. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sip_expectation: Enable/disable the SIP kernel session helper to create an expectation for port 5060. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sip_helper: Enable/disable the SIP session helper to process SIP sessions unless SIP sessions are accepted by the SIP application layer gateway (ALG). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sip_nat_trace: Enable/disable recording the original SIP source IP address when NAT is used. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] sip_ssl_port: TCP port the SIP proxy monitors for SIP SSL/TLS traffic (0 - 65535, default = 5061).
        :param pulumi.Input[int] sip_tcp_port: TCP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
        :param pulumi.Input[int] sip_udp_port: UDP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
        :param pulumi.Input[str] snat_hairpin_traffic: Enable/disable source NAT (SNAT) for hairpin traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_ssh_profile: Profile for SSL/SSH inspection.
        :param pulumi.Input[str] status: Enable/disable this VDOM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_src_check: Enable/disable strict source verification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tcp_session_without_syn: Enable/disable allowing TCP session without SYN flags. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] utf8_spam_tagging: Enable/disable converting antispam tags to UTF-8 for better non-ASCII character support. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] v4_ecmp_mode: IPv4 Equal-cost multi-path (ECMP) routing and load balancing mode. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`.
        :param pulumi.Input[str] vdom_type: VDOM type (traffic or admin).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vpn_stats_log: Enable/disable periodic VPN log statistics for one or more types of VPN. Separate names with a space. Valid values: `ipsec`, `pptp`, `l2tp`, `ssl`.
        :param pulumi.Input[int] vpn_stats_period: Period to send VPN log statistics (0 or 60 - 86400 sec).
        :param pulumi.Input[str] wccp_cache_engine: Enable/disable WCCP cache engine. Valid values: `enable`, `disable`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure VDOM settings.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Settings("trname",
            allow_linkdown_path="disable",
            gui_webfilter="enable",
            opmode="nat",
            sip_ssl_port=5061,
            status="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Settings can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/settings:Settings labelname SystemSettings
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/settings:Settings labelname SystemSettings
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_linkdown_path: Optional[pulumi.Input[str]] = None,
                 allow_subnet_overlap: Optional[pulumi.Input[str]] = None,
                 application_bandwidth_tracking: Optional[pulumi.Input[str]] = None,
                 asymroute: Optional[pulumi.Input[str]] = None,
                 asymroute6: Optional[pulumi.Input[str]] = None,
                 asymroute6_icmp: Optional[pulumi.Input[str]] = None,
                 asymroute_icmp: Optional[pulumi.Input[str]] = None,
                 auxiliary_session: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 bfd_desired_min_tx: Optional[pulumi.Input[int]] = None,
                 bfd_detect_mult: Optional[pulumi.Input[int]] = None,
                 bfd_dont_enforce_src_port: Optional[pulumi.Input[str]] = None,
                 bfd_required_min_rx: Optional[pulumi.Input[int]] = None,
                 block_land_attack: Optional[pulumi.Input[str]] = None,
                 central_nat: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 compliance_check: Optional[pulumi.Input[str]] = None,
                 consolidated_firewall_mode: Optional[pulumi.Input[str]] = None,
                 default_app_port_as_service: Optional[pulumi.Input[str]] = None,
                 default_policy_expiry_days: Optional[pulumi.Input[int]] = None,
                 default_voip_alg_mode: Optional[pulumi.Input[str]] = None,
                 deny_tcp_with_icmp: Optional[pulumi.Input[str]] = None,
                 detect_unknown_esp: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dhcp6_server_ip: Optional[pulumi.Input[str]] = None,
                 dhcp_proxy: Optional[pulumi.Input[str]] = None,
                 dhcp_proxy_interface: Optional[pulumi.Input[str]] = None,
                 dhcp_proxy_interface_select_method: Optional[pulumi.Input[str]] = None,
                 dhcp_server_ip: Optional[pulumi.Input[str]] = None,
                 discovered_device_timeout: Optional[pulumi.Input[int]] = None,
                 dyn_addr_session_check: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ecmp_max_paths: Optional[pulumi.Input[int]] = None,
                 email_portal_check_dns: Optional[pulumi.Input[str]] = None,
                 ext_resource_session_check: Optional[pulumi.Input[str]] = None,
                 firewall_session_dirty: Optional[pulumi.Input[str]] = None,
                 fqdn_session_check: Optional[pulumi.Input[str]] = None,
                 fw_session_hairpin: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gui_advanced_policy: Optional[pulumi.Input[str]] = None,
                 gui_advanced_wireless_features: Optional[pulumi.Input[str]] = None,
                 gui_allow_unnamed_policy: Optional[pulumi.Input[str]] = None,
                 gui_antivirus: Optional[pulumi.Input[str]] = None,
                 gui_ap_profile: Optional[pulumi.Input[str]] = None,
                 gui_application_control: Optional[pulumi.Input[str]] = None,
                 gui_casb: Optional[pulumi.Input[str]] = None,
                 gui_default_policy_columns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsGuiDefaultPolicyColumnArgs']]]]] = None,
                 gui_dhcp_advanced: Optional[pulumi.Input[str]] = None,
                 gui_dlp: Optional[pulumi.Input[str]] = None,
                 gui_dlp_profile: Optional[pulumi.Input[str]] = None,
                 gui_dns_database: Optional[pulumi.Input[str]] = None,
                 gui_dnsfilter: Optional[pulumi.Input[str]] = None,
                 gui_domain_ip_reputation: Optional[pulumi.Input[str]] = None,
                 gui_dos_policy: Optional[pulumi.Input[str]] = None,
                 gui_dynamic_device_os_id: Optional[pulumi.Input[str]] = None,
                 gui_dynamic_profile_display: Optional[pulumi.Input[str]] = None,
                 gui_dynamic_routing: Optional[pulumi.Input[str]] = None,
                 gui_email_collection: Optional[pulumi.Input[str]] = None,
                 gui_endpoint_control: Optional[pulumi.Input[str]] = None,
                 gui_endpoint_control_advanced: Optional[pulumi.Input[str]] = None,
                 gui_enforce_change_summary: Optional[pulumi.Input[str]] = None,
                 gui_explicit_proxy: Optional[pulumi.Input[str]] = None,
                 gui_file_filter: Optional[pulumi.Input[str]] = None,
                 gui_fortiap_split_tunneling: Optional[pulumi.Input[str]] = None,
                 gui_fortiextender_controller: Optional[pulumi.Input[str]] = None,
                 gui_icap: Optional[pulumi.Input[str]] = None,
                 gui_implicit_policy: Optional[pulumi.Input[str]] = None,
                 gui_ips: Optional[pulumi.Input[str]] = None,
                 gui_load_balance: Optional[pulumi.Input[str]] = None,
                 gui_local_in_policy: Optional[pulumi.Input[str]] = None,
                 gui_local_reports: Optional[pulumi.Input[str]] = None,
                 gui_multicast_policy: Optional[pulumi.Input[str]] = None,
                 gui_multiple_interface_policy: Optional[pulumi.Input[str]] = None,
                 gui_multiple_utm_profiles: Optional[pulumi.Input[str]] = None,
                 gui_nat4664: Optional[pulumi.Input[str]] = None,
                 gui_object_colors: Optional[pulumi.Input[str]] = None,
                 gui_ot: Optional[pulumi.Input[str]] = None,
                 gui_per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 gui_policy_based_ipsec: Optional[pulumi.Input[str]] = None,
                 gui_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 gui_policy_learning: Optional[pulumi.Input[str]] = None,
                 gui_proxy_inspection: Optional[pulumi.Input[str]] = None,
                 gui_replacement_message_groups: Optional[pulumi.Input[str]] = None,
                 gui_route_tag_address_creation: Optional[pulumi.Input[str]] = None,
                 gui_security_profile_group: Optional[pulumi.Input[str]] = None,
                 gui_spamfilter: Optional[pulumi.Input[str]] = None,
                 gui_sslvpn: Optional[pulumi.Input[str]] = None,
                 gui_sslvpn_personal_bookmarks: Optional[pulumi.Input[str]] = None,
                 gui_sslvpn_realms: Optional[pulumi.Input[str]] = None,
                 gui_switch_controller: Optional[pulumi.Input[str]] = None,
                 gui_threat_weight: Optional[pulumi.Input[str]] = None,
                 gui_traffic_shaping: Optional[pulumi.Input[str]] = None,
                 gui_videofilter: Optional[pulumi.Input[str]] = None,
                 gui_virtual_patch_profile: Optional[pulumi.Input[str]] = None,
                 gui_voip_profile: Optional[pulumi.Input[str]] = None,
                 gui_vpn: Optional[pulumi.Input[str]] = None,
                 gui_waf_profile: Optional[pulumi.Input[str]] = None,
                 gui_wan_load_balancing: Optional[pulumi.Input[str]] = None,
                 gui_wanopt_cache: Optional[pulumi.Input[str]] = None,
                 gui_webfilter: Optional[pulumi.Input[str]] = None,
                 gui_webfilter_advanced: Optional[pulumi.Input[str]] = None,
                 gui_wireless_controller: Optional[pulumi.Input[str]] = None,
                 gui_ztna: Optional[pulumi.Input[str]] = None,
                 h323_direct_model: Optional[pulumi.Input[str]] = None,
                 http_external_dest: Optional[pulumi.Input[str]] = None,
                 ike_dn_format: Optional[pulumi.Input[str]] = None,
                 ike_natt_port: Optional[pulumi.Input[int]] = None,
                 ike_policy_route: Optional[pulumi.Input[str]] = None,
                 ike_port: Optional[pulumi.Input[int]] = None,
                 ike_quick_crash_detect: Optional[pulumi.Input[str]] = None,
                 ike_session_resume: Optional[pulumi.Input[str]] = None,
                 ike_tcp_port: Optional[pulumi.Input[int]] = None,
                 implicit_allow_dns: Optional[pulumi.Input[str]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 internet_service_database_cache: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ip6: Optional[pulumi.Input[str]] = None,
                 lan_extension_controller_addr: Optional[pulumi.Input[str]] = None,
                 link_down_access: Optional[pulumi.Input[str]] = None,
                 lldp_reception: Optional[pulumi.Input[str]] = None,
                 lldp_transmission: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[str]] = None,
                 mac_ttl: Optional[pulumi.Input[int]] = None,
                 manageip: Optional[pulumi.Input[str]] = None,
                 manageip6: Optional[pulumi.Input[str]] = None,
                 multicast_forward: Optional[pulumi.Input[str]] = None,
                 multicast_skip_policy: Optional[pulumi.Input[str]] = None,
                 multicast_ttl_notchange: Optional[pulumi.Input[str]] = None,
                 nat46_force_ipv4_packet_forwarding: Optional[pulumi.Input[str]] = None,
                 nat46_generate_ipv6_fragment_header: Optional[pulumi.Input[str]] = None,
                 nat64_force_ipv6_packet_forwarding: Optional[pulumi.Input[str]] = None,
                 ngfw_mode: Optional[pulumi.Input[str]] = None,
                 opmode: Optional[pulumi.Input[str]] = None,
                 prp_trailer_action: Optional[pulumi.Input[str]] = None,
                 sccp_port: Optional[pulumi.Input[int]] = None,
                 sctp_session_without_init: Optional[pulumi.Input[str]] = None,
                 ses_denied_traffic: Optional[pulumi.Input[str]] = None,
                 sip_expectation: Optional[pulumi.Input[str]] = None,
                 sip_helper: Optional[pulumi.Input[str]] = None,
                 sip_nat_trace: Optional[pulumi.Input[str]] = None,
                 sip_ssl_port: Optional[pulumi.Input[int]] = None,
                 sip_tcp_port: Optional[pulumi.Input[int]] = None,
                 sip_udp_port: Optional[pulumi.Input[int]] = None,
                 snat_hairpin_traffic: Optional[pulumi.Input[str]] = None,
                 ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_src_check: Optional[pulumi.Input[str]] = None,
                 tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
                 utf8_spam_tagging: Optional[pulumi.Input[str]] = None,
                 v4_ecmp_mode: Optional[pulumi.Input[str]] = None,
                 vdom_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpn_stats_log: Optional[pulumi.Input[str]] = None,
                 vpn_stats_period: Optional[pulumi.Input[int]] = None,
                 wccp_cache_engine: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingsArgs.__new__(SettingsArgs)

            __props__.__dict__["allow_linkdown_path"] = allow_linkdown_path
            __props__.__dict__["allow_subnet_overlap"] = allow_subnet_overlap
            __props__.__dict__["application_bandwidth_tracking"] = application_bandwidth_tracking
            __props__.__dict__["asymroute"] = asymroute
            __props__.__dict__["asymroute6"] = asymroute6
            __props__.__dict__["asymroute6_icmp"] = asymroute6_icmp
            __props__.__dict__["asymroute_icmp"] = asymroute_icmp
            __props__.__dict__["auxiliary_session"] = auxiliary_session
            __props__.__dict__["bfd"] = bfd
            __props__.__dict__["bfd_desired_min_tx"] = bfd_desired_min_tx
            __props__.__dict__["bfd_detect_mult"] = bfd_detect_mult
            __props__.__dict__["bfd_dont_enforce_src_port"] = bfd_dont_enforce_src_port
            __props__.__dict__["bfd_required_min_rx"] = bfd_required_min_rx
            __props__.__dict__["block_land_attack"] = block_land_attack
            __props__.__dict__["central_nat"] = central_nat
            __props__.__dict__["comments"] = comments
            __props__.__dict__["compliance_check"] = compliance_check
            __props__.__dict__["consolidated_firewall_mode"] = consolidated_firewall_mode
            __props__.__dict__["default_app_port_as_service"] = default_app_port_as_service
            __props__.__dict__["default_policy_expiry_days"] = default_policy_expiry_days
            __props__.__dict__["default_voip_alg_mode"] = default_voip_alg_mode
            __props__.__dict__["deny_tcp_with_icmp"] = deny_tcp_with_icmp
            __props__.__dict__["detect_unknown_esp"] = detect_unknown_esp
            __props__.__dict__["device"] = device
            __props__.__dict__["dhcp6_server_ip"] = dhcp6_server_ip
            __props__.__dict__["dhcp_proxy"] = dhcp_proxy
            __props__.__dict__["dhcp_proxy_interface"] = dhcp_proxy_interface
            __props__.__dict__["dhcp_proxy_interface_select_method"] = dhcp_proxy_interface_select_method
            __props__.__dict__["dhcp_server_ip"] = dhcp_server_ip
            __props__.__dict__["discovered_device_timeout"] = discovered_device_timeout
            __props__.__dict__["dyn_addr_session_check"] = dyn_addr_session_check
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["ecmp_max_paths"] = ecmp_max_paths
            __props__.__dict__["email_portal_check_dns"] = email_portal_check_dns
            __props__.__dict__["ext_resource_session_check"] = ext_resource_session_check
            __props__.__dict__["firewall_session_dirty"] = firewall_session_dirty
            __props__.__dict__["fqdn_session_check"] = fqdn_session_check
            __props__.__dict__["fw_session_hairpin"] = fw_session_hairpin
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["gateway6"] = gateway6
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["gui_advanced_policy"] = gui_advanced_policy
            __props__.__dict__["gui_advanced_wireless_features"] = gui_advanced_wireless_features
            __props__.__dict__["gui_allow_unnamed_policy"] = gui_allow_unnamed_policy
            __props__.__dict__["gui_antivirus"] = gui_antivirus
            __props__.__dict__["gui_ap_profile"] = gui_ap_profile
            __props__.__dict__["gui_application_control"] = gui_application_control
            __props__.__dict__["gui_casb"] = gui_casb
            __props__.__dict__["gui_default_policy_columns"] = gui_default_policy_columns
            __props__.__dict__["gui_dhcp_advanced"] = gui_dhcp_advanced
            __props__.__dict__["gui_dlp"] = gui_dlp
            __props__.__dict__["gui_dlp_profile"] = gui_dlp_profile
            __props__.__dict__["gui_dns_database"] = gui_dns_database
            __props__.__dict__["gui_dnsfilter"] = gui_dnsfilter
            __props__.__dict__["gui_domain_ip_reputation"] = gui_domain_ip_reputation
            __props__.__dict__["gui_dos_policy"] = gui_dos_policy
            __props__.__dict__["gui_dynamic_device_os_id"] = gui_dynamic_device_os_id
            __props__.__dict__["gui_dynamic_profile_display"] = gui_dynamic_profile_display
            __props__.__dict__["gui_dynamic_routing"] = gui_dynamic_routing
            __props__.__dict__["gui_email_collection"] = gui_email_collection
            __props__.__dict__["gui_endpoint_control"] = gui_endpoint_control
            __props__.__dict__["gui_endpoint_control_advanced"] = gui_endpoint_control_advanced
            __props__.__dict__["gui_enforce_change_summary"] = gui_enforce_change_summary
            __props__.__dict__["gui_explicit_proxy"] = gui_explicit_proxy
            __props__.__dict__["gui_file_filter"] = gui_file_filter
            __props__.__dict__["gui_fortiap_split_tunneling"] = gui_fortiap_split_tunneling
            __props__.__dict__["gui_fortiextender_controller"] = gui_fortiextender_controller
            __props__.__dict__["gui_icap"] = gui_icap
            __props__.__dict__["gui_implicit_policy"] = gui_implicit_policy
            __props__.__dict__["gui_ips"] = gui_ips
            __props__.__dict__["gui_load_balance"] = gui_load_balance
            __props__.__dict__["gui_local_in_policy"] = gui_local_in_policy
            __props__.__dict__["gui_local_reports"] = gui_local_reports
            __props__.__dict__["gui_multicast_policy"] = gui_multicast_policy
            __props__.__dict__["gui_multiple_interface_policy"] = gui_multiple_interface_policy
            __props__.__dict__["gui_multiple_utm_profiles"] = gui_multiple_utm_profiles
            __props__.__dict__["gui_nat4664"] = gui_nat4664
            __props__.__dict__["gui_object_colors"] = gui_object_colors
            __props__.__dict__["gui_ot"] = gui_ot
            __props__.__dict__["gui_per_policy_disclaimer"] = gui_per_policy_disclaimer
            __props__.__dict__["gui_policy_based_ipsec"] = gui_policy_based_ipsec
            __props__.__dict__["gui_policy_disclaimer"] = gui_policy_disclaimer
            __props__.__dict__["gui_policy_learning"] = gui_policy_learning
            __props__.__dict__["gui_proxy_inspection"] = gui_proxy_inspection
            __props__.__dict__["gui_replacement_message_groups"] = gui_replacement_message_groups
            __props__.__dict__["gui_route_tag_address_creation"] = gui_route_tag_address_creation
            __props__.__dict__["gui_security_profile_group"] = gui_security_profile_group
            __props__.__dict__["gui_spamfilter"] = gui_spamfilter
            __props__.__dict__["gui_sslvpn"] = gui_sslvpn
            __props__.__dict__["gui_sslvpn_personal_bookmarks"] = gui_sslvpn_personal_bookmarks
            __props__.__dict__["gui_sslvpn_realms"] = gui_sslvpn_realms
            __props__.__dict__["gui_switch_controller"] = gui_switch_controller
            __props__.__dict__["gui_threat_weight"] = gui_threat_weight
            __props__.__dict__["gui_traffic_shaping"] = gui_traffic_shaping
            __props__.__dict__["gui_videofilter"] = gui_videofilter
            __props__.__dict__["gui_virtual_patch_profile"] = gui_virtual_patch_profile
            __props__.__dict__["gui_voip_profile"] = gui_voip_profile
            __props__.__dict__["gui_vpn"] = gui_vpn
            __props__.__dict__["gui_waf_profile"] = gui_waf_profile
            __props__.__dict__["gui_wan_load_balancing"] = gui_wan_load_balancing
            __props__.__dict__["gui_wanopt_cache"] = gui_wanopt_cache
            __props__.__dict__["gui_webfilter"] = gui_webfilter
            __props__.__dict__["gui_webfilter_advanced"] = gui_webfilter_advanced
            __props__.__dict__["gui_wireless_controller"] = gui_wireless_controller
            __props__.__dict__["gui_ztna"] = gui_ztna
            __props__.__dict__["h323_direct_model"] = h323_direct_model
            __props__.__dict__["http_external_dest"] = http_external_dest
            __props__.__dict__["ike_dn_format"] = ike_dn_format
            __props__.__dict__["ike_natt_port"] = ike_natt_port
            __props__.__dict__["ike_policy_route"] = ike_policy_route
            __props__.__dict__["ike_port"] = ike_port
            __props__.__dict__["ike_quick_crash_detect"] = ike_quick_crash_detect
            __props__.__dict__["ike_session_resume"] = ike_session_resume
            __props__.__dict__["ike_tcp_port"] = ike_tcp_port
            __props__.__dict__["implicit_allow_dns"] = implicit_allow_dns
            __props__.__dict__["inspection_mode"] = inspection_mode
            __props__.__dict__["internet_service_database_cache"] = internet_service_database_cache
            __props__.__dict__["ip"] = ip
            __props__.__dict__["ip6"] = ip6
            __props__.__dict__["lan_extension_controller_addr"] = lan_extension_controller_addr
            __props__.__dict__["link_down_access"] = link_down_access
            __props__.__dict__["lldp_reception"] = lldp_reception
            __props__.__dict__["lldp_transmission"] = lldp_transmission
            __props__.__dict__["location_id"] = location_id
            __props__.__dict__["mac_ttl"] = mac_ttl
            __props__.__dict__["manageip"] = manageip
            __props__.__dict__["manageip6"] = manageip6
            __props__.__dict__["multicast_forward"] = multicast_forward
            __props__.__dict__["multicast_skip_policy"] = multicast_skip_policy
            __props__.__dict__["multicast_ttl_notchange"] = multicast_ttl_notchange
            __props__.__dict__["nat46_force_ipv4_packet_forwarding"] = nat46_force_ipv4_packet_forwarding
            __props__.__dict__["nat46_generate_ipv6_fragment_header"] = nat46_generate_ipv6_fragment_header
            __props__.__dict__["nat64_force_ipv6_packet_forwarding"] = nat64_force_ipv6_packet_forwarding
            __props__.__dict__["ngfw_mode"] = ngfw_mode
            __props__.__dict__["opmode"] = opmode
            __props__.__dict__["prp_trailer_action"] = prp_trailer_action
            __props__.__dict__["sccp_port"] = sccp_port
            __props__.__dict__["sctp_session_without_init"] = sctp_session_without_init
            __props__.__dict__["ses_denied_traffic"] = ses_denied_traffic
            __props__.__dict__["sip_expectation"] = sip_expectation
            __props__.__dict__["sip_helper"] = sip_helper
            __props__.__dict__["sip_nat_trace"] = sip_nat_trace
            __props__.__dict__["sip_ssl_port"] = sip_ssl_port
            __props__.__dict__["sip_tcp_port"] = sip_tcp_port
            __props__.__dict__["sip_udp_port"] = sip_udp_port
            __props__.__dict__["snat_hairpin_traffic"] = snat_hairpin_traffic
            __props__.__dict__["ssl_ssh_profile"] = ssl_ssh_profile
            __props__.__dict__["status"] = status
            __props__.__dict__["strict_src_check"] = strict_src_check
            __props__.__dict__["tcp_session_without_syn"] = tcp_session_without_syn
            __props__.__dict__["utf8_spam_tagging"] = utf8_spam_tagging
            __props__.__dict__["v4_ecmp_mode"] = v4_ecmp_mode
            __props__.__dict__["vdom_type"] = vdom_type
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vpn_stats_log"] = vpn_stats_log
            __props__.__dict__["vpn_stats_period"] = vpn_stats_period
            __props__.__dict__["wccp_cache_engine"] = wccp_cache_engine
        super(Settings, __self__).__init__(
            'fortios:system/settings:Settings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_linkdown_path: Optional[pulumi.Input[str]] = None,
            allow_subnet_overlap: Optional[pulumi.Input[str]] = None,
            application_bandwidth_tracking: Optional[pulumi.Input[str]] = None,
            asymroute: Optional[pulumi.Input[str]] = None,
            asymroute6: Optional[pulumi.Input[str]] = None,
            asymroute6_icmp: Optional[pulumi.Input[str]] = None,
            asymroute_icmp: Optional[pulumi.Input[str]] = None,
            auxiliary_session: Optional[pulumi.Input[str]] = None,
            bfd: Optional[pulumi.Input[str]] = None,
            bfd_desired_min_tx: Optional[pulumi.Input[int]] = None,
            bfd_detect_mult: Optional[pulumi.Input[int]] = None,
            bfd_dont_enforce_src_port: Optional[pulumi.Input[str]] = None,
            bfd_required_min_rx: Optional[pulumi.Input[int]] = None,
            block_land_attack: Optional[pulumi.Input[str]] = None,
            central_nat: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            compliance_check: Optional[pulumi.Input[str]] = None,
            consolidated_firewall_mode: Optional[pulumi.Input[str]] = None,
            default_app_port_as_service: Optional[pulumi.Input[str]] = None,
            default_policy_expiry_days: Optional[pulumi.Input[int]] = None,
            default_voip_alg_mode: Optional[pulumi.Input[str]] = None,
            deny_tcp_with_icmp: Optional[pulumi.Input[str]] = None,
            detect_unknown_esp: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            dhcp6_server_ip: Optional[pulumi.Input[str]] = None,
            dhcp_proxy: Optional[pulumi.Input[str]] = None,
            dhcp_proxy_interface: Optional[pulumi.Input[str]] = None,
            dhcp_proxy_interface_select_method: Optional[pulumi.Input[str]] = None,
            dhcp_server_ip: Optional[pulumi.Input[str]] = None,
            discovered_device_timeout: Optional[pulumi.Input[int]] = None,
            dyn_addr_session_check: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            ecmp_max_paths: Optional[pulumi.Input[int]] = None,
            email_portal_check_dns: Optional[pulumi.Input[str]] = None,
            ext_resource_session_check: Optional[pulumi.Input[str]] = None,
            firewall_session_dirty: Optional[pulumi.Input[str]] = None,
            fqdn_session_check: Optional[pulumi.Input[str]] = None,
            fw_session_hairpin: Optional[pulumi.Input[str]] = None,
            gateway: Optional[pulumi.Input[str]] = None,
            gateway6: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            gui_advanced_policy: Optional[pulumi.Input[str]] = None,
            gui_advanced_wireless_features: Optional[pulumi.Input[str]] = None,
            gui_allow_unnamed_policy: Optional[pulumi.Input[str]] = None,
            gui_antivirus: Optional[pulumi.Input[str]] = None,
            gui_ap_profile: Optional[pulumi.Input[str]] = None,
            gui_application_control: Optional[pulumi.Input[str]] = None,
            gui_casb: Optional[pulumi.Input[str]] = None,
            gui_default_policy_columns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsGuiDefaultPolicyColumnArgs']]]]] = None,
            gui_dhcp_advanced: Optional[pulumi.Input[str]] = None,
            gui_dlp: Optional[pulumi.Input[str]] = None,
            gui_dlp_profile: Optional[pulumi.Input[str]] = None,
            gui_dns_database: Optional[pulumi.Input[str]] = None,
            gui_dnsfilter: Optional[pulumi.Input[str]] = None,
            gui_domain_ip_reputation: Optional[pulumi.Input[str]] = None,
            gui_dos_policy: Optional[pulumi.Input[str]] = None,
            gui_dynamic_device_os_id: Optional[pulumi.Input[str]] = None,
            gui_dynamic_profile_display: Optional[pulumi.Input[str]] = None,
            gui_dynamic_routing: Optional[pulumi.Input[str]] = None,
            gui_email_collection: Optional[pulumi.Input[str]] = None,
            gui_endpoint_control: Optional[pulumi.Input[str]] = None,
            gui_endpoint_control_advanced: Optional[pulumi.Input[str]] = None,
            gui_enforce_change_summary: Optional[pulumi.Input[str]] = None,
            gui_explicit_proxy: Optional[pulumi.Input[str]] = None,
            gui_file_filter: Optional[pulumi.Input[str]] = None,
            gui_fortiap_split_tunneling: Optional[pulumi.Input[str]] = None,
            gui_fortiextender_controller: Optional[pulumi.Input[str]] = None,
            gui_icap: Optional[pulumi.Input[str]] = None,
            gui_implicit_policy: Optional[pulumi.Input[str]] = None,
            gui_ips: Optional[pulumi.Input[str]] = None,
            gui_load_balance: Optional[pulumi.Input[str]] = None,
            gui_local_in_policy: Optional[pulumi.Input[str]] = None,
            gui_local_reports: Optional[pulumi.Input[str]] = None,
            gui_multicast_policy: Optional[pulumi.Input[str]] = None,
            gui_multiple_interface_policy: Optional[pulumi.Input[str]] = None,
            gui_multiple_utm_profiles: Optional[pulumi.Input[str]] = None,
            gui_nat4664: Optional[pulumi.Input[str]] = None,
            gui_object_colors: Optional[pulumi.Input[str]] = None,
            gui_ot: Optional[pulumi.Input[str]] = None,
            gui_per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
            gui_policy_based_ipsec: Optional[pulumi.Input[str]] = None,
            gui_policy_disclaimer: Optional[pulumi.Input[str]] = None,
            gui_policy_learning: Optional[pulumi.Input[str]] = None,
            gui_proxy_inspection: Optional[pulumi.Input[str]] = None,
            gui_replacement_message_groups: Optional[pulumi.Input[str]] = None,
            gui_route_tag_address_creation: Optional[pulumi.Input[str]] = None,
            gui_security_profile_group: Optional[pulumi.Input[str]] = None,
            gui_spamfilter: Optional[pulumi.Input[str]] = None,
            gui_sslvpn: Optional[pulumi.Input[str]] = None,
            gui_sslvpn_personal_bookmarks: Optional[pulumi.Input[str]] = None,
            gui_sslvpn_realms: Optional[pulumi.Input[str]] = None,
            gui_switch_controller: Optional[pulumi.Input[str]] = None,
            gui_threat_weight: Optional[pulumi.Input[str]] = None,
            gui_traffic_shaping: Optional[pulumi.Input[str]] = None,
            gui_videofilter: Optional[pulumi.Input[str]] = None,
            gui_virtual_patch_profile: Optional[pulumi.Input[str]] = None,
            gui_voip_profile: Optional[pulumi.Input[str]] = None,
            gui_vpn: Optional[pulumi.Input[str]] = None,
            gui_waf_profile: Optional[pulumi.Input[str]] = None,
            gui_wan_load_balancing: Optional[pulumi.Input[str]] = None,
            gui_wanopt_cache: Optional[pulumi.Input[str]] = None,
            gui_webfilter: Optional[pulumi.Input[str]] = None,
            gui_webfilter_advanced: Optional[pulumi.Input[str]] = None,
            gui_wireless_controller: Optional[pulumi.Input[str]] = None,
            gui_ztna: Optional[pulumi.Input[str]] = None,
            h323_direct_model: Optional[pulumi.Input[str]] = None,
            http_external_dest: Optional[pulumi.Input[str]] = None,
            ike_dn_format: Optional[pulumi.Input[str]] = None,
            ike_natt_port: Optional[pulumi.Input[int]] = None,
            ike_policy_route: Optional[pulumi.Input[str]] = None,
            ike_port: Optional[pulumi.Input[int]] = None,
            ike_quick_crash_detect: Optional[pulumi.Input[str]] = None,
            ike_session_resume: Optional[pulumi.Input[str]] = None,
            ike_tcp_port: Optional[pulumi.Input[int]] = None,
            implicit_allow_dns: Optional[pulumi.Input[str]] = None,
            inspection_mode: Optional[pulumi.Input[str]] = None,
            internet_service_database_cache: Optional[pulumi.Input[str]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            ip6: Optional[pulumi.Input[str]] = None,
            lan_extension_controller_addr: Optional[pulumi.Input[str]] = None,
            link_down_access: Optional[pulumi.Input[str]] = None,
            lldp_reception: Optional[pulumi.Input[str]] = None,
            lldp_transmission: Optional[pulumi.Input[str]] = None,
            location_id: Optional[pulumi.Input[str]] = None,
            mac_ttl: Optional[pulumi.Input[int]] = None,
            manageip: Optional[pulumi.Input[str]] = None,
            manageip6: Optional[pulumi.Input[str]] = None,
            multicast_forward: Optional[pulumi.Input[str]] = None,
            multicast_skip_policy: Optional[pulumi.Input[str]] = None,
            multicast_ttl_notchange: Optional[pulumi.Input[str]] = None,
            nat46_force_ipv4_packet_forwarding: Optional[pulumi.Input[str]] = None,
            nat46_generate_ipv6_fragment_header: Optional[pulumi.Input[str]] = None,
            nat64_force_ipv6_packet_forwarding: Optional[pulumi.Input[str]] = None,
            ngfw_mode: Optional[pulumi.Input[str]] = None,
            opmode: Optional[pulumi.Input[str]] = None,
            prp_trailer_action: Optional[pulumi.Input[str]] = None,
            sccp_port: Optional[pulumi.Input[int]] = None,
            sctp_session_without_init: Optional[pulumi.Input[str]] = None,
            ses_denied_traffic: Optional[pulumi.Input[str]] = None,
            sip_expectation: Optional[pulumi.Input[str]] = None,
            sip_helper: Optional[pulumi.Input[str]] = None,
            sip_nat_trace: Optional[pulumi.Input[str]] = None,
            sip_ssl_port: Optional[pulumi.Input[int]] = None,
            sip_tcp_port: Optional[pulumi.Input[int]] = None,
            sip_udp_port: Optional[pulumi.Input[int]] = None,
            snat_hairpin_traffic: Optional[pulumi.Input[str]] = None,
            ssl_ssh_profile: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            strict_src_check: Optional[pulumi.Input[str]] = None,
            tcp_session_without_syn: Optional[pulumi.Input[str]] = None,
            utf8_spam_tagging: Optional[pulumi.Input[str]] = None,
            v4_ecmp_mode: Optional[pulumi.Input[str]] = None,
            vdom_type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vpn_stats_log: Optional[pulumi.Input[str]] = None,
            vpn_stats_period: Optional[pulumi.Input[int]] = None,
            wccp_cache_engine: Optional[pulumi.Input[str]] = None) -> 'Settings':
        """
        Get an existing Settings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allow_linkdown_path: Enable/disable link down path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_subnet_overlap: Enable/disable allowing interface subnets to use overlapping IP addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] application_bandwidth_tracking: Enable/disable application bandwidth tracking. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] asymroute: Enable/disable IPv4 asymmetric routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] asymroute6: Enable/disable asymmetric IPv6 routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] asymroute6_icmp: Enable/disable asymmetric ICMPv6 routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] asymroute_icmp: Enable/disable ICMP asymmetric routing. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auxiliary_session: Enable/disable auxiliary session. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bfd: Enable/disable Bi-directional Forwarding Detection (BFD) on all interfaces. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bfd_desired_min_tx: BFD desired minimal transmit interval (1 - 100000 ms, default = 50).
        :param pulumi.Input[int] bfd_detect_mult: BFD detection multiplier (1 - 50, default = 3).
        :param pulumi.Input[str] bfd_dont_enforce_src_port: Enable to not enforce verifying the source port of BFD Packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bfd_required_min_rx: BFD required minimal receive interval (1 - 100000 ms, default = 50).
        :param pulumi.Input[str] block_land_attack: Enable/disable blocking of land attacks. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] central_nat: Enable/disable central NAT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: VDOM comments.
        :param pulumi.Input[str] compliance_check: Enable/disable PCI DSS compliance checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] consolidated_firewall_mode: Consolidated firewall mode.
        :param pulumi.Input[str] default_app_port_as_service: Enable/disable policy service enforcement based on application default ports. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] default_policy_expiry_days: Default policy expiry in days (0 - 365 days, default = 30).
        :param pulumi.Input[str] default_voip_alg_mode: Configure how the FortiGate handles VoIP traffic when a policy that accepts the traffic doesn't include a VoIP profile. Valid values: `proxy-based`, `kernel-helper-based`.
        :param pulumi.Input[str] deny_tcp_with_icmp: Enable/disable denying TCP by sending an ICMP communication prohibited packet. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] detect_unknown_esp: Enable/disable detection of unknown ESP packets (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] device: Interface to use for management access for NAT mode.
        :param pulumi.Input[str] dhcp6_server_ip: DHCPv6 server IPv6 address.
        :param pulumi.Input[str] dhcp_proxy: Enable/disable the DHCP Proxy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp_proxy_interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] dhcp_proxy_interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] dhcp_server_ip: DHCP Server IPv4 address.
        :param pulumi.Input[int] discovered_device_timeout: Timeout for discovered devices (1 - 365 days, default = 28).
        :param pulumi.Input[str] dyn_addr_session_check: Enable/disable dirty session check caused by dynamic address updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] ecmp_max_paths: Maximum number of Equal Cost Multi-Path (ECMP) next-hops. Set to 1 to disable ECMP routing (1 - 100, default = 10).
        :param pulumi.Input[str] email_portal_check_dns: Enable/disable using DNS to validate email addresses collected by a captive portal. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ext_resource_session_check: Enable/disable dirty session check caused by external resource updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] firewall_session_dirty: Select how to manage sessions affected by firewall policy configuration changes. Valid values: `check-all`, `check-new`, `check-policy-option`.
        :param pulumi.Input[str] fqdn_session_check: Enable/disable dirty session check caused by FQDN updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fw_session_hairpin: Enable/disable checking for a matching policy each time hairpin traffic goes through the FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gateway: Transparent mode IPv4 default gateway IP address.
        :param pulumi.Input[str] gateway6: Transparent mode IPv4 default gateway IP address.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] gui_advanced_policy: Enable/disable advanced policy configuration on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_advanced_wireless_features: Enable/disable advanced wireless features in GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_allow_unnamed_policy: Enable/disable the requirement for policy naming on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_antivirus: Enable/disable AntiVirus on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ap_profile: Enable/disable FortiAP profiles on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_application_control: Enable/disable application control on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_casb: Enable/disable Inline-CASB on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsGuiDefaultPolicyColumnArgs']]]] gui_default_policy_columns: Default columns to display for policy lists on GUI. The structure of `gui_default_policy_columns` block is documented below.
        :param pulumi.Input[str] gui_dhcp_advanced: Enable/disable advanced DHCP options on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dlp: Enable/disable DLP on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dlp_profile: Enable/disable Data Leak Prevention on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dns_database: Enable/disable DNS database settings on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dnsfilter: Enable/disable DNS Filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_domain_ip_reputation: Enable/disable Domain and IP Reputation on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dos_policy: Enable/disable DoS policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dynamic_device_os_id: Enable/disable Create dynamic addresses to manage known devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dynamic_profile_display: Enable/disable RADIUS Single Sign On (RSSO) on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_dynamic_routing: Enable/disable dynamic routing on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_email_collection: Enable/disable email collection on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_endpoint_control: Enable/disable endpoint control on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_endpoint_control_advanced: Enable/disable advanced endpoint control options on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_enforce_change_summary: Enforce change summaries for select tables in the GUI. Valid values: `disable`, `require`, `optional`.
        :param pulumi.Input[str] gui_explicit_proxy: Enable/disable the explicit proxy on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_file_filter: Enable/disable File-filter on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_fortiap_split_tunneling: Enable/disable FortiAP split tunneling on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_fortiextender_controller: Enable/disable FortiExtender on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_icap: Enable/disable ICAP on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_implicit_policy: Enable/disable implicit firewall policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ips: Enable/disable IPS on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_load_balance: Enable/disable server load balancing on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_local_in_policy: Enable/disable Local-In policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_local_reports: Enable/disable local reports on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_multicast_policy: Enable/disable multicast firewall policies on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_multiple_interface_policy: Enable/disable adding multiple interfaces to a policy on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_multiple_utm_profiles: Enable/disable multiple UTM profiles on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_nat4664: Enable/disable NAT46 and NAT64 settings on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_object_colors: Enable/disable object colors on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ot: Enable/disable Show Operational Technology Purdue Model. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_per_policy_disclaimer: Enable/disable policy disclaimer on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_policy_based_ipsec: Enable/disable policy-based IPsec VPN on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_policy_disclaimer: Enable/disable policy disclaimer on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_policy_learning: Enable/disable firewall policy learning mode on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_proxy_inspection: Enable/disable the proxy features on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_replacement_message_groups: Enable/disable replacement message groups on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_route_tag_address_creation: Enable/disable route-tag addresses on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_security_profile_group: Enable/disable Security Profile Groups on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_spamfilter: Enable/disable Antispam on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_sslvpn: Enable/disable SSL-VPN settings pages on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_sslvpn_personal_bookmarks: Enable/disable SSL-VPN personal bookmark management on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_sslvpn_realms: Enable/disable SSL-VPN realms on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_switch_controller: Enable/disable the switch controller on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_threat_weight: Enable/disable threat weight on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_traffic_shaping: Enable/disable traffic shaping on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_videofilter: Enable/disable Video filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_virtual_patch_profile: Enable/disable Virtual Patching on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_voip_profile: Enable/disable VoIP profiles on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_vpn: Enable/disable VPN tunnels on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_waf_profile: Enable/disable Web Application Firewall on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_wan_load_balancing: Enable/disable SD-WAN on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_wanopt_cache: Enable/disable WAN Optimization and Web Caching on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_webfilter: Enable/disable Web filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_webfilter_advanced: Enable/disable advanced web filtering on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_wireless_controller: Enable/disable the wireless controller on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gui_ztna: Enable/disable Zero Trust Network Access features on the GUI. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] h323_direct_model: Enable/disable H323 direct model. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] http_external_dest: Offload HTTP traffic to FortiWeb or FortiCache. Valid values: `fortiweb`, `forticache`.
        :param pulumi.Input[str] ike_dn_format: Configure IKE ASN.1 Distinguished Name format conventions. Valid values: `with-space`, `no-space`.
        :param pulumi.Input[int] ike_natt_port: UDP port for IKE/IPsec traffic in NAT-T mode (default 4500).
        :param pulumi.Input[str] ike_policy_route: Enable/disable IKE Policy Based Routing (PBR). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ike_port: UDP port for IKE/IPsec traffic (default 500).
        :param pulumi.Input[str] ike_quick_crash_detect: Enable/disable IKE quick crash detection (RFC 6290). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ike_session_resume: Enable/disable IKEv2 session resumption (RFC 5723). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ike_tcp_port: TCP port for IKE/IPsec traffic (default 4500).
        :param pulumi.Input[str] implicit_allow_dns: Enable/disable implicitly allowing DNS traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] inspection_mode: Inspection mode (proxy-based or flow-based). Valid values: `proxy`, `flow`.
        :param pulumi.Input[str] internet_service_database_cache: Enable/disable Internet Service database caching. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ip: IP address and netmask.
        :param pulumi.Input[str] ip6: IPv6 address prefix for NAT mode.
        :param pulumi.Input[str] lan_extension_controller_addr: Controller IP address or FQDN to connect.
        :param pulumi.Input[str] link_down_access: Enable/disable link down access traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] lldp_reception: Enable/disable Link Layer Discovery Protocol (LLDP) reception for this VDOM or apply global settings to this VDOM. Valid values: `enable`, `disable`, `global`.
        :param pulumi.Input[str] lldp_transmission: Enable/disable Link Layer Discovery Protocol (LLDP) transmission for this VDOM or apply global settings to this VDOM. Valid values: `enable`, `disable`, `global`.
        :param pulumi.Input[str] location_id: Local location ID in the form of an IPv4 address.
        :param pulumi.Input[int] mac_ttl: Duration of MAC addresses in Transparent mode (300 - 8640000 sec, default = 300).
        :param pulumi.Input[str] manageip: Transparent mode IPv4 management IP address and netmask.
        :param pulumi.Input[str] manageip6: Transparent mode IPv6 management IP address and netmask.
        :param pulumi.Input[str] multicast_forward: Enable/disable multicast forwarding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] multicast_skip_policy: Enable/disable allowing multicast traffic through the FortiGate without a policy check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] multicast_ttl_notchange: Enable/disable preventing the FortiGate from changing the TTL for forwarded multicast packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat46_force_ipv4_packet_forwarding: Enable/disable mandatory IPv4 packet forwarding in NAT46. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat46_generate_ipv6_fragment_header: Enable/disable NAT46 IPv6 fragment header generation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nat64_force_ipv6_packet_forwarding: Enable/disable mandatory IPv6 packet forwarding in NAT64. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ngfw_mode: Next Generation Firewall (NGFW) mode. Valid values: `profile-based`, `policy-based`.
        :param pulumi.Input[str] opmode: Firewall operation mode (NAT or Transparent). Valid values: `nat`, `transparent`.
        :param pulumi.Input[str] prp_trailer_action: Enable/disable action to take on PRP trailer. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] sccp_port: TCP port the SCCP proxy monitors for SCCP traffic (0 - 65535, default = 2000).
        :param pulumi.Input[str] sctp_session_without_init: Enable/disable SCTP session creation without SCTP INIT. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ses_denied_traffic: Enable/disable including denied session in the session table. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sip_expectation: Enable/disable the SIP kernel session helper to create an expectation for port 5060. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sip_helper: Enable/disable the SIP session helper to process SIP sessions unless SIP sessions are accepted by the SIP application layer gateway (ALG). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sip_nat_trace: Enable/disable recording the original SIP source IP address when NAT is used. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] sip_ssl_port: TCP port the SIP proxy monitors for SIP SSL/TLS traffic (0 - 65535, default = 5061).
        :param pulumi.Input[int] sip_tcp_port: TCP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
        :param pulumi.Input[int] sip_udp_port: UDP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
        :param pulumi.Input[str] snat_hairpin_traffic: Enable/disable source NAT (SNAT) for hairpin traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_ssh_profile: Profile for SSL/SSH inspection.
        :param pulumi.Input[str] status: Enable/disable this VDOM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_src_check: Enable/disable strict source verification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tcp_session_without_syn: Enable/disable allowing TCP session without SYN flags. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] utf8_spam_tagging: Enable/disable converting antispam tags to UTF-8 for better non-ASCII character support. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] v4_ecmp_mode: IPv4 Equal-cost multi-path (ECMP) routing and load balancing mode. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`.
        :param pulumi.Input[str] vdom_type: VDOM type (traffic or admin).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vpn_stats_log: Enable/disable periodic VPN log statistics for one or more types of VPN. Separate names with a space. Valid values: `ipsec`, `pptp`, `l2tp`, `ssl`.
        :param pulumi.Input[int] vpn_stats_period: Period to send VPN log statistics (0 or 60 - 86400 sec).
        :param pulumi.Input[str] wccp_cache_engine: Enable/disable WCCP cache engine. Valid values: `enable`, `disable`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingsState.__new__(_SettingsState)

        __props__.__dict__["allow_linkdown_path"] = allow_linkdown_path
        __props__.__dict__["allow_subnet_overlap"] = allow_subnet_overlap
        __props__.__dict__["application_bandwidth_tracking"] = application_bandwidth_tracking
        __props__.__dict__["asymroute"] = asymroute
        __props__.__dict__["asymroute6"] = asymroute6
        __props__.__dict__["asymroute6_icmp"] = asymroute6_icmp
        __props__.__dict__["asymroute_icmp"] = asymroute_icmp
        __props__.__dict__["auxiliary_session"] = auxiliary_session
        __props__.__dict__["bfd"] = bfd
        __props__.__dict__["bfd_desired_min_tx"] = bfd_desired_min_tx
        __props__.__dict__["bfd_detect_mult"] = bfd_detect_mult
        __props__.__dict__["bfd_dont_enforce_src_port"] = bfd_dont_enforce_src_port
        __props__.__dict__["bfd_required_min_rx"] = bfd_required_min_rx
        __props__.__dict__["block_land_attack"] = block_land_attack
        __props__.__dict__["central_nat"] = central_nat
        __props__.__dict__["comments"] = comments
        __props__.__dict__["compliance_check"] = compliance_check
        __props__.__dict__["consolidated_firewall_mode"] = consolidated_firewall_mode
        __props__.__dict__["default_app_port_as_service"] = default_app_port_as_service
        __props__.__dict__["default_policy_expiry_days"] = default_policy_expiry_days
        __props__.__dict__["default_voip_alg_mode"] = default_voip_alg_mode
        __props__.__dict__["deny_tcp_with_icmp"] = deny_tcp_with_icmp
        __props__.__dict__["detect_unknown_esp"] = detect_unknown_esp
        __props__.__dict__["device"] = device
        __props__.__dict__["dhcp6_server_ip"] = dhcp6_server_ip
        __props__.__dict__["dhcp_proxy"] = dhcp_proxy
        __props__.__dict__["dhcp_proxy_interface"] = dhcp_proxy_interface
        __props__.__dict__["dhcp_proxy_interface_select_method"] = dhcp_proxy_interface_select_method
        __props__.__dict__["dhcp_server_ip"] = dhcp_server_ip
        __props__.__dict__["discovered_device_timeout"] = discovered_device_timeout
        __props__.__dict__["dyn_addr_session_check"] = dyn_addr_session_check
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["ecmp_max_paths"] = ecmp_max_paths
        __props__.__dict__["email_portal_check_dns"] = email_portal_check_dns
        __props__.__dict__["ext_resource_session_check"] = ext_resource_session_check
        __props__.__dict__["firewall_session_dirty"] = firewall_session_dirty
        __props__.__dict__["fqdn_session_check"] = fqdn_session_check
        __props__.__dict__["fw_session_hairpin"] = fw_session_hairpin
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["gateway6"] = gateway6
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["gui_advanced_policy"] = gui_advanced_policy
        __props__.__dict__["gui_advanced_wireless_features"] = gui_advanced_wireless_features
        __props__.__dict__["gui_allow_unnamed_policy"] = gui_allow_unnamed_policy
        __props__.__dict__["gui_antivirus"] = gui_antivirus
        __props__.__dict__["gui_ap_profile"] = gui_ap_profile
        __props__.__dict__["gui_application_control"] = gui_application_control
        __props__.__dict__["gui_casb"] = gui_casb
        __props__.__dict__["gui_default_policy_columns"] = gui_default_policy_columns
        __props__.__dict__["gui_dhcp_advanced"] = gui_dhcp_advanced
        __props__.__dict__["gui_dlp"] = gui_dlp
        __props__.__dict__["gui_dlp_profile"] = gui_dlp_profile
        __props__.__dict__["gui_dns_database"] = gui_dns_database
        __props__.__dict__["gui_dnsfilter"] = gui_dnsfilter
        __props__.__dict__["gui_domain_ip_reputation"] = gui_domain_ip_reputation
        __props__.__dict__["gui_dos_policy"] = gui_dos_policy
        __props__.__dict__["gui_dynamic_device_os_id"] = gui_dynamic_device_os_id
        __props__.__dict__["gui_dynamic_profile_display"] = gui_dynamic_profile_display
        __props__.__dict__["gui_dynamic_routing"] = gui_dynamic_routing
        __props__.__dict__["gui_email_collection"] = gui_email_collection
        __props__.__dict__["gui_endpoint_control"] = gui_endpoint_control
        __props__.__dict__["gui_endpoint_control_advanced"] = gui_endpoint_control_advanced
        __props__.__dict__["gui_enforce_change_summary"] = gui_enforce_change_summary
        __props__.__dict__["gui_explicit_proxy"] = gui_explicit_proxy
        __props__.__dict__["gui_file_filter"] = gui_file_filter
        __props__.__dict__["gui_fortiap_split_tunneling"] = gui_fortiap_split_tunneling
        __props__.__dict__["gui_fortiextender_controller"] = gui_fortiextender_controller
        __props__.__dict__["gui_icap"] = gui_icap
        __props__.__dict__["gui_implicit_policy"] = gui_implicit_policy
        __props__.__dict__["gui_ips"] = gui_ips
        __props__.__dict__["gui_load_balance"] = gui_load_balance
        __props__.__dict__["gui_local_in_policy"] = gui_local_in_policy
        __props__.__dict__["gui_local_reports"] = gui_local_reports
        __props__.__dict__["gui_multicast_policy"] = gui_multicast_policy
        __props__.__dict__["gui_multiple_interface_policy"] = gui_multiple_interface_policy
        __props__.__dict__["gui_multiple_utm_profiles"] = gui_multiple_utm_profiles
        __props__.__dict__["gui_nat4664"] = gui_nat4664
        __props__.__dict__["gui_object_colors"] = gui_object_colors
        __props__.__dict__["gui_ot"] = gui_ot
        __props__.__dict__["gui_per_policy_disclaimer"] = gui_per_policy_disclaimer
        __props__.__dict__["gui_policy_based_ipsec"] = gui_policy_based_ipsec
        __props__.__dict__["gui_policy_disclaimer"] = gui_policy_disclaimer
        __props__.__dict__["gui_policy_learning"] = gui_policy_learning
        __props__.__dict__["gui_proxy_inspection"] = gui_proxy_inspection
        __props__.__dict__["gui_replacement_message_groups"] = gui_replacement_message_groups
        __props__.__dict__["gui_route_tag_address_creation"] = gui_route_tag_address_creation
        __props__.__dict__["gui_security_profile_group"] = gui_security_profile_group
        __props__.__dict__["gui_spamfilter"] = gui_spamfilter
        __props__.__dict__["gui_sslvpn"] = gui_sslvpn
        __props__.__dict__["gui_sslvpn_personal_bookmarks"] = gui_sslvpn_personal_bookmarks
        __props__.__dict__["gui_sslvpn_realms"] = gui_sslvpn_realms
        __props__.__dict__["gui_switch_controller"] = gui_switch_controller
        __props__.__dict__["gui_threat_weight"] = gui_threat_weight
        __props__.__dict__["gui_traffic_shaping"] = gui_traffic_shaping
        __props__.__dict__["gui_videofilter"] = gui_videofilter
        __props__.__dict__["gui_virtual_patch_profile"] = gui_virtual_patch_profile
        __props__.__dict__["gui_voip_profile"] = gui_voip_profile
        __props__.__dict__["gui_vpn"] = gui_vpn
        __props__.__dict__["gui_waf_profile"] = gui_waf_profile
        __props__.__dict__["gui_wan_load_balancing"] = gui_wan_load_balancing
        __props__.__dict__["gui_wanopt_cache"] = gui_wanopt_cache
        __props__.__dict__["gui_webfilter"] = gui_webfilter
        __props__.__dict__["gui_webfilter_advanced"] = gui_webfilter_advanced
        __props__.__dict__["gui_wireless_controller"] = gui_wireless_controller
        __props__.__dict__["gui_ztna"] = gui_ztna
        __props__.__dict__["h323_direct_model"] = h323_direct_model
        __props__.__dict__["http_external_dest"] = http_external_dest
        __props__.__dict__["ike_dn_format"] = ike_dn_format
        __props__.__dict__["ike_natt_port"] = ike_natt_port
        __props__.__dict__["ike_policy_route"] = ike_policy_route
        __props__.__dict__["ike_port"] = ike_port
        __props__.__dict__["ike_quick_crash_detect"] = ike_quick_crash_detect
        __props__.__dict__["ike_session_resume"] = ike_session_resume
        __props__.__dict__["ike_tcp_port"] = ike_tcp_port
        __props__.__dict__["implicit_allow_dns"] = implicit_allow_dns
        __props__.__dict__["inspection_mode"] = inspection_mode
        __props__.__dict__["internet_service_database_cache"] = internet_service_database_cache
        __props__.__dict__["ip"] = ip
        __props__.__dict__["ip6"] = ip6
        __props__.__dict__["lan_extension_controller_addr"] = lan_extension_controller_addr
        __props__.__dict__["link_down_access"] = link_down_access
        __props__.__dict__["lldp_reception"] = lldp_reception
        __props__.__dict__["lldp_transmission"] = lldp_transmission
        __props__.__dict__["location_id"] = location_id
        __props__.__dict__["mac_ttl"] = mac_ttl
        __props__.__dict__["manageip"] = manageip
        __props__.__dict__["manageip6"] = manageip6
        __props__.__dict__["multicast_forward"] = multicast_forward
        __props__.__dict__["multicast_skip_policy"] = multicast_skip_policy
        __props__.__dict__["multicast_ttl_notchange"] = multicast_ttl_notchange
        __props__.__dict__["nat46_force_ipv4_packet_forwarding"] = nat46_force_ipv4_packet_forwarding
        __props__.__dict__["nat46_generate_ipv6_fragment_header"] = nat46_generate_ipv6_fragment_header
        __props__.__dict__["nat64_force_ipv6_packet_forwarding"] = nat64_force_ipv6_packet_forwarding
        __props__.__dict__["ngfw_mode"] = ngfw_mode
        __props__.__dict__["opmode"] = opmode
        __props__.__dict__["prp_trailer_action"] = prp_trailer_action
        __props__.__dict__["sccp_port"] = sccp_port
        __props__.__dict__["sctp_session_without_init"] = sctp_session_without_init
        __props__.__dict__["ses_denied_traffic"] = ses_denied_traffic
        __props__.__dict__["sip_expectation"] = sip_expectation
        __props__.__dict__["sip_helper"] = sip_helper
        __props__.__dict__["sip_nat_trace"] = sip_nat_trace
        __props__.__dict__["sip_ssl_port"] = sip_ssl_port
        __props__.__dict__["sip_tcp_port"] = sip_tcp_port
        __props__.__dict__["sip_udp_port"] = sip_udp_port
        __props__.__dict__["snat_hairpin_traffic"] = snat_hairpin_traffic
        __props__.__dict__["ssl_ssh_profile"] = ssl_ssh_profile
        __props__.__dict__["status"] = status
        __props__.__dict__["strict_src_check"] = strict_src_check
        __props__.__dict__["tcp_session_without_syn"] = tcp_session_without_syn
        __props__.__dict__["utf8_spam_tagging"] = utf8_spam_tagging
        __props__.__dict__["v4_ecmp_mode"] = v4_ecmp_mode
        __props__.__dict__["vdom_type"] = vdom_type
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vpn_stats_log"] = vpn_stats_log
        __props__.__dict__["vpn_stats_period"] = vpn_stats_period
        __props__.__dict__["wccp_cache_engine"] = wccp_cache_engine
        return Settings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowLinkdownPath")
    def allow_linkdown_path(self) -> pulumi.Output[str]:
        """
        Enable/disable link down path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_linkdown_path")

    @property
    @pulumi.getter(name="allowSubnetOverlap")
    def allow_subnet_overlap(self) -> pulumi.Output[str]:
        """
        Enable/disable allowing interface subnets to use overlapping IP addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_subnet_overlap")

    @property
    @pulumi.getter(name="applicationBandwidthTracking")
    def application_bandwidth_tracking(self) -> pulumi.Output[str]:
        """
        Enable/disable application bandwidth tracking. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "application_bandwidth_tracking")

    @property
    @pulumi.getter
    def asymroute(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv4 asymmetric routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asymroute")

    @property
    @pulumi.getter
    def asymroute6(self) -> pulumi.Output[str]:
        """
        Enable/disable asymmetric IPv6 routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asymroute6")

    @property
    @pulumi.getter(name="asymroute6Icmp")
    def asymroute6_icmp(self) -> pulumi.Output[str]:
        """
        Enable/disable asymmetric ICMPv6 routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asymroute6_icmp")

    @property
    @pulumi.getter(name="asymrouteIcmp")
    def asymroute_icmp(self) -> pulumi.Output[str]:
        """
        Enable/disable ICMP asymmetric routing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "asymroute_icmp")

    @property
    @pulumi.getter(name="auxiliarySession")
    def auxiliary_session(self) -> pulumi.Output[str]:
        """
        Enable/disable auxiliary session. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auxiliary_session")

    @property
    @pulumi.getter
    def bfd(self) -> pulumi.Output[str]:
        """
        Enable/disable Bi-directional Forwarding Detection (BFD) on all interfaces. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> pulumi.Output[int]:
        """
        BFD desired minimal transmit interval (1 - 100000 ms, default = 50).
        """
        return pulumi.get(self, "bfd_desired_min_tx")

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> pulumi.Output[int]:
        """
        BFD detection multiplier (1 - 50, default = 3).
        """
        return pulumi.get(self, "bfd_detect_mult")

    @property
    @pulumi.getter(name="bfdDontEnforceSrcPort")
    def bfd_dont_enforce_src_port(self) -> pulumi.Output[str]:
        """
        Enable to not enforce verifying the source port of BFD Packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd_dont_enforce_src_port")

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> pulumi.Output[int]:
        """
        BFD required minimal receive interval (1 - 100000 ms, default = 50).
        """
        return pulumi.get(self, "bfd_required_min_rx")

    @property
    @pulumi.getter(name="blockLandAttack")
    def block_land_attack(self) -> pulumi.Output[str]:
        """
        Enable/disable blocking of land attacks. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_land_attack")

    @property
    @pulumi.getter(name="centralNat")
    def central_nat(self) -> pulumi.Output[str]:
        """
        Enable/disable central NAT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "central_nat")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        VDOM comments.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="complianceCheck")
    def compliance_check(self) -> pulumi.Output[str]:
        """
        Enable/disable PCI DSS compliance checking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "compliance_check")

    @property
    @pulumi.getter(name="consolidatedFirewallMode")
    def consolidated_firewall_mode(self) -> pulumi.Output[str]:
        """
        Consolidated firewall mode.
        """
        return pulumi.get(self, "consolidated_firewall_mode")

    @property
    @pulumi.getter(name="defaultAppPortAsService")
    def default_app_port_as_service(self) -> pulumi.Output[str]:
        """
        Enable/disable policy service enforcement based on application default ports. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default_app_port_as_service")

    @property
    @pulumi.getter(name="defaultPolicyExpiryDays")
    def default_policy_expiry_days(self) -> pulumi.Output[int]:
        """
        Default policy expiry in days (0 - 365 days, default = 30).
        """
        return pulumi.get(self, "default_policy_expiry_days")

    @property
    @pulumi.getter(name="defaultVoipAlgMode")
    def default_voip_alg_mode(self) -> pulumi.Output[str]:
        """
        Configure how the FortiGate handles VoIP traffic when a policy that accepts the traffic doesn't include a VoIP profile. Valid values: `proxy-based`, `kernel-helper-based`.
        """
        return pulumi.get(self, "default_voip_alg_mode")

    @property
    @pulumi.getter(name="denyTcpWithIcmp")
    def deny_tcp_with_icmp(self) -> pulumi.Output[str]:
        """
        Enable/disable denying TCP by sending an ICMP communication prohibited packet. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "deny_tcp_with_icmp")

    @property
    @pulumi.getter(name="detectUnknownEsp")
    def detect_unknown_esp(self) -> pulumi.Output[str]:
        """
        Enable/disable detection of unknown ESP packets (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "detect_unknown_esp")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[str]:
        """
        Interface to use for management access for NAT mode.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="dhcp6ServerIp")
    def dhcp6_server_ip(self) -> pulumi.Output[str]:
        """
        DHCPv6 server IPv6 address.
        """
        return pulumi.get(self, "dhcp6_server_ip")

    @property
    @pulumi.getter(name="dhcpProxy")
    def dhcp_proxy(self) -> pulumi.Output[str]:
        """
        Enable/disable the DHCP Proxy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_proxy")

    @property
    @pulumi.getter(name="dhcpProxyInterface")
    def dhcp_proxy_interface(self) -> pulumi.Output[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "dhcp_proxy_interface")

    @property
    @pulumi.getter(name="dhcpProxyInterfaceSelectMethod")
    def dhcp_proxy_interface_select_method(self) -> pulumi.Output[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "dhcp_proxy_interface_select_method")

    @property
    @pulumi.getter(name="dhcpServerIp")
    def dhcp_server_ip(self) -> pulumi.Output[str]:
        """
        DHCP Server IPv4 address.
        """
        return pulumi.get(self, "dhcp_server_ip")

    @property
    @pulumi.getter(name="discoveredDeviceTimeout")
    def discovered_device_timeout(self) -> pulumi.Output[int]:
        """
        Timeout for discovered devices (1 - 365 days, default = 28).
        """
        return pulumi.get(self, "discovered_device_timeout")

    @property
    @pulumi.getter(name="dynAddrSessionCheck")
    def dyn_addr_session_check(self) -> pulumi.Output[str]:
        """
        Enable/disable dirty session check caused by dynamic address updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dyn_addr_session_check")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="ecmpMaxPaths")
    def ecmp_max_paths(self) -> pulumi.Output[int]:
        """
        Maximum number of Equal Cost Multi-Path (ECMP) next-hops. Set to 1 to disable ECMP routing (1 - 100, default = 10).
        """
        return pulumi.get(self, "ecmp_max_paths")

    @property
    @pulumi.getter(name="emailPortalCheckDns")
    def email_portal_check_dns(self) -> pulumi.Output[str]:
        """
        Enable/disable using DNS to validate email addresses collected by a captive portal. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "email_portal_check_dns")

    @property
    @pulumi.getter(name="extResourceSessionCheck")
    def ext_resource_session_check(self) -> pulumi.Output[str]:
        """
        Enable/disable dirty session check caused by external resource updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ext_resource_session_check")

    @property
    @pulumi.getter(name="firewallSessionDirty")
    def firewall_session_dirty(self) -> pulumi.Output[str]:
        """
        Select how to manage sessions affected by firewall policy configuration changes. Valid values: `check-all`, `check-new`, `check-policy-option`.
        """
        return pulumi.get(self, "firewall_session_dirty")

    @property
    @pulumi.getter(name="fqdnSessionCheck")
    def fqdn_session_check(self) -> pulumi.Output[str]:
        """
        Enable/disable dirty session check caused by FQDN updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fqdn_session_check")

    @property
    @pulumi.getter(name="fwSessionHairpin")
    def fw_session_hairpin(self) -> pulumi.Output[str]:
        """
        Enable/disable checking for a matching policy each time hairpin traffic goes through the FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fw_session_hairpin")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[str]:
        """
        Transparent mode IPv4 default gateway IP address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> pulumi.Output[str]:
        """
        Transparent mode IPv4 default gateway IP address.
        """
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="guiAdvancedPolicy")
    def gui_advanced_policy(self) -> pulumi.Output[str]:
        """
        Enable/disable advanced policy configuration on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_advanced_policy")

    @property
    @pulumi.getter(name="guiAdvancedWirelessFeatures")
    def gui_advanced_wireless_features(self) -> pulumi.Output[str]:
        """
        Enable/disable advanced wireless features in GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_advanced_wireless_features")

    @property
    @pulumi.getter(name="guiAllowUnnamedPolicy")
    def gui_allow_unnamed_policy(self) -> pulumi.Output[str]:
        """
        Enable/disable the requirement for policy naming on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_allow_unnamed_policy")

    @property
    @pulumi.getter(name="guiAntivirus")
    def gui_antivirus(self) -> pulumi.Output[str]:
        """
        Enable/disable AntiVirus on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_antivirus")

    @property
    @pulumi.getter(name="guiApProfile")
    def gui_ap_profile(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiAP profiles on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_ap_profile")

    @property
    @pulumi.getter(name="guiApplicationControl")
    def gui_application_control(self) -> pulumi.Output[str]:
        """
        Enable/disable application control on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_application_control")

    @property
    @pulumi.getter(name="guiCasb")
    def gui_casb(self) -> pulumi.Output[str]:
        """
        Enable/disable Inline-CASB on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_casb")

    @property
    @pulumi.getter(name="guiDefaultPolicyColumns")
    def gui_default_policy_columns(self) -> pulumi.Output[Optional[Sequence['outputs.SettingsGuiDefaultPolicyColumn']]]:
        """
        Default columns to display for policy lists on GUI. The structure of `gui_default_policy_columns` block is documented below.
        """
        return pulumi.get(self, "gui_default_policy_columns")

    @property
    @pulumi.getter(name="guiDhcpAdvanced")
    def gui_dhcp_advanced(self) -> pulumi.Output[str]:
        """
        Enable/disable advanced DHCP options on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dhcp_advanced")

    @property
    @pulumi.getter(name="guiDlp")
    def gui_dlp(self) -> pulumi.Output[str]:
        """
        Enable/disable DLP on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dlp")

    @property
    @pulumi.getter(name="guiDlpProfile")
    def gui_dlp_profile(self) -> pulumi.Output[str]:
        """
        Enable/disable Data Leak Prevention on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dlp_profile")

    @property
    @pulumi.getter(name="guiDnsDatabase")
    def gui_dns_database(self) -> pulumi.Output[str]:
        """
        Enable/disable DNS database settings on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dns_database")

    @property
    @pulumi.getter(name="guiDnsfilter")
    def gui_dnsfilter(self) -> pulumi.Output[str]:
        """
        Enable/disable DNS Filtering on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dnsfilter")

    @property
    @pulumi.getter(name="guiDomainIpReputation")
    def gui_domain_ip_reputation(self) -> pulumi.Output[str]:
        """
        Enable/disable Domain and IP Reputation on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_domain_ip_reputation")

    @property
    @pulumi.getter(name="guiDosPolicy")
    def gui_dos_policy(self) -> pulumi.Output[str]:
        """
        Enable/disable DoS policies on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dos_policy")

    @property
    @pulumi.getter(name="guiDynamicDeviceOsId")
    def gui_dynamic_device_os_id(self) -> pulumi.Output[str]:
        """
        Enable/disable Create dynamic addresses to manage known devices. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dynamic_device_os_id")

    @property
    @pulumi.getter(name="guiDynamicProfileDisplay")
    def gui_dynamic_profile_display(self) -> pulumi.Output[str]:
        """
        Enable/disable RADIUS Single Sign On (RSSO) on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dynamic_profile_display")

    @property
    @pulumi.getter(name="guiDynamicRouting")
    def gui_dynamic_routing(self) -> pulumi.Output[str]:
        """
        Enable/disable dynamic routing on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_dynamic_routing")

    @property
    @pulumi.getter(name="guiEmailCollection")
    def gui_email_collection(self) -> pulumi.Output[str]:
        """
        Enable/disable email collection on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_email_collection")

    @property
    @pulumi.getter(name="guiEndpointControl")
    def gui_endpoint_control(self) -> pulumi.Output[str]:
        """
        Enable/disable endpoint control on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_endpoint_control")

    @property
    @pulumi.getter(name="guiEndpointControlAdvanced")
    def gui_endpoint_control_advanced(self) -> pulumi.Output[str]:
        """
        Enable/disable advanced endpoint control options on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_endpoint_control_advanced")

    @property
    @pulumi.getter(name="guiEnforceChangeSummary")
    def gui_enforce_change_summary(self) -> pulumi.Output[str]:
        """
        Enforce change summaries for select tables in the GUI. Valid values: `disable`, `require`, `optional`.
        """
        return pulumi.get(self, "gui_enforce_change_summary")

    @property
    @pulumi.getter(name="guiExplicitProxy")
    def gui_explicit_proxy(self) -> pulumi.Output[str]:
        """
        Enable/disable the explicit proxy on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_explicit_proxy")

    @property
    @pulumi.getter(name="guiFileFilter")
    def gui_file_filter(self) -> pulumi.Output[str]:
        """
        Enable/disable File-filter on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_file_filter")

    @property
    @pulumi.getter(name="guiFortiapSplitTunneling")
    def gui_fortiap_split_tunneling(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiAP split tunneling on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_fortiap_split_tunneling")

    @property
    @pulumi.getter(name="guiFortiextenderController")
    def gui_fortiextender_controller(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiExtender on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_fortiextender_controller")

    @property
    @pulumi.getter(name="guiIcap")
    def gui_icap(self) -> pulumi.Output[str]:
        """
        Enable/disable ICAP on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_icap")

    @property
    @pulumi.getter(name="guiImplicitPolicy")
    def gui_implicit_policy(self) -> pulumi.Output[str]:
        """
        Enable/disable implicit firewall policies on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_implicit_policy")

    @property
    @pulumi.getter(name="guiIps")
    def gui_ips(self) -> pulumi.Output[str]:
        """
        Enable/disable IPS on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_ips")

    @property
    @pulumi.getter(name="guiLoadBalance")
    def gui_load_balance(self) -> pulumi.Output[str]:
        """
        Enable/disable server load balancing on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_load_balance")

    @property
    @pulumi.getter(name="guiLocalInPolicy")
    def gui_local_in_policy(self) -> pulumi.Output[str]:
        """
        Enable/disable Local-In policies on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_local_in_policy")

    @property
    @pulumi.getter(name="guiLocalReports")
    def gui_local_reports(self) -> pulumi.Output[str]:
        """
        Enable/disable local reports on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_local_reports")

    @property
    @pulumi.getter(name="guiMulticastPolicy")
    def gui_multicast_policy(self) -> pulumi.Output[str]:
        """
        Enable/disable multicast firewall policies on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_multicast_policy")

    @property
    @pulumi.getter(name="guiMultipleInterfacePolicy")
    def gui_multiple_interface_policy(self) -> pulumi.Output[str]:
        """
        Enable/disable adding multiple interfaces to a policy on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_multiple_interface_policy")

    @property
    @pulumi.getter(name="guiMultipleUtmProfiles")
    def gui_multiple_utm_profiles(self) -> pulumi.Output[str]:
        """
        Enable/disable multiple UTM profiles on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_multiple_utm_profiles")

    @property
    @pulumi.getter(name="guiNat4664")
    def gui_nat4664(self) -> pulumi.Output[str]:
        """
        Enable/disable NAT46 and NAT64 settings on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_nat4664")

    @property
    @pulumi.getter(name="guiObjectColors")
    def gui_object_colors(self) -> pulumi.Output[str]:
        """
        Enable/disable object colors on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_object_colors")

    @property
    @pulumi.getter(name="guiOt")
    def gui_ot(self) -> pulumi.Output[str]:
        """
        Enable/disable Show Operational Technology Purdue Model. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_ot")

    @property
    @pulumi.getter(name="guiPerPolicyDisclaimer")
    def gui_per_policy_disclaimer(self) -> pulumi.Output[str]:
        """
        Enable/disable policy disclaimer on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_per_policy_disclaimer")

    @property
    @pulumi.getter(name="guiPolicyBasedIpsec")
    def gui_policy_based_ipsec(self) -> pulumi.Output[str]:
        """
        Enable/disable policy-based IPsec VPN on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_policy_based_ipsec")

    @property
    @pulumi.getter(name="guiPolicyDisclaimer")
    def gui_policy_disclaimer(self) -> pulumi.Output[str]:
        """
        Enable/disable policy disclaimer on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_policy_disclaimer")

    @property
    @pulumi.getter(name="guiPolicyLearning")
    def gui_policy_learning(self) -> pulumi.Output[str]:
        """
        Enable/disable firewall policy learning mode on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_policy_learning")

    @property
    @pulumi.getter(name="guiProxyInspection")
    def gui_proxy_inspection(self) -> pulumi.Output[str]:
        """
        Enable/disable the proxy features on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_proxy_inspection")

    @property
    @pulumi.getter(name="guiReplacementMessageGroups")
    def gui_replacement_message_groups(self) -> pulumi.Output[str]:
        """
        Enable/disable replacement message groups on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_replacement_message_groups")

    @property
    @pulumi.getter(name="guiRouteTagAddressCreation")
    def gui_route_tag_address_creation(self) -> pulumi.Output[str]:
        """
        Enable/disable route-tag addresses on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_route_tag_address_creation")

    @property
    @pulumi.getter(name="guiSecurityProfileGroup")
    def gui_security_profile_group(self) -> pulumi.Output[str]:
        """
        Enable/disable Security Profile Groups on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_security_profile_group")

    @property
    @pulumi.getter(name="guiSpamfilter")
    def gui_spamfilter(self) -> pulumi.Output[str]:
        """
        Enable/disable Antispam on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_spamfilter")

    @property
    @pulumi.getter(name="guiSslvpn")
    def gui_sslvpn(self) -> pulumi.Output[str]:
        """
        Enable/disable SSL-VPN settings pages on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_sslvpn")

    @property
    @pulumi.getter(name="guiSslvpnPersonalBookmarks")
    def gui_sslvpn_personal_bookmarks(self) -> pulumi.Output[str]:
        """
        Enable/disable SSL-VPN personal bookmark management on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_sslvpn_personal_bookmarks")

    @property
    @pulumi.getter(name="guiSslvpnRealms")
    def gui_sslvpn_realms(self) -> pulumi.Output[str]:
        """
        Enable/disable SSL-VPN realms on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_sslvpn_realms")

    @property
    @pulumi.getter(name="guiSwitchController")
    def gui_switch_controller(self) -> pulumi.Output[str]:
        """
        Enable/disable the switch controller on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_switch_controller")

    @property
    @pulumi.getter(name="guiThreatWeight")
    def gui_threat_weight(self) -> pulumi.Output[str]:
        """
        Enable/disable threat weight on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_threat_weight")

    @property
    @pulumi.getter(name="guiTrafficShaping")
    def gui_traffic_shaping(self) -> pulumi.Output[str]:
        """
        Enable/disable traffic shaping on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_traffic_shaping")

    @property
    @pulumi.getter(name="guiVideofilter")
    def gui_videofilter(self) -> pulumi.Output[str]:
        """
        Enable/disable Video filtering on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_videofilter")

    @property
    @pulumi.getter(name="guiVirtualPatchProfile")
    def gui_virtual_patch_profile(self) -> pulumi.Output[str]:
        """
        Enable/disable Virtual Patching on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_virtual_patch_profile")

    @property
    @pulumi.getter(name="guiVoipProfile")
    def gui_voip_profile(self) -> pulumi.Output[str]:
        """
        Enable/disable VoIP profiles on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_voip_profile")

    @property
    @pulumi.getter(name="guiVpn")
    def gui_vpn(self) -> pulumi.Output[str]:
        """
        Enable/disable VPN tunnels on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_vpn")

    @property
    @pulumi.getter(name="guiWafProfile")
    def gui_waf_profile(self) -> pulumi.Output[str]:
        """
        Enable/disable Web Application Firewall on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_waf_profile")

    @property
    @pulumi.getter(name="guiWanLoadBalancing")
    def gui_wan_load_balancing(self) -> pulumi.Output[str]:
        """
        Enable/disable SD-WAN on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_wan_load_balancing")

    @property
    @pulumi.getter(name="guiWanoptCache")
    def gui_wanopt_cache(self) -> pulumi.Output[str]:
        """
        Enable/disable WAN Optimization and Web Caching on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_wanopt_cache")

    @property
    @pulumi.getter(name="guiWebfilter")
    def gui_webfilter(self) -> pulumi.Output[str]:
        """
        Enable/disable Web filtering on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_webfilter")

    @property
    @pulumi.getter(name="guiWebfilterAdvanced")
    def gui_webfilter_advanced(self) -> pulumi.Output[str]:
        """
        Enable/disable advanced web filtering on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_webfilter_advanced")

    @property
    @pulumi.getter(name="guiWirelessController")
    def gui_wireless_controller(self) -> pulumi.Output[str]:
        """
        Enable/disable the wireless controller on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_wireless_controller")

    @property
    @pulumi.getter(name="guiZtna")
    def gui_ztna(self) -> pulumi.Output[str]:
        """
        Enable/disable Zero Trust Network Access features on the GUI. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_ztna")

    @property
    @pulumi.getter(name="h323DirectModel")
    def h323_direct_model(self) -> pulumi.Output[str]:
        """
        Enable/disable H323 direct model. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "h323_direct_model")

    @property
    @pulumi.getter(name="httpExternalDest")
    def http_external_dest(self) -> pulumi.Output[str]:
        """
        Offload HTTP traffic to FortiWeb or FortiCache. Valid values: `fortiweb`, `forticache`.
        """
        return pulumi.get(self, "http_external_dest")

    @property
    @pulumi.getter(name="ikeDnFormat")
    def ike_dn_format(self) -> pulumi.Output[str]:
        """
        Configure IKE ASN.1 Distinguished Name format conventions. Valid values: `with-space`, `no-space`.
        """
        return pulumi.get(self, "ike_dn_format")

    @property
    @pulumi.getter(name="ikeNattPort")
    def ike_natt_port(self) -> pulumi.Output[int]:
        """
        UDP port for IKE/IPsec traffic in NAT-T mode (default 4500).
        """
        return pulumi.get(self, "ike_natt_port")

    @property
    @pulumi.getter(name="ikePolicyRoute")
    def ike_policy_route(self) -> pulumi.Output[str]:
        """
        Enable/disable IKE Policy Based Routing (PBR). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ike_policy_route")

    @property
    @pulumi.getter(name="ikePort")
    def ike_port(self) -> pulumi.Output[int]:
        """
        UDP port for IKE/IPsec traffic (default 500).
        """
        return pulumi.get(self, "ike_port")

    @property
    @pulumi.getter(name="ikeQuickCrashDetect")
    def ike_quick_crash_detect(self) -> pulumi.Output[str]:
        """
        Enable/disable IKE quick crash detection (RFC 6290). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ike_quick_crash_detect")

    @property
    @pulumi.getter(name="ikeSessionResume")
    def ike_session_resume(self) -> pulumi.Output[str]:
        """
        Enable/disable IKEv2 session resumption (RFC 5723). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ike_session_resume")

    @property
    @pulumi.getter(name="ikeTcpPort")
    def ike_tcp_port(self) -> pulumi.Output[int]:
        """
        TCP port for IKE/IPsec traffic (default 4500).
        """
        return pulumi.get(self, "ike_tcp_port")

    @property
    @pulumi.getter(name="implicitAllowDns")
    def implicit_allow_dns(self) -> pulumi.Output[str]:
        """
        Enable/disable implicitly allowing DNS traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "implicit_allow_dns")

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> pulumi.Output[str]:
        """
        Inspection mode (proxy-based or flow-based). Valid values: `proxy`, `flow`.
        """
        return pulumi.get(self, "inspection_mode")

    @property
    @pulumi.getter(name="internetServiceDatabaseCache")
    def internet_service_database_cache(self) -> pulumi.Output[str]:
        """
        Enable/disable Internet Service database caching. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "internet_service_database_cache")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        """
        IP address and netmask.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ip6(self) -> pulumi.Output[str]:
        """
        IPv6 address prefix for NAT mode.
        """
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter(name="lanExtensionControllerAddr")
    def lan_extension_controller_addr(self) -> pulumi.Output[str]:
        """
        Controller IP address or FQDN to connect.
        """
        return pulumi.get(self, "lan_extension_controller_addr")

    @property
    @pulumi.getter(name="linkDownAccess")
    def link_down_access(self) -> pulumi.Output[str]:
        """
        Enable/disable link down access traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_down_access")

    @property
    @pulumi.getter(name="lldpReception")
    def lldp_reception(self) -> pulumi.Output[str]:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) reception for this VDOM or apply global settings to this VDOM. Valid values: `enable`, `disable`, `global`.
        """
        return pulumi.get(self, "lldp_reception")

    @property
    @pulumi.getter(name="lldpTransmission")
    def lldp_transmission(self) -> pulumi.Output[str]:
        """
        Enable/disable Link Layer Discovery Protocol (LLDP) transmission for this VDOM or apply global settings to this VDOM. Valid values: `enable`, `disable`, `global`.
        """
        return pulumi.get(self, "lldp_transmission")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> pulumi.Output[str]:
        """
        Local location ID in the form of an IPv4 address.
        """
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter(name="macTtl")
    def mac_ttl(self) -> pulumi.Output[int]:
        """
        Duration of MAC addresses in Transparent mode (300 - 8640000 sec, default = 300).
        """
        return pulumi.get(self, "mac_ttl")

    @property
    @pulumi.getter
    def manageip(self) -> pulumi.Output[str]:
        """
        Transparent mode IPv4 management IP address and netmask.
        """
        return pulumi.get(self, "manageip")

    @property
    @pulumi.getter
    def manageip6(self) -> pulumi.Output[str]:
        """
        Transparent mode IPv6 management IP address and netmask.
        """
        return pulumi.get(self, "manageip6")

    @property
    @pulumi.getter(name="multicastForward")
    def multicast_forward(self) -> pulumi.Output[str]:
        """
        Enable/disable multicast forwarding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "multicast_forward")

    @property
    @pulumi.getter(name="multicastSkipPolicy")
    def multicast_skip_policy(self) -> pulumi.Output[str]:
        """
        Enable/disable allowing multicast traffic through the FortiGate without a policy check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "multicast_skip_policy")

    @property
    @pulumi.getter(name="multicastTtlNotchange")
    def multicast_ttl_notchange(self) -> pulumi.Output[str]:
        """
        Enable/disable preventing the FortiGate from changing the TTL for forwarded multicast packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "multicast_ttl_notchange")

    @property
    @pulumi.getter(name="nat46ForceIpv4PacketForwarding")
    def nat46_force_ipv4_packet_forwarding(self) -> pulumi.Output[str]:
        """
        Enable/disable mandatory IPv4 packet forwarding in NAT46. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat46_force_ipv4_packet_forwarding")

    @property
    @pulumi.getter(name="nat46GenerateIpv6FragmentHeader")
    def nat46_generate_ipv6_fragment_header(self) -> pulumi.Output[str]:
        """
        Enable/disable NAT46 IPv6 fragment header generation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat46_generate_ipv6_fragment_header")

    @property
    @pulumi.getter(name="nat64ForceIpv6PacketForwarding")
    def nat64_force_ipv6_packet_forwarding(self) -> pulumi.Output[str]:
        """
        Enable/disable mandatory IPv6 packet forwarding in NAT64. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nat64_force_ipv6_packet_forwarding")

    @property
    @pulumi.getter(name="ngfwMode")
    def ngfw_mode(self) -> pulumi.Output[str]:
        """
        Next Generation Firewall (NGFW) mode. Valid values: `profile-based`, `policy-based`.
        """
        return pulumi.get(self, "ngfw_mode")

    @property
    @pulumi.getter
    def opmode(self) -> pulumi.Output[str]:
        """
        Firewall operation mode (NAT or Transparent). Valid values: `nat`, `transparent`.
        """
        return pulumi.get(self, "opmode")

    @property
    @pulumi.getter(name="prpTrailerAction")
    def prp_trailer_action(self) -> pulumi.Output[str]:
        """
        Enable/disable action to take on PRP trailer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "prp_trailer_action")

    @property
    @pulumi.getter(name="sccpPort")
    def sccp_port(self) -> pulumi.Output[int]:
        """
        TCP port the SCCP proxy monitors for SCCP traffic (0 - 65535, default = 2000).
        """
        return pulumi.get(self, "sccp_port")

    @property
    @pulumi.getter(name="sctpSessionWithoutInit")
    def sctp_session_without_init(self) -> pulumi.Output[str]:
        """
        Enable/disable SCTP session creation without SCTP INIT. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sctp_session_without_init")

    @property
    @pulumi.getter(name="sesDeniedTraffic")
    def ses_denied_traffic(self) -> pulumi.Output[str]:
        """
        Enable/disable including denied session in the session table. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ses_denied_traffic")

    @property
    @pulumi.getter(name="sipExpectation")
    def sip_expectation(self) -> pulumi.Output[str]:
        """
        Enable/disable the SIP kernel session helper to create an expectation for port 5060. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sip_expectation")

    @property
    @pulumi.getter(name="sipHelper")
    def sip_helper(self) -> pulumi.Output[str]:
        """
        Enable/disable the SIP session helper to process SIP sessions unless SIP sessions are accepted by the SIP application layer gateway (ALG). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sip_helper")

    @property
    @pulumi.getter(name="sipNatTrace")
    def sip_nat_trace(self) -> pulumi.Output[str]:
        """
        Enable/disable recording the original SIP source IP address when NAT is used. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sip_nat_trace")

    @property
    @pulumi.getter(name="sipSslPort")
    def sip_ssl_port(self) -> pulumi.Output[int]:
        """
        TCP port the SIP proxy monitors for SIP SSL/TLS traffic (0 - 65535, default = 5061).
        """
        return pulumi.get(self, "sip_ssl_port")

    @property
    @pulumi.getter(name="sipTcpPort")
    def sip_tcp_port(self) -> pulumi.Output[int]:
        """
        TCP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
        """
        return pulumi.get(self, "sip_tcp_port")

    @property
    @pulumi.getter(name="sipUdpPort")
    def sip_udp_port(self) -> pulumi.Output[int]:
        """
        UDP port the SIP proxy monitors for SIP traffic (0 - 65535, default = 5060).
        """
        return pulumi.get(self, "sip_udp_port")

    @property
    @pulumi.getter(name="snatHairpinTraffic")
    def snat_hairpin_traffic(self) -> pulumi.Output[str]:
        """
        Enable/disable source NAT (SNAT) for hairpin traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "snat_hairpin_traffic")

    @property
    @pulumi.getter(name="sslSshProfile")
    def ssl_ssh_profile(self) -> pulumi.Output[str]:
        """
        Profile for SSL/SSH inspection.
        """
        return pulumi.get(self, "ssl_ssh_profile")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable this VDOM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="strictSrcCheck")
    def strict_src_check(self) -> pulumi.Output[str]:
        """
        Enable/disable strict source verification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_src_check")

    @property
    @pulumi.getter(name="tcpSessionWithoutSyn")
    def tcp_session_without_syn(self) -> pulumi.Output[str]:
        """
        Enable/disable allowing TCP session without SYN flags. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tcp_session_without_syn")

    @property
    @pulumi.getter(name="utf8SpamTagging")
    def utf8_spam_tagging(self) -> pulumi.Output[str]:
        """
        Enable/disable converting antispam tags to UTF-8 for better non-ASCII character support. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utf8_spam_tagging")

    @property
    @pulumi.getter(name="v4EcmpMode")
    def v4_ecmp_mode(self) -> pulumi.Output[str]:
        """
        IPv4 Equal-cost multi-path (ECMP) routing and load balancing mode. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`.
        """
        return pulumi.get(self, "v4_ecmp_mode")

    @property
    @pulumi.getter(name="vdomType")
    def vdom_type(self) -> pulumi.Output[str]:
        """
        VDOM type (traffic or admin).
        """
        return pulumi.get(self, "vdom_type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="vpnStatsLog")
    def vpn_stats_log(self) -> pulumi.Output[str]:
        """
        Enable/disable periodic VPN log statistics for one or more types of VPN. Separate names with a space. Valid values: `ipsec`, `pptp`, `l2tp`, `ssl`.
        """
        return pulumi.get(self, "vpn_stats_log")

    @property
    @pulumi.getter(name="vpnStatsPeriod")
    def vpn_stats_period(self) -> pulumi.Output[int]:
        """
        Period to send VPN log statistics (0 or 60 - 86400 sec).
        """
        return pulumi.get(self, "vpn_stats_period")

    @property
    @pulumi.getter(name="wccpCacheEngine")
    def wccp_cache_engine(self) -> pulumi.Output[str]:
        """
        Enable/disable WCCP cache engine. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "wccp_cache_engine")

