# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SdwanArgs', 'Sdwan']

@pulumi.input_type
class SdwanArgs:
    def __init__(__self__, *,
                 app_perf_log_period: Optional[pulumi.Input[int]] = None,
                 duplication_max_num: Optional[pulumi.Input[int]] = None,
                 duplications: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanFailAlertInterfaceArgs']]]] = None,
                 fail_detect: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckArgs']]]] = None,
                 load_balance_mode: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanMemberArgs']]]] = None,
                 neighbor_hold_boot_time: Optional[pulumi.Input[int]] = None,
                 neighbor_hold_down: Optional[pulumi.Input[str]] = None,
                 neighbor_hold_down_time: Optional[pulumi.Input[int]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanNeighborArgs']]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceArgs']]]] = None,
                 speedtest_bypass_routing: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanZoneArgs']]]] = None):
        """
        The set of arguments for constructing a Sdwan resource.
        :param pulumi.Input[int] app_perf_log_period: Time interval in seconds that applicationperformance logs are generated (0 - 3600, default = 0).
        :param pulumi.Input[int] duplication_max_num: Maximum number of interface members a packet is duplicated in the SD-WAN zone (2 - 4, default = 2; if set to 3, the original packet plus 2 more copies are created).
        :param pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationArgs']]] duplications: Create SD-WAN duplication rule. The structure of `duplication` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input['SdwanFailAlertInterfaceArgs']]] fail_alert_interfaces: Physical interfaces that will be alerted. The structure of `fail_alert_interfaces` block is documented below.
        :param pulumi.Input[str] fail_detect: Enable/disable SD-WAN Internet connection status checking (failure detection). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckArgs']]] health_checks: SD-WAN status checking or health checking. Identify a server on the Internet and determine how SD-WAN verifies that the FortiGate can communicate with it. The structure of `health_check` block is documented below.
        :param pulumi.Input[str] load_balance_mode: Algorithm or mode to use for load balancing Internet traffic to SD-WAN members. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`, `measured-volume-based`.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanMemberArgs']]] members: FortiGate interfaces added to the SD-WAN. The structure of `members` block is documented below.
        :param pulumi.Input[int] neighbor_hold_boot_time: Waiting period in seconds when switching from the primary neighbor to the secondary neighbor from the neighbor start. (0 - 10000000, default = 0).
        :param pulumi.Input[str] neighbor_hold_down: Enable/disable hold switching from the secondary neighbor to the primary neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] neighbor_hold_down_time: Waiting period in seconds when switching from the secondary neighbor to the primary neighbor when hold-down is disabled. (0 - 10000000, default = 0).
        :param pulumi.Input[Sequence[pulumi.Input['SdwanNeighborArgs']]] neighbors: Create SD-WAN neighbor from BGP neighbor table to control route advertisements according to SLA status. The structure of `neighbor` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceArgs']]] services: Create SD-WAN rules (also called services) to control how sessions are distributed to interfaces in the SD-WAN. The structure of `service` block is documented below.
        :param pulumi.Input[str] speedtest_bypass_routing: Enable/disable bypass routing when speedtest on a SD-WAN member. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable SD-WAN. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanZoneArgs']]] zones: Configure SD-WAN zones. The structure of `zone` block is documented below.
        """
        if app_perf_log_period is not None:
            pulumi.set(__self__, "app_perf_log_period", app_perf_log_period)
        if duplication_max_num is not None:
            pulumi.set(__self__, "duplication_max_num", duplication_max_num)
        if duplications is not None:
            pulumi.set(__self__, "duplications", duplications)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fail_alert_interfaces is not None:
            pulumi.set(__self__, "fail_alert_interfaces", fail_alert_interfaces)
        if fail_detect is not None:
            pulumi.set(__self__, "fail_detect", fail_detect)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if load_balance_mode is not None:
            pulumi.set(__self__, "load_balance_mode", load_balance_mode)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if neighbor_hold_boot_time is not None:
            pulumi.set(__self__, "neighbor_hold_boot_time", neighbor_hold_boot_time)
        if neighbor_hold_down is not None:
            pulumi.set(__self__, "neighbor_hold_down", neighbor_hold_down)
        if neighbor_hold_down_time is not None:
            pulumi.set(__self__, "neighbor_hold_down_time", neighbor_hold_down_time)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if speedtest_bypass_routing is not None:
            pulumi.set(__self__, "speedtest_bypass_routing", speedtest_bypass_routing)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="appPerfLogPeriod")
    def app_perf_log_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval in seconds that applicationperformance logs are generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "app_perf_log_period")

    @app_perf_log_period.setter
    def app_perf_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_perf_log_period", value)

    @property
    @pulumi.getter(name="duplicationMaxNum")
    def duplication_max_num(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of interface members a packet is duplicated in the SD-WAN zone (2 - 4, default = 2; if set to 3, the original packet plus 2 more copies are created).
        """
        return pulumi.get(self, "duplication_max_num")

    @duplication_max_num.setter
    def duplication_max_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duplication_max_num", value)

    @property
    @pulumi.getter
    def duplications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationArgs']]]]:
        """
        Create SD-WAN duplication rule. The structure of `duplication` block is documented below.
        """
        return pulumi.get(self, "duplications")

    @duplications.setter
    def duplications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationArgs']]]]):
        pulumi.set(self, "duplications", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="failAlertInterfaces")
    def fail_alert_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanFailAlertInterfaceArgs']]]]:
        """
        Physical interfaces that will be alerted. The structure of `fail_alert_interfaces` block is documented below.
        """
        return pulumi.get(self, "fail_alert_interfaces")

    @fail_alert_interfaces.setter
    def fail_alert_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanFailAlertInterfaceArgs']]]]):
        pulumi.set(self, "fail_alert_interfaces", value)

    @property
    @pulumi.getter(name="failDetect")
    def fail_detect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN Internet connection status checking (failure detection). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fail_detect")

    @fail_detect.setter
    def fail_detect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_detect", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckArgs']]]]:
        """
        SD-WAN status checking or health checking. Identify a server on the Internet and determine how SD-WAN verifies that the FortiGate can communicate with it. The structure of `health_check` block is documented below.
        """
        return pulumi.get(self, "health_checks")

    @health_checks.setter
    def health_checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckArgs']]]]):
        pulumi.set(self, "health_checks", value)

    @property
    @pulumi.getter(name="loadBalanceMode")
    def load_balance_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Algorithm or mode to use for load balancing Internet traffic to SD-WAN members. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`, `measured-volume-based`.
        """
        return pulumi.get(self, "load_balance_mode")

    @load_balance_mode.setter
    def load_balance_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balance_mode", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanMemberArgs']]]]:
        """
        FortiGate interfaces added to the SD-WAN. The structure of `members` block is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="neighborHoldBootTime")
    def neighbor_hold_boot_time(self) -> Optional[pulumi.Input[int]]:
        """
        Waiting period in seconds when switching from the primary neighbor to the secondary neighbor from the neighbor start. (0 - 10000000, default = 0).
        """
        return pulumi.get(self, "neighbor_hold_boot_time")

    @neighbor_hold_boot_time.setter
    def neighbor_hold_boot_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "neighbor_hold_boot_time", value)

    @property
    @pulumi.getter(name="neighborHoldDown")
    def neighbor_hold_down(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable hold switching from the secondary neighbor to the primary neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "neighbor_hold_down")

    @neighbor_hold_down.setter
    def neighbor_hold_down(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbor_hold_down", value)

    @property
    @pulumi.getter(name="neighborHoldDownTime")
    def neighbor_hold_down_time(self) -> Optional[pulumi.Input[int]]:
        """
        Waiting period in seconds when switching from the secondary neighbor to the primary neighbor when hold-down is disabled. (0 - 10000000, default = 0).
        """
        return pulumi.get(self, "neighbor_hold_down_time")

    @neighbor_hold_down_time.setter
    def neighbor_hold_down_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "neighbor_hold_down_time", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanNeighborArgs']]]]:
        """
        Create SD-WAN neighbor from BGP neighbor table to control route advertisements according to SLA status. The structure of `neighbor` block is documented below.
        """
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanNeighborArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceArgs']]]]:
        """
        Create SD-WAN rules (also called services) to control how sessions are distributed to interfaces in the SD-WAN. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="speedtestBypassRouting")
    def speedtest_bypass_routing(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bypass routing when speedtest on a SD-WAN member. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "speedtest_bypass_routing")

    @speedtest_bypass_routing.setter
    def speedtest_bypass_routing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speedtest_bypass_routing", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanZoneArgs']]]]:
        """
        Configure SD-WAN zones. The structure of `zone` block is documented below.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanZoneArgs']]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class _SdwanState:
    def __init__(__self__, *,
                 app_perf_log_period: Optional[pulumi.Input[int]] = None,
                 duplication_max_num: Optional[pulumi.Input[int]] = None,
                 duplications: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanFailAlertInterfaceArgs']]]] = None,
                 fail_detect: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckArgs']]]] = None,
                 load_balance_mode: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanMemberArgs']]]] = None,
                 neighbor_hold_boot_time: Optional[pulumi.Input[int]] = None,
                 neighbor_hold_down: Optional[pulumi.Input[str]] = None,
                 neighbor_hold_down_time: Optional[pulumi.Input[int]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanNeighborArgs']]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceArgs']]]] = None,
                 speedtest_bypass_routing: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanZoneArgs']]]] = None):
        """
        Input properties used for looking up and filtering Sdwan resources.
        :param pulumi.Input[int] app_perf_log_period: Time interval in seconds that applicationperformance logs are generated (0 - 3600, default = 0).
        :param pulumi.Input[int] duplication_max_num: Maximum number of interface members a packet is duplicated in the SD-WAN zone (2 - 4, default = 2; if set to 3, the original packet plus 2 more copies are created).
        :param pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationArgs']]] duplications: Create SD-WAN duplication rule. The structure of `duplication` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input['SdwanFailAlertInterfaceArgs']]] fail_alert_interfaces: Physical interfaces that will be alerted. The structure of `fail_alert_interfaces` block is documented below.
        :param pulumi.Input[str] fail_detect: Enable/disable SD-WAN Internet connection status checking (failure detection). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckArgs']]] health_checks: SD-WAN status checking or health checking. Identify a server on the Internet and determine how SD-WAN verifies that the FortiGate can communicate with it. The structure of `health_check` block is documented below.
        :param pulumi.Input[str] load_balance_mode: Algorithm or mode to use for load balancing Internet traffic to SD-WAN members. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`, `measured-volume-based`.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanMemberArgs']]] members: FortiGate interfaces added to the SD-WAN. The structure of `members` block is documented below.
        :param pulumi.Input[int] neighbor_hold_boot_time: Waiting period in seconds when switching from the primary neighbor to the secondary neighbor from the neighbor start. (0 - 10000000, default = 0).
        :param pulumi.Input[str] neighbor_hold_down: Enable/disable hold switching from the secondary neighbor to the primary neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] neighbor_hold_down_time: Waiting period in seconds when switching from the secondary neighbor to the primary neighbor when hold-down is disabled. (0 - 10000000, default = 0).
        :param pulumi.Input[Sequence[pulumi.Input['SdwanNeighborArgs']]] neighbors: Create SD-WAN neighbor from BGP neighbor table to control route advertisements according to SLA status. The structure of `neighbor` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceArgs']]] services: Create SD-WAN rules (also called services) to control how sessions are distributed to interfaces in the SD-WAN. The structure of `service` block is documented below.
        :param pulumi.Input[str] speedtest_bypass_routing: Enable/disable bypass routing when speedtest on a SD-WAN member. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable SD-WAN. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanZoneArgs']]] zones: Configure SD-WAN zones. The structure of `zone` block is documented below.
        """
        if app_perf_log_period is not None:
            pulumi.set(__self__, "app_perf_log_period", app_perf_log_period)
        if duplication_max_num is not None:
            pulumi.set(__self__, "duplication_max_num", duplication_max_num)
        if duplications is not None:
            pulumi.set(__self__, "duplications", duplications)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fail_alert_interfaces is not None:
            pulumi.set(__self__, "fail_alert_interfaces", fail_alert_interfaces)
        if fail_detect is not None:
            pulumi.set(__self__, "fail_detect", fail_detect)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if load_balance_mode is not None:
            pulumi.set(__self__, "load_balance_mode", load_balance_mode)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if neighbor_hold_boot_time is not None:
            pulumi.set(__self__, "neighbor_hold_boot_time", neighbor_hold_boot_time)
        if neighbor_hold_down is not None:
            pulumi.set(__self__, "neighbor_hold_down", neighbor_hold_down)
        if neighbor_hold_down_time is not None:
            pulumi.set(__self__, "neighbor_hold_down_time", neighbor_hold_down_time)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if speedtest_bypass_routing is not None:
            pulumi.set(__self__, "speedtest_bypass_routing", speedtest_bypass_routing)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="appPerfLogPeriod")
    def app_perf_log_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval in seconds that applicationperformance logs are generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "app_perf_log_period")

    @app_perf_log_period.setter
    def app_perf_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_perf_log_period", value)

    @property
    @pulumi.getter(name="duplicationMaxNum")
    def duplication_max_num(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of interface members a packet is duplicated in the SD-WAN zone (2 - 4, default = 2; if set to 3, the original packet plus 2 more copies are created).
        """
        return pulumi.get(self, "duplication_max_num")

    @duplication_max_num.setter
    def duplication_max_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duplication_max_num", value)

    @property
    @pulumi.getter
    def duplications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationArgs']]]]:
        """
        Create SD-WAN duplication rule. The structure of `duplication` block is documented below.
        """
        return pulumi.get(self, "duplications")

    @duplications.setter
    def duplications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationArgs']]]]):
        pulumi.set(self, "duplications", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="failAlertInterfaces")
    def fail_alert_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanFailAlertInterfaceArgs']]]]:
        """
        Physical interfaces that will be alerted. The structure of `fail_alert_interfaces` block is documented below.
        """
        return pulumi.get(self, "fail_alert_interfaces")

    @fail_alert_interfaces.setter
    def fail_alert_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanFailAlertInterfaceArgs']]]]):
        pulumi.set(self, "fail_alert_interfaces", value)

    @property
    @pulumi.getter(name="failDetect")
    def fail_detect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN Internet connection status checking (failure detection). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fail_detect")

    @fail_detect.setter
    def fail_detect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_detect", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckArgs']]]]:
        """
        SD-WAN status checking or health checking. Identify a server on the Internet and determine how SD-WAN verifies that the FortiGate can communicate with it. The structure of `health_check` block is documented below.
        """
        return pulumi.get(self, "health_checks")

    @health_checks.setter
    def health_checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckArgs']]]]):
        pulumi.set(self, "health_checks", value)

    @property
    @pulumi.getter(name="loadBalanceMode")
    def load_balance_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Algorithm or mode to use for load balancing Internet traffic to SD-WAN members. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`, `measured-volume-based`.
        """
        return pulumi.get(self, "load_balance_mode")

    @load_balance_mode.setter
    def load_balance_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balance_mode", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanMemberArgs']]]]:
        """
        FortiGate interfaces added to the SD-WAN. The structure of `members` block is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="neighborHoldBootTime")
    def neighbor_hold_boot_time(self) -> Optional[pulumi.Input[int]]:
        """
        Waiting period in seconds when switching from the primary neighbor to the secondary neighbor from the neighbor start. (0 - 10000000, default = 0).
        """
        return pulumi.get(self, "neighbor_hold_boot_time")

    @neighbor_hold_boot_time.setter
    def neighbor_hold_boot_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "neighbor_hold_boot_time", value)

    @property
    @pulumi.getter(name="neighborHoldDown")
    def neighbor_hold_down(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable hold switching from the secondary neighbor to the primary neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "neighbor_hold_down")

    @neighbor_hold_down.setter
    def neighbor_hold_down(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbor_hold_down", value)

    @property
    @pulumi.getter(name="neighborHoldDownTime")
    def neighbor_hold_down_time(self) -> Optional[pulumi.Input[int]]:
        """
        Waiting period in seconds when switching from the secondary neighbor to the primary neighbor when hold-down is disabled. (0 - 10000000, default = 0).
        """
        return pulumi.get(self, "neighbor_hold_down_time")

    @neighbor_hold_down_time.setter
    def neighbor_hold_down_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "neighbor_hold_down_time", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanNeighborArgs']]]]:
        """
        Create SD-WAN neighbor from BGP neighbor table to control route advertisements according to SLA status. The structure of `neighbor` block is documented below.
        """
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanNeighborArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceArgs']]]]:
        """
        Create SD-WAN rules (also called services) to control how sessions are distributed to interfaces in the SD-WAN. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="speedtestBypassRouting")
    def speedtest_bypass_routing(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bypass routing when speedtest on a SD-WAN member. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "speedtest_bypass_routing")

    @speedtest_bypass_routing.setter
    def speedtest_bypass_routing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speedtest_bypass_routing", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanZoneArgs']]]]:
        """
        Configure SD-WAN zones. The structure of `zone` block is documented below.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanZoneArgs']]]]):
        pulumi.set(self, "zones", value)


class Sdwan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_perf_log_period: Optional[pulumi.Input[int]] = None,
                 duplication_max_num: Optional[pulumi.Input[int]] = None,
                 duplications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanDuplicationArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanFailAlertInterfaceArgs']]]]] = None,
                 fail_detect: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanHealthCheckArgs']]]]] = None,
                 load_balance_mode: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanMemberArgs']]]]] = None,
                 neighbor_hold_boot_time: Optional[pulumi.Input[int]] = None,
                 neighbor_hold_down: Optional[pulumi.Input[str]] = None,
                 neighbor_hold_down_time: Optional[pulumi.Input[int]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanNeighborArgs']]]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanServiceArgs']]]]] = None,
                 speedtest_bypass_routing: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanZoneArgs']]]]] = None,
                 __props__=None):
        """
        Configure redundant internet connections using SD-WAN (formerly virtual WAN link). Applies to FortiOS Version `>= 6.4.1`.

        ## Import

        System Sdwan can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/sdwan:Sdwan labelname SystemSdwan
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/sdwan:Sdwan labelname SystemSdwan
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] app_perf_log_period: Time interval in seconds that applicationperformance logs are generated (0 - 3600, default = 0).
        :param pulumi.Input[int] duplication_max_num: Maximum number of interface members a packet is duplicated in the SD-WAN zone (2 - 4, default = 2; if set to 3, the original packet plus 2 more copies are created).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanDuplicationArgs']]]] duplications: Create SD-WAN duplication rule. The structure of `duplication` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanFailAlertInterfaceArgs']]]] fail_alert_interfaces: Physical interfaces that will be alerted. The structure of `fail_alert_interfaces` block is documented below.
        :param pulumi.Input[str] fail_detect: Enable/disable SD-WAN Internet connection status checking (failure detection). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanHealthCheckArgs']]]] health_checks: SD-WAN status checking or health checking. Identify a server on the Internet and determine how SD-WAN verifies that the FortiGate can communicate with it. The structure of `health_check` block is documented below.
        :param pulumi.Input[str] load_balance_mode: Algorithm or mode to use for load balancing Internet traffic to SD-WAN members. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`, `measured-volume-based`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanMemberArgs']]]] members: FortiGate interfaces added to the SD-WAN. The structure of `members` block is documented below.
        :param pulumi.Input[int] neighbor_hold_boot_time: Waiting period in seconds when switching from the primary neighbor to the secondary neighbor from the neighbor start. (0 - 10000000, default = 0).
        :param pulumi.Input[str] neighbor_hold_down: Enable/disable hold switching from the secondary neighbor to the primary neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] neighbor_hold_down_time: Waiting period in seconds when switching from the secondary neighbor to the primary neighbor when hold-down is disabled. (0 - 10000000, default = 0).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanNeighborArgs']]]] neighbors: Create SD-WAN neighbor from BGP neighbor table to control route advertisements according to SLA status. The structure of `neighbor` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanServiceArgs']]]] services: Create SD-WAN rules (also called services) to control how sessions are distributed to interfaces in the SD-WAN. The structure of `service` block is documented below.
        :param pulumi.Input[str] speedtest_bypass_routing: Enable/disable bypass routing when speedtest on a SD-WAN member. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable SD-WAN. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanZoneArgs']]]] zones: Configure SD-WAN zones. The structure of `zone` block is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SdwanArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure redundant internet connections using SD-WAN (formerly virtual WAN link). Applies to FortiOS Version `>= 6.4.1`.

        ## Import

        System Sdwan can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/sdwan:Sdwan labelname SystemSdwan
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/sdwan:Sdwan labelname SystemSdwan
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SdwanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SdwanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_perf_log_period: Optional[pulumi.Input[int]] = None,
                 duplication_max_num: Optional[pulumi.Input[int]] = None,
                 duplications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanDuplicationArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanFailAlertInterfaceArgs']]]]] = None,
                 fail_detect: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanHealthCheckArgs']]]]] = None,
                 load_balance_mode: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanMemberArgs']]]]] = None,
                 neighbor_hold_boot_time: Optional[pulumi.Input[int]] = None,
                 neighbor_hold_down: Optional[pulumi.Input[str]] = None,
                 neighbor_hold_down_time: Optional[pulumi.Input[int]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanNeighborArgs']]]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanServiceArgs']]]]] = None,
                 speedtest_bypass_routing: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanZoneArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SdwanArgs.__new__(SdwanArgs)

            __props__.__dict__["app_perf_log_period"] = app_perf_log_period
            __props__.__dict__["duplication_max_num"] = duplication_max_num
            __props__.__dict__["duplications"] = duplications
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fail_alert_interfaces"] = fail_alert_interfaces
            __props__.__dict__["fail_detect"] = fail_detect
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["health_checks"] = health_checks
            __props__.__dict__["load_balance_mode"] = load_balance_mode
            __props__.__dict__["members"] = members
            __props__.__dict__["neighbor_hold_boot_time"] = neighbor_hold_boot_time
            __props__.__dict__["neighbor_hold_down"] = neighbor_hold_down
            __props__.__dict__["neighbor_hold_down_time"] = neighbor_hold_down_time
            __props__.__dict__["neighbors"] = neighbors
            __props__.__dict__["services"] = services
            __props__.__dict__["speedtest_bypass_routing"] = speedtest_bypass_routing
            __props__.__dict__["status"] = status
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["zones"] = zones
        super(Sdwan, __self__).__init__(
            'fortios:system/sdwan:Sdwan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_perf_log_period: Optional[pulumi.Input[int]] = None,
            duplication_max_num: Optional[pulumi.Input[int]] = None,
            duplications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanDuplicationArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fail_alert_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanFailAlertInterfaceArgs']]]]] = None,
            fail_detect: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            health_checks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanHealthCheckArgs']]]]] = None,
            load_balance_mode: Optional[pulumi.Input[str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanMemberArgs']]]]] = None,
            neighbor_hold_boot_time: Optional[pulumi.Input[int]] = None,
            neighbor_hold_down: Optional[pulumi.Input[str]] = None,
            neighbor_hold_down_time: Optional[pulumi.Input[int]] = None,
            neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanNeighborArgs']]]]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanServiceArgs']]]]] = None,
            speedtest_bypass_routing: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanZoneArgs']]]]] = None) -> 'Sdwan':
        """
        Get an existing Sdwan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] app_perf_log_period: Time interval in seconds that applicationperformance logs are generated (0 - 3600, default = 0).
        :param pulumi.Input[int] duplication_max_num: Maximum number of interface members a packet is duplicated in the SD-WAN zone (2 - 4, default = 2; if set to 3, the original packet plus 2 more copies are created).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanDuplicationArgs']]]] duplications: Create SD-WAN duplication rule. The structure of `duplication` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanFailAlertInterfaceArgs']]]] fail_alert_interfaces: Physical interfaces that will be alerted. The structure of `fail_alert_interfaces` block is documented below.
        :param pulumi.Input[str] fail_detect: Enable/disable SD-WAN Internet connection status checking (failure detection). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanHealthCheckArgs']]]] health_checks: SD-WAN status checking or health checking. Identify a server on the Internet and determine how SD-WAN verifies that the FortiGate can communicate with it. The structure of `health_check` block is documented below.
        :param pulumi.Input[str] load_balance_mode: Algorithm or mode to use for load balancing Internet traffic to SD-WAN members. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`, `measured-volume-based`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanMemberArgs']]]] members: FortiGate interfaces added to the SD-WAN. The structure of `members` block is documented below.
        :param pulumi.Input[int] neighbor_hold_boot_time: Waiting period in seconds when switching from the primary neighbor to the secondary neighbor from the neighbor start. (0 - 10000000, default = 0).
        :param pulumi.Input[str] neighbor_hold_down: Enable/disable hold switching from the secondary neighbor to the primary neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] neighbor_hold_down_time: Waiting period in seconds when switching from the secondary neighbor to the primary neighbor when hold-down is disabled. (0 - 10000000, default = 0).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanNeighborArgs']]]] neighbors: Create SD-WAN neighbor from BGP neighbor table to control route advertisements according to SLA status. The structure of `neighbor` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanServiceArgs']]]] services: Create SD-WAN rules (also called services) to control how sessions are distributed to interfaces in the SD-WAN. The structure of `service` block is documented below.
        :param pulumi.Input[str] speedtest_bypass_routing: Enable/disable bypass routing when speedtest on a SD-WAN member. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable SD-WAN. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SdwanZoneArgs']]]] zones: Configure SD-WAN zones. The structure of `zone` block is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SdwanState.__new__(_SdwanState)

        __props__.__dict__["app_perf_log_period"] = app_perf_log_period
        __props__.__dict__["duplication_max_num"] = duplication_max_num
        __props__.__dict__["duplications"] = duplications
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fail_alert_interfaces"] = fail_alert_interfaces
        __props__.__dict__["fail_detect"] = fail_detect
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["health_checks"] = health_checks
        __props__.__dict__["load_balance_mode"] = load_balance_mode
        __props__.__dict__["members"] = members
        __props__.__dict__["neighbor_hold_boot_time"] = neighbor_hold_boot_time
        __props__.__dict__["neighbor_hold_down"] = neighbor_hold_down
        __props__.__dict__["neighbor_hold_down_time"] = neighbor_hold_down_time
        __props__.__dict__["neighbors"] = neighbors
        __props__.__dict__["services"] = services
        __props__.__dict__["speedtest_bypass_routing"] = speedtest_bypass_routing
        __props__.__dict__["status"] = status
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["zones"] = zones
        return Sdwan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appPerfLogPeriod")
    def app_perf_log_period(self) -> pulumi.Output[int]:
        """
        Time interval in seconds that applicationperformance logs are generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "app_perf_log_period")

    @property
    @pulumi.getter(name="duplicationMaxNum")
    def duplication_max_num(self) -> pulumi.Output[int]:
        """
        Maximum number of interface members a packet is duplicated in the SD-WAN zone (2 - 4, default = 2; if set to 3, the original packet plus 2 more copies are created).
        """
        return pulumi.get(self, "duplication_max_num")

    @property
    @pulumi.getter
    def duplications(self) -> pulumi.Output[Optional[Sequence['outputs.SdwanDuplication']]]:
        """
        Create SD-WAN duplication rule. The structure of `duplication` block is documented below.
        """
        return pulumi.get(self, "duplications")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="failAlertInterfaces")
    def fail_alert_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.SdwanFailAlertInterface']]]:
        """
        Physical interfaces that will be alerted. The structure of `fail_alert_interfaces` block is documented below.
        """
        return pulumi.get(self, "fail_alert_interfaces")

    @property
    @pulumi.getter(name="failDetect")
    def fail_detect(self) -> pulumi.Output[str]:
        """
        Enable/disable SD-WAN Internet connection status checking (failure detection). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fail_detect")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> pulumi.Output[Optional[Sequence['outputs.SdwanHealthCheck']]]:
        """
        SD-WAN status checking or health checking. Identify a server on the Internet and determine how SD-WAN verifies that the FortiGate can communicate with it. The structure of `health_check` block is documented below.
        """
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="loadBalanceMode")
    def load_balance_mode(self) -> pulumi.Output[str]:
        """
        Algorithm or mode to use for load balancing Internet traffic to SD-WAN members. Valid values: `source-ip-based`, `weight-based`, `usage-based`, `source-dest-ip-based`, `measured-volume-based`.
        """
        return pulumi.get(self, "load_balance_mode")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Optional[Sequence['outputs.SdwanMember']]]:
        """
        FortiGate interfaces added to the SD-WAN. The structure of `members` block is documented below.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="neighborHoldBootTime")
    def neighbor_hold_boot_time(self) -> pulumi.Output[int]:
        """
        Waiting period in seconds when switching from the primary neighbor to the secondary neighbor from the neighbor start. (0 - 10000000, default = 0).
        """
        return pulumi.get(self, "neighbor_hold_boot_time")

    @property
    @pulumi.getter(name="neighborHoldDown")
    def neighbor_hold_down(self) -> pulumi.Output[str]:
        """
        Enable/disable hold switching from the secondary neighbor to the primary neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "neighbor_hold_down")

    @property
    @pulumi.getter(name="neighborHoldDownTime")
    def neighbor_hold_down_time(self) -> pulumi.Output[int]:
        """
        Waiting period in seconds when switching from the secondary neighbor to the primary neighbor when hold-down is disabled. (0 - 10000000, default = 0).
        """
        return pulumi.get(self, "neighbor_hold_down_time")

    @property
    @pulumi.getter
    def neighbors(self) -> pulumi.Output[Optional[Sequence['outputs.SdwanNeighbor']]]:
        """
        Create SD-WAN neighbor from BGP neighbor table to control route advertisements according to SLA status. The structure of `neighbor` block is documented below.
        """
        return pulumi.get(self, "neighbors")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Optional[Sequence['outputs.SdwanService']]]:
        """
        Create SD-WAN rules (also called services) to control how sessions are distributed to interfaces in the SD-WAN. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="speedtestBypassRouting")
    def speedtest_bypass_routing(self) -> pulumi.Output[str]:
        """
        Enable/disable bypass routing when speedtest on a SD-WAN member. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "speedtest_bypass_routing")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable SD-WAN. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Sequence['outputs.SdwanZone']]:
        """
        Configure SD-WAN zones. The structure of `zone` block is documented below.
        """
        return pulumi.get(self, "zones")

