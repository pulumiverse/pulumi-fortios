# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LicenseFortiflexArgs', 'LicenseFortiflex']

@pulumi.input_type
class LicenseFortiflexArgs:
    def __init__(__self__, *,
                 token: pulumi.Input[str],
                 proxy_url: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LicenseFortiflex resource.
        :param pulumi.Input[str] token: FortiFlex VM license token.
        :param pulumi.Input[str] proxy_url: HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
        """
        pulumi.set(__self__, "token", token)
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        """
        FortiFlex VM license token.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)


@pulumi.input_type
class _LicenseFortiflexState:
    def __init__(__self__, *,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LicenseFortiflex resources.
        :param pulumi.Input[str] proxy_url: HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
        :param pulumi.Input[str] token: FortiFlex VM license token.
        """
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        FortiFlex VM license token.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


class LicenseFortiflex(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to download VM license using uploaded FortiFlex token for FortiOS. Reboots immediately if successful.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test = fortios.system.LicenseFortiflex("test", token="5FE7B3CE6B606DEB20E3")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] proxy_url: HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
        :param pulumi.Input[str] token: FortiFlex VM license token.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LicenseFortiflexArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to download VM license using uploaded FortiFlex token for FortiOS. Reboots immediately if successful.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test = fortios.system.LicenseFortiflex("test", token="5FE7B3CE6B606DEB20E3")
        ```

        :param str resource_name: The name of the resource.
        :param LicenseFortiflexArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LicenseFortiflexArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LicenseFortiflexArgs.__new__(LicenseFortiflexArgs)

            __props__.__dict__["proxy_url"] = proxy_url
            if token is None and not opts.urn:
                raise TypeError("Missing required property 'token'")
            __props__.__dict__["token"] = token
        super(LicenseFortiflex, __self__).__init__(
            'fortios:system/licenseFortiflex:LicenseFortiflex',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            proxy_url: Optional[pulumi.Input[str]] = None,
            token: Optional[pulumi.Input[str]] = None) -> 'LicenseFortiflex':
        """
        Get an existing LicenseFortiflex resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] proxy_url: HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
        :param pulumi.Input[str] token: FortiFlex VM license token.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LicenseFortiflexState.__new__(_LicenseFortiflexState)

        __props__.__dict__["proxy_url"] = proxy_url
        __props__.__dict__["token"] = token
        return LicenseFortiflex(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> pulumi.Output[Optional[str]]:
        """
        HTTP proxy URL in the form: http://user:pass@proxyip:proxyport.
        """
        return pulumi.get(self, "proxy_url")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        """
        FortiFlex VM license token.
        """
        return pulumi.get(self, "token")

