# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = ['AutomationArgs', 'Automation']

@pulumi.input_type
class AutomationArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Automation resource.
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _AutomationState:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Automation resources.
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Automation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Replacement messages. Applies to FortiOS Version `>= 7.0.0`.

        ## Import

        SystemReplacemsg Automation can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/replacemsg/automation:Automation labelname {{msg_type}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/replacemsg/automation:Automation labelname {{msg_type}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AutomationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Replacement messages. Applies to FortiOS Version `>= 7.0.0`.

        ## Import

        SystemReplacemsg Automation can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/replacemsg/automation:Automation labelname {{msg_type}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/replacemsg/automation:Automation labelname {{msg_type}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param AutomationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutomationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutomationArgs.__new__(AutomationArgs)

            __props__.__dict__["buffer"] = buffer
            __props__.__dict__["format"] = format
            __props__.__dict__["header"] = header
            __props__.__dict__["msg_type"] = msg_type
            __props__.__dict__["vdomparam"] = vdomparam
        super(Automation, __self__).__init__(
            'fortios:system/replacemsg/automation:Automation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            buffer: Optional[pulumi.Input[str]] = None,
            format: Optional[pulumi.Input[str]] = None,
            header: Optional[pulumi.Input[str]] = None,
            msg_type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Automation':
        """
        Get an existing Automation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AutomationState.__new__(_AutomationState)

        __props__.__dict__["buffer"] = buffer
        __props__.__dict__["format"] = format
        __props__.__dict__["header"] = header
        __props__.__dict__["msg_type"] = msg_type
        __props__.__dict__["vdomparam"] = vdomparam
        return Automation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def buffer(self) -> pulumi.Output[Optional[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output[str]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> pulumi.Output[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> pulumi.Output[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

