# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MobiletunnelArgs', 'Mobiletunnel']

@pulumi.input_type
class MobiletunnelArgs:
    def __init__(__self__, *,
                 hash_algorithm: pulumi.Input[str],
                 home_agent: pulumi.Input[str],
                 lifetime: pulumi.Input[int],
                 n_mhae_key_type: pulumi.Input[str],
                 n_mhae_spi: pulumi.Input[int],
                 reg_interval: pulumi.Input[int],
                 reg_retry: pulumi.Input[int],
                 renew_interval: pulumi.Input[int],
                 roaming_interface: pulumi.Input[str],
                 tunnel_mode: pulumi.Input[str],
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 home_address: Optional[pulumi.Input[str]] = None,
                 n_mhae_key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['MobiletunnelNetworkArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Mobiletunnel resource.
        :param pulumi.Input[str] hash_algorithm: Hash Algorithm (Keyed MD5). Valid values: `hmac-md5`.
        :param pulumi.Input[str] home_agent: IPv4 address of the NEMO HA (Format: xxx.xxx.xxx.xxx).
        :param pulumi.Input[int] lifetime: NMMO HA registration request lifetime (180 - 65535 sec, default = 65535).
        :param pulumi.Input[str] n_mhae_key_type: NEMO authentication key type (ascii or base64). Valid values: `ascii`, `base64`.
        :param pulumi.Input[int] n_mhae_spi: NEMO authentication SPI (default: 256).
        :param pulumi.Input[int] reg_interval: NMMO HA registration interval (5 - 300, default = 5).
        :param pulumi.Input[int] reg_retry: Maximum number of NMMO HA registration retries (1 to 30, default = 3).
        :param pulumi.Input[int] renew_interval: Time before lifetime expiraton to send NMMO HA re-registration (5 - 60, default = 60).
        :param pulumi.Input[str] roaming_interface: Select the associated interface name from available options.
        :param pulumi.Input[str] tunnel_mode: NEMO tunnnel mode (GRE tunnel). Valid values: `gre`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] home_address: Home IP address (Format: xxx.xxx.xxx.xxx).
        :param pulumi.Input[str] n_mhae_key: NEMO authentication key.
        :param pulumi.Input[str] name: Tunnel name.
        :param pulumi.Input[Sequence[pulumi.Input['MobiletunnelNetworkArgs']]] networks: NEMO network configuration. The structure of `network` block is documented below.
        :param pulumi.Input[str] status: Enable/disable this mobile tunnel. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "hash_algorithm", hash_algorithm)
        pulumi.set(__self__, "home_agent", home_agent)
        pulumi.set(__self__, "lifetime", lifetime)
        pulumi.set(__self__, "n_mhae_key_type", n_mhae_key_type)
        pulumi.set(__self__, "n_mhae_spi", n_mhae_spi)
        pulumi.set(__self__, "reg_interval", reg_interval)
        pulumi.set(__self__, "reg_retry", reg_retry)
        pulumi.set(__self__, "renew_interval", renew_interval)
        pulumi.set(__self__, "roaming_interface", roaming_interface)
        pulumi.set(__self__, "tunnel_mode", tunnel_mode)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if home_address is not None:
            pulumi.set(__self__, "home_address", home_address)
        if n_mhae_key is not None:
            pulumi.set(__self__, "n_mhae_key", n_mhae_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> pulumi.Input[str]:
        """
        Hash Algorithm (Keyed MD5). Valid values: `hmac-md5`.
        """
        return pulumi.get(self, "hash_algorithm")

    @hash_algorithm.setter
    def hash_algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "hash_algorithm", value)

    @property
    @pulumi.getter(name="homeAgent")
    def home_agent(self) -> pulumi.Input[str]:
        """
        IPv4 address of the NEMO HA (Format: xxx.xxx.xxx.xxx).
        """
        return pulumi.get(self, "home_agent")

    @home_agent.setter
    def home_agent(self, value: pulumi.Input[str]):
        pulumi.set(self, "home_agent", value)

    @property
    @pulumi.getter
    def lifetime(self) -> pulumi.Input[int]:
        """
        NMMO HA registration request lifetime (180 - 65535 sec, default = 65535).
        """
        return pulumi.get(self, "lifetime")

    @lifetime.setter
    def lifetime(self, value: pulumi.Input[int]):
        pulumi.set(self, "lifetime", value)

    @property
    @pulumi.getter(name="nMhaeKeyType")
    def n_mhae_key_type(self) -> pulumi.Input[str]:
        """
        NEMO authentication key type (ascii or base64). Valid values: `ascii`, `base64`.
        """
        return pulumi.get(self, "n_mhae_key_type")

    @n_mhae_key_type.setter
    def n_mhae_key_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "n_mhae_key_type", value)

    @property
    @pulumi.getter(name="nMhaeSpi")
    def n_mhae_spi(self) -> pulumi.Input[int]:
        """
        NEMO authentication SPI (default: 256).
        """
        return pulumi.get(self, "n_mhae_spi")

    @n_mhae_spi.setter
    def n_mhae_spi(self, value: pulumi.Input[int]):
        pulumi.set(self, "n_mhae_spi", value)

    @property
    @pulumi.getter(name="regInterval")
    def reg_interval(self) -> pulumi.Input[int]:
        """
        NMMO HA registration interval (5 - 300, default = 5).
        """
        return pulumi.get(self, "reg_interval")

    @reg_interval.setter
    def reg_interval(self, value: pulumi.Input[int]):
        pulumi.set(self, "reg_interval", value)

    @property
    @pulumi.getter(name="regRetry")
    def reg_retry(self) -> pulumi.Input[int]:
        """
        Maximum number of NMMO HA registration retries (1 to 30, default = 3).
        """
        return pulumi.get(self, "reg_retry")

    @reg_retry.setter
    def reg_retry(self, value: pulumi.Input[int]):
        pulumi.set(self, "reg_retry", value)

    @property
    @pulumi.getter(name="renewInterval")
    def renew_interval(self) -> pulumi.Input[int]:
        """
        Time before lifetime expiraton to send NMMO HA re-registration (5 - 60, default = 60).
        """
        return pulumi.get(self, "renew_interval")

    @renew_interval.setter
    def renew_interval(self, value: pulumi.Input[int]):
        pulumi.set(self, "renew_interval", value)

    @property
    @pulumi.getter(name="roamingInterface")
    def roaming_interface(self) -> pulumi.Input[str]:
        """
        Select the associated interface name from available options.
        """
        return pulumi.get(self, "roaming_interface")

    @roaming_interface.setter
    def roaming_interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "roaming_interface", value)

    @property
    @pulumi.getter(name="tunnelMode")
    def tunnel_mode(self) -> pulumi.Input[str]:
        """
        NEMO tunnnel mode (GRE tunnel). Valid values: `gre`.
        """
        return pulumi.get(self, "tunnel_mode")

    @tunnel_mode.setter
    def tunnel_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_mode", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="homeAddress")
    def home_address(self) -> Optional[pulumi.Input[str]]:
        """
        Home IP address (Format: xxx.xxx.xxx.xxx).
        """
        return pulumi.get(self, "home_address")

    @home_address.setter
    def home_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "home_address", value)

    @property
    @pulumi.getter(name="nMhaeKey")
    def n_mhae_key(self) -> Optional[pulumi.Input[str]]:
        """
        NEMO authentication key.
        """
        return pulumi.get(self, "n_mhae_key")

    @n_mhae_key.setter
    def n_mhae_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n_mhae_key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MobiletunnelNetworkArgs']]]]:
        """
        NEMO network configuration. The structure of `network` block is documented below.
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MobiletunnelNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this mobile tunnel. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _MobiletunnelState:
    def __init__(__self__, *,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hash_algorithm: Optional[pulumi.Input[str]] = None,
                 home_address: Optional[pulumi.Input[str]] = None,
                 home_agent: Optional[pulumi.Input[str]] = None,
                 lifetime: Optional[pulumi.Input[int]] = None,
                 n_mhae_key: Optional[pulumi.Input[str]] = None,
                 n_mhae_key_type: Optional[pulumi.Input[str]] = None,
                 n_mhae_spi: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['MobiletunnelNetworkArgs']]]] = None,
                 reg_interval: Optional[pulumi.Input[int]] = None,
                 reg_retry: Optional[pulumi.Input[int]] = None,
                 renew_interval: Optional[pulumi.Input[int]] = None,
                 roaming_interface: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tunnel_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Mobiletunnel resources.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hash_algorithm: Hash Algorithm (Keyed MD5). Valid values: `hmac-md5`.
        :param pulumi.Input[str] home_address: Home IP address (Format: xxx.xxx.xxx.xxx).
        :param pulumi.Input[str] home_agent: IPv4 address of the NEMO HA (Format: xxx.xxx.xxx.xxx).
        :param pulumi.Input[int] lifetime: NMMO HA registration request lifetime (180 - 65535 sec, default = 65535).
        :param pulumi.Input[str] n_mhae_key: NEMO authentication key.
        :param pulumi.Input[str] n_mhae_key_type: NEMO authentication key type (ascii or base64). Valid values: `ascii`, `base64`.
        :param pulumi.Input[int] n_mhae_spi: NEMO authentication SPI (default: 256).
        :param pulumi.Input[str] name: Tunnel name.
        :param pulumi.Input[Sequence[pulumi.Input['MobiletunnelNetworkArgs']]] networks: NEMO network configuration. The structure of `network` block is documented below.
        :param pulumi.Input[int] reg_interval: NMMO HA registration interval (5 - 300, default = 5).
        :param pulumi.Input[int] reg_retry: Maximum number of NMMO HA registration retries (1 to 30, default = 3).
        :param pulumi.Input[int] renew_interval: Time before lifetime expiraton to send NMMO HA re-registration (5 - 60, default = 60).
        :param pulumi.Input[str] roaming_interface: Select the associated interface name from available options.
        :param pulumi.Input[str] status: Enable/disable this mobile tunnel. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tunnel_mode: NEMO tunnnel mode (GRE tunnel). Valid values: `gre`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hash_algorithm is not None:
            pulumi.set(__self__, "hash_algorithm", hash_algorithm)
        if home_address is not None:
            pulumi.set(__self__, "home_address", home_address)
        if home_agent is not None:
            pulumi.set(__self__, "home_agent", home_agent)
        if lifetime is not None:
            pulumi.set(__self__, "lifetime", lifetime)
        if n_mhae_key is not None:
            pulumi.set(__self__, "n_mhae_key", n_mhae_key)
        if n_mhae_key_type is not None:
            pulumi.set(__self__, "n_mhae_key_type", n_mhae_key_type)
        if n_mhae_spi is not None:
            pulumi.set(__self__, "n_mhae_spi", n_mhae_spi)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if reg_interval is not None:
            pulumi.set(__self__, "reg_interval", reg_interval)
        if reg_retry is not None:
            pulumi.set(__self__, "reg_retry", reg_retry)
        if renew_interval is not None:
            pulumi.set(__self__, "renew_interval", renew_interval)
        if roaming_interface is not None:
            pulumi.set(__self__, "roaming_interface", roaming_interface)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_mode is not None:
            pulumi.set(__self__, "tunnel_mode", tunnel_mode)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Hash Algorithm (Keyed MD5). Valid values: `hmac-md5`.
        """
        return pulumi.get(self, "hash_algorithm")

    @hash_algorithm.setter
    def hash_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_algorithm", value)

    @property
    @pulumi.getter(name="homeAddress")
    def home_address(self) -> Optional[pulumi.Input[str]]:
        """
        Home IP address (Format: xxx.xxx.xxx.xxx).
        """
        return pulumi.get(self, "home_address")

    @home_address.setter
    def home_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "home_address", value)

    @property
    @pulumi.getter(name="homeAgent")
    def home_agent(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the NEMO HA (Format: xxx.xxx.xxx.xxx).
        """
        return pulumi.get(self, "home_agent")

    @home_agent.setter
    def home_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "home_agent", value)

    @property
    @pulumi.getter
    def lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        NMMO HA registration request lifetime (180 - 65535 sec, default = 65535).
        """
        return pulumi.get(self, "lifetime")

    @lifetime.setter
    def lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lifetime", value)

    @property
    @pulumi.getter(name="nMhaeKey")
    def n_mhae_key(self) -> Optional[pulumi.Input[str]]:
        """
        NEMO authentication key.
        """
        return pulumi.get(self, "n_mhae_key")

    @n_mhae_key.setter
    def n_mhae_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n_mhae_key", value)

    @property
    @pulumi.getter(name="nMhaeKeyType")
    def n_mhae_key_type(self) -> Optional[pulumi.Input[str]]:
        """
        NEMO authentication key type (ascii or base64). Valid values: `ascii`, `base64`.
        """
        return pulumi.get(self, "n_mhae_key_type")

    @n_mhae_key_type.setter
    def n_mhae_key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n_mhae_key_type", value)

    @property
    @pulumi.getter(name="nMhaeSpi")
    def n_mhae_spi(self) -> Optional[pulumi.Input[int]]:
        """
        NEMO authentication SPI (default: 256).
        """
        return pulumi.get(self, "n_mhae_spi")

    @n_mhae_spi.setter
    def n_mhae_spi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "n_mhae_spi", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MobiletunnelNetworkArgs']]]]:
        """
        NEMO network configuration. The structure of `network` block is documented below.
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MobiletunnelNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="regInterval")
    def reg_interval(self) -> Optional[pulumi.Input[int]]:
        """
        NMMO HA registration interval (5 - 300, default = 5).
        """
        return pulumi.get(self, "reg_interval")

    @reg_interval.setter
    def reg_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reg_interval", value)

    @property
    @pulumi.getter(name="regRetry")
    def reg_retry(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of NMMO HA registration retries (1 to 30, default = 3).
        """
        return pulumi.get(self, "reg_retry")

    @reg_retry.setter
    def reg_retry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reg_retry", value)

    @property
    @pulumi.getter(name="renewInterval")
    def renew_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time before lifetime expiraton to send NMMO HA re-registration (5 - 60, default = 60).
        """
        return pulumi.get(self, "renew_interval")

    @renew_interval.setter
    def renew_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "renew_interval", value)

    @property
    @pulumi.getter(name="roamingInterface")
    def roaming_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Select the associated interface name from available options.
        """
        return pulumi.get(self, "roaming_interface")

    @roaming_interface.setter
    def roaming_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "roaming_interface", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this mobile tunnel. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tunnelMode")
    def tunnel_mode(self) -> Optional[pulumi.Input[str]]:
        """
        NEMO tunnnel mode (GRE tunnel). Valid values: `gre`.
        """
        return pulumi.get(self, "tunnel_mode")

    @tunnel_mode.setter
    def tunnel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_mode", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Mobiletunnel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hash_algorithm: Optional[pulumi.Input[str]] = None,
                 home_address: Optional[pulumi.Input[str]] = None,
                 home_agent: Optional[pulumi.Input[str]] = None,
                 lifetime: Optional[pulumi.Input[int]] = None,
                 n_mhae_key: Optional[pulumi.Input[str]] = None,
                 n_mhae_key_type: Optional[pulumi.Input[str]] = None,
                 n_mhae_spi: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MobiletunnelNetworkArgs']]]]] = None,
                 reg_interval: Optional[pulumi.Input[int]] = None,
                 reg_retry: Optional[pulumi.Input[int]] = None,
                 renew_interval: Optional[pulumi.Input[int]] = None,
                 roaming_interface: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tunnel_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure Mobile tunnels, an implementation of Network Mobility (NEMO) extensions for Mobile IPv4 RFC5177.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Mobiletunnel("trname",
            hash_algorithm="hmac-md5",
            home_address="0.0.0.0",
            home_agent="1.1.1.1",
            lifetime=65535,
            n_mhae_key="'ENC M2wyM3DcnUhqgich7vsLk5oVuPAI9LTkcFNt0c3jI1ujC6w1XBot7gsRAf2S8X5dagfUnJGhZ5LrQxw21e4y8oXuCOLp8MmaRZbCkxYCAl1wm/wVY3aNzVk2+jE='",
            n_mhae_key_type="ascii",
            n_mhae_spi=256,
            reg_interval=5,
            reg_retry=3,
            renew_interval=60,
            roaming_interface="port3",
            status="disable",
            tunnel_mode="gre")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System MobileTunnel can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/mobiletunnel:Mobiletunnel labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/mobiletunnel:Mobiletunnel labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hash_algorithm: Hash Algorithm (Keyed MD5). Valid values: `hmac-md5`.
        :param pulumi.Input[str] home_address: Home IP address (Format: xxx.xxx.xxx.xxx).
        :param pulumi.Input[str] home_agent: IPv4 address of the NEMO HA (Format: xxx.xxx.xxx.xxx).
        :param pulumi.Input[int] lifetime: NMMO HA registration request lifetime (180 - 65535 sec, default = 65535).
        :param pulumi.Input[str] n_mhae_key: NEMO authentication key.
        :param pulumi.Input[str] n_mhae_key_type: NEMO authentication key type (ascii or base64). Valid values: `ascii`, `base64`.
        :param pulumi.Input[int] n_mhae_spi: NEMO authentication SPI (default: 256).
        :param pulumi.Input[str] name: Tunnel name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MobiletunnelNetworkArgs']]]] networks: NEMO network configuration. The structure of `network` block is documented below.
        :param pulumi.Input[int] reg_interval: NMMO HA registration interval (5 - 300, default = 5).
        :param pulumi.Input[int] reg_retry: Maximum number of NMMO HA registration retries (1 to 30, default = 3).
        :param pulumi.Input[int] renew_interval: Time before lifetime expiraton to send NMMO HA re-registration (5 - 60, default = 60).
        :param pulumi.Input[str] roaming_interface: Select the associated interface name from available options.
        :param pulumi.Input[str] status: Enable/disable this mobile tunnel. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tunnel_mode: NEMO tunnnel mode (GRE tunnel). Valid values: `gre`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MobiletunnelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure Mobile tunnels, an implementation of Network Mobility (NEMO) extensions for Mobile IPv4 RFC5177.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Mobiletunnel("trname",
            hash_algorithm="hmac-md5",
            home_address="0.0.0.0",
            home_agent="1.1.1.1",
            lifetime=65535,
            n_mhae_key="'ENC M2wyM3DcnUhqgich7vsLk5oVuPAI9LTkcFNt0c3jI1ujC6w1XBot7gsRAf2S8X5dagfUnJGhZ5LrQxw21e4y8oXuCOLp8MmaRZbCkxYCAl1wm/wVY3aNzVk2+jE='",
            n_mhae_key_type="ascii",
            n_mhae_spi=256,
            reg_interval=5,
            reg_retry=3,
            renew_interval=60,
            roaming_interface="port3",
            status="disable",
            tunnel_mode="gre")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System MobileTunnel can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/mobiletunnel:Mobiletunnel labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/mobiletunnel:Mobiletunnel labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param MobiletunnelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MobiletunnelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hash_algorithm: Optional[pulumi.Input[str]] = None,
                 home_address: Optional[pulumi.Input[str]] = None,
                 home_agent: Optional[pulumi.Input[str]] = None,
                 lifetime: Optional[pulumi.Input[int]] = None,
                 n_mhae_key: Optional[pulumi.Input[str]] = None,
                 n_mhae_key_type: Optional[pulumi.Input[str]] = None,
                 n_mhae_spi: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MobiletunnelNetworkArgs']]]]] = None,
                 reg_interval: Optional[pulumi.Input[int]] = None,
                 reg_retry: Optional[pulumi.Input[int]] = None,
                 renew_interval: Optional[pulumi.Input[int]] = None,
                 roaming_interface: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tunnel_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MobiletunnelArgs.__new__(MobiletunnelArgs)

            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            if hash_algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'hash_algorithm'")
            __props__.__dict__["hash_algorithm"] = hash_algorithm
            __props__.__dict__["home_address"] = home_address
            if home_agent is None and not opts.urn:
                raise TypeError("Missing required property 'home_agent'")
            __props__.__dict__["home_agent"] = home_agent
            if lifetime is None and not opts.urn:
                raise TypeError("Missing required property 'lifetime'")
            __props__.__dict__["lifetime"] = lifetime
            __props__.__dict__["n_mhae_key"] = None if n_mhae_key is None else pulumi.Output.secret(n_mhae_key)
            if n_mhae_key_type is None and not opts.urn:
                raise TypeError("Missing required property 'n_mhae_key_type'")
            __props__.__dict__["n_mhae_key_type"] = n_mhae_key_type
            if n_mhae_spi is None and not opts.urn:
                raise TypeError("Missing required property 'n_mhae_spi'")
            __props__.__dict__["n_mhae_spi"] = n_mhae_spi
            __props__.__dict__["name"] = name
            __props__.__dict__["networks"] = networks
            if reg_interval is None and not opts.urn:
                raise TypeError("Missing required property 'reg_interval'")
            __props__.__dict__["reg_interval"] = reg_interval
            if reg_retry is None and not opts.urn:
                raise TypeError("Missing required property 'reg_retry'")
            __props__.__dict__["reg_retry"] = reg_retry
            if renew_interval is None and not opts.urn:
                raise TypeError("Missing required property 'renew_interval'")
            __props__.__dict__["renew_interval"] = renew_interval
            if roaming_interface is None and not opts.urn:
                raise TypeError("Missing required property 'roaming_interface'")
            __props__.__dict__["roaming_interface"] = roaming_interface
            __props__.__dict__["status"] = status
            if tunnel_mode is None and not opts.urn:
                raise TypeError("Missing required property 'tunnel_mode'")
            __props__.__dict__["tunnel_mode"] = tunnel_mode
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["nMhaeKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Mobiletunnel, __self__).__init__(
            'fortios:system/mobiletunnel:Mobiletunnel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            hash_algorithm: Optional[pulumi.Input[str]] = None,
            home_address: Optional[pulumi.Input[str]] = None,
            home_agent: Optional[pulumi.Input[str]] = None,
            lifetime: Optional[pulumi.Input[int]] = None,
            n_mhae_key: Optional[pulumi.Input[str]] = None,
            n_mhae_key_type: Optional[pulumi.Input[str]] = None,
            n_mhae_spi: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MobiletunnelNetworkArgs']]]]] = None,
            reg_interval: Optional[pulumi.Input[int]] = None,
            reg_retry: Optional[pulumi.Input[int]] = None,
            renew_interval: Optional[pulumi.Input[int]] = None,
            roaming_interface: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tunnel_mode: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Mobiletunnel':
        """
        Get an existing Mobiletunnel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hash_algorithm: Hash Algorithm (Keyed MD5). Valid values: `hmac-md5`.
        :param pulumi.Input[str] home_address: Home IP address (Format: xxx.xxx.xxx.xxx).
        :param pulumi.Input[str] home_agent: IPv4 address of the NEMO HA (Format: xxx.xxx.xxx.xxx).
        :param pulumi.Input[int] lifetime: NMMO HA registration request lifetime (180 - 65535 sec, default = 65535).
        :param pulumi.Input[str] n_mhae_key: NEMO authentication key.
        :param pulumi.Input[str] n_mhae_key_type: NEMO authentication key type (ascii or base64). Valid values: `ascii`, `base64`.
        :param pulumi.Input[int] n_mhae_spi: NEMO authentication SPI (default: 256).
        :param pulumi.Input[str] name: Tunnel name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MobiletunnelNetworkArgs']]]] networks: NEMO network configuration. The structure of `network` block is documented below.
        :param pulumi.Input[int] reg_interval: NMMO HA registration interval (5 - 300, default = 5).
        :param pulumi.Input[int] reg_retry: Maximum number of NMMO HA registration retries (1 to 30, default = 3).
        :param pulumi.Input[int] renew_interval: Time before lifetime expiraton to send NMMO HA re-registration (5 - 60, default = 60).
        :param pulumi.Input[str] roaming_interface: Select the associated interface name from available options.
        :param pulumi.Input[str] status: Enable/disable this mobile tunnel. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tunnel_mode: NEMO tunnnel mode (GRE tunnel). Valid values: `gre`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MobiletunnelState.__new__(_MobiletunnelState)

        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["hash_algorithm"] = hash_algorithm
        __props__.__dict__["home_address"] = home_address
        __props__.__dict__["home_agent"] = home_agent
        __props__.__dict__["lifetime"] = lifetime
        __props__.__dict__["n_mhae_key"] = n_mhae_key
        __props__.__dict__["n_mhae_key_type"] = n_mhae_key_type
        __props__.__dict__["n_mhae_spi"] = n_mhae_spi
        __props__.__dict__["name"] = name
        __props__.__dict__["networks"] = networks
        __props__.__dict__["reg_interval"] = reg_interval
        __props__.__dict__["reg_retry"] = reg_retry
        __props__.__dict__["renew_interval"] = renew_interval
        __props__.__dict__["roaming_interface"] = roaming_interface
        __props__.__dict__["status"] = status
        __props__.__dict__["tunnel_mode"] = tunnel_mode
        __props__.__dict__["vdomparam"] = vdomparam
        return Mobiletunnel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> pulumi.Output[str]:
        """
        Hash Algorithm (Keyed MD5). Valid values: `hmac-md5`.
        """
        return pulumi.get(self, "hash_algorithm")

    @property
    @pulumi.getter(name="homeAddress")
    def home_address(self) -> pulumi.Output[str]:
        """
        Home IP address (Format: xxx.xxx.xxx.xxx).
        """
        return pulumi.get(self, "home_address")

    @property
    @pulumi.getter(name="homeAgent")
    def home_agent(self) -> pulumi.Output[str]:
        """
        IPv4 address of the NEMO HA (Format: xxx.xxx.xxx.xxx).
        """
        return pulumi.get(self, "home_agent")

    @property
    @pulumi.getter
    def lifetime(self) -> pulumi.Output[int]:
        """
        NMMO HA registration request lifetime (180 - 65535 sec, default = 65535).
        """
        return pulumi.get(self, "lifetime")

    @property
    @pulumi.getter(name="nMhaeKey")
    def n_mhae_key(self) -> pulumi.Output[str]:
        """
        NEMO authentication key.
        """
        return pulumi.get(self, "n_mhae_key")

    @property
    @pulumi.getter(name="nMhaeKeyType")
    def n_mhae_key_type(self) -> pulumi.Output[str]:
        """
        NEMO authentication key type (ascii or base64). Valid values: `ascii`, `base64`.
        """
        return pulumi.get(self, "n_mhae_key_type")

    @property
    @pulumi.getter(name="nMhaeSpi")
    def n_mhae_spi(self) -> pulumi.Output[int]:
        """
        NEMO authentication SPI (default: 256).
        """
        return pulumi.get(self, "n_mhae_spi")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Tunnel name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Output[Optional[Sequence['outputs.MobiletunnelNetwork']]]:
        """
        NEMO network configuration. The structure of `network` block is documented below.
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="regInterval")
    def reg_interval(self) -> pulumi.Output[int]:
        """
        NMMO HA registration interval (5 - 300, default = 5).
        """
        return pulumi.get(self, "reg_interval")

    @property
    @pulumi.getter(name="regRetry")
    def reg_retry(self) -> pulumi.Output[int]:
        """
        Maximum number of NMMO HA registration retries (1 to 30, default = 3).
        """
        return pulumi.get(self, "reg_retry")

    @property
    @pulumi.getter(name="renewInterval")
    def renew_interval(self) -> pulumi.Output[int]:
        """
        Time before lifetime expiraton to send NMMO HA re-registration (5 - 60, default = 60).
        """
        return pulumi.get(self, "renew_interval")

    @property
    @pulumi.getter(name="roamingInterface")
    def roaming_interface(self) -> pulumi.Output[str]:
        """
        Select the associated interface name from available options.
        """
        return pulumi.get(self, "roaming_interface")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable this mobile tunnel. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tunnelMode")
    def tunnel_mode(self) -> pulumi.Output[str]:
        """
        NEMO tunnnel mode (GRE tunnel). Valid values: `gre`.
        """
        return pulumi.get(self, "tunnel_mode")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

