# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['FmArgs', 'Fm']

@pulumi.input_type
class FmArgs:
    def __init__(__self__, *,
                 auto_backup: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ipsec: Optional[pulumi.Input[str]] = None,
                 scheduled_config_restore: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Fm resource.
        :param pulumi.Input[str] auto_backup: Enable/disable automatic backup. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fosid: ID.
        :param pulumi.Input[str] ip: IP address.
        :param pulumi.Input[str] ipsec: Enable/disable IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scheduled_config_restore: Enable/disable scheduled configuration restore. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable FM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdom: VDOM.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if auto_backup is not None:
            pulumi.set(__self__, "auto_backup", auto_backup)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ipsec is not None:
            pulumi.set(__self__, "ipsec", ipsec)
        if scheduled_config_restore is not None:
            pulumi.set(__self__, "scheduled_config_restore", scheduled_config_restore)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="autoBackup")
    def auto_backup(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic backup. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_backup")

    @auto_backup.setter
    def auto_backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_backup", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[str]]:
        """
        ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def ipsec(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipsec")

    @ipsec.setter
    def ipsec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec", value)

    @property
    @pulumi.getter(name="scheduledConfigRestore")
    def scheduled_config_restore(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scheduled configuration restore. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scheduled_config_restore")

    @scheduled_config_restore.setter
    def scheduled_config_restore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduled_config_restore", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM.
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _FmState:
    def __init__(__self__, *,
                 auto_backup: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ipsec: Optional[pulumi.Input[str]] = None,
                 scheduled_config_restore: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Fm resources.
        :param pulumi.Input[str] auto_backup: Enable/disable automatic backup. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fosid: ID.
        :param pulumi.Input[str] ip: IP address.
        :param pulumi.Input[str] ipsec: Enable/disable IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scheduled_config_restore: Enable/disable scheduled configuration restore. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable FM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdom: VDOM.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if auto_backup is not None:
            pulumi.set(__self__, "auto_backup", auto_backup)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ipsec is not None:
            pulumi.set(__self__, "ipsec", ipsec)
        if scheduled_config_restore is not None:
            pulumi.set(__self__, "scheduled_config_restore", scheduled_config_restore)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="autoBackup")
    def auto_backup(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic backup. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_backup")

    @auto_backup.setter
    def auto_backup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_backup", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[str]]:
        """
        ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def ipsec(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipsec")

    @ipsec.setter
    def ipsec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec", value)

    @property
    @pulumi.getter(name="scheduledConfigRestore")
    def scheduled_config_restore(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scheduled configuration restore. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scheduled_config_restore")

    @scheduled_config_restore.setter
    def scheduled_config_restore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduled_config_restore", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM.
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Fm(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_backup: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ipsec: Optional[pulumi.Input[str]] = None,
                 scheduled_config_restore: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure FM. Applies to FortiOS Version `<= 7.0.1`.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Fm("trname",
            auto_backup="disable",
            ip="0.0.0.0",
            ipsec="disable",
            scheduled_config_restore="disable",
            status="disable",
            vdom="root")
        ```

        ## Import

        System Fm can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/fm:Fm labelname SystemFm
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/fm:Fm labelname SystemFm
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_backup: Enable/disable automatic backup. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fosid: ID.
        :param pulumi.Input[str] ip: IP address.
        :param pulumi.Input[str] ipsec: Enable/disable IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scheduled_config_restore: Enable/disable scheduled configuration restore. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable FM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdom: VDOM.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FmArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure FM. Applies to FortiOS Version `<= 7.0.1`.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Fm("trname",
            auto_backup="disable",
            ip="0.0.0.0",
            ipsec="disable",
            scheduled_config_restore="disable",
            status="disable",
            vdom="root")
        ```

        ## Import

        System Fm can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/fm:Fm labelname SystemFm
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/fm:Fm labelname SystemFm
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param FmArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FmArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_backup: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ipsec: Optional[pulumi.Input[str]] = None,
                 scheduled_config_restore: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FmArgs.__new__(FmArgs)

            __props__.__dict__["auto_backup"] = auto_backup
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["ip"] = ip
            __props__.__dict__["ipsec"] = ipsec
            __props__.__dict__["scheduled_config_restore"] = scheduled_config_restore
            __props__.__dict__["status"] = status
            __props__.__dict__["vdom"] = vdom
            __props__.__dict__["vdomparam"] = vdomparam
        super(Fm, __self__).__init__(
            'fortios:system/fm:Fm',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_backup: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[str]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            ipsec: Optional[pulumi.Input[str]] = None,
            scheduled_config_restore: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdom: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Fm':
        """
        Get an existing Fm resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_backup: Enable/disable automatic backup. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fosid: ID.
        :param pulumi.Input[str] ip: IP address.
        :param pulumi.Input[str] ipsec: Enable/disable IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scheduled_config_restore: Enable/disable scheduled configuration restore. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable FM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdom: VDOM.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FmState.__new__(_FmState)

        __props__.__dict__["auto_backup"] = auto_backup
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["ip"] = ip
        __props__.__dict__["ipsec"] = ipsec
        __props__.__dict__["scheduled_config_restore"] = scheduled_config_restore
        __props__.__dict__["status"] = status
        __props__.__dict__["vdom"] = vdom
        __props__.__dict__["vdomparam"] = vdomparam
        return Fm(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoBackup")
    def auto_backup(self) -> pulumi.Output[str]:
        """
        Enable/disable automatic backup. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_backup")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[str]:
        """
        ID.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        """
        IP address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ipsec(self) -> pulumi.Output[str]:
        """
        Enable/disable IPsec. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipsec")

    @property
    @pulumi.getter(name="scheduledConfigRestore")
    def scheduled_config_restore(self) -> pulumi.Output[str]:
        """
        Enable/disable scheduled configuration restore. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scheduled_config_restore")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable FM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdom(self) -> pulumi.Output[str]:
        """
        VDOM.
        """
        return pulumi.get(self, "vdom")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

