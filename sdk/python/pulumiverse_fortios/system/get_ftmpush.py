# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetFtmpushResult',
    'AwaitableGetFtmpushResult',
    'get_ftmpush',
    'get_ftmpush_output',
]

@pulumi.output_type
class GetFtmpushResult:
    """
    A collection of values returned by getFtmpush.
    """
    def __init__(__self__, id=None, proxy=None, server=None, server_cert=None, server_ip=None, server_port=None, status=None, vdomparam=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if proxy and not isinstance(proxy, str):
            raise TypeError("Expected argument 'proxy' to be a str")
        pulumi.set(__self__, "proxy", proxy)
        if server and not isinstance(server, str):
            raise TypeError("Expected argument 'server' to be a str")
        pulumi.set(__self__, "server", server)
        if server_cert and not isinstance(server_cert, str):
            raise TypeError("Expected argument 'server_cert' to be a str")
        pulumi.set(__self__, "server_cert", server_cert)
        if server_ip and not isinstance(server_ip, str):
            raise TypeError("Expected argument 'server_ip' to be a str")
        pulumi.set(__self__, "server_ip", server_ip)
        if server_port and not isinstance(server_port, int):
            raise TypeError("Expected argument 'server_port' to be a int")
        pulumi.set(__self__, "server_port", server_port)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def proxy(self) -> str:
        """
        Enable/disable communication to the proxy server in FortiGuard configuration.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        IPv4 address or domain name of FortiToken Mobile push services server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="serverCert")
    def server_cert(self) -> str:
        """
        Name of the server certificate to be used for SSL (default = Fortinet_Factory).
        """
        return pulumi.get(self, "server_cert")

    @property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> str:
        """
        IPv4 address of FortiToken Mobile push services server (format: xxx.xxx.xxx.xxx).
        """
        return pulumi.get(self, "server_ip")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> int:
        """
        Port to communicate with FortiToken Mobile push services server (1 - 65535, default = 4433).
        """
        return pulumi.get(self, "server_port")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable the use of FortiToken Mobile push services.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetFtmpushResult(GetFtmpushResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFtmpushResult(
            id=self.id,
            proxy=self.proxy,
            server=self.server,
            server_cert=self.server_cert,
            server_ip=self.server_ip,
            server_port=self.server_port,
            status=self.status,
            vdomparam=self.vdomparam)


def get_ftmpush(vdomparam: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFtmpushResult:
    """
    Use this data source to get information on fortios system ftmpush


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:system/getFtmpush:getFtmpush', __args__, opts=opts, typ=GetFtmpushResult).value

    return AwaitableGetFtmpushResult(
        id=pulumi.get(__ret__, 'id'),
        proxy=pulumi.get(__ret__, 'proxy'),
        server=pulumi.get(__ret__, 'server'),
        server_cert=pulumi.get(__ret__, 'server_cert'),
        server_ip=pulumi.get(__ret__, 'server_ip'),
        server_port=pulumi.get(__ret__, 'server_port'),
        status=pulumi.get(__ret__, 'status'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_ftmpush)
def get_ftmpush_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFtmpushResult]:
    """
    Use this data source to get information on fortios system ftmpush


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
