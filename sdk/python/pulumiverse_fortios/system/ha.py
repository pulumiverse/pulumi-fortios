# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HaArgs', 'Ha']

@pulumi.input_type
class HaArgs:
    def __init__(__self__, *,
                 arps: Optional[pulumi.Input[int]] = None,
                 arps_interval: Optional[pulumi.Input[int]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 cpu_threshold: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 evpn_ttl: Optional[pulumi.Input[int]] = None,
                 failover_hold_time: Optional[pulumi.Input[int]] = None,
                 ftp_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gratuitous_arps: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 ha_eth_type: Optional[pulumi.Input[str]] = None,
                 ha_mgmt_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['HaHaMgmtInterfaceArgs']]]] = None,
                 ha_mgmt_status: Optional[pulumi.Input[str]] = None,
                 ha_uptime_diff_margin: Optional[pulumi.Input[int]] = None,
                 hb_interval: Optional[pulumi.Input[int]] = None,
                 hb_interval_in_milliseconds: Optional[pulumi.Input[str]] = None,
                 hb_lost_threshold: Optional[pulumi.Input[int]] = None,
                 hbdev: Optional[pulumi.Input[str]] = None,
                 hc_eth_type: Optional[pulumi.Input[str]] = None,
                 hello_holddown: Optional[pulumi.Input[int]] = None,
                 http_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 imap_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 inter_cluster_session_sync: Optional[pulumi.Input[str]] = None,
                 ipsec_phase2_proposal: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 l2ep_eth_type: Optional[pulumi.Input[str]] = None,
                 link_failed_signal: Optional[pulumi.Input[str]] = None,
                 load_balance_all: Optional[pulumi.Input[str]] = None,
                 logical_sn: Optional[pulumi.Input[str]] = None,
                 memory_based_failover: Optional[pulumi.Input[str]] = None,
                 memory_compatible_mode: Optional[pulumi.Input[str]] = None,
                 memory_failover_flip_timeout: Optional[pulumi.Input[int]] = None,
                 memory_failover_monitor_period: Optional[pulumi.Input[int]] = None,
                 memory_failover_sample_rate: Optional[pulumi.Input[int]] = None,
                 memory_failover_threshold: Optional[pulumi.Input[int]] = None,
                 memory_threshold: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 multicast_ttl: Optional[pulumi.Input[int]] = None,
                 nntp_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[str]] = None,
                 override_wait_time: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pingserver_failover_threshold: Optional[pulumi.Input[int]] = None,
                 pingserver_flip_timeout: Optional[pulumi.Input[int]] = None,
                 pingserver_monitor_interface: Optional[pulumi.Input[str]] = None,
                 pingserver_secondary_force_reset: Optional[pulumi.Input[str]] = None,
                 pingserver_slave_force_reset: Optional[pulumi.Input[str]] = None,
                 pop3_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 route_hold: Optional[pulumi.Input[int]] = None,
                 route_ttl: Optional[pulumi.Input[int]] = None,
                 route_wait: Optional[pulumi.Input[int]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 secondary_vcluster: Optional[pulumi.Input['HaSecondaryVclusterArgs']] = None,
                 session_pickup: Optional[pulumi.Input[str]] = None,
                 session_pickup_connectionless: Optional[pulumi.Input[str]] = None,
                 session_pickup_delay: Optional[pulumi.Input[str]] = None,
                 session_pickup_expectation: Optional[pulumi.Input[str]] = None,
                 session_pickup_nat: Optional[pulumi.Input[str]] = None,
                 session_sync_dev: Optional[pulumi.Input[str]] = None,
                 smtp_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 ssd_failover: Optional[pulumi.Input[str]] = None,
                 standalone_config_sync: Optional[pulumi.Input[str]] = None,
                 standalone_mgmt_vdom: Optional[pulumi.Input[str]] = None,
                 sync_config: Optional[pulumi.Input[str]] = None,
                 sync_packet_balance: Optional[pulumi.Input[str]] = None,
                 unicast_gateway: Optional[pulumi.Input[str]] = None,
                 unicast_hb: Optional[pulumi.Input[str]] = None,
                 unicast_hb_netmask: Optional[pulumi.Input[str]] = None,
                 unicast_hb_peerip: Optional[pulumi.Input[str]] = None,
                 unicast_peers: Optional[pulumi.Input[Sequence[pulumi.Input['HaUnicastPeerArgs']]]] = None,
                 unicast_status: Optional[pulumi.Input[str]] = None,
                 uninterruptible_primary_wait: Optional[pulumi.Input[int]] = None,
                 uninterruptible_upgrade: Optional[pulumi.Input[str]] = None,
                 upgrade_mode: Optional[pulumi.Input[str]] = None,
                 vcluster2: Optional[pulumi.Input[str]] = None,
                 vcluster_id: Optional[pulumi.Input[int]] = None,
                 vcluster_status: Optional[pulumi.Input[str]] = None,
                 vclusters: Optional[pulumi.Input[Sequence[pulumi.Input['HaVclusterArgs']]]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ha resource.
        :param pulumi.Input[int] arps: Number of gratuitous ARPs (1 - 60). Lower to reduce traffic. Higher to reduce failover time.
        :param pulumi.Input[int] arps_interval: Time between gratuitous ARPs  (1 - 20 sec). Lower to reduce failover time. Higher to reduce traffic.
        :param pulumi.Input[str] authentication: Enable/disable heartbeat message authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cpu_threshold: Dynamic weighted load balancing CPU usage weight and high and low thresholds.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] encryption: Enable/disable heartbeat message encryption. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] evpn_ttl: HA EVPN FDB TTL on primary box (5 - 3600 sec).
        :param pulumi.Input[int] failover_hold_time: Time to wait before failover (0 - 300 sec, default = 0), to avoid flip.
        :param pulumi.Input[str] ftp_proxy_threshold: Dynamic weighted load balancing weight and high and low number of FTP proxy sessions.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] gratuitous_arps: Enable/disable gratuitous ARPs. Disable if link-failed-signal enabled. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] group_id: Cluster group ID  (0 - 255). Must be the same for all members.
        :param pulumi.Input[str] group_name: Cluster group name. Must be the same for all members.
        :param pulumi.Input[str] ha_direct: Enable/disable using ha-mgmt interface for syslog, SNMP, remote authentication (RADIUS), FortiAnalyzer, and FortiSandbox. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ha_eth_type: HA heartbeat packet Ethertype (4-digit hex).
        :param pulumi.Input[Sequence[pulumi.Input['HaHaMgmtInterfaceArgs']]] ha_mgmt_interfaces: Reserve interfaces to manage individual cluster units. The structure of `ha_mgmt_interfaces` block is documented below.
        :param pulumi.Input[str] ha_mgmt_status: Enable to reserve interfaces to manage individual cluster units. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ha_uptime_diff_margin: Normally you would only reduce this value for failover testing.
        :param pulumi.Input[int] hb_interval: Time between sending heartbeat packets (1 - 20 (100*ms)). Increase to reduce false positives.
        :param pulumi.Input[str] hb_interval_in_milliseconds: Number of milliseconds for each heartbeat interval: 100ms or 10ms. Valid values: `100ms`, `10ms`.
        :param pulumi.Input[int] hb_lost_threshold: Number of lost heartbeats to signal a failure (1 - 60). Increase to reduce false positives.
        :param pulumi.Input[str] hbdev: Heartbeat interfaces. Must be the same for all members.
        :param pulumi.Input[str] hc_eth_type: Transparent mode HA heartbeat packet Ethertype (4-digit hex).
        :param pulumi.Input[int] hello_holddown: Time to wait before changing from hello to work state (5 - 300 sec).
        :param pulumi.Input[str] http_proxy_threshold: Dynamic weighted load balancing weight and high and low number of HTTP proxy sessions.
        :param pulumi.Input[str] imap_proxy_threshold: Dynamic weighted load balancing weight and high and low number of IMAP proxy sessions.
        :param pulumi.Input[str] inter_cluster_session_sync: Enable/disable synchronization of sessions among HA clusters. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipsec_phase2_proposal: IPsec phase2 proposal. Valid values: `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes128gcm`, `aes256gcm`, `chacha20poly1305`.
        :param pulumi.Input[str] key: key
        :param pulumi.Input[str] l2ep_eth_type: Telnet session HA heartbeat packet Ethertype (4-digit hex).
        :param pulumi.Input[str] link_failed_signal: Enable to shut down all interfaces for 1 sec after a failover. Use if gratuitous ARPs do not update network. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] load_balance_all: Enable to load balance TCP sessions. Disable to load balance proxy sessions only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logical_sn: Enable/disable usage of the logical serial number. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] memory_based_failover: Enable/disable memory based failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] memory_compatible_mode: Enable/disable memory compatible mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] memory_failover_flip_timeout: Time to wait between subsequent memory based failovers in minutes (6 - 2147483647, default = 6).
        :param pulumi.Input[int] memory_failover_monitor_period: Duration of high memory usage before memory based failover is triggered in seconds (1 - 300, default = 60).
        :param pulumi.Input[int] memory_failover_sample_rate: Rate at which memory usage is sampled in order to measure memory usage in seconds (1 - 60, default = 1).
        :param pulumi.Input[int] memory_failover_threshold: Memory usage threshold to trigger memory based failover (0 means using conserve mode threshold in system.global).
        :param pulumi.Input[str] memory_threshold: Dynamic weighted load balancing memory usage weight and high and low thresholds.
        :param pulumi.Input[str] mode: HA mode. Must be the same for all members. FGSP requires standalone. Valid values: `standalone`, `a-a`, `a-p`.
        :param pulumi.Input[str] monitor: Interfaces to check for port monitoring (or link failure).
        :param pulumi.Input[int] multicast_ttl: HA multicast TTL on master (5 - 3600 sec).
        :param pulumi.Input[str] nntp_proxy_threshold: Dynamic weighted load balancing weight and high and low number of NNTP proxy sessions.
        :param pulumi.Input[str] override: Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] override_wait_time: Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        :param pulumi.Input[str] password: Cluster password. Must be the same for all members.
        :param pulumi.Input[int] pingserver_failover_threshold: Remote IP monitoring failover threshold (0 - 50).
        :param pulumi.Input[int] pingserver_flip_timeout: Time to wait in minutes before renegotiating after a remote IP monitoring failover.
        :param pulumi.Input[str] pingserver_monitor_interface: Interfaces to check for remote IP monitoring.
        :param pulumi.Input[str] pingserver_secondary_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pingserver_slave_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pop3_proxy_threshold: Dynamic weighted load balancing weight and high and low number of POP3 proxy sessions.
        :param pulumi.Input[int] priority: Increase the priority to select the primary unit (0 - 255).
        :param pulumi.Input[int] route_hold: Time to wait between routing table updates to the cluster (0 - 3600 sec).
        :param pulumi.Input[int] route_ttl: TTL for primary unit routes (5 - 3600 sec). Increase to maintain active routes during failover.
        :param pulumi.Input[int] route_wait: Time to wait before sending new routes to the cluster (0 - 3600 sec).
        :param pulumi.Input[str] schedule: Type of A-A load balancing. Use none if you have external load balancers.
        :param pulumi.Input['HaSecondaryVclusterArgs'] secondary_vcluster: Configure virtual cluster 2. The structure of `secondary_vcluster` block is documented below.
        :param pulumi.Input[str] session_pickup: Enable/disable session pickup. Enabling it can reduce session down time when fail over happens. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_connectionless: Enable/disable UDP and ICMP session sync. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_delay: Enable to sync sessions longer than 30 sec. Only longer lived sessions need to be synced. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_expectation: Enable/disable session helper expectation session sync for FGSP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_nat: Enable/disable NAT session sync for FGSP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_sync_dev: Offload session-sync process to kernel and sync sessions using connected interface(s) directly.
        :param pulumi.Input[str] smtp_proxy_threshold: Dynamic weighted load balancing weight and high and low number of SMTP proxy sessions.
        :param pulumi.Input[str] ssd_failover: Enable/disable automatic HA failover on SSD disk failure. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] standalone_config_sync: Enable/disable FGSP configuration synchronization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] standalone_mgmt_vdom: Enable/disable standalone management VDOM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sync_config: Enable/disable configuration synchronization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sync_packet_balance: Enable/disable HA packet distribution to multiple CPUs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unicast_gateway: Default route gateway for unicast interface.
        :param pulumi.Input[str] unicast_hb: Enable/disable unicast heartbeat. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unicast_hb_netmask: Unicast heartbeat netmask.
        :param pulumi.Input[str] unicast_hb_peerip: Unicast heartbeat peer IP.
        :param pulumi.Input[Sequence[pulumi.Input['HaUnicastPeerArgs']]] unicast_peers: Number of unicast peers. The structure of `unicast_peers` block is documented below.
        :param pulumi.Input[str] unicast_status: Enable/disable unicast connection. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] uninterruptible_primary_wait: Number of minutes the primary HA unit waits before the secondary HA unit is considered upgraded and the system is started before starting its own upgrade (1 - 300, default = 30).
        :param pulumi.Input[str] uninterruptible_upgrade: Enable to upgrade a cluster without blocking network traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] upgrade_mode: The mode to upgrade a cluster. Valid values: `simultaneous`, `uninterruptible`, `local-only`, `secondary-only`.
        :param pulumi.Input[str] vcluster2: Enable/disable virtual cluster 2 for virtual clustering. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] vcluster_id: Cluster ID.
        :param pulumi.Input[str] vcluster_status: Enable/disable virtual cluster for virtual clustering. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['HaVclusterArgs']]] vclusters: Virtual cluster table. The structure of `vcluster` block is documented below.
        :param pulumi.Input[str] vdom: VDOMs in virtual cluster 1.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] weight: Weight-round-robin weight for each cluster unit. Syntax <priority> <weight>.
        """
        if arps is not None:
            pulumi.set(__self__, "arps", arps)
        if arps_interval is not None:
            pulumi.set(__self__, "arps_interval", arps_interval)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if cpu_threshold is not None:
            pulumi.set(__self__, "cpu_threshold", cpu_threshold)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if evpn_ttl is not None:
            pulumi.set(__self__, "evpn_ttl", evpn_ttl)
        if failover_hold_time is not None:
            pulumi.set(__self__, "failover_hold_time", failover_hold_time)
        if ftp_proxy_threshold is not None:
            pulumi.set(__self__, "ftp_proxy_threshold", ftp_proxy_threshold)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gratuitous_arps is not None:
            pulumi.set(__self__, "gratuitous_arps", gratuitous_arps)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if ha_direct is not None:
            pulumi.set(__self__, "ha_direct", ha_direct)
        if ha_eth_type is not None:
            pulumi.set(__self__, "ha_eth_type", ha_eth_type)
        if ha_mgmt_interfaces is not None:
            pulumi.set(__self__, "ha_mgmt_interfaces", ha_mgmt_interfaces)
        if ha_mgmt_status is not None:
            pulumi.set(__self__, "ha_mgmt_status", ha_mgmt_status)
        if ha_uptime_diff_margin is not None:
            pulumi.set(__self__, "ha_uptime_diff_margin", ha_uptime_diff_margin)
        if hb_interval is not None:
            pulumi.set(__self__, "hb_interval", hb_interval)
        if hb_interval_in_milliseconds is not None:
            pulumi.set(__self__, "hb_interval_in_milliseconds", hb_interval_in_milliseconds)
        if hb_lost_threshold is not None:
            pulumi.set(__self__, "hb_lost_threshold", hb_lost_threshold)
        if hbdev is not None:
            pulumi.set(__self__, "hbdev", hbdev)
        if hc_eth_type is not None:
            pulumi.set(__self__, "hc_eth_type", hc_eth_type)
        if hello_holddown is not None:
            pulumi.set(__self__, "hello_holddown", hello_holddown)
        if http_proxy_threshold is not None:
            pulumi.set(__self__, "http_proxy_threshold", http_proxy_threshold)
        if imap_proxy_threshold is not None:
            pulumi.set(__self__, "imap_proxy_threshold", imap_proxy_threshold)
        if inter_cluster_session_sync is not None:
            pulumi.set(__self__, "inter_cluster_session_sync", inter_cluster_session_sync)
        if ipsec_phase2_proposal is not None:
            pulumi.set(__self__, "ipsec_phase2_proposal", ipsec_phase2_proposal)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if l2ep_eth_type is not None:
            pulumi.set(__self__, "l2ep_eth_type", l2ep_eth_type)
        if link_failed_signal is not None:
            pulumi.set(__self__, "link_failed_signal", link_failed_signal)
        if load_balance_all is not None:
            pulumi.set(__self__, "load_balance_all", load_balance_all)
        if logical_sn is not None:
            pulumi.set(__self__, "logical_sn", logical_sn)
        if memory_based_failover is not None:
            pulumi.set(__self__, "memory_based_failover", memory_based_failover)
        if memory_compatible_mode is not None:
            pulumi.set(__self__, "memory_compatible_mode", memory_compatible_mode)
        if memory_failover_flip_timeout is not None:
            pulumi.set(__self__, "memory_failover_flip_timeout", memory_failover_flip_timeout)
        if memory_failover_monitor_period is not None:
            pulumi.set(__self__, "memory_failover_monitor_period", memory_failover_monitor_period)
        if memory_failover_sample_rate is not None:
            pulumi.set(__self__, "memory_failover_sample_rate", memory_failover_sample_rate)
        if memory_failover_threshold is not None:
            pulumi.set(__self__, "memory_failover_threshold", memory_failover_threshold)
        if memory_threshold is not None:
            pulumi.set(__self__, "memory_threshold", memory_threshold)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if multicast_ttl is not None:
            pulumi.set(__self__, "multicast_ttl", multicast_ttl)
        if nntp_proxy_threshold is not None:
            pulumi.set(__self__, "nntp_proxy_threshold", nntp_proxy_threshold)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_wait_time is not None:
            pulumi.set(__self__, "override_wait_time", override_wait_time)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pingserver_failover_threshold is not None:
            pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        if pingserver_flip_timeout is not None:
            pulumi.set(__self__, "pingserver_flip_timeout", pingserver_flip_timeout)
        if pingserver_monitor_interface is not None:
            pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        if pingserver_secondary_force_reset is not None:
            pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        if pingserver_slave_force_reset is not None:
            pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        if pop3_proxy_threshold is not None:
            pulumi.set(__self__, "pop3_proxy_threshold", pop3_proxy_threshold)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if route_hold is not None:
            pulumi.set(__self__, "route_hold", route_hold)
        if route_ttl is not None:
            pulumi.set(__self__, "route_ttl", route_ttl)
        if route_wait is not None:
            pulumi.set(__self__, "route_wait", route_wait)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if secondary_vcluster is not None:
            pulumi.set(__self__, "secondary_vcluster", secondary_vcluster)
        if session_pickup is not None:
            pulumi.set(__self__, "session_pickup", session_pickup)
        if session_pickup_connectionless is not None:
            pulumi.set(__self__, "session_pickup_connectionless", session_pickup_connectionless)
        if session_pickup_delay is not None:
            pulumi.set(__self__, "session_pickup_delay", session_pickup_delay)
        if session_pickup_expectation is not None:
            pulumi.set(__self__, "session_pickup_expectation", session_pickup_expectation)
        if session_pickup_nat is not None:
            pulumi.set(__self__, "session_pickup_nat", session_pickup_nat)
        if session_sync_dev is not None:
            pulumi.set(__self__, "session_sync_dev", session_sync_dev)
        if smtp_proxy_threshold is not None:
            pulumi.set(__self__, "smtp_proxy_threshold", smtp_proxy_threshold)
        if ssd_failover is not None:
            pulumi.set(__self__, "ssd_failover", ssd_failover)
        if standalone_config_sync is not None:
            pulumi.set(__self__, "standalone_config_sync", standalone_config_sync)
        if standalone_mgmt_vdom is not None:
            pulumi.set(__self__, "standalone_mgmt_vdom", standalone_mgmt_vdom)
        if sync_config is not None:
            pulumi.set(__self__, "sync_config", sync_config)
        if sync_packet_balance is not None:
            pulumi.set(__self__, "sync_packet_balance", sync_packet_balance)
        if unicast_gateway is not None:
            pulumi.set(__self__, "unicast_gateway", unicast_gateway)
        if unicast_hb is not None:
            pulumi.set(__self__, "unicast_hb", unicast_hb)
        if unicast_hb_netmask is not None:
            pulumi.set(__self__, "unicast_hb_netmask", unicast_hb_netmask)
        if unicast_hb_peerip is not None:
            pulumi.set(__self__, "unicast_hb_peerip", unicast_hb_peerip)
        if unicast_peers is not None:
            pulumi.set(__self__, "unicast_peers", unicast_peers)
        if unicast_status is not None:
            pulumi.set(__self__, "unicast_status", unicast_status)
        if uninterruptible_primary_wait is not None:
            pulumi.set(__self__, "uninterruptible_primary_wait", uninterruptible_primary_wait)
        if uninterruptible_upgrade is not None:
            pulumi.set(__self__, "uninterruptible_upgrade", uninterruptible_upgrade)
        if upgrade_mode is not None:
            pulumi.set(__self__, "upgrade_mode", upgrade_mode)
        if vcluster2 is not None:
            pulumi.set(__self__, "vcluster2", vcluster2)
        if vcluster_id is not None:
            pulumi.set(__self__, "vcluster_id", vcluster_id)
        if vcluster_status is not None:
            pulumi.set(__self__, "vcluster_status", vcluster_status)
        if vclusters is not None:
            pulumi.set(__self__, "vclusters", vclusters)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def arps(self) -> Optional[pulumi.Input[int]]:
        """
        Number of gratuitous ARPs (1 - 60). Lower to reduce traffic. Higher to reduce failover time.
        """
        return pulumi.get(self, "arps")

    @arps.setter
    def arps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "arps", value)

    @property
    @pulumi.getter(name="arpsInterval")
    def arps_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between gratuitous ARPs  (1 - 20 sec). Lower to reduce failover time. Higher to reduce traffic.
        """
        return pulumi.get(self, "arps_interval")

    @arps_interval.setter
    def arps_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "arps_interval", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable heartbeat message authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="cpuThreshold")
    def cpu_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing CPU usage weight and high and low thresholds.
        """
        return pulumi.get(self, "cpu_threshold")

    @cpu_threshold.setter
    def cpu_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_threshold", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable heartbeat message encryption. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="evpnTtl")
    def evpn_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        HA EVPN FDB TTL on primary box (5 - 3600 sec).
        """
        return pulumi.get(self, "evpn_ttl")

    @evpn_ttl.setter
    def evpn_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "evpn_ttl", value)

    @property
    @pulumi.getter(name="failoverHoldTime")
    def failover_hold_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait before failover (0 - 300 sec, default = 0), to avoid flip.
        """
        return pulumi.get(self, "failover_hold_time")

    @failover_hold_time.setter
    def failover_hold_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failover_hold_time", value)

    @property
    @pulumi.getter(name="ftpProxyThreshold")
    def ftp_proxy_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing weight and high and low number of FTP proxy sessions.
        """
        return pulumi.get(self, "ftp_proxy_threshold")

    @ftp_proxy_threshold.setter
    def ftp_proxy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_proxy_threshold", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="gratuitousArps")
    def gratuitous_arps(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable gratuitous ARPs. Disable if link-failed-signal enabled. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gratuitous_arps")

    @gratuitous_arps.setter
    def gratuitous_arps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gratuitous_arps", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[int]]:
        """
        Cluster group ID  (0 - 255). Must be the same for all members.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster group name. Must be the same for all members.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable using ha-mgmt interface for syslog, SNMP, remote authentication (RADIUS), FortiAnalyzer, and FortiSandbox. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_direct")

    @ha_direct.setter
    def ha_direct(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_direct", value)

    @property
    @pulumi.getter(name="haEthType")
    def ha_eth_type(self) -> Optional[pulumi.Input[str]]:
        """
        HA heartbeat packet Ethertype (4-digit hex).
        """
        return pulumi.get(self, "ha_eth_type")

    @ha_eth_type.setter
    def ha_eth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_eth_type", value)

    @property
    @pulumi.getter(name="haMgmtInterfaces")
    def ha_mgmt_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HaHaMgmtInterfaceArgs']]]]:
        """
        Reserve interfaces to manage individual cluster units. The structure of `ha_mgmt_interfaces` block is documented below.
        """
        return pulumi.get(self, "ha_mgmt_interfaces")

    @ha_mgmt_interfaces.setter
    def ha_mgmt_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HaHaMgmtInterfaceArgs']]]]):
        pulumi.set(self, "ha_mgmt_interfaces", value)

    @property
    @pulumi.getter(name="haMgmtStatus")
    def ha_mgmt_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to reserve interfaces to manage individual cluster units. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_mgmt_status")

    @ha_mgmt_status.setter
    def ha_mgmt_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_mgmt_status", value)

    @property
    @pulumi.getter(name="haUptimeDiffMargin")
    def ha_uptime_diff_margin(self) -> Optional[pulumi.Input[int]]:
        """
        Normally you would only reduce this value for failover testing.
        """
        return pulumi.get(self, "ha_uptime_diff_margin")

    @ha_uptime_diff_margin.setter
    def ha_uptime_diff_margin(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_uptime_diff_margin", value)

    @property
    @pulumi.getter(name="hbInterval")
    def hb_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between sending heartbeat packets (1 - 20 (100*ms)). Increase to reduce false positives.
        """
        return pulumi.get(self, "hb_interval")

    @hb_interval.setter
    def hb_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hb_interval", value)

    @property
    @pulumi.getter(name="hbIntervalInMilliseconds")
    def hb_interval_in_milliseconds(self) -> Optional[pulumi.Input[str]]:
        """
        Number of milliseconds for each heartbeat interval: 100ms or 10ms. Valid values: `100ms`, `10ms`.
        """
        return pulumi.get(self, "hb_interval_in_milliseconds")

    @hb_interval_in_milliseconds.setter
    def hb_interval_in_milliseconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hb_interval_in_milliseconds", value)

    @property
    @pulumi.getter(name="hbLostThreshold")
    def hb_lost_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Number of lost heartbeats to signal a failure (1 - 60). Increase to reduce false positives.
        """
        return pulumi.get(self, "hb_lost_threshold")

    @hb_lost_threshold.setter
    def hb_lost_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hb_lost_threshold", value)

    @property
    @pulumi.getter
    def hbdev(self) -> Optional[pulumi.Input[str]]:
        """
        Heartbeat interfaces. Must be the same for all members.
        """
        return pulumi.get(self, "hbdev")

    @hbdev.setter
    def hbdev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hbdev", value)

    @property
    @pulumi.getter(name="hcEthType")
    def hc_eth_type(self) -> Optional[pulumi.Input[str]]:
        """
        Transparent mode HA heartbeat packet Ethertype (4-digit hex).
        """
        return pulumi.get(self, "hc_eth_type")

    @hc_eth_type.setter
    def hc_eth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hc_eth_type", value)

    @property
    @pulumi.getter(name="helloHolddown")
    def hello_holddown(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait before changing from hello to work state (5 - 300 sec).
        """
        return pulumi.get(self, "hello_holddown")

    @hello_holddown.setter
    def hello_holddown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_holddown", value)

    @property
    @pulumi.getter(name="httpProxyThreshold")
    def http_proxy_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing weight and high and low number of HTTP proxy sessions.
        """
        return pulumi.get(self, "http_proxy_threshold")

    @http_proxy_threshold.setter
    def http_proxy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_proxy_threshold", value)

    @property
    @pulumi.getter(name="imapProxyThreshold")
    def imap_proxy_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing weight and high and low number of IMAP proxy sessions.
        """
        return pulumi.get(self, "imap_proxy_threshold")

    @imap_proxy_threshold.setter
    def imap_proxy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imap_proxy_threshold", value)

    @property
    @pulumi.getter(name="interClusterSessionSync")
    def inter_cluster_session_sync(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable synchronization of sessions among HA clusters. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inter_cluster_session_sync")

    @inter_cluster_session_sync.setter
    def inter_cluster_session_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inter_cluster_session_sync", value)

    @property
    @pulumi.getter(name="ipsecPhase2Proposal")
    def ipsec_phase2_proposal(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec phase2 proposal. Valid values: `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes128gcm`, `aes256gcm`, `chacha20poly1305`.
        """
        return pulumi.get(self, "ipsec_phase2_proposal")

    @ipsec_phase2_proposal.setter
    def ipsec_phase2_proposal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_phase2_proposal", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="l2epEthType")
    def l2ep_eth_type(self) -> Optional[pulumi.Input[str]]:
        """
        Telnet session HA heartbeat packet Ethertype (4-digit hex).
        """
        return pulumi.get(self, "l2ep_eth_type")

    @l2ep_eth_type.setter
    def l2ep_eth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l2ep_eth_type", value)

    @property
    @pulumi.getter(name="linkFailedSignal")
    def link_failed_signal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to shut down all interfaces for 1 sec after a failover. Use if gratuitous ARPs do not update network. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_failed_signal")

    @link_failed_signal.setter
    def link_failed_signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_failed_signal", value)

    @property
    @pulumi.getter(name="loadBalanceAll")
    def load_balance_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to load balance TCP sessions. Disable to load balance proxy sessions only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "load_balance_all")

    @load_balance_all.setter
    def load_balance_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balance_all", value)

    @property
    @pulumi.getter(name="logicalSn")
    def logical_sn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable usage of the logical serial number. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logical_sn")

    @logical_sn.setter
    def logical_sn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logical_sn", value)

    @property
    @pulumi.getter(name="memoryBasedFailover")
    def memory_based_failover(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable memory based failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "memory_based_failover")

    @memory_based_failover.setter
    def memory_based_failover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_based_failover", value)

    @property
    @pulumi.getter(name="memoryCompatibleMode")
    def memory_compatible_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable memory compatible mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "memory_compatible_mode")

    @memory_compatible_mode.setter
    def memory_compatible_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_compatible_mode", value)

    @property
    @pulumi.getter(name="memoryFailoverFlipTimeout")
    def memory_failover_flip_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait between subsequent memory based failovers in minutes (6 - 2147483647, default = 6).
        """
        return pulumi.get(self, "memory_failover_flip_timeout")

    @memory_failover_flip_timeout.setter
    def memory_failover_flip_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_failover_flip_timeout", value)

    @property
    @pulumi.getter(name="memoryFailoverMonitorPeriod")
    def memory_failover_monitor_period(self) -> Optional[pulumi.Input[int]]:
        """
        Duration of high memory usage before memory based failover is triggered in seconds (1 - 300, default = 60).
        """
        return pulumi.get(self, "memory_failover_monitor_period")

    @memory_failover_monitor_period.setter
    def memory_failover_monitor_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_failover_monitor_period", value)

    @property
    @pulumi.getter(name="memoryFailoverSampleRate")
    def memory_failover_sample_rate(self) -> Optional[pulumi.Input[int]]:
        """
        Rate at which memory usage is sampled in order to measure memory usage in seconds (1 - 60, default = 1).
        """
        return pulumi.get(self, "memory_failover_sample_rate")

    @memory_failover_sample_rate.setter
    def memory_failover_sample_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_failover_sample_rate", value)

    @property
    @pulumi.getter(name="memoryFailoverThreshold")
    def memory_failover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Memory usage threshold to trigger memory based failover (0 means using conserve mode threshold in system.global).
        """
        return pulumi.get(self, "memory_failover_threshold")

    @memory_failover_threshold.setter
    def memory_failover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_failover_threshold", value)

    @property
    @pulumi.getter(name="memoryThreshold")
    def memory_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing memory usage weight and high and low thresholds.
        """
        return pulumi.get(self, "memory_threshold")

    @memory_threshold.setter
    def memory_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_threshold", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        HA mode. Must be the same for all members. FGSP requires standalone. Valid values: `standalone`, `a-a`, `a-p`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Interfaces to check for port monitoring (or link failure).
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter(name="multicastTtl")
    def multicast_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        HA multicast TTL on master (5 - 3600 sec).
        """
        return pulumi.get(self, "multicast_ttl")

    @multicast_ttl.setter
    def multicast_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "multicast_ttl", value)

    @property
    @pulumi.getter(name="nntpProxyThreshold")
    def nntp_proxy_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing weight and high and low number of NNTP proxy sessions.
        """
        return pulumi.get(self, "nntp_proxy_threshold")

    @nntp_proxy_threshold.setter
    def nntp_proxy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nntp_proxy_threshold", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> Optional[pulumi.Input[int]]:
        """
        Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        """
        return pulumi.get(self, "override_wait_time")

    @override_wait_time.setter
    def override_wait_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "override_wait_time", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster password. Must be the same for all members.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Remote IP monitoring failover threshold (0 - 50).
        """
        return pulumi.get(self, "pingserver_failover_threshold")

    @pingserver_failover_threshold.setter
    def pingserver_failover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pingserver_failover_threshold", value)

    @property
    @pulumi.getter(name="pingserverFlipTimeout")
    def pingserver_flip_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait in minutes before renegotiating after a remote IP monitoring failover.
        """
        return pulumi.get(self, "pingserver_flip_timeout")

    @pingserver_flip_timeout.setter
    def pingserver_flip_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pingserver_flip_timeout", value)

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interfaces to check for remote IP monitoring.
        """
        return pulumi.get(self, "pingserver_monitor_interface")

    @pingserver_monitor_interface.setter
    def pingserver_monitor_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_monitor_interface", value)

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @pingserver_secondary_force_reset.setter
    def pingserver_secondary_force_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_secondary_force_reset", value)

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pingserver_slave_force_reset")

    @pingserver_slave_force_reset.setter
    def pingserver_slave_force_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_slave_force_reset", value)

    @property
    @pulumi.getter(name="pop3ProxyThreshold")
    def pop3_proxy_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing weight and high and low number of POP3 proxy sessions.
        """
        return pulumi.get(self, "pop3_proxy_threshold")

    @pop3_proxy_threshold.setter
    def pop3_proxy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pop3_proxy_threshold", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Increase the priority to select the primary unit (0 - 255).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="routeHold")
    def route_hold(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait between routing table updates to the cluster (0 - 3600 sec).
        """
        return pulumi.get(self, "route_hold")

    @route_hold.setter
    def route_hold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_hold", value)

    @property
    @pulumi.getter(name="routeTtl")
    def route_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL for primary unit routes (5 - 3600 sec). Increase to maintain active routes during failover.
        """
        return pulumi.get(self, "route_ttl")

    @route_ttl.setter
    def route_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_ttl", value)

    @property
    @pulumi.getter(name="routeWait")
    def route_wait(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait before sending new routes to the cluster (0 - 3600 sec).
        """
        return pulumi.get(self, "route_wait")

    @route_wait.setter
    def route_wait(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_wait", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Type of A-A load balancing. Use none if you have external load balancers.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="secondaryVcluster")
    def secondary_vcluster(self) -> Optional[pulumi.Input['HaSecondaryVclusterArgs']]:
        """
        Configure virtual cluster 2. The structure of `secondary_vcluster` block is documented below.
        """
        return pulumi.get(self, "secondary_vcluster")

    @secondary_vcluster.setter
    def secondary_vcluster(self, value: Optional[pulumi.Input['HaSecondaryVclusterArgs']]):
        pulumi.set(self, "secondary_vcluster", value)

    @property
    @pulumi.getter(name="sessionPickup")
    def session_pickup(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable session pickup. Enabling it can reduce session down time when fail over happens. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup")

    @session_pickup.setter
    def session_pickup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_pickup", value)

    @property
    @pulumi.getter(name="sessionPickupConnectionless")
    def session_pickup_connectionless(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable UDP and ICMP session sync. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup_connectionless")

    @session_pickup_connectionless.setter
    def session_pickup_connectionless(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_pickup_connectionless", value)

    @property
    @pulumi.getter(name="sessionPickupDelay")
    def session_pickup_delay(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to sync sessions longer than 30 sec. Only longer lived sessions need to be synced. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup_delay")

    @session_pickup_delay.setter
    def session_pickup_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_pickup_delay", value)

    @property
    @pulumi.getter(name="sessionPickupExpectation")
    def session_pickup_expectation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable session helper expectation session sync for FGSP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup_expectation")

    @session_pickup_expectation.setter
    def session_pickup_expectation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_pickup_expectation", value)

    @property
    @pulumi.getter(name="sessionPickupNat")
    def session_pickup_nat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT session sync for FGSP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup_nat")

    @session_pickup_nat.setter
    def session_pickup_nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_pickup_nat", value)

    @property
    @pulumi.getter(name="sessionSyncDev")
    def session_sync_dev(self) -> Optional[pulumi.Input[str]]:
        """
        Offload session-sync process to kernel and sync sessions using connected interface(s) directly.
        """
        return pulumi.get(self, "session_sync_dev")

    @session_sync_dev.setter
    def session_sync_dev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_sync_dev", value)

    @property
    @pulumi.getter(name="smtpProxyThreshold")
    def smtp_proxy_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing weight and high and low number of SMTP proxy sessions.
        """
        return pulumi.get(self, "smtp_proxy_threshold")

    @smtp_proxy_threshold.setter
    def smtp_proxy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smtp_proxy_threshold", value)

    @property
    @pulumi.getter(name="ssdFailover")
    def ssd_failover(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic HA failover on SSD disk failure. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssd_failover")

    @ssd_failover.setter
    def ssd_failover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssd_failover", value)

    @property
    @pulumi.getter(name="standaloneConfigSync")
    def standalone_config_sync(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FGSP configuration synchronization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "standalone_config_sync")

    @standalone_config_sync.setter
    def standalone_config_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standalone_config_sync", value)

    @property
    @pulumi.getter(name="standaloneMgmtVdom")
    def standalone_mgmt_vdom(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable standalone management VDOM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "standalone_mgmt_vdom")

    @standalone_mgmt_vdom.setter
    def standalone_mgmt_vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standalone_mgmt_vdom", value)

    @property
    @pulumi.getter(name="syncConfig")
    def sync_config(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable configuration synchronization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sync_config")

    @sync_config.setter
    def sync_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_config", value)

    @property
    @pulumi.getter(name="syncPacketBalance")
    def sync_packet_balance(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HA packet distribution to multiple CPUs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sync_packet_balance")

    @sync_packet_balance.setter
    def sync_packet_balance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_packet_balance", value)

    @property
    @pulumi.getter(name="unicastGateway")
    def unicast_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Default route gateway for unicast interface.
        """
        return pulumi.get(self, "unicast_gateway")

    @unicast_gateway.setter
    def unicast_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicast_gateway", value)

    @property
    @pulumi.getter(name="unicastHb")
    def unicast_hb(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable unicast heartbeat. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "unicast_hb")

    @unicast_hb.setter
    def unicast_hb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicast_hb", value)

    @property
    @pulumi.getter(name="unicastHbNetmask")
    def unicast_hb_netmask(self) -> Optional[pulumi.Input[str]]:
        """
        Unicast heartbeat netmask.
        """
        return pulumi.get(self, "unicast_hb_netmask")

    @unicast_hb_netmask.setter
    def unicast_hb_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicast_hb_netmask", value)

    @property
    @pulumi.getter(name="unicastHbPeerip")
    def unicast_hb_peerip(self) -> Optional[pulumi.Input[str]]:
        """
        Unicast heartbeat peer IP.
        """
        return pulumi.get(self, "unicast_hb_peerip")

    @unicast_hb_peerip.setter
    def unicast_hb_peerip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicast_hb_peerip", value)

    @property
    @pulumi.getter(name="unicastPeers")
    def unicast_peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HaUnicastPeerArgs']]]]:
        """
        Number of unicast peers. The structure of `unicast_peers` block is documented below.
        """
        return pulumi.get(self, "unicast_peers")

    @unicast_peers.setter
    def unicast_peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HaUnicastPeerArgs']]]]):
        pulumi.set(self, "unicast_peers", value)

    @property
    @pulumi.getter(name="unicastStatus")
    def unicast_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable unicast connection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "unicast_status")

    @unicast_status.setter
    def unicast_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicast_status", value)

    @property
    @pulumi.getter(name="uninterruptiblePrimaryWait")
    def uninterruptible_primary_wait(self) -> Optional[pulumi.Input[int]]:
        """
        Number of minutes the primary HA unit waits before the secondary HA unit is considered upgraded and the system is started before starting its own upgrade (1 - 300, default = 30).
        """
        return pulumi.get(self, "uninterruptible_primary_wait")

    @uninterruptible_primary_wait.setter
    def uninterruptible_primary_wait(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uninterruptible_primary_wait", value)

    @property
    @pulumi.getter(name="uninterruptibleUpgrade")
    def uninterruptible_upgrade(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to upgrade a cluster without blocking network traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "uninterruptible_upgrade")

    @uninterruptible_upgrade.setter
    def uninterruptible_upgrade(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uninterruptible_upgrade", value)

    @property
    @pulumi.getter(name="upgradeMode")
    def upgrade_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The mode to upgrade a cluster. Valid values: `simultaneous`, `uninterruptible`, `local-only`, `secondary-only`.
        """
        return pulumi.get(self, "upgrade_mode")

    @upgrade_mode.setter
    def upgrade_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_mode", value)

    @property
    @pulumi.getter
    def vcluster2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable virtual cluster 2 for virtual clustering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vcluster2")

    @vcluster2.setter
    def vcluster2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcluster2", value)

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> Optional[pulumi.Input[int]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "vcluster_id")

    @vcluster_id.setter
    def vcluster_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcluster_id", value)

    @property
    @pulumi.getter(name="vclusterStatus")
    def vcluster_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable virtual cluster for virtual clustering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vcluster_status")

    @vcluster_status.setter
    def vcluster_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcluster_status", value)

    @property
    @pulumi.getter
    def vclusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HaVclusterArgs']]]]:
        """
        Virtual cluster table. The structure of `vcluster` block is documented below.
        """
        return pulumi.get(self, "vclusters")

    @vclusters.setter
    def vclusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HaVclusterArgs']]]]):
        pulumi.set(self, "vclusters", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        VDOMs in virtual cluster 1.
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[str]]:
        """
        Weight-round-robin weight for each cluster unit. Syntax <priority> <weight>.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class _HaState:
    def __init__(__self__, *,
                 arps: Optional[pulumi.Input[int]] = None,
                 arps_interval: Optional[pulumi.Input[int]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 cpu_threshold: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 evpn_ttl: Optional[pulumi.Input[int]] = None,
                 failover_hold_time: Optional[pulumi.Input[int]] = None,
                 ftp_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gratuitous_arps: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 ha_eth_type: Optional[pulumi.Input[str]] = None,
                 ha_mgmt_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['HaHaMgmtInterfaceArgs']]]] = None,
                 ha_mgmt_status: Optional[pulumi.Input[str]] = None,
                 ha_uptime_diff_margin: Optional[pulumi.Input[int]] = None,
                 hb_interval: Optional[pulumi.Input[int]] = None,
                 hb_interval_in_milliseconds: Optional[pulumi.Input[str]] = None,
                 hb_lost_threshold: Optional[pulumi.Input[int]] = None,
                 hbdev: Optional[pulumi.Input[str]] = None,
                 hc_eth_type: Optional[pulumi.Input[str]] = None,
                 hello_holddown: Optional[pulumi.Input[int]] = None,
                 http_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 imap_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 inter_cluster_session_sync: Optional[pulumi.Input[str]] = None,
                 ipsec_phase2_proposal: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 l2ep_eth_type: Optional[pulumi.Input[str]] = None,
                 link_failed_signal: Optional[pulumi.Input[str]] = None,
                 load_balance_all: Optional[pulumi.Input[str]] = None,
                 logical_sn: Optional[pulumi.Input[str]] = None,
                 memory_based_failover: Optional[pulumi.Input[str]] = None,
                 memory_compatible_mode: Optional[pulumi.Input[str]] = None,
                 memory_failover_flip_timeout: Optional[pulumi.Input[int]] = None,
                 memory_failover_monitor_period: Optional[pulumi.Input[int]] = None,
                 memory_failover_sample_rate: Optional[pulumi.Input[int]] = None,
                 memory_failover_threshold: Optional[pulumi.Input[int]] = None,
                 memory_threshold: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 multicast_ttl: Optional[pulumi.Input[int]] = None,
                 nntp_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[str]] = None,
                 override_wait_time: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pingserver_failover_threshold: Optional[pulumi.Input[int]] = None,
                 pingserver_flip_timeout: Optional[pulumi.Input[int]] = None,
                 pingserver_monitor_interface: Optional[pulumi.Input[str]] = None,
                 pingserver_secondary_force_reset: Optional[pulumi.Input[str]] = None,
                 pingserver_slave_force_reset: Optional[pulumi.Input[str]] = None,
                 pop3_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 route_hold: Optional[pulumi.Input[int]] = None,
                 route_ttl: Optional[pulumi.Input[int]] = None,
                 route_wait: Optional[pulumi.Input[int]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 secondary_vcluster: Optional[pulumi.Input['HaSecondaryVclusterArgs']] = None,
                 session_pickup: Optional[pulumi.Input[str]] = None,
                 session_pickup_connectionless: Optional[pulumi.Input[str]] = None,
                 session_pickup_delay: Optional[pulumi.Input[str]] = None,
                 session_pickup_expectation: Optional[pulumi.Input[str]] = None,
                 session_pickup_nat: Optional[pulumi.Input[str]] = None,
                 session_sync_dev: Optional[pulumi.Input[str]] = None,
                 smtp_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 ssd_failover: Optional[pulumi.Input[str]] = None,
                 standalone_config_sync: Optional[pulumi.Input[str]] = None,
                 standalone_mgmt_vdom: Optional[pulumi.Input[str]] = None,
                 sync_config: Optional[pulumi.Input[str]] = None,
                 sync_packet_balance: Optional[pulumi.Input[str]] = None,
                 unicast_gateway: Optional[pulumi.Input[str]] = None,
                 unicast_hb: Optional[pulumi.Input[str]] = None,
                 unicast_hb_netmask: Optional[pulumi.Input[str]] = None,
                 unicast_hb_peerip: Optional[pulumi.Input[str]] = None,
                 unicast_peers: Optional[pulumi.Input[Sequence[pulumi.Input['HaUnicastPeerArgs']]]] = None,
                 unicast_status: Optional[pulumi.Input[str]] = None,
                 uninterruptible_primary_wait: Optional[pulumi.Input[int]] = None,
                 uninterruptible_upgrade: Optional[pulumi.Input[str]] = None,
                 upgrade_mode: Optional[pulumi.Input[str]] = None,
                 vcluster2: Optional[pulumi.Input[str]] = None,
                 vcluster_id: Optional[pulumi.Input[int]] = None,
                 vcluster_status: Optional[pulumi.Input[str]] = None,
                 vclusters: Optional[pulumi.Input[Sequence[pulumi.Input['HaVclusterArgs']]]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ha resources.
        :param pulumi.Input[int] arps: Number of gratuitous ARPs (1 - 60). Lower to reduce traffic. Higher to reduce failover time.
        :param pulumi.Input[int] arps_interval: Time between gratuitous ARPs  (1 - 20 sec). Lower to reduce failover time. Higher to reduce traffic.
        :param pulumi.Input[str] authentication: Enable/disable heartbeat message authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cpu_threshold: Dynamic weighted load balancing CPU usage weight and high and low thresholds.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] encryption: Enable/disable heartbeat message encryption. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] evpn_ttl: HA EVPN FDB TTL on primary box (5 - 3600 sec).
        :param pulumi.Input[int] failover_hold_time: Time to wait before failover (0 - 300 sec, default = 0), to avoid flip.
        :param pulumi.Input[str] ftp_proxy_threshold: Dynamic weighted load balancing weight and high and low number of FTP proxy sessions.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] gratuitous_arps: Enable/disable gratuitous ARPs. Disable if link-failed-signal enabled. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] group_id: Cluster group ID  (0 - 255). Must be the same for all members.
        :param pulumi.Input[str] group_name: Cluster group name. Must be the same for all members.
        :param pulumi.Input[str] ha_direct: Enable/disable using ha-mgmt interface for syslog, SNMP, remote authentication (RADIUS), FortiAnalyzer, and FortiSandbox. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ha_eth_type: HA heartbeat packet Ethertype (4-digit hex).
        :param pulumi.Input[Sequence[pulumi.Input['HaHaMgmtInterfaceArgs']]] ha_mgmt_interfaces: Reserve interfaces to manage individual cluster units. The structure of `ha_mgmt_interfaces` block is documented below.
        :param pulumi.Input[str] ha_mgmt_status: Enable to reserve interfaces to manage individual cluster units. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ha_uptime_diff_margin: Normally you would only reduce this value for failover testing.
        :param pulumi.Input[int] hb_interval: Time between sending heartbeat packets (1 - 20 (100*ms)). Increase to reduce false positives.
        :param pulumi.Input[str] hb_interval_in_milliseconds: Number of milliseconds for each heartbeat interval: 100ms or 10ms. Valid values: `100ms`, `10ms`.
        :param pulumi.Input[int] hb_lost_threshold: Number of lost heartbeats to signal a failure (1 - 60). Increase to reduce false positives.
        :param pulumi.Input[str] hbdev: Heartbeat interfaces. Must be the same for all members.
        :param pulumi.Input[str] hc_eth_type: Transparent mode HA heartbeat packet Ethertype (4-digit hex).
        :param pulumi.Input[int] hello_holddown: Time to wait before changing from hello to work state (5 - 300 sec).
        :param pulumi.Input[str] http_proxy_threshold: Dynamic weighted load balancing weight and high and low number of HTTP proxy sessions.
        :param pulumi.Input[str] imap_proxy_threshold: Dynamic weighted load balancing weight and high and low number of IMAP proxy sessions.
        :param pulumi.Input[str] inter_cluster_session_sync: Enable/disable synchronization of sessions among HA clusters. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipsec_phase2_proposal: IPsec phase2 proposal. Valid values: `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes128gcm`, `aes256gcm`, `chacha20poly1305`.
        :param pulumi.Input[str] key: key
        :param pulumi.Input[str] l2ep_eth_type: Telnet session HA heartbeat packet Ethertype (4-digit hex).
        :param pulumi.Input[str] link_failed_signal: Enable to shut down all interfaces for 1 sec after a failover. Use if gratuitous ARPs do not update network. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] load_balance_all: Enable to load balance TCP sessions. Disable to load balance proxy sessions only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logical_sn: Enable/disable usage of the logical serial number. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] memory_based_failover: Enable/disable memory based failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] memory_compatible_mode: Enable/disable memory compatible mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] memory_failover_flip_timeout: Time to wait between subsequent memory based failovers in minutes (6 - 2147483647, default = 6).
        :param pulumi.Input[int] memory_failover_monitor_period: Duration of high memory usage before memory based failover is triggered in seconds (1 - 300, default = 60).
        :param pulumi.Input[int] memory_failover_sample_rate: Rate at which memory usage is sampled in order to measure memory usage in seconds (1 - 60, default = 1).
        :param pulumi.Input[int] memory_failover_threshold: Memory usage threshold to trigger memory based failover (0 means using conserve mode threshold in system.global).
        :param pulumi.Input[str] memory_threshold: Dynamic weighted load balancing memory usage weight and high and low thresholds.
        :param pulumi.Input[str] mode: HA mode. Must be the same for all members. FGSP requires standalone. Valid values: `standalone`, `a-a`, `a-p`.
        :param pulumi.Input[str] monitor: Interfaces to check for port monitoring (or link failure).
        :param pulumi.Input[int] multicast_ttl: HA multicast TTL on master (5 - 3600 sec).
        :param pulumi.Input[str] nntp_proxy_threshold: Dynamic weighted load balancing weight and high and low number of NNTP proxy sessions.
        :param pulumi.Input[str] override: Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] override_wait_time: Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        :param pulumi.Input[str] password: Cluster password. Must be the same for all members.
        :param pulumi.Input[int] pingserver_failover_threshold: Remote IP monitoring failover threshold (0 - 50).
        :param pulumi.Input[int] pingserver_flip_timeout: Time to wait in minutes before renegotiating after a remote IP monitoring failover.
        :param pulumi.Input[str] pingserver_monitor_interface: Interfaces to check for remote IP monitoring.
        :param pulumi.Input[str] pingserver_secondary_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pingserver_slave_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pop3_proxy_threshold: Dynamic weighted load balancing weight and high and low number of POP3 proxy sessions.
        :param pulumi.Input[int] priority: Increase the priority to select the primary unit (0 - 255).
        :param pulumi.Input[int] route_hold: Time to wait between routing table updates to the cluster (0 - 3600 sec).
        :param pulumi.Input[int] route_ttl: TTL for primary unit routes (5 - 3600 sec). Increase to maintain active routes during failover.
        :param pulumi.Input[int] route_wait: Time to wait before sending new routes to the cluster (0 - 3600 sec).
        :param pulumi.Input[str] schedule: Type of A-A load balancing. Use none if you have external load balancers.
        :param pulumi.Input['HaSecondaryVclusterArgs'] secondary_vcluster: Configure virtual cluster 2. The structure of `secondary_vcluster` block is documented below.
        :param pulumi.Input[str] session_pickup: Enable/disable session pickup. Enabling it can reduce session down time when fail over happens. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_connectionless: Enable/disable UDP and ICMP session sync. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_delay: Enable to sync sessions longer than 30 sec. Only longer lived sessions need to be synced. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_expectation: Enable/disable session helper expectation session sync for FGSP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_nat: Enable/disable NAT session sync for FGSP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_sync_dev: Offload session-sync process to kernel and sync sessions using connected interface(s) directly.
        :param pulumi.Input[str] smtp_proxy_threshold: Dynamic weighted load balancing weight and high and low number of SMTP proxy sessions.
        :param pulumi.Input[str] ssd_failover: Enable/disable automatic HA failover on SSD disk failure. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] standalone_config_sync: Enable/disable FGSP configuration synchronization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] standalone_mgmt_vdom: Enable/disable standalone management VDOM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sync_config: Enable/disable configuration synchronization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sync_packet_balance: Enable/disable HA packet distribution to multiple CPUs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unicast_gateway: Default route gateway for unicast interface.
        :param pulumi.Input[str] unicast_hb: Enable/disable unicast heartbeat. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unicast_hb_netmask: Unicast heartbeat netmask.
        :param pulumi.Input[str] unicast_hb_peerip: Unicast heartbeat peer IP.
        :param pulumi.Input[Sequence[pulumi.Input['HaUnicastPeerArgs']]] unicast_peers: Number of unicast peers. The structure of `unicast_peers` block is documented below.
        :param pulumi.Input[str] unicast_status: Enable/disable unicast connection. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] uninterruptible_primary_wait: Number of minutes the primary HA unit waits before the secondary HA unit is considered upgraded and the system is started before starting its own upgrade (1 - 300, default = 30).
        :param pulumi.Input[str] uninterruptible_upgrade: Enable to upgrade a cluster without blocking network traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] upgrade_mode: The mode to upgrade a cluster. Valid values: `simultaneous`, `uninterruptible`, `local-only`, `secondary-only`.
        :param pulumi.Input[str] vcluster2: Enable/disable virtual cluster 2 for virtual clustering. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] vcluster_id: Cluster ID.
        :param pulumi.Input[str] vcluster_status: Enable/disable virtual cluster for virtual clustering. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['HaVclusterArgs']]] vclusters: Virtual cluster table. The structure of `vcluster` block is documented below.
        :param pulumi.Input[str] vdom: VDOMs in virtual cluster 1.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] weight: Weight-round-robin weight for each cluster unit. Syntax <priority> <weight>.
        """
        if arps is not None:
            pulumi.set(__self__, "arps", arps)
        if arps_interval is not None:
            pulumi.set(__self__, "arps_interval", arps_interval)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if cpu_threshold is not None:
            pulumi.set(__self__, "cpu_threshold", cpu_threshold)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if evpn_ttl is not None:
            pulumi.set(__self__, "evpn_ttl", evpn_ttl)
        if failover_hold_time is not None:
            pulumi.set(__self__, "failover_hold_time", failover_hold_time)
        if ftp_proxy_threshold is not None:
            pulumi.set(__self__, "ftp_proxy_threshold", ftp_proxy_threshold)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if gratuitous_arps is not None:
            pulumi.set(__self__, "gratuitous_arps", gratuitous_arps)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if ha_direct is not None:
            pulumi.set(__self__, "ha_direct", ha_direct)
        if ha_eth_type is not None:
            pulumi.set(__self__, "ha_eth_type", ha_eth_type)
        if ha_mgmt_interfaces is not None:
            pulumi.set(__self__, "ha_mgmt_interfaces", ha_mgmt_interfaces)
        if ha_mgmt_status is not None:
            pulumi.set(__self__, "ha_mgmt_status", ha_mgmt_status)
        if ha_uptime_diff_margin is not None:
            pulumi.set(__self__, "ha_uptime_diff_margin", ha_uptime_diff_margin)
        if hb_interval is not None:
            pulumi.set(__self__, "hb_interval", hb_interval)
        if hb_interval_in_milliseconds is not None:
            pulumi.set(__self__, "hb_interval_in_milliseconds", hb_interval_in_milliseconds)
        if hb_lost_threshold is not None:
            pulumi.set(__self__, "hb_lost_threshold", hb_lost_threshold)
        if hbdev is not None:
            pulumi.set(__self__, "hbdev", hbdev)
        if hc_eth_type is not None:
            pulumi.set(__self__, "hc_eth_type", hc_eth_type)
        if hello_holddown is not None:
            pulumi.set(__self__, "hello_holddown", hello_holddown)
        if http_proxy_threshold is not None:
            pulumi.set(__self__, "http_proxy_threshold", http_proxy_threshold)
        if imap_proxy_threshold is not None:
            pulumi.set(__self__, "imap_proxy_threshold", imap_proxy_threshold)
        if inter_cluster_session_sync is not None:
            pulumi.set(__self__, "inter_cluster_session_sync", inter_cluster_session_sync)
        if ipsec_phase2_proposal is not None:
            pulumi.set(__self__, "ipsec_phase2_proposal", ipsec_phase2_proposal)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if l2ep_eth_type is not None:
            pulumi.set(__self__, "l2ep_eth_type", l2ep_eth_type)
        if link_failed_signal is not None:
            pulumi.set(__self__, "link_failed_signal", link_failed_signal)
        if load_balance_all is not None:
            pulumi.set(__self__, "load_balance_all", load_balance_all)
        if logical_sn is not None:
            pulumi.set(__self__, "logical_sn", logical_sn)
        if memory_based_failover is not None:
            pulumi.set(__self__, "memory_based_failover", memory_based_failover)
        if memory_compatible_mode is not None:
            pulumi.set(__self__, "memory_compatible_mode", memory_compatible_mode)
        if memory_failover_flip_timeout is not None:
            pulumi.set(__self__, "memory_failover_flip_timeout", memory_failover_flip_timeout)
        if memory_failover_monitor_period is not None:
            pulumi.set(__self__, "memory_failover_monitor_period", memory_failover_monitor_period)
        if memory_failover_sample_rate is not None:
            pulumi.set(__self__, "memory_failover_sample_rate", memory_failover_sample_rate)
        if memory_failover_threshold is not None:
            pulumi.set(__self__, "memory_failover_threshold", memory_failover_threshold)
        if memory_threshold is not None:
            pulumi.set(__self__, "memory_threshold", memory_threshold)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if multicast_ttl is not None:
            pulumi.set(__self__, "multicast_ttl", multicast_ttl)
        if nntp_proxy_threshold is not None:
            pulumi.set(__self__, "nntp_proxy_threshold", nntp_proxy_threshold)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_wait_time is not None:
            pulumi.set(__self__, "override_wait_time", override_wait_time)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pingserver_failover_threshold is not None:
            pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        if pingserver_flip_timeout is not None:
            pulumi.set(__self__, "pingserver_flip_timeout", pingserver_flip_timeout)
        if pingserver_monitor_interface is not None:
            pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        if pingserver_secondary_force_reset is not None:
            pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        if pingserver_slave_force_reset is not None:
            pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        if pop3_proxy_threshold is not None:
            pulumi.set(__self__, "pop3_proxy_threshold", pop3_proxy_threshold)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if route_hold is not None:
            pulumi.set(__self__, "route_hold", route_hold)
        if route_ttl is not None:
            pulumi.set(__self__, "route_ttl", route_ttl)
        if route_wait is not None:
            pulumi.set(__self__, "route_wait", route_wait)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if secondary_vcluster is not None:
            pulumi.set(__self__, "secondary_vcluster", secondary_vcluster)
        if session_pickup is not None:
            pulumi.set(__self__, "session_pickup", session_pickup)
        if session_pickup_connectionless is not None:
            pulumi.set(__self__, "session_pickup_connectionless", session_pickup_connectionless)
        if session_pickup_delay is not None:
            pulumi.set(__self__, "session_pickup_delay", session_pickup_delay)
        if session_pickup_expectation is not None:
            pulumi.set(__self__, "session_pickup_expectation", session_pickup_expectation)
        if session_pickup_nat is not None:
            pulumi.set(__self__, "session_pickup_nat", session_pickup_nat)
        if session_sync_dev is not None:
            pulumi.set(__self__, "session_sync_dev", session_sync_dev)
        if smtp_proxy_threshold is not None:
            pulumi.set(__self__, "smtp_proxy_threshold", smtp_proxy_threshold)
        if ssd_failover is not None:
            pulumi.set(__self__, "ssd_failover", ssd_failover)
        if standalone_config_sync is not None:
            pulumi.set(__self__, "standalone_config_sync", standalone_config_sync)
        if standalone_mgmt_vdom is not None:
            pulumi.set(__self__, "standalone_mgmt_vdom", standalone_mgmt_vdom)
        if sync_config is not None:
            pulumi.set(__self__, "sync_config", sync_config)
        if sync_packet_balance is not None:
            pulumi.set(__self__, "sync_packet_balance", sync_packet_balance)
        if unicast_gateway is not None:
            pulumi.set(__self__, "unicast_gateway", unicast_gateway)
        if unicast_hb is not None:
            pulumi.set(__self__, "unicast_hb", unicast_hb)
        if unicast_hb_netmask is not None:
            pulumi.set(__self__, "unicast_hb_netmask", unicast_hb_netmask)
        if unicast_hb_peerip is not None:
            pulumi.set(__self__, "unicast_hb_peerip", unicast_hb_peerip)
        if unicast_peers is not None:
            pulumi.set(__self__, "unicast_peers", unicast_peers)
        if unicast_status is not None:
            pulumi.set(__self__, "unicast_status", unicast_status)
        if uninterruptible_primary_wait is not None:
            pulumi.set(__self__, "uninterruptible_primary_wait", uninterruptible_primary_wait)
        if uninterruptible_upgrade is not None:
            pulumi.set(__self__, "uninterruptible_upgrade", uninterruptible_upgrade)
        if upgrade_mode is not None:
            pulumi.set(__self__, "upgrade_mode", upgrade_mode)
        if vcluster2 is not None:
            pulumi.set(__self__, "vcluster2", vcluster2)
        if vcluster_id is not None:
            pulumi.set(__self__, "vcluster_id", vcluster_id)
        if vcluster_status is not None:
            pulumi.set(__self__, "vcluster_status", vcluster_status)
        if vclusters is not None:
            pulumi.set(__self__, "vclusters", vclusters)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def arps(self) -> Optional[pulumi.Input[int]]:
        """
        Number of gratuitous ARPs (1 - 60). Lower to reduce traffic. Higher to reduce failover time.
        """
        return pulumi.get(self, "arps")

    @arps.setter
    def arps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "arps", value)

    @property
    @pulumi.getter(name="arpsInterval")
    def arps_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between gratuitous ARPs  (1 - 20 sec). Lower to reduce failover time. Higher to reduce traffic.
        """
        return pulumi.get(self, "arps_interval")

    @arps_interval.setter
    def arps_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "arps_interval", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable heartbeat message authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="cpuThreshold")
    def cpu_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing CPU usage weight and high and low thresholds.
        """
        return pulumi.get(self, "cpu_threshold")

    @cpu_threshold.setter
    def cpu_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_threshold", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable heartbeat message encryption. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="evpnTtl")
    def evpn_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        HA EVPN FDB TTL on primary box (5 - 3600 sec).
        """
        return pulumi.get(self, "evpn_ttl")

    @evpn_ttl.setter
    def evpn_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "evpn_ttl", value)

    @property
    @pulumi.getter(name="failoverHoldTime")
    def failover_hold_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait before failover (0 - 300 sec, default = 0), to avoid flip.
        """
        return pulumi.get(self, "failover_hold_time")

    @failover_hold_time.setter
    def failover_hold_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failover_hold_time", value)

    @property
    @pulumi.getter(name="ftpProxyThreshold")
    def ftp_proxy_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing weight and high and low number of FTP proxy sessions.
        """
        return pulumi.get(self, "ftp_proxy_threshold")

    @ftp_proxy_threshold.setter
    def ftp_proxy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_proxy_threshold", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="gratuitousArps")
    def gratuitous_arps(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable gratuitous ARPs. Disable if link-failed-signal enabled. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gratuitous_arps")

    @gratuitous_arps.setter
    def gratuitous_arps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gratuitous_arps", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[int]]:
        """
        Cluster group ID  (0 - 255). Must be the same for all members.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster group name. Must be the same for all members.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable using ha-mgmt interface for syslog, SNMP, remote authentication (RADIUS), FortiAnalyzer, and FortiSandbox. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_direct")

    @ha_direct.setter
    def ha_direct(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_direct", value)

    @property
    @pulumi.getter(name="haEthType")
    def ha_eth_type(self) -> Optional[pulumi.Input[str]]:
        """
        HA heartbeat packet Ethertype (4-digit hex).
        """
        return pulumi.get(self, "ha_eth_type")

    @ha_eth_type.setter
    def ha_eth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_eth_type", value)

    @property
    @pulumi.getter(name="haMgmtInterfaces")
    def ha_mgmt_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HaHaMgmtInterfaceArgs']]]]:
        """
        Reserve interfaces to manage individual cluster units. The structure of `ha_mgmt_interfaces` block is documented below.
        """
        return pulumi.get(self, "ha_mgmt_interfaces")

    @ha_mgmt_interfaces.setter
    def ha_mgmt_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HaHaMgmtInterfaceArgs']]]]):
        pulumi.set(self, "ha_mgmt_interfaces", value)

    @property
    @pulumi.getter(name="haMgmtStatus")
    def ha_mgmt_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to reserve interfaces to manage individual cluster units. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_mgmt_status")

    @ha_mgmt_status.setter
    def ha_mgmt_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_mgmt_status", value)

    @property
    @pulumi.getter(name="haUptimeDiffMargin")
    def ha_uptime_diff_margin(self) -> Optional[pulumi.Input[int]]:
        """
        Normally you would only reduce this value for failover testing.
        """
        return pulumi.get(self, "ha_uptime_diff_margin")

    @ha_uptime_diff_margin.setter
    def ha_uptime_diff_margin(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_uptime_diff_margin", value)

    @property
    @pulumi.getter(name="hbInterval")
    def hb_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between sending heartbeat packets (1 - 20 (100*ms)). Increase to reduce false positives.
        """
        return pulumi.get(self, "hb_interval")

    @hb_interval.setter
    def hb_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hb_interval", value)

    @property
    @pulumi.getter(name="hbIntervalInMilliseconds")
    def hb_interval_in_milliseconds(self) -> Optional[pulumi.Input[str]]:
        """
        Number of milliseconds for each heartbeat interval: 100ms or 10ms. Valid values: `100ms`, `10ms`.
        """
        return pulumi.get(self, "hb_interval_in_milliseconds")

    @hb_interval_in_milliseconds.setter
    def hb_interval_in_milliseconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hb_interval_in_milliseconds", value)

    @property
    @pulumi.getter(name="hbLostThreshold")
    def hb_lost_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Number of lost heartbeats to signal a failure (1 - 60). Increase to reduce false positives.
        """
        return pulumi.get(self, "hb_lost_threshold")

    @hb_lost_threshold.setter
    def hb_lost_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hb_lost_threshold", value)

    @property
    @pulumi.getter
    def hbdev(self) -> Optional[pulumi.Input[str]]:
        """
        Heartbeat interfaces. Must be the same for all members.
        """
        return pulumi.get(self, "hbdev")

    @hbdev.setter
    def hbdev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hbdev", value)

    @property
    @pulumi.getter(name="hcEthType")
    def hc_eth_type(self) -> Optional[pulumi.Input[str]]:
        """
        Transparent mode HA heartbeat packet Ethertype (4-digit hex).
        """
        return pulumi.get(self, "hc_eth_type")

    @hc_eth_type.setter
    def hc_eth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hc_eth_type", value)

    @property
    @pulumi.getter(name="helloHolddown")
    def hello_holddown(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait before changing from hello to work state (5 - 300 sec).
        """
        return pulumi.get(self, "hello_holddown")

    @hello_holddown.setter
    def hello_holddown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_holddown", value)

    @property
    @pulumi.getter(name="httpProxyThreshold")
    def http_proxy_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing weight and high and low number of HTTP proxy sessions.
        """
        return pulumi.get(self, "http_proxy_threshold")

    @http_proxy_threshold.setter
    def http_proxy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_proxy_threshold", value)

    @property
    @pulumi.getter(name="imapProxyThreshold")
    def imap_proxy_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing weight and high and low number of IMAP proxy sessions.
        """
        return pulumi.get(self, "imap_proxy_threshold")

    @imap_proxy_threshold.setter
    def imap_proxy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imap_proxy_threshold", value)

    @property
    @pulumi.getter(name="interClusterSessionSync")
    def inter_cluster_session_sync(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable synchronization of sessions among HA clusters. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inter_cluster_session_sync")

    @inter_cluster_session_sync.setter
    def inter_cluster_session_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inter_cluster_session_sync", value)

    @property
    @pulumi.getter(name="ipsecPhase2Proposal")
    def ipsec_phase2_proposal(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec phase2 proposal. Valid values: `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes128gcm`, `aes256gcm`, `chacha20poly1305`.
        """
        return pulumi.get(self, "ipsec_phase2_proposal")

    @ipsec_phase2_proposal.setter
    def ipsec_phase2_proposal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_phase2_proposal", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="l2epEthType")
    def l2ep_eth_type(self) -> Optional[pulumi.Input[str]]:
        """
        Telnet session HA heartbeat packet Ethertype (4-digit hex).
        """
        return pulumi.get(self, "l2ep_eth_type")

    @l2ep_eth_type.setter
    def l2ep_eth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l2ep_eth_type", value)

    @property
    @pulumi.getter(name="linkFailedSignal")
    def link_failed_signal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to shut down all interfaces for 1 sec after a failover. Use if gratuitous ARPs do not update network. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_failed_signal")

    @link_failed_signal.setter
    def link_failed_signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_failed_signal", value)

    @property
    @pulumi.getter(name="loadBalanceAll")
    def load_balance_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to load balance TCP sessions. Disable to load balance proxy sessions only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "load_balance_all")

    @load_balance_all.setter
    def load_balance_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balance_all", value)

    @property
    @pulumi.getter(name="logicalSn")
    def logical_sn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable usage of the logical serial number. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logical_sn")

    @logical_sn.setter
    def logical_sn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logical_sn", value)

    @property
    @pulumi.getter(name="memoryBasedFailover")
    def memory_based_failover(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable memory based failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "memory_based_failover")

    @memory_based_failover.setter
    def memory_based_failover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_based_failover", value)

    @property
    @pulumi.getter(name="memoryCompatibleMode")
    def memory_compatible_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable memory compatible mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "memory_compatible_mode")

    @memory_compatible_mode.setter
    def memory_compatible_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_compatible_mode", value)

    @property
    @pulumi.getter(name="memoryFailoverFlipTimeout")
    def memory_failover_flip_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait between subsequent memory based failovers in minutes (6 - 2147483647, default = 6).
        """
        return pulumi.get(self, "memory_failover_flip_timeout")

    @memory_failover_flip_timeout.setter
    def memory_failover_flip_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_failover_flip_timeout", value)

    @property
    @pulumi.getter(name="memoryFailoverMonitorPeriod")
    def memory_failover_monitor_period(self) -> Optional[pulumi.Input[int]]:
        """
        Duration of high memory usage before memory based failover is triggered in seconds (1 - 300, default = 60).
        """
        return pulumi.get(self, "memory_failover_monitor_period")

    @memory_failover_monitor_period.setter
    def memory_failover_monitor_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_failover_monitor_period", value)

    @property
    @pulumi.getter(name="memoryFailoverSampleRate")
    def memory_failover_sample_rate(self) -> Optional[pulumi.Input[int]]:
        """
        Rate at which memory usage is sampled in order to measure memory usage in seconds (1 - 60, default = 1).
        """
        return pulumi.get(self, "memory_failover_sample_rate")

    @memory_failover_sample_rate.setter
    def memory_failover_sample_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_failover_sample_rate", value)

    @property
    @pulumi.getter(name="memoryFailoverThreshold")
    def memory_failover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Memory usage threshold to trigger memory based failover (0 means using conserve mode threshold in system.global).
        """
        return pulumi.get(self, "memory_failover_threshold")

    @memory_failover_threshold.setter
    def memory_failover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_failover_threshold", value)

    @property
    @pulumi.getter(name="memoryThreshold")
    def memory_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing memory usage weight and high and low thresholds.
        """
        return pulumi.get(self, "memory_threshold")

    @memory_threshold.setter
    def memory_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_threshold", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        HA mode. Must be the same for all members. FGSP requires standalone. Valid values: `standalone`, `a-a`, `a-p`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Interfaces to check for port monitoring (or link failure).
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter(name="multicastTtl")
    def multicast_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        HA multicast TTL on master (5 - 3600 sec).
        """
        return pulumi.get(self, "multicast_ttl")

    @multicast_ttl.setter
    def multicast_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "multicast_ttl", value)

    @property
    @pulumi.getter(name="nntpProxyThreshold")
    def nntp_proxy_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing weight and high and low number of NNTP proxy sessions.
        """
        return pulumi.get(self, "nntp_proxy_threshold")

    @nntp_proxy_threshold.setter
    def nntp_proxy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nntp_proxy_threshold", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> Optional[pulumi.Input[int]]:
        """
        Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        """
        return pulumi.get(self, "override_wait_time")

    @override_wait_time.setter
    def override_wait_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "override_wait_time", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster password. Must be the same for all members.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Remote IP monitoring failover threshold (0 - 50).
        """
        return pulumi.get(self, "pingserver_failover_threshold")

    @pingserver_failover_threshold.setter
    def pingserver_failover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pingserver_failover_threshold", value)

    @property
    @pulumi.getter(name="pingserverFlipTimeout")
    def pingserver_flip_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait in minutes before renegotiating after a remote IP monitoring failover.
        """
        return pulumi.get(self, "pingserver_flip_timeout")

    @pingserver_flip_timeout.setter
    def pingserver_flip_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pingserver_flip_timeout", value)

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interfaces to check for remote IP monitoring.
        """
        return pulumi.get(self, "pingserver_monitor_interface")

    @pingserver_monitor_interface.setter
    def pingserver_monitor_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_monitor_interface", value)

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @pingserver_secondary_force_reset.setter
    def pingserver_secondary_force_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_secondary_force_reset", value)

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pingserver_slave_force_reset")

    @pingserver_slave_force_reset.setter
    def pingserver_slave_force_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_slave_force_reset", value)

    @property
    @pulumi.getter(name="pop3ProxyThreshold")
    def pop3_proxy_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing weight and high and low number of POP3 proxy sessions.
        """
        return pulumi.get(self, "pop3_proxy_threshold")

    @pop3_proxy_threshold.setter
    def pop3_proxy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pop3_proxy_threshold", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Increase the priority to select the primary unit (0 - 255).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="routeHold")
    def route_hold(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait between routing table updates to the cluster (0 - 3600 sec).
        """
        return pulumi.get(self, "route_hold")

    @route_hold.setter
    def route_hold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_hold", value)

    @property
    @pulumi.getter(name="routeTtl")
    def route_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL for primary unit routes (5 - 3600 sec). Increase to maintain active routes during failover.
        """
        return pulumi.get(self, "route_ttl")

    @route_ttl.setter
    def route_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_ttl", value)

    @property
    @pulumi.getter(name="routeWait")
    def route_wait(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait before sending new routes to the cluster (0 - 3600 sec).
        """
        return pulumi.get(self, "route_wait")

    @route_wait.setter
    def route_wait(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_wait", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Type of A-A load balancing. Use none if you have external load balancers.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="secondaryVcluster")
    def secondary_vcluster(self) -> Optional[pulumi.Input['HaSecondaryVclusterArgs']]:
        """
        Configure virtual cluster 2. The structure of `secondary_vcluster` block is documented below.
        """
        return pulumi.get(self, "secondary_vcluster")

    @secondary_vcluster.setter
    def secondary_vcluster(self, value: Optional[pulumi.Input['HaSecondaryVclusterArgs']]):
        pulumi.set(self, "secondary_vcluster", value)

    @property
    @pulumi.getter(name="sessionPickup")
    def session_pickup(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable session pickup. Enabling it can reduce session down time when fail over happens. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup")

    @session_pickup.setter
    def session_pickup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_pickup", value)

    @property
    @pulumi.getter(name="sessionPickupConnectionless")
    def session_pickup_connectionless(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable UDP and ICMP session sync. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup_connectionless")

    @session_pickup_connectionless.setter
    def session_pickup_connectionless(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_pickup_connectionless", value)

    @property
    @pulumi.getter(name="sessionPickupDelay")
    def session_pickup_delay(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to sync sessions longer than 30 sec. Only longer lived sessions need to be synced. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup_delay")

    @session_pickup_delay.setter
    def session_pickup_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_pickup_delay", value)

    @property
    @pulumi.getter(name="sessionPickupExpectation")
    def session_pickup_expectation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable session helper expectation session sync for FGSP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup_expectation")

    @session_pickup_expectation.setter
    def session_pickup_expectation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_pickup_expectation", value)

    @property
    @pulumi.getter(name="sessionPickupNat")
    def session_pickup_nat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT session sync for FGSP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup_nat")

    @session_pickup_nat.setter
    def session_pickup_nat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_pickup_nat", value)

    @property
    @pulumi.getter(name="sessionSyncDev")
    def session_sync_dev(self) -> Optional[pulumi.Input[str]]:
        """
        Offload session-sync process to kernel and sync sessions using connected interface(s) directly.
        """
        return pulumi.get(self, "session_sync_dev")

    @session_sync_dev.setter
    def session_sync_dev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_sync_dev", value)

    @property
    @pulumi.getter(name="smtpProxyThreshold")
    def smtp_proxy_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic weighted load balancing weight and high and low number of SMTP proxy sessions.
        """
        return pulumi.get(self, "smtp_proxy_threshold")

    @smtp_proxy_threshold.setter
    def smtp_proxy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smtp_proxy_threshold", value)

    @property
    @pulumi.getter(name="ssdFailover")
    def ssd_failover(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic HA failover on SSD disk failure. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssd_failover")

    @ssd_failover.setter
    def ssd_failover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssd_failover", value)

    @property
    @pulumi.getter(name="standaloneConfigSync")
    def standalone_config_sync(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FGSP configuration synchronization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "standalone_config_sync")

    @standalone_config_sync.setter
    def standalone_config_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standalone_config_sync", value)

    @property
    @pulumi.getter(name="standaloneMgmtVdom")
    def standalone_mgmt_vdom(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable standalone management VDOM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "standalone_mgmt_vdom")

    @standalone_mgmt_vdom.setter
    def standalone_mgmt_vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standalone_mgmt_vdom", value)

    @property
    @pulumi.getter(name="syncConfig")
    def sync_config(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable configuration synchronization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sync_config")

    @sync_config.setter
    def sync_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_config", value)

    @property
    @pulumi.getter(name="syncPacketBalance")
    def sync_packet_balance(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HA packet distribution to multiple CPUs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sync_packet_balance")

    @sync_packet_balance.setter
    def sync_packet_balance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_packet_balance", value)

    @property
    @pulumi.getter(name="unicastGateway")
    def unicast_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Default route gateway for unicast interface.
        """
        return pulumi.get(self, "unicast_gateway")

    @unicast_gateway.setter
    def unicast_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicast_gateway", value)

    @property
    @pulumi.getter(name="unicastHb")
    def unicast_hb(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable unicast heartbeat. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "unicast_hb")

    @unicast_hb.setter
    def unicast_hb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicast_hb", value)

    @property
    @pulumi.getter(name="unicastHbNetmask")
    def unicast_hb_netmask(self) -> Optional[pulumi.Input[str]]:
        """
        Unicast heartbeat netmask.
        """
        return pulumi.get(self, "unicast_hb_netmask")

    @unicast_hb_netmask.setter
    def unicast_hb_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicast_hb_netmask", value)

    @property
    @pulumi.getter(name="unicastHbPeerip")
    def unicast_hb_peerip(self) -> Optional[pulumi.Input[str]]:
        """
        Unicast heartbeat peer IP.
        """
        return pulumi.get(self, "unicast_hb_peerip")

    @unicast_hb_peerip.setter
    def unicast_hb_peerip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicast_hb_peerip", value)

    @property
    @pulumi.getter(name="unicastPeers")
    def unicast_peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HaUnicastPeerArgs']]]]:
        """
        Number of unicast peers. The structure of `unicast_peers` block is documented below.
        """
        return pulumi.get(self, "unicast_peers")

    @unicast_peers.setter
    def unicast_peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HaUnicastPeerArgs']]]]):
        pulumi.set(self, "unicast_peers", value)

    @property
    @pulumi.getter(name="unicastStatus")
    def unicast_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable unicast connection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "unicast_status")

    @unicast_status.setter
    def unicast_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicast_status", value)

    @property
    @pulumi.getter(name="uninterruptiblePrimaryWait")
    def uninterruptible_primary_wait(self) -> Optional[pulumi.Input[int]]:
        """
        Number of minutes the primary HA unit waits before the secondary HA unit is considered upgraded and the system is started before starting its own upgrade (1 - 300, default = 30).
        """
        return pulumi.get(self, "uninterruptible_primary_wait")

    @uninterruptible_primary_wait.setter
    def uninterruptible_primary_wait(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uninterruptible_primary_wait", value)

    @property
    @pulumi.getter(name="uninterruptibleUpgrade")
    def uninterruptible_upgrade(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to upgrade a cluster without blocking network traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "uninterruptible_upgrade")

    @uninterruptible_upgrade.setter
    def uninterruptible_upgrade(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uninterruptible_upgrade", value)

    @property
    @pulumi.getter(name="upgradeMode")
    def upgrade_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The mode to upgrade a cluster. Valid values: `simultaneous`, `uninterruptible`, `local-only`, `secondary-only`.
        """
        return pulumi.get(self, "upgrade_mode")

    @upgrade_mode.setter
    def upgrade_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_mode", value)

    @property
    @pulumi.getter
    def vcluster2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable virtual cluster 2 for virtual clustering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vcluster2")

    @vcluster2.setter
    def vcluster2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcluster2", value)

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> Optional[pulumi.Input[int]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "vcluster_id")

    @vcluster_id.setter
    def vcluster_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcluster_id", value)

    @property
    @pulumi.getter(name="vclusterStatus")
    def vcluster_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable virtual cluster for virtual clustering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vcluster_status")

    @vcluster_status.setter
    def vcluster_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcluster_status", value)

    @property
    @pulumi.getter
    def vclusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HaVclusterArgs']]]]:
        """
        Virtual cluster table. The structure of `vcluster` block is documented below.
        """
        return pulumi.get(self, "vclusters")

    @vclusters.setter
    def vclusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HaVclusterArgs']]]]):
        pulumi.set(self, "vclusters", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        VDOMs in virtual cluster 1.
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[str]]:
        """
        Weight-round-robin weight for each cluster unit. Syntax <priority> <weight>.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weight", value)


class Ha(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arps: Optional[pulumi.Input[int]] = None,
                 arps_interval: Optional[pulumi.Input[int]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 cpu_threshold: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 evpn_ttl: Optional[pulumi.Input[int]] = None,
                 failover_hold_time: Optional[pulumi.Input[int]] = None,
                 ftp_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gratuitous_arps: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 ha_eth_type: Optional[pulumi.Input[str]] = None,
                 ha_mgmt_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaHaMgmtInterfaceArgs']]]]] = None,
                 ha_mgmt_status: Optional[pulumi.Input[str]] = None,
                 ha_uptime_diff_margin: Optional[pulumi.Input[int]] = None,
                 hb_interval: Optional[pulumi.Input[int]] = None,
                 hb_interval_in_milliseconds: Optional[pulumi.Input[str]] = None,
                 hb_lost_threshold: Optional[pulumi.Input[int]] = None,
                 hbdev: Optional[pulumi.Input[str]] = None,
                 hc_eth_type: Optional[pulumi.Input[str]] = None,
                 hello_holddown: Optional[pulumi.Input[int]] = None,
                 http_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 imap_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 inter_cluster_session_sync: Optional[pulumi.Input[str]] = None,
                 ipsec_phase2_proposal: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 l2ep_eth_type: Optional[pulumi.Input[str]] = None,
                 link_failed_signal: Optional[pulumi.Input[str]] = None,
                 load_balance_all: Optional[pulumi.Input[str]] = None,
                 logical_sn: Optional[pulumi.Input[str]] = None,
                 memory_based_failover: Optional[pulumi.Input[str]] = None,
                 memory_compatible_mode: Optional[pulumi.Input[str]] = None,
                 memory_failover_flip_timeout: Optional[pulumi.Input[int]] = None,
                 memory_failover_monitor_period: Optional[pulumi.Input[int]] = None,
                 memory_failover_sample_rate: Optional[pulumi.Input[int]] = None,
                 memory_failover_threshold: Optional[pulumi.Input[int]] = None,
                 memory_threshold: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 multicast_ttl: Optional[pulumi.Input[int]] = None,
                 nntp_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[str]] = None,
                 override_wait_time: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pingserver_failover_threshold: Optional[pulumi.Input[int]] = None,
                 pingserver_flip_timeout: Optional[pulumi.Input[int]] = None,
                 pingserver_monitor_interface: Optional[pulumi.Input[str]] = None,
                 pingserver_secondary_force_reset: Optional[pulumi.Input[str]] = None,
                 pingserver_slave_force_reset: Optional[pulumi.Input[str]] = None,
                 pop3_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 route_hold: Optional[pulumi.Input[int]] = None,
                 route_ttl: Optional[pulumi.Input[int]] = None,
                 route_wait: Optional[pulumi.Input[int]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 secondary_vcluster: Optional[pulumi.Input[pulumi.InputType['HaSecondaryVclusterArgs']]] = None,
                 session_pickup: Optional[pulumi.Input[str]] = None,
                 session_pickup_connectionless: Optional[pulumi.Input[str]] = None,
                 session_pickup_delay: Optional[pulumi.Input[str]] = None,
                 session_pickup_expectation: Optional[pulumi.Input[str]] = None,
                 session_pickup_nat: Optional[pulumi.Input[str]] = None,
                 session_sync_dev: Optional[pulumi.Input[str]] = None,
                 smtp_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 ssd_failover: Optional[pulumi.Input[str]] = None,
                 standalone_config_sync: Optional[pulumi.Input[str]] = None,
                 standalone_mgmt_vdom: Optional[pulumi.Input[str]] = None,
                 sync_config: Optional[pulumi.Input[str]] = None,
                 sync_packet_balance: Optional[pulumi.Input[str]] = None,
                 unicast_gateway: Optional[pulumi.Input[str]] = None,
                 unicast_hb: Optional[pulumi.Input[str]] = None,
                 unicast_hb_netmask: Optional[pulumi.Input[str]] = None,
                 unicast_hb_peerip: Optional[pulumi.Input[str]] = None,
                 unicast_peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaUnicastPeerArgs']]]]] = None,
                 unicast_status: Optional[pulumi.Input[str]] = None,
                 uninterruptible_primary_wait: Optional[pulumi.Input[int]] = None,
                 uninterruptible_upgrade: Optional[pulumi.Input[str]] = None,
                 upgrade_mode: Optional[pulumi.Input[str]] = None,
                 vcluster2: Optional[pulumi.Input[str]] = None,
                 vcluster_id: Optional[pulumi.Input[int]] = None,
                 vcluster_status: Optional[pulumi.Input[str]] = None,
                 vclusters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaVclusterArgs']]]]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure HA.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Ha("trname",
            cpu_threshold="5 0 0",
            encryption="disable",
            ftp_proxy_threshold="5 0 0",
            gratuitous_arps="enable",
            group_id=0,
            ha_direct="disable",
            ha_eth_type="8890",
            ha_mgmt_status="disable",
            ha_uptime_diff_margin=300,
            hb_interval=2,
            hb_lost_threshold=20,
            hc_eth_type="8891",
            hello_holddown=20,
            http_proxy_threshold="5 0 0",
            imap_proxy_threshold="5 0 0",
            inter_cluster_session_sync="disable",
            l2ep_eth_type="8893",
            link_failed_signal="disable",
            load_balance_all="disable",
            memory_compatible_mode="disable",
            memory_threshold="5 0 0",
            mode="standalone",
            multicast_ttl=600,
            nntp_proxy_threshold="5 0 0",
            override="disable",
            override_wait_time=0,
            secondary_vcluster=fortios.system.HaSecondaryVclusterArgs(
                override="enable",
                override_wait_time=0,
                pingserver_failover_threshold=0,
                pingserver_slave_force_reset="enable",
                priority=128,
                vcluster_id=1,
            ),
            weight="40 ")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Ha can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/ha:Ha labelname SystemHa
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/ha:Ha labelname SystemHa
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] arps: Number of gratuitous ARPs (1 - 60). Lower to reduce traffic. Higher to reduce failover time.
        :param pulumi.Input[int] arps_interval: Time between gratuitous ARPs  (1 - 20 sec). Lower to reduce failover time. Higher to reduce traffic.
        :param pulumi.Input[str] authentication: Enable/disable heartbeat message authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cpu_threshold: Dynamic weighted load balancing CPU usage weight and high and low thresholds.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] encryption: Enable/disable heartbeat message encryption. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] evpn_ttl: HA EVPN FDB TTL on primary box (5 - 3600 sec).
        :param pulumi.Input[int] failover_hold_time: Time to wait before failover (0 - 300 sec, default = 0), to avoid flip.
        :param pulumi.Input[str] ftp_proxy_threshold: Dynamic weighted load balancing weight and high and low number of FTP proxy sessions.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] gratuitous_arps: Enable/disable gratuitous ARPs. Disable if link-failed-signal enabled. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] group_id: Cluster group ID  (0 - 255). Must be the same for all members.
        :param pulumi.Input[str] group_name: Cluster group name. Must be the same for all members.
        :param pulumi.Input[str] ha_direct: Enable/disable using ha-mgmt interface for syslog, SNMP, remote authentication (RADIUS), FortiAnalyzer, and FortiSandbox. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ha_eth_type: HA heartbeat packet Ethertype (4-digit hex).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaHaMgmtInterfaceArgs']]]] ha_mgmt_interfaces: Reserve interfaces to manage individual cluster units. The structure of `ha_mgmt_interfaces` block is documented below.
        :param pulumi.Input[str] ha_mgmt_status: Enable to reserve interfaces to manage individual cluster units. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ha_uptime_diff_margin: Normally you would only reduce this value for failover testing.
        :param pulumi.Input[int] hb_interval: Time between sending heartbeat packets (1 - 20 (100*ms)). Increase to reduce false positives.
        :param pulumi.Input[str] hb_interval_in_milliseconds: Number of milliseconds for each heartbeat interval: 100ms or 10ms. Valid values: `100ms`, `10ms`.
        :param pulumi.Input[int] hb_lost_threshold: Number of lost heartbeats to signal a failure (1 - 60). Increase to reduce false positives.
        :param pulumi.Input[str] hbdev: Heartbeat interfaces. Must be the same for all members.
        :param pulumi.Input[str] hc_eth_type: Transparent mode HA heartbeat packet Ethertype (4-digit hex).
        :param pulumi.Input[int] hello_holddown: Time to wait before changing from hello to work state (5 - 300 sec).
        :param pulumi.Input[str] http_proxy_threshold: Dynamic weighted load balancing weight and high and low number of HTTP proxy sessions.
        :param pulumi.Input[str] imap_proxy_threshold: Dynamic weighted load balancing weight and high and low number of IMAP proxy sessions.
        :param pulumi.Input[str] inter_cluster_session_sync: Enable/disable synchronization of sessions among HA clusters. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipsec_phase2_proposal: IPsec phase2 proposal. Valid values: `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes128gcm`, `aes256gcm`, `chacha20poly1305`.
        :param pulumi.Input[str] key: key
        :param pulumi.Input[str] l2ep_eth_type: Telnet session HA heartbeat packet Ethertype (4-digit hex).
        :param pulumi.Input[str] link_failed_signal: Enable to shut down all interfaces for 1 sec after a failover. Use if gratuitous ARPs do not update network. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] load_balance_all: Enable to load balance TCP sessions. Disable to load balance proxy sessions only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logical_sn: Enable/disable usage of the logical serial number. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] memory_based_failover: Enable/disable memory based failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] memory_compatible_mode: Enable/disable memory compatible mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] memory_failover_flip_timeout: Time to wait between subsequent memory based failovers in minutes (6 - 2147483647, default = 6).
        :param pulumi.Input[int] memory_failover_monitor_period: Duration of high memory usage before memory based failover is triggered in seconds (1 - 300, default = 60).
        :param pulumi.Input[int] memory_failover_sample_rate: Rate at which memory usage is sampled in order to measure memory usage in seconds (1 - 60, default = 1).
        :param pulumi.Input[int] memory_failover_threshold: Memory usage threshold to trigger memory based failover (0 means using conserve mode threshold in system.global).
        :param pulumi.Input[str] memory_threshold: Dynamic weighted load balancing memory usage weight and high and low thresholds.
        :param pulumi.Input[str] mode: HA mode. Must be the same for all members. FGSP requires standalone. Valid values: `standalone`, `a-a`, `a-p`.
        :param pulumi.Input[str] monitor: Interfaces to check for port monitoring (or link failure).
        :param pulumi.Input[int] multicast_ttl: HA multicast TTL on master (5 - 3600 sec).
        :param pulumi.Input[str] nntp_proxy_threshold: Dynamic weighted load balancing weight and high and low number of NNTP proxy sessions.
        :param pulumi.Input[str] override: Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] override_wait_time: Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        :param pulumi.Input[str] password: Cluster password. Must be the same for all members.
        :param pulumi.Input[int] pingserver_failover_threshold: Remote IP monitoring failover threshold (0 - 50).
        :param pulumi.Input[int] pingserver_flip_timeout: Time to wait in minutes before renegotiating after a remote IP monitoring failover.
        :param pulumi.Input[str] pingserver_monitor_interface: Interfaces to check for remote IP monitoring.
        :param pulumi.Input[str] pingserver_secondary_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pingserver_slave_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pop3_proxy_threshold: Dynamic weighted load balancing weight and high and low number of POP3 proxy sessions.
        :param pulumi.Input[int] priority: Increase the priority to select the primary unit (0 - 255).
        :param pulumi.Input[int] route_hold: Time to wait between routing table updates to the cluster (0 - 3600 sec).
        :param pulumi.Input[int] route_ttl: TTL for primary unit routes (5 - 3600 sec). Increase to maintain active routes during failover.
        :param pulumi.Input[int] route_wait: Time to wait before sending new routes to the cluster (0 - 3600 sec).
        :param pulumi.Input[str] schedule: Type of A-A load balancing. Use none if you have external load balancers.
        :param pulumi.Input[pulumi.InputType['HaSecondaryVclusterArgs']] secondary_vcluster: Configure virtual cluster 2. The structure of `secondary_vcluster` block is documented below.
        :param pulumi.Input[str] session_pickup: Enable/disable session pickup. Enabling it can reduce session down time when fail over happens. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_connectionless: Enable/disable UDP and ICMP session sync. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_delay: Enable to sync sessions longer than 30 sec. Only longer lived sessions need to be synced. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_expectation: Enable/disable session helper expectation session sync for FGSP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_nat: Enable/disable NAT session sync for FGSP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_sync_dev: Offload session-sync process to kernel and sync sessions using connected interface(s) directly.
        :param pulumi.Input[str] smtp_proxy_threshold: Dynamic weighted load balancing weight and high and low number of SMTP proxy sessions.
        :param pulumi.Input[str] ssd_failover: Enable/disable automatic HA failover on SSD disk failure. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] standalone_config_sync: Enable/disable FGSP configuration synchronization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] standalone_mgmt_vdom: Enable/disable standalone management VDOM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sync_config: Enable/disable configuration synchronization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sync_packet_balance: Enable/disable HA packet distribution to multiple CPUs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unicast_gateway: Default route gateway for unicast interface.
        :param pulumi.Input[str] unicast_hb: Enable/disable unicast heartbeat. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unicast_hb_netmask: Unicast heartbeat netmask.
        :param pulumi.Input[str] unicast_hb_peerip: Unicast heartbeat peer IP.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaUnicastPeerArgs']]]] unicast_peers: Number of unicast peers. The structure of `unicast_peers` block is documented below.
        :param pulumi.Input[str] unicast_status: Enable/disable unicast connection. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] uninterruptible_primary_wait: Number of minutes the primary HA unit waits before the secondary HA unit is considered upgraded and the system is started before starting its own upgrade (1 - 300, default = 30).
        :param pulumi.Input[str] uninterruptible_upgrade: Enable to upgrade a cluster without blocking network traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] upgrade_mode: The mode to upgrade a cluster. Valid values: `simultaneous`, `uninterruptible`, `local-only`, `secondary-only`.
        :param pulumi.Input[str] vcluster2: Enable/disable virtual cluster 2 for virtual clustering. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] vcluster_id: Cluster ID.
        :param pulumi.Input[str] vcluster_status: Enable/disable virtual cluster for virtual clustering. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaVclusterArgs']]]] vclusters: Virtual cluster table. The structure of `vcluster` block is documented below.
        :param pulumi.Input[str] vdom: VDOMs in virtual cluster 1.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] weight: Weight-round-robin weight for each cluster unit. Syntax <priority> <weight>.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[HaArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure HA.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Ha("trname",
            cpu_threshold="5 0 0",
            encryption="disable",
            ftp_proxy_threshold="5 0 0",
            gratuitous_arps="enable",
            group_id=0,
            ha_direct="disable",
            ha_eth_type="8890",
            ha_mgmt_status="disable",
            ha_uptime_diff_margin=300,
            hb_interval=2,
            hb_lost_threshold=20,
            hc_eth_type="8891",
            hello_holddown=20,
            http_proxy_threshold="5 0 0",
            imap_proxy_threshold="5 0 0",
            inter_cluster_session_sync="disable",
            l2ep_eth_type="8893",
            link_failed_signal="disable",
            load_balance_all="disable",
            memory_compatible_mode="disable",
            memory_threshold="5 0 0",
            mode="standalone",
            multicast_ttl=600,
            nntp_proxy_threshold="5 0 0",
            override="disable",
            override_wait_time=0,
            secondary_vcluster=fortios.system.HaSecondaryVclusterArgs(
                override="enable",
                override_wait_time=0,
                pingserver_failover_threshold=0,
                pingserver_slave_force_reset="enable",
                priority=128,
                vcluster_id=1,
            ),
            weight="40 ")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Ha can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/ha:Ha labelname SystemHa
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/ha:Ha labelname SystemHa
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param HaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arps: Optional[pulumi.Input[int]] = None,
                 arps_interval: Optional[pulumi.Input[int]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 cpu_threshold: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 evpn_ttl: Optional[pulumi.Input[int]] = None,
                 failover_hold_time: Optional[pulumi.Input[int]] = None,
                 ftp_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 gratuitous_arps: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 ha_eth_type: Optional[pulumi.Input[str]] = None,
                 ha_mgmt_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaHaMgmtInterfaceArgs']]]]] = None,
                 ha_mgmt_status: Optional[pulumi.Input[str]] = None,
                 ha_uptime_diff_margin: Optional[pulumi.Input[int]] = None,
                 hb_interval: Optional[pulumi.Input[int]] = None,
                 hb_interval_in_milliseconds: Optional[pulumi.Input[str]] = None,
                 hb_lost_threshold: Optional[pulumi.Input[int]] = None,
                 hbdev: Optional[pulumi.Input[str]] = None,
                 hc_eth_type: Optional[pulumi.Input[str]] = None,
                 hello_holddown: Optional[pulumi.Input[int]] = None,
                 http_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 imap_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 inter_cluster_session_sync: Optional[pulumi.Input[str]] = None,
                 ipsec_phase2_proposal: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 l2ep_eth_type: Optional[pulumi.Input[str]] = None,
                 link_failed_signal: Optional[pulumi.Input[str]] = None,
                 load_balance_all: Optional[pulumi.Input[str]] = None,
                 logical_sn: Optional[pulumi.Input[str]] = None,
                 memory_based_failover: Optional[pulumi.Input[str]] = None,
                 memory_compatible_mode: Optional[pulumi.Input[str]] = None,
                 memory_failover_flip_timeout: Optional[pulumi.Input[int]] = None,
                 memory_failover_monitor_period: Optional[pulumi.Input[int]] = None,
                 memory_failover_sample_rate: Optional[pulumi.Input[int]] = None,
                 memory_failover_threshold: Optional[pulumi.Input[int]] = None,
                 memory_threshold: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 multicast_ttl: Optional[pulumi.Input[int]] = None,
                 nntp_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[str]] = None,
                 override_wait_time: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pingserver_failover_threshold: Optional[pulumi.Input[int]] = None,
                 pingserver_flip_timeout: Optional[pulumi.Input[int]] = None,
                 pingserver_monitor_interface: Optional[pulumi.Input[str]] = None,
                 pingserver_secondary_force_reset: Optional[pulumi.Input[str]] = None,
                 pingserver_slave_force_reset: Optional[pulumi.Input[str]] = None,
                 pop3_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 route_hold: Optional[pulumi.Input[int]] = None,
                 route_ttl: Optional[pulumi.Input[int]] = None,
                 route_wait: Optional[pulumi.Input[int]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 secondary_vcluster: Optional[pulumi.Input[pulumi.InputType['HaSecondaryVclusterArgs']]] = None,
                 session_pickup: Optional[pulumi.Input[str]] = None,
                 session_pickup_connectionless: Optional[pulumi.Input[str]] = None,
                 session_pickup_delay: Optional[pulumi.Input[str]] = None,
                 session_pickup_expectation: Optional[pulumi.Input[str]] = None,
                 session_pickup_nat: Optional[pulumi.Input[str]] = None,
                 session_sync_dev: Optional[pulumi.Input[str]] = None,
                 smtp_proxy_threshold: Optional[pulumi.Input[str]] = None,
                 ssd_failover: Optional[pulumi.Input[str]] = None,
                 standalone_config_sync: Optional[pulumi.Input[str]] = None,
                 standalone_mgmt_vdom: Optional[pulumi.Input[str]] = None,
                 sync_config: Optional[pulumi.Input[str]] = None,
                 sync_packet_balance: Optional[pulumi.Input[str]] = None,
                 unicast_gateway: Optional[pulumi.Input[str]] = None,
                 unicast_hb: Optional[pulumi.Input[str]] = None,
                 unicast_hb_netmask: Optional[pulumi.Input[str]] = None,
                 unicast_hb_peerip: Optional[pulumi.Input[str]] = None,
                 unicast_peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaUnicastPeerArgs']]]]] = None,
                 unicast_status: Optional[pulumi.Input[str]] = None,
                 uninterruptible_primary_wait: Optional[pulumi.Input[int]] = None,
                 uninterruptible_upgrade: Optional[pulumi.Input[str]] = None,
                 upgrade_mode: Optional[pulumi.Input[str]] = None,
                 vcluster2: Optional[pulumi.Input[str]] = None,
                 vcluster_id: Optional[pulumi.Input[int]] = None,
                 vcluster_status: Optional[pulumi.Input[str]] = None,
                 vclusters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaVclusterArgs']]]]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HaArgs.__new__(HaArgs)

            __props__.__dict__["arps"] = arps
            __props__.__dict__["arps_interval"] = arps_interval
            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["cpu_threshold"] = cpu_threshold
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["encryption"] = encryption
            __props__.__dict__["evpn_ttl"] = evpn_ttl
            __props__.__dict__["failover_hold_time"] = failover_hold_time
            __props__.__dict__["ftp_proxy_threshold"] = ftp_proxy_threshold
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["gratuitous_arps"] = gratuitous_arps
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["ha_direct"] = ha_direct
            __props__.__dict__["ha_eth_type"] = ha_eth_type
            __props__.__dict__["ha_mgmt_interfaces"] = ha_mgmt_interfaces
            __props__.__dict__["ha_mgmt_status"] = ha_mgmt_status
            __props__.__dict__["ha_uptime_diff_margin"] = ha_uptime_diff_margin
            __props__.__dict__["hb_interval"] = hb_interval
            __props__.__dict__["hb_interval_in_milliseconds"] = hb_interval_in_milliseconds
            __props__.__dict__["hb_lost_threshold"] = hb_lost_threshold
            __props__.__dict__["hbdev"] = hbdev
            __props__.__dict__["hc_eth_type"] = hc_eth_type
            __props__.__dict__["hello_holddown"] = hello_holddown
            __props__.__dict__["http_proxy_threshold"] = http_proxy_threshold
            __props__.__dict__["imap_proxy_threshold"] = imap_proxy_threshold
            __props__.__dict__["inter_cluster_session_sync"] = inter_cluster_session_sync
            __props__.__dict__["ipsec_phase2_proposal"] = ipsec_phase2_proposal
            __props__.__dict__["key"] = None if key is None else pulumi.Output.secret(key)
            __props__.__dict__["l2ep_eth_type"] = l2ep_eth_type
            __props__.__dict__["link_failed_signal"] = link_failed_signal
            __props__.__dict__["load_balance_all"] = load_balance_all
            __props__.__dict__["logical_sn"] = logical_sn
            __props__.__dict__["memory_based_failover"] = memory_based_failover
            __props__.__dict__["memory_compatible_mode"] = memory_compatible_mode
            __props__.__dict__["memory_failover_flip_timeout"] = memory_failover_flip_timeout
            __props__.__dict__["memory_failover_monitor_period"] = memory_failover_monitor_period
            __props__.__dict__["memory_failover_sample_rate"] = memory_failover_sample_rate
            __props__.__dict__["memory_failover_threshold"] = memory_failover_threshold
            __props__.__dict__["memory_threshold"] = memory_threshold
            __props__.__dict__["mode"] = mode
            __props__.__dict__["monitor"] = monitor
            __props__.__dict__["multicast_ttl"] = multicast_ttl
            __props__.__dict__["nntp_proxy_threshold"] = nntp_proxy_threshold
            __props__.__dict__["override"] = override
            __props__.__dict__["override_wait_time"] = override_wait_time
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["pingserver_failover_threshold"] = pingserver_failover_threshold
            __props__.__dict__["pingserver_flip_timeout"] = pingserver_flip_timeout
            __props__.__dict__["pingserver_monitor_interface"] = pingserver_monitor_interface
            __props__.__dict__["pingserver_secondary_force_reset"] = pingserver_secondary_force_reset
            __props__.__dict__["pingserver_slave_force_reset"] = pingserver_slave_force_reset
            __props__.__dict__["pop3_proxy_threshold"] = pop3_proxy_threshold
            __props__.__dict__["priority"] = priority
            __props__.__dict__["route_hold"] = route_hold
            __props__.__dict__["route_ttl"] = route_ttl
            __props__.__dict__["route_wait"] = route_wait
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["secondary_vcluster"] = secondary_vcluster
            __props__.__dict__["session_pickup"] = session_pickup
            __props__.__dict__["session_pickup_connectionless"] = session_pickup_connectionless
            __props__.__dict__["session_pickup_delay"] = session_pickup_delay
            __props__.__dict__["session_pickup_expectation"] = session_pickup_expectation
            __props__.__dict__["session_pickup_nat"] = session_pickup_nat
            __props__.__dict__["session_sync_dev"] = session_sync_dev
            __props__.__dict__["smtp_proxy_threshold"] = smtp_proxy_threshold
            __props__.__dict__["ssd_failover"] = ssd_failover
            __props__.__dict__["standalone_config_sync"] = standalone_config_sync
            __props__.__dict__["standalone_mgmt_vdom"] = standalone_mgmt_vdom
            __props__.__dict__["sync_config"] = sync_config
            __props__.__dict__["sync_packet_balance"] = sync_packet_balance
            __props__.__dict__["unicast_gateway"] = unicast_gateway
            __props__.__dict__["unicast_hb"] = unicast_hb
            __props__.__dict__["unicast_hb_netmask"] = unicast_hb_netmask
            __props__.__dict__["unicast_hb_peerip"] = unicast_hb_peerip
            __props__.__dict__["unicast_peers"] = unicast_peers
            __props__.__dict__["unicast_status"] = unicast_status
            __props__.__dict__["uninterruptible_primary_wait"] = uninterruptible_primary_wait
            __props__.__dict__["uninterruptible_upgrade"] = uninterruptible_upgrade
            __props__.__dict__["upgrade_mode"] = upgrade_mode
            __props__.__dict__["vcluster2"] = vcluster2
            __props__.__dict__["vcluster_id"] = vcluster_id
            __props__.__dict__["vcluster_status"] = vcluster_status
            __props__.__dict__["vclusters"] = vclusters
            __props__.__dict__["vdom"] = vdom
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["weight"] = weight
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["key", "password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Ha, __self__).__init__(
            'fortios:system/ha:Ha',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arps: Optional[pulumi.Input[int]] = None,
            arps_interval: Optional[pulumi.Input[int]] = None,
            authentication: Optional[pulumi.Input[str]] = None,
            cpu_threshold: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            encryption: Optional[pulumi.Input[str]] = None,
            evpn_ttl: Optional[pulumi.Input[int]] = None,
            failover_hold_time: Optional[pulumi.Input[int]] = None,
            ftp_proxy_threshold: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            gratuitous_arps: Optional[pulumi.Input[str]] = None,
            group_id: Optional[pulumi.Input[int]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            ha_direct: Optional[pulumi.Input[str]] = None,
            ha_eth_type: Optional[pulumi.Input[str]] = None,
            ha_mgmt_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaHaMgmtInterfaceArgs']]]]] = None,
            ha_mgmt_status: Optional[pulumi.Input[str]] = None,
            ha_uptime_diff_margin: Optional[pulumi.Input[int]] = None,
            hb_interval: Optional[pulumi.Input[int]] = None,
            hb_interval_in_milliseconds: Optional[pulumi.Input[str]] = None,
            hb_lost_threshold: Optional[pulumi.Input[int]] = None,
            hbdev: Optional[pulumi.Input[str]] = None,
            hc_eth_type: Optional[pulumi.Input[str]] = None,
            hello_holddown: Optional[pulumi.Input[int]] = None,
            http_proxy_threshold: Optional[pulumi.Input[str]] = None,
            imap_proxy_threshold: Optional[pulumi.Input[str]] = None,
            inter_cluster_session_sync: Optional[pulumi.Input[str]] = None,
            ipsec_phase2_proposal: Optional[pulumi.Input[str]] = None,
            key: Optional[pulumi.Input[str]] = None,
            l2ep_eth_type: Optional[pulumi.Input[str]] = None,
            link_failed_signal: Optional[pulumi.Input[str]] = None,
            load_balance_all: Optional[pulumi.Input[str]] = None,
            logical_sn: Optional[pulumi.Input[str]] = None,
            memory_based_failover: Optional[pulumi.Input[str]] = None,
            memory_compatible_mode: Optional[pulumi.Input[str]] = None,
            memory_failover_flip_timeout: Optional[pulumi.Input[int]] = None,
            memory_failover_monitor_period: Optional[pulumi.Input[int]] = None,
            memory_failover_sample_rate: Optional[pulumi.Input[int]] = None,
            memory_failover_threshold: Optional[pulumi.Input[int]] = None,
            memory_threshold: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            monitor: Optional[pulumi.Input[str]] = None,
            multicast_ttl: Optional[pulumi.Input[int]] = None,
            nntp_proxy_threshold: Optional[pulumi.Input[str]] = None,
            override: Optional[pulumi.Input[str]] = None,
            override_wait_time: Optional[pulumi.Input[int]] = None,
            password: Optional[pulumi.Input[str]] = None,
            pingserver_failover_threshold: Optional[pulumi.Input[int]] = None,
            pingserver_flip_timeout: Optional[pulumi.Input[int]] = None,
            pingserver_monitor_interface: Optional[pulumi.Input[str]] = None,
            pingserver_secondary_force_reset: Optional[pulumi.Input[str]] = None,
            pingserver_slave_force_reset: Optional[pulumi.Input[str]] = None,
            pop3_proxy_threshold: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            route_hold: Optional[pulumi.Input[int]] = None,
            route_ttl: Optional[pulumi.Input[int]] = None,
            route_wait: Optional[pulumi.Input[int]] = None,
            schedule: Optional[pulumi.Input[str]] = None,
            secondary_vcluster: Optional[pulumi.Input[pulumi.InputType['HaSecondaryVclusterArgs']]] = None,
            session_pickup: Optional[pulumi.Input[str]] = None,
            session_pickup_connectionless: Optional[pulumi.Input[str]] = None,
            session_pickup_delay: Optional[pulumi.Input[str]] = None,
            session_pickup_expectation: Optional[pulumi.Input[str]] = None,
            session_pickup_nat: Optional[pulumi.Input[str]] = None,
            session_sync_dev: Optional[pulumi.Input[str]] = None,
            smtp_proxy_threshold: Optional[pulumi.Input[str]] = None,
            ssd_failover: Optional[pulumi.Input[str]] = None,
            standalone_config_sync: Optional[pulumi.Input[str]] = None,
            standalone_mgmt_vdom: Optional[pulumi.Input[str]] = None,
            sync_config: Optional[pulumi.Input[str]] = None,
            sync_packet_balance: Optional[pulumi.Input[str]] = None,
            unicast_gateway: Optional[pulumi.Input[str]] = None,
            unicast_hb: Optional[pulumi.Input[str]] = None,
            unicast_hb_netmask: Optional[pulumi.Input[str]] = None,
            unicast_hb_peerip: Optional[pulumi.Input[str]] = None,
            unicast_peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaUnicastPeerArgs']]]]] = None,
            unicast_status: Optional[pulumi.Input[str]] = None,
            uninterruptible_primary_wait: Optional[pulumi.Input[int]] = None,
            uninterruptible_upgrade: Optional[pulumi.Input[str]] = None,
            upgrade_mode: Optional[pulumi.Input[str]] = None,
            vcluster2: Optional[pulumi.Input[str]] = None,
            vcluster_id: Optional[pulumi.Input[int]] = None,
            vcluster_status: Optional[pulumi.Input[str]] = None,
            vclusters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaVclusterArgs']]]]] = None,
            vdom: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            weight: Optional[pulumi.Input[str]] = None) -> 'Ha':
        """
        Get an existing Ha resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] arps: Number of gratuitous ARPs (1 - 60). Lower to reduce traffic. Higher to reduce failover time.
        :param pulumi.Input[int] arps_interval: Time between gratuitous ARPs  (1 - 20 sec). Lower to reduce failover time. Higher to reduce traffic.
        :param pulumi.Input[str] authentication: Enable/disable heartbeat message authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cpu_threshold: Dynamic weighted load balancing CPU usage weight and high and low thresholds.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] encryption: Enable/disable heartbeat message encryption. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] evpn_ttl: HA EVPN FDB TTL on primary box (5 - 3600 sec).
        :param pulumi.Input[int] failover_hold_time: Time to wait before failover (0 - 300 sec, default = 0), to avoid flip.
        :param pulumi.Input[str] ftp_proxy_threshold: Dynamic weighted load balancing weight and high and low number of FTP proxy sessions.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] gratuitous_arps: Enable/disable gratuitous ARPs. Disable if link-failed-signal enabled. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] group_id: Cluster group ID  (0 - 255). Must be the same for all members.
        :param pulumi.Input[str] group_name: Cluster group name. Must be the same for all members.
        :param pulumi.Input[str] ha_direct: Enable/disable using ha-mgmt interface for syslog, SNMP, remote authentication (RADIUS), FortiAnalyzer, and FortiSandbox. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ha_eth_type: HA heartbeat packet Ethertype (4-digit hex).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaHaMgmtInterfaceArgs']]]] ha_mgmt_interfaces: Reserve interfaces to manage individual cluster units. The structure of `ha_mgmt_interfaces` block is documented below.
        :param pulumi.Input[str] ha_mgmt_status: Enable to reserve interfaces to manage individual cluster units. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ha_uptime_diff_margin: Normally you would only reduce this value for failover testing.
        :param pulumi.Input[int] hb_interval: Time between sending heartbeat packets (1 - 20 (100*ms)). Increase to reduce false positives.
        :param pulumi.Input[str] hb_interval_in_milliseconds: Number of milliseconds for each heartbeat interval: 100ms or 10ms. Valid values: `100ms`, `10ms`.
        :param pulumi.Input[int] hb_lost_threshold: Number of lost heartbeats to signal a failure (1 - 60). Increase to reduce false positives.
        :param pulumi.Input[str] hbdev: Heartbeat interfaces. Must be the same for all members.
        :param pulumi.Input[str] hc_eth_type: Transparent mode HA heartbeat packet Ethertype (4-digit hex).
        :param pulumi.Input[int] hello_holddown: Time to wait before changing from hello to work state (5 - 300 sec).
        :param pulumi.Input[str] http_proxy_threshold: Dynamic weighted load balancing weight and high and low number of HTTP proxy sessions.
        :param pulumi.Input[str] imap_proxy_threshold: Dynamic weighted load balancing weight and high and low number of IMAP proxy sessions.
        :param pulumi.Input[str] inter_cluster_session_sync: Enable/disable synchronization of sessions among HA clusters. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipsec_phase2_proposal: IPsec phase2 proposal. Valid values: `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes128gcm`, `aes256gcm`, `chacha20poly1305`.
        :param pulumi.Input[str] key: key
        :param pulumi.Input[str] l2ep_eth_type: Telnet session HA heartbeat packet Ethertype (4-digit hex).
        :param pulumi.Input[str] link_failed_signal: Enable to shut down all interfaces for 1 sec after a failover. Use if gratuitous ARPs do not update network. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] load_balance_all: Enable to load balance TCP sessions. Disable to load balance proxy sessions only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] logical_sn: Enable/disable usage of the logical serial number. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] memory_based_failover: Enable/disable memory based failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] memory_compatible_mode: Enable/disable memory compatible mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] memory_failover_flip_timeout: Time to wait between subsequent memory based failovers in minutes (6 - 2147483647, default = 6).
        :param pulumi.Input[int] memory_failover_monitor_period: Duration of high memory usage before memory based failover is triggered in seconds (1 - 300, default = 60).
        :param pulumi.Input[int] memory_failover_sample_rate: Rate at which memory usage is sampled in order to measure memory usage in seconds (1 - 60, default = 1).
        :param pulumi.Input[int] memory_failover_threshold: Memory usage threshold to trigger memory based failover (0 means using conserve mode threshold in system.global).
        :param pulumi.Input[str] memory_threshold: Dynamic weighted load balancing memory usage weight and high and low thresholds.
        :param pulumi.Input[str] mode: HA mode. Must be the same for all members. FGSP requires standalone. Valid values: `standalone`, `a-a`, `a-p`.
        :param pulumi.Input[str] monitor: Interfaces to check for port monitoring (or link failure).
        :param pulumi.Input[int] multicast_ttl: HA multicast TTL on master (5 - 3600 sec).
        :param pulumi.Input[str] nntp_proxy_threshold: Dynamic weighted load balancing weight and high and low number of NNTP proxy sessions.
        :param pulumi.Input[str] override: Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] override_wait_time: Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        :param pulumi.Input[str] password: Cluster password. Must be the same for all members.
        :param pulumi.Input[int] pingserver_failover_threshold: Remote IP monitoring failover threshold (0 - 50).
        :param pulumi.Input[int] pingserver_flip_timeout: Time to wait in minutes before renegotiating after a remote IP monitoring failover.
        :param pulumi.Input[str] pingserver_monitor_interface: Interfaces to check for remote IP monitoring.
        :param pulumi.Input[str] pingserver_secondary_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pingserver_slave_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pop3_proxy_threshold: Dynamic weighted load balancing weight and high and low number of POP3 proxy sessions.
        :param pulumi.Input[int] priority: Increase the priority to select the primary unit (0 - 255).
        :param pulumi.Input[int] route_hold: Time to wait between routing table updates to the cluster (0 - 3600 sec).
        :param pulumi.Input[int] route_ttl: TTL for primary unit routes (5 - 3600 sec). Increase to maintain active routes during failover.
        :param pulumi.Input[int] route_wait: Time to wait before sending new routes to the cluster (0 - 3600 sec).
        :param pulumi.Input[str] schedule: Type of A-A load balancing. Use none if you have external load balancers.
        :param pulumi.Input[pulumi.InputType['HaSecondaryVclusterArgs']] secondary_vcluster: Configure virtual cluster 2. The structure of `secondary_vcluster` block is documented below.
        :param pulumi.Input[str] session_pickup: Enable/disable session pickup. Enabling it can reduce session down time when fail over happens. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_connectionless: Enable/disable UDP and ICMP session sync. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_delay: Enable to sync sessions longer than 30 sec. Only longer lived sessions need to be synced. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_expectation: Enable/disable session helper expectation session sync for FGSP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_pickup_nat: Enable/disable NAT session sync for FGSP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] session_sync_dev: Offload session-sync process to kernel and sync sessions using connected interface(s) directly.
        :param pulumi.Input[str] smtp_proxy_threshold: Dynamic weighted load balancing weight and high and low number of SMTP proxy sessions.
        :param pulumi.Input[str] ssd_failover: Enable/disable automatic HA failover on SSD disk failure. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] standalone_config_sync: Enable/disable FGSP configuration synchronization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] standalone_mgmt_vdom: Enable/disable standalone management VDOM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sync_config: Enable/disable configuration synchronization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sync_packet_balance: Enable/disable HA packet distribution to multiple CPUs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unicast_gateway: Default route gateway for unicast interface.
        :param pulumi.Input[str] unicast_hb: Enable/disable unicast heartbeat. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unicast_hb_netmask: Unicast heartbeat netmask.
        :param pulumi.Input[str] unicast_hb_peerip: Unicast heartbeat peer IP.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaUnicastPeerArgs']]]] unicast_peers: Number of unicast peers. The structure of `unicast_peers` block is documented below.
        :param pulumi.Input[str] unicast_status: Enable/disable unicast connection. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] uninterruptible_primary_wait: Number of minutes the primary HA unit waits before the secondary HA unit is considered upgraded and the system is started before starting its own upgrade (1 - 300, default = 30).
        :param pulumi.Input[str] uninterruptible_upgrade: Enable to upgrade a cluster without blocking network traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] upgrade_mode: The mode to upgrade a cluster. Valid values: `simultaneous`, `uninterruptible`, `local-only`, `secondary-only`.
        :param pulumi.Input[str] vcluster2: Enable/disable virtual cluster 2 for virtual clustering. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] vcluster_id: Cluster ID.
        :param pulumi.Input[str] vcluster_status: Enable/disable virtual cluster for virtual clustering. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HaVclusterArgs']]]] vclusters: Virtual cluster table. The structure of `vcluster` block is documented below.
        :param pulumi.Input[str] vdom: VDOMs in virtual cluster 1.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] weight: Weight-round-robin weight for each cluster unit. Syntax <priority> <weight>.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HaState.__new__(_HaState)

        __props__.__dict__["arps"] = arps
        __props__.__dict__["arps_interval"] = arps_interval
        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["cpu_threshold"] = cpu_threshold
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["encryption"] = encryption
        __props__.__dict__["evpn_ttl"] = evpn_ttl
        __props__.__dict__["failover_hold_time"] = failover_hold_time
        __props__.__dict__["ftp_proxy_threshold"] = ftp_proxy_threshold
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["gratuitous_arps"] = gratuitous_arps
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["ha_direct"] = ha_direct
        __props__.__dict__["ha_eth_type"] = ha_eth_type
        __props__.__dict__["ha_mgmt_interfaces"] = ha_mgmt_interfaces
        __props__.__dict__["ha_mgmt_status"] = ha_mgmt_status
        __props__.__dict__["ha_uptime_diff_margin"] = ha_uptime_diff_margin
        __props__.__dict__["hb_interval"] = hb_interval
        __props__.__dict__["hb_interval_in_milliseconds"] = hb_interval_in_milliseconds
        __props__.__dict__["hb_lost_threshold"] = hb_lost_threshold
        __props__.__dict__["hbdev"] = hbdev
        __props__.__dict__["hc_eth_type"] = hc_eth_type
        __props__.__dict__["hello_holddown"] = hello_holddown
        __props__.__dict__["http_proxy_threshold"] = http_proxy_threshold
        __props__.__dict__["imap_proxy_threshold"] = imap_proxy_threshold
        __props__.__dict__["inter_cluster_session_sync"] = inter_cluster_session_sync
        __props__.__dict__["ipsec_phase2_proposal"] = ipsec_phase2_proposal
        __props__.__dict__["key"] = key
        __props__.__dict__["l2ep_eth_type"] = l2ep_eth_type
        __props__.__dict__["link_failed_signal"] = link_failed_signal
        __props__.__dict__["load_balance_all"] = load_balance_all
        __props__.__dict__["logical_sn"] = logical_sn
        __props__.__dict__["memory_based_failover"] = memory_based_failover
        __props__.__dict__["memory_compatible_mode"] = memory_compatible_mode
        __props__.__dict__["memory_failover_flip_timeout"] = memory_failover_flip_timeout
        __props__.__dict__["memory_failover_monitor_period"] = memory_failover_monitor_period
        __props__.__dict__["memory_failover_sample_rate"] = memory_failover_sample_rate
        __props__.__dict__["memory_failover_threshold"] = memory_failover_threshold
        __props__.__dict__["memory_threshold"] = memory_threshold
        __props__.__dict__["mode"] = mode
        __props__.__dict__["monitor"] = monitor
        __props__.__dict__["multicast_ttl"] = multicast_ttl
        __props__.__dict__["nntp_proxy_threshold"] = nntp_proxy_threshold
        __props__.__dict__["override"] = override
        __props__.__dict__["override_wait_time"] = override_wait_time
        __props__.__dict__["password"] = password
        __props__.__dict__["pingserver_failover_threshold"] = pingserver_failover_threshold
        __props__.__dict__["pingserver_flip_timeout"] = pingserver_flip_timeout
        __props__.__dict__["pingserver_monitor_interface"] = pingserver_monitor_interface
        __props__.__dict__["pingserver_secondary_force_reset"] = pingserver_secondary_force_reset
        __props__.__dict__["pingserver_slave_force_reset"] = pingserver_slave_force_reset
        __props__.__dict__["pop3_proxy_threshold"] = pop3_proxy_threshold
        __props__.__dict__["priority"] = priority
        __props__.__dict__["route_hold"] = route_hold
        __props__.__dict__["route_ttl"] = route_ttl
        __props__.__dict__["route_wait"] = route_wait
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["secondary_vcluster"] = secondary_vcluster
        __props__.__dict__["session_pickup"] = session_pickup
        __props__.__dict__["session_pickup_connectionless"] = session_pickup_connectionless
        __props__.__dict__["session_pickup_delay"] = session_pickup_delay
        __props__.__dict__["session_pickup_expectation"] = session_pickup_expectation
        __props__.__dict__["session_pickup_nat"] = session_pickup_nat
        __props__.__dict__["session_sync_dev"] = session_sync_dev
        __props__.__dict__["smtp_proxy_threshold"] = smtp_proxy_threshold
        __props__.__dict__["ssd_failover"] = ssd_failover
        __props__.__dict__["standalone_config_sync"] = standalone_config_sync
        __props__.__dict__["standalone_mgmt_vdom"] = standalone_mgmt_vdom
        __props__.__dict__["sync_config"] = sync_config
        __props__.__dict__["sync_packet_balance"] = sync_packet_balance
        __props__.__dict__["unicast_gateway"] = unicast_gateway
        __props__.__dict__["unicast_hb"] = unicast_hb
        __props__.__dict__["unicast_hb_netmask"] = unicast_hb_netmask
        __props__.__dict__["unicast_hb_peerip"] = unicast_hb_peerip
        __props__.__dict__["unicast_peers"] = unicast_peers
        __props__.__dict__["unicast_status"] = unicast_status
        __props__.__dict__["uninterruptible_primary_wait"] = uninterruptible_primary_wait
        __props__.__dict__["uninterruptible_upgrade"] = uninterruptible_upgrade
        __props__.__dict__["upgrade_mode"] = upgrade_mode
        __props__.__dict__["vcluster2"] = vcluster2
        __props__.__dict__["vcluster_id"] = vcluster_id
        __props__.__dict__["vcluster_status"] = vcluster_status
        __props__.__dict__["vclusters"] = vclusters
        __props__.__dict__["vdom"] = vdom
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["weight"] = weight
        return Ha(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arps(self) -> pulumi.Output[int]:
        """
        Number of gratuitous ARPs (1 - 60). Lower to reduce traffic. Higher to reduce failover time.
        """
        return pulumi.get(self, "arps")

    @property
    @pulumi.getter(name="arpsInterval")
    def arps_interval(self) -> pulumi.Output[int]:
        """
        Time between gratuitous ARPs  (1 - 20 sec). Lower to reduce failover time. Higher to reduce traffic.
        """
        return pulumi.get(self, "arps_interval")

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output[str]:
        """
        Enable/disable heartbeat message authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="cpuThreshold")
    def cpu_threshold(self) -> pulumi.Output[str]:
        """
        Dynamic weighted load balancing CPU usage weight and high and low thresholds.
        """
        return pulumi.get(self, "cpu_threshold")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def encryption(self) -> pulumi.Output[str]:
        """
        Enable/disable heartbeat message encryption. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="evpnTtl")
    def evpn_ttl(self) -> pulumi.Output[int]:
        """
        HA EVPN FDB TTL on primary box (5 - 3600 sec).
        """
        return pulumi.get(self, "evpn_ttl")

    @property
    @pulumi.getter(name="failoverHoldTime")
    def failover_hold_time(self) -> pulumi.Output[int]:
        """
        Time to wait before failover (0 - 300 sec, default = 0), to avoid flip.
        """
        return pulumi.get(self, "failover_hold_time")

    @property
    @pulumi.getter(name="ftpProxyThreshold")
    def ftp_proxy_threshold(self) -> pulumi.Output[str]:
        """
        Dynamic weighted load balancing weight and high and low number of FTP proxy sessions.
        """
        return pulumi.get(self, "ftp_proxy_threshold")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="gratuitousArps")
    def gratuitous_arps(self) -> pulumi.Output[str]:
        """
        Enable/disable gratuitous ARPs. Disable if link-failed-signal enabled. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gratuitous_arps")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[int]:
        """
        Cluster group ID  (0 - 255). Must be the same for all members.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[str]:
        """
        Cluster group name. Must be the same for all members.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> pulumi.Output[str]:
        """
        Enable/disable using ha-mgmt interface for syslog, SNMP, remote authentication (RADIUS), FortiAnalyzer, and FortiSandbox. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_direct")

    @property
    @pulumi.getter(name="haEthType")
    def ha_eth_type(self) -> pulumi.Output[str]:
        """
        HA heartbeat packet Ethertype (4-digit hex).
        """
        return pulumi.get(self, "ha_eth_type")

    @property
    @pulumi.getter(name="haMgmtInterfaces")
    def ha_mgmt_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.HaHaMgmtInterface']]]:
        """
        Reserve interfaces to manage individual cluster units. The structure of `ha_mgmt_interfaces` block is documented below.
        """
        return pulumi.get(self, "ha_mgmt_interfaces")

    @property
    @pulumi.getter(name="haMgmtStatus")
    def ha_mgmt_status(self) -> pulumi.Output[str]:
        """
        Enable to reserve interfaces to manage individual cluster units. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_mgmt_status")

    @property
    @pulumi.getter(name="haUptimeDiffMargin")
    def ha_uptime_diff_margin(self) -> pulumi.Output[int]:
        """
        Normally you would only reduce this value for failover testing.
        """
        return pulumi.get(self, "ha_uptime_diff_margin")

    @property
    @pulumi.getter(name="hbInterval")
    def hb_interval(self) -> pulumi.Output[int]:
        """
        Time between sending heartbeat packets (1 - 20 (100*ms)). Increase to reduce false positives.
        """
        return pulumi.get(self, "hb_interval")

    @property
    @pulumi.getter(name="hbIntervalInMilliseconds")
    def hb_interval_in_milliseconds(self) -> pulumi.Output[str]:
        """
        Number of milliseconds for each heartbeat interval: 100ms or 10ms. Valid values: `100ms`, `10ms`.
        """
        return pulumi.get(self, "hb_interval_in_milliseconds")

    @property
    @pulumi.getter(name="hbLostThreshold")
    def hb_lost_threshold(self) -> pulumi.Output[int]:
        """
        Number of lost heartbeats to signal a failure (1 - 60). Increase to reduce false positives.
        """
        return pulumi.get(self, "hb_lost_threshold")

    @property
    @pulumi.getter
    def hbdev(self) -> pulumi.Output[str]:
        """
        Heartbeat interfaces. Must be the same for all members.
        """
        return pulumi.get(self, "hbdev")

    @property
    @pulumi.getter(name="hcEthType")
    def hc_eth_type(self) -> pulumi.Output[str]:
        """
        Transparent mode HA heartbeat packet Ethertype (4-digit hex).
        """
        return pulumi.get(self, "hc_eth_type")

    @property
    @pulumi.getter(name="helloHolddown")
    def hello_holddown(self) -> pulumi.Output[int]:
        """
        Time to wait before changing from hello to work state (5 - 300 sec).
        """
        return pulumi.get(self, "hello_holddown")

    @property
    @pulumi.getter(name="httpProxyThreshold")
    def http_proxy_threshold(self) -> pulumi.Output[str]:
        """
        Dynamic weighted load balancing weight and high and low number of HTTP proxy sessions.
        """
        return pulumi.get(self, "http_proxy_threshold")

    @property
    @pulumi.getter(name="imapProxyThreshold")
    def imap_proxy_threshold(self) -> pulumi.Output[str]:
        """
        Dynamic weighted load balancing weight and high and low number of IMAP proxy sessions.
        """
        return pulumi.get(self, "imap_proxy_threshold")

    @property
    @pulumi.getter(name="interClusterSessionSync")
    def inter_cluster_session_sync(self) -> pulumi.Output[str]:
        """
        Enable/disable synchronization of sessions among HA clusters. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inter_cluster_session_sync")

    @property
    @pulumi.getter(name="ipsecPhase2Proposal")
    def ipsec_phase2_proposal(self) -> pulumi.Output[str]:
        """
        IPsec phase2 proposal. Valid values: `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes128gcm`, `aes256gcm`, `chacha20poly1305`.
        """
        return pulumi.get(self, "ipsec_phase2_proposal")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[str]]:
        """
        key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="l2epEthType")
    def l2ep_eth_type(self) -> pulumi.Output[str]:
        """
        Telnet session HA heartbeat packet Ethertype (4-digit hex).
        """
        return pulumi.get(self, "l2ep_eth_type")

    @property
    @pulumi.getter(name="linkFailedSignal")
    def link_failed_signal(self) -> pulumi.Output[str]:
        """
        Enable to shut down all interfaces for 1 sec after a failover. Use if gratuitous ARPs do not update network. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_failed_signal")

    @property
    @pulumi.getter(name="loadBalanceAll")
    def load_balance_all(self) -> pulumi.Output[str]:
        """
        Enable to load balance TCP sessions. Disable to load balance proxy sessions only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "load_balance_all")

    @property
    @pulumi.getter(name="logicalSn")
    def logical_sn(self) -> pulumi.Output[str]:
        """
        Enable/disable usage of the logical serial number. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "logical_sn")

    @property
    @pulumi.getter(name="memoryBasedFailover")
    def memory_based_failover(self) -> pulumi.Output[str]:
        """
        Enable/disable memory based failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "memory_based_failover")

    @property
    @pulumi.getter(name="memoryCompatibleMode")
    def memory_compatible_mode(self) -> pulumi.Output[str]:
        """
        Enable/disable memory compatible mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "memory_compatible_mode")

    @property
    @pulumi.getter(name="memoryFailoverFlipTimeout")
    def memory_failover_flip_timeout(self) -> pulumi.Output[int]:
        """
        Time to wait between subsequent memory based failovers in minutes (6 - 2147483647, default = 6).
        """
        return pulumi.get(self, "memory_failover_flip_timeout")

    @property
    @pulumi.getter(name="memoryFailoverMonitorPeriod")
    def memory_failover_monitor_period(self) -> pulumi.Output[int]:
        """
        Duration of high memory usage before memory based failover is triggered in seconds (1 - 300, default = 60).
        """
        return pulumi.get(self, "memory_failover_monitor_period")

    @property
    @pulumi.getter(name="memoryFailoverSampleRate")
    def memory_failover_sample_rate(self) -> pulumi.Output[int]:
        """
        Rate at which memory usage is sampled in order to measure memory usage in seconds (1 - 60, default = 1).
        """
        return pulumi.get(self, "memory_failover_sample_rate")

    @property
    @pulumi.getter(name="memoryFailoverThreshold")
    def memory_failover_threshold(self) -> pulumi.Output[int]:
        """
        Memory usage threshold to trigger memory based failover (0 means using conserve mode threshold in system.global).
        """
        return pulumi.get(self, "memory_failover_threshold")

    @property
    @pulumi.getter(name="memoryThreshold")
    def memory_threshold(self) -> pulumi.Output[str]:
        """
        Dynamic weighted load balancing memory usage weight and high and low thresholds.
        """
        return pulumi.get(self, "memory_threshold")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        HA mode. Must be the same for all members. FGSP requires standalone. Valid values: `standalone`, `a-a`, `a-p`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def monitor(self) -> pulumi.Output[str]:
        """
        Interfaces to check for port monitoring (or link failure).
        """
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter(name="multicastTtl")
    def multicast_ttl(self) -> pulumi.Output[int]:
        """
        HA multicast TTL on master (5 - 3600 sec).
        """
        return pulumi.get(self, "multicast_ttl")

    @property
    @pulumi.getter(name="nntpProxyThreshold")
    def nntp_proxy_threshold(self) -> pulumi.Output[str]:
        """
        Dynamic weighted load balancing weight and high and low number of NNTP proxy sessions.
        """
        return pulumi.get(self, "nntp_proxy_threshold")

    @property
    @pulumi.getter
    def override(self) -> pulumi.Output[str]:
        """
        Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> pulumi.Output[int]:
        """
        Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        """
        return pulumi.get(self, "override_wait_time")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Cluster password. Must be the same for all members.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> pulumi.Output[int]:
        """
        Remote IP monitoring failover threshold (0 - 50).
        """
        return pulumi.get(self, "pingserver_failover_threshold")

    @property
    @pulumi.getter(name="pingserverFlipTimeout")
    def pingserver_flip_timeout(self) -> pulumi.Output[int]:
        """
        Time to wait in minutes before renegotiating after a remote IP monitoring failover.
        """
        return pulumi.get(self, "pingserver_flip_timeout")

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> pulumi.Output[str]:
        """
        Interfaces to check for remote IP monitoring.
        """
        return pulumi.get(self, "pingserver_monitor_interface")

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> pulumi.Output[str]:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> pulumi.Output[str]:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pingserver_slave_force_reset")

    @property
    @pulumi.getter(name="pop3ProxyThreshold")
    def pop3_proxy_threshold(self) -> pulumi.Output[str]:
        """
        Dynamic weighted load balancing weight and high and low number of POP3 proxy sessions.
        """
        return pulumi.get(self, "pop3_proxy_threshold")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Increase the priority to select the primary unit (0 - 255).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="routeHold")
    def route_hold(self) -> pulumi.Output[int]:
        """
        Time to wait between routing table updates to the cluster (0 - 3600 sec).
        """
        return pulumi.get(self, "route_hold")

    @property
    @pulumi.getter(name="routeTtl")
    def route_ttl(self) -> pulumi.Output[int]:
        """
        TTL for primary unit routes (5 - 3600 sec). Increase to maintain active routes during failover.
        """
        return pulumi.get(self, "route_ttl")

    @property
    @pulumi.getter(name="routeWait")
    def route_wait(self) -> pulumi.Output[int]:
        """
        Time to wait before sending new routes to the cluster (0 - 3600 sec).
        """
        return pulumi.get(self, "route_wait")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[str]:
        """
        Type of A-A load balancing. Use none if you have external load balancers.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="secondaryVcluster")
    def secondary_vcluster(self) -> pulumi.Output['outputs.HaSecondaryVcluster']:
        """
        Configure virtual cluster 2. The structure of `secondary_vcluster` block is documented below.
        """
        return pulumi.get(self, "secondary_vcluster")

    @property
    @pulumi.getter(name="sessionPickup")
    def session_pickup(self) -> pulumi.Output[str]:
        """
        Enable/disable session pickup. Enabling it can reduce session down time when fail over happens. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup")

    @property
    @pulumi.getter(name="sessionPickupConnectionless")
    def session_pickup_connectionless(self) -> pulumi.Output[str]:
        """
        Enable/disable UDP and ICMP session sync. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup_connectionless")

    @property
    @pulumi.getter(name="sessionPickupDelay")
    def session_pickup_delay(self) -> pulumi.Output[str]:
        """
        Enable to sync sessions longer than 30 sec. Only longer lived sessions need to be synced. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup_delay")

    @property
    @pulumi.getter(name="sessionPickupExpectation")
    def session_pickup_expectation(self) -> pulumi.Output[str]:
        """
        Enable/disable session helper expectation session sync for FGSP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup_expectation")

    @property
    @pulumi.getter(name="sessionPickupNat")
    def session_pickup_nat(self) -> pulumi.Output[str]:
        """
        Enable/disable NAT session sync for FGSP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "session_pickup_nat")

    @property
    @pulumi.getter(name="sessionSyncDev")
    def session_sync_dev(self) -> pulumi.Output[str]:
        """
        Offload session-sync process to kernel and sync sessions using connected interface(s) directly.
        """
        return pulumi.get(self, "session_sync_dev")

    @property
    @pulumi.getter(name="smtpProxyThreshold")
    def smtp_proxy_threshold(self) -> pulumi.Output[str]:
        """
        Dynamic weighted load balancing weight and high and low number of SMTP proxy sessions.
        """
        return pulumi.get(self, "smtp_proxy_threshold")

    @property
    @pulumi.getter(name="ssdFailover")
    def ssd_failover(self) -> pulumi.Output[str]:
        """
        Enable/disable automatic HA failover on SSD disk failure. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssd_failover")

    @property
    @pulumi.getter(name="standaloneConfigSync")
    def standalone_config_sync(self) -> pulumi.Output[str]:
        """
        Enable/disable FGSP configuration synchronization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "standalone_config_sync")

    @property
    @pulumi.getter(name="standaloneMgmtVdom")
    def standalone_mgmt_vdom(self) -> pulumi.Output[str]:
        """
        Enable/disable standalone management VDOM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "standalone_mgmt_vdom")

    @property
    @pulumi.getter(name="syncConfig")
    def sync_config(self) -> pulumi.Output[str]:
        """
        Enable/disable configuration synchronization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sync_config")

    @property
    @pulumi.getter(name="syncPacketBalance")
    def sync_packet_balance(self) -> pulumi.Output[str]:
        """
        Enable/disable HA packet distribution to multiple CPUs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sync_packet_balance")

    @property
    @pulumi.getter(name="unicastGateway")
    def unicast_gateway(self) -> pulumi.Output[str]:
        """
        Default route gateway for unicast interface.
        """
        return pulumi.get(self, "unicast_gateway")

    @property
    @pulumi.getter(name="unicastHb")
    def unicast_hb(self) -> pulumi.Output[str]:
        """
        Enable/disable unicast heartbeat. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "unicast_hb")

    @property
    @pulumi.getter(name="unicastHbNetmask")
    def unicast_hb_netmask(self) -> pulumi.Output[str]:
        """
        Unicast heartbeat netmask.
        """
        return pulumi.get(self, "unicast_hb_netmask")

    @property
    @pulumi.getter(name="unicastHbPeerip")
    def unicast_hb_peerip(self) -> pulumi.Output[str]:
        """
        Unicast heartbeat peer IP.
        """
        return pulumi.get(self, "unicast_hb_peerip")

    @property
    @pulumi.getter(name="unicastPeers")
    def unicast_peers(self) -> pulumi.Output[Optional[Sequence['outputs.HaUnicastPeer']]]:
        """
        Number of unicast peers. The structure of `unicast_peers` block is documented below.
        """
        return pulumi.get(self, "unicast_peers")

    @property
    @pulumi.getter(name="unicastStatus")
    def unicast_status(self) -> pulumi.Output[str]:
        """
        Enable/disable unicast connection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "unicast_status")

    @property
    @pulumi.getter(name="uninterruptiblePrimaryWait")
    def uninterruptible_primary_wait(self) -> pulumi.Output[int]:
        """
        Number of minutes the primary HA unit waits before the secondary HA unit is considered upgraded and the system is started before starting its own upgrade (1 - 300, default = 30).
        """
        return pulumi.get(self, "uninterruptible_primary_wait")

    @property
    @pulumi.getter(name="uninterruptibleUpgrade")
    def uninterruptible_upgrade(self) -> pulumi.Output[str]:
        """
        Enable to upgrade a cluster without blocking network traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "uninterruptible_upgrade")

    @property
    @pulumi.getter(name="upgradeMode")
    def upgrade_mode(self) -> pulumi.Output[str]:
        """
        The mode to upgrade a cluster. Valid values: `simultaneous`, `uninterruptible`, `local-only`, `secondary-only`.
        """
        return pulumi.get(self, "upgrade_mode")

    @property
    @pulumi.getter
    def vcluster2(self) -> pulumi.Output[str]:
        """
        Enable/disable virtual cluster 2 for virtual clustering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vcluster2")

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> pulumi.Output[int]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "vcluster_id")

    @property
    @pulumi.getter(name="vclusterStatus")
    def vcluster_status(self) -> pulumi.Output[str]:
        """
        Enable/disable virtual cluster for virtual clustering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vcluster_status")

    @property
    @pulumi.getter
    def vclusters(self) -> pulumi.Output[Optional[Sequence['outputs.HaVcluster']]]:
        """
        Virtual cluster table. The structure of `vcluster` block is documented below.
        """
        return pulumi.get(self, "vclusters")

    @property
    @pulumi.getter
    def vdom(self) -> pulumi.Output[str]:
        """
        VDOMs in virtual cluster 1.
        """
        return pulumi.get(self, "vdom")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Output[str]:
        """
        Weight-round-robin weight for each cluster unit. Syntax <priority> <weight>.
        """
        return pulumi.get(self, "weight")

