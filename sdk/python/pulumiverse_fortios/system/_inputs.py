# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AccprofileFwgrpPermissionArgs',
    'AccprofileLoggrpPermissionArgs',
    'AccprofileNetgrpPermissionArgs',
    'AccprofileSysgrpPermissionArgs',
    'AccprofileUtmgrpPermissionArgs',
    'AcmeAccountArgs',
    'AcmeInterfaceArgs',
    'AdminGuestUsergroupArgs',
    'AdminGuiDashboardArgs',
    'AdminGuiDashboardWidgetArgs',
    'AdminGuiDashboardWidgetFilterArgs',
    'AdminGuiGlobalMenuFavoriteArgs',
    'AdminGuiNewFeatureAcknowledgeArgs',
    'AdminGuiVdomMenuFavoriteArgs',
    'AdminLoginTimeArgs',
    'AdminVdomArgs',
    'AlarmGroupArgs',
    'AlarmGroupFwPolicyViolationArgs',
    'ApiuserSettingTrusthostArgs',
    'ApiuserTrusthostArgs',
    'ApiuserVdomArgs',
    'AutomationactionEmailToArgs',
    'AutomationactionHeaderArgs',
    'AutomationactionHttpHeaderArgs',
    'AutomationactionSdnConnectorArgs',
    'AutomationdestinationDestinationArgs',
    'AutomationstitchActionArgs',
    'AutomationstitchDestinationArgs',
    'AutomationtriggerFieldArgs',
    'AutomationtriggerLogidBlockArgs',
    'AutomationtriggerVdomArgs',
    'CentralmanagementServerListArgs',
    'ClustersyncDownIntfsBeforeSessSyncArgs',
    'ClustersyncSessionSyncFilterArgs',
    'ClustersyncSessionSyncFilterCustomServiceArgs',
    'ClustersyncSyncvdArgs',
    'CsfFabricConnectorArgs',
    'CsfFabricConnectorVdomArgs',
    'CsfFabricDeviceArgs',
    'CsfTrustedListArgs',
    'DdnsDdnsServerAddrArgs',
    'DdnsMonitorInterfaceArgs',
    'DeviceupgradeKnownHaMemberArgs',
    'DnsDomainArgs',
    'DnsServerHostnameArgs',
    'DnsdatabaseDnsEntryArgs',
    'EvpnExportRtArgs',
    'EvpnImportRtArgs',
    'FabricvpnAdvertisedSubnetArgs',
    'FabricvpnOverlayArgs',
    'FederatedupgradeKnownHaMemberArgs',
    'FederatedupgradeNodeListArgs',
    'GeoipoverrideIp6RangeArgs',
    'GeoipoverrideIpRangeArgs',
    'GlobalInternetServiceDownloadListArgs',
    'HaHaMgmtInterfaceArgs',
    'HaSecondaryVclusterArgs',
    'HaUnicastPeerArgs',
    'HaVclusterArgs',
    'HaVclusterVdomArgs',
    'IkeDhGroup14Args',
    'IkeDhGroup15Args',
    'IkeDhGroup16Args',
    'IkeDhGroup17Args',
    'IkeDhGroup18Args',
    'IkeDhGroup19Args',
    'IkeDhGroup1Args',
    'IkeDhGroup20Args',
    'IkeDhGroup21Args',
    'IkeDhGroup27Args',
    'IkeDhGroup28Args',
    'IkeDhGroup29Args',
    'IkeDhGroup2Args',
    'IkeDhGroup30Args',
    'IkeDhGroup31Args',
    'IkeDhGroup32Args',
    'IkeDhGroup5Args',
    'InterfaceClientOptionArgs',
    'InterfaceDhcpSnoopingServerListArgs',
    'InterfaceFailAlertInterfaceArgs',
    'InterfaceIpv6Args',
    'InterfaceIpv6Dhcp6IapdListArgs',
    'InterfaceIpv6Ip6DelegatedPrefixListArgs',
    'InterfaceIpv6Ip6ExtraAddrArgs',
    'InterfaceIpv6Ip6PrefixListArgs',
    'InterfaceIpv6Ip6PrefixListDnsslArgs',
    'InterfaceIpv6Vrrp6Args',
    'InterfaceManagedDeviceArgs',
    'InterfaceMemberArgs',
    'InterfaceSecondaryipArgs',
    'InterfaceSecurityGroupArgs',
    'InterfaceTaggingArgs',
    'InterfaceTaggingTagArgs',
    'InterfaceVrrpArgs',
    'InterfaceVrrpProxyArpArgs',
    'IpamPoolArgs',
    'IpamRuleArgs',
    'IpamRuleDeviceArgs',
    'IpamRuleInterfaceArgs',
    'IpamRulePoolArgs',
    'IpsecaggregateMemberArgs',
    'LinkmonitorRouteArgs',
    'LinkmonitorServerArgs',
    'LinkmonitorServerListArgs',
    'MobiletunnelNetworkArgs',
    'Nat64SecondaryPrefixArgs',
    'NdproxyMemberArgs',
    'NetflowCollectorArgs',
    'NpuPriorityProtocolArgs',
    'NtpInterfaceArgs',
    'NtpNtpserverArgs',
    'ObjecttaggingTagArgs',
    'PcpserverPoolArgs',
    'PcpserverPoolClientSubnetArgs',
    'PcpserverPoolIntlIntfArgs',
    'PcpserverPoolThirdPartySubnetArgs',
    'PtpServerInterfaceArgs',
    'ReplacemsggroupAdminArgs',
    'ReplacemsggroupAlertmailArgs',
    'ReplacemsggroupAuthArgs',
    'ReplacemsggroupAutomationArgs',
    'ReplacemsggroupCustomMessageArgs',
    'ReplacemsggroupDeviceDetectionPortalArgs',
    'ReplacemsggroupEcArgs',
    'ReplacemsggroupFortiguardWfArgs',
    'ReplacemsggroupFtpArgs',
    'ReplacemsggroupHttpArgs',
    'ReplacemsggroupIcapArgs',
    'ReplacemsggroupMailArgs',
    'ReplacemsggroupNacQuarArgs',
    'ReplacemsggroupNntpArgs',
    'ReplacemsggroupSpamArgs',
    'ReplacemsggroupSslvpnArgs',
    'ReplacemsggroupTrafficQuotaArgs',
    'ReplacemsggroupUtmArgs',
    'ReplacemsggroupWebproxyArgs',
    'SamlServiceProviderArgs',
    'SamlServiceProviderAssertionAttributeArgs',
    'SdnconnectorCompartmentListArgs',
    'SdnconnectorExternalAccountListArgs',
    'SdnconnectorExternalAccountListRegionListArgs',
    'SdnconnectorExternalIpArgs',
    'SdnconnectorForwardingRuleArgs',
    'SdnconnectorGcpProjectListArgs',
    'SdnconnectorGcpProjectListGcpZoneListArgs',
    'SdnconnectorNicArgs',
    'SdnconnectorNicIpArgs',
    'SdnconnectorOciRegionListArgs',
    'SdnconnectorRouteArgs',
    'SdnconnectorRouteTableArgs',
    'SdnconnectorRouteTableRouteArgs',
    'SdnconnectorServerListArgs',
    'SdwanDuplicationArgs',
    'SdwanDuplicationDstaddr6Args',
    'SdwanDuplicationDstaddrArgs',
    'SdwanDuplicationDstintfArgs',
    'SdwanDuplicationServiceArgs',
    'SdwanDuplicationServiceIdArgs',
    'SdwanDuplicationSrcaddr6Args',
    'SdwanDuplicationSrcaddrArgs',
    'SdwanDuplicationSrcintfArgs',
    'SdwanFailAlertInterfaceArgs',
    'SdwanHealthCheckArgs',
    'SdwanHealthCheckMemberArgs',
    'SdwanHealthCheckSlaArgs',
    'SdwanMemberArgs',
    'SdwanNeighborArgs',
    'SdwanNeighborMemberBlockArgs',
    'SdwanServiceArgs',
    'SdwanServiceDst6Args',
    'SdwanServiceDstArgs',
    'SdwanServiceGroupArgs',
    'SdwanServiceHealthCheckArgs',
    'SdwanServiceInputDeviceArgs',
    'SdwanServiceInputZoneArgs',
    'SdwanServiceInternetServiceAppCtrlArgs',
    'SdwanServiceInternetServiceAppCtrlCategoryArgs',
    'SdwanServiceInternetServiceAppCtrlGroupArgs',
    'SdwanServiceInternetServiceCustomArgs',
    'SdwanServiceInternetServiceCustomGroupArgs',
    'SdwanServiceInternetServiceGroupArgs',
    'SdwanServiceInternetServiceNameArgs',
    'SdwanServicePriorityMemberArgs',
    'SdwanServicePriorityZoneArgs',
    'SdwanServiceSlaArgs',
    'SdwanServiceSrc6Args',
    'SdwanServiceSrcArgs',
    'SdwanServiceUserArgs',
    'SdwanZoneArgs',
    'SessionttlPortArgs',
    'SettingsGuiDefaultPolicyColumnArgs',
    'SflowCollectorArgs',
    'SpeedtestscheduleScheduleArgs',
    'SpeedtestserverHostArgs',
    'SsoadminVdomArgs',
    'SsoforticloudadminVdomArgs',
    'SsofortigatecloudadminVdomArgs',
    'StandaloneclusterClusterPeerArgs',
    'StandaloneclusterClusterPeerDownIntfsBeforeSessSyncArgs',
    'StandaloneclusterClusterPeerSessionSyncFilterArgs',
    'StandaloneclusterClusterPeerSessionSyncFilterCustomServiceArgs',
    'StandaloneclusterClusterPeerSyncvdArgs',
    'SwitchinterfaceMemberArgs',
    'SwitchinterfaceSpanSourcePortArgs',
    'VdomdnsServerHostnameArgs',
    'VdomexceptionVdomArgs',
    'VdomnetflowCollectorArgs',
    'VdomsflowCollectorArgs',
    'VirtualswitchPortArgs',
    'VirtualwanlinkFailAlertInterfaceArgs',
    'VirtualwanlinkHealthCheckArgs',
    'VirtualwanlinkHealthCheckMemberArgs',
    'VirtualwanlinkHealthCheckSlaArgs',
    'VirtualwanlinkMemberArgs',
    'VirtualwanlinkNeighborArgs',
    'VirtualwanlinkServiceArgs',
    'VirtualwanlinkServiceDst6Args',
    'VirtualwanlinkServiceDstArgs',
    'VirtualwanlinkServiceGroupArgs',
    'VirtualwanlinkServiceInputDeviceArgs',
    'VirtualwanlinkServiceInternetServiceAppCtrlArgs',
    'VirtualwanlinkServiceInternetServiceAppCtrlGroupArgs',
    'VirtualwanlinkServiceInternetServiceCtrlArgs',
    'VirtualwanlinkServiceInternetServiceCtrlGroupArgs',
    'VirtualwanlinkServiceInternetServiceCustomArgs',
    'VirtualwanlinkServiceInternetServiceCustomGroupArgs',
    'VirtualwanlinkServiceInternetServiceGroupArgs',
    'VirtualwanlinkServiceInternetServiceIdArgs',
    'VirtualwanlinkServiceInternetServiceNameArgs',
    'VirtualwanlinkServicePriorityMemberArgs',
    'VirtualwanlinkServiceSlaArgs',
    'VirtualwanlinkServiceSrc6Args',
    'VirtualwanlinkServiceSrcArgs',
    'VirtualwanlinkServiceUserArgs',
    'VirtualwanlinkZoneArgs',
    'VirtualwirepairMemberArgs',
    'VxlanRemoteIp6Args',
    'VxlanRemoteIpArgs',
    'ZoneInterfaceArgs',
    'ZoneTaggingArgs',
    'ZoneTaggingTagArgs',
]

@pulumi.input_type
class AccprofileFwgrpPermissionArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 others: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: Address Configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] others: Other Firewall Configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] policy: Policy Configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] schedule: Schedule Configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] service: Service Configuration. Valid values: `none`, `read`, `read-write`.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if others is not None:
            pulumi.set(__self__, "others", others)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Address Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def others(self) -> Optional[pulumi.Input[str]]:
        """
        Other Firewall Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "others")

    @others.setter
    def others(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "others", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        """
        Policy Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Service Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class AccprofileLoggrpPermissionArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[str]] = None,
                 data_access: Optional[pulumi.Input[str]] = None,
                 report_access: Optional[pulumi.Input[str]] = None,
                 threat_weight: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] config: Log & Report configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] data_access: Log & Report Data Access. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] report_access: Log & Report Report Access. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] threat_weight: Log & Report Threat Weight. Valid values: `none`, `read`, `read-write`.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if data_access is not None:
            pulumi.set(__self__, "data_access", data_access)
        if report_access is not None:
            pulumi.set(__self__, "report_access", report_access)
        if threat_weight is not None:
            pulumi.set(__self__, "threat_weight", threat_weight)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        Log & Report configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="dataAccess")
    def data_access(self) -> Optional[pulumi.Input[str]]:
        """
        Log & Report Data Access. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "data_access")

    @data_access.setter
    def data_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_access", value)

    @property
    @pulumi.getter(name="reportAccess")
    def report_access(self) -> Optional[pulumi.Input[str]]:
        """
        Log & Report Report Access. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "report_access")

    @report_access.setter
    def report_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_access", value)

    @property
    @pulumi.getter(name="threatWeight")
    def threat_weight(self) -> Optional[pulumi.Input[str]]:
        """
        Log & Report Threat Weight. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "threat_weight")

    @threat_weight.setter
    def threat_weight(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threat_weight", value)


@pulumi.input_type
class AccprofileNetgrpPermissionArgs:
    def __init__(__self__, *,
                 cfg: Optional[pulumi.Input[str]] = None,
                 packet_capture: Optional[pulumi.Input[str]] = None,
                 route_cfg: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cfg: Network Configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] packet_capture: Packet Capture Configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] route_cfg: Router Configuration. Valid values: `none`, `read`, `read-write`.
        """
        if cfg is not None:
            pulumi.set(__self__, "cfg", cfg)
        if packet_capture is not None:
            pulumi.set(__self__, "packet_capture", packet_capture)
        if route_cfg is not None:
            pulumi.set(__self__, "route_cfg", route_cfg)

    @property
    @pulumi.getter
    def cfg(self) -> Optional[pulumi.Input[str]]:
        """
        Network Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "cfg")

    @cfg.setter
    def cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cfg", value)

    @property
    @pulumi.getter(name="packetCapture")
    def packet_capture(self) -> Optional[pulumi.Input[str]]:
        """
        Packet Capture Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "packet_capture")

    @packet_capture.setter
    def packet_capture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_capture", value)

    @property
    @pulumi.getter(name="routeCfg")
    def route_cfg(self) -> Optional[pulumi.Input[str]]:
        """
        Router Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "route_cfg")

    @route_cfg.setter
    def route_cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_cfg", value)


@pulumi.input_type
class AccprofileSysgrpPermissionArgs:
    def __init__(__self__, *,
                 admin: Optional[pulumi.Input[str]] = None,
                 cfg: Optional[pulumi.Input[str]] = None,
                 mnt: Optional[pulumi.Input[str]] = None,
                 upd: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] admin: Administrator Users. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] cfg: System Configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] mnt: Maintenance. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] upd: FortiGuard Updates. Valid values: `none`, `read`, `read-write`.
        """
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if cfg is not None:
            pulumi.set(__self__, "cfg", cfg)
        if mnt is not None:
            pulumi.set(__self__, "mnt", mnt)
        if upd is not None:
            pulumi.set(__self__, "upd", upd)

    @property
    @pulumi.getter
    def admin(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator Users. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter
    def cfg(self) -> Optional[pulumi.Input[str]]:
        """
        System Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "cfg")

    @cfg.setter
    def cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cfg", value)

    @property
    @pulumi.getter
    def mnt(self) -> Optional[pulumi.Input[str]]:
        """
        Maintenance. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "mnt")

    @mnt.setter
    def mnt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mnt", value)

    @property
    @pulumi.getter
    def upd(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard Updates. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "upd")

    @upd.setter
    def upd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upd", value)


@pulumi.input_type
class AccprofileUtmgrpPermissionArgs:
    def __init__(__self__, *,
                 antivirus: Optional[pulumi.Input[str]] = None,
                 application_control: Optional[pulumi.Input[str]] = None,
                 casb: Optional[pulumi.Input[str]] = None,
                 data_leak_prevention: Optional[pulumi.Input[str]] = None,
                 data_loss_prevention: Optional[pulumi.Input[str]] = None,
                 dnsfilter: Optional[pulumi.Input[str]] = None,
                 emailfilter: Optional[pulumi.Input[str]] = None,
                 endpoint_control: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input[str]] = None,
                 icap: Optional[pulumi.Input[str]] = None,
                 ips: Optional[pulumi.Input[str]] = None,
                 spamfilter: Optional[pulumi.Input[str]] = None,
                 videofilter: Optional[pulumi.Input[str]] = None,
                 virtual_patch: Optional[pulumi.Input[str]] = None,
                 voip: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input[str]] = None,
                 webfilter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] antivirus: Antivirus profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] application_control: Application Control profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] casb: Inline CASB filter profile and settings Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] data_leak_prevention: DLP profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] data_loss_prevention: DLP profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] dnsfilter: DNS Filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] emailfilter: AntiSpam filter and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] endpoint_control: FortiClient Profiles. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] file_filter: File-filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] icap: ICAP profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] ips: IPS profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] spamfilter: AntiSpam filter and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] videofilter: Video filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] virtual_patch: Virtual patch profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] voip: VoIP profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] waf: Web Application Firewall profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] webfilter: Web Filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        if antivirus is not None:
            pulumi.set(__self__, "antivirus", antivirus)
        if application_control is not None:
            pulumi.set(__self__, "application_control", application_control)
        if casb is not None:
            pulumi.set(__self__, "casb", casb)
        if data_leak_prevention is not None:
            pulumi.set(__self__, "data_leak_prevention", data_leak_prevention)
        if data_loss_prevention is not None:
            pulumi.set(__self__, "data_loss_prevention", data_loss_prevention)
        if dnsfilter is not None:
            pulumi.set(__self__, "dnsfilter", dnsfilter)
        if emailfilter is not None:
            pulumi.set(__self__, "emailfilter", emailfilter)
        if endpoint_control is not None:
            pulumi.set(__self__, "endpoint_control", endpoint_control)
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)
        if icap is not None:
            pulumi.set(__self__, "icap", icap)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if spamfilter is not None:
            pulumi.set(__self__, "spamfilter", spamfilter)
        if videofilter is not None:
            pulumi.set(__self__, "videofilter", videofilter)
        if virtual_patch is not None:
            pulumi.set(__self__, "virtual_patch", virtual_patch)
        if voip is not None:
            pulumi.set(__self__, "voip", voip)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)
        if webfilter is not None:
            pulumi.set(__self__, "webfilter", webfilter)

    @property
    @pulumi.getter
    def antivirus(self) -> Optional[pulumi.Input[str]]:
        """
        Antivirus profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "antivirus")

    @antivirus.setter
    def antivirus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antivirus", value)

    @property
    @pulumi.getter(name="applicationControl")
    def application_control(self) -> Optional[pulumi.Input[str]]:
        """
        Application Control profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "application_control")

    @application_control.setter
    def application_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_control", value)

    @property
    @pulumi.getter
    def casb(self) -> Optional[pulumi.Input[str]]:
        """
        Inline CASB filter profile and settings Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "casb")

    @casb.setter
    def casb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "casb", value)

    @property
    @pulumi.getter(name="dataLeakPrevention")
    def data_leak_prevention(self) -> Optional[pulumi.Input[str]]:
        """
        DLP profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "data_leak_prevention")

    @data_leak_prevention.setter
    def data_leak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_leak_prevention", value)

    @property
    @pulumi.getter(name="dataLossPrevention")
    def data_loss_prevention(self) -> Optional[pulumi.Input[str]]:
        """
        DLP profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "data_loss_prevention")

    @data_loss_prevention.setter
    def data_loss_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_loss_prevention", value)

    @property
    @pulumi.getter
    def dnsfilter(self) -> Optional[pulumi.Input[str]]:
        """
        DNS Filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "dnsfilter")

    @dnsfilter.setter
    def dnsfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnsfilter", value)

    @property
    @pulumi.getter
    def emailfilter(self) -> Optional[pulumi.Input[str]]:
        """
        AntiSpam filter and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "emailfilter")

    @emailfilter.setter
    def emailfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter", value)

    @property
    @pulumi.getter(name="endpointControl")
    def endpoint_control(self) -> Optional[pulumi.Input[str]]:
        """
        FortiClient Profiles. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "endpoint_control")

    @endpoint_control.setter
    def endpoint_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_control", value)

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional[pulumi.Input[str]]:
        """
        File-filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "file_filter")

    @file_filter.setter
    def file_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter", value)

    @property
    @pulumi.getter
    def icap(self) -> Optional[pulumi.Input[str]]:
        """
        ICAP profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "icap")

    @icap.setter
    def icap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[str]]:
        """
        IPS profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter
    def spamfilter(self) -> Optional[pulumi.Input[str]]:
        """
        AntiSpam filter and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "spamfilter")

    @spamfilter.setter
    def spamfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter", value)

    @property
    @pulumi.getter
    def videofilter(self) -> Optional[pulumi.Input[str]]:
        """
        Video filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "videofilter")

    @videofilter.setter
    def videofilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "videofilter", value)

    @property
    @pulumi.getter(name="virtualPatch")
    def virtual_patch(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual patch profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "virtual_patch")

    @virtual_patch.setter
    def virtual_patch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_patch", value)

    @property
    @pulumi.getter
    def voip(self) -> Optional[pulumi.Input[str]]:
        """
        VoIP profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "voip")

    @voip.setter
    def voip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip", value)

    @property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input[str]]:
        """
        Web Application Firewall profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "waf")

    @waf.setter
    def waf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf", value)

    @property
    @pulumi.getter
    def webfilter(self) -> Optional[pulumi.Input[str]]:
        """
        Web Filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "webfilter")

    @webfilter.setter
    def webfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter", value)


@pulumi.input_type
class AcmeAccountArgs:
    def __init__(__self__, *,
                 ca_url: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 privatekey: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ca_url: Account ca_url.
        :param pulumi.Input[str] email: Account email.
        :param pulumi.Input[str] id: Account id.
        :param pulumi.Input[str] privatekey: Account Private Key.
        :param pulumi.Input[str] status: Account status.
        :param pulumi.Input[str] url: Account url.
        """
        if ca_url is not None:
            pulumi.set(__self__, "ca_url", ca_url)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if privatekey is not None:
            pulumi.set(__self__, "privatekey", privatekey)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="caUrl")
    def ca_url(self) -> Optional[pulumi.Input[str]]:
        """
        Account ca_url.
        """
        return pulumi.get(self, "ca_url")

    @ca_url.setter
    def ca_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_url", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Account email.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Account id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def privatekey(self) -> Optional[pulumi.Input[str]]:
        """
        Account Private Key.
        """
        return pulumi.get(self, "privatekey")

    @privatekey.setter
    def privatekey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privatekey", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Account status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Account url.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AcmeInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class AdminGuestUsergroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Select guest user groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Select guest user groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AdminGuiDashboardArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 layout_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 widgets: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardWidgetArgs']]]] = None):
        """
        :param pulumi.Input[int] columns: Number of columns.
        :param pulumi.Input[int] id: Dashboard ID.
        :param pulumi.Input[str] layout_type: Layout type. Valid values: `responsive`, `fixed`.
        :param pulumi.Input[str] name: Dashboard name.
        :param pulumi.Input[str] scope: Dashboard scope. Valid values: `global`, `vdom`.
        :param pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardWidgetArgs']]] widgets: Dashboard widgets. The structure of `widget` block is documented below.
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if layout_type is not None:
            pulumi.set(__self__, "layout_type", layout_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if widgets is not None:
            pulumi.set(__self__, "widgets", widgets)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[int]]:
        """
        Number of columns.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Dashboard ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="layoutType")
    def layout_type(self) -> Optional[pulumi.Input[str]]:
        """
        Layout type. Valid values: `responsive`, `fixed`.
        """
        return pulumi.get(self, "layout_type")

    @layout_type.setter
    def layout_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layout_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Dashboard name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        Dashboard scope. Valid values: `global`, `vdom`.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def widgets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardWidgetArgs']]]]:
        """
        Dashboard widgets. The structure of `widget` block is documented below.
        """
        return pulumi.get(self, "widgets")

    @widgets.setter
    def widgets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardWidgetArgs']]]]):
        pulumi.set(self, "widgets", value)


@pulumi.input_type
class AdminGuiDashboardWidgetArgs:
    def __init__(__self__, *,
                 fabric_device: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardWidgetFilterArgs']]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 industry: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 report_by: Optional[pulumi.Input[str]] = None,
                 sort_by: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 visualization: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 x_pos: Optional[pulumi.Input[int]] = None,
                 y_pos: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] fabric_device: Fabric device to monitor.
        :param pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardWidgetFilterArgs']]] filters: FortiView filters. The structure of `filters` block is documented below.
        :param pulumi.Input[int] height: Height.
        :param pulumi.Input[int] id: Widget ID.
        :param pulumi.Input[str] industry: Security Audit Rating industry. Valid values: `default`, `custom`.
        :param pulumi.Input[str] interface: Interface to monitor.
        :param pulumi.Input[str] region: Security Audit Rating region. Valid values: `default`, `custom`.
        :param pulumi.Input[str] report_by: Field to aggregate the data by. Valid values: `source`, `destination`, `country`, `intfpair`, `srcintf`, `dstintf`, `policy`, `wificlient`, `shaper`, `endpoint-vulnerability`, `endpoint-device`, `application`, `cloud-app`, `cloud-user`, `web-domain`, `web-category`, `web-search-phrase`, `threat`, `system`, `unauth`, `admin`, `vpn`.
        :param pulumi.Input[str] sort_by: Field to sort the data by.
        :param pulumi.Input[str] timeframe: Timeframe period of reported data. Valid values: `realtime`, `5min`, `hour`, `day`, `week`.
        :param pulumi.Input[str] title: Widget title.
        :param pulumi.Input[str] type: Widget type. Valid values: `sysinfo`, `licinfo`, `vminfo`, `forticloud`, `cpu-usage`, `memory-usage`, `disk-usage`, `log-rate`, `sessions`, `session-rate`, `tr-history`, `analytics`, `usb-modem`, `admins`, `security-fabric`, `security-fabric-ranking`, `ha-status`, `vulnerability-summary`, `host-scan-summary`, `fortiview`, `botnet-activity`, `fortimail`.
        :param pulumi.Input[str] visualization: Visualization to use. Valid values: `table`, `bubble`, `country`, `chord`.
        :param pulumi.Input[int] width: Width.
        :param pulumi.Input[int] x_pos: X position.
        :param pulumi.Input[int] y_pos: Y position.
        """
        if fabric_device is not None:
            pulumi.set(__self__, "fabric_device", fabric_device)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if industry is not None:
            pulumi.set(__self__, "industry", industry)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if report_by is not None:
            pulumi.set(__self__, "report_by", report_by)
        if sort_by is not None:
            pulumi.set(__self__, "sort_by", sort_by)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if visualization is not None:
            pulumi.set(__self__, "visualization", visualization)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="fabricDevice")
    def fabric_device(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric device to monitor.
        """
        return pulumi.get(self, "fabric_device")

    @fabric_device.setter
    def fabric_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_device", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardWidgetFilterArgs']]]]:
        """
        FortiView filters. The structure of `filters` block is documented below.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminGuiDashboardWidgetFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        Height.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Widget ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def industry(self) -> Optional[pulumi.Input[str]]:
        """
        Security Audit Rating industry. Valid values: `default`, `custom`.
        """
        return pulumi.get(self, "industry")

    @industry.setter
    def industry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "industry", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface to monitor.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Security Audit Rating region. Valid values: `default`, `custom`.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="reportBy")
    def report_by(self) -> Optional[pulumi.Input[str]]:
        """
        Field to aggregate the data by. Valid values: `source`, `destination`, `country`, `intfpair`, `srcintf`, `dstintf`, `policy`, `wificlient`, `shaper`, `endpoint-vulnerability`, `endpoint-device`, `application`, `cloud-app`, `cloud-user`, `web-domain`, `web-category`, `web-search-phrase`, `threat`, `system`, `unauth`, `admin`, `vpn`.
        """
        return pulumi.get(self, "report_by")

    @report_by.setter
    def report_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_by", value)

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> Optional[pulumi.Input[str]]:
        """
        Field to sort the data by.
        """
        return pulumi.get(self, "sort_by")

    @sort_by.setter
    def sort_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort_by", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Timeframe period of reported data. Valid values: `realtime`, `5min`, `hour`, `day`, `week`.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Widget title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Widget type. Valid values: `sysinfo`, `licinfo`, `vminfo`, `forticloud`, `cpu-usage`, `memory-usage`, `disk-usage`, `log-rate`, `sessions`, `session-rate`, `tr-history`, `analytics`, `usb-modem`, `admins`, `security-fabric`, `security-fabric-ranking`, `ha-status`, `vulnerability-summary`, `host-scan-summary`, `fortiview`, `botnet-activity`, `fortimail`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def visualization(self) -> Optional[pulumi.Input[str]]:
        """
        Visualization to use. Valid values: `table`, `bubble`, `country`, `chord`.
        """
        return pulumi.get(self, "visualization")

    @visualization.setter
    def visualization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visualization", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        Width.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[int]]:
        """
        X position.
        """
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[int]]:
        """
        Y position.
        """
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class AdminGuiDashboardWidgetFilterArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: FortiView Filter ID.
        :param pulumi.Input[str] key: Filter key.
        :param pulumi.Input[str] value: Filter value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        FortiView Filter ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Filter key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AdminGuiGlobalMenuFavoriteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Select menu ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class AdminGuiNewFeatureAcknowledgeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Select menu ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class AdminGuiVdomMenuFavoriteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Select menu ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class AdminLoginTimeArgs:
    def __init__(__self__, *,
                 last_failed_login: Optional[pulumi.Input[str]] = None,
                 last_login: Optional[pulumi.Input[str]] = None,
                 usr_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] last_failed_login: Last failed login time.
        :param pulumi.Input[str] last_login: Last successful login time.
        :param pulumi.Input[str] usr_name: User name.
        """
        if last_failed_login is not None:
            pulumi.set(__self__, "last_failed_login", last_failed_login)
        if last_login is not None:
            pulumi.set(__self__, "last_login", last_login)
        if usr_name is not None:
            pulumi.set(__self__, "usr_name", usr_name)

    @property
    @pulumi.getter(name="lastFailedLogin")
    def last_failed_login(self) -> Optional[pulumi.Input[str]]:
        """
        Last failed login time.
        """
        return pulumi.get(self, "last_failed_login")

    @last_failed_login.setter
    def last_failed_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_failed_login", value)

    @property
    @pulumi.getter(name="lastLogin")
    def last_login(self) -> Optional[pulumi.Input[str]]:
        """
        Last successful login time.
        """
        return pulumi.get(self, "last_login")

    @last_login.setter
    def last_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_login", value)

    @property
    @pulumi.getter(name="usrName")
    def usr_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "usr_name")

    @usr_name.setter
    def usr_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usr_name", value)


@pulumi.input_type
class AdminVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AlarmGroupArgs:
    def __init__(__self__, *,
                 admin_auth_failure_threshold: Optional[pulumi.Input[int]] = None,
                 admin_auth_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 decryption_failure_threshold: Optional[pulumi.Input[int]] = None,
                 encryption_failure_threshold: Optional[pulumi.Input[int]] = None,
                 fw_policy_id: Optional[pulumi.Input[int]] = None,
                 fw_policy_id_threshold: Optional[pulumi.Input[int]] = None,
                 fw_policy_violations: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmGroupFwPolicyViolationArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log_full_warning_threshold: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 replay_attempt_threshold: Optional[pulumi.Input[int]] = None,
                 self_test_failure_threshold: Optional[pulumi.Input[int]] = None,
                 user_auth_failure_threshold: Optional[pulumi.Input[int]] = None,
                 user_auth_lockout_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] admin_auth_failure_threshold: Admin authentication failure threshold.
        :param pulumi.Input[int] admin_auth_lockout_threshold: Admin authentication lockout threshold.
        :param pulumi.Input[int] decryption_failure_threshold: Decryption failure threshold.
        :param pulumi.Input[int] encryption_failure_threshold: Encryption failure threshold.
        :param pulumi.Input[int] fw_policy_id: Firewall policy ID.
        :param pulumi.Input[int] fw_policy_id_threshold: Firewall policy ID threshold.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmGroupFwPolicyViolationArgs']]] fw_policy_violations: Firewall policy violations. The structure of `fw_policy_violations` block is documented below.
        :param pulumi.Input[int] id: Group ID.
        :param pulumi.Input[int] log_full_warning_threshold: Log full warning threshold.
        :param pulumi.Input[int] period: Time period in seconds (0 = from start up).
        :param pulumi.Input[int] replay_attempt_threshold: Replay attempt threshold.
        :param pulumi.Input[int] self_test_failure_threshold: Self-test failure threshold.
        :param pulumi.Input[int] user_auth_failure_threshold: User authentication failure threshold.
        :param pulumi.Input[int] user_auth_lockout_threshold: User authentication lockout threshold.
        """
        if admin_auth_failure_threshold is not None:
            pulumi.set(__self__, "admin_auth_failure_threshold", admin_auth_failure_threshold)
        if admin_auth_lockout_threshold is not None:
            pulumi.set(__self__, "admin_auth_lockout_threshold", admin_auth_lockout_threshold)
        if decryption_failure_threshold is not None:
            pulumi.set(__self__, "decryption_failure_threshold", decryption_failure_threshold)
        if encryption_failure_threshold is not None:
            pulumi.set(__self__, "encryption_failure_threshold", encryption_failure_threshold)
        if fw_policy_id is not None:
            pulumi.set(__self__, "fw_policy_id", fw_policy_id)
        if fw_policy_id_threshold is not None:
            pulumi.set(__self__, "fw_policy_id_threshold", fw_policy_id_threshold)
        if fw_policy_violations is not None:
            pulumi.set(__self__, "fw_policy_violations", fw_policy_violations)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log_full_warning_threshold is not None:
            pulumi.set(__self__, "log_full_warning_threshold", log_full_warning_threshold)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if replay_attempt_threshold is not None:
            pulumi.set(__self__, "replay_attempt_threshold", replay_attempt_threshold)
        if self_test_failure_threshold is not None:
            pulumi.set(__self__, "self_test_failure_threshold", self_test_failure_threshold)
        if user_auth_failure_threshold is not None:
            pulumi.set(__self__, "user_auth_failure_threshold", user_auth_failure_threshold)
        if user_auth_lockout_threshold is not None:
            pulumi.set(__self__, "user_auth_lockout_threshold", user_auth_lockout_threshold)

    @property
    @pulumi.getter(name="adminAuthFailureThreshold")
    def admin_auth_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Admin authentication failure threshold.
        """
        return pulumi.get(self, "admin_auth_failure_threshold")

    @admin_auth_failure_threshold.setter
    def admin_auth_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_auth_failure_threshold", value)

    @property
    @pulumi.getter(name="adminAuthLockoutThreshold")
    def admin_auth_lockout_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Admin authentication lockout threshold.
        """
        return pulumi.get(self, "admin_auth_lockout_threshold")

    @admin_auth_lockout_threshold.setter
    def admin_auth_lockout_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_auth_lockout_threshold", value)

    @property
    @pulumi.getter(name="decryptionFailureThreshold")
    def decryption_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Decryption failure threshold.
        """
        return pulumi.get(self, "decryption_failure_threshold")

    @decryption_failure_threshold.setter
    def decryption_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "decryption_failure_threshold", value)

    @property
    @pulumi.getter(name="encryptionFailureThreshold")
    def encryption_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Encryption failure threshold.
        """
        return pulumi.get(self, "encryption_failure_threshold")

    @encryption_failure_threshold.setter
    def encryption_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "encryption_failure_threshold", value)

    @property
    @pulumi.getter(name="fwPolicyId")
    def fw_policy_id(self) -> Optional[pulumi.Input[int]]:
        """
        Firewall policy ID.
        """
        return pulumi.get(self, "fw_policy_id")

    @fw_policy_id.setter
    def fw_policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fw_policy_id", value)

    @property
    @pulumi.getter(name="fwPolicyIdThreshold")
    def fw_policy_id_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Firewall policy ID threshold.
        """
        return pulumi.get(self, "fw_policy_id_threshold")

    @fw_policy_id_threshold.setter
    def fw_policy_id_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fw_policy_id_threshold", value)

    @property
    @pulumi.getter(name="fwPolicyViolations")
    def fw_policy_violations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmGroupFwPolicyViolationArgs']]]]:
        """
        Firewall policy violations. The structure of `fw_policy_violations` block is documented below.
        """
        return pulumi.get(self, "fw_policy_violations")

    @fw_policy_violations.setter
    def fw_policy_violations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmGroupFwPolicyViolationArgs']]]]):
        pulumi.set(self, "fw_policy_violations", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Group ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="logFullWarningThreshold")
    def log_full_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Log full warning threshold.
        """
        return pulumi.get(self, "log_full_warning_threshold")

    @log_full_warning_threshold.setter
    def log_full_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_full_warning_threshold", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Time period in seconds (0 = from start up).
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="replayAttemptThreshold")
    def replay_attempt_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Replay attempt threshold.
        """
        return pulumi.get(self, "replay_attempt_threshold")

    @replay_attempt_threshold.setter
    def replay_attempt_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replay_attempt_threshold", value)

    @property
    @pulumi.getter(name="selfTestFailureThreshold")
    def self_test_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Self-test failure threshold.
        """
        return pulumi.get(self, "self_test_failure_threshold")

    @self_test_failure_threshold.setter
    def self_test_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "self_test_failure_threshold", value)

    @property
    @pulumi.getter(name="userAuthFailureThreshold")
    def user_auth_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        User authentication failure threshold.
        """
        return pulumi.get(self, "user_auth_failure_threshold")

    @user_auth_failure_threshold.setter
    def user_auth_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_auth_failure_threshold", value)

    @property
    @pulumi.getter(name="userAuthLockoutThreshold")
    def user_auth_lockout_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        User authentication lockout threshold.
        """
        return pulumi.get(self, "user_auth_lockout_threshold")

    @user_auth_lockout_threshold.setter
    def user_auth_lockout_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_auth_lockout_threshold", value)


@pulumi.input_type
class AlarmGroupFwPolicyViolationArgs:
    def __init__(__self__, *,
                 dst_ip: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 src_ip: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[int]] = None,
                 threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dst_ip: Destination IP (0=all).
        :param pulumi.Input[int] dst_port: Destination port (0=all).
        :param pulumi.Input[int] id: Firewall policy violations ID.
        :param pulumi.Input[str] src_ip: Source IP (0=all).
        :param pulumi.Input[int] src_port: Source port (0=all).
        :param pulumi.Input[int] threshold: Firewall policy violation threshold.
        """
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IP (0=all).
        """
        return pulumi.get(self, "dst_ip")

    @dst_ip.setter
    def dst_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_ip", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[int]]:
        """
        Destination port (0=all).
        """
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Firewall policy violations ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP (0=all).
        """
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_ip", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[int]]:
        """
        Source port (0=all).
        """
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "src_port", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Firewall policy violation threshold.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class ApiuserSettingTrusthostArgs:
    def __init__(__self__, *,
                 ipv4_trusthost: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "ipv4_trusthost", ipv4_trusthost)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="ipv4Trusthost")
    def ipv4_trusthost(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ipv4_trusthost")

    @ipv4_trusthost.setter
    def ipv4_trusthost(self, value: pulumi.Input[str]):
        pulumi.set(self, "ipv4_trusthost", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ApiuserTrusthostArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ipv4_trusthost: Optional[pulumi.Input[str]] = None,
                 ipv6_trusthost: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Table ID.
        :param pulumi.Input[str] ipv4_trusthost: IPv4 trusted host address.
        :param pulumi.Input[str] ipv6_trusthost: IPv6 trusted host address.
        :param pulumi.Input[str] type: Trusthost type. Valid values: `ipv4-trusthost`, `ipv6-trusthost`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv4_trusthost is not None:
            pulumi.set(__self__, "ipv4_trusthost", ipv4_trusthost)
        if ipv6_trusthost is not None:
            pulumi.set(__self__, "ipv6_trusthost", ipv6_trusthost)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Table ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipv4Trusthost")
    def ipv4_trusthost(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 trusted host address.
        """
        return pulumi.get(self, "ipv4_trusthost")

    @ipv4_trusthost.setter
    def ipv4_trusthost(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_trusthost", value)

    @property
    @pulumi.getter(name="ipv6Trusthost")
    def ipv6_trusthost(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 trusted host address.
        """
        return pulumi.get(self, "ipv6_trusthost")

    @ipv6_trusthost.setter
    def ipv6_trusthost(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_trusthost", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Trusthost type. Valid values: `ipv4-trusthost`, `ipv6-trusthost`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ApiuserVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AutomationactionEmailToArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Email address.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Email address.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AutomationactionHeaderArgs:
    def __init__(__self__, *,
                 header: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] header: Request header.
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Request header.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)


@pulumi.input_type
class AutomationactionHttpHeaderArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] key: Request header key.
        :param pulumi.Input[str] value: Request header value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Request header key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Request header value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationactionSdnConnectorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: SDN connector name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SDN connector name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AutomationdestinationDestinationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Destination.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Destination.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AutomationstitchActionArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 required: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action name.
        :param pulumi.Input[int] delay: Delay before execution (in seconds).
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] required: Required in action chain. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[int]]:
        """
        Delay before execution (in seconds).
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[str]]:
        """
        Required in action chain. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required", value)


@pulumi.input_type
class AutomationstitchDestinationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Destination name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Destination name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AutomationtriggerFieldArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] value: Value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationtriggerLogidBlockArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Log ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Log ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class AutomationtriggerVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CentralmanagementServerListArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 server_address: Optional[pulumi.Input[str]] = None,
                 server_address6: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] addr_type: Indicate whether the FortiGate communicates with the override server using an IPv4 address, an IPv6 address or a FQDN. Valid values: `ipv4`, `ipv6`, `fqdn`.
        :param pulumi.Input[str] fqdn: FQDN address of override server.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] server_address: IPv4 address of override server.
        :param pulumi.Input[str] server_address6: IPv6 address of override server.
        :param pulumi.Input[str] server_type: FortiGuard service type.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_address is not None:
            pulumi.set(__self__, "server_address", server_address)
        if server_address6 is not None:
            pulumi.set(__self__, "server_address6", server_address6)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate whether the FortiGate communicates with the override server using an IPv4 address, an IPv6 address or a FQDN. Valid values: `ipv4`, `ipv6`, `fqdn`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN address of override server.
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of override server.
        """
        return pulumi.get(self, "server_address")

    @server_address.setter
    def server_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_address", value)

    @property
    @pulumi.getter(name="serverAddress6")
    def server_address6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of override server.
        """
        return pulumi.get(self, "server_address6")

    @server_address6.setter
    def server_address6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_address6", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard service type.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)


@pulumi.input_type
class ClustersyncDownIntfsBeforeSessSyncArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClustersyncSessionSyncFilterArgs:
    def __init__(__self__, *,
                 custom_services: Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncSessionSyncFilterCustomServiceArgs']]]] = None,
                 dstaddr: Optional[pulumi.Input[str]] = None,
                 dstaddr6: Optional[pulumi.Input[str]] = None,
                 dstintf: Optional[pulumi.Input[str]] = None,
                 srcaddr: Optional[pulumi.Input[str]] = None,
                 srcaddr6: Optional[pulumi.Input[str]] = None,
                 srcintf: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClustersyncSessionSyncFilterCustomServiceArgs']]] custom_services: Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custome services. The structure of `custom_service` block is documented below.
        :param pulumi.Input[str] dstaddr: Only sessions to this IPv4 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        :param pulumi.Input[str] dstaddr6: Only sessions to this IPv6 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        :param pulumi.Input[str] dstintf: Only sessions to this interface are synchronized. You can only enter one interface name. To synchronize sessions to multiple destination interfaces, add multiple filters.
        :param pulumi.Input[str] srcaddr: Only sessions from this IPv4 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        :param pulumi.Input[str] srcaddr6: Only sessions from this IPv6 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        :param pulumi.Input[str] srcintf: Only sessions from this interface are synchronized. You can only enter one interface name. To synchronize sessions for multiple source interfaces, add multiple filters.
        """
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstaddr6 is not None:
            pulumi.set(__self__, "dstaddr6", dstaddr6)
        if dstintf is not None:
            pulumi.set(__self__, "dstintf", dstintf)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcaddr6 is not None:
            pulumi.set(__self__, "srcaddr6", srcaddr6)
        if srcintf is not None:
            pulumi.set(__self__, "srcintf", srcintf)

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncSessionSyncFilterCustomServiceArgs']]]]:
        """
        Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custome services. The structure of `custom_service` block is documented below.
        """
        return pulumi.get(self, "custom_services")

    @custom_services.setter
    def custom_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncSessionSyncFilterCustomServiceArgs']]]]):
        pulumi.set(self, "custom_services", value)

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions to this IPv4 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        """
        return pulumi.get(self, "dstaddr")

    @dstaddr.setter
    def dstaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr", value)

    @property
    @pulumi.getter
    def dstaddr6(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions to this IPv6 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        """
        return pulumi.get(self, "dstaddr6")

    @dstaddr6.setter
    def dstaddr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr6", value)

    @property
    @pulumi.getter
    def dstintf(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions to this interface are synchronized. You can only enter one interface name. To synchronize sessions to multiple destination interfaces, add multiple filters.
        """
        return pulumi.get(self, "dstintf")

    @dstintf.setter
    def dstintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstintf", value)

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions from this IPv4 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        """
        return pulumi.get(self, "srcaddr")

    @srcaddr.setter
    def srcaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr", value)

    @property
    @pulumi.getter
    def srcaddr6(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions from this IPv6 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        """
        return pulumi.get(self, "srcaddr6")

    @srcaddr6.setter
    def srcaddr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr6", value)

    @property
    @pulumi.getter
    def srcintf(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions from this interface are synchronized. You can only enter one interface name. To synchronize sessions for multiple source interfaces, add multiple filters.
        """
        return pulumi.get(self, "srcintf")

    @srcintf.setter
    def srcintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcintf", value)


@pulumi.input_type
class ClustersyncSessionSyncFilterCustomServiceArgs:
    def __init__(__self__, *,
                 dst_port_range: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 src_port_range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dst_port_range: Custom service destination port range.
        :param pulumi.Input[int] id: Custom service ID.
        :param pulumi.Input[str] src_port_range: Custom service source port range.
        """
        if dst_port_range is not None:
            pulumi.set(__self__, "dst_port_range", dst_port_range)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_port_range is not None:
            pulumi.set(__self__, "src_port_range", src_port_range)

    @property
    @pulumi.getter(name="dstPortRange")
    def dst_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        Custom service destination port range.
        """
        return pulumi.get(self, "dst_port_range")

    @dst_port_range.setter
    def dst_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port_range", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Custom service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="srcPortRange")
    def src_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        Custom service source port range.
        """
        return pulumi.get(self, "src_port_range")

    @src_port_range.setter
    def src_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_port_range", value)


@pulumi.input_type
class ClustersyncSyncvdArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VDOM name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CsfFabricConnectorArgs:
    def __init__(__self__, *,
                 accprofile: Optional[pulumi.Input[str]] = None,
                 configuration_write_access: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricConnectorVdomArgs']]]] = None):
        """
        :param pulumi.Input[str] accprofile: Override access profile.
        :param pulumi.Input[str] configuration_write_access: Enable/disable downstream device write access to configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] serial: Serial.
        :param pulumi.Input[Sequence[pulumi.Input['CsfFabricConnectorVdomArgs']]] vdoms: Virtual domains that the connector has access to. If none are set, the connector will only have access to the VDOM that it joins the Security Fabric through. The structure of `vdom` block is documented below.
        """
        if accprofile is not None:
            pulumi.set(__self__, "accprofile", accprofile)
        if configuration_write_access is not None:
            pulumi.set(__self__, "configuration_write_access", configuration_write_access)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def accprofile(self) -> Optional[pulumi.Input[str]]:
        """
        Override access profile.
        """
        return pulumi.get(self, "accprofile")

    @accprofile.setter
    def accprofile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accprofile", value)

    @property
    @pulumi.getter(name="configurationWriteAccess")
    def configuration_write_access(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable downstream device write access to configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "configuration_write_access")

    @configuration_write_access.setter
    def configuration_write_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_write_access", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        Serial.
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricConnectorVdomArgs']]]]:
        """
        Virtual domains that the connector has access to. If none are set, the connector will only have access to the VDOM that it joins the Security Fabric through. The structure of `vdom` block is documented below.
        """
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricConnectorVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)


@pulumi.input_type
class CsfFabricConnectorVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CsfFabricDeviceArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 device_ip: Optional[pulumi.Input[str]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 https_port: Optional[pulumi.Input[int]] = None,
                 login: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_token: Device access token.
        :param pulumi.Input[str] device_ip: Device IP.
        :param pulumi.Input[str] device_type: Device type. Valid values: `fortimail`.
        :param pulumi.Input[int] https_port: HTTPS port for fabric device.
        :param pulumi.Input[str] login: Device login name.
        :param pulumi.Input[str] name: Device name.
        :param pulumi.Input[str] password: Device login password.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if device_ip is not None:
            pulumi.set(__self__, "device_ip", device_ip)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        Device access token.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="deviceIp")
    def device_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Device IP.
        """
        return pulumi.get(self, "device_ip")

    @device_ip.setter
    def device_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_ip", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Device type. Valid values: `fortimail`.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[int]]:
        """
        HTTPS port for fabric device.
        """
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_port", value)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input[str]]:
        """
        Device login name.
        """
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Device login password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class CsfTrustedListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 authorization_type: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 downstream_authorization: Optional[pulumi.Input[str]] = None,
                 ha_members: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Security fabric authorization action. Valid values: `accept`, `deny`.
        :param pulumi.Input[str] authorization_type: Authorization type. Valid values: `serial`, `certificate`.
        :param pulumi.Input[str] certificate: Certificate.
        :param pulumi.Input[str] downstream_authorization: Trust authorizations by this node's administrator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ha_members: HA members.
        :param pulumi.Input[int] index: Index of the downstream in tree.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] serial: Serial.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if authorization_type is not None:
            pulumi.set(__self__, "authorization_type", authorization_type)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if downstream_authorization is not None:
            pulumi.set(__self__, "downstream_authorization", downstream_authorization)
        if ha_members is not None:
            pulumi.set(__self__, "ha_members", ha_members)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Security fabric authorization action. Valid values: `accept`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="authorizationType")
    def authorization_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization type. Valid values: `serial`, `certificate`.
        """
        return pulumi.get(self, "authorization_type")

    @authorization_type.setter
    def authorization_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_type", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="downstreamAuthorization")
    def downstream_authorization(self) -> Optional[pulumi.Input[str]]:
        """
        Trust authorizations by this node's administrator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "downstream_authorization")

    @downstream_authorization.setter
    def downstream_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_authorization", value)

    @property
    @pulumi.getter(name="haMembers")
    def ha_members(self) -> Optional[pulumi.Input[str]]:
        """
        HA members.
        """
        return pulumi.get(self, "ha_members")

    @ha_members.setter
    def ha_members(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_members", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        Index of the downstream in tree.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        Serial.
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)


@pulumi.input_type
class DdnsDdnsServerAddrArgs:
    def __init__(__self__, *,
                 addr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] addr: IP address or FQDN of the server.
        """
        if addr is not None:
            pulumi.set(__self__, "addr", addr)

    @property
    @pulumi.getter
    def addr(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or FQDN of the server.
        """
        return pulumi.get(self, "addr")

    @addr.setter
    def addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr", value)


@pulumi.input_type
class DdnsMonitorInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class DeviceupgradeKnownHaMemberArgs:
    def __init__(__self__, *,
                 serial: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] serial: Serial number of HA member
        """
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number of HA member
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)


@pulumi.input_type
class DnsDomainArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain: DNS search domain list separated by space (maximum 8 domains)
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        DNS search domain list separated by space (maximum 8 domains)
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class DnsServerHostnameArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] hostname: DNS server host name list separated by space (maximum 4 domains).
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server host name list separated by space (maximum 4 domains).
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)


@pulumi.input_type
class DnsdatabaseDnsEntryArgs:
    def __init__(__self__, *,
                 canonical_name: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 preference: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] canonical_name: Canonical name of the host.
        :param pulumi.Input[str] hostname: Name of the host.
        :param pulumi.Input[int] id: DNS entry ID.
        :param pulumi.Input[str] ip: IPv4 address of the host.
        :param pulumi.Input[str] ipv6: IPv6 address of the host.
        :param pulumi.Input[int] preference: DNS entry preference, 0 is the highest preference (0 - 65535, default = 10)
        :param pulumi.Input[str] status: Enable/disable resource record status. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ttl: Time-to-live for this entry (0 to 2147483647 sec, default = 0).
        :param pulumi.Input[str] type: Resource record type. Valid values: `A`, `NS`, `CNAME`, `MX`, `AAAA`, `PTR`, `PTR_V6`.
        """
        if canonical_name is not None:
            pulumi.set(__self__, "canonical_name", canonical_name)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="canonicalName")
    def canonical_name(self) -> Optional[pulumi.Input[str]]:
        """
        Canonical name of the host.
        """
        return pulumi.get(self, "canonical_name")

    @canonical_name.setter
    def canonical_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "canonical_name", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the host.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        DNS entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the host.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the host.
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        """
        DNS entry preference, 0 is the highest preference (0 - 65535, default = 10)
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable resource record status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Time-to-live for this entry (0 to 2147483647 sec, default = 0).
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Resource record type. Valid values: `A`, `NS`, `CNAME`, `MX`, `AAAA`, `PTR`, `PTR_V6`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class EvpnExportRtArgs:
    def __init__(__self__, *,
                 route_target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] route_target: Route target: AA|AA:NN.
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[pulumi.Input[str]]:
        """
        Route target: AA|AA:NN.
        """
        return pulumi.get(self, "route_target")

    @route_target.setter
    def route_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_target", value)


@pulumi.input_type
class EvpnImportRtArgs:
    def __init__(__self__, *,
                 route_target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] route_target: Route target: AA|AA:NN.
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[pulumi.Input[str]]:
        """
        Route target: AA|AA:NN.
        """
        return pulumi.get(self, "route_target")

    @route_target.setter
    def route_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_target", value)


@pulumi.input_type
class FabricvpnAdvertisedSubnetArgs:
    def __init__(__self__, *,
                 access: Optional[pulumi.Input[str]] = None,
                 bgp_network: Optional[pulumi.Input[int]] = None,
                 firewall_address: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 policies: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access: Access policy direction. Valid values: `inbound`, `bidirectional`.
        :param pulumi.Input[int] bgp_network: Underlying BGP network.
        :param pulumi.Input[str] firewall_address: Underlying firewall address.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[int] policies: Underlying policies.
        :param pulumi.Input[str] prefix: Network prefix.
        """
        if access is not None:
            pulumi.set(__self__, "access", access)
        if bgp_network is not None:
            pulumi.set(__self__, "bgp_network", bgp_network)
        if firewall_address is not None:
            pulumi.set(__self__, "firewall_address", firewall_address)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def access(self) -> Optional[pulumi.Input[str]]:
        """
        Access policy direction. Valid values: `inbound`, `bidirectional`.
        """
        return pulumi.get(self, "access")

    @access.setter
    def access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access", value)

    @property
    @pulumi.getter(name="bgpNetwork")
    def bgp_network(self) -> Optional[pulumi.Input[int]]:
        """
        Underlying BGP network.
        """
        return pulumi.get(self, "bgp_network")

    @bgp_network.setter
    def bgp_network(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_network", value)

    @property
    @pulumi.getter(name="firewallAddress")
    def firewall_address(self) -> Optional[pulumi.Input[str]]:
        """
        Underlying firewall address.
        """
        return pulumi.get(self, "firewall_address")

    @firewall_address.setter
    def firewall_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_address", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[int]]:
        """
        Underlying policies.
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Network prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class FabricvpnOverlayArgs:
    def __init__(__self__, *,
                 bgp_neighbor: Optional[pulumi.Input[str]] = None,
                 bgp_neighbor_group: Optional[pulumi.Input[str]] = None,
                 bgp_neighbor_range: Optional[pulumi.Input[int]] = None,
                 bgp_network: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipsec_phase1: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overlay_policy: Optional[pulumi.Input[int]] = None,
                 overlay_tunnel_block: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 route_policy: Optional[pulumi.Input[int]] = None,
                 sdwan_member: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] bgp_neighbor: Underlying BGP neighbor entry.
        :param pulumi.Input[str] bgp_neighbor_group: Underlying BGP neighbor group entry.
        :param pulumi.Input[int] bgp_neighbor_range: Underlying BGP neighbor range entry.
        :param pulumi.Input[int] bgp_network: Underlying BGP network.
        :param pulumi.Input[str] interface: Underlying interface name.
        :param pulumi.Input[str] ipsec_phase1: IPsec interface.
        :param pulumi.Input[str] name: Overlay name.
        :param pulumi.Input[int] overlay_policy: The overlay policy to allow ADVPN thru traffic.
        :param pulumi.Input[str] overlay_tunnel_block: IPv4 address and subnet mask for the overlay tunnel , syntax: X.X.X.X/24.
        :param pulumi.Input[str] remote_gw: IP address of the hub gateway (Set by hub).
        :param pulumi.Input[int] route_policy: Underlying router policy.
        :param pulumi.Input[int] sdwan_member: Reference to SD-WAN member entry.
        """
        if bgp_neighbor is not None:
            pulumi.set(__self__, "bgp_neighbor", bgp_neighbor)
        if bgp_neighbor_group is not None:
            pulumi.set(__self__, "bgp_neighbor_group", bgp_neighbor_group)
        if bgp_neighbor_range is not None:
            pulumi.set(__self__, "bgp_neighbor_range", bgp_neighbor_range)
        if bgp_network is not None:
            pulumi.set(__self__, "bgp_network", bgp_network)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ipsec_phase1 is not None:
            pulumi.set(__self__, "ipsec_phase1", ipsec_phase1)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overlay_policy is not None:
            pulumi.set(__self__, "overlay_policy", overlay_policy)
        if overlay_tunnel_block is not None:
            pulumi.set(__self__, "overlay_tunnel_block", overlay_tunnel_block)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if sdwan_member is not None:
            pulumi.set(__self__, "sdwan_member", sdwan_member)

    @property
    @pulumi.getter(name="bgpNeighbor")
    def bgp_neighbor(self) -> Optional[pulumi.Input[str]]:
        """
        Underlying BGP neighbor entry.
        """
        return pulumi.get(self, "bgp_neighbor")

    @bgp_neighbor.setter
    def bgp_neighbor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_neighbor", value)

    @property
    @pulumi.getter(name="bgpNeighborGroup")
    def bgp_neighbor_group(self) -> Optional[pulumi.Input[str]]:
        """
        Underlying BGP neighbor group entry.
        """
        return pulumi.get(self, "bgp_neighbor_group")

    @bgp_neighbor_group.setter
    def bgp_neighbor_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_neighbor_group", value)

    @property
    @pulumi.getter(name="bgpNeighborRange")
    def bgp_neighbor_range(self) -> Optional[pulumi.Input[int]]:
        """
        Underlying BGP neighbor range entry.
        """
        return pulumi.get(self, "bgp_neighbor_range")

    @bgp_neighbor_range.setter
    def bgp_neighbor_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_neighbor_range", value)

    @property
    @pulumi.getter(name="bgpNetwork")
    def bgp_network(self) -> Optional[pulumi.Input[int]]:
        """
        Underlying BGP network.
        """
        return pulumi.get(self, "bgp_network")

    @bgp_network.setter
    def bgp_network(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_network", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Underlying interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipsecPhase1")
    def ipsec_phase1(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec interface.
        """
        return pulumi.get(self, "ipsec_phase1")

    @ipsec_phase1.setter
    def ipsec_phase1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_phase1", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Overlay name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overlayPolicy")
    def overlay_policy(self) -> Optional[pulumi.Input[int]]:
        """
        The overlay policy to allow ADVPN thru traffic.
        """
        return pulumi.get(self, "overlay_policy")

    @overlay_policy.setter
    def overlay_policy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "overlay_policy", value)

    @property
    @pulumi.getter(name="overlayTunnelBlock")
    def overlay_tunnel_block(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address and subnet mask for the overlay tunnel , syntax: X.X.X.X/24.
        """
        return pulumi.get(self, "overlay_tunnel_block")

    @overlay_tunnel_block.setter
    def overlay_tunnel_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overlay_tunnel_block", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the hub gateway (Set by hub).
        """
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[pulumi.Input[int]]:
        """
        Underlying router policy.
        """
        return pulumi.get(self, "route_policy")

    @route_policy.setter
    def route_policy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_policy", value)

    @property
    @pulumi.getter(name="sdwanMember")
    def sdwan_member(self) -> Optional[pulumi.Input[int]]:
        """
        Reference to SD-WAN member entry.
        """
        return pulumi.get(self, "sdwan_member")

    @sdwan_member.setter
    def sdwan_member(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sdwan_member", value)


@pulumi.input_type
class FederatedupgradeKnownHaMemberArgs:
    def __init__(__self__, *,
                 serial: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] serial: Serial number of HA member
        """
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number of HA member
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)


@pulumi.input_type
class FederatedupgradeNodeListArgs:
    def __init__(__self__, *,
                 coordinating_fortigate: Optional[pulumi.Input[str]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 maximum_minutes: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 setup_time: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 timing: Optional[pulumi.Input[str]] = None,
                 upgrade_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] coordinating_fortigate: The serial of the FortiGate that controls this device
        :param pulumi.Input[str] device_type: What type of device this node represents.
        :param pulumi.Input[int] maximum_minutes: Maximum number of minutes to allow for immediate upgrade preparation.
        :param pulumi.Input[str] serial: Serial number of the node to include.
        :param pulumi.Input[str] setup_time: When the upgrade was configured. Format hh:mm yyyy/mm/dd UTC.
        :param pulumi.Input[str] time: Scheduled time for the upgrade. Format hh:mm yyyy/mm/dd UTC.
        :param pulumi.Input[str] timing: Whether the upgrade should be run immediately, or at a scheduled time. Valid values: `immediate`, `scheduled`.
        :param pulumi.Input[str] upgrade_path: Image IDs to upgrade through.
        """
        if coordinating_fortigate is not None:
            pulumi.set(__self__, "coordinating_fortigate", coordinating_fortigate)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if maximum_minutes is not None:
            pulumi.set(__self__, "maximum_minutes", maximum_minutes)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if setup_time is not None:
            pulumi.set(__self__, "setup_time", setup_time)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if timing is not None:
            pulumi.set(__self__, "timing", timing)
        if upgrade_path is not None:
            pulumi.set(__self__, "upgrade_path", upgrade_path)

    @property
    @pulumi.getter(name="coordinatingFortigate")
    def coordinating_fortigate(self) -> Optional[pulumi.Input[str]]:
        """
        The serial of the FortiGate that controls this device
        """
        return pulumi.get(self, "coordinating_fortigate")

    @coordinating_fortigate.setter
    def coordinating_fortigate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinating_fortigate", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        What type of device this node represents.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="maximumMinutes")
    def maximum_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of minutes to allow for immediate upgrade preparation.
        """
        return pulumi.get(self, "maximum_minutes")

    @maximum_minutes.setter
    def maximum_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_minutes", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number of the node to include.
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="setupTime")
    def setup_time(self) -> Optional[pulumi.Input[str]]:
        """
        When the upgrade was configured. Format hh:mm yyyy/mm/dd UTC.
        """
        return pulumi.get(self, "setup_time")

    @setup_time.setter
    def setup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "setup_time", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduled time for the upgrade. Format hh:mm yyyy/mm/dd UTC.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def timing(self) -> Optional[pulumi.Input[str]]:
        """
        Whether the upgrade should be run immediately, or at a scheduled time. Valid values: `immediate`, `scheduled`.
        """
        return pulumi.get(self, "timing")

    @timing.setter
    def timing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timing", value)

    @property
    @pulumi.getter(name="upgradePath")
    def upgrade_path(self) -> Optional[pulumi.Input[str]]:
        """
        Image IDs to upgrade through.
        """
        return pulumi.get(self, "upgrade_path")

    @upgrade_path.setter
    def upgrade_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_path", value)


@pulumi.input_type
class GeoipoverrideIp6RangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: Ending IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        :param pulumi.Input[int] id: ID of individual entry in the IPv6 range table.
        :param pulumi.Input[str] start_ip: Starting IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Ending IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of individual entry in the IPv6 range table.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Starting IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class GeoipoverrideIpRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: Ending IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        :param pulumi.Input[int] id: ID of individual entry in the IPv6 range table.
        :param pulumi.Input[str] start_ip: Starting IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Ending IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of individual entry in the IPv6 range table.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Starting IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class GlobalInternetServiceDownloadListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class HaHaMgmtInterfaceArgs:
    def __init__(__self__, *,
                 dst: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dst: Default route destination for reserved HA management interface.
        :param pulumi.Input[str] gateway: Default route gateway for reserved HA management interface.
        :param pulumi.Input[str] gateway6: Default IPv6 gateway for reserved HA management interface.
        :param pulumi.Input[int] id: Table ID.
        :param pulumi.Input[str] interface: Interface to reserve for HA management.
        """
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        """
        Default route destination for reserved HA management interface.
        """
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Default route gateway for reserved HA management interface.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[pulumi.Input[str]]:
        """
        Default IPv6 gateway for reserved HA management interface.
        """
        return pulumi.get(self, "gateway6")

    @gateway6.setter
    def gateway6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway6", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Table ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface to reserve for HA management.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)


@pulumi.input_type
class HaSecondaryVclusterArgs:
    def __init__(__self__, *,
                 monitor: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[str]] = None,
                 override_wait_time: Optional[pulumi.Input[int]] = None,
                 pingserver_failover_threshold: Optional[pulumi.Input[int]] = None,
                 pingserver_monitor_interface: Optional[pulumi.Input[str]] = None,
                 pingserver_secondary_force_reset: Optional[pulumi.Input[str]] = None,
                 pingserver_slave_force_reset: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 vcluster_id: Optional[pulumi.Input[int]] = None,
                 vdom: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] monitor: Interfaces to check for port monitoring (or link failure).
        :param pulumi.Input[str] override: Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] override_wait_time: Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        :param pulumi.Input[int] pingserver_failover_threshold: Remote IP monitoring failover threshold (0 - 50).
        :param pulumi.Input[str] pingserver_monitor_interface: Interfaces to check for remote IP monitoring.
        :param pulumi.Input[str] pingserver_secondary_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pingserver_slave_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Increase the priority to select the primary unit (0 - 255).
        :param pulumi.Input[int] vcluster_id: Cluster ID.
        :param pulumi.Input[str] vdom: VDOMs in virtual cluster 2.
        """
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_wait_time is not None:
            pulumi.set(__self__, "override_wait_time", override_wait_time)
        if pingserver_failover_threshold is not None:
            pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        if pingserver_monitor_interface is not None:
            pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        if pingserver_secondary_force_reset is not None:
            pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        if pingserver_slave_force_reset is not None:
            pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if vcluster_id is not None:
            pulumi.set(__self__, "vcluster_id", vcluster_id)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Interfaces to check for port monitoring (or link failure).
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> Optional[pulumi.Input[int]]:
        """
        Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        """
        return pulumi.get(self, "override_wait_time")

    @override_wait_time.setter
    def override_wait_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "override_wait_time", value)

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Remote IP monitoring failover threshold (0 - 50).
        """
        return pulumi.get(self, "pingserver_failover_threshold")

    @pingserver_failover_threshold.setter
    def pingserver_failover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pingserver_failover_threshold", value)

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interfaces to check for remote IP monitoring.
        """
        return pulumi.get(self, "pingserver_monitor_interface")

    @pingserver_monitor_interface.setter
    def pingserver_monitor_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_monitor_interface", value)

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @pingserver_secondary_force_reset.setter
    def pingserver_secondary_force_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_secondary_force_reset", value)

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pingserver_slave_force_reset")

    @pingserver_slave_force_reset.setter
    def pingserver_slave_force_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_slave_force_reset", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Increase the priority to select the primary unit (0 - 255).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> Optional[pulumi.Input[int]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "vcluster_id")

    @vcluster_id.setter
    def vcluster_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcluster_id", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        VDOMs in virtual cluster 2.
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)


@pulumi.input_type
class HaUnicastPeerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 peer_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Table ID.
        :param pulumi.Input[str] peer_ip: Unicast peer IP.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if peer_ip is not None:
            pulumi.set(__self__, "peer_ip", peer_ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Table ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Unicast peer IP.
        """
        return pulumi.get(self, "peer_ip")

    @peer_ip.setter
    def peer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_ip", value)


@pulumi.input_type
class HaVclusterArgs:
    def __init__(__self__, *,
                 monitor: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[str]] = None,
                 override_wait_time: Optional[pulumi.Input[int]] = None,
                 pingserver_failover_threshold: Optional[pulumi.Input[int]] = None,
                 pingserver_flip_timeout: Optional[pulumi.Input[int]] = None,
                 pingserver_monitor_interface: Optional[pulumi.Input[str]] = None,
                 pingserver_secondary_force_reset: Optional[pulumi.Input[str]] = None,
                 pingserver_slave_force_reset: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 vcluster_id: Optional[pulumi.Input[int]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['HaVclusterVdomArgs']]]] = None):
        """
        :param pulumi.Input[str] monitor: Interfaces to check for port monitoring (or link failure).
        :param pulumi.Input[str] override: Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] override_wait_time: Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        :param pulumi.Input[int] pingserver_failover_threshold: Remote IP monitoring failover threshold (0 - 50).
        :param pulumi.Input[int] pingserver_flip_timeout: Time to wait in minutes before renegotiating after a remote IP monitoring failover.
        :param pulumi.Input[str] pingserver_monitor_interface: Interfaces to check for remote IP monitoring.
        :param pulumi.Input[str] pingserver_secondary_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pingserver_slave_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Increase the priority to select the primary unit (0 - 255).
        :param pulumi.Input[int] vcluster_id: ID.
        :param pulumi.Input[Sequence[pulumi.Input['HaVclusterVdomArgs']]] vdoms: Virtual domain(s) in the virtual cluster. The structure of `vdom` block is documented below.
        """
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_wait_time is not None:
            pulumi.set(__self__, "override_wait_time", override_wait_time)
        if pingserver_failover_threshold is not None:
            pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        if pingserver_flip_timeout is not None:
            pulumi.set(__self__, "pingserver_flip_timeout", pingserver_flip_timeout)
        if pingserver_monitor_interface is not None:
            pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        if pingserver_secondary_force_reset is not None:
            pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        if pingserver_slave_force_reset is not None:
            pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if vcluster_id is not None:
            pulumi.set(__self__, "vcluster_id", vcluster_id)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Interfaces to check for port monitoring (or link failure).
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> Optional[pulumi.Input[int]]:
        """
        Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        """
        return pulumi.get(self, "override_wait_time")

    @override_wait_time.setter
    def override_wait_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "override_wait_time", value)

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Remote IP monitoring failover threshold (0 - 50).
        """
        return pulumi.get(self, "pingserver_failover_threshold")

    @pingserver_failover_threshold.setter
    def pingserver_failover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pingserver_failover_threshold", value)

    @property
    @pulumi.getter(name="pingserverFlipTimeout")
    def pingserver_flip_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait in minutes before renegotiating after a remote IP monitoring failover.
        """
        return pulumi.get(self, "pingserver_flip_timeout")

    @pingserver_flip_timeout.setter
    def pingserver_flip_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pingserver_flip_timeout", value)

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interfaces to check for remote IP monitoring.
        """
        return pulumi.get(self, "pingserver_monitor_interface")

    @pingserver_monitor_interface.setter
    def pingserver_monitor_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_monitor_interface", value)

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @pingserver_secondary_force_reset.setter
    def pingserver_secondary_force_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_secondary_force_reset", value)

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pingserver_slave_force_reset")

    @pingserver_slave_force_reset.setter
    def pingserver_slave_force_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_slave_force_reset", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Increase the priority to select the primary unit (0 - 255).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "vcluster_id")

    @vcluster_id.setter
    def vcluster_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcluster_id", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HaVclusterVdomArgs']]]]:
        """
        Virtual domain(s) in the virtual cluster. The structure of `vdom` block is documented below.
        """
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HaVclusterVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)


@pulumi.input_type
class HaVclusterVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IkeDhGroup14Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup15Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup16Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup17Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup18Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup19Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup1Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup20Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup21Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup27Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup28Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup29Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup2Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup30Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup31Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup32Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class IkeDhGroup5Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class InterfaceClientOptionArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] code: DHCP client option code.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] ip: DHCP option IPs.
        :param pulumi.Input[str] type: DHCP client option type. Valid values: `hex`, `string`, `ip`, `fqdn`.
        :param pulumi.Input[str] value: DHCP client option value.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        """
        DHCP client option code.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP option IPs.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP client option type. Valid values: `hex`, `string`, `ip`, `fqdn`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP client option value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InterfaceDhcpSnoopingServerListArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 server_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: DHCP server name.
        :param pulumi.Input[str] server_ip: IP address for DHCP server.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server_ip is not None:
            pulumi.set(__self__, "server_ip", server_ip)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP server name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address for DHCP server.
        """
        return pulumi.get(self, "server_ip")

    @server_ip.setter
    def server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_ip", value)


@pulumi.input_type
class InterfaceFailAlertInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of the physical interfaces belonging to the aggregate or redundant interface.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of the physical interfaces belonging to the aggregate or redundant interface.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InterfaceIpv6Args:
    def __init__(__self__, *,
                 autoconf: Optional[pulumi.Input[str]] = None,
                 cli_conn6_status: Optional[pulumi.Input[int]] = None,
                 dhcp6_client_options: Optional[pulumi.Input[str]] = None,
                 dhcp6_iapd_lists: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Dhcp6IapdListArgs']]]] = None,
                 dhcp6_information_request: Optional[pulumi.Input[str]] = None,
                 dhcp6_prefix_delegation: Optional[pulumi.Input[str]] = None,
                 dhcp6_prefix_hint: Optional[pulumi.Input[str]] = None,
                 dhcp6_prefix_hint_plt: Optional[pulumi.Input[int]] = None,
                 dhcp6_prefix_hint_vlt: Optional[pulumi.Input[int]] = None,
                 dhcp6_relay_interface_id: Optional[pulumi.Input[str]] = None,
                 dhcp6_relay_ip: Optional[pulumi.Input[str]] = None,
                 dhcp6_relay_service: Optional[pulumi.Input[str]] = None,
                 dhcp6_relay_source_interface: Optional[pulumi.Input[str]] = None,
                 dhcp6_relay_source_ip: Optional[pulumi.Input[str]] = None,
                 dhcp6_relay_type: Optional[pulumi.Input[str]] = None,
                 icmp6_send_redirect: Optional[pulumi.Input[str]] = None,
                 interface_identifier: Optional[pulumi.Input[str]] = None,
                 ip6_address: Optional[pulumi.Input[str]] = None,
                 ip6_allowaccess: Optional[pulumi.Input[str]] = None,
                 ip6_default_life: Optional[pulumi.Input[int]] = None,
                 ip6_delegated_prefix_iaid: Optional[pulumi.Input[int]] = None,
                 ip6_delegated_prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6DelegatedPrefixListArgs']]]] = None,
                 ip6_dns_server_override: Optional[pulumi.Input[str]] = None,
                 ip6_extra_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6ExtraAddrArgs']]]] = None,
                 ip6_hop_limit: Optional[pulumi.Input[int]] = None,
                 ip6_link_mtu: Optional[pulumi.Input[int]] = None,
                 ip6_manage_flag: Optional[pulumi.Input[str]] = None,
                 ip6_max_interval: Optional[pulumi.Input[int]] = None,
                 ip6_min_interval: Optional[pulumi.Input[int]] = None,
                 ip6_mode: Optional[pulumi.Input[str]] = None,
                 ip6_other_flag: Optional[pulumi.Input[str]] = None,
                 ip6_prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6PrefixListArgs']]]] = None,
                 ip6_prefix_mode: Optional[pulumi.Input[str]] = None,
                 ip6_reachable_time: Optional[pulumi.Input[int]] = None,
                 ip6_retrans_time: Optional[pulumi.Input[int]] = None,
                 ip6_send_adv: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_upstream_interface: Optional[pulumi.Input[str]] = None,
                 nd_cert: Optional[pulumi.Input[str]] = None,
                 nd_cga_modifier: Optional[pulumi.Input[str]] = None,
                 nd_mode: Optional[pulumi.Input[str]] = None,
                 nd_security_level: Optional[pulumi.Input[int]] = None,
                 nd_timestamp_delta: Optional[pulumi.Input[int]] = None,
                 nd_timestamp_fuzz: Optional[pulumi.Input[int]] = None,
                 ra_send_mtu: Optional[pulumi.Input[str]] = None,
                 unique_autoconf_addr: Optional[pulumi.Input[str]] = None,
                 vrip6_link_local: Optional[pulumi.Input[str]] = None,
                 vrrp6s: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Vrrp6Args']]]] = None,
                 vrrp_virtual_mac6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] autoconf: Enable/disable address auto config. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] cli_conn6_status: CLI IPv6 connection status.
        :param pulumi.Input[str] dhcp6_client_options: DHCPv6 client options. Valid values: `rapid`, `iapd`, `iana`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Dhcp6IapdListArgs']]] dhcp6_iapd_lists: DHCPv6 IA-PD list The structure of `dhcp6_iapd_list` block is documented below.
        :param pulumi.Input[str] dhcp6_information_request: Enable/disable DHCPv6 information request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp6_prefix_delegation: Enable/disable DHCPv6 prefix delegation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp6_prefix_hint: DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        :param pulumi.Input[int] dhcp6_prefix_hint_plt: DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        :param pulumi.Input[int] dhcp6_prefix_hint_vlt: DHCPv6 prefix hint valid life time (sec).
        :param pulumi.Input[str] dhcp6_relay_interface_id: DHCP6 relay interface ID.
        :param pulumi.Input[str] dhcp6_relay_ip: DHCPv6 relay IP address.
        :param pulumi.Input[str] dhcp6_relay_service: Enable/disable DHCPv6 relay. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp6_relay_source_interface: Enable/disable use of address on this interface as the source address of the relay message. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp6_relay_source_ip: IPv6 address used by the DHCP6 relay as its source IP.
        :param pulumi.Input[str] dhcp6_relay_type: DHCPv6 relay type. Valid values: `regular`.
        :param pulumi.Input[str] icmp6_send_redirect: Enable/disable sending of ICMPv6 redirects. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] interface_identifier: IPv6 interface identifier.
        :param pulumi.Input[str] ip6_address: Primary IPv6 address prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        :param pulumi.Input[str] ip6_allowaccess: Allow management access to the interface.
        :param pulumi.Input[int] ip6_default_life: Default life (sec).
        :param pulumi.Input[int] ip6_delegated_prefix_iaid: IAID of obtained delegated-prefix from the upstream interface.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6DelegatedPrefixListArgs']]] ip6_delegated_prefix_lists: Advertised IPv6 delegated prefix list. The structure of `ip6_delegated_prefix_list` block is documented below.
        :param pulumi.Input[str] ip6_dns_server_override: Enable/disable using the DNS server acquired by DHCP. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6ExtraAddrArgs']]] ip6_extra_addrs: Extra IPv6 address prefixes of interface. The structure of `ip6_extra_addr` block is documented below.
        :param pulumi.Input[int] ip6_hop_limit: Hop limit (0 means unspecified).
        :param pulumi.Input[int] ip6_link_mtu: IPv6 link MTU.
        :param pulumi.Input[str] ip6_manage_flag: Enable/disable the managed flag. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ip6_max_interval: IPv6 maximum interval (4 to 1800 sec).
        :param pulumi.Input[int] ip6_min_interval: IPv6 minimum interval (3 to 1350 sec).
        :param pulumi.Input[str] ip6_mode: Addressing mode (static, DHCP, delegated). Valid values: `static`, `dhcp`, `pppoe`, `delegated`.
        :param pulumi.Input[str] ip6_other_flag: Enable/disable the other IPv6 flag. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6PrefixListArgs']]] ip6_prefix_lists: Advertised prefix list. The structure of `ip6_prefix_list` block is documented below.
        :param pulumi.Input[str] ip6_prefix_mode: Assigning a prefix from DHCP or RA. Valid values: `dhcp6`, `ra`.
        :param pulumi.Input[int] ip6_reachable_time: IPv6 reachable time (milliseconds; 0 means unspecified).
        :param pulumi.Input[int] ip6_retrans_time: IPv6 retransmit time (milliseconds; 0 means unspecified).
        :param pulumi.Input[str] ip6_send_adv: Enable/disable sending advertisements about the interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ip6_subnet: Subnet to routing prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        :param pulumi.Input[str] ip6_upstream_interface: Interface name providing delegated information.
        :param pulumi.Input[str] nd_cert: Neighbor discovery certificate.
        :param pulumi.Input[str] nd_cga_modifier: Neighbor discovery CGA modifier.
        :param pulumi.Input[str] nd_mode: Neighbor discovery mode. Valid values: `basic`, `SEND-compatible`.
        :param pulumi.Input[int] nd_security_level: Neighbor discovery security level (0 - 7; 0 = least secure, default = 0).
        :param pulumi.Input[int] nd_timestamp_delta: Neighbor discovery timestamp delta value (1 - 3600 sec; default = 300).
        :param pulumi.Input[int] nd_timestamp_fuzz: Neighbor discovery timestamp fuzz factor (1 - 60 sec; default = 1).
        :param pulumi.Input[str] ra_send_mtu: Enable/disable sending link MTU in RA packet. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unique_autoconf_addr: Enable/disable unique auto config address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vrip6_link_local: Link-local IPv6 address of virtual router.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Vrrp6Args']]] vrrp6s: IPv6 VRRP configuration. The structure of `vrrp6` block is documented below.
               
               The `ip6_extra_addr` block supports:
        :param pulumi.Input[str] vrrp_virtual_mac6: Enable/disable virtual MAC for VRRP. Valid values: `enable`, `disable`.
        """
        if autoconf is not None:
            pulumi.set(__self__, "autoconf", autoconf)
        if cli_conn6_status is not None:
            pulumi.set(__self__, "cli_conn6_status", cli_conn6_status)
        if dhcp6_client_options is not None:
            pulumi.set(__self__, "dhcp6_client_options", dhcp6_client_options)
        if dhcp6_iapd_lists is not None:
            pulumi.set(__self__, "dhcp6_iapd_lists", dhcp6_iapd_lists)
        if dhcp6_information_request is not None:
            pulumi.set(__self__, "dhcp6_information_request", dhcp6_information_request)
        if dhcp6_prefix_delegation is not None:
            pulumi.set(__self__, "dhcp6_prefix_delegation", dhcp6_prefix_delegation)
        if dhcp6_prefix_hint is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint", dhcp6_prefix_hint)
        if dhcp6_prefix_hint_plt is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint_plt", dhcp6_prefix_hint_plt)
        if dhcp6_prefix_hint_vlt is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint_vlt", dhcp6_prefix_hint_vlt)
        if dhcp6_relay_interface_id is not None:
            pulumi.set(__self__, "dhcp6_relay_interface_id", dhcp6_relay_interface_id)
        if dhcp6_relay_ip is not None:
            pulumi.set(__self__, "dhcp6_relay_ip", dhcp6_relay_ip)
        if dhcp6_relay_service is not None:
            pulumi.set(__self__, "dhcp6_relay_service", dhcp6_relay_service)
        if dhcp6_relay_source_interface is not None:
            pulumi.set(__self__, "dhcp6_relay_source_interface", dhcp6_relay_source_interface)
        if dhcp6_relay_source_ip is not None:
            pulumi.set(__self__, "dhcp6_relay_source_ip", dhcp6_relay_source_ip)
        if dhcp6_relay_type is not None:
            pulumi.set(__self__, "dhcp6_relay_type", dhcp6_relay_type)
        if icmp6_send_redirect is not None:
            pulumi.set(__self__, "icmp6_send_redirect", icmp6_send_redirect)
        if interface_identifier is not None:
            pulumi.set(__self__, "interface_identifier", interface_identifier)
        if ip6_address is not None:
            pulumi.set(__self__, "ip6_address", ip6_address)
        if ip6_allowaccess is not None:
            pulumi.set(__self__, "ip6_allowaccess", ip6_allowaccess)
        if ip6_default_life is not None:
            pulumi.set(__self__, "ip6_default_life", ip6_default_life)
        if ip6_delegated_prefix_iaid is not None:
            pulumi.set(__self__, "ip6_delegated_prefix_iaid", ip6_delegated_prefix_iaid)
        if ip6_delegated_prefix_lists is not None:
            pulumi.set(__self__, "ip6_delegated_prefix_lists", ip6_delegated_prefix_lists)
        if ip6_dns_server_override is not None:
            pulumi.set(__self__, "ip6_dns_server_override", ip6_dns_server_override)
        if ip6_extra_addrs is not None:
            pulumi.set(__self__, "ip6_extra_addrs", ip6_extra_addrs)
        if ip6_hop_limit is not None:
            pulumi.set(__self__, "ip6_hop_limit", ip6_hop_limit)
        if ip6_link_mtu is not None:
            pulumi.set(__self__, "ip6_link_mtu", ip6_link_mtu)
        if ip6_manage_flag is not None:
            pulumi.set(__self__, "ip6_manage_flag", ip6_manage_flag)
        if ip6_max_interval is not None:
            pulumi.set(__self__, "ip6_max_interval", ip6_max_interval)
        if ip6_min_interval is not None:
            pulumi.set(__self__, "ip6_min_interval", ip6_min_interval)
        if ip6_mode is not None:
            pulumi.set(__self__, "ip6_mode", ip6_mode)
        if ip6_other_flag is not None:
            pulumi.set(__self__, "ip6_other_flag", ip6_other_flag)
        if ip6_prefix_lists is not None:
            pulumi.set(__self__, "ip6_prefix_lists", ip6_prefix_lists)
        if ip6_prefix_mode is not None:
            pulumi.set(__self__, "ip6_prefix_mode", ip6_prefix_mode)
        if ip6_reachable_time is not None:
            pulumi.set(__self__, "ip6_reachable_time", ip6_reachable_time)
        if ip6_retrans_time is not None:
            pulumi.set(__self__, "ip6_retrans_time", ip6_retrans_time)
        if ip6_send_adv is not None:
            pulumi.set(__self__, "ip6_send_adv", ip6_send_adv)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if ip6_upstream_interface is not None:
            pulumi.set(__self__, "ip6_upstream_interface", ip6_upstream_interface)
        if nd_cert is not None:
            pulumi.set(__self__, "nd_cert", nd_cert)
        if nd_cga_modifier is not None:
            pulumi.set(__self__, "nd_cga_modifier", nd_cga_modifier)
        if nd_mode is not None:
            pulumi.set(__self__, "nd_mode", nd_mode)
        if nd_security_level is not None:
            pulumi.set(__self__, "nd_security_level", nd_security_level)
        if nd_timestamp_delta is not None:
            pulumi.set(__self__, "nd_timestamp_delta", nd_timestamp_delta)
        if nd_timestamp_fuzz is not None:
            pulumi.set(__self__, "nd_timestamp_fuzz", nd_timestamp_fuzz)
        if ra_send_mtu is not None:
            pulumi.set(__self__, "ra_send_mtu", ra_send_mtu)
        if unique_autoconf_addr is not None:
            pulumi.set(__self__, "unique_autoconf_addr", unique_autoconf_addr)
        if vrip6_link_local is not None:
            pulumi.set(__self__, "vrip6_link_local", vrip6_link_local)
        if vrrp6s is not None:
            pulumi.set(__self__, "vrrp6s", vrrp6s)
        if vrrp_virtual_mac6 is not None:
            pulumi.set(__self__, "vrrp_virtual_mac6", vrrp_virtual_mac6)

    @property
    @pulumi.getter
    def autoconf(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address auto config. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "autoconf")

    @autoconf.setter
    def autoconf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autoconf", value)

    @property
    @pulumi.getter(name="cliConn6Status")
    def cli_conn6_status(self) -> Optional[pulumi.Input[int]]:
        """
        CLI IPv6 connection status.
        """
        return pulumi.get(self, "cli_conn6_status")

    @cli_conn6_status.setter
    def cli_conn6_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cli_conn6_status", value)

    @property
    @pulumi.getter(name="dhcp6ClientOptions")
    def dhcp6_client_options(self) -> Optional[pulumi.Input[str]]:
        """
        DHCPv6 client options. Valid values: `rapid`, `iapd`, `iana`.
        """
        return pulumi.get(self, "dhcp6_client_options")

    @dhcp6_client_options.setter
    def dhcp6_client_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_client_options", value)

    @property
    @pulumi.getter(name="dhcp6IapdLists")
    def dhcp6_iapd_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Dhcp6IapdListArgs']]]]:
        """
        DHCPv6 IA-PD list The structure of `dhcp6_iapd_list` block is documented below.
        """
        return pulumi.get(self, "dhcp6_iapd_lists")

    @dhcp6_iapd_lists.setter
    def dhcp6_iapd_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Dhcp6IapdListArgs']]]]):
        pulumi.set(self, "dhcp6_iapd_lists", value)

    @property
    @pulumi.getter(name="dhcp6InformationRequest")
    def dhcp6_information_request(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCPv6 information request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp6_information_request")

    @dhcp6_information_request.setter
    def dhcp6_information_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_information_request", value)

    @property
    @pulumi.getter(name="dhcp6PrefixDelegation")
    def dhcp6_prefix_delegation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCPv6 prefix delegation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp6_prefix_delegation")

    @dhcp6_prefix_delegation.setter
    def dhcp6_prefix_delegation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_prefix_delegation", value)

    @property
    @pulumi.getter(name="dhcp6PrefixHint")
    def dhcp6_prefix_hint(self) -> Optional[pulumi.Input[str]]:
        """
        DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        """
        return pulumi.get(self, "dhcp6_prefix_hint")

    @dhcp6_prefix_hint.setter
    def dhcp6_prefix_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_prefix_hint", value)

    @property
    @pulumi.getter(name="dhcp6PrefixHintPlt")
    def dhcp6_prefix_hint_plt(self) -> Optional[pulumi.Input[int]]:
        """
        DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        """
        return pulumi.get(self, "dhcp6_prefix_hint_plt")

    @dhcp6_prefix_hint_plt.setter
    def dhcp6_prefix_hint_plt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp6_prefix_hint_plt", value)

    @property
    @pulumi.getter(name="dhcp6PrefixHintVlt")
    def dhcp6_prefix_hint_vlt(self) -> Optional[pulumi.Input[int]]:
        """
        DHCPv6 prefix hint valid life time (sec).
        """
        return pulumi.get(self, "dhcp6_prefix_hint_vlt")

    @dhcp6_prefix_hint_vlt.setter
    def dhcp6_prefix_hint_vlt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp6_prefix_hint_vlt", value)

    @property
    @pulumi.getter(name="dhcp6RelayInterfaceId")
    def dhcp6_relay_interface_id(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP6 relay interface ID.
        """
        return pulumi.get(self, "dhcp6_relay_interface_id")

    @dhcp6_relay_interface_id.setter
    def dhcp6_relay_interface_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_relay_interface_id", value)

    @property
    @pulumi.getter(name="dhcp6RelayIp")
    def dhcp6_relay_ip(self) -> Optional[pulumi.Input[str]]:
        """
        DHCPv6 relay IP address.
        """
        return pulumi.get(self, "dhcp6_relay_ip")

    @dhcp6_relay_ip.setter
    def dhcp6_relay_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_relay_ip", value)

    @property
    @pulumi.getter(name="dhcp6RelayService")
    def dhcp6_relay_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCPv6 relay. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp6_relay_service")

    @dhcp6_relay_service.setter
    def dhcp6_relay_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_relay_service", value)

    @property
    @pulumi.getter(name="dhcp6RelaySourceInterface")
    def dhcp6_relay_source_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of address on this interface as the source address of the relay message. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp6_relay_source_interface")

    @dhcp6_relay_source_interface.setter
    def dhcp6_relay_source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_relay_source_interface", value)

    @property
    @pulumi.getter(name="dhcp6RelaySourceIp")
    def dhcp6_relay_source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address used by the DHCP6 relay as its source IP.
        """
        return pulumi.get(self, "dhcp6_relay_source_ip")

    @dhcp6_relay_source_ip.setter
    def dhcp6_relay_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_relay_source_ip", value)

    @property
    @pulumi.getter(name="dhcp6RelayType")
    def dhcp6_relay_type(self) -> Optional[pulumi.Input[str]]:
        """
        DHCPv6 relay type. Valid values: `regular`.
        """
        return pulumi.get(self, "dhcp6_relay_type")

    @dhcp6_relay_type.setter
    def dhcp6_relay_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_relay_type", value)

    @property
    @pulumi.getter(name="icmp6SendRedirect")
    def icmp6_send_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending of ICMPv6 redirects. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "icmp6_send_redirect")

    @icmp6_send_redirect.setter
    def icmp6_send_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icmp6_send_redirect", value)

    @property
    @pulumi.getter(name="interfaceIdentifier")
    def interface_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 interface identifier.
        """
        return pulumi.get(self, "interface_identifier")

    @interface_identifier.setter
    def interface_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_identifier", value)

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> Optional[pulumi.Input[str]]:
        """
        Primary IPv6 address prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        """
        return pulumi.get(self, "ip6_address")

    @ip6_address.setter
    def ip6_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_address", value)

    @property
    @pulumi.getter(name="ip6Allowaccess")
    def ip6_allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Allow management access to the interface.
        """
        return pulumi.get(self, "ip6_allowaccess")

    @ip6_allowaccess.setter
    def ip6_allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_allowaccess", value)

    @property
    @pulumi.getter(name="ip6DefaultLife")
    def ip6_default_life(self) -> Optional[pulumi.Input[int]]:
        """
        Default life (sec).
        """
        return pulumi.get(self, "ip6_default_life")

    @ip6_default_life.setter
    def ip6_default_life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_default_life", value)

    @property
    @pulumi.getter(name="ip6DelegatedPrefixIaid")
    def ip6_delegated_prefix_iaid(self) -> Optional[pulumi.Input[int]]:
        """
        IAID of obtained delegated-prefix from the upstream interface.
        """
        return pulumi.get(self, "ip6_delegated_prefix_iaid")

    @ip6_delegated_prefix_iaid.setter
    def ip6_delegated_prefix_iaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_delegated_prefix_iaid", value)

    @property
    @pulumi.getter(name="ip6DelegatedPrefixLists")
    def ip6_delegated_prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6DelegatedPrefixListArgs']]]]:
        """
        Advertised IPv6 delegated prefix list. The structure of `ip6_delegated_prefix_list` block is documented below.
        """
        return pulumi.get(self, "ip6_delegated_prefix_lists")

    @ip6_delegated_prefix_lists.setter
    def ip6_delegated_prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6DelegatedPrefixListArgs']]]]):
        pulumi.set(self, "ip6_delegated_prefix_lists", value)

    @property
    @pulumi.getter(name="ip6DnsServerOverride")
    def ip6_dns_server_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable using the DNS server acquired by DHCP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip6_dns_server_override")

    @ip6_dns_server_override.setter
    def ip6_dns_server_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_dns_server_override", value)

    @property
    @pulumi.getter(name="ip6ExtraAddrs")
    def ip6_extra_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6ExtraAddrArgs']]]]:
        """
        Extra IPv6 address prefixes of interface. The structure of `ip6_extra_addr` block is documented below.
        """
        return pulumi.get(self, "ip6_extra_addrs")

    @ip6_extra_addrs.setter
    def ip6_extra_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6ExtraAddrArgs']]]]):
        pulumi.set(self, "ip6_extra_addrs", value)

    @property
    @pulumi.getter(name="ip6HopLimit")
    def ip6_hop_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Hop limit (0 means unspecified).
        """
        return pulumi.get(self, "ip6_hop_limit")

    @ip6_hop_limit.setter
    def ip6_hop_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_hop_limit", value)

    @property
    @pulumi.getter(name="ip6LinkMtu")
    def ip6_link_mtu(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 link MTU.
        """
        return pulumi.get(self, "ip6_link_mtu")

    @ip6_link_mtu.setter
    def ip6_link_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_link_mtu", value)

    @property
    @pulumi.getter(name="ip6ManageFlag")
    def ip6_manage_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the managed flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip6_manage_flag")

    @ip6_manage_flag.setter
    def ip6_manage_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_manage_flag", value)

    @property
    @pulumi.getter(name="ip6MaxInterval")
    def ip6_max_interval(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 maximum interval (4 to 1800 sec).
        """
        return pulumi.get(self, "ip6_max_interval")

    @ip6_max_interval.setter
    def ip6_max_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_max_interval", value)

    @property
    @pulumi.getter(name="ip6MinInterval")
    def ip6_min_interval(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 minimum interval (3 to 1350 sec).
        """
        return pulumi.get(self, "ip6_min_interval")

    @ip6_min_interval.setter
    def ip6_min_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_min_interval", value)

    @property
    @pulumi.getter(name="ip6Mode")
    def ip6_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Addressing mode (static, DHCP, delegated). Valid values: `static`, `dhcp`, `pppoe`, `delegated`.
        """
        return pulumi.get(self, "ip6_mode")

    @ip6_mode.setter
    def ip6_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_mode", value)

    @property
    @pulumi.getter(name="ip6OtherFlag")
    def ip6_other_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the other IPv6 flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip6_other_flag")

    @ip6_other_flag.setter
    def ip6_other_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_other_flag", value)

    @property
    @pulumi.getter(name="ip6PrefixLists")
    def ip6_prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6PrefixListArgs']]]]:
        """
        Advertised prefix list. The structure of `ip6_prefix_list` block is documented below.
        """
        return pulumi.get(self, "ip6_prefix_lists")

    @ip6_prefix_lists.setter
    def ip6_prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6PrefixListArgs']]]]):
        pulumi.set(self, "ip6_prefix_lists", value)

    @property
    @pulumi.getter(name="ip6PrefixMode")
    def ip6_prefix_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Assigning a prefix from DHCP or RA. Valid values: `dhcp6`, `ra`.
        """
        return pulumi.get(self, "ip6_prefix_mode")

    @ip6_prefix_mode.setter
    def ip6_prefix_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_prefix_mode", value)

    @property
    @pulumi.getter(name="ip6ReachableTime")
    def ip6_reachable_time(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 reachable time (milliseconds; 0 means unspecified).
        """
        return pulumi.get(self, "ip6_reachable_time")

    @ip6_reachable_time.setter
    def ip6_reachable_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_reachable_time", value)

    @property
    @pulumi.getter(name="ip6RetransTime")
    def ip6_retrans_time(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 retransmit time (milliseconds; 0 means unspecified).
        """
        return pulumi.get(self, "ip6_retrans_time")

    @ip6_retrans_time.setter
    def ip6_retrans_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_retrans_time", value)

    @property
    @pulumi.getter(name="ip6SendAdv")
    def ip6_send_adv(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending advertisements about the interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip6_send_adv")

    @ip6_send_adv.setter
    def ip6_send_adv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_send_adv", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet to routing prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        """
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter(name="ip6UpstreamInterface")
    def ip6_upstream_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name providing delegated information.
        """
        return pulumi.get(self, "ip6_upstream_interface")

    @ip6_upstream_interface.setter
    def ip6_upstream_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_upstream_interface", value)

    @property
    @pulumi.getter(name="ndCert")
    def nd_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Neighbor discovery certificate.
        """
        return pulumi.get(self, "nd_cert")

    @nd_cert.setter
    def nd_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nd_cert", value)

    @property
    @pulumi.getter(name="ndCgaModifier")
    def nd_cga_modifier(self) -> Optional[pulumi.Input[str]]:
        """
        Neighbor discovery CGA modifier.
        """
        return pulumi.get(self, "nd_cga_modifier")

    @nd_cga_modifier.setter
    def nd_cga_modifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nd_cga_modifier", value)

    @property
    @pulumi.getter(name="ndMode")
    def nd_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Neighbor discovery mode. Valid values: `basic`, `SEND-compatible`.
        """
        return pulumi.get(self, "nd_mode")

    @nd_mode.setter
    def nd_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nd_mode", value)

    @property
    @pulumi.getter(name="ndSecurityLevel")
    def nd_security_level(self) -> Optional[pulumi.Input[int]]:
        """
        Neighbor discovery security level (0 - 7; 0 = least secure, default = 0).
        """
        return pulumi.get(self, "nd_security_level")

    @nd_security_level.setter
    def nd_security_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nd_security_level", value)

    @property
    @pulumi.getter(name="ndTimestampDelta")
    def nd_timestamp_delta(self) -> Optional[pulumi.Input[int]]:
        """
        Neighbor discovery timestamp delta value (1 - 3600 sec; default = 300).
        """
        return pulumi.get(self, "nd_timestamp_delta")

    @nd_timestamp_delta.setter
    def nd_timestamp_delta(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nd_timestamp_delta", value)

    @property
    @pulumi.getter(name="ndTimestampFuzz")
    def nd_timestamp_fuzz(self) -> Optional[pulumi.Input[int]]:
        """
        Neighbor discovery timestamp fuzz factor (1 - 60 sec; default = 1).
        """
        return pulumi.get(self, "nd_timestamp_fuzz")

    @nd_timestamp_fuzz.setter
    def nd_timestamp_fuzz(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nd_timestamp_fuzz", value)

    @property
    @pulumi.getter(name="raSendMtu")
    def ra_send_mtu(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending link MTU in RA packet. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ra_send_mtu")

    @ra_send_mtu.setter
    def ra_send_mtu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ra_send_mtu", value)

    @property
    @pulumi.getter(name="uniqueAutoconfAddr")
    def unique_autoconf_addr(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable unique auto config address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "unique_autoconf_addr")

    @unique_autoconf_addr.setter
    def unique_autoconf_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_autoconf_addr", value)

    @property
    @pulumi.getter(name="vrip6LinkLocal")
    def vrip6_link_local(self) -> Optional[pulumi.Input[str]]:
        """
        Link-local IPv6 address of virtual router.
        """
        return pulumi.get(self, "vrip6_link_local")

    @vrip6_link_local.setter
    def vrip6_link_local(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrip6_link_local", value)

    @property
    @pulumi.getter
    def vrrp6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Vrrp6Args']]]]:
        """
        IPv6 VRRP configuration. The structure of `vrrp6` block is documented below.

        The `ip6_extra_addr` block supports:
        """
        return pulumi.get(self, "vrrp6s")

    @vrrp6s.setter
    def vrrp6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Vrrp6Args']]]]):
        pulumi.set(self, "vrrp6s", value)

    @property
    @pulumi.getter(name="vrrpVirtualMac6")
    def vrrp_virtual_mac6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable virtual MAC for VRRP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vrrp_virtual_mac6")

    @vrrp_virtual_mac6.setter
    def vrrp_virtual_mac6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrrp_virtual_mac6", value)


@pulumi.input_type
class InterfaceIpv6Dhcp6IapdListArgs:
    def __init__(__self__, *,
                 iaid: Optional[pulumi.Input[int]] = None,
                 prefix_hint: Optional[pulumi.Input[str]] = None,
                 prefix_hint_plt: Optional[pulumi.Input[int]] = None,
                 prefix_hint_vlt: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] iaid: Identity association identifier.
        :param pulumi.Input[str] prefix_hint: DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        :param pulumi.Input[int] prefix_hint_plt: DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        :param pulumi.Input[int] prefix_hint_vlt: DHCPv6 prefix hint valid life time (sec).
               
               The `vrrp6` block supports:
        """
        if iaid is not None:
            pulumi.set(__self__, "iaid", iaid)
        if prefix_hint is not None:
            pulumi.set(__self__, "prefix_hint", prefix_hint)
        if prefix_hint_plt is not None:
            pulumi.set(__self__, "prefix_hint_plt", prefix_hint_plt)
        if prefix_hint_vlt is not None:
            pulumi.set(__self__, "prefix_hint_vlt", prefix_hint_vlt)

    @property
    @pulumi.getter
    def iaid(self) -> Optional[pulumi.Input[int]]:
        """
        Identity association identifier.
        """
        return pulumi.get(self, "iaid")

    @iaid.setter
    def iaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iaid", value)

    @property
    @pulumi.getter(name="prefixHint")
    def prefix_hint(self) -> Optional[pulumi.Input[str]]:
        """
        DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        """
        return pulumi.get(self, "prefix_hint")

    @prefix_hint.setter
    def prefix_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_hint", value)

    @property
    @pulumi.getter(name="prefixHintPlt")
    def prefix_hint_plt(self) -> Optional[pulumi.Input[int]]:
        """
        DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        """
        return pulumi.get(self, "prefix_hint_plt")

    @prefix_hint_plt.setter
    def prefix_hint_plt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_hint_plt", value)

    @property
    @pulumi.getter(name="prefixHintVlt")
    def prefix_hint_vlt(self) -> Optional[pulumi.Input[int]]:
        """
        DHCPv6 prefix hint valid life time (sec).

        The `vrrp6` block supports:
        """
        return pulumi.get(self, "prefix_hint_vlt")

    @prefix_hint_vlt.setter
    def prefix_hint_vlt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_hint_vlt", value)


@pulumi.input_type
class InterfaceIpv6Ip6DelegatedPrefixListArgs:
    def __init__(__self__, *,
                 autonomous_flag: Optional[pulumi.Input[str]] = None,
                 delegated_prefix_iaid: Optional[pulumi.Input[int]] = None,
                 onlink_flag: Optional[pulumi.Input[str]] = None,
                 prefix_id: Optional[pulumi.Input[int]] = None,
                 rdnss: Optional[pulumi.Input[str]] = None,
                 rdnss_service: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 upstream_interface: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] autonomous_flag: Enable/disable the autonomous flag. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] delegated_prefix_iaid: IAID of obtained delegated-prefix from the upstream interface.
        :param pulumi.Input[str] onlink_flag: Enable/disable the onlink flag. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] prefix_id: Prefix ID.
        :param pulumi.Input[str] rdnss: Recursive DNS server option.
               
               The `dhcp6_iapd_list` block supports:
        :param pulumi.Input[str] rdnss_service: Recursive DNS service option. Valid values: `delegated`, `default`, `specify`.
        :param pulumi.Input[str] subnet: Add subnet ID to routing prefix.
        :param pulumi.Input[str] upstream_interface: Name of the interface that provides delegated information.
        """
        if autonomous_flag is not None:
            pulumi.set(__self__, "autonomous_flag", autonomous_flag)
        if delegated_prefix_iaid is not None:
            pulumi.set(__self__, "delegated_prefix_iaid", delegated_prefix_iaid)
        if onlink_flag is not None:
            pulumi.set(__self__, "onlink_flag", onlink_flag)
        if prefix_id is not None:
            pulumi.set(__self__, "prefix_id", prefix_id)
        if rdnss is not None:
            pulumi.set(__self__, "rdnss", rdnss)
        if rdnss_service is not None:
            pulumi.set(__self__, "rdnss_service", rdnss_service)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if upstream_interface is not None:
            pulumi.set(__self__, "upstream_interface", upstream_interface)

    @property
    @pulumi.getter(name="autonomousFlag")
    def autonomous_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the autonomous flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "autonomous_flag")

    @autonomous_flag.setter
    def autonomous_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autonomous_flag", value)

    @property
    @pulumi.getter(name="delegatedPrefixIaid")
    def delegated_prefix_iaid(self) -> Optional[pulumi.Input[int]]:
        """
        IAID of obtained delegated-prefix from the upstream interface.
        """
        return pulumi.get(self, "delegated_prefix_iaid")

    @delegated_prefix_iaid.setter
    def delegated_prefix_iaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delegated_prefix_iaid", value)

    @property
    @pulumi.getter(name="onlinkFlag")
    def onlink_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the onlink flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "onlink_flag")

    @onlink_flag.setter
    def onlink_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "onlink_flag", value)

    @property
    @pulumi.getter(name="prefixId")
    def prefix_id(self) -> Optional[pulumi.Input[int]]:
        """
        Prefix ID.
        """
        return pulumi.get(self, "prefix_id")

    @prefix_id.setter
    def prefix_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_id", value)

    @property
    @pulumi.getter
    def rdnss(self) -> Optional[pulumi.Input[str]]:
        """
        Recursive DNS server option.

        The `dhcp6_iapd_list` block supports:
        """
        return pulumi.get(self, "rdnss")

    @rdnss.setter
    def rdnss(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rdnss", value)

    @property
    @pulumi.getter(name="rdnssService")
    def rdnss_service(self) -> Optional[pulumi.Input[str]]:
        """
        Recursive DNS service option. Valid values: `delegated`, `default`, `specify`.
        """
        return pulumi.get(self, "rdnss_service")

    @rdnss_service.setter
    def rdnss_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rdnss_service", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Add subnet ID to routing prefix.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="upstreamInterface")
    def upstream_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the interface that provides delegated information.
        """
        return pulumi.get(self, "upstream_interface")

    @upstream_interface.setter
    def upstream_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_interface", value)


@pulumi.input_type
class InterfaceIpv6Ip6ExtraAddrArgs:
    def __init__(__self__, *,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] prefix: IPv6 prefix.
        """
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class InterfaceIpv6Ip6PrefixListArgs:
    def __init__(__self__, *,
                 autonomous_flag: Optional[pulumi.Input[str]] = None,
                 dnssls: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6PrefixListDnsslArgs']]]] = None,
                 onlink_flag: Optional[pulumi.Input[str]] = None,
                 preferred_life_time: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 rdnss: Optional[pulumi.Input[str]] = None,
                 valid_life_time: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] autonomous_flag: Enable/disable the autonomous flag. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6PrefixListDnsslArgs']]] dnssls: DNS search list option. The structure of `dnssl` block is documented below.
        :param pulumi.Input[str] onlink_flag: Enable/disable the onlink flag. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] preferred_life_time: Preferred life time (sec).
        :param pulumi.Input[str] prefix: IPv6 prefix.
        :param pulumi.Input[str] rdnss: Recursive DNS server option.
               
               The `dhcp6_iapd_list` block supports:
        :param pulumi.Input[int] valid_life_time: Valid life time (sec).
        """
        if autonomous_flag is not None:
            pulumi.set(__self__, "autonomous_flag", autonomous_flag)
        if dnssls is not None:
            pulumi.set(__self__, "dnssls", dnssls)
        if onlink_flag is not None:
            pulumi.set(__self__, "onlink_flag", onlink_flag)
        if preferred_life_time is not None:
            pulumi.set(__self__, "preferred_life_time", preferred_life_time)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if rdnss is not None:
            pulumi.set(__self__, "rdnss", rdnss)
        if valid_life_time is not None:
            pulumi.set(__self__, "valid_life_time", valid_life_time)

    @property
    @pulumi.getter(name="autonomousFlag")
    def autonomous_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the autonomous flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "autonomous_flag")

    @autonomous_flag.setter
    def autonomous_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autonomous_flag", value)

    @property
    @pulumi.getter
    def dnssls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6PrefixListDnsslArgs']]]]:
        """
        DNS search list option. The structure of `dnssl` block is documented below.
        """
        return pulumi.get(self, "dnssls")

    @dnssls.setter
    def dnssls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceIpv6Ip6PrefixListDnsslArgs']]]]):
        pulumi.set(self, "dnssls", value)

    @property
    @pulumi.getter(name="onlinkFlag")
    def onlink_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the onlink flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "onlink_flag")

    @onlink_flag.setter
    def onlink_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "onlink_flag", value)

    @property
    @pulumi.getter(name="preferredLifeTime")
    def preferred_life_time(self) -> Optional[pulumi.Input[int]]:
        """
        Preferred life time (sec).
        """
        return pulumi.get(self, "preferred_life_time")

    @preferred_life_time.setter
    def preferred_life_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preferred_life_time", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def rdnss(self) -> Optional[pulumi.Input[str]]:
        """
        Recursive DNS server option.

        The `dhcp6_iapd_list` block supports:
        """
        return pulumi.get(self, "rdnss")

    @rdnss.setter
    def rdnss(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rdnss", value)

    @property
    @pulumi.getter(name="validLifeTime")
    def valid_life_time(self) -> Optional[pulumi.Input[int]]:
        """
        Valid life time (sec).
        """
        return pulumi.get(self, "valid_life_time")

    @valid_life_time.setter
    def valid_life_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "valid_life_time", value)


@pulumi.input_type
class InterfaceIpv6Ip6PrefixListDnsslArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain: Domain name.
               
               The `ip6_delegated_prefix_list` block supports:
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name.

        The `ip6_delegated_prefix_list` block supports:
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class InterfaceIpv6Vrrp6Args:
    def __init__(__self__, *,
                 accept_mode: Optional[pulumi.Input[str]] = None,
                 adv_interval: Optional[pulumi.Input[int]] = None,
                 ignore_default_route: Optional[pulumi.Input[str]] = None,
                 preempt: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vrdst6: Optional[pulumi.Input[str]] = None,
                 vrgrp: Optional[pulumi.Input[int]] = None,
                 vrid: Optional[pulumi.Input[int]] = None,
                 vrip6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] accept_mode: Enable/disable accept mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] adv_interval: Advertisement interval (1 - 255 seconds).
        :param pulumi.Input[str] ignore_default_route: Enable/disable ignoring of default route when checking destination. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] preempt: Enable/disable preempt mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Priority of learned routes.
        :param pulumi.Input[int] start_time: Startup time (1 - 255 seconds).
        :param pulumi.Input[str] status: Bring the interface up or shut the interface down. Valid values: `up`, `down`.
        :param pulumi.Input[str] vrdst6: Monitor the route to this destination.
        :param pulumi.Input[int] vrgrp: VRRP group ID (1 - 65535).
        :param pulumi.Input[int] vrid: Virtual router identifier (1 - 255).
        :param pulumi.Input[str] vrip6: IPv6 address of the virtual router.
        """
        if accept_mode is not None:
            pulumi.set(__self__, "accept_mode", accept_mode)
        if adv_interval is not None:
            pulumi.set(__self__, "adv_interval", adv_interval)
        if ignore_default_route is not None:
            pulumi.set(__self__, "ignore_default_route", ignore_default_route)
        if preempt is not None:
            pulumi.set(__self__, "preempt", preempt)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vrdst6 is not None:
            pulumi.set(__self__, "vrdst6", vrdst6)
        if vrgrp is not None:
            pulumi.set(__self__, "vrgrp", vrgrp)
        if vrid is not None:
            pulumi.set(__self__, "vrid", vrid)
        if vrip6 is not None:
            pulumi.set(__self__, "vrip6", vrip6)

    @property
    @pulumi.getter(name="acceptMode")
    def accept_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable accept mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "accept_mode")

    @accept_mode.setter
    def accept_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_mode", value)

    @property
    @pulumi.getter(name="advInterval")
    def adv_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Advertisement interval (1 - 255 seconds).
        """
        return pulumi.get(self, "adv_interval")

    @adv_interval.setter
    def adv_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_interval", value)

    @property
    @pulumi.getter(name="ignoreDefaultRoute")
    def ignore_default_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ignoring of default route when checking destination. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ignore_default_route")

    @ignore_default_route.setter
    def ignore_default_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_default_route", value)

    @property
    @pulumi.getter
    def preempt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable preempt mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "preempt")

    @preempt.setter
    def preempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preempt", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of learned routes.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        """
        Startup time (1 - 255 seconds).
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Bring the interface up or shut the interface down. Valid values: `up`, `down`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vrdst6(self) -> Optional[pulumi.Input[str]]:
        """
        Monitor the route to this destination.
        """
        return pulumi.get(self, "vrdst6")

    @vrdst6.setter
    def vrdst6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrdst6", value)

    @property
    @pulumi.getter
    def vrgrp(self) -> Optional[pulumi.Input[int]]:
        """
        VRRP group ID (1 - 65535).
        """
        return pulumi.get(self, "vrgrp")

    @vrgrp.setter
    def vrgrp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrgrp", value)

    @property
    @pulumi.getter
    def vrid(self) -> Optional[pulumi.Input[int]]:
        """
        Virtual router identifier (1 - 255).
        """
        return pulumi.get(self, "vrid")

    @vrid.setter
    def vrid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrid", value)

    @property
    @pulumi.getter
    def vrip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the virtual router.
        """
        return pulumi.get(self, "vrip6")

    @vrip6.setter
    def vrip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrip6", value)


@pulumi.input_type
class InterfaceManagedDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Managed dev identifier.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Managed dev identifier.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InterfaceMemberArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Physical interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class InterfaceSecondaryipArgs:
    def __init__(__self__, *,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 detectprotocol: Optional[pulumi.Input[str]] = None,
                 detectserver: Optional[pulumi.Input[str]] = None,
                 gwdetect: Optional[pulumi.Input[str]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ping_serv_status: Optional[pulumi.Input[int]] = None,
                 secip_relay_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] allowaccess: Management access settings for the secondary IP address.
        :param pulumi.Input[str] detectprotocol: Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
        :param pulumi.Input[str] detectserver: Gateway's ping server for this IP.
        :param pulumi.Input[str] gwdetect: Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ha_priority: HA election priority for the PING server.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] ip: Secondary IP address of the interface.
        :param pulumi.Input[int] ping_serv_status: PING server status.
        :param pulumi.Input[str] secip_relay_ip: DHCP relay IP address.
        """
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if detectprotocol is not None:
            pulumi.set(__self__, "detectprotocol", detectprotocol)
        if detectserver is not None:
            pulumi.set(__self__, "detectserver", detectserver)
        if gwdetect is not None:
            pulumi.set(__self__, "gwdetect", gwdetect)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ping_serv_status is not None:
            pulumi.set(__self__, "ping_serv_status", ping_serv_status)
        if secip_relay_ip is not None:
            pulumi.set(__self__, "secip_relay_ip", secip_relay_ip)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Management access settings for the secondary IP address.
        """
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter
    def detectprotocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
        """
        return pulumi.get(self, "detectprotocol")

    @detectprotocol.setter
    def detectprotocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detectprotocol", value)

    @property
    @pulumi.getter
    def detectserver(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway's ping server for this IP.
        """
        return pulumi.get(self, "detectserver")

    @detectserver.setter
    def detectserver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detectserver", value)

    @property
    @pulumi.getter
    def gwdetect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gwdetect")

    @gwdetect.setter
    def gwdetect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gwdetect", value)

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[pulumi.Input[int]]:
        """
        HA election priority for the PING server.
        """
        return pulumi.get(self, "ha_priority")

    @ha_priority.setter
    def ha_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_priority", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary IP address of the interface.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="pingServStatus")
    def ping_serv_status(self) -> Optional[pulumi.Input[int]]:
        """
        PING server status.
        """
        return pulumi.get(self, "ping_serv_status")

    @ping_serv_status.setter
    def ping_serv_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ping_serv_status", value)

    @property
    @pulumi.getter(name="secipRelayIp")
    def secip_relay_ip(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP relay IP address.
        """
        return pulumi.get(self, "secip_relay_ip")

    @secip_relay_ip.setter
    def secip_relay_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secip_relay_ip", value)


@pulumi.input_type
class InterfaceSecurityGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of user groups that can authenticate with the captive portal.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of user groups that can authenticate with the captive portal.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InterfaceTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tagging entry name.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tagging entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class InterfaceTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
               
               The `ipv6` block supports:
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.

        The `ipv6` block supports:
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class InterfaceVrrpArgs:
    def __init__(__self__, *,
                 accept_mode: Optional[pulumi.Input[str]] = None,
                 adv_interval: Optional[pulumi.Input[int]] = None,
                 ignore_default_route: Optional[pulumi.Input[str]] = None,
                 preempt: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 proxy_arps: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceVrrpProxyArpArgs']]]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 vrdst: Optional[pulumi.Input[str]] = None,
                 vrdst_priority: Optional[pulumi.Input[int]] = None,
                 vrgrp: Optional[pulumi.Input[int]] = None,
                 vrid: Optional[pulumi.Input[int]] = None,
                 vrip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] accept_mode: Enable/disable accept mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] adv_interval: Advertisement interval (1 - 255 seconds).
        :param pulumi.Input[str] ignore_default_route: Enable/disable ignoring of default route when checking destination. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] preempt: Enable/disable preempt mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Priority of the virtual router (1 - 255).
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceVrrpProxyArpArgs']]] proxy_arps: VRRP Proxy ARP configuration. The structure of `proxy_arp` block is documented below.
        :param pulumi.Input[int] start_time: Startup time (1 - 255 seconds).
        :param pulumi.Input[str] status: Enable/disable this VRRP configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] version: VRRP version. Valid values: `2`, `3`.
        :param pulumi.Input[str] vrdst: Monitor the route to this destination.
        :param pulumi.Input[int] vrdst_priority: Priority of the virtual router when the virtual router destination becomes unreachable (0 - 254).
        :param pulumi.Input[int] vrgrp: VRRP group ID (1 - 65535).
        :param pulumi.Input[int] vrid: Virtual router identifier (1 - 255).
        :param pulumi.Input[str] vrip: IP address of the virtual router.
        """
        if accept_mode is not None:
            pulumi.set(__self__, "accept_mode", accept_mode)
        if adv_interval is not None:
            pulumi.set(__self__, "adv_interval", adv_interval)
        if ignore_default_route is not None:
            pulumi.set(__self__, "ignore_default_route", ignore_default_route)
        if preempt is not None:
            pulumi.set(__self__, "preempt", preempt)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if proxy_arps is not None:
            pulumi.set(__self__, "proxy_arps", proxy_arps)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vrdst is not None:
            pulumi.set(__self__, "vrdst", vrdst)
        if vrdst_priority is not None:
            pulumi.set(__self__, "vrdst_priority", vrdst_priority)
        if vrgrp is not None:
            pulumi.set(__self__, "vrgrp", vrgrp)
        if vrid is not None:
            pulumi.set(__self__, "vrid", vrid)
        if vrip is not None:
            pulumi.set(__self__, "vrip", vrip)

    @property
    @pulumi.getter(name="acceptMode")
    def accept_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable accept mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "accept_mode")

    @accept_mode.setter
    def accept_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_mode", value)

    @property
    @pulumi.getter(name="advInterval")
    def adv_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Advertisement interval (1 - 255 seconds).
        """
        return pulumi.get(self, "adv_interval")

    @adv_interval.setter
    def adv_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_interval", value)

    @property
    @pulumi.getter(name="ignoreDefaultRoute")
    def ignore_default_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ignoring of default route when checking destination. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ignore_default_route")

    @ignore_default_route.setter
    def ignore_default_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_default_route", value)

    @property
    @pulumi.getter
    def preempt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable preempt mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "preempt")

    @preempt.setter
    def preempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preempt", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the virtual router (1 - 255).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="proxyArps")
    def proxy_arps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceVrrpProxyArpArgs']]]]:
        """
        VRRP Proxy ARP configuration. The structure of `proxy_arp` block is documented below.
        """
        return pulumi.get(self, "proxy_arps")

    @proxy_arps.setter
    def proxy_arps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceVrrpProxyArpArgs']]]]):
        pulumi.set(self, "proxy_arps", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        """
        Startup time (1 - 255 seconds).
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this VRRP configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        VRRP version. Valid values: `2`, `3`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def vrdst(self) -> Optional[pulumi.Input[str]]:
        """
        Monitor the route to this destination.
        """
        return pulumi.get(self, "vrdst")

    @vrdst.setter
    def vrdst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrdst", value)

    @property
    @pulumi.getter(name="vrdstPriority")
    def vrdst_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the virtual router when the virtual router destination becomes unreachable (0 - 254).
        """
        return pulumi.get(self, "vrdst_priority")

    @vrdst_priority.setter
    def vrdst_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrdst_priority", value)

    @property
    @pulumi.getter
    def vrgrp(self) -> Optional[pulumi.Input[int]]:
        """
        VRRP group ID (1 - 65535).
        """
        return pulumi.get(self, "vrgrp")

    @vrgrp.setter
    def vrgrp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrgrp", value)

    @property
    @pulumi.getter
    def vrid(self) -> Optional[pulumi.Input[int]]:
        """
        Virtual router identifier (1 - 255).
        """
        return pulumi.get(self, "vrid")

    @vrid.setter
    def vrid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrid", value)

    @property
    @pulumi.getter
    def vrip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the virtual router.
        """
        return pulumi.get(self, "vrip")

    @vrip.setter
    def vrip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrip", value)


@pulumi.input_type
class InterfaceVrrpProxyArpArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] ip: Set IP addresses of proxy ARP.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Set IP addresses of proxy ARP.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class IpamPoolArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] name: IPAM pool name.
        :param pulumi.Input[str] subnet: Configure IPAM pool subnet, Class A - Class B subnet.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPAM pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Configure IPAM pool subnet, Class A - Class B subnet.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class IpamRuleArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['IpamRuleDeviceArgs']]]] = None,
                 dhcp: Optional[pulumi.Input[str]] = None,
                 interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['IpamRuleInterfaceArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pools: Optional[pulumi.Input[Sequence[pulumi.Input['IpamRulePoolArgs']]]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[Sequence[pulumi.Input['IpamRuleDeviceArgs']]] devices: Configure serial number or wildcard of Fortigate to match. The structure of `device` block is documented below.
        :param pulumi.Input[str] dhcp: Enable/disable DHCP server for matching IPAM interfaces. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['IpamRuleInterfaceArgs']]] interfaces: Configure name or wildcard of interface to match. The structure of `interface` block is documented below.
        :param pulumi.Input[str] name: IPAM rule name.
        :param pulumi.Input[Sequence[pulumi.Input['IpamRulePoolArgs']]] pools: Configure name of IPAM pool to use. The structure of `pool` block is documented below.
        :param pulumi.Input[str] role: Configure role of interface to match. Valid values: `any`, `lan`, `wan`, `dmz`, `undefined`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pools is not None:
            pulumi.set(__self__, "pools", pools)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpamRuleDeviceArgs']]]]:
        """
        Configure serial number or wildcard of Fortigate to match. The structure of `device` block is documented below.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpamRuleDeviceArgs']]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCP server for matching IPAM interfaces. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp", value)

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpamRuleInterfaceArgs']]]]:
        """
        Configure name or wildcard of interface to match. The structure of `interface` block is documented below.
        """
        return pulumi.get(self, "interfaces")

    @interfaces.setter
    def interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpamRuleInterfaceArgs']]]]):
        pulumi.set(self, "interfaces", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPAM rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpamRulePoolArgs']]]]:
        """
        Configure name of IPAM pool to use. The structure of `pool` block is documented below.
        """
        return pulumi.get(self, "pools")

    @pools.setter
    def pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpamRulePoolArgs']]]]):
        pulumi.set(self, "pools", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Configure role of interface to match. Valid values: `any`, `lan`, `wan`, `dmz`, `undefined`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class IpamRuleDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Fortigate serial number or wildcard.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Fortigate serial number or wildcard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IpamRuleInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name or wildcard.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name or wildcard.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IpamRulePoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Ipam pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Ipam pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IpsecaggregateMemberArgs:
    def __init__(__self__, *,
                 tunnel_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tunnel_name: Tunnel name.
        """
        if tunnel_name is not None:
            pulumi.set(__self__, "tunnel_name", tunnel_name)

    @property
    @pulumi.getter(name="tunnelName")
    def tunnel_name(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel name.
        """
        return pulumi.get(self, "tunnel_name")

    @tunnel_name.setter
    def tunnel_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_name", value)


@pulumi.input_type
class LinkmonitorRouteArgs:
    def __init__(__self__, *,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet: IP and netmask (x.x.x.x/y).
        """
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IP and netmask (x.x.x.x/y).
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class LinkmonitorServerArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: Server address.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Server address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)


@pulumi.input_type
class LinkmonitorServerListArgs:
    def __init__(__self__, *,
                 dst: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dst: IP address of the server to be monitored.
        :param pulumi.Input[int] id: Server ID.
        :param pulumi.Input[int] port: Port number of the traffic to be used to monitor the server.
        :param pulumi.Input[str] protocol: Protocols used to monitor the server.
        :param pulumi.Input[int] weight: Weight of the monitor to this dst (0 - 255).
        """
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the server to be monitored.
        """
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number of the traffic to be used to monitor the server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocols used to monitor the server.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of the monitor to this dst (0 - 255).
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class MobiletunnelNetworkArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Network entry ID.
        :param pulumi.Input[str] interface: Select the associated interface name from available options.
        :param pulumi.Input[str] prefix: Class IP and Netmask with correction (Format:xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx or xxx.xxx.xxx.xxx/x).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Network entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Select the associated interface name from available options.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Class IP and Netmask with correction (Format:xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx or xxx.xxx.xxx.xxx/x).
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class Nat64SecondaryPrefixArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 nat64_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: NAT64 prefix name.
        :param pulumi.Input[str] nat64_prefix: NAT64 prefix.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat64_prefix is not None:
            pulumi.set(__self__, "nat64_prefix", nat64_prefix)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NAT64 prefix name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nat64Prefix")
    def nat64_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        NAT64 prefix.
        """
        return pulumi.get(self, "nat64_prefix")

    @nat64_prefix.setter
    def nat64_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64_prefix", value)


@pulumi.input_type
class NdproxyMemberArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class NetflowCollectorArgs:
    def __init__(__self__, *,
                 collector_ip: Optional[pulumi.Input[str]] = None,
                 collector_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] collector_ip: Collector IP.
        :param pulumi.Input[int] collector_port: NetFlow collector port number.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] source_ip: Source IP address for communication with the NetFlow agent.
        """
        if collector_ip is not None:
            pulumi.set(__self__, "collector_ip", collector_ip)
        if collector_port is not None:
            pulumi.set(__self__, "collector_port", collector_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Collector IP.
        """
        return pulumi.get(self, "collector_ip")

    @collector_ip.setter
    def collector_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collector_ip", value)

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> Optional[pulumi.Input[int]]:
        """
        NetFlow collector port number.
        """
        return pulumi.get(self, "collector_port")

    @collector_port.setter
    def collector_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "collector_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address for communication with the NetFlow agent.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)


@pulumi.input_type
class NpuPriorityProtocolArgs:
    def __init__(__self__, *,
                 bfd: Optional[pulumi.Input[str]] = None,
                 bgp: Optional[pulumi.Input[str]] = None,
                 slbc: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bfd: Enable/disable NPU BFD priority protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bgp: Enable/disable NPU BGP priority protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] slbc: Enable/disable NPU SLBC priority protocol. Valid values: `enable`, `disable`.
        """
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if bgp is not None:
            pulumi.set(__self__, "bgp", bgp)
        if slbc is not None:
            pulumi.set(__self__, "slbc", slbc)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NPU BFD priority protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter
    def bgp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NPU BGP priority protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bgp")

    @bgp.setter
    def bgp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp", value)

    @property
    @pulumi.getter
    def slbc(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NPU SLBC priority protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "slbc")

    @slbc.setter
    def slbc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slbc", value)


@pulumi.input_type
class NtpInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class NtpNtpserverArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip_type: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 ntpv3: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] authentication: Enable/disable MD5/SHA1 authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: NTP server ID.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ip_type: Choose to connect to IPv4 or/and IPv6 NTP server. Valid values: `IPv6`, `IPv4`, `Both`.
        :param pulumi.Input[str] key: Key for MD5/SHA1 authentication.
        :param pulumi.Input[int] key_id: Key ID for authentication.
        :param pulumi.Input[str] ntpv3: Enable to use NTPv3 instead of NTPv4. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server: IP address or hostname of the NTP Server.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if ntpv3 is not None:
            pulumi.set(__self__, "ntpv3", ntpv3)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MD5/SHA1 authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        NTP server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[pulumi.Input[str]]:
        """
        Choose to connect to IPv4 or/and IPv6 NTP server. Valid values: `IPv6`, `IPv4`, `Both`.
        """
        return pulumi.get(self, "ip_type")

    @ip_type.setter
    def ip_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_type", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key for MD5/SHA1 authentication.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[int]]:
        """
        Key ID for authentication.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter
    def ntpv3(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to use NTPv3 instead of NTPv4. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ntpv3")

    @ntpv3.setter
    def ntpv3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntpv3", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or hostname of the NTP Server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class ObjecttaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PcpserverPoolArgs:
    def __init__(__self__, *,
                 allow_opcode: Optional[pulumi.Input[str]] = None,
                 announcement_count: Optional[pulumi.Input[int]] = None,
                 arp_reply: Optional[pulumi.Input[str]] = None,
                 client_mapping_limit: Optional[pulumi.Input[int]] = None,
                 client_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['PcpserverPoolClientSubnetArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ext_intf: Optional[pulumi.Input[str]] = None,
                 extip: Optional[pulumi.Input[str]] = None,
                 extport: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 intl_intfs: Optional[pulumi.Input[Sequence[pulumi.Input['PcpserverPoolIntlIntfArgs']]]] = None,
                 mapping_filter_limit: Optional[pulumi.Input[int]] = None,
                 maximal_lifetime: Optional[pulumi.Input[int]] = None,
                 minimal_lifetime: Optional[pulumi.Input[int]] = None,
                 multicast_announcement: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 recycle_delay: Optional[pulumi.Input[int]] = None,
                 third_party: Optional[pulumi.Input[str]] = None,
                 third_party_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['PcpserverPoolThirdPartySubnetArgs']]]] = None):
        """
        :param pulumi.Input[str] allow_opcode: Allowed PCP opcode. Valid values: `map`, `peer`, `announce`.
        :param pulumi.Input[int] announcement_count: Number of multicast announcements.
        :param pulumi.Input[str] arp_reply: Enable to respond to ARP requests for external IP (default = enable). Valid values: `disable`, `enable`.
        :param pulumi.Input[int] client_mapping_limit: Mapping limit per client (0 - 65535, default = 0, 0 = unlimited).
        :param pulumi.Input[Sequence[pulumi.Input['PcpserverPoolClientSubnetArgs']]] client_subnets: Subnets from which PCP requests are accepted. The structure of `client_subnet` block is documented below.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] ext_intf: External interface name.
        :param pulumi.Input[str] extip: IP address or address range on the external interface that you want to map to an address on the internal network.
        :param pulumi.Input[str] extport: Incoming port number range that you want to map to a port number on the internal network.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[Sequence[pulumi.Input['PcpserverPoolIntlIntfArgs']]] intl_intfs: Internal interface name. The structure of `intl_intf` block is documented below.
        :param pulumi.Input[int] mapping_filter_limit: Filter limit per mapping (0 - 5, default = 1).
        :param pulumi.Input[int] maximal_lifetime: Maximal lifetime of a PCP mapping in seconds (3600 - 604800, default = 86400).
        :param pulumi.Input[int] minimal_lifetime: Minimal lifetime of a PCP mapping in seconds (60 - 300, default = 120).
        :param pulumi.Input[str] multicast_announcement: Enable/disable multicast announcements. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: PCP pool name.
        :param pulumi.Input[int] recycle_delay: Minimum delay (in seconds) the PCP Server will wait before recycling mappings that have expired (0 - 3600, default = 0).
        :param pulumi.Input[str] third_party: Allow/disallow third party option. Valid values: `allow`, `disallow`.
        :param pulumi.Input[Sequence[pulumi.Input['PcpserverPoolThirdPartySubnetArgs']]] third_party_subnets: Subnets from which third party requests are accepted. The structure of `third_party_subnet` block is documented below.
        """
        if allow_opcode is not None:
            pulumi.set(__self__, "allow_opcode", allow_opcode)
        if announcement_count is not None:
            pulumi.set(__self__, "announcement_count", announcement_count)
        if arp_reply is not None:
            pulumi.set(__self__, "arp_reply", arp_reply)
        if client_mapping_limit is not None:
            pulumi.set(__self__, "client_mapping_limit", client_mapping_limit)
        if client_subnets is not None:
            pulumi.set(__self__, "client_subnets", client_subnets)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ext_intf is not None:
            pulumi.set(__self__, "ext_intf", ext_intf)
        if extip is not None:
            pulumi.set(__self__, "extip", extip)
        if extport is not None:
            pulumi.set(__self__, "extport", extport)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if intl_intfs is not None:
            pulumi.set(__self__, "intl_intfs", intl_intfs)
        if mapping_filter_limit is not None:
            pulumi.set(__self__, "mapping_filter_limit", mapping_filter_limit)
        if maximal_lifetime is not None:
            pulumi.set(__self__, "maximal_lifetime", maximal_lifetime)
        if minimal_lifetime is not None:
            pulumi.set(__self__, "minimal_lifetime", minimal_lifetime)
        if multicast_announcement is not None:
            pulumi.set(__self__, "multicast_announcement", multicast_announcement)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if recycle_delay is not None:
            pulumi.set(__self__, "recycle_delay", recycle_delay)
        if third_party is not None:
            pulumi.set(__self__, "third_party", third_party)
        if third_party_subnets is not None:
            pulumi.set(__self__, "third_party_subnets", third_party_subnets)

    @property
    @pulumi.getter(name="allowOpcode")
    def allow_opcode(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed PCP opcode. Valid values: `map`, `peer`, `announce`.
        """
        return pulumi.get(self, "allow_opcode")

    @allow_opcode.setter
    def allow_opcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_opcode", value)

    @property
    @pulumi.getter(name="announcementCount")
    def announcement_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of multicast announcements.
        """
        return pulumi.get(self, "announcement_count")

    @announcement_count.setter
    def announcement_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "announcement_count", value)

    @property
    @pulumi.getter(name="arpReply")
    def arp_reply(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to respond to ARP requests for external IP (default = enable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "arp_reply")

    @arp_reply.setter
    def arp_reply(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_reply", value)

    @property
    @pulumi.getter(name="clientMappingLimit")
    def client_mapping_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Mapping limit per client (0 - 65535, default = 0, 0 = unlimited).
        """
        return pulumi.get(self, "client_mapping_limit")

    @client_mapping_limit.setter
    def client_mapping_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_mapping_limit", value)

    @property
    @pulumi.getter(name="clientSubnets")
    def client_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PcpserverPoolClientSubnetArgs']]]]:
        """
        Subnets from which PCP requests are accepted. The structure of `client_subnet` block is documented below.
        """
        return pulumi.get(self, "client_subnets")

    @client_subnets.setter
    def client_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PcpserverPoolClientSubnetArgs']]]]):
        pulumi.set(self, "client_subnets", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="extIntf")
    def ext_intf(self) -> Optional[pulumi.Input[str]]:
        """
        External interface name.
        """
        return pulumi.get(self, "ext_intf")

    @ext_intf.setter
    def ext_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_intf", value)

    @property
    @pulumi.getter
    def extip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or address range on the external interface that you want to map to an address on the internal network.
        """
        return pulumi.get(self, "extip")

    @extip.setter
    def extip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extip", value)

    @property
    @pulumi.getter
    def extport(self) -> Optional[pulumi.Input[str]]:
        """
        Incoming port number range that you want to map to a port number on the internal network.
        """
        return pulumi.get(self, "extport")

    @extport.setter
    def extport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extport", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="intlIntfs")
    def intl_intfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PcpserverPoolIntlIntfArgs']]]]:
        """
        Internal interface name. The structure of `intl_intf` block is documented below.
        """
        return pulumi.get(self, "intl_intfs")

    @intl_intfs.setter
    def intl_intfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PcpserverPoolIntlIntfArgs']]]]):
        pulumi.set(self, "intl_intfs", value)

    @property
    @pulumi.getter(name="mappingFilterLimit")
    def mapping_filter_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Filter limit per mapping (0 - 5, default = 1).
        """
        return pulumi.get(self, "mapping_filter_limit")

    @mapping_filter_limit.setter
    def mapping_filter_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mapping_filter_limit", value)

    @property
    @pulumi.getter(name="maximalLifetime")
    def maximal_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        Maximal lifetime of a PCP mapping in seconds (3600 - 604800, default = 86400).
        """
        return pulumi.get(self, "maximal_lifetime")

    @maximal_lifetime.setter
    def maximal_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximal_lifetime", value)

    @property
    @pulumi.getter(name="minimalLifetime")
    def minimal_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        Minimal lifetime of a PCP mapping in seconds (60 - 300, default = 120).
        """
        return pulumi.get(self, "minimal_lifetime")

    @minimal_lifetime.setter
    def minimal_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimal_lifetime", value)

    @property
    @pulumi.getter(name="multicastAnnouncement")
    def multicast_announcement(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable multicast announcements. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "multicast_announcement")

    @multicast_announcement.setter
    def multicast_announcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_announcement", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        PCP pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="recycleDelay")
    def recycle_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum delay (in seconds) the PCP Server will wait before recycling mappings that have expired (0 - 3600, default = 0).
        """
        return pulumi.get(self, "recycle_delay")

    @recycle_delay.setter
    def recycle_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recycle_delay", value)

    @property
    @pulumi.getter(name="thirdParty")
    def third_party(self) -> Optional[pulumi.Input[str]]:
        """
        Allow/disallow third party option. Valid values: `allow`, `disallow`.
        """
        return pulumi.get(self, "third_party")

    @third_party.setter
    def third_party(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "third_party", value)

    @property
    @pulumi.getter(name="thirdPartySubnets")
    def third_party_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PcpserverPoolThirdPartySubnetArgs']]]]:
        """
        Subnets from which third party requests are accepted. The structure of `third_party_subnet` block is documented below.
        """
        return pulumi.get(self, "third_party_subnets")

    @third_party_subnets.setter
    def third_party_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PcpserverPoolThirdPartySubnetArgs']]]]):
        pulumi.set(self, "third_party_subnets", value)


@pulumi.input_type
class PcpserverPoolClientSubnetArgs:
    def __init__(__self__, *,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet: Client subnets.
        """
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Client subnets.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class PcpserverPoolIntlIntfArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class PcpserverPoolThirdPartySubnetArgs:
    def __init__(__self__, *,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet: Third party subnets.
        """
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Third party subnets.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class PtpServerInterfaceArgs:
    def __init__(__self__, *,
                 delay_mechanism: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 server_interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] delay_mechanism: End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] server_interface_name: Interface name.
        """
        if delay_mechanism is not None:
            pulumi.set(__self__, "delay_mechanism", delay_mechanism)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_interface_name is not None:
            pulumi.set(__self__, "server_interface_name", server_interface_name)

    @property
    @pulumi.getter(name="delayMechanism")
    def delay_mechanism(self) -> Optional[pulumi.Input[str]]:
        """
        End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
        """
        return pulumi.get(self, "delay_mechanism")

    @delay_mechanism.setter
    def delay_mechanism(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delay_mechanism", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="serverInterfaceName")
    def server_interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "server_interface_name")

    @server_interface_name.setter
    def server_interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_interface_name", value)


@pulumi.input_type
class ReplacemsggroupAdminArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupAlertmailArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupAuthArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupAutomationArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupCustomMessageArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupDeviceDetectionPortalArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupEcArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`, `wml`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`, `wml`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupFortiguardWfArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupFtpArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupHttpArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupIcapArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupMailArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupNacQuarArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupNntpArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupSpamArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupSslvpnArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupTrafficQuotaArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupUtmArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class ReplacemsggroupWebproxyArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SamlServiceProviderArgs:
    def __init__(__self__, *,
                 assertion_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['SamlServiceProviderAssertionAttributeArgs']]]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 sp_binding_protocol: Optional[pulumi.Input[str]] = None,
                 sp_cert: Optional[pulumi.Input[str]] = None,
                 sp_entity_id: Optional[pulumi.Input[str]] = None,
                 sp_portal_url: Optional[pulumi.Input[str]] = None,
                 sp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 sp_single_sign_on_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SamlServiceProviderAssertionAttributeArgs']]] assertion_attributes: Customized SAML attributes to send along with assertion. The structure of `assertion_attributes` block is documented below.
        :param pulumi.Input[str] idp_entity_id: IDP entity ID.
        :param pulumi.Input[str] idp_single_logout_url: IDP single logout URL.
        :param pulumi.Input[str] idp_single_sign_on_url: IDP single sign-on URL.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] prefix: Prefix.
        :param pulumi.Input[str] sp_binding_protocol: SP binding protocol. Valid values: `post`, `redirect`.
        :param pulumi.Input[str] sp_cert: SP certificate name.
        :param pulumi.Input[str] sp_entity_id: SP entity ID.
        :param pulumi.Input[str] sp_portal_url: SP portal URL.
        :param pulumi.Input[str] sp_single_logout_url: SP single logout URL.
        :param pulumi.Input[str] sp_single_sign_on_url: SP single sign-on URL.
        """
        if assertion_attributes is not None:
            pulumi.set(__self__, "assertion_attributes", assertion_attributes)
        if idp_entity_id is not None:
            pulumi.set(__self__, "idp_entity_id", idp_entity_id)
        if idp_single_logout_url is not None:
            pulumi.set(__self__, "idp_single_logout_url", idp_single_logout_url)
        if idp_single_sign_on_url is not None:
            pulumi.set(__self__, "idp_single_sign_on_url", idp_single_sign_on_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if sp_binding_protocol is not None:
            pulumi.set(__self__, "sp_binding_protocol", sp_binding_protocol)
        if sp_cert is not None:
            pulumi.set(__self__, "sp_cert", sp_cert)
        if sp_entity_id is not None:
            pulumi.set(__self__, "sp_entity_id", sp_entity_id)
        if sp_portal_url is not None:
            pulumi.set(__self__, "sp_portal_url", sp_portal_url)
        if sp_single_logout_url is not None:
            pulumi.set(__self__, "sp_single_logout_url", sp_single_logout_url)
        if sp_single_sign_on_url is not None:
            pulumi.set(__self__, "sp_single_sign_on_url", sp_single_sign_on_url)

    @property
    @pulumi.getter(name="assertionAttributes")
    def assertion_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SamlServiceProviderAssertionAttributeArgs']]]]:
        """
        Customized SAML attributes to send along with assertion. The structure of `assertion_attributes` block is documented below.
        """
        return pulumi.get(self, "assertion_attributes")

    @assertion_attributes.setter
    def assertion_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SamlServiceProviderAssertionAttributeArgs']]]]):
        pulumi.set(self, "assertion_attributes", value)

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        IDP entity ID.
        """
        return pulumi.get(self, "idp_entity_id")

    @idp_entity_id.setter
    def idp_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_entity_id", value)

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        IDP single logout URL.
        """
        return pulumi.get(self, "idp_single_logout_url")

    @idp_single_logout_url.setter
    def idp_single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_logout_url", value)

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        """
        IDP single sign-on URL.
        """
        return pulumi.get(self, "idp_single_sign_on_url")

    @idp_single_sign_on_url.setter
    def idp_single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_sign_on_url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="spBindingProtocol")
    def sp_binding_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        SP binding protocol. Valid values: `post`, `redirect`.
        """
        return pulumi.get(self, "sp_binding_protocol")

    @sp_binding_protocol.setter
    def sp_binding_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_binding_protocol", value)

    @property
    @pulumi.getter(name="spCert")
    def sp_cert(self) -> Optional[pulumi.Input[str]]:
        """
        SP certificate name.
        """
        return pulumi.get(self, "sp_cert")

    @sp_cert.setter
    def sp_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_cert", value)

    @property
    @pulumi.getter(name="spEntityId")
    def sp_entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        SP entity ID.
        """
        return pulumi.get(self, "sp_entity_id")

    @sp_entity_id.setter
    def sp_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_entity_id", value)

    @property
    @pulumi.getter(name="spPortalUrl")
    def sp_portal_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP portal URL.
        """
        return pulumi.get(self, "sp_portal_url")

    @sp_portal_url.setter
    def sp_portal_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_portal_url", value)

    @property
    @pulumi.getter(name="spSingleLogoutUrl")
    def sp_single_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP single logout URL.
        """
        return pulumi.get(self, "sp_single_logout_url")

    @sp_single_logout_url.setter
    def sp_single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_single_logout_url", value)

    @property
    @pulumi.getter(name="spSingleSignOnUrl")
    def sp_single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP single sign-on URL.
        """
        return pulumi.get(self, "sp_single_sign_on_url")

    @sp_single_sign_on_url.setter
    def sp_single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_single_sign_on_url", value)


@pulumi.input_type
class SamlServiceProviderAssertionAttributeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] type: Type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SdnconnectorCompartmentListArgs:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] compartment_id: OCI compartment ID.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        OCI compartment ID.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)


@pulumi.input_type
class SdnconnectorExternalAccountListArgs:
    def __init__(__self__, *,
                 external_id: Optional[pulumi.Input[str]] = None,
                 region_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalAccountListRegionListArgs']]]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] external_id: AWS external ID.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalAccountListRegionListArgs']]] region_lists: AWS region name list. The structure of `region_list` block is documented below.
        :param pulumi.Input[str] role_arn: AWS role ARN to assume.
        """
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if region_lists is not None:
            pulumi.set(__self__, "region_lists", region_lists)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        AWS external ID.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="regionLists")
    def region_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalAccountListRegionListArgs']]]]:
        """
        AWS region name list. The structure of `region_list` block is documented below.
        """
        return pulumi.get(self, "region_lists")

    @region_lists.setter
    def region_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorExternalAccountListRegionListArgs']]]]):
        pulumi.set(self, "region_lists", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        AWS role ARN to assume.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class SdnconnectorExternalAccountListRegionListArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] region: AWS region name.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        AWS region name.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class SdnconnectorExternalIpArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: External IP name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        External IP name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdnconnectorForwardingRuleArgs:
    def __init__(__self__, *,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] rule_name: Forwarding rule name.
        :param pulumi.Input[str] target: Target instance name.
        """
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        Forwarding rule name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Target instance name.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class SdnconnectorGcpProjectListArgs:
    def __init__(__self__, *,
                 gcp_zone_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorGcpProjectListGcpZoneListArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorGcpProjectListGcpZoneListArgs']]] gcp_zone_lists: Configure GCP zone list. The structure of `gcp_zone_list` block is documented below.
        :param pulumi.Input[str] id: GCP project ID.
        """
        if gcp_zone_lists is not None:
            pulumi.set(__self__, "gcp_zone_lists", gcp_zone_lists)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="gcpZoneLists")
    def gcp_zone_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorGcpProjectListGcpZoneListArgs']]]]:
        """
        Configure GCP zone list. The structure of `gcp_zone_list` block is documented below.
        """
        return pulumi.get(self, "gcp_zone_lists")

    @gcp_zone_lists.setter
    def gcp_zone_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorGcpProjectListGcpZoneListArgs']]]]):
        pulumi.set(self, "gcp_zone_lists", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        GCP project ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SdnconnectorGcpProjectListGcpZoneListArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: GCP zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        GCP zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdnconnectorNicArgs:
    def __init__(__self__, *,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorNicIpArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorNicIpArgs']]] ips: Configure IP configuration. The structure of `ip` block is documented below.
        :param pulumi.Input[str] name: Network interface name.
        """
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorNicIpArgs']]]]:
        """
        Configure IP configuration. The structure of `ip` block is documented below.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorNicIpArgs']]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Network interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdnconnectorNicIpArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IP configuration name.
        :param pulumi.Input[str] public_ip: Public IP name.
        :param pulumi.Input[str] resource_group: Resource group of Azure public IP.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IP configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Public IP name.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Resource group of Azure public IP.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)


@pulumi.input_type
class SdnconnectorOciRegionListArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] region: OCI region.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        OCI region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class SdnconnectorRouteArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Route name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Route name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdnconnectorRouteTableArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteTableRouteArgs']]]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Route table name.
        :param pulumi.Input[str] resource_group: Resource group of Azure route table.
        :param pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteTableRouteArgs']]] routes: Configure Azure route. The structure of `route` block is documented below.
        :param pulumi.Input[str] subscription_id: Subscription ID of Azure route table.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Route table name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Resource group of Azure route table.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteTableRouteArgs']]]]:
        """
        Configure Azure route. The structure of `route` block is documented below.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdnconnectorRouteTableRouteArgs']]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subscription ID of Azure route table.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)


@pulumi.input_type
class SdnconnectorRouteTableRouteArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 next_hop: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Route name.
        :param pulumi.Input[str] next_hop: Next hop address.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Route name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[pulumi.Input[str]]:
        """
        Next hop address.
        """
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop", value)


@pulumi.input_type
class SdnconnectorServerListArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip: IPv4 address.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SdwanDuplicationArgs:
    def __init__(__self__, *,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationDstaddr6Args']]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationDstaddrArgs']]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationDstintfArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 packet_de_duplication: Optional[pulumi.Input[str]] = None,
                 packet_duplication: Optional[pulumi.Input[str]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationServiceIdArgs']]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationServiceArgs']]]] = None,
                 sla_match_service: Optional[pulumi.Input[str]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationSrcaddr6Args']]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationSrcaddrArgs']]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationSrcintfArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationDstaddr6Args']]] dstaddr6s: Destination address6 or address6 group names. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationDstaddrArgs']]] dstaddrs: Destination address or address group names. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationDstintfArgs']]] dstintfs: Outgoing (egress) interfaces or zones. The structure of `dstintf` block is documented below.
        :param pulumi.Input[int] id: Duplication rule ID (1 - 255).
        :param pulumi.Input[str] packet_de_duplication: Enable/disable discarding of packets that have been duplicated. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] packet_duplication: Configure packet duplication method. Valid values: `disable`, `force`, `on-demand`.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationServiceIdArgs']]] service_ids: SD-WAN service rule ID list. The structure of `service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationServiceArgs']]] services: Service and service group name. The structure of `service` block is documented below.
        :param pulumi.Input[str] sla_match_service: Enable/disable packet duplication matching health-check SLAs in service rule. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationSrcaddr6Args']]] srcaddr6s: Source address6 or address6 group names. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationSrcaddrArgs']]] srcaddrs: Source address or address group names. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationSrcintfArgs']]] srcintfs: Incoming (ingress) interfaces or zones. The structure of `srcintf` block is documented below.
        """
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if packet_de_duplication is not None:
            pulumi.set(__self__, "packet_de_duplication", packet_de_duplication)
        if packet_duplication is not None:
            pulumi.set(__self__, "packet_duplication", packet_duplication)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if sla_match_service is not None:
            pulumi.set(__self__, "sla_match_service", sla_match_service)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationDstaddr6Args']]]]:
        """
        Destination address6 or address6 group names. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationDstaddrArgs']]]]:
        """
        Destination address or address group names. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationDstintfArgs']]]]:
        """
        Outgoing (egress) interfaces or zones. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationDstintfArgs']]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Duplication rule ID (1 - 255).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="packetDeDuplication")
    def packet_de_duplication(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable discarding of packets that have been duplicated. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "packet_de_duplication")

    @packet_de_duplication.setter
    def packet_de_duplication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_de_duplication", value)

    @property
    @pulumi.getter(name="packetDuplication")
    def packet_duplication(self) -> Optional[pulumi.Input[str]]:
        """
        Configure packet duplication method. Valid values: `disable`, `force`, `on-demand`.
        """
        return pulumi.get(self, "packet_duplication")

    @packet_duplication.setter
    def packet_duplication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_duplication", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationServiceIdArgs']]]]:
        """
        SD-WAN service rule ID list. The structure of `service_id` block is documented below.
        """
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationServiceIdArgs']]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationServiceArgs']]]]:
        """
        Service and service group name. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="slaMatchService")
    def sla_match_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable packet duplication matching health-check SLAs in service rule. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sla_match_service")

    @sla_match_service.setter
    def sla_match_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_match_service", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationSrcaddr6Args']]]]:
        """
        Source address6 or address6 group names. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationSrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationSrcaddrArgs']]]]:
        """
        Source address or address group names. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationSrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationSrcintfArgs']]]]:
        """
        Incoming (ingress) interfaces or zones. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanDuplicationSrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)


@pulumi.input_type
class SdwanDuplicationDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanDuplicationDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address6 or address6 group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address6 or address6 group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanDuplicationDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface, zone or SDWAN zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface, zone or SDWAN zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanDuplicationServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanDuplicationServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: SD-WAN service rule ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SD-WAN service rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SdwanDuplicationSrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanDuplicationSrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanDuplicationSrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface, zone or SDWAN zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface, zone or SDWAN zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanFailAlertInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Physical interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanHealthCheckArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 class_id: Optional[pulumi.Input[int]] = None,
                 detect_mode: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dns_match_ip: Optional[pulumi.Input[str]] = None,
                 dns_request_domain: Optional[pulumi.Input[str]] = None,
                 embed_measured_health: Optional[pulumi.Input[str]] = None,
                 failtime: Optional[pulumi.Input[int]] = None,
                 ftp_file: Optional[pulumi.Input[str]] = None,
                 ftp_mode: Optional[pulumi.Input[str]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 http_agent: Optional[pulumi.Input[str]] = None,
                 http_get: Optional[pulumi.Input[str]] = None,
                 http_match: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckMemberArgs']]]] = None,
                 mos_codec: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_size: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 probe_count: Optional[pulumi.Input[int]] = None,
                 probe_packets: Optional[pulumi.Input[str]] = None,
                 probe_timeout: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 quality_measured_method: Optional[pulumi.Input[str]] = None,
                 recoverytime: Optional[pulumi.Input[int]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 sla_fail_log_period: Optional[pulumi.Input[int]] = None,
                 sla_id_redistribute: Optional[pulumi.Input[int]] = None,
                 sla_pass_log_period: Optional[pulumi.Input[int]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckSlaArgs']]]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source6: Optional[pulumi.Input[str]] = None,
                 system_dns: Optional[pulumi.Input[str]] = None,
                 threshold_alert_jitter: Optional[pulumi.Input[int]] = None,
                 threshold_alert_latency: Optional[pulumi.Input[int]] = None,
                 threshold_alert_packetloss: Optional[pulumi.Input[int]] = None,
                 threshold_warning_jitter: Optional[pulumi.Input[int]] = None,
                 threshold_warning_latency: Optional[pulumi.Input[int]] = None,
                 threshold_warning_packetloss: Optional[pulumi.Input[int]] = None,
                 update_cascade_interface: Optional[pulumi.Input[str]] = None,
                 update_static_route: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[int] class_id: Traffic class ID.
        :param pulumi.Input[str] detect_mode: The mode determining how to detect the server.
        :param pulumi.Input[str] diffservcode: Differentiated services code point (DSCP) in the IP header of the probe packet.
        :param pulumi.Input[str] dns_match_ip: Response IP expected from DNS server if the protocol is DNS.
        :param pulumi.Input[str] dns_request_domain: Fully qualified domain name to resolve for the DNS probe.
        :param pulumi.Input[str] embed_measured_health: Enable/disable embedding measured health information. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] failtime: Number of failures before server is considered lost (1 - 3600, default = 5).
        :param pulumi.Input[str] ftp_file: Full path and file name on the FTP server to download for FTP health-check to probe.
        :param pulumi.Input[str] ftp_mode: FTP mode. Valid values: `passive`, `port`.
        :param pulumi.Input[int] ha_priority: HA election priority (1 - 50).
        :param pulumi.Input[str] http_agent: String in the http-agent field in the HTTP header.
        :param pulumi.Input[str] http_get: URL used to communicate with the server if the protocol if the protocol is HTTP.
        :param pulumi.Input[str] http_match: Response string expected from the server if the protocol is HTTP.
        :param pulumi.Input[int] interval: Status check interval in milliseconds, or the time between attempting to connect to the server (500 - 3600*1000 msec, default = 500).
        :param pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckMemberArgs']]] members: Member sequence number list. The structure of `members` block is documented below.
        :param pulumi.Input[str] mos_codec: Codec to use for MOS calculation (default = g711). Valid values: `g711`, `g722`, `g729`.
        :param pulumi.Input[str] name: Health check name.
        :param pulumi.Input[int] packet_size: Packet size of a twamp test session,
        :param pulumi.Input[str] password: Twamp controller password in authentication mode
        :param pulumi.Input[int] port: Port number used to communicate with the server over the selected protocol (0-65535, default = 0, auto select. http, twamp: 80, udp-echo, tcp-echo: 7, dns: 53, ftp: 21).
        :param pulumi.Input[int] probe_count: Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        :param pulumi.Input[str] probe_packets: Enable/disable transmission of probe packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] probe_timeout: Time to wait before a probe packet is considered lost (500 - 3600*1000 msec, default = 500).
        :param pulumi.Input[str] protocol: Protocol used to determine if the FortiGate can communicate with the server.
        :param pulumi.Input[str] quality_measured_method: Method to measure the quality of tcp-connect. Valid values: `half-open`, `half-close`.
        :param pulumi.Input[int] recoverytime: Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
        :param pulumi.Input[str] security_mode: Twamp controller security mode. Valid values: `none`, `authentication`.
        :param pulumi.Input[str] server: IP address or FQDN name of the server.
        :param pulumi.Input[int] sla_fail_log_period: Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
        :param pulumi.Input[int] sla_id_redistribute: Select the ID from the SLA sub-table. The selected SLA's priority value will be distributed into the routing table (0 - 32, default = 0).
        :param pulumi.Input[int] sla_pass_log_period: Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
        :param pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckSlaArgs']]] slas: Service level agreement (SLA). The structure of `sla` block is documented below.
        :param pulumi.Input[str] source: Source IP address used in the health-check packet to the server.
        :param pulumi.Input[str] source6: Source IPv6 addressused in the health-check packet to server.
        :param pulumi.Input[str] system_dns: Enable/disable system DNS as the probe server. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] threshold_alert_jitter: Alert threshold for jitter (ms, default = 0).
        :param pulumi.Input[int] threshold_alert_latency: Alert threshold for latency (ms, default = 0).
        :param pulumi.Input[int] threshold_alert_packetloss: Alert threshold for packet loss (percentage, default = 0).
        :param pulumi.Input[int] threshold_warning_jitter: Warning threshold for jitter (ms, default = 0).
        :param pulumi.Input[int] threshold_warning_latency: Warning threshold for latency (ms, default = 0).
        :param pulumi.Input[int] threshold_warning_packetloss: Warning threshold for packet loss (percentage, default = 0).
        :param pulumi.Input[str] update_cascade_interface: Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_static_route: Enable/disable updating the static route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] user: The user name to access probe server.
        :param pulumi.Input[int] vrf: Virtual Routing Forwarding ID.
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if class_id is not None:
            pulumi.set(__self__, "class_id", class_id)
        if detect_mode is not None:
            pulumi.set(__self__, "detect_mode", detect_mode)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dns_match_ip is not None:
            pulumi.set(__self__, "dns_match_ip", dns_match_ip)
        if dns_request_domain is not None:
            pulumi.set(__self__, "dns_request_domain", dns_request_domain)
        if embed_measured_health is not None:
            pulumi.set(__self__, "embed_measured_health", embed_measured_health)
        if failtime is not None:
            pulumi.set(__self__, "failtime", failtime)
        if ftp_file is not None:
            pulumi.set(__self__, "ftp_file", ftp_file)
        if ftp_mode is not None:
            pulumi.set(__self__, "ftp_mode", ftp_mode)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if http_agent is not None:
            pulumi.set(__self__, "http_agent", http_agent)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if http_match is not None:
            pulumi.set(__self__, "http_match", http_match)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if mos_codec is not None:
            pulumi.set(__self__, "mos_codec", mos_codec)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_size is not None:
            pulumi.set(__self__, "packet_size", packet_size)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if probe_count is not None:
            pulumi.set(__self__, "probe_count", probe_count)
        if probe_packets is not None:
            pulumi.set(__self__, "probe_packets", probe_packets)
        if probe_timeout is not None:
            pulumi.set(__self__, "probe_timeout", probe_timeout)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_measured_method is not None:
            pulumi.set(__self__, "quality_measured_method", quality_measured_method)
        if recoverytime is not None:
            pulumi.set(__self__, "recoverytime", recoverytime)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if sla_fail_log_period is not None:
            pulumi.set(__self__, "sla_fail_log_period", sla_fail_log_period)
        if sla_id_redistribute is not None:
            pulumi.set(__self__, "sla_id_redistribute", sla_id_redistribute)
        if sla_pass_log_period is not None:
            pulumi.set(__self__, "sla_pass_log_period", sla_pass_log_period)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source6 is not None:
            pulumi.set(__self__, "source6", source6)
        if system_dns is not None:
            pulumi.set(__self__, "system_dns", system_dns)
        if threshold_alert_jitter is not None:
            pulumi.set(__self__, "threshold_alert_jitter", threshold_alert_jitter)
        if threshold_alert_latency is not None:
            pulumi.set(__self__, "threshold_alert_latency", threshold_alert_latency)
        if threshold_alert_packetloss is not None:
            pulumi.set(__self__, "threshold_alert_packetloss", threshold_alert_packetloss)
        if threshold_warning_jitter is not None:
            pulumi.set(__self__, "threshold_warning_jitter", threshold_warning_jitter)
        if threshold_warning_latency is not None:
            pulumi.set(__self__, "threshold_warning_latency", threshold_warning_latency)
        if threshold_warning_packetloss is not None:
            pulumi.set(__self__, "threshold_warning_packetloss", threshold_warning_packetloss)
        if update_cascade_interface is not None:
            pulumi.set(__self__, "update_cascade_interface", update_cascade_interface)
        if update_static_route is not None:
            pulumi.set(__self__, "update_static_route", update_static_route)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> Optional[pulumi.Input[int]]:
        """
        Traffic class ID.
        """
        return pulumi.get(self, "class_id")

    @class_id.setter
    def class_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "class_id", value)

    @property
    @pulumi.getter(name="detectMode")
    def detect_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The mode determining how to detect the server.
        """
        return pulumi.get(self, "detect_mode")

    @detect_mode.setter
    def detect_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detect_mode", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        """
        Differentiated services code point (DSCP) in the IP header of the probe packet.
        """
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dnsMatchIp")
    def dns_match_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Response IP expected from DNS server if the protocol is DNS.
        """
        return pulumi.get(self, "dns_match_ip")

    @dns_match_ip.setter
    def dns_match_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_match_ip", value)

    @property
    @pulumi.getter(name="dnsRequestDomain")
    def dns_request_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified domain name to resolve for the DNS probe.
        """
        return pulumi.get(self, "dns_request_domain")

    @dns_request_domain.setter
    def dns_request_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_request_domain", value)

    @property
    @pulumi.getter(name="embedMeasuredHealth")
    def embed_measured_health(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable embedding measured health information. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "embed_measured_health")

    @embed_measured_health.setter
    def embed_measured_health(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "embed_measured_health", value)

    @property
    @pulumi.getter
    def failtime(self) -> Optional[pulumi.Input[int]]:
        """
        Number of failures before server is considered lost (1 - 3600, default = 5).
        """
        return pulumi.get(self, "failtime")

    @failtime.setter
    def failtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failtime", value)

    @property
    @pulumi.getter(name="ftpFile")
    def ftp_file(self) -> Optional[pulumi.Input[str]]:
        """
        Full path and file name on the FTP server to download for FTP health-check to probe.
        """
        return pulumi.get(self, "ftp_file")

    @ftp_file.setter
    def ftp_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_file", value)

    @property
    @pulumi.getter(name="ftpMode")
    def ftp_mode(self) -> Optional[pulumi.Input[str]]:
        """
        FTP mode. Valid values: `passive`, `port`.
        """
        return pulumi.get(self, "ftp_mode")

    @ftp_mode.setter
    def ftp_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_mode", value)

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[pulumi.Input[int]]:
        """
        HA election priority (1 - 50).
        """
        return pulumi.get(self, "ha_priority")

    @ha_priority.setter
    def ha_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_priority", value)

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> Optional[pulumi.Input[str]]:
        """
        String in the http-agent field in the HTTP header.
        """
        return pulumi.get(self, "http_agent")

    @http_agent.setter
    def http_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_agent", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input[str]]:
        """
        URL used to communicate with the server if the protocol if the protocol is HTTP.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> Optional[pulumi.Input[str]]:
        """
        Response string expected from the server if the protocol is HTTP.
        """
        return pulumi.get(self, "http_match")

    @http_match.setter
    def http_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_match", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Status check interval in milliseconds, or the time between attempting to connect to the server (500 - 3600*1000 msec, default = 500).
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckMemberArgs']]]]:
        """
        Member sequence number list. The structure of `members` block is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="mosCodec")
    def mos_codec(self) -> Optional[pulumi.Input[str]]:
        """
        Codec to use for MOS calculation (default = g711). Valid values: `g711`, `g722`, `g729`.
        """
        return pulumi.get(self, "mos_codec")

    @mos_codec.setter
    def mos_codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mos_codec", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Health check name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> Optional[pulumi.Input[int]]:
        """
        Packet size of a twamp test session,
        """
        return pulumi.get(self, "packet_size")

    @packet_size.setter
    def packet_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_size", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Twamp controller password in authentication mode
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number used to communicate with the server over the selected protocol (0-65535, default = 0, auto select. http, twamp: 80, udp-echo, tcp-echo: 7, dns: 53, ftp: 21).
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        """
        return pulumi.get(self, "probe_count")

    @probe_count.setter
    def probe_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_count", value)

    @property
    @pulumi.getter(name="probePackets")
    def probe_packets(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable transmission of probe packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "probe_packets")

    @probe_packets.setter
    def probe_packets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probe_packets", value)

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait before a probe packet is considered lost (500 - 3600*1000 msec, default = 500).
        """
        return pulumi.get(self, "probe_timeout")

    @probe_timeout.setter
    def probe_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_timeout", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol used to determine if the FortiGate can communicate with the server.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="qualityMeasuredMethod")
    def quality_measured_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method to measure the quality of tcp-connect. Valid values: `half-open`, `half-close`.
        """
        return pulumi.get(self, "quality_measured_method")

    @quality_measured_method.setter
    def quality_measured_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quality_measured_method", value)

    @property
    @pulumi.getter
    def recoverytime(self) -> Optional[pulumi.Input[int]]:
        """
        Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
        """
        return pulumi.get(self, "recoverytime")

    @recoverytime.setter
    def recoverytime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recoverytime", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Twamp controller security mode. Valid values: `none`, `authentication`.
        """
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or FQDN name of the server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="slaFailLogPeriod")
    def sla_fail_log_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "sla_fail_log_period")

    @sla_fail_log_period.setter
    def sla_fail_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_fail_log_period", value)

    @property
    @pulumi.getter(name="slaIdRedistribute")
    def sla_id_redistribute(self) -> Optional[pulumi.Input[int]]:
        """
        Select the ID from the SLA sub-table. The selected SLA's priority value will be distributed into the routing table (0 - 32, default = 0).
        """
        return pulumi.get(self, "sla_id_redistribute")

    @sla_id_redistribute.setter
    def sla_id_redistribute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_id_redistribute", value)

    @property
    @pulumi.getter(name="slaPassLogPeriod")
    def sla_pass_log_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "sla_pass_log_period")

    @sla_pass_log_period.setter
    def sla_pass_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_pass_log_period", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckSlaArgs']]]]:
        """
        Service level agreement (SLA). The structure of `sla` block is documented below.
        """
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanHealthCheckSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def source6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 addressused in the health-check packet to server.
        """
        return pulumi.get(self, "source6")

    @source6.setter
    def source6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source6", value)

    @property
    @pulumi.getter(name="systemDns")
    def system_dns(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable system DNS as the probe server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "system_dns")

    @system_dns.setter
    def system_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_dns", value)

    @property
    @pulumi.getter(name="thresholdAlertJitter")
    def threshold_alert_jitter(self) -> Optional[pulumi.Input[int]]:
        """
        Alert threshold for jitter (ms, default = 0).
        """
        return pulumi.get(self, "threshold_alert_jitter")

    @threshold_alert_jitter.setter
    def threshold_alert_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_jitter", value)

    @property
    @pulumi.getter(name="thresholdAlertLatency")
    def threshold_alert_latency(self) -> Optional[pulumi.Input[int]]:
        """
        Alert threshold for latency (ms, default = 0).
        """
        return pulumi.get(self, "threshold_alert_latency")

    @threshold_alert_latency.setter
    def threshold_alert_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_latency", value)

    @property
    @pulumi.getter(name="thresholdAlertPacketloss")
    def threshold_alert_packetloss(self) -> Optional[pulumi.Input[int]]:
        """
        Alert threshold for packet loss (percentage, default = 0).
        """
        return pulumi.get(self, "threshold_alert_packetloss")

    @threshold_alert_packetloss.setter
    def threshold_alert_packetloss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_packetloss", value)

    @property
    @pulumi.getter(name="thresholdWarningJitter")
    def threshold_warning_jitter(self) -> Optional[pulumi.Input[int]]:
        """
        Warning threshold for jitter (ms, default = 0).
        """
        return pulumi.get(self, "threshold_warning_jitter")

    @threshold_warning_jitter.setter
    def threshold_warning_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_jitter", value)

    @property
    @pulumi.getter(name="thresholdWarningLatency")
    def threshold_warning_latency(self) -> Optional[pulumi.Input[int]]:
        """
        Warning threshold for latency (ms, default = 0).
        """
        return pulumi.get(self, "threshold_warning_latency")

    @threshold_warning_latency.setter
    def threshold_warning_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_latency", value)

    @property
    @pulumi.getter(name="thresholdWarningPacketloss")
    def threshold_warning_packetloss(self) -> Optional[pulumi.Input[int]]:
        """
        Warning threshold for packet loss (percentage, default = 0).
        """
        return pulumi.get(self, "threshold_warning_packetloss")

    @threshold_warning_packetloss.setter
    def threshold_warning_packetloss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_packetloss", value)

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_cascade_interface")

    @update_cascade_interface.setter
    def update_cascade_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_cascade_interface", value)

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable updating the static route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_static_route")

    @update_static_route.setter
    def update_static_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_static_route", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        The user name to access probe server.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[int]]:
        """
        Virtual Routing Forwarding ID.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class SdwanHealthCheckMemberArgs:
    def __init__(__self__, *,
                 seq_num: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] seq_num: Member sequence number.
        """
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class SdwanHealthCheckSlaArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 jitter_threshold: Optional[pulumi.Input[int]] = None,
                 latency_threshold: Optional[pulumi.Input[int]] = None,
                 link_cost_factor: Optional[pulumi.Input[str]] = None,
                 mos_threshold: Optional[pulumi.Input[str]] = None,
                 packetloss_threshold: Optional[pulumi.Input[int]] = None,
                 priority_in_sla: Optional[pulumi.Input[int]] = None,
                 priority_out_sla: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: SLA ID.
        :param pulumi.Input[int] jitter_threshold: Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        :param pulumi.Input[int] latency_threshold: Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        :param pulumi.Input[str] link_cost_factor: Criteria on which to base link selection.
        :param pulumi.Input[str] mos_threshold: Minimum Mean Opinion Score for SLA to be marked as pass. (1.0 - 5.0, default = 3.6).
        :param pulumi.Input[int] packetloss_threshold: Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
        :param pulumi.Input[int] priority_in_sla: Value to be distributed into routing table when in-sla (0 - 65535, default = 0).
        :param pulumi.Input[int] priority_out_sla: Value to be distributed into routing table when out-sla (0 - 65535, default = 0).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if jitter_threshold is not None:
            pulumi.set(__self__, "jitter_threshold", jitter_threshold)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if mos_threshold is not None:
            pulumi.set(__self__, "mos_threshold", mos_threshold)
        if packetloss_threshold is not None:
            pulumi.set(__self__, "packetloss_threshold", packetloss_threshold)
        if priority_in_sla is not None:
            pulumi.set(__self__, "priority_in_sla", priority_in_sla)
        if priority_out_sla is not None:
            pulumi.set(__self__, "priority_out_sla", priority_out_sla)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="jitterThreshold")
    def jitter_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        """
        return pulumi.get(self, "jitter_threshold")

    @jitter_threshold.setter
    def jitter_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jitter_threshold", value)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        """
        return pulumi.get(self, "latency_threshold")

    @latency_threshold.setter
    def latency_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_threshold", value)

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Criteria on which to base link selection.
        """
        return pulumi.get(self, "link_cost_factor")

    @link_cost_factor.setter
    def link_cost_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_cost_factor", value)

    @property
    @pulumi.getter(name="mosThreshold")
    def mos_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum Mean Opinion Score for SLA to be marked as pass. (1.0 - 5.0, default = 3.6).
        """
        return pulumi.get(self, "mos_threshold")

    @mos_threshold.setter
    def mos_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mos_threshold", value)

    @property
    @pulumi.getter(name="packetlossThreshold")
    def packetloss_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
        """
        return pulumi.get(self, "packetloss_threshold")

    @packetloss_threshold.setter
    def packetloss_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packetloss_threshold", value)

    @property
    @pulumi.getter(name="priorityInSla")
    def priority_in_sla(self) -> Optional[pulumi.Input[int]]:
        """
        Value to be distributed into routing table when in-sla (0 - 65535, default = 0).
        """
        return pulumi.get(self, "priority_in_sla")

    @priority_in_sla.setter
    def priority_in_sla(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority_in_sla", value)

    @property
    @pulumi.getter(name="priorityOutSla")
    def priority_out_sla(self) -> Optional[pulumi.Input[int]]:
        """
        Value to be distributed into routing table when out-sla (0 - 65535, default = 0).
        """
        return pulumi.get(self, "priority_out_sla")

    @priority_out_sla.setter
    def priority_out_sla(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority_out_sla", value)


@pulumi.input_type
class SdwanMemberArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 ingress_spillover_threshold: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 preferred_source: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 priority6: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source6: Optional[pulumi.Input[str]] = None,
                 spillover_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transport_group: Optional[pulumi.Input[int]] = None,
                 volume_ratio: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comment: Comments.
        :param pulumi.Input[int] cost: Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
        :param pulumi.Input[str] gateway: The default gateway for this interface. Usually the default gateway of the Internet service provider that this interface is connected to.
        :param pulumi.Input[str] gateway6: IPv6 gateway.
        :param pulumi.Input[int] ingress_spillover_threshold: Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] preferred_source: Preferred source of route for this member.
        :param pulumi.Input[int] priority: Priority of the interface (0 - 65535). Used for SD-WAN rules or priority rules.
        :param pulumi.Input[int] priority6: Priority of the interface for IPv6 (1 - 65535, default = 1024). Used for SD-WAN rules or priority rules.
        :param pulumi.Input[int] seq_num: Member sequence number.
        :param pulumi.Input[str] source: Source IP address used in the health-check packet to the server.
        :param pulumi.Input[str] source6: Source IPv6 address used in the health-check packet to the server.
        :param pulumi.Input[int] spillover_threshold: Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        :param pulumi.Input[str] status: Enable/disable this interface in the SD-WAN. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] transport_group: Measured transport group (0 - 255).
        :param pulumi.Input[int] volume_ratio: Measured volume ratio (this value / sum of all values = percentage of link volume, 1 - 255).
        :param pulumi.Input[int] weight: Weight of this interface for weighted load balancing. (1 - 255) More traffic is directed to interfaces with higher weights.
        :param pulumi.Input[str] zone: Zone name.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ingress_spillover_threshold is not None:
            pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if preferred_source is not None:
            pulumi.set(__self__, "preferred_source", preferred_source)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority6 is not None:
            pulumi.set(__self__, "priority6", priority6)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source6 is not None:
            pulumi.set(__self__, "source6", source6)
        if spillover_threshold is not None:
            pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transport_group is not None:
            pulumi.set(__self__, "transport_group", transport_group)
        if volume_ratio is not None:
            pulumi.set(__self__, "volume_ratio", volume_ratio)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The default gateway for this interface. Usually the default gateway of the Internet service provider that this interface is connected to.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 gateway.
        """
        return pulumi.get(self, "gateway6")

    @gateway6.setter
    def gateway6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway6", value)

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        """
        return pulumi.get(self, "ingress_spillover_threshold")

    @ingress_spillover_threshold.setter
    def ingress_spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ingress_spillover_threshold", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="preferredSource")
    def preferred_source(self) -> Optional[pulumi.Input[str]]:
        """
        Preferred source of route for this member.
        """
        return pulumi.get(self, "preferred_source")

    @preferred_source.setter
    def preferred_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_source", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the interface (0 - 65535). Used for SD-WAN rules or priority rules.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def priority6(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the interface for IPv6 (1 - 65535, default = 1024). Used for SD-WAN rules or priority rules.
        """
        return pulumi.get(self, "priority6")

    @priority6.setter
    def priority6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority6", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def source6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source6")

    @source6.setter
    def source6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source6", value)

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        """
        return pulumi.get(self, "spillover_threshold")

    @spillover_threshold.setter
    def spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spillover_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this interface in the SD-WAN. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="transportGroup")
    def transport_group(self) -> Optional[pulumi.Input[int]]:
        """
        Measured transport group (0 - 255).
        """
        return pulumi.get(self, "transport_group")

    @transport_group.setter
    def transport_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transport_group", value)

    @property
    @pulumi.getter(name="volumeRatio")
    def volume_ratio(self) -> Optional[pulumi.Input[int]]:
        """
        Measured volume ratio (this value / sum of all values = percentage of link volume, 1 - 255).
        """
        return pulumi.get(self, "volume_ratio")

    @volume_ratio.setter
    def volume_ratio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_ratio", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of this interface for weighted load balancing. (1 - 255) More traffic is directed to interfaces with higher weights.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone name.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class SdwanNeighborArgs:
    def __init__(__self__, *,
                 health_check: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 member: Optional[pulumi.Input[int]] = None,
                 member_blocks: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanNeighborMemberBlockArgs']]]] = None,
                 minimum_sla_meet_members: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[int]] = None,
                 sla_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] health_check: SD-WAN health-check name.
        :param pulumi.Input[str] ip: IP/IPv6 address of neighbor.
        :param pulumi.Input[int] member: Member sequence number.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanNeighborMemberBlockArgs']]] member_blocks: Member sequence number list. The structure of `member_block` block is documented below.
        :param pulumi.Input[int] minimum_sla_meet_members: Minimum number of members which meet SLA when the neighbor is preferred.
        :param pulumi.Input[str] mode: What metric to select the neighbor. Valid values: `sla`, `speedtest`.
        :param pulumi.Input[str] role: Role of neighbor. Valid values: `standalone`, `primary`, `secondary`.
        :param pulumi.Input[int] service_id: SD-WAN service ID to work with the neighbor.
        :param pulumi.Input[int] sla_id: SLA ID.
        """
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if member_blocks is not None:
            pulumi.set(__self__, "member_blocks", member_blocks)
        if minimum_sla_meet_members is not None:
            pulumi.set(__self__, "minimum_sla_meet_members", minimum_sla_meet_members)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        SD-WAN health-check name.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP/IPv6 address of neighbor.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def member(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "member")

    @member.setter
    def member(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member", value)

    @property
    @pulumi.getter(name="memberBlocks")
    def member_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanNeighborMemberBlockArgs']]]]:
        """
        Member sequence number list. The structure of `member_block` block is documented below.
        """
        return pulumi.get(self, "member_blocks")

    @member_blocks.setter
    def member_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanNeighborMemberBlockArgs']]]]):
        pulumi.set(self, "member_blocks", value)

    @property
    @pulumi.getter(name="minimumSlaMeetMembers")
    def minimum_sla_meet_members(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of members which meet SLA when the neighbor is preferred.
        """
        return pulumi.get(self, "minimum_sla_meet_members")

    @minimum_sla_meet_members.setter
    def minimum_sla_meet_members(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_sla_meet_members", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        What metric to select the neighbor. Valid values: `sla`, `speedtest`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role of neighbor. Valid values: `standalone`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[int]]:
        """
        SD-WAN service ID to work with the neighbor.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[pulumi.Input[int]]:
        """
        SLA ID.
        """
        return pulumi.get(self, "sla_id")

    @sla_id.setter
    def sla_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_id", value)


@pulumi.input_type
class SdwanNeighborMemberBlockArgs:
    def __init__(__self__, *,
                 seq_num: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] seq_num: Member sequence number.
        """
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class SdwanServiceArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 agent_exclusive: Optional[pulumi.Input[str]] = None,
                 bandwidth_weight: Optional[pulumi.Input[int]] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 dscp_forward: Optional[pulumi.Input[str]] = None,
                 dscp_forward_tag: Optional[pulumi.Input[str]] = None,
                 dscp_reverse: Optional[pulumi.Input[str]] = None,
                 dscp_reverse_tag: Optional[pulumi.Input[str]] = None,
                 dst6s: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceDst6Args']]]] = None,
                 dst_negate: Optional[pulumi.Input[str]] = None,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceDstArgs']]]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 end_src_port: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceGroupArgs']]]] = None,
                 hash_mode: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceHealthCheckArgs']]]] = None,
                 hold_down_time: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 input_device_negate: Optional[pulumi.Input[str]] = None,
                 input_devices: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInputDeviceArgs']]]] = None,
                 input_zones: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInputZoneArgs']]]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_app_ctrl_categories: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceAppCtrlCategoryArgs']]]] = None,
                 internet_service_app_ctrl_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceAppCtrlGroupArgs']]]] = None,
                 internet_service_app_ctrls: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceAppCtrlArgs']]]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceGroupArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceNameArgs']]]] = None,
                 jitter_weight: Optional[pulumi.Input[int]] = None,
                 latency_weight: Optional[pulumi.Input[int]] = None,
                 link_cost_factor: Optional[pulumi.Input[str]] = None,
                 link_cost_threshold: Optional[pulumi.Input[int]] = None,
                 load_balance: Optional[pulumi.Input[str]] = None,
                 minimum_sla_meet_members: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_loss_weight: Optional[pulumi.Input[int]] = None,
                 passive_measurement: Optional[pulumi.Input[str]] = None,
                 priority_members: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServicePriorityMemberArgs']]]] = None,
                 priority_zones: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServicePriorityZoneArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 quality_link: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 route_tag: Optional[pulumi.Input[int]] = None,
                 shortcut: Optional[pulumi.Input[str]] = None,
                 shortcut_priority: Optional[pulumi.Input[str]] = None,
                 shortcut_stickiness: Optional[pulumi.Input[str]] = None,
                 sla_compare_method: Optional[pulumi.Input[str]] = None,
                 sla_stickiness: Optional[pulumi.Input[str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceSlaArgs']]]] = None,
                 src6s: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceSrc6Args']]]] = None,
                 src_negate: Optional[pulumi.Input[str]] = None,
                 srcs: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceSrcArgs']]]] = None,
                 standalone_action: Optional[pulumi.Input[str]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 start_src_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tie_break: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 use_shortcut_sla: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceUserArgs']]]] = None,
                 zone_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] agent_exclusive: Set/unset the service as agent use exclusively. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bandwidth_weight: Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
        :param pulumi.Input[str] default: Enable/disable use of SD-WAN as default service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dscp_forward: Enable/disable forward traffic DSCP tag. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dscp_forward_tag: Forward traffic DSCP tag.
        :param pulumi.Input[str] dscp_reverse: Enable/disable reverse traffic DSCP tag. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dscp_reverse_tag: Reverse traffic DSCP tag.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceDst6Args']]] dst6s: Destination address6 name. The structure of `dst6` block is documented below.
        :param pulumi.Input[str] dst_negate: Enable/disable negation of destination address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceDstArgs']]] dsts: Destination address name. The structure of `dst` block is documented below.
        :param pulumi.Input[int] end_port: End destination port number.
        :param pulumi.Input[int] end_src_port: End source port number.
        :param pulumi.Input[str] gateway: Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceGroupArgs']]] groups: User groups. The structure of `groups` block is documented below.
        :param pulumi.Input[str] hash_mode: Hash algorithm for selected priority members for load balance mode. Valid values: `round-robin`, `source-ip-based`, `source-dest-ip-based`, `inbandwidth`, `outbandwidth`, `bibandwidth`.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceHealthCheckArgs']]] health_checks: Health check list. The structure of `health_check` block is documented below.
        :param pulumi.Input[int] hold_down_time: Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
        :param pulumi.Input[int] id: SD-WAN rule ID (1 - 4000).
        :param pulumi.Input[str] input_device_negate: Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceInputDeviceArgs']]] input_devices: Source interface name. The structure of `input_device` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceInputZoneArgs']]] input_zones: Source input-zone name. The structure of `input_zone` block is documented below.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet service for application-based load balancing. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceAppCtrlCategoryArgs']]] internet_service_app_ctrl_categories: IDs of one or more application control categories. The structure of `internet_service_app_ctrl_category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceAppCtrlGroupArgs']]] internet_service_app_ctrl_groups: Application control based Internet Service group list. The structure of `internet_service_app_ctrl_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceAppCtrlArgs']]] internet_service_app_ctrls: Application control based Internet Service ID list. The structure of `internet_service_app_ctrl` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceCustomGroupArgs']]] internet_service_custom_groups: Custom Internet Service group list. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceCustomArgs']]] internet_service_customs: Custom Internet service name list. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceGroupArgs']]] internet_service_groups: Internet Service group list. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceNameArgs']]] internet_service_names: Internet service name list. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[int] jitter_weight: Coefficient of jitter in the formula of custom-profile-1.
        :param pulumi.Input[int] latency_weight: Coefficient of latency in the formula of custom-profile-1.
        :param pulumi.Input[str] link_cost_factor: Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        :param pulumi.Input[int] link_cost_threshold: Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
        :param pulumi.Input[str] load_balance: Enable/disable load-balance. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] minimum_sla_meet_members: Minimum number of members which meet SLA.
        :param pulumi.Input[str] mode: Control how the SD-WAN rule sets the priority of interfaces in the SD-WAN.
        :param pulumi.Input[str] name: Service and service group name.
        :param pulumi.Input[int] packet_loss_weight: Coefficient of packet-loss in the formula of custom-profile-1.
        :param pulumi.Input[str] passive_measurement: Enable/disable passive measurement based on the service criteria. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServicePriorityMemberArgs']]] priority_members: Member sequence number list. The structure of `priority_members` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServicePriorityZoneArgs']]] priority_zones: Priority zone name list. The structure of `priority_zone` block is documented below.
        :param pulumi.Input[int] protocol: Protocol number.
        :param pulumi.Input[int] quality_link: Quality grade.
        :param pulumi.Input[str] role: Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        :param pulumi.Input[int] route_tag: IPv4 route map route-tag.
        :param pulumi.Input[str] shortcut: Enable/disable shortcut for this service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] shortcut_priority: High priority of ADVPN shortcut for this service. Valid values: `enable`, `disable`, `auto`.
        :param pulumi.Input[str] shortcut_stickiness: Enable/disable shortcut-stickiness of ADVPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sla_compare_method: Method to compare SLA value for SLA mode. Valid values: `order`, `number`.
        :param pulumi.Input[str] sla_stickiness: Enable/disable SLA stickiness (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceSlaArgs']]] slas: Service level agreement (SLA). The structure of `sla` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceSrc6Args']]] src6s: Source address6 name. The structure of `src6` block is documented below.
        :param pulumi.Input[str] src_negate: Enable/disable negation of source address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceSrcArgs']]] srcs: Source address name. The structure of `src` block is documented below.
        :param pulumi.Input[str] standalone_action: Enable/disable service when selected neighbor role is standalone while service role is not standalone. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] start_port: Start destination port number.
        :param pulumi.Input[int] start_src_port: Start source port number.
        :param pulumi.Input[str] status: Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tie_break: Method of selecting member if more than one meets the SLA.
        :param pulumi.Input[str] tos: Type of service bit pattern.
        :param pulumi.Input[str] tos_mask: Type of service evaluated bits.
        :param pulumi.Input[str] use_shortcut_sla: Enable/disable use of ADVPN shortcut for quality comparison. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SdwanServiceUserArgs']]] users: User name. The structure of `users` block is documented below.
        :param pulumi.Input[str] zone_mode: Enable/disable zone mode. Valid values: `enable`, `disable`.
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if agent_exclusive is not None:
            pulumi.set(__self__, "agent_exclusive", agent_exclusive)
        if bandwidth_weight is not None:
            pulumi.set(__self__, "bandwidth_weight", bandwidth_weight)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dscp_forward is not None:
            pulumi.set(__self__, "dscp_forward", dscp_forward)
        if dscp_forward_tag is not None:
            pulumi.set(__self__, "dscp_forward_tag", dscp_forward_tag)
        if dscp_reverse is not None:
            pulumi.set(__self__, "dscp_reverse", dscp_reverse)
        if dscp_reverse_tag is not None:
            pulumi.set(__self__, "dscp_reverse_tag", dscp_reverse_tag)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dst_negate is not None:
            pulumi.set(__self__, "dst_negate", dst_negate)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if end_src_port is not None:
            pulumi.set(__self__, "end_src_port", end_src_port)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if hash_mode is not None:
            pulumi.set(__self__, "hash_mode", hash_mode)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if hold_down_time is not None:
            pulumi.set(__self__, "hold_down_time", hold_down_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if input_device_negate is not None:
            pulumi.set(__self__, "input_device_negate", input_device_negate)
        if input_devices is not None:
            pulumi.set(__self__, "input_devices", input_devices)
        if input_zones is not None:
            pulumi.set(__self__, "input_zones", input_zones)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_app_ctrl_categories is not None:
            pulumi.set(__self__, "internet_service_app_ctrl_categories", internet_service_app_ctrl_categories)
        if internet_service_app_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_app_ctrl_groups", internet_service_app_ctrl_groups)
        if internet_service_app_ctrls is not None:
            pulumi.set(__self__, "internet_service_app_ctrls", internet_service_app_ctrls)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if jitter_weight is not None:
            pulumi.set(__self__, "jitter_weight", jitter_weight)
        if latency_weight is not None:
            pulumi.set(__self__, "latency_weight", latency_weight)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if link_cost_threshold is not None:
            pulumi.set(__self__, "link_cost_threshold", link_cost_threshold)
        if load_balance is not None:
            pulumi.set(__self__, "load_balance", load_balance)
        if minimum_sla_meet_members is not None:
            pulumi.set(__self__, "minimum_sla_meet_members", minimum_sla_meet_members)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_loss_weight is not None:
            pulumi.set(__self__, "packet_loss_weight", packet_loss_weight)
        if passive_measurement is not None:
            pulumi.set(__self__, "passive_measurement", passive_measurement)
        if priority_members is not None:
            pulumi.set(__self__, "priority_members", priority_members)
        if priority_zones is not None:
            pulumi.set(__self__, "priority_zones", priority_zones)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_link is not None:
            pulumi.set(__self__, "quality_link", quality_link)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if route_tag is not None:
            pulumi.set(__self__, "route_tag", route_tag)
        if shortcut is not None:
            pulumi.set(__self__, "shortcut", shortcut)
        if shortcut_priority is not None:
            pulumi.set(__self__, "shortcut_priority", shortcut_priority)
        if shortcut_stickiness is not None:
            pulumi.set(__self__, "shortcut_stickiness", shortcut_stickiness)
        if sla_compare_method is not None:
            pulumi.set(__self__, "sla_compare_method", sla_compare_method)
        if sla_stickiness is not None:
            pulumi.set(__self__, "sla_stickiness", sla_stickiness)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if src6s is not None:
            pulumi.set(__self__, "src6s", src6s)
        if src_negate is not None:
            pulumi.set(__self__, "src_negate", src_negate)
        if srcs is not None:
            pulumi.set(__self__, "srcs", srcs)
        if standalone_action is not None:
            pulumi.set(__self__, "standalone_action", standalone_action)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if start_src_port is not None:
            pulumi.set(__self__, "start_src_port", start_src_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tie_break is not None:
            pulumi.set(__self__, "tie_break", tie_break)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if use_shortcut_sla is not None:
            pulumi.set(__self__, "use_shortcut_sla", use_shortcut_sla)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if zone_mode is not None:
            pulumi.set(__self__, "zone_mode", zone_mode)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter(name="agentExclusive")
    def agent_exclusive(self) -> Optional[pulumi.Input[str]]:
        """
        Set/unset the service as agent use exclusively. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "agent_exclusive")

    @agent_exclusive.setter
    def agent_exclusive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_exclusive", value)

    @property
    @pulumi.getter(name="bandwidthWeight")
    def bandwidth_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
        """
        return pulumi.get(self, "bandwidth_weight")

    @bandwidth_weight.setter
    def bandwidth_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_weight", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of SD-WAN as default service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="dscpForward")
    def dscp_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forward traffic DSCP tag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_forward")

    @dscp_forward.setter
    def dscp_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_forward", value)

    @property
    @pulumi.getter(name="dscpForwardTag")
    def dscp_forward_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Forward traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_forward_tag")

    @dscp_forward_tag.setter
    def dscp_forward_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_forward_tag", value)

    @property
    @pulumi.getter(name="dscpReverse")
    def dscp_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable reverse traffic DSCP tag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_reverse")

    @dscp_reverse.setter
    def dscp_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_reverse", value)

    @property
    @pulumi.getter(name="dscpReverseTag")
    def dscp_reverse_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Reverse traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_reverse_tag")

    @dscp_reverse_tag.setter
    def dscp_reverse_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_reverse_tag", value)

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceDst6Args']]]]:
        """
        Destination address6 name. The structure of `dst6` block is documented below.
        """
        return pulumi.get(self, "dst6s")

    @dst6s.setter
    def dst6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceDst6Args']]]]):
        pulumi.set(self, "dst6s", value)

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negation of destination address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dst_negate")

    @dst_negate.setter
    def dst_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_negate", value)

    @property
    @pulumi.getter
    def dsts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceDstArgs']]]]:
        """
        Destination address name. The structure of `dst` block is documented below.
        """
        return pulumi.get(self, "dsts")

    @dsts.setter
    def dsts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceDstArgs']]]]):
        pulumi.set(self, "dsts", value)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        End destination port number.
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="endSrcPort")
    def end_src_port(self) -> Optional[pulumi.Input[int]]:
        """
        End source port number.
        """
        return pulumi.get(self, "end_src_port")

    @end_src_port.setter
    def end_src_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_src_port", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceGroupArgs']]]]:
        """
        User groups. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="hashMode")
    def hash_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Hash algorithm for selected priority members for load balance mode. Valid values: `round-robin`, `source-ip-based`, `source-dest-ip-based`, `inbandwidth`, `outbandwidth`, `bibandwidth`.
        """
        return pulumi.get(self, "hash_mode")

    @hash_mode.setter
    def hash_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_mode", value)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceHealthCheckArgs']]]]:
        """
        Health check list. The structure of `health_check` block is documented below.
        """
        return pulumi.get(self, "health_checks")

    @health_checks.setter
    def health_checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceHealthCheckArgs']]]]):
        pulumi.set(self, "health_checks", value)

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> Optional[pulumi.Input[int]]:
        """
        Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
        """
        return pulumi.get(self, "hold_down_time")

    @hold_down_time.setter
    def hold_down_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hold_down_time", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SD-WAN rule ID (1 - 4000).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "input_device_negate")

    @input_device_negate.setter
    def input_device_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_device_negate", value)

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInputDeviceArgs']]]]:
        """
        Source interface name. The structure of `input_device` block is documented below.
        """
        return pulumi.get(self, "input_devices")

    @input_devices.setter
    def input_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInputDeviceArgs']]]]):
        pulumi.set(self, "input_devices", value)

    @property
    @pulumi.getter(name="inputZones")
    def input_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInputZoneArgs']]]]:
        """
        Source input-zone name. The structure of `input_zone` block is documented below.
        """
        return pulumi.get(self, "input_zones")

    @input_zones.setter
    def input_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInputZoneArgs']]]]):
        pulumi.set(self, "input_zones", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet service for application-based load balancing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetServiceAppCtrlCategories")
    def internet_service_app_ctrl_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceAppCtrlCategoryArgs']]]]:
        """
        IDs of one or more application control categories. The structure of `internet_service_app_ctrl_category` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrl_categories")

    @internet_service_app_ctrl_categories.setter
    def internet_service_app_ctrl_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceAppCtrlCategoryArgs']]]]):
        pulumi.set(self, "internet_service_app_ctrl_categories", value)

    @property
    @pulumi.getter(name="internetServiceAppCtrlGroups")
    def internet_service_app_ctrl_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceAppCtrlGroupArgs']]]]:
        """
        Application control based Internet Service group list. The structure of `internet_service_app_ctrl_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrl_groups")

    @internet_service_app_ctrl_groups.setter
    def internet_service_app_ctrl_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceAppCtrlGroupArgs']]]]):
        pulumi.set(self, "internet_service_app_ctrl_groups", value)

    @property
    @pulumi.getter(name="internetServiceAppCtrls")
    def internet_service_app_ctrls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceAppCtrlArgs']]]]:
        """
        Application control based Internet Service ID list. The structure of `internet_service_app_ctrl` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrls")

    @internet_service_app_ctrls.setter
    def internet_service_app_ctrls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceAppCtrlArgs']]]]):
        pulumi.set(self, "internet_service_app_ctrls", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceCustomGroupArgs']]]]:
        """
        Custom Internet Service group list. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceCustomArgs']]]]:
        """
        Custom Internet service name list. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceGroupArgs']]]]:
        """
        Internet Service group list. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceNameArgs']]]]:
        """
        Internet service name list. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="jitterWeight")
    def jitter_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of jitter in the formula of custom-profile-1.
        """
        return pulumi.get(self, "jitter_weight")

    @jitter_weight.setter
    def jitter_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jitter_weight", value)

    @property
    @pulumi.getter(name="latencyWeight")
    def latency_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of latency in the formula of custom-profile-1.
        """
        return pulumi.get(self, "latency_weight")

    @latency_weight.setter
    def latency_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_weight", value)

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        """
        return pulumi.get(self, "link_cost_factor")

    @link_cost_factor.setter
    def link_cost_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_cost_factor", value)

    @property
    @pulumi.getter(name="linkCostThreshold")
    def link_cost_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
        """
        return pulumi.get(self, "link_cost_threshold")

    @link_cost_threshold.setter
    def link_cost_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_cost_threshold", value)

    @property
    @pulumi.getter(name="loadBalance")
    def load_balance(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable load-balance. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "load_balance")

    @load_balance.setter
    def load_balance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balance", value)

    @property
    @pulumi.getter(name="minimumSlaMeetMembers")
    def minimum_sla_meet_members(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of members which meet SLA.
        """
        return pulumi.get(self, "minimum_sla_meet_members")

    @minimum_sla_meet_members.setter
    def minimum_sla_meet_members(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_sla_meet_members", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Control how the SD-WAN rule sets the priority of interfaces in the SD-WAN.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetLossWeight")
    def packet_loss_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of packet-loss in the formula of custom-profile-1.
        """
        return pulumi.get(self, "packet_loss_weight")

    @packet_loss_weight.setter
    def packet_loss_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_loss_weight", value)

    @property
    @pulumi.getter(name="passiveMeasurement")
    def passive_measurement(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable passive measurement based on the service criteria. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive_measurement")

    @passive_measurement.setter
    def passive_measurement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive_measurement", value)

    @property
    @pulumi.getter(name="priorityMembers")
    def priority_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServicePriorityMemberArgs']]]]:
        """
        Member sequence number list. The structure of `priority_members` block is documented below.
        """
        return pulumi.get(self, "priority_members")

    @priority_members.setter
    def priority_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServicePriorityMemberArgs']]]]):
        pulumi.set(self, "priority_members", value)

    @property
    @pulumi.getter(name="priorityZones")
    def priority_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServicePriorityZoneArgs']]]]:
        """
        Priority zone name list. The structure of `priority_zone` block is documented below.
        """
        return pulumi.get(self, "priority_zones")

    @priority_zones.setter
    def priority_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServicePriorityZoneArgs']]]]):
        pulumi.set(self, "priority_zones", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Protocol number.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="qualityLink")
    def quality_link(self) -> Optional[pulumi.Input[int]]:
        """
        Quality grade.
        """
        return pulumi.get(self, "quality_link")

    @quality_link.setter
    def quality_link(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quality_link", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> Optional[pulumi.Input[int]]:
        """
        IPv4 route map route-tag.
        """
        return pulumi.get(self, "route_tag")

    @route_tag.setter
    def route_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_tag", value)

    @property
    @pulumi.getter
    def shortcut(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable shortcut for this service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "shortcut")

    @shortcut.setter
    def shortcut(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shortcut", value)

    @property
    @pulumi.getter(name="shortcutPriority")
    def shortcut_priority(self) -> Optional[pulumi.Input[str]]:
        """
        High priority of ADVPN shortcut for this service. Valid values: `enable`, `disable`, `auto`.
        """
        return pulumi.get(self, "shortcut_priority")

    @shortcut_priority.setter
    def shortcut_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shortcut_priority", value)

    @property
    @pulumi.getter(name="shortcutStickiness")
    def shortcut_stickiness(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable shortcut-stickiness of ADVPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "shortcut_stickiness")

    @shortcut_stickiness.setter
    def shortcut_stickiness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shortcut_stickiness", value)

    @property
    @pulumi.getter(name="slaCompareMethod")
    def sla_compare_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method to compare SLA value for SLA mode. Valid values: `order`, `number`.
        """
        return pulumi.get(self, "sla_compare_method")

    @sla_compare_method.setter
    def sla_compare_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_compare_method", value)

    @property
    @pulumi.getter(name="slaStickiness")
    def sla_stickiness(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SLA stickiness (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sla_stickiness")

    @sla_stickiness.setter
    def sla_stickiness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_stickiness", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceSlaArgs']]]]:
        """
        Service level agreement (SLA). The structure of `sla` block is documented below.
        """
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter
    def src6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceSrc6Args']]]]:
        """
        Source address6 name. The structure of `src6` block is documented below.
        """
        return pulumi.get(self, "src6s")

    @src6s.setter
    def src6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceSrc6Args']]]]):
        pulumi.set(self, "src6s", value)

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negation of source address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "src_negate")

    @src_negate.setter
    def src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_negate", value)

    @property
    @pulumi.getter
    def srcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceSrcArgs']]]]:
        """
        Source address name. The structure of `src` block is documented below.
        """
        return pulumi.get(self, "srcs")

    @srcs.setter
    def srcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceSrcArgs']]]]):
        pulumi.set(self, "srcs", value)

    @property
    @pulumi.getter(name="standaloneAction")
    def standalone_action(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable service when selected neighbor role is standalone while service role is not standalone. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "standalone_action")

    @standalone_action.setter
    def standalone_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standalone_action", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Start destination port number.
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter(name="startSrcPort")
    def start_src_port(self) -> Optional[pulumi.Input[int]]:
        """
        Start source port number.
        """
        return pulumi.get(self, "start_src_port")

    @start_src_port.setter
    def start_src_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_src_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tieBreak")
    def tie_break(self) -> Optional[pulumi.Input[str]]:
        """
        Method of selecting member if more than one meets the SLA.
        """
        return pulumi.get(self, "tie_break")

    @tie_break.setter
    def tie_break(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tie_break", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        """
        Type of service bit pattern.
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Type of service evaluated bits.
        """
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter(name="useShortcutSla")
    def use_shortcut_sla(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of ADVPN shortcut for quality comparison. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "use_shortcut_sla")

    @use_shortcut_sla.setter
    def use_shortcut_sla(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_shortcut_sla", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceUserArgs']]]]:
        """
        User name. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SdwanServiceUserArgs']]]]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="zoneMode")
    def zone_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable zone mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "zone_mode")

    @zone_mode.setter
    def zone_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_mode", value)


@pulumi.input_type
class SdwanServiceDst6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanServiceDstArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanServiceHealthCheckArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Health check name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Health check name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanServiceInputDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanServiceInputZoneArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Zone.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Zone.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanServiceInternetServiceAppCtrlArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Application control based Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Application control based Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SdwanServiceInternetServiceAppCtrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Application control category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Application control category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SdwanServiceInternetServiceAppCtrlGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application control based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application control based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanServiceInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanServiceInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanServiceInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanServiceInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanServicePriorityMemberArgs:
    def __init__(__self__, *,
                 seq_num: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] seq_num: Member sequence number.
        """
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class SdwanServicePriorityZoneArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Priority zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Priority zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanServiceSlaArgs:
    def __init__(__self__, *,
                 health_check: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] health_check: SD-WAN health-check.
        :param pulumi.Input[int] id: SLA ID.
        """
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        SD-WAN health-check.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SdwanServiceSrc6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanServiceSrcArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address6 or address6 group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address6 or address6 group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanServiceUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: User name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SdwanZoneArgs:
    def __init__(__self__, *,
                 advpn_health_check: Optional[pulumi.Input[str]] = None,
                 advpn_select: Optional[pulumi.Input[str]] = None,
                 minimum_sla_meet_members: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_sla_tie_break: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] advpn_health_check: Health check for ADVPN local overlay link quality.
        :param pulumi.Input[str] advpn_select: Enable/disable selection of ADVPN based on SDWAN information. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] minimum_sla_meet_members: Minimum number of members which meet SLA when the neighbor is preferred.
        :param pulumi.Input[str] name: Zone name.
        :param pulumi.Input[str] service_sla_tie_break: Method of selecting member if more than one meets the SLA.
        """
        if advpn_health_check is not None:
            pulumi.set(__self__, "advpn_health_check", advpn_health_check)
        if advpn_select is not None:
            pulumi.set(__self__, "advpn_select", advpn_select)
        if minimum_sla_meet_members is not None:
            pulumi.set(__self__, "minimum_sla_meet_members", minimum_sla_meet_members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_sla_tie_break is not None:
            pulumi.set(__self__, "service_sla_tie_break", service_sla_tie_break)

    @property
    @pulumi.getter(name="advpnHealthCheck")
    def advpn_health_check(self) -> Optional[pulumi.Input[str]]:
        """
        Health check for ADVPN local overlay link quality.
        """
        return pulumi.get(self, "advpn_health_check")

    @advpn_health_check.setter
    def advpn_health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advpn_health_check", value)

    @property
    @pulumi.getter(name="advpnSelect")
    def advpn_select(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable selection of ADVPN based on SDWAN information. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "advpn_select")

    @advpn_select.setter
    def advpn_select(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advpn_select", value)

    @property
    @pulumi.getter(name="minimumSlaMeetMembers")
    def minimum_sla_meet_members(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of members which meet SLA when the neighbor is preferred.
        """
        return pulumi.get(self, "minimum_sla_meet_members")

    @minimum_sla_meet_members.setter
    def minimum_sla_meet_members(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_sla_meet_members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceSlaTieBreak")
    def service_sla_tie_break(self) -> Optional[pulumi.Input[str]]:
        """
        Method of selecting member if more than one meets the SLA.
        """
        return pulumi.get(self, "service_sla_tie_break")

    @service_sla_tie_break.setter
    def service_sla_tie_break(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_sla_tie_break", value)


@pulumi.input_type
class SessionttlPortArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 refresh_direction: Optional[pulumi.Input[str]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] end_port: End port number.
        :param pulumi.Input[int] id: Table entry ID.
        :param pulumi.Input[int] protocol: Protocol (0 - 255).
        :param pulumi.Input[str] refresh_direction: Refresh direction: Both, outgoing, incoming Valid values: `both`, `outgoing`, `incoming`.
        :param pulumi.Input[int] start_port: Start port number.
        :param pulumi.Input[str] timeout: Session timeout (TTL).
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if refresh_direction is not None:
            pulumi.set(__self__, "refresh_direction", refresh_direction)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        End port number.
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Table entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Protocol (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="refreshDirection")
    def refresh_direction(self) -> Optional[pulumi.Input[str]]:
        """
        Refresh direction: Both, outgoing, incoming Valid values: `both`, `outgoing`, `incoming`.
        """
        return pulumi.get(self, "refresh_direction")

    @refresh_direction.setter
    def refresh_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_direction", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Start port number.
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Session timeout (TTL).
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class SettingsGuiDefaultPolicyColumnArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Select column name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Select column name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SflowCollectorArgs:
    def __init__(__self__, *,
                 collector_ip: Optional[pulumi.Input[str]] = None,
                 collector_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] collector_ip: IP addresses of the sFlow collectors that sFlow agents added to interfaces in this VDOM send sFlow datagrams to.
        :param pulumi.Input[int] collector_port: UDP port number used for sending sFlow datagrams (configure only if required by your sFlow collector or your network configuration) (0 - 65535, default = 6343).
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] source_ip: Source IP address for sFlow agent.
        """
        if collector_ip is not None:
            pulumi.set(__self__, "collector_ip", collector_ip)
        if collector_port is not None:
            pulumi.set(__self__, "collector_port", collector_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP addresses of the sFlow collectors that sFlow agents added to interfaces in this VDOM send sFlow datagrams to.
        """
        return pulumi.get(self, "collector_ip")

    @collector_ip.setter
    def collector_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collector_ip", value)

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> Optional[pulumi.Input[int]]:
        """
        UDP port number used for sending sFlow datagrams (configure only if required by your sFlow collector or your network configuration) (0 - 65535, default = 6343).
        """
        return pulumi.get(self, "collector_port")

    @collector_port.setter
    def collector_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "collector_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address for sFlow agent.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)


@pulumi.input_type
class SpeedtestscheduleScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of a firewall recurring schedule.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a firewall recurring schedule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SpeedtestserverHostArgs:
    def __init__(__self__, *,
                 distance: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 latitude: Optional[pulumi.Input[str]] = None,
                 longitude: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] distance: Speed test host distance.
        :param pulumi.Input[int] id: Server host ID.
        :param pulumi.Input[str] ip: Server host IPv4 address.
        :param pulumi.Input[str] latitude: Speed test host latitude.
        :param pulumi.Input[str] longitude: Speed test host longitude.
        :param pulumi.Input[str] password: Speed test host password.
        :param pulumi.Input[int] port: Server host port number to communicate with client.
        :param pulumi.Input[str] user: Speed test host user name.
        """
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Speed test host distance.
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Server host ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Server host IPv4 address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def latitude(self) -> Optional[pulumi.Input[str]]:
        """
        Speed test host latitude.
        """
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latitude", value)

    @property
    @pulumi.getter
    def longitude(self) -> Optional[pulumi.Input[str]]:
        """
        Speed test host longitude.
        """
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "longitude", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Speed test host password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Server host port number to communicate with client.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        Speed test host user name.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class SsoadminVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SsoforticloudadminVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SsofortigatecloudadminVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StandaloneclusterClusterPeerArgs:
    def __init__(__self__, *,
                 down_intfs_before_sess_syncs: Optional[pulumi.Input[Sequence[pulumi.Input['StandaloneclusterClusterPeerDownIntfsBeforeSessSyncArgs']]]] = None,
                 hb_interval: Optional[pulumi.Input[int]] = None,
                 hb_lost_threshold: Optional[pulumi.Input[int]] = None,
                 ipsec_tunnel_sync: Optional[pulumi.Input[str]] = None,
                 peerip: Optional[pulumi.Input[str]] = None,
                 peervd: Optional[pulumi.Input[str]] = None,
                 secondary_add_ipsec_routes: Optional[pulumi.Input[str]] = None,
                 session_sync_filter: Optional[pulumi.Input['StandaloneclusterClusterPeerSessionSyncFilterArgs']] = None,
                 sync_id: Optional[pulumi.Input[int]] = None,
                 syncvds: Optional[pulumi.Input[Sequence[pulumi.Input['StandaloneclusterClusterPeerSyncvdArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['StandaloneclusterClusterPeerDownIntfsBeforeSessSyncArgs']]] down_intfs_before_sess_syncs: List of interfaces to be turned down before session synchronization is complete. The structure of `down_intfs_before_sess_sync` block is documented below.
        :param pulumi.Input[int] hb_interval: Heartbeat interval (1 - 20 (100*ms). Increase to reduce false positives.
        :param pulumi.Input[int] hb_lost_threshold: Lost heartbeat threshold (1 - 60). Increase to reduce false positives.
        :param pulumi.Input[str] ipsec_tunnel_sync: Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] peerip: IP address of the interface on the peer unit that is used for the session synchronization link.
        :param pulumi.Input[str] peervd: VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
        :param pulumi.Input[str] secondary_add_ipsec_routes: Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        :param pulumi.Input['StandaloneclusterClusterPeerSessionSyncFilterArgs'] session_sync_filter: Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `session_sync_filter` block is documented below.
        :param pulumi.Input[int] sync_id: Sync ID.
        :param pulumi.Input[Sequence[pulumi.Input['StandaloneclusterClusterPeerSyncvdArgs']]] syncvds: Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
        """
        if down_intfs_before_sess_syncs is not None:
            pulumi.set(__self__, "down_intfs_before_sess_syncs", down_intfs_before_sess_syncs)
        if hb_interval is not None:
            pulumi.set(__self__, "hb_interval", hb_interval)
        if hb_lost_threshold is not None:
            pulumi.set(__self__, "hb_lost_threshold", hb_lost_threshold)
        if ipsec_tunnel_sync is not None:
            pulumi.set(__self__, "ipsec_tunnel_sync", ipsec_tunnel_sync)
        if peerip is not None:
            pulumi.set(__self__, "peerip", peerip)
        if peervd is not None:
            pulumi.set(__self__, "peervd", peervd)
        if secondary_add_ipsec_routes is not None:
            pulumi.set(__self__, "secondary_add_ipsec_routes", secondary_add_ipsec_routes)
        if session_sync_filter is not None:
            pulumi.set(__self__, "session_sync_filter", session_sync_filter)
        if sync_id is not None:
            pulumi.set(__self__, "sync_id", sync_id)
        if syncvds is not None:
            pulumi.set(__self__, "syncvds", syncvds)

    @property
    @pulumi.getter(name="downIntfsBeforeSessSyncs")
    def down_intfs_before_sess_syncs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StandaloneclusterClusterPeerDownIntfsBeforeSessSyncArgs']]]]:
        """
        List of interfaces to be turned down before session synchronization is complete. The structure of `down_intfs_before_sess_sync` block is documented below.
        """
        return pulumi.get(self, "down_intfs_before_sess_syncs")

    @down_intfs_before_sess_syncs.setter
    def down_intfs_before_sess_syncs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StandaloneclusterClusterPeerDownIntfsBeforeSessSyncArgs']]]]):
        pulumi.set(self, "down_intfs_before_sess_syncs", value)

    @property
    @pulumi.getter(name="hbInterval")
    def hb_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Heartbeat interval (1 - 20 (100*ms). Increase to reduce false positives.
        """
        return pulumi.get(self, "hb_interval")

    @hb_interval.setter
    def hb_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hb_interval", value)

    @property
    @pulumi.getter(name="hbLostThreshold")
    def hb_lost_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Lost heartbeat threshold (1 - 60). Increase to reduce false positives.
        """
        return pulumi.get(self, "hb_lost_threshold")

    @hb_lost_threshold.setter
    def hb_lost_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hb_lost_threshold", value)

    @property
    @pulumi.getter(name="ipsecTunnelSync")
    def ipsec_tunnel_sync(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipsec_tunnel_sync")

    @ipsec_tunnel_sync.setter
    def ipsec_tunnel_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_tunnel_sync", value)

    @property
    @pulumi.getter
    def peerip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the interface on the peer unit that is used for the session synchronization link.
        """
        return pulumi.get(self, "peerip")

    @peerip.setter
    def peerip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peerip", value)

    @property
    @pulumi.getter
    def peervd(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
        """
        return pulumi.get(self, "peervd")

    @peervd.setter
    def peervd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peervd", value)

    @property
    @pulumi.getter(name="secondaryAddIpsecRoutes")
    def secondary_add_ipsec_routes(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "secondary_add_ipsec_routes")

    @secondary_add_ipsec_routes.setter
    def secondary_add_ipsec_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_add_ipsec_routes", value)

    @property
    @pulumi.getter(name="sessionSyncFilter")
    def session_sync_filter(self) -> Optional[pulumi.Input['StandaloneclusterClusterPeerSessionSyncFilterArgs']]:
        """
        Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `session_sync_filter` block is documented below.
        """
        return pulumi.get(self, "session_sync_filter")

    @session_sync_filter.setter
    def session_sync_filter(self, value: Optional[pulumi.Input['StandaloneclusterClusterPeerSessionSyncFilterArgs']]):
        pulumi.set(self, "session_sync_filter", value)

    @property
    @pulumi.getter(name="syncId")
    def sync_id(self) -> Optional[pulumi.Input[int]]:
        """
        Sync ID.
        """
        return pulumi.get(self, "sync_id")

    @sync_id.setter
    def sync_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sync_id", value)

    @property
    @pulumi.getter
    def syncvds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StandaloneclusterClusterPeerSyncvdArgs']]]]:
        """
        Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
        """
        return pulumi.get(self, "syncvds")

    @syncvds.setter
    def syncvds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StandaloneclusterClusterPeerSyncvdArgs']]]]):
        pulumi.set(self, "syncvds", value)


@pulumi.input_type
class StandaloneclusterClusterPeerDownIntfsBeforeSessSyncArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class StandaloneclusterClusterPeerSessionSyncFilterArgs:
    def __init__(__self__, *,
                 custom_services: Optional[pulumi.Input[Sequence[pulumi.Input['StandaloneclusterClusterPeerSessionSyncFilterCustomServiceArgs']]]] = None,
                 dstaddr: Optional[pulumi.Input[str]] = None,
                 dstaddr6: Optional[pulumi.Input[str]] = None,
                 dstintf: Optional[pulumi.Input[str]] = None,
                 srcaddr: Optional[pulumi.Input[str]] = None,
                 srcaddr6: Optional[pulumi.Input[str]] = None,
                 srcintf: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['StandaloneclusterClusterPeerSessionSyncFilterCustomServiceArgs']]] custom_services: Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custom services. The structure of `custom_service` block is documented below.
        :param pulumi.Input[str] dstaddr: Only sessions to this IPv4 address are synchronized.
        :param pulumi.Input[str] dstaddr6: Only sessions to this IPv6 address are synchronized.
        :param pulumi.Input[str] dstintf: Only sessions to this interface are synchronized.
        :param pulumi.Input[str] srcaddr: Only sessions from this IPv4 address are synchronized.
        :param pulumi.Input[str] srcaddr6: Only sessions from this IPv6 address are synchronized.
        :param pulumi.Input[str] srcintf: Only sessions from this interface are synchronized.
        """
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstaddr6 is not None:
            pulumi.set(__self__, "dstaddr6", dstaddr6)
        if dstintf is not None:
            pulumi.set(__self__, "dstintf", dstintf)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcaddr6 is not None:
            pulumi.set(__self__, "srcaddr6", srcaddr6)
        if srcintf is not None:
            pulumi.set(__self__, "srcintf", srcintf)

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StandaloneclusterClusterPeerSessionSyncFilterCustomServiceArgs']]]]:
        """
        Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custom services. The structure of `custom_service` block is documented below.
        """
        return pulumi.get(self, "custom_services")

    @custom_services.setter
    def custom_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StandaloneclusterClusterPeerSessionSyncFilterCustomServiceArgs']]]]):
        pulumi.set(self, "custom_services", value)

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions to this IPv4 address are synchronized.
        """
        return pulumi.get(self, "dstaddr")

    @dstaddr.setter
    def dstaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr", value)

    @property
    @pulumi.getter
    def dstaddr6(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions to this IPv6 address are synchronized.
        """
        return pulumi.get(self, "dstaddr6")

    @dstaddr6.setter
    def dstaddr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr6", value)

    @property
    @pulumi.getter
    def dstintf(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions to this interface are synchronized.
        """
        return pulumi.get(self, "dstintf")

    @dstintf.setter
    def dstintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstintf", value)

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions from this IPv4 address are synchronized.
        """
        return pulumi.get(self, "srcaddr")

    @srcaddr.setter
    def srcaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr", value)

    @property
    @pulumi.getter
    def srcaddr6(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions from this IPv6 address are synchronized.
        """
        return pulumi.get(self, "srcaddr6")

    @srcaddr6.setter
    def srcaddr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr6", value)

    @property
    @pulumi.getter
    def srcintf(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions from this interface are synchronized.
        """
        return pulumi.get(self, "srcintf")

    @srcintf.setter
    def srcintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcintf", value)


@pulumi.input_type
class StandaloneclusterClusterPeerSessionSyncFilterCustomServiceArgs:
    def __init__(__self__, *,
                 dst_port_range: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 src_port_range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dst_port_range: Custom service destination port range.
        :param pulumi.Input[int] id: Custom service ID.
        :param pulumi.Input[str] src_port_range: Custom service source port range.
        """
        if dst_port_range is not None:
            pulumi.set(__self__, "dst_port_range", dst_port_range)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_port_range is not None:
            pulumi.set(__self__, "src_port_range", src_port_range)

    @property
    @pulumi.getter(name="dstPortRange")
    def dst_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        Custom service destination port range.
        """
        return pulumi.get(self, "dst_port_range")

    @dst_port_range.setter
    def dst_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port_range", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Custom service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="srcPortRange")
    def src_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        Custom service source port range.
        """
        return pulumi.get(self, "src_port_range")

    @src_port_range.setter
    def src_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_port_range", value)


@pulumi.input_type
class StandaloneclusterClusterPeerSyncvdArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VDOM name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SwitchinterfaceMemberArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Physical interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SwitchinterfaceSpanSourcePortArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Physical interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class VdomdnsServerHostnameArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] hostname: DNS server host name list separated by space (maximum 4 domains).
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server host name list separated by space (maximum 4 domains).
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)


@pulumi.input_type
class VdomexceptionVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VDOM name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VdomnetflowCollectorArgs:
    def __init__(__self__, *,
                 collector_ip: Optional[pulumi.Input[str]] = None,
                 collector_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] collector_ip: Collector IP.
        :param pulumi.Input[int] collector_port: NetFlow collector port number.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] source_ip: Source IP address for communication with the NetFlow agent.
        """
        if collector_ip is not None:
            pulumi.set(__self__, "collector_ip", collector_ip)
        if collector_port is not None:
            pulumi.set(__self__, "collector_port", collector_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Collector IP.
        """
        return pulumi.get(self, "collector_ip")

    @collector_ip.setter
    def collector_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collector_ip", value)

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> Optional[pulumi.Input[int]]:
        """
        NetFlow collector port number.
        """
        return pulumi.get(self, "collector_port")

    @collector_port.setter
    def collector_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "collector_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address for communication with the NetFlow agent.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)


@pulumi.input_type
class VdomsflowCollectorArgs:
    def __init__(__self__, *,
                 collector_ip: Optional[pulumi.Input[str]] = None,
                 collector_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] collector_ip: IP addresses of the sFlow collectors that sFlow agents added to interfaces in this VDOM send sFlow datagrams to.
        :param pulumi.Input[int] collector_port: UDP port number used for sending sFlow datagrams (configure only if required by your sFlow collector or your network configuration) (0 - 65535, default = 6343).
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] source_ip: Source IP address for sFlow agent.
        """
        if collector_ip is not None:
            pulumi.set(__self__, "collector_ip", collector_ip)
        if collector_port is not None:
            pulumi.set(__self__, "collector_port", collector_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP addresses of the sFlow collectors that sFlow agents added to interfaces in this VDOM send sFlow datagrams to.
        """
        return pulumi.get(self, "collector_ip")

    @collector_ip.setter
    def collector_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collector_ip", value)

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> Optional[pulumi.Input[int]]:
        """
        UDP port number used for sending sFlow datagrams (configure only if required by your sFlow collector or your network configuration) (0 - 65535, default = 6343).
        """
        return pulumi.get(self, "collector_port")

    @collector_port.setter
    def collector_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "collector_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address for sFlow agent.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)


@pulumi.input_type
class VirtualswitchPortArgs:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alias: Alias.
        :param pulumi.Input[str] name: Physical interface name.
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkFailAlertInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Physical interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkHealthCheckArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dns_request_domain: Optional[pulumi.Input[str]] = None,
                 failtime: Optional[pulumi.Input[int]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 http_agent: Optional[pulumi.Input[str]] = None,
                 http_get: Optional[pulumi.Input[str]] = None,
                 http_match: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkHealthCheckMemberArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_size: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 probe_count: Optional[pulumi.Input[int]] = None,
                 probe_packets: Optional[pulumi.Input[str]] = None,
                 probe_timeout: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 recoverytime: Optional[pulumi.Input[int]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 sla_fail_log_period: Optional[pulumi.Input[int]] = None,
                 sla_pass_log_period: Optional[pulumi.Input[int]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkHealthCheckSlaArgs']]]] = None,
                 system_dns: Optional[pulumi.Input[str]] = None,
                 threshold_alert_jitter: Optional[pulumi.Input[int]] = None,
                 threshold_alert_latency: Optional[pulumi.Input[int]] = None,
                 threshold_alert_packetloss: Optional[pulumi.Input[int]] = None,
                 threshold_warning_jitter: Optional[pulumi.Input[int]] = None,
                 threshold_warning_latency: Optional[pulumi.Input[int]] = None,
                 threshold_warning_packetloss: Optional[pulumi.Input[int]] = None,
                 update_cascade_interface: Optional[pulumi.Input[str]] = None,
                 update_static_route: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] diffservcode: Differentiated services code point (DSCP) in the IP header of the probe packet.
        :param pulumi.Input[str] dns_request_domain: Fully qualified domain name to resolve for the DNS probe.
        :param pulumi.Input[int] failtime: Number of failures before server is considered lost (1 - 3600, default = 5).
        :param pulumi.Input[int] ha_priority: HA election priority (1 - 50).
        :param pulumi.Input[str] http_agent: String in the http-agent field in the HTTP header.
        :param pulumi.Input[str] http_get: URL used to communicate with the server if the protocol if the protocol is HTTP.
        :param pulumi.Input[str] http_match: Response string expected from the server if the protocol is HTTP.
        :param pulumi.Input[int] interval: Status check interval, or the time between attempting to connect to the server (1 - 3600 sec, default = 5).
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkHealthCheckMemberArgs']]] members: Member sequence number list. The structure of `members` block is documented below.
        :param pulumi.Input[str] name: Status check or health check name.
        :param pulumi.Input[int] packet_size: Packet size of a twamp test session,
        :param pulumi.Input[str] password: Twamp controller password in authentication mode
        :param pulumi.Input[int] port: Port number used to communicate with the server over the selected protocol.
        :param pulumi.Input[int] probe_count: Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        :param pulumi.Input[str] probe_packets: Enable/disable transmission of probe packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] probe_timeout: Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        :param pulumi.Input[str] protocol: Protocol used to determine if the FortiGate can communicate with the server.
        :param pulumi.Input[int] recoverytime: Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
        :param pulumi.Input[str] security_mode: Twamp controller security mode. Valid values: `none`, `authentication`.
        :param pulumi.Input[str] server: IP address or FQDN name of the server.
        :param pulumi.Input[int] sla_fail_log_period: Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
        :param pulumi.Input[int] sla_pass_log_period: Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkHealthCheckSlaArgs']]] slas: Service level agreement (SLA). The structure of `sla` block is documented below.
        :param pulumi.Input[str] system_dns: Enable/disable system DNS as the probe server. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] threshold_alert_jitter: Alert threshold for jitter (ms, default = 0).
        :param pulumi.Input[int] threshold_alert_latency: Alert threshold for latency (ms, default = 0).
        :param pulumi.Input[int] threshold_alert_packetloss: Alert threshold for packet loss (percentage, default = 0).
        :param pulumi.Input[int] threshold_warning_jitter: Warning threshold for jitter (ms, default = 0).
        :param pulumi.Input[int] threshold_warning_latency: Warning threshold for latency (ms, default = 0).
        :param pulumi.Input[int] threshold_warning_packetloss: Warning threshold for packet loss (percentage, default = 0).
        :param pulumi.Input[str] update_cascade_interface: Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_static_route: Enable/disable updating the static route. Valid values: `enable`, `disable`.
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dns_request_domain is not None:
            pulumi.set(__self__, "dns_request_domain", dns_request_domain)
        if failtime is not None:
            pulumi.set(__self__, "failtime", failtime)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if http_agent is not None:
            pulumi.set(__self__, "http_agent", http_agent)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if http_match is not None:
            pulumi.set(__self__, "http_match", http_match)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_size is not None:
            pulumi.set(__self__, "packet_size", packet_size)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if probe_count is not None:
            pulumi.set(__self__, "probe_count", probe_count)
        if probe_packets is not None:
            pulumi.set(__self__, "probe_packets", probe_packets)
        if probe_timeout is not None:
            pulumi.set(__self__, "probe_timeout", probe_timeout)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if recoverytime is not None:
            pulumi.set(__self__, "recoverytime", recoverytime)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if sla_fail_log_period is not None:
            pulumi.set(__self__, "sla_fail_log_period", sla_fail_log_period)
        if sla_pass_log_period is not None:
            pulumi.set(__self__, "sla_pass_log_period", sla_pass_log_period)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if system_dns is not None:
            pulumi.set(__self__, "system_dns", system_dns)
        if threshold_alert_jitter is not None:
            pulumi.set(__self__, "threshold_alert_jitter", threshold_alert_jitter)
        if threshold_alert_latency is not None:
            pulumi.set(__self__, "threshold_alert_latency", threshold_alert_latency)
        if threshold_alert_packetloss is not None:
            pulumi.set(__self__, "threshold_alert_packetloss", threshold_alert_packetloss)
        if threshold_warning_jitter is not None:
            pulumi.set(__self__, "threshold_warning_jitter", threshold_warning_jitter)
        if threshold_warning_latency is not None:
            pulumi.set(__self__, "threshold_warning_latency", threshold_warning_latency)
        if threshold_warning_packetloss is not None:
            pulumi.set(__self__, "threshold_warning_packetloss", threshold_warning_packetloss)
        if update_cascade_interface is not None:
            pulumi.set(__self__, "update_cascade_interface", update_cascade_interface)
        if update_static_route is not None:
            pulumi.set(__self__, "update_static_route", update_static_route)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        """
        Differentiated services code point (DSCP) in the IP header of the probe packet.
        """
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dnsRequestDomain")
    def dns_request_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified domain name to resolve for the DNS probe.
        """
        return pulumi.get(self, "dns_request_domain")

    @dns_request_domain.setter
    def dns_request_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_request_domain", value)

    @property
    @pulumi.getter
    def failtime(self) -> Optional[pulumi.Input[int]]:
        """
        Number of failures before server is considered lost (1 - 3600, default = 5).
        """
        return pulumi.get(self, "failtime")

    @failtime.setter
    def failtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failtime", value)

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[pulumi.Input[int]]:
        """
        HA election priority (1 - 50).
        """
        return pulumi.get(self, "ha_priority")

    @ha_priority.setter
    def ha_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_priority", value)

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> Optional[pulumi.Input[str]]:
        """
        String in the http-agent field in the HTTP header.
        """
        return pulumi.get(self, "http_agent")

    @http_agent.setter
    def http_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_agent", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input[str]]:
        """
        URL used to communicate with the server if the protocol if the protocol is HTTP.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> Optional[pulumi.Input[str]]:
        """
        Response string expected from the server if the protocol is HTTP.
        """
        return pulumi.get(self, "http_match")

    @http_match.setter
    def http_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_match", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Status check interval, or the time between attempting to connect to the server (1 - 3600 sec, default = 5).
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkHealthCheckMemberArgs']]]]:
        """
        Member sequence number list. The structure of `members` block is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkHealthCheckMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Status check or health check name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> Optional[pulumi.Input[int]]:
        """
        Packet size of a twamp test session,
        """
        return pulumi.get(self, "packet_size")

    @packet_size.setter
    def packet_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_size", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Twamp controller password in authentication mode
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number used to communicate with the server over the selected protocol.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        """
        return pulumi.get(self, "probe_count")

    @probe_count.setter
    def probe_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_count", value)

    @property
    @pulumi.getter(name="probePackets")
    def probe_packets(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable transmission of probe packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "probe_packets")

    @probe_packets.setter
    def probe_packets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probe_packets", value)

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        """
        return pulumi.get(self, "probe_timeout")

    @probe_timeout.setter
    def probe_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_timeout", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol used to determine if the FortiGate can communicate with the server.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def recoverytime(self) -> Optional[pulumi.Input[int]]:
        """
        Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
        """
        return pulumi.get(self, "recoverytime")

    @recoverytime.setter
    def recoverytime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recoverytime", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Twamp controller security mode. Valid values: `none`, `authentication`.
        """
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or FQDN name of the server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="slaFailLogPeriod")
    def sla_fail_log_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "sla_fail_log_period")

    @sla_fail_log_period.setter
    def sla_fail_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_fail_log_period", value)

    @property
    @pulumi.getter(name="slaPassLogPeriod")
    def sla_pass_log_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "sla_pass_log_period")

    @sla_pass_log_period.setter
    def sla_pass_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_pass_log_period", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkHealthCheckSlaArgs']]]]:
        """
        Service level agreement (SLA). The structure of `sla` block is documented below.
        """
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkHealthCheckSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter(name="systemDns")
    def system_dns(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable system DNS as the probe server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "system_dns")

    @system_dns.setter
    def system_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_dns", value)

    @property
    @pulumi.getter(name="thresholdAlertJitter")
    def threshold_alert_jitter(self) -> Optional[pulumi.Input[int]]:
        """
        Alert threshold for jitter (ms, default = 0).
        """
        return pulumi.get(self, "threshold_alert_jitter")

    @threshold_alert_jitter.setter
    def threshold_alert_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_jitter", value)

    @property
    @pulumi.getter(name="thresholdAlertLatency")
    def threshold_alert_latency(self) -> Optional[pulumi.Input[int]]:
        """
        Alert threshold for latency (ms, default = 0).
        """
        return pulumi.get(self, "threshold_alert_latency")

    @threshold_alert_latency.setter
    def threshold_alert_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_latency", value)

    @property
    @pulumi.getter(name="thresholdAlertPacketloss")
    def threshold_alert_packetloss(self) -> Optional[pulumi.Input[int]]:
        """
        Alert threshold for packet loss (percentage, default = 0).
        """
        return pulumi.get(self, "threshold_alert_packetloss")

    @threshold_alert_packetloss.setter
    def threshold_alert_packetloss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_packetloss", value)

    @property
    @pulumi.getter(name="thresholdWarningJitter")
    def threshold_warning_jitter(self) -> Optional[pulumi.Input[int]]:
        """
        Warning threshold for jitter (ms, default = 0).
        """
        return pulumi.get(self, "threshold_warning_jitter")

    @threshold_warning_jitter.setter
    def threshold_warning_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_jitter", value)

    @property
    @pulumi.getter(name="thresholdWarningLatency")
    def threshold_warning_latency(self) -> Optional[pulumi.Input[int]]:
        """
        Warning threshold for latency (ms, default = 0).
        """
        return pulumi.get(self, "threshold_warning_latency")

    @threshold_warning_latency.setter
    def threshold_warning_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_latency", value)

    @property
    @pulumi.getter(name="thresholdWarningPacketloss")
    def threshold_warning_packetloss(self) -> Optional[pulumi.Input[int]]:
        """
        Warning threshold for packet loss (percentage, default = 0).
        """
        return pulumi.get(self, "threshold_warning_packetloss")

    @threshold_warning_packetloss.setter
    def threshold_warning_packetloss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_packetloss", value)

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_cascade_interface")

    @update_cascade_interface.setter
    def update_cascade_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_cascade_interface", value)

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable updating the static route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_static_route")

    @update_static_route.setter
    def update_static_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_static_route", value)


@pulumi.input_type
class VirtualwanlinkHealthCheckMemberArgs:
    def __init__(__self__, *,
                 seq_num: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] seq_num: Member sequence number.
        """
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class VirtualwanlinkHealthCheckSlaArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 jitter_threshold: Optional[pulumi.Input[int]] = None,
                 latency_threshold: Optional[pulumi.Input[int]] = None,
                 link_cost_factor: Optional[pulumi.Input[str]] = None,
                 packetloss_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: SLA ID.
        :param pulumi.Input[int] jitter_threshold: Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        :param pulumi.Input[int] latency_threshold: Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        :param pulumi.Input[str] link_cost_factor: Criteria on which to base link selection. Valid values: `latency`, `jitter`, `packet-loss`.
        :param pulumi.Input[int] packetloss_threshold: Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if jitter_threshold is not None:
            pulumi.set(__self__, "jitter_threshold", jitter_threshold)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if packetloss_threshold is not None:
            pulumi.set(__self__, "packetloss_threshold", packetloss_threshold)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="jitterThreshold")
    def jitter_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        """
        return pulumi.get(self, "jitter_threshold")

    @jitter_threshold.setter
    def jitter_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jitter_threshold", value)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        """
        return pulumi.get(self, "latency_threshold")

    @latency_threshold.setter
    def latency_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_threshold", value)

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Criteria on which to base link selection. Valid values: `latency`, `jitter`, `packet-loss`.
        """
        return pulumi.get(self, "link_cost_factor")

    @link_cost_factor.setter
    def link_cost_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_cost_factor", value)

    @property
    @pulumi.getter(name="packetlossThreshold")
    def packetloss_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
        """
        return pulumi.get(self, "packetloss_threshold")

    @packetloss_threshold.setter
    def packetloss_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packetloss_threshold", value)


@pulumi.input_type
class VirtualwanlinkMemberArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 ingress_spillover_threshold: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source6: Optional[pulumi.Input[str]] = None,
                 spillover_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 volume_ratio: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] comment: Comments.
        :param pulumi.Input[int] cost: Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
        :param pulumi.Input[str] gateway: The default gateway for this interface. Usually the default gateway of the Internet service provider that this interface is connected to.
        :param pulumi.Input[str] gateway6: IPv6 gateway.
        :param pulumi.Input[int] ingress_spillover_threshold: Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[int] priority: Priority of the interface (0 - 4294967295). Used for SD-WAN rules or priority rules.
        :param pulumi.Input[int] seq_num: Member sequence number.
        :param pulumi.Input[str] source: Source IP address used in the health-check packet to the server.
        :param pulumi.Input[str] source6: Source IPv6 address used in the health-check packet to the server.
        :param pulumi.Input[int] spillover_threshold: Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        :param pulumi.Input[str] status: Enable/disable this interface in the SD-WAN. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] volume_ratio: Measured volume ratio (this value / sum of all values = percentage of link volume, 0 - 255).
        :param pulumi.Input[int] weight: Weight of this interface for weighted load balancing. (0 - 255) More traffic is directed to interfaces with higher weights.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ingress_spillover_threshold is not None:
            pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source6 is not None:
            pulumi.set(__self__, "source6", source6)
        if spillover_threshold is not None:
            pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if volume_ratio is not None:
            pulumi.set(__self__, "volume_ratio", volume_ratio)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        The default gateway for this interface. Usually the default gateway of the Internet service provider that this interface is connected to.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 gateway.
        """
        return pulumi.get(self, "gateway6")

    @gateway6.setter
    def gateway6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway6", value)

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        """
        return pulumi.get(self, "ingress_spillover_threshold")

    @ingress_spillover_threshold.setter
    def ingress_spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ingress_spillover_threshold", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the interface (0 - 4294967295). Used for SD-WAN rules or priority rules.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def source6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source6")

    @source6.setter
    def source6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source6", value)

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        """
        return pulumi.get(self, "spillover_threshold")

    @spillover_threshold.setter
    def spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spillover_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this interface in the SD-WAN. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="volumeRatio")
    def volume_ratio(self) -> Optional[pulumi.Input[int]]:
        """
        Measured volume ratio (this value / sum of all values = percentage of link volume, 0 - 255).
        """
        return pulumi.get(self, "volume_ratio")

    @volume_ratio.setter
    def volume_ratio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_ratio", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of this interface for weighted load balancing. (0 - 255) More traffic is directed to interfaces with higher weights.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class VirtualwanlinkNeighborArgs:
    def __init__(__self__, *,
                 health_check: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 member: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 sla_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] health_check: SD-WAN health-check name.
        :param pulumi.Input[str] ip: IP address of neighbor.
        :param pulumi.Input[int] member: Member sequence number.
        :param pulumi.Input[str] role: Role of neighbor. Valid values: `standalone`, `primary`, `secondary`.
        :param pulumi.Input[int] sla_id: SLA ID.
        """
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        SD-WAN health-check name.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of neighbor.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def member(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "member")

    @member.setter
    def member(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role of neighbor. Valid values: `standalone`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[pulumi.Input[int]]:
        """
        SLA ID.
        """
        return pulumi.get(self, "sla_id")

    @sla_id.setter
    def sla_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_id", value)


@pulumi.input_type
class VirtualwanlinkServiceArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth_weight: Optional[pulumi.Input[int]] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 dscp_forward: Optional[pulumi.Input[str]] = None,
                 dscp_forward_tag: Optional[pulumi.Input[str]] = None,
                 dscp_reverse: Optional[pulumi.Input[str]] = None,
                 dscp_reverse_tag: Optional[pulumi.Input[str]] = None,
                 dst6s: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceDst6Args']]]] = None,
                 dst_negate: Optional[pulumi.Input[str]] = None,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceDstArgs']]]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceGroupArgs']]]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 hold_down_time: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 input_device_negate: Optional[pulumi.Input[str]] = None,
                 input_devices: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInputDeviceArgs']]]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_app_ctrl_groups: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceAppCtrlGroupArgs']]]] = None,
                 internet_service_app_ctrls: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceAppCtrlArgs']]]] = None,
                 internet_service_ctrl_groups: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCtrlGroupArgs']]]] = None,
                 internet_service_ctrls: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCtrlArgs']]]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceGroupArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceIdArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceNameArgs']]]] = None,
                 jitter_weight: Optional[pulumi.Input[int]] = None,
                 latency_weight: Optional[pulumi.Input[int]] = None,
                 link_cost_factor: Optional[pulumi.Input[str]] = None,
                 link_cost_threshold: Optional[pulumi.Input[int]] = None,
                 member: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_loss_weight: Optional[pulumi.Input[int]] = None,
                 priority_members: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServicePriorityMemberArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 quality_link: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 route_tag: Optional[pulumi.Input[int]] = None,
                 sla_compare_method: Optional[pulumi.Input[str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceSlaArgs']]]] = None,
                 src6s: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceSrc6Args']]]] = None,
                 src_negate: Optional[pulumi.Input[str]] = None,
                 srcs: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceSrcArgs']]]] = None,
                 standalone_action: Optional[pulumi.Input[str]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceUserArgs']]]] = None):
        """
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[int] bandwidth_weight: Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
        :param pulumi.Input[str] default: Enable/disable use of SD-WAN as default service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dscp_forward: Enable/disable forward traffic DSCP tag. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dscp_forward_tag: Forward traffic DSCP tag.
        :param pulumi.Input[str] dscp_reverse: Enable/disable reverse traffic DSCP tag. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dscp_reverse_tag: Reverse traffic DSCP tag.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceDst6Args']]] dst6s: Destination address6 name. The structure of `dst6` block is documented below.
        :param pulumi.Input[str] dst_negate: Enable/disable negation of destination address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceDstArgs']]] dsts: Destination address name. The structure of `dst` block is documented below.
        :param pulumi.Input[int] end_port: End destination port number.
        :param pulumi.Input[str] gateway: Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceGroupArgs']]] groups: User groups. The structure of `groups` block is documented below.
        :param pulumi.Input[str] health_check: Health check.
        :param pulumi.Input[int] hold_down_time: Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
        :param pulumi.Input[int] id: Priority rule ID (1 - 4000).
        :param pulumi.Input[str] input_device_negate: Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInputDeviceArgs']]] input_devices: Source interface name. The structure of `input_device` block is documented below.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet service for application-based load balancing. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceAppCtrlGroupArgs']]] internet_service_app_ctrl_groups: Application control based Internet Service group list. The structure of `internet_service_app_ctrl_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceAppCtrlArgs']]] internet_service_app_ctrls: Application control based Internet Service ID list. The structure of `internet_service_app_ctrl` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCtrlGroupArgs']]] internet_service_ctrl_groups: Control-based Internet Service group list. The structure of `internet_service_ctrl_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCtrlArgs']]] internet_service_ctrls: Control-based Internet Service ID list. The structure of `internet_service_ctrl` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCustomGroupArgs']]] internet_service_custom_groups: Custom Internet Service group list. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCustomArgs']]] internet_service_customs: Custom Internet service name list. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceGroupArgs']]] internet_service_groups: Internet Service group list. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceIdArgs']]] internet_service_ids: Internet service ID list. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceNameArgs']]] internet_service_names: Internet service name list. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[int] jitter_weight: Coefficient of jitter in the formula of custom-profile-1.
        :param pulumi.Input[int] latency_weight: Coefficient of latency in the formula of custom-profile-1.
        :param pulumi.Input[str] link_cost_factor: Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        :param pulumi.Input[int] link_cost_threshold: Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
        :param pulumi.Input[int] member: Member sequence number.
        :param pulumi.Input[str] mode: Control how the priority rule sets the priority of interfaces in the SD-WAN. Valid values: `auto`, `manual`, `priority`, `sla`, `load-balance`.
        :param pulumi.Input[str] name: Priority rule name.
        :param pulumi.Input[int] packet_loss_weight: Coefficient of packet-loss in the formula of custom-profile-1.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServicePriorityMemberArgs']]] priority_members: Member sequence number list. The structure of `priority_members` block is documented below.
        :param pulumi.Input[int] protocol: Protocol number.
        :param pulumi.Input[int] quality_link: Quality grade.
        :param pulumi.Input[str] role: Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        :param pulumi.Input[int] route_tag: IPv4 route map route-tag.
        :param pulumi.Input[str] sla_compare_method: Method to compare SLA value for sla and load balance mode.  Valid values: `order`, `number`.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceSlaArgs']]] slas: Service level agreement (SLA). The structure of `sla` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceSrc6Args']]] src6s: Source address6 name. The structure of `src6` block is documented below.
        :param pulumi.Input[str] src_negate: Enable/disable negation of source address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceSrcArgs']]] srcs: Source address name. The structure of `src` block is documented below.
        :param pulumi.Input[str] standalone_action: Enable/disable service when selected neighbor role is standalone while service role is not standalone. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] start_port: Start destination port number.
        :param pulumi.Input[str] status: Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tos: Type of service bit pattern.
        :param pulumi.Input[str] tos_mask: Type of service evaluated bits.
        :param pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceUserArgs']]] users: User name. The structure of `users` block is documented below.
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if bandwidth_weight is not None:
            pulumi.set(__self__, "bandwidth_weight", bandwidth_weight)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dscp_forward is not None:
            pulumi.set(__self__, "dscp_forward", dscp_forward)
        if dscp_forward_tag is not None:
            pulumi.set(__self__, "dscp_forward_tag", dscp_forward_tag)
        if dscp_reverse is not None:
            pulumi.set(__self__, "dscp_reverse", dscp_reverse)
        if dscp_reverse_tag is not None:
            pulumi.set(__self__, "dscp_reverse_tag", dscp_reverse_tag)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dst_negate is not None:
            pulumi.set(__self__, "dst_negate", dst_negate)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if hold_down_time is not None:
            pulumi.set(__self__, "hold_down_time", hold_down_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if input_device_negate is not None:
            pulumi.set(__self__, "input_device_negate", input_device_negate)
        if input_devices is not None:
            pulumi.set(__self__, "input_devices", input_devices)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_app_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_app_ctrl_groups", internet_service_app_ctrl_groups)
        if internet_service_app_ctrls is not None:
            pulumi.set(__self__, "internet_service_app_ctrls", internet_service_app_ctrls)
        if internet_service_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_ctrl_groups", internet_service_ctrl_groups)
        if internet_service_ctrls is not None:
            pulumi.set(__self__, "internet_service_ctrls", internet_service_ctrls)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if jitter_weight is not None:
            pulumi.set(__self__, "jitter_weight", jitter_weight)
        if latency_weight is not None:
            pulumi.set(__self__, "latency_weight", latency_weight)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if link_cost_threshold is not None:
            pulumi.set(__self__, "link_cost_threshold", link_cost_threshold)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_loss_weight is not None:
            pulumi.set(__self__, "packet_loss_weight", packet_loss_weight)
        if priority_members is not None:
            pulumi.set(__self__, "priority_members", priority_members)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_link is not None:
            pulumi.set(__self__, "quality_link", quality_link)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if route_tag is not None:
            pulumi.set(__self__, "route_tag", route_tag)
        if sla_compare_method is not None:
            pulumi.set(__self__, "sla_compare_method", sla_compare_method)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if src6s is not None:
            pulumi.set(__self__, "src6s", src6s)
        if src_negate is not None:
            pulumi.set(__self__, "src_negate", src_negate)
        if srcs is not None:
            pulumi.set(__self__, "srcs", srcs)
        if standalone_action is not None:
            pulumi.set(__self__, "standalone_action", standalone_action)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter(name="bandwidthWeight")
    def bandwidth_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
        """
        return pulumi.get(self, "bandwidth_weight")

    @bandwidth_weight.setter
    def bandwidth_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_weight", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of SD-WAN as default service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="dscpForward")
    def dscp_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forward traffic DSCP tag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_forward")

    @dscp_forward.setter
    def dscp_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_forward", value)

    @property
    @pulumi.getter(name="dscpForwardTag")
    def dscp_forward_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Forward traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_forward_tag")

    @dscp_forward_tag.setter
    def dscp_forward_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_forward_tag", value)

    @property
    @pulumi.getter(name="dscpReverse")
    def dscp_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable reverse traffic DSCP tag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_reverse")

    @dscp_reverse.setter
    def dscp_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_reverse", value)

    @property
    @pulumi.getter(name="dscpReverseTag")
    def dscp_reverse_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Reverse traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_reverse_tag")

    @dscp_reverse_tag.setter
    def dscp_reverse_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_reverse_tag", value)

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceDst6Args']]]]:
        """
        Destination address6 name. The structure of `dst6` block is documented below.
        """
        return pulumi.get(self, "dst6s")

    @dst6s.setter
    def dst6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceDst6Args']]]]):
        pulumi.set(self, "dst6s", value)

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negation of destination address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dst_negate")

    @dst_negate.setter
    def dst_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_negate", value)

    @property
    @pulumi.getter
    def dsts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceDstArgs']]]]:
        """
        Destination address name. The structure of `dst` block is documented below.
        """
        return pulumi.get(self, "dsts")

    @dsts.setter
    def dsts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceDstArgs']]]]):
        pulumi.set(self, "dsts", value)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        End destination port number.
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceGroupArgs']]]]:
        """
        User groups. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        Health check.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> Optional[pulumi.Input[int]]:
        """
        Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
        """
        return pulumi.get(self, "hold_down_time")

    @hold_down_time.setter
    def hold_down_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hold_down_time", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Priority rule ID (1 - 4000).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "input_device_negate")

    @input_device_negate.setter
    def input_device_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_device_negate", value)

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInputDeviceArgs']]]]:
        """
        Source interface name. The structure of `input_device` block is documented below.
        """
        return pulumi.get(self, "input_devices")

    @input_devices.setter
    def input_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInputDeviceArgs']]]]):
        pulumi.set(self, "input_devices", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet service for application-based load balancing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetServiceAppCtrlGroups")
    def internet_service_app_ctrl_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceAppCtrlGroupArgs']]]]:
        """
        Application control based Internet Service group list. The structure of `internet_service_app_ctrl_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrl_groups")

    @internet_service_app_ctrl_groups.setter
    def internet_service_app_ctrl_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceAppCtrlGroupArgs']]]]):
        pulumi.set(self, "internet_service_app_ctrl_groups", value)

    @property
    @pulumi.getter(name="internetServiceAppCtrls")
    def internet_service_app_ctrls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceAppCtrlArgs']]]]:
        """
        Application control based Internet Service ID list. The structure of `internet_service_app_ctrl` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrls")

    @internet_service_app_ctrls.setter
    def internet_service_app_ctrls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceAppCtrlArgs']]]]):
        pulumi.set(self, "internet_service_app_ctrls", value)

    @property
    @pulumi.getter(name="internetServiceCtrlGroups")
    def internet_service_ctrl_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCtrlGroupArgs']]]]:
        """
        Control-based Internet Service group list. The structure of `internet_service_ctrl_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_ctrl_groups")

    @internet_service_ctrl_groups.setter
    def internet_service_ctrl_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCtrlGroupArgs']]]]):
        pulumi.set(self, "internet_service_ctrl_groups", value)

    @property
    @pulumi.getter(name="internetServiceCtrls")
    def internet_service_ctrls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCtrlArgs']]]]:
        """
        Control-based Internet Service ID list. The structure of `internet_service_ctrl` block is documented below.
        """
        return pulumi.get(self, "internet_service_ctrls")

    @internet_service_ctrls.setter
    def internet_service_ctrls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCtrlArgs']]]]):
        pulumi.set(self, "internet_service_ctrls", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCustomGroupArgs']]]]:
        """
        Custom Internet Service group list. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCustomArgs']]]]:
        """
        Custom Internet service name list. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceGroupArgs']]]]:
        """
        Internet Service group list. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceIdArgs']]]]:
        """
        Internet service ID list. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceNameArgs']]]]:
        """
        Internet service name list. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="jitterWeight")
    def jitter_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of jitter in the formula of custom-profile-1.
        """
        return pulumi.get(self, "jitter_weight")

    @jitter_weight.setter
    def jitter_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jitter_weight", value)

    @property
    @pulumi.getter(name="latencyWeight")
    def latency_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of latency in the formula of custom-profile-1.
        """
        return pulumi.get(self, "latency_weight")

    @latency_weight.setter
    def latency_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_weight", value)

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        """
        return pulumi.get(self, "link_cost_factor")

    @link_cost_factor.setter
    def link_cost_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_cost_factor", value)

    @property
    @pulumi.getter(name="linkCostThreshold")
    def link_cost_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
        """
        return pulumi.get(self, "link_cost_threshold")

    @link_cost_threshold.setter
    def link_cost_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_cost_threshold", value)

    @property
    @pulumi.getter
    def member(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "member")

    @member.setter
    def member(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Control how the priority rule sets the priority of interfaces in the SD-WAN. Valid values: `auto`, `manual`, `priority`, `sla`, `load-balance`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Priority rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetLossWeight")
    def packet_loss_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of packet-loss in the formula of custom-profile-1.
        """
        return pulumi.get(self, "packet_loss_weight")

    @packet_loss_weight.setter
    def packet_loss_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_loss_weight", value)

    @property
    @pulumi.getter(name="priorityMembers")
    def priority_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServicePriorityMemberArgs']]]]:
        """
        Member sequence number list. The structure of `priority_members` block is documented below.
        """
        return pulumi.get(self, "priority_members")

    @priority_members.setter
    def priority_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServicePriorityMemberArgs']]]]):
        pulumi.set(self, "priority_members", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Protocol number.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="qualityLink")
    def quality_link(self) -> Optional[pulumi.Input[int]]:
        """
        Quality grade.
        """
        return pulumi.get(self, "quality_link")

    @quality_link.setter
    def quality_link(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quality_link", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> Optional[pulumi.Input[int]]:
        """
        IPv4 route map route-tag.
        """
        return pulumi.get(self, "route_tag")

    @route_tag.setter
    def route_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_tag", value)

    @property
    @pulumi.getter(name="slaCompareMethod")
    def sla_compare_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method to compare SLA value for sla and load balance mode.  Valid values: `order`, `number`.
        """
        return pulumi.get(self, "sla_compare_method")

    @sla_compare_method.setter
    def sla_compare_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_compare_method", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceSlaArgs']]]]:
        """
        Service level agreement (SLA). The structure of `sla` block is documented below.
        """
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter
    def src6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceSrc6Args']]]]:
        """
        Source address6 name. The structure of `src6` block is documented below.
        """
        return pulumi.get(self, "src6s")

    @src6s.setter
    def src6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceSrc6Args']]]]):
        pulumi.set(self, "src6s", value)

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negation of source address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "src_negate")

    @src_negate.setter
    def src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_negate", value)

    @property
    @pulumi.getter
    def srcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceSrcArgs']]]]:
        """
        Source address name. The structure of `src` block is documented below.
        """
        return pulumi.get(self, "srcs")

    @srcs.setter
    def srcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceSrcArgs']]]]):
        pulumi.set(self, "srcs", value)

    @property
    @pulumi.getter(name="standaloneAction")
    def standalone_action(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable service when selected neighbor role is standalone while service role is not standalone. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "standalone_action")

    @standalone_action.setter
    def standalone_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standalone_action", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Start destination port number.
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        """
        Type of service bit pattern.
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Type of service evaluated bits.
        """
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceUserArgs']]]]:
        """
        User name. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualwanlinkServiceUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class VirtualwanlinkServiceDst6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkServiceDstArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkServiceInputDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkServiceInternetServiceAppCtrlArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Application control based Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Application control based Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class VirtualwanlinkServiceInternetServiceAppCtrlGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application control based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application control based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkServiceInternetServiceCtrlArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Control-based Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Control-based Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class VirtualwanlinkServiceInternetServiceCtrlGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkServiceInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkServiceInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkServiceInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkServiceInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Internet service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class VirtualwanlinkServiceInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Internet service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkServicePriorityMemberArgs:
    def __init__(__self__, *,
                 seq_num: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] seq_num: Member sequence number.
        """
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class VirtualwanlinkServiceSlaArgs:
    def __init__(__self__, *,
                 health_check: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] health_check: Virtual WAN Link health-check.
        :param pulumi.Input[int] id: SLA ID.
        """
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual WAN Link health-check.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class VirtualwanlinkServiceSrc6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkServiceSrcArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address6 or address6 group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address6 or address6 group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkServiceUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: User name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwanlinkZoneArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VirtualwirepairMemberArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class VxlanRemoteIp6Args:
    def __init__(__self__, *,
                 ip6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip6: IPv6 address.
        """
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address.
        """
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6", value)


@pulumi.input_type
class VxlanRemoteIpArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip: IPv4 address.
               
               The `remote_ip6` block supports:
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address.

        The `remote_ip6` block supports:
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class ZoneInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Select interfaces to add to the zone.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Select interfaces to add to the zone.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class ZoneTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tagging entry name.
        :param pulumi.Input[Sequence[pulumi.Input['ZoneTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tagging entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ZoneTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


