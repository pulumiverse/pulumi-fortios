# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PasswordpolicyArgs', 'Passwordpolicy']

@pulumi.input_type
class PasswordpolicyArgs:
    def __init__(__self__, *,
                 apply_to: Optional[pulumi.Input[str]] = None,
                 change4_characters: Optional[pulumi.Input[str]] = None,
                 expire_day: Optional[pulumi.Input[int]] = None,
                 expire_status: Optional[pulumi.Input[str]] = None,
                 min_change_characters: Optional[pulumi.Input[int]] = None,
                 min_lower_case_letter: Optional[pulumi.Input[int]] = None,
                 min_non_alphanumeric: Optional[pulumi.Input[int]] = None,
                 min_number: Optional[pulumi.Input[int]] = None,
                 min_upper_case_letter: Optional[pulumi.Input[int]] = None,
                 minimum_length: Optional[pulumi.Input[int]] = None,
                 reuse_password: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Passwordpolicy resource.
        :param pulumi.Input[str] apply_to: Apply password policy to administrator passwords or IPsec pre-shared keys or both. Separate entries with a space. Valid values: `admin-password`, `ipsec-preshared-key`.
        :param pulumi.Input[str] change4_characters: Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] expire_day: Number of days after which passwords expire (1 - 999 days, default = 90).
        :param pulumi.Input[str] expire_status: Enable/disable password expiration. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] min_change_characters: Minimum number of unique characters in new password which do not exist in old password (This attribute overrides reuse-password if both are enabled).
        :param pulumi.Input[int] min_lower_case_letter: Minimum number of lowercase characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] min_non_alphanumeric: Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] min_number: Minimum number of numeric characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] min_upper_case_letter: Minimum number of uppercase characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] minimum_length: Minimum password length (8 - 128, default = 8).
        :param pulumi.Input[str] reuse_password: Enable/disable reusing of password (if both reuse-password and change-4-characters are enabled, change-4-characters overrides). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if apply_to is not None:
            pulumi.set(__self__, "apply_to", apply_to)
        if change4_characters is not None:
            pulumi.set(__self__, "change4_characters", change4_characters)
        if expire_day is not None:
            pulumi.set(__self__, "expire_day", expire_day)
        if expire_status is not None:
            pulumi.set(__self__, "expire_status", expire_status)
        if min_change_characters is not None:
            pulumi.set(__self__, "min_change_characters", min_change_characters)
        if min_lower_case_letter is not None:
            pulumi.set(__self__, "min_lower_case_letter", min_lower_case_letter)
        if min_non_alphanumeric is not None:
            pulumi.set(__self__, "min_non_alphanumeric", min_non_alphanumeric)
        if min_number is not None:
            pulumi.set(__self__, "min_number", min_number)
        if min_upper_case_letter is not None:
            pulumi.set(__self__, "min_upper_case_letter", min_upper_case_letter)
        if minimum_length is not None:
            pulumi.set(__self__, "minimum_length", minimum_length)
        if reuse_password is not None:
            pulumi.set(__self__, "reuse_password", reuse_password)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="applyTo")
    def apply_to(self) -> Optional[pulumi.Input[str]]:
        """
        Apply password policy to administrator passwords or IPsec pre-shared keys or both. Separate entries with a space. Valid values: `admin-password`, `ipsec-preshared-key`.
        """
        return pulumi.get(self, "apply_to")

    @apply_to.setter
    def apply_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apply_to", value)

    @property
    @pulumi.getter(name="change4Characters")
    def change4_characters(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "change4_characters")

    @change4_characters.setter
    def change4_characters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "change4_characters", value)

    @property
    @pulumi.getter(name="expireDay")
    def expire_day(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days after which passwords expire (1 - 999 days, default = 90).
        """
        return pulumi.get(self, "expire_day")

    @expire_day.setter
    def expire_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire_day", value)

    @property
    @pulumi.getter(name="expireStatus")
    def expire_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable password expiration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "expire_status")

    @expire_status.setter
    def expire_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_status", value)

    @property
    @pulumi.getter(name="minChangeCharacters")
    def min_change_characters(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of unique characters in new password which do not exist in old password (This attribute overrides reuse-password if both are enabled).
        """
        return pulumi.get(self, "min_change_characters")

    @min_change_characters.setter
    def min_change_characters(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_change_characters", value)

    @property
    @pulumi.getter(name="minLowerCaseLetter")
    def min_lower_case_letter(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of lowercase characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_lower_case_letter")

    @min_lower_case_letter.setter
    def min_lower_case_letter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_lower_case_letter", value)

    @property
    @pulumi.getter(name="minNonAlphanumeric")
    def min_non_alphanumeric(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_non_alphanumeric")

    @min_non_alphanumeric.setter
    def min_non_alphanumeric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_non_alphanumeric", value)

    @property
    @pulumi.getter(name="minNumber")
    def min_number(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of numeric characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_number")

    @min_number.setter
    def min_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_number", value)

    @property
    @pulumi.getter(name="minUpperCaseLetter")
    def min_upper_case_letter(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of uppercase characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_upper_case_letter")

    @min_upper_case_letter.setter
    def min_upper_case_letter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_upper_case_letter", value)

    @property
    @pulumi.getter(name="minimumLength")
    def minimum_length(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum password length (8 - 128, default = 8).
        """
        return pulumi.get(self, "minimum_length")

    @minimum_length.setter
    def minimum_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_length", value)

    @property
    @pulumi.getter(name="reusePassword")
    def reuse_password(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable reusing of password (if both reuse-password and change-4-characters are enabled, change-4-characters overrides). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "reuse_password")

    @reuse_password.setter
    def reuse_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reuse_password", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _PasswordpolicyState:
    def __init__(__self__, *,
                 apply_to: Optional[pulumi.Input[str]] = None,
                 change4_characters: Optional[pulumi.Input[str]] = None,
                 expire_day: Optional[pulumi.Input[int]] = None,
                 expire_status: Optional[pulumi.Input[str]] = None,
                 min_change_characters: Optional[pulumi.Input[int]] = None,
                 min_lower_case_letter: Optional[pulumi.Input[int]] = None,
                 min_non_alphanumeric: Optional[pulumi.Input[int]] = None,
                 min_number: Optional[pulumi.Input[int]] = None,
                 min_upper_case_letter: Optional[pulumi.Input[int]] = None,
                 minimum_length: Optional[pulumi.Input[int]] = None,
                 reuse_password: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Passwordpolicy resources.
        :param pulumi.Input[str] apply_to: Apply password policy to administrator passwords or IPsec pre-shared keys or both. Separate entries with a space. Valid values: `admin-password`, `ipsec-preshared-key`.
        :param pulumi.Input[str] change4_characters: Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] expire_day: Number of days after which passwords expire (1 - 999 days, default = 90).
        :param pulumi.Input[str] expire_status: Enable/disable password expiration. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] min_change_characters: Minimum number of unique characters in new password which do not exist in old password (This attribute overrides reuse-password if both are enabled).
        :param pulumi.Input[int] min_lower_case_letter: Minimum number of lowercase characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] min_non_alphanumeric: Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] min_number: Minimum number of numeric characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] min_upper_case_letter: Minimum number of uppercase characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] minimum_length: Minimum password length (8 - 128, default = 8).
        :param pulumi.Input[str] reuse_password: Enable/disable reusing of password (if both reuse-password and change-4-characters are enabled, change-4-characters overrides). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if apply_to is not None:
            pulumi.set(__self__, "apply_to", apply_to)
        if change4_characters is not None:
            pulumi.set(__self__, "change4_characters", change4_characters)
        if expire_day is not None:
            pulumi.set(__self__, "expire_day", expire_day)
        if expire_status is not None:
            pulumi.set(__self__, "expire_status", expire_status)
        if min_change_characters is not None:
            pulumi.set(__self__, "min_change_characters", min_change_characters)
        if min_lower_case_letter is not None:
            pulumi.set(__self__, "min_lower_case_letter", min_lower_case_letter)
        if min_non_alphanumeric is not None:
            pulumi.set(__self__, "min_non_alphanumeric", min_non_alphanumeric)
        if min_number is not None:
            pulumi.set(__self__, "min_number", min_number)
        if min_upper_case_letter is not None:
            pulumi.set(__self__, "min_upper_case_letter", min_upper_case_letter)
        if minimum_length is not None:
            pulumi.set(__self__, "minimum_length", minimum_length)
        if reuse_password is not None:
            pulumi.set(__self__, "reuse_password", reuse_password)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="applyTo")
    def apply_to(self) -> Optional[pulumi.Input[str]]:
        """
        Apply password policy to administrator passwords or IPsec pre-shared keys or both. Separate entries with a space. Valid values: `admin-password`, `ipsec-preshared-key`.
        """
        return pulumi.get(self, "apply_to")

    @apply_to.setter
    def apply_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apply_to", value)

    @property
    @pulumi.getter(name="change4Characters")
    def change4_characters(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "change4_characters")

    @change4_characters.setter
    def change4_characters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "change4_characters", value)

    @property
    @pulumi.getter(name="expireDay")
    def expire_day(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days after which passwords expire (1 - 999 days, default = 90).
        """
        return pulumi.get(self, "expire_day")

    @expire_day.setter
    def expire_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire_day", value)

    @property
    @pulumi.getter(name="expireStatus")
    def expire_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable password expiration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "expire_status")

    @expire_status.setter
    def expire_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_status", value)

    @property
    @pulumi.getter(name="minChangeCharacters")
    def min_change_characters(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of unique characters in new password which do not exist in old password (This attribute overrides reuse-password if both are enabled).
        """
        return pulumi.get(self, "min_change_characters")

    @min_change_characters.setter
    def min_change_characters(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_change_characters", value)

    @property
    @pulumi.getter(name="minLowerCaseLetter")
    def min_lower_case_letter(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of lowercase characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_lower_case_letter")

    @min_lower_case_letter.setter
    def min_lower_case_letter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_lower_case_letter", value)

    @property
    @pulumi.getter(name="minNonAlphanumeric")
    def min_non_alphanumeric(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_non_alphanumeric")

    @min_non_alphanumeric.setter
    def min_non_alphanumeric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_non_alphanumeric", value)

    @property
    @pulumi.getter(name="minNumber")
    def min_number(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of numeric characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_number")

    @min_number.setter
    def min_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_number", value)

    @property
    @pulumi.getter(name="minUpperCaseLetter")
    def min_upper_case_letter(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of uppercase characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_upper_case_letter")

    @min_upper_case_letter.setter
    def min_upper_case_letter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_upper_case_letter", value)

    @property
    @pulumi.getter(name="minimumLength")
    def minimum_length(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum password length (8 - 128, default = 8).
        """
        return pulumi.get(self, "minimum_length")

    @minimum_length.setter
    def minimum_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_length", value)

    @property
    @pulumi.getter(name="reusePassword")
    def reuse_password(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable reusing of password (if both reuse-password and change-4-characters are enabled, change-4-characters overrides). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "reuse_password")

    @reuse_password.setter
    def reuse_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reuse_password", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Passwordpolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apply_to: Optional[pulumi.Input[str]] = None,
                 change4_characters: Optional[pulumi.Input[str]] = None,
                 expire_day: Optional[pulumi.Input[int]] = None,
                 expire_status: Optional[pulumi.Input[str]] = None,
                 min_change_characters: Optional[pulumi.Input[int]] = None,
                 min_lower_case_letter: Optional[pulumi.Input[int]] = None,
                 min_non_alphanumeric: Optional[pulumi.Input[int]] = None,
                 min_number: Optional[pulumi.Input[int]] = None,
                 min_upper_case_letter: Optional[pulumi.Input[int]] = None,
                 minimum_length: Optional[pulumi.Input[int]] = None,
                 reuse_password: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure password policy for locally defined administrator passwords and IPsec VPN pre-shared keys.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Passwordpolicy("trname",
            apply_to="admin-password",
            change4_characters="disable",
            expire_day=90,
            expire_status="disable",
            min_lower_case_letter=0,
            min_non_alphanumeric=0,
            min_number=0,
            min_upper_case_letter=0,
            minimum_length=8,
            reuse_password="enable",
            status="disable")
        ```

        ## Import

        System PasswordPolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/passwordpolicy:Passwordpolicy labelname SystemPasswordPolicy
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/passwordpolicy:Passwordpolicy labelname SystemPasswordPolicy
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] apply_to: Apply password policy to administrator passwords or IPsec pre-shared keys or both. Separate entries with a space. Valid values: `admin-password`, `ipsec-preshared-key`.
        :param pulumi.Input[str] change4_characters: Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] expire_day: Number of days after which passwords expire (1 - 999 days, default = 90).
        :param pulumi.Input[str] expire_status: Enable/disable password expiration. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] min_change_characters: Minimum number of unique characters in new password which do not exist in old password (This attribute overrides reuse-password if both are enabled).
        :param pulumi.Input[int] min_lower_case_letter: Minimum number of lowercase characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] min_non_alphanumeric: Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] min_number: Minimum number of numeric characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] min_upper_case_letter: Minimum number of uppercase characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] minimum_length: Minimum password length (8 - 128, default = 8).
        :param pulumi.Input[str] reuse_password: Enable/disable reusing of password (if both reuse-password and change-4-characters are enabled, change-4-characters overrides). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PasswordpolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure password policy for locally defined administrator passwords and IPsec VPN pre-shared keys.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Passwordpolicy("trname",
            apply_to="admin-password",
            change4_characters="disable",
            expire_day=90,
            expire_status="disable",
            min_lower_case_letter=0,
            min_non_alphanumeric=0,
            min_number=0,
            min_upper_case_letter=0,
            minimum_length=8,
            reuse_password="enable",
            status="disable")
        ```

        ## Import

        System PasswordPolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/passwordpolicy:Passwordpolicy labelname SystemPasswordPolicy
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/passwordpolicy:Passwordpolicy labelname SystemPasswordPolicy
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param PasswordpolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PasswordpolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apply_to: Optional[pulumi.Input[str]] = None,
                 change4_characters: Optional[pulumi.Input[str]] = None,
                 expire_day: Optional[pulumi.Input[int]] = None,
                 expire_status: Optional[pulumi.Input[str]] = None,
                 min_change_characters: Optional[pulumi.Input[int]] = None,
                 min_lower_case_letter: Optional[pulumi.Input[int]] = None,
                 min_non_alphanumeric: Optional[pulumi.Input[int]] = None,
                 min_number: Optional[pulumi.Input[int]] = None,
                 min_upper_case_letter: Optional[pulumi.Input[int]] = None,
                 minimum_length: Optional[pulumi.Input[int]] = None,
                 reuse_password: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PasswordpolicyArgs.__new__(PasswordpolicyArgs)

            __props__.__dict__["apply_to"] = apply_to
            __props__.__dict__["change4_characters"] = change4_characters
            __props__.__dict__["expire_day"] = expire_day
            __props__.__dict__["expire_status"] = expire_status
            __props__.__dict__["min_change_characters"] = min_change_characters
            __props__.__dict__["min_lower_case_letter"] = min_lower_case_letter
            __props__.__dict__["min_non_alphanumeric"] = min_non_alphanumeric
            __props__.__dict__["min_number"] = min_number
            __props__.__dict__["min_upper_case_letter"] = min_upper_case_letter
            __props__.__dict__["minimum_length"] = minimum_length
            __props__.__dict__["reuse_password"] = reuse_password
            __props__.__dict__["status"] = status
            __props__.__dict__["vdomparam"] = vdomparam
        super(Passwordpolicy, __self__).__init__(
            'fortios:system/passwordpolicy:Passwordpolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            apply_to: Optional[pulumi.Input[str]] = None,
            change4_characters: Optional[pulumi.Input[str]] = None,
            expire_day: Optional[pulumi.Input[int]] = None,
            expire_status: Optional[pulumi.Input[str]] = None,
            min_change_characters: Optional[pulumi.Input[int]] = None,
            min_lower_case_letter: Optional[pulumi.Input[int]] = None,
            min_non_alphanumeric: Optional[pulumi.Input[int]] = None,
            min_number: Optional[pulumi.Input[int]] = None,
            min_upper_case_letter: Optional[pulumi.Input[int]] = None,
            minimum_length: Optional[pulumi.Input[int]] = None,
            reuse_password: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Passwordpolicy':
        """
        Get an existing Passwordpolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] apply_to: Apply password policy to administrator passwords or IPsec pre-shared keys or both. Separate entries with a space. Valid values: `admin-password`, `ipsec-preshared-key`.
        :param pulumi.Input[str] change4_characters: Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] expire_day: Number of days after which passwords expire (1 - 999 days, default = 90).
        :param pulumi.Input[str] expire_status: Enable/disable password expiration. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] min_change_characters: Minimum number of unique characters in new password which do not exist in old password (This attribute overrides reuse-password if both are enabled).
        :param pulumi.Input[int] min_lower_case_letter: Minimum number of lowercase characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] min_non_alphanumeric: Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] min_number: Minimum number of numeric characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] min_upper_case_letter: Minimum number of uppercase characters in password (0 - 128, default = 0).
        :param pulumi.Input[int] minimum_length: Minimum password length (8 - 128, default = 8).
        :param pulumi.Input[str] reuse_password: Enable/disable reusing of password (if both reuse-password and change-4-characters are enabled, change-4-characters overrides). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PasswordpolicyState.__new__(_PasswordpolicyState)

        __props__.__dict__["apply_to"] = apply_to
        __props__.__dict__["change4_characters"] = change4_characters
        __props__.__dict__["expire_day"] = expire_day
        __props__.__dict__["expire_status"] = expire_status
        __props__.__dict__["min_change_characters"] = min_change_characters
        __props__.__dict__["min_lower_case_letter"] = min_lower_case_letter
        __props__.__dict__["min_non_alphanumeric"] = min_non_alphanumeric
        __props__.__dict__["min_number"] = min_number
        __props__.__dict__["min_upper_case_letter"] = min_upper_case_letter
        __props__.__dict__["minimum_length"] = minimum_length
        __props__.__dict__["reuse_password"] = reuse_password
        __props__.__dict__["status"] = status
        __props__.__dict__["vdomparam"] = vdomparam
        return Passwordpolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applyTo")
    def apply_to(self) -> pulumi.Output[str]:
        """
        Apply password policy to administrator passwords or IPsec pre-shared keys or both. Separate entries with a space. Valid values: `admin-password`, `ipsec-preshared-key`.
        """
        return pulumi.get(self, "apply_to")

    @property
    @pulumi.getter(name="change4Characters")
    def change4_characters(self) -> pulumi.Output[str]:
        """
        Enable/disable changing at least 4 characters for a new password (This attribute overrides reuse-password if both are enabled). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "change4_characters")

    @property
    @pulumi.getter(name="expireDay")
    def expire_day(self) -> pulumi.Output[int]:
        """
        Number of days after which passwords expire (1 - 999 days, default = 90).
        """
        return pulumi.get(self, "expire_day")

    @property
    @pulumi.getter(name="expireStatus")
    def expire_status(self) -> pulumi.Output[str]:
        """
        Enable/disable password expiration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "expire_status")

    @property
    @pulumi.getter(name="minChangeCharacters")
    def min_change_characters(self) -> pulumi.Output[int]:
        """
        Minimum number of unique characters in new password which do not exist in old password (This attribute overrides reuse-password if both are enabled).
        """
        return pulumi.get(self, "min_change_characters")

    @property
    @pulumi.getter(name="minLowerCaseLetter")
    def min_lower_case_letter(self) -> pulumi.Output[int]:
        """
        Minimum number of lowercase characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_lower_case_letter")

    @property
    @pulumi.getter(name="minNonAlphanumeric")
    def min_non_alphanumeric(self) -> pulumi.Output[int]:
        """
        Minimum number of non-alphanumeric characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_non_alphanumeric")

    @property
    @pulumi.getter(name="minNumber")
    def min_number(self) -> pulumi.Output[int]:
        """
        Minimum number of numeric characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_number")

    @property
    @pulumi.getter(name="minUpperCaseLetter")
    def min_upper_case_letter(self) -> pulumi.Output[int]:
        """
        Minimum number of uppercase characters in password (0 - 128, default = 0).
        """
        return pulumi.get(self, "min_upper_case_letter")

    @property
    @pulumi.getter(name="minimumLength")
    def minimum_length(self) -> pulumi.Output[int]:
        """
        Minimum password length (8 - 128, default = 8).
        """
        return pulumi.get(self, "minimum_length")

    @property
    @pulumi.getter(name="reusePassword")
    def reuse_password(self) -> pulumi.Output[str]:
        """
        Enable/disable reusing of password (if both reuse-password and change-4-characters are enabled, change-4-characters overrides). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "reuse_password")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable setting a password policy for locally defined administrator passwords and IPsec VPN pre-shared keys. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

