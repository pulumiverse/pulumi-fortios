# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SshconfigArgs', 'Sshconfig']

@pulumi.input_type
class SshconfigArgs:
    def __init__(__self__, *,
                 ssh_enc_algo: Optional[pulumi.Input[str]] = None,
                 ssh_hsk: Optional[pulumi.Input[str]] = None,
                 ssh_hsk_algo: Optional[pulumi.Input[str]] = None,
                 ssh_hsk_override: Optional[pulumi.Input[str]] = None,
                 ssh_hsk_password: Optional[pulumi.Input[str]] = None,
                 ssh_kex_algo: Optional[pulumi.Input[str]] = None,
                 ssh_mac_algo: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Sshconfig resource.
        :param pulumi.Input[str] ssh_enc_algo: Select one or more SSH ciphers. Valid values: `chacha20-poly1305@openssh.com`, `aes128-ctr`, `aes192-ctr`, `aes256-ctr`, `arcfour256`, `arcfour128`, `aes128-cbc`, `3des-cbc`, `blowfish-cbc`, `cast128-cbc`, `aes192-cbc`, `aes256-cbc`, `arcfour`, `rijndael-cbc@lysator.liu.se`, `aes128-gcm@openssh.com`, `aes256-gcm@openssh.com`.
        :param pulumi.Input[str] ssh_hsk: Config SSH host key.
        :param pulumi.Input[str] ssh_hsk_algo: Select one or more SSH hostkey algorithms. Valid values: `ssh-rsa`, `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp256`, `rsa-sha2-256`, `rsa-sha2-512`, `ssh-ed25519`.
        :param pulumi.Input[str] ssh_hsk_override: Enable/disable SSH host key override in SSH daemon. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssh_hsk_password: Password for ssh-hostkey.
        :param pulumi.Input[str] ssh_kex_algo: Select one or more SSH kex algorithms. Valid values: `diffie-hellman-group1-sha1`, `diffie-hellman-group14-sha1`, `diffie-hellman-group14-sha256`, `diffie-hellman-group16-sha512`, `diffie-hellman-group18-sha512`, `diffie-hellman-group-exchange-sha1`, `diffie-hellman-group-exchange-sha256`, `curve25519-sha256@libssh.org`, `ecdh-sha2-nistp256`, `ecdh-sha2-nistp384`, `ecdh-sha2-nistp521`.
        :param pulumi.Input[str] ssh_mac_algo: Select one or more SSH MAC algorithms. Valid values: `hmac-md5`, `hmac-md5-etm@openssh.com`, `hmac-md5-96`, `hmac-md5-96-etm@openssh.com`, `hmac-sha1`, `hmac-sha1-etm@openssh.com`, `hmac-sha2-256`, `hmac-sha2-256-etm@openssh.com`, `hmac-sha2-512`, `hmac-sha2-512-etm@openssh.com`, `hmac-ripemd160`, `hmac-ripemd160@openssh.com`, `hmac-ripemd160-etm@openssh.com`, `umac-64@openssh.com`, `umac-128@openssh.com`, `umac-64-etm@openssh.com`, `umac-128-etm@openssh.com`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if ssh_enc_algo is not None:
            pulumi.set(__self__, "ssh_enc_algo", ssh_enc_algo)
        if ssh_hsk is not None:
            pulumi.set(__self__, "ssh_hsk", ssh_hsk)
        if ssh_hsk_algo is not None:
            pulumi.set(__self__, "ssh_hsk_algo", ssh_hsk_algo)
        if ssh_hsk_override is not None:
            pulumi.set(__self__, "ssh_hsk_override", ssh_hsk_override)
        if ssh_hsk_password is not None:
            pulumi.set(__self__, "ssh_hsk_password", ssh_hsk_password)
        if ssh_kex_algo is not None:
            pulumi.set(__self__, "ssh_kex_algo", ssh_kex_algo)
        if ssh_mac_algo is not None:
            pulumi.set(__self__, "ssh_mac_algo", ssh_mac_algo)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="sshEncAlgo")
    def ssh_enc_algo(self) -> Optional[pulumi.Input[str]]:
        """
        Select one or more SSH ciphers. Valid values: `chacha20-poly1305@openssh.com`, `aes128-ctr`, `aes192-ctr`, `aes256-ctr`, `arcfour256`, `arcfour128`, `aes128-cbc`, `3des-cbc`, `blowfish-cbc`, `cast128-cbc`, `aes192-cbc`, `aes256-cbc`, `arcfour`, `rijndael-cbc@lysator.liu.se`, `aes128-gcm@openssh.com`, `aes256-gcm@openssh.com`.
        """
        return pulumi.get(self, "ssh_enc_algo")

    @ssh_enc_algo.setter
    def ssh_enc_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_enc_algo", value)

    @property
    @pulumi.getter(name="sshHsk")
    def ssh_hsk(self) -> Optional[pulumi.Input[str]]:
        """
        Config SSH host key.
        """
        return pulumi.get(self, "ssh_hsk")

    @ssh_hsk.setter
    def ssh_hsk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_hsk", value)

    @property
    @pulumi.getter(name="sshHskAlgo")
    def ssh_hsk_algo(self) -> Optional[pulumi.Input[str]]:
        """
        Select one or more SSH hostkey algorithms. Valid values: `ssh-rsa`, `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp256`, `rsa-sha2-256`, `rsa-sha2-512`, `ssh-ed25519`.
        """
        return pulumi.get(self, "ssh_hsk_algo")

    @ssh_hsk_algo.setter
    def ssh_hsk_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_hsk_algo", value)

    @property
    @pulumi.getter(name="sshHskOverride")
    def ssh_hsk_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH host key override in SSH daemon. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_hsk_override")

    @ssh_hsk_override.setter
    def ssh_hsk_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_hsk_override", value)

    @property
    @pulumi.getter(name="sshHskPassword")
    def ssh_hsk_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for ssh-hostkey.
        """
        return pulumi.get(self, "ssh_hsk_password")

    @ssh_hsk_password.setter
    def ssh_hsk_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_hsk_password", value)

    @property
    @pulumi.getter(name="sshKexAlgo")
    def ssh_kex_algo(self) -> Optional[pulumi.Input[str]]:
        """
        Select one or more SSH kex algorithms. Valid values: `diffie-hellman-group1-sha1`, `diffie-hellman-group14-sha1`, `diffie-hellman-group14-sha256`, `diffie-hellman-group16-sha512`, `diffie-hellman-group18-sha512`, `diffie-hellman-group-exchange-sha1`, `diffie-hellman-group-exchange-sha256`, `curve25519-sha256@libssh.org`, `ecdh-sha2-nistp256`, `ecdh-sha2-nistp384`, `ecdh-sha2-nistp521`.
        """
        return pulumi.get(self, "ssh_kex_algo")

    @ssh_kex_algo.setter
    def ssh_kex_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_kex_algo", value)

    @property
    @pulumi.getter(name="sshMacAlgo")
    def ssh_mac_algo(self) -> Optional[pulumi.Input[str]]:
        """
        Select one or more SSH MAC algorithms. Valid values: `hmac-md5`, `hmac-md5-etm@openssh.com`, `hmac-md5-96`, `hmac-md5-96-etm@openssh.com`, `hmac-sha1`, `hmac-sha1-etm@openssh.com`, `hmac-sha2-256`, `hmac-sha2-256-etm@openssh.com`, `hmac-sha2-512`, `hmac-sha2-512-etm@openssh.com`, `hmac-ripemd160`, `hmac-ripemd160@openssh.com`, `hmac-ripemd160-etm@openssh.com`, `umac-64@openssh.com`, `umac-128@openssh.com`, `umac-64-etm@openssh.com`, `umac-128-etm@openssh.com`.
        """
        return pulumi.get(self, "ssh_mac_algo")

    @ssh_mac_algo.setter
    def ssh_mac_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_mac_algo", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SshconfigState:
    def __init__(__self__, *,
                 ssh_enc_algo: Optional[pulumi.Input[str]] = None,
                 ssh_hsk: Optional[pulumi.Input[str]] = None,
                 ssh_hsk_algo: Optional[pulumi.Input[str]] = None,
                 ssh_hsk_override: Optional[pulumi.Input[str]] = None,
                 ssh_hsk_password: Optional[pulumi.Input[str]] = None,
                 ssh_kex_algo: Optional[pulumi.Input[str]] = None,
                 ssh_mac_algo: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Sshconfig resources.
        :param pulumi.Input[str] ssh_enc_algo: Select one or more SSH ciphers. Valid values: `chacha20-poly1305@openssh.com`, `aes128-ctr`, `aes192-ctr`, `aes256-ctr`, `arcfour256`, `arcfour128`, `aes128-cbc`, `3des-cbc`, `blowfish-cbc`, `cast128-cbc`, `aes192-cbc`, `aes256-cbc`, `arcfour`, `rijndael-cbc@lysator.liu.se`, `aes128-gcm@openssh.com`, `aes256-gcm@openssh.com`.
        :param pulumi.Input[str] ssh_hsk: Config SSH host key.
        :param pulumi.Input[str] ssh_hsk_algo: Select one or more SSH hostkey algorithms. Valid values: `ssh-rsa`, `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp256`, `rsa-sha2-256`, `rsa-sha2-512`, `ssh-ed25519`.
        :param pulumi.Input[str] ssh_hsk_override: Enable/disable SSH host key override in SSH daemon. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssh_hsk_password: Password for ssh-hostkey.
        :param pulumi.Input[str] ssh_kex_algo: Select one or more SSH kex algorithms. Valid values: `diffie-hellman-group1-sha1`, `diffie-hellman-group14-sha1`, `diffie-hellman-group14-sha256`, `diffie-hellman-group16-sha512`, `diffie-hellman-group18-sha512`, `diffie-hellman-group-exchange-sha1`, `diffie-hellman-group-exchange-sha256`, `curve25519-sha256@libssh.org`, `ecdh-sha2-nistp256`, `ecdh-sha2-nistp384`, `ecdh-sha2-nistp521`.
        :param pulumi.Input[str] ssh_mac_algo: Select one or more SSH MAC algorithms. Valid values: `hmac-md5`, `hmac-md5-etm@openssh.com`, `hmac-md5-96`, `hmac-md5-96-etm@openssh.com`, `hmac-sha1`, `hmac-sha1-etm@openssh.com`, `hmac-sha2-256`, `hmac-sha2-256-etm@openssh.com`, `hmac-sha2-512`, `hmac-sha2-512-etm@openssh.com`, `hmac-ripemd160`, `hmac-ripemd160@openssh.com`, `hmac-ripemd160-etm@openssh.com`, `umac-64@openssh.com`, `umac-128@openssh.com`, `umac-64-etm@openssh.com`, `umac-128-etm@openssh.com`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if ssh_enc_algo is not None:
            pulumi.set(__self__, "ssh_enc_algo", ssh_enc_algo)
        if ssh_hsk is not None:
            pulumi.set(__self__, "ssh_hsk", ssh_hsk)
        if ssh_hsk_algo is not None:
            pulumi.set(__self__, "ssh_hsk_algo", ssh_hsk_algo)
        if ssh_hsk_override is not None:
            pulumi.set(__self__, "ssh_hsk_override", ssh_hsk_override)
        if ssh_hsk_password is not None:
            pulumi.set(__self__, "ssh_hsk_password", ssh_hsk_password)
        if ssh_kex_algo is not None:
            pulumi.set(__self__, "ssh_kex_algo", ssh_kex_algo)
        if ssh_mac_algo is not None:
            pulumi.set(__self__, "ssh_mac_algo", ssh_mac_algo)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="sshEncAlgo")
    def ssh_enc_algo(self) -> Optional[pulumi.Input[str]]:
        """
        Select one or more SSH ciphers. Valid values: `chacha20-poly1305@openssh.com`, `aes128-ctr`, `aes192-ctr`, `aes256-ctr`, `arcfour256`, `arcfour128`, `aes128-cbc`, `3des-cbc`, `blowfish-cbc`, `cast128-cbc`, `aes192-cbc`, `aes256-cbc`, `arcfour`, `rijndael-cbc@lysator.liu.se`, `aes128-gcm@openssh.com`, `aes256-gcm@openssh.com`.
        """
        return pulumi.get(self, "ssh_enc_algo")

    @ssh_enc_algo.setter
    def ssh_enc_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_enc_algo", value)

    @property
    @pulumi.getter(name="sshHsk")
    def ssh_hsk(self) -> Optional[pulumi.Input[str]]:
        """
        Config SSH host key.
        """
        return pulumi.get(self, "ssh_hsk")

    @ssh_hsk.setter
    def ssh_hsk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_hsk", value)

    @property
    @pulumi.getter(name="sshHskAlgo")
    def ssh_hsk_algo(self) -> Optional[pulumi.Input[str]]:
        """
        Select one or more SSH hostkey algorithms. Valid values: `ssh-rsa`, `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp256`, `rsa-sha2-256`, `rsa-sha2-512`, `ssh-ed25519`.
        """
        return pulumi.get(self, "ssh_hsk_algo")

    @ssh_hsk_algo.setter
    def ssh_hsk_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_hsk_algo", value)

    @property
    @pulumi.getter(name="sshHskOverride")
    def ssh_hsk_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH host key override in SSH daemon. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_hsk_override")

    @ssh_hsk_override.setter
    def ssh_hsk_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_hsk_override", value)

    @property
    @pulumi.getter(name="sshHskPassword")
    def ssh_hsk_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for ssh-hostkey.
        """
        return pulumi.get(self, "ssh_hsk_password")

    @ssh_hsk_password.setter
    def ssh_hsk_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_hsk_password", value)

    @property
    @pulumi.getter(name="sshKexAlgo")
    def ssh_kex_algo(self) -> Optional[pulumi.Input[str]]:
        """
        Select one or more SSH kex algorithms. Valid values: `diffie-hellman-group1-sha1`, `diffie-hellman-group14-sha1`, `diffie-hellman-group14-sha256`, `diffie-hellman-group16-sha512`, `diffie-hellman-group18-sha512`, `diffie-hellman-group-exchange-sha1`, `diffie-hellman-group-exchange-sha256`, `curve25519-sha256@libssh.org`, `ecdh-sha2-nistp256`, `ecdh-sha2-nistp384`, `ecdh-sha2-nistp521`.
        """
        return pulumi.get(self, "ssh_kex_algo")

    @ssh_kex_algo.setter
    def ssh_kex_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_kex_algo", value)

    @property
    @pulumi.getter(name="sshMacAlgo")
    def ssh_mac_algo(self) -> Optional[pulumi.Input[str]]:
        """
        Select one or more SSH MAC algorithms. Valid values: `hmac-md5`, `hmac-md5-etm@openssh.com`, `hmac-md5-96`, `hmac-md5-96-etm@openssh.com`, `hmac-sha1`, `hmac-sha1-etm@openssh.com`, `hmac-sha2-256`, `hmac-sha2-256-etm@openssh.com`, `hmac-sha2-512`, `hmac-sha2-512-etm@openssh.com`, `hmac-ripemd160`, `hmac-ripemd160@openssh.com`, `hmac-ripemd160-etm@openssh.com`, `umac-64@openssh.com`, `umac-128@openssh.com`, `umac-64-etm@openssh.com`, `umac-128-etm@openssh.com`.
        """
        return pulumi.get(self, "ssh_mac_algo")

    @ssh_mac_algo.setter
    def ssh_mac_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_mac_algo", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Sshconfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ssh_enc_algo: Optional[pulumi.Input[str]] = None,
                 ssh_hsk: Optional[pulumi.Input[str]] = None,
                 ssh_hsk_algo: Optional[pulumi.Input[str]] = None,
                 ssh_hsk_override: Optional[pulumi.Input[str]] = None,
                 ssh_hsk_password: Optional[pulumi.Input[str]] = None,
                 ssh_kex_algo: Optional[pulumi.Input[str]] = None,
                 ssh_mac_algo: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure SSH config. Applies to FortiOS Version `>= 7.4.4`.

        ## Import

        System SshConfig can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/sshconfig:Sshconfig labelname SystemSshConfig
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/sshconfig:Sshconfig labelname SystemSshConfig
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ssh_enc_algo: Select one or more SSH ciphers. Valid values: `chacha20-poly1305@openssh.com`, `aes128-ctr`, `aes192-ctr`, `aes256-ctr`, `arcfour256`, `arcfour128`, `aes128-cbc`, `3des-cbc`, `blowfish-cbc`, `cast128-cbc`, `aes192-cbc`, `aes256-cbc`, `arcfour`, `rijndael-cbc@lysator.liu.se`, `aes128-gcm@openssh.com`, `aes256-gcm@openssh.com`.
        :param pulumi.Input[str] ssh_hsk: Config SSH host key.
        :param pulumi.Input[str] ssh_hsk_algo: Select one or more SSH hostkey algorithms. Valid values: `ssh-rsa`, `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp256`, `rsa-sha2-256`, `rsa-sha2-512`, `ssh-ed25519`.
        :param pulumi.Input[str] ssh_hsk_override: Enable/disable SSH host key override in SSH daemon. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssh_hsk_password: Password for ssh-hostkey.
        :param pulumi.Input[str] ssh_kex_algo: Select one or more SSH kex algorithms. Valid values: `diffie-hellman-group1-sha1`, `diffie-hellman-group14-sha1`, `diffie-hellman-group14-sha256`, `diffie-hellman-group16-sha512`, `diffie-hellman-group18-sha512`, `diffie-hellman-group-exchange-sha1`, `diffie-hellman-group-exchange-sha256`, `curve25519-sha256@libssh.org`, `ecdh-sha2-nistp256`, `ecdh-sha2-nistp384`, `ecdh-sha2-nistp521`.
        :param pulumi.Input[str] ssh_mac_algo: Select one or more SSH MAC algorithms. Valid values: `hmac-md5`, `hmac-md5-etm@openssh.com`, `hmac-md5-96`, `hmac-md5-96-etm@openssh.com`, `hmac-sha1`, `hmac-sha1-etm@openssh.com`, `hmac-sha2-256`, `hmac-sha2-256-etm@openssh.com`, `hmac-sha2-512`, `hmac-sha2-512-etm@openssh.com`, `hmac-ripemd160`, `hmac-ripemd160@openssh.com`, `hmac-ripemd160-etm@openssh.com`, `umac-64@openssh.com`, `umac-128@openssh.com`, `umac-64-etm@openssh.com`, `umac-128-etm@openssh.com`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SshconfigArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure SSH config. Applies to FortiOS Version `>= 7.4.4`.

        ## Import

        System SshConfig can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/sshconfig:Sshconfig labelname SystemSshConfig
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/sshconfig:Sshconfig labelname SystemSshConfig
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SshconfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SshconfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ssh_enc_algo: Optional[pulumi.Input[str]] = None,
                 ssh_hsk: Optional[pulumi.Input[str]] = None,
                 ssh_hsk_algo: Optional[pulumi.Input[str]] = None,
                 ssh_hsk_override: Optional[pulumi.Input[str]] = None,
                 ssh_hsk_password: Optional[pulumi.Input[str]] = None,
                 ssh_kex_algo: Optional[pulumi.Input[str]] = None,
                 ssh_mac_algo: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SshconfigArgs.__new__(SshconfigArgs)

            __props__.__dict__["ssh_enc_algo"] = ssh_enc_algo
            __props__.__dict__["ssh_hsk"] = ssh_hsk
            __props__.__dict__["ssh_hsk_algo"] = ssh_hsk_algo
            __props__.__dict__["ssh_hsk_override"] = ssh_hsk_override
            __props__.__dict__["ssh_hsk_password"] = ssh_hsk_password
            __props__.__dict__["ssh_kex_algo"] = ssh_kex_algo
            __props__.__dict__["ssh_mac_algo"] = ssh_mac_algo
            __props__.__dict__["vdomparam"] = vdomparam
        super(Sshconfig, __self__).__init__(
            'fortios:system/sshconfig:Sshconfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ssh_enc_algo: Optional[pulumi.Input[str]] = None,
            ssh_hsk: Optional[pulumi.Input[str]] = None,
            ssh_hsk_algo: Optional[pulumi.Input[str]] = None,
            ssh_hsk_override: Optional[pulumi.Input[str]] = None,
            ssh_hsk_password: Optional[pulumi.Input[str]] = None,
            ssh_kex_algo: Optional[pulumi.Input[str]] = None,
            ssh_mac_algo: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Sshconfig':
        """
        Get an existing Sshconfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ssh_enc_algo: Select one or more SSH ciphers. Valid values: `chacha20-poly1305@openssh.com`, `aes128-ctr`, `aes192-ctr`, `aes256-ctr`, `arcfour256`, `arcfour128`, `aes128-cbc`, `3des-cbc`, `blowfish-cbc`, `cast128-cbc`, `aes192-cbc`, `aes256-cbc`, `arcfour`, `rijndael-cbc@lysator.liu.se`, `aes128-gcm@openssh.com`, `aes256-gcm@openssh.com`.
        :param pulumi.Input[str] ssh_hsk: Config SSH host key.
        :param pulumi.Input[str] ssh_hsk_algo: Select one or more SSH hostkey algorithms. Valid values: `ssh-rsa`, `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp256`, `rsa-sha2-256`, `rsa-sha2-512`, `ssh-ed25519`.
        :param pulumi.Input[str] ssh_hsk_override: Enable/disable SSH host key override in SSH daemon. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssh_hsk_password: Password for ssh-hostkey.
        :param pulumi.Input[str] ssh_kex_algo: Select one or more SSH kex algorithms. Valid values: `diffie-hellman-group1-sha1`, `diffie-hellman-group14-sha1`, `diffie-hellman-group14-sha256`, `diffie-hellman-group16-sha512`, `diffie-hellman-group18-sha512`, `diffie-hellman-group-exchange-sha1`, `diffie-hellman-group-exchange-sha256`, `curve25519-sha256@libssh.org`, `ecdh-sha2-nistp256`, `ecdh-sha2-nistp384`, `ecdh-sha2-nistp521`.
        :param pulumi.Input[str] ssh_mac_algo: Select one or more SSH MAC algorithms. Valid values: `hmac-md5`, `hmac-md5-etm@openssh.com`, `hmac-md5-96`, `hmac-md5-96-etm@openssh.com`, `hmac-sha1`, `hmac-sha1-etm@openssh.com`, `hmac-sha2-256`, `hmac-sha2-256-etm@openssh.com`, `hmac-sha2-512`, `hmac-sha2-512-etm@openssh.com`, `hmac-ripemd160`, `hmac-ripemd160@openssh.com`, `hmac-ripemd160-etm@openssh.com`, `umac-64@openssh.com`, `umac-128@openssh.com`, `umac-64-etm@openssh.com`, `umac-128-etm@openssh.com`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SshconfigState.__new__(_SshconfigState)

        __props__.__dict__["ssh_enc_algo"] = ssh_enc_algo
        __props__.__dict__["ssh_hsk"] = ssh_hsk
        __props__.__dict__["ssh_hsk_algo"] = ssh_hsk_algo
        __props__.__dict__["ssh_hsk_override"] = ssh_hsk_override
        __props__.__dict__["ssh_hsk_password"] = ssh_hsk_password
        __props__.__dict__["ssh_kex_algo"] = ssh_kex_algo
        __props__.__dict__["ssh_mac_algo"] = ssh_mac_algo
        __props__.__dict__["vdomparam"] = vdomparam
        return Sshconfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="sshEncAlgo")
    def ssh_enc_algo(self) -> pulumi.Output[str]:
        """
        Select one or more SSH ciphers. Valid values: `chacha20-poly1305@openssh.com`, `aes128-ctr`, `aes192-ctr`, `aes256-ctr`, `arcfour256`, `arcfour128`, `aes128-cbc`, `3des-cbc`, `blowfish-cbc`, `cast128-cbc`, `aes192-cbc`, `aes256-cbc`, `arcfour`, `rijndael-cbc@lysator.liu.se`, `aes128-gcm@openssh.com`, `aes256-gcm@openssh.com`.
        """
        return pulumi.get(self, "ssh_enc_algo")

    @property
    @pulumi.getter(name="sshHsk")
    def ssh_hsk(self) -> pulumi.Output[str]:
        """
        Config SSH host key.
        """
        return pulumi.get(self, "ssh_hsk")

    @property
    @pulumi.getter(name="sshHskAlgo")
    def ssh_hsk_algo(self) -> pulumi.Output[str]:
        """
        Select one or more SSH hostkey algorithms. Valid values: `ssh-rsa`, `ecdsa-sha2-nistp521`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp256`, `rsa-sha2-256`, `rsa-sha2-512`, `ssh-ed25519`.
        """
        return pulumi.get(self, "ssh_hsk_algo")

    @property
    @pulumi.getter(name="sshHskOverride")
    def ssh_hsk_override(self) -> pulumi.Output[str]:
        """
        Enable/disable SSH host key override in SSH daemon. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_hsk_override")

    @property
    @pulumi.getter(name="sshHskPassword")
    def ssh_hsk_password(self) -> pulumi.Output[Optional[str]]:
        """
        Password for ssh-hostkey.
        """
        return pulumi.get(self, "ssh_hsk_password")

    @property
    @pulumi.getter(name="sshKexAlgo")
    def ssh_kex_algo(self) -> pulumi.Output[str]:
        """
        Select one or more SSH kex algorithms. Valid values: `diffie-hellman-group1-sha1`, `diffie-hellman-group14-sha1`, `diffie-hellman-group14-sha256`, `diffie-hellman-group16-sha512`, `diffie-hellman-group18-sha512`, `diffie-hellman-group-exchange-sha1`, `diffie-hellman-group-exchange-sha256`, `curve25519-sha256@libssh.org`, `ecdh-sha2-nistp256`, `ecdh-sha2-nistp384`, `ecdh-sha2-nistp521`.
        """
        return pulumi.get(self, "ssh_kex_algo")

    @property
    @pulumi.getter(name="sshMacAlgo")
    def ssh_mac_algo(self) -> pulumi.Output[str]:
        """
        Select one or more SSH MAC algorithms. Valid values: `hmac-md5`, `hmac-md5-etm@openssh.com`, `hmac-md5-96`, `hmac-md5-96-etm@openssh.com`, `hmac-sha1`, `hmac-sha1-etm@openssh.com`, `hmac-sha2-256`, `hmac-sha2-256-etm@openssh.com`, `hmac-sha2-512`, `hmac-sha2-512-etm@openssh.com`, `hmac-ripemd160`, `hmac-ripemd160@openssh.com`, `hmac-ripemd160-etm@openssh.com`, `umac-64@openssh.com`, `umac-128@openssh.com`, `umac-64-etm@openssh.com`, `umac-128-etm@openssh.com`.
        """
        return pulumi.get(self, "ssh_mac_algo")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

