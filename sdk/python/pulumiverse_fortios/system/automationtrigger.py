# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AutomationtriggerArgs', 'Automationtrigger']

@pulumi.input_type
class AutomationtriggerArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 event_type: Optional[pulumi.Input[str]] = None,
                 fabric_event_name: Optional[pulumi.Input[str]] = None,
                 fabric_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_name: Optional[pulumi.Input[str]] = None,
                 faz_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_tags: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerFieldArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ioc_level: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 logid: Optional[pulumi.Input[int]] = None,
                 logid_blocks: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerLogidBlockArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 report_type: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 trigger_datetime: Optional[pulumi.Input[str]] = None,
                 trigger_day: Optional[pulumi.Input[int]] = None,
                 trigger_frequency: Optional[pulumi.Input[str]] = None,
                 trigger_hour: Optional[pulumi.Input[int]] = None,
                 trigger_minute: Optional[pulumi.Input[int]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 trigger_weekday: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerVdomArgs']]]] = None):
        """
        The set of arguments for constructing a Automationtrigger resource.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] event_type: Event type.
        :param pulumi.Input[str] fabric_event_name: Fabric connector event handler name.
        :param pulumi.Input[str] fabric_event_severity: Fabric connector event severity.
        :param pulumi.Input[str] faz_event_name: FortiAnalyzer event handler name.
        :param pulumi.Input[str] faz_event_severity: FortiAnalyzer event severity.
        :param pulumi.Input[str] faz_event_tags: FortiAnalyzer event tags.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationtriggerFieldArgs']]] fields: Customized trigger field settings. The structure of `fields` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ioc_level: IOC threat level. Valid values: `medium`, `high`.
        :param pulumi.Input[str] license_type: License type.
        :param pulumi.Input[int] logid: Log ID to trigger event.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationtriggerLogidBlockArgs']]] logid_blocks: Log IDs to trigger event. The structure of `logid_block` block is documented below.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] report_type: Security Rating report.
        :param pulumi.Input[str] serial: Fabric connector serial number.
        :param pulumi.Input[str] trigger_datetime: Trigger date and time (YYYY-MM-DD HH:MM:SS).
        :param pulumi.Input[int] trigger_day: Day within a month to trigger.
        :param pulumi.Input[str] trigger_frequency: Scheduled trigger frequency (default = daily).
        :param pulumi.Input[int] trigger_hour: Hour of the day on which to trigger (0 - 23, default = 1).
        :param pulumi.Input[int] trigger_minute: Minute of the hour on which to trigger (0 - 59, 60 to randomize).
        :param pulumi.Input[str] trigger_type: Trigger type. Valid values: `event-based`, `scheduled`.
        :param pulumi.Input[str] trigger_weekday: Day of week for trigger. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationtriggerVdomArgs']]] vdoms: Virtual domain(s) that this trigger is valid for. The structure of `vdom` block is documented below.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if event_type is not None:
            pulumi.set(__self__, "event_type", event_type)
        if fabric_event_name is not None:
            pulumi.set(__self__, "fabric_event_name", fabric_event_name)
        if fabric_event_severity is not None:
            pulumi.set(__self__, "fabric_event_severity", fabric_event_severity)
        if faz_event_name is not None:
            pulumi.set(__self__, "faz_event_name", faz_event_name)
        if faz_event_severity is not None:
            pulumi.set(__self__, "faz_event_severity", faz_event_severity)
        if faz_event_tags is not None:
            pulumi.set(__self__, "faz_event_tags", faz_event_tags)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ioc_level is not None:
            pulumi.set(__self__, "ioc_level", ioc_level)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if logid is not None:
            pulumi.set(__self__, "logid", logid)
        if logid_blocks is not None:
            pulumi.set(__self__, "logid_blocks", logid_blocks)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if report_type is not None:
            pulumi.set(__self__, "report_type", report_type)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if trigger_datetime is not None:
            pulumi.set(__self__, "trigger_datetime", trigger_datetime)
        if trigger_day is not None:
            pulumi.set(__self__, "trigger_day", trigger_day)
        if trigger_frequency is not None:
            pulumi.set(__self__, "trigger_frequency", trigger_frequency)
        if trigger_hour is not None:
            pulumi.set(__self__, "trigger_hour", trigger_hour)
        if trigger_minute is not None:
            pulumi.set(__self__, "trigger_minute", trigger_minute)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)
        if trigger_weekday is not None:
            pulumi.set(__self__, "trigger_weekday", trigger_weekday)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional[pulumi.Input[str]]:
        """
        Event type.
        """
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_type", value)

    @property
    @pulumi.getter(name="fabricEventName")
    def fabric_event_name(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric connector event handler name.
        """
        return pulumi.get(self, "fabric_event_name")

    @fabric_event_name.setter
    def fabric_event_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_event_name", value)

    @property
    @pulumi.getter(name="fabricEventSeverity")
    def fabric_event_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric connector event severity.
        """
        return pulumi.get(self, "fabric_event_severity")

    @fabric_event_severity.setter
    def fabric_event_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_event_severity", value)

    @property
    @pulumi.getter(name="fazEventName")
    def faz_event_name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiAnalyzer event handler name.
        """
        return pulumi.get(self, "faz_event_name")

    @faz_event_name.setter
    def faz_event_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_event_name", value)

    @property
    @pulumi.getter(name="fazEventSeverity")
    def faz_event_severity(self) -> Optional[pulumi.Input[str]]:
        """
        FortiAnalyzer event severity.
        """
        return pulumi.get(self, "faz_event_severity")

    @faz_event_severity.setter
    def faz_event_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_event_severity", value)

    @property
    @pulumi.getter(name="fazEventTags")
    def faz_event_tags(self) -> Optional[pulumi.Input[str]]:
        """
        FortiAnalyzer event tags.
        """
        return pulumi.get(self, "faz_event_tags")

    @faz_event_tags.setter
    def faz_event_tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_event_tags", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerFieldArgs']]]]:
        """
        Customized trigger field settings. The structure of `fields` block is documented below.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerFieldArgs']]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="iocLevel")
    def ioc_level(self) -> Optional[pulumi.Input[str]]:
        """
        IOC threat level. Valid values: `medium`, `high`.
        """
        return pulumi.get(self, "ioc_level")

    @ioc_level.setter
    def ioc_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ioc_level", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[str]]:
        """
        License type.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter
    def logid(self) -> Optional[pulumi.Input[int]]:
        """
        Log ID to trigger event.
        """
        return pulumi.get(self, "logid")

    @logid.setter
    def logid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logid", value)

    @property
    @pulumi.getter(name="logidBlocks")
    def logid_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerLogidBlockArgs']]]]:
        """
        Log IDs to trigger event. The structure of `logid_block` block is documented below.
        """
        return pulumi.get(self, "logid_blocks")

    @logid_blocks.setter
    def logid_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerLogidBlockArgs']]]]):
        pulumi.set(self, "logid_blocks", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="reportType")
    def report_type(self) -> Optional[pulumi.Input[str]]:
        """
        Security Rating report.
        """
        return pulumi.get(self, "report_type")

    @report_type.setter
    def report_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_type", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric connector serial number.
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="triggerDatetime")
    def trigger_datetime(self) -> Optional[pulumi.Input[str]]:
        """
        Trigger date and time (YYYY-MM-DD HH:MM:SS).
        """
        return pulumi.get(self, "trigger_datetime")

    @trigger_datetime.setter
    def trigger_datetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_datetime", value)

    @property
    @pulumi.getter(name="triggerDay")
    def trigger_day(self) -> Optional[pulumi.Input[int]]:
        """
        Day within a month to trigger.
        """
        return pulumi.get(self, "trigger_day")

    @trigger_day.setter
    def trigger_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_day", value)

    @property
    @pulumi.getter(name="triggerFrequency")
    def trigger_frequency(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduled trigger frequency (default = daily).
        """
        return pulumi.get(self, "trigger_frequency")

    @trigger_frequency.setter
    def trigger_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_frequency", value)

    @property
    @pulumi.getter(name="triggerHour")
    def trigger_hour(self) -> Optional[pulumi.Input[int]]:
        """
        Hour of the day on which to trigger (0 - 23, default = 1).
        """
        return pulumi.get(self, "trigger_hour")

    @trigger_hour.setter
    def trigger_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_hour", value)

    @property
    @pulumi.getter(name="triggerMinute")
    def trigger_minute(self) -> Optional[pulumi.Input[int]]:
        """
        Minute of the hour on which to trigger (0 - 59, 60 to randomize).
        """
        return pulumi.get(self, "trigger_minute")

    @trigger_minute.setter
    def trigger_minute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_minute", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[str]]:
        """
        Trigger type. Valid values: `event-based`, `scheduled`.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_type", value)

    @property
    @pulumi.getter(name="triggerWeekday")
    def trigger_weekday(self) -> Optional[pulumi.Input[str]]:
        """
        Day of week for trigger. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "trigger_weekday")

    @trigger_weekday.setter
    def trigger_weekday(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_weekday", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerVdomArgs']]]]:
        """
        Virtual domain(s) that this trigger is valid for. The structure of `vdom` block is documented below.
        """
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)


@pulumi.input_type
class _AutomationtriggerState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 event_type: Optional[pulumi.Input[str]] = None,
                 fabric_event_name: Optional[pulumi.Input[str]] = None,
                 fabric_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_name: Optional[pulumi.Input[str]] = None,
                 faz_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_tags: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerFieldArgs']]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ioc_level: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 logid: Optional[pulumi.Input[int]] = None,
                 logid_blocks: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerLogidBlockArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 report_type: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 trigger_datetime: Optional[pulumi.Input[str]] = None,
                 trigger_day: Optional[pulumi.Input[int]] = None,
                 trigger_frequency: Optional[pulumi.Input[str]] = None,
                 trigger_hour: Optional[pulumi.Input[int]] = None,
                 trigger_minute: Optional[pulumi.Input[int]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 trigger_weekday: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerVdomArgs']]]] = None):
        """
        Input properties used for looking up and filtering Automationtrigger resources.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] event_type: Event type.
        :param pulumi.Input[str] fabric_event_name: Fabric connector event handler name.
        :param pulumi.Input[str] fabric_event_severity: Fabric connector event severity.
        :param pulumi.Input[str] faz_event_name: FortiAnalyzer event handler name.
        :param pulumi.Input[str] faz_event_severity: FortiAnalyzer event severity.
        :param pulumi.Input[str] faz_event_tags: FortiAnalyzer event tags.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationtriggerFieldArgs']]] fields: Customized trigger field settings. The structure of `fields` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ioc_level: IOC threat level. Valid values: `medium`, `high`.
        :param pulumi.Input[str] license_type: License type.
        :param pulumi.Input[int] logid: Log ID to trigger event.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationtriggerLogidBlockArgs']]] logid_blocks: Log IDs to trigger event. The structure of `logid_block` block is documented below.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] report_type: Security Rating report.
        :param pulumi.Input[str] serial: Fabric connector serial number.
        :param pulumi.Input[str] trigger_datetime: Trigger date and time (YYYY-MM-DD HH:MM:SS).
        :param pulumi.Input[int] trigger_day: Day within a month to trigger.
        :param pulumi.Input[str] trigger_frequency: Scheduled trigger frequency (default = daily).
        :param pulumi.Input[int] trigger_hour: Hour of the day on which to trigger (0 - 23, default = 1).
        :param pulumi.Input[int] trigger_minute: Minute of the hour on which to trigger (0 - 59, 60 to randomize).
        :param pulumi.Input[str] trigger_type: Trigger type. Valid values: `event-based`, `scheduled`.
        :param pulumi.Input[str] trigger_weekday: Day of week for trigger. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationtriggerVdomArgs']]] vdoms: Virtual domain(s) that this trigger is valid for. The structure of `vdom` block is documented below.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if event_type is not None:
            pulumi.set(__self__, "event_type", event_type)
        if fabric_event_name is not None:
            pulumi.set(__self__, "fabric_event_name", fabric_event_name)
        if fabric_event_severity is not None:
            pulumi.set(__self__, "fabric_event_severity", fabric_event_severity)
        if faz_event_name is not None:
            pulumi.set(__self__, "faz_event_name", faz_event_name)
        if faz_event_severity is not None:
            pulumi.set(__self__, "faz_event_severity", faz_event_severity)
        if faz_event_tags is not None:
            pulumi.set(__self__, "faz_event_tags", faz_event_tags)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ioc_level is not None:
            pulumi.set(__self__, "ioc_level", ioc_level)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if logid is not None:
            pulumi.set(__self__, "logid", logid)
        if logid_blocks is not None:
            pulumi.set(__self__, "logid_blocks", logid_blocks)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if report_type is not None:
            pulumi.set(__self__, "report_type", report_type)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if trigger_datetime is not None:
            pulumi.set(__self__, "trigger_datetime", trigger_datetime)
        if trigger_day is not None:
            pulumi.set(__self__, "trigger_day", trigger_day)
        if trigger_frequency is not None:
            pulumi.set(__self__, "trigger_frequency", trigger_frequency)
        if trigger_hour is not None:
            pulumi.set(__self__, "trigger_hour", trigger_hour)
        if trigger_minute is not None:
            pulumi.set(__self__, "trigger_minute", trigger_minute)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)
        if trigger_weekday is not None:
            pulumi.set(__self__, "trigger_weekday", trigger_weekday)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional[pulumi.Input[str]]:
        """
        Event type.
        """
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_type", value)

    @property
    @pulumi.getter(name="fabricEventName")
    def fabric_event_name(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric connector event handler name.
        """
        return pulumi.get(self, "fabric_event_name")

    @fabric_event_name.setter
    def fabric_event_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_event_name", value)

    @property
    @pulumi.getter(name="fabricEventSeverity")
    def fabric_event_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric connector event severity.
        """
        return pulumi.get(self, "fabric_event_severity")

    @fabric_event_severity.setter
    def fabric_event_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_event_severity", value)

    @property
    @pulumi.getter(name="fazEventName")
    def faz_event_name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiAnalyzer event handler name.
        """
        return pulumi.get(self, "faz_event_name")

    @faz_event_name.setter
    def faz_event_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_event_name", value)

    @property
    @pulumi.getter(name="fazEventSeverity")
    def faz_event_severity(self) -> Optional[pulumi.Input[str]]:
        """
        FortiAnalyzer event severity.
        """
        return pulumi.get(self, "faz_event_severity")

    @faz_event_severity.setter
    def faz_event_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_event_severity", value)

    @property
    @pulumi.getter(name="fazEventTags")
    def faz_event_tags(self) -> Optional[pulumi.Input[str]]:
        """
        FortiAnalyzer event tags.
        """
        return pulumi.get(self, "faz_event_tags")

    @faz_event_tags.setter
    def faz_event_tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_event_tags", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerFieldArgs']]]]:
        """
        Customized trigger field settings. The structure of `fields` block is documented below.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerFieldArgs']]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="iocLevel")
    def ioc_level(self) -> Optional[pulumi.Input[str]]:
        """
        IOC threat level. Valid values: `medium`, `high`.
        """
        return pulumi.get(self, "ioc_level")

    @ioc_level.setter
    def ioc_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ioc_level", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[str]]:
        """
        License type.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter
    def logid(self) -> Optional[pulumi.Input[int]]:
        """
        Log ID to trigger event.
        """
        return pulumi.get(self, "logid")

    @logid.setter
    def logid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logid", value)

    @property
    @pulumi.getter(name="logidBlocks")
    def logid_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerLogidBlockArgs']]]]:
        """
        Log IDs to trigger event. The structure of `logid_block` block is documented below.
        """
        return pulumi.get(self, "logid_blocks")

    @logid_blocks.setter
    def logid_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerLogidBlockArgs']]]]):
        pulumi.set(self, "logid_blocks", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="reportType")
    def report_type(self) -> Optional[pulumi.Input[str]]:
        """
        Security Rating report.
        """
        return pulumi.get(self, "report_type")

    @report_type.setter
    def report_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_type", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric connector serial number.
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="triggerDatetime")
    def trigger_datetime(self) -> Optional[pulumi.Input[str]]:
        """
        Trigger date and time (YYYY-MM-DD HH:MM:SS).
        """
        return pulumi.get(self, "trigger_datetime")

    @trigger_datetime.setter
    def trigger_datetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_datetime", value)

    @property
    @pulumi.getter(name="triggerDay")
    def trigger_day(self) -> Optional[pulumi.Input[int]]:
        """
        Day within a month to trigger.
        """
        return pulumi.get(self, "trigger_day")

    @trigger_day.setter
    def trigger_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_day", value)

    @property
    @pulumi.getter(name="triggerFrequency")
    def trigger_frequency(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduled trigger frequency (default = daily).
        """
        return pulumi.get(self, "trigger_frequency")

    @trigger_frequency.setter
    def trigger_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_frequency", value)

    @property
    @pulumi.getter(name="triggerHour")
    def trigger_hour(self) -> Optional[pulumi.Input[int]]:
        """
        Hour of the day on which to trigger (0 - 23, default = 1).
        """
        return pulumi.get(self, "trigger_hour")

    @trigger_hour.setter
    def trigger_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_hour", value)

    @property
    @pulumi.getter(name="triggerMinute")
    def trigger_minute(self) -> Optional[pulumi.Input[int]]:
        """
        Minute of the hour on which to trigger (0 - 59, 60 to randomize).
        """
        return pulumi.get(self, "trigger_minute")

    @trigger_minute.setter
    def trigger_minute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_minute", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[str]]:
        """
        Trigger type. Valid values: `event-based`, `scheduled`.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_type", value)

    @property
    @pulumi.getter(name="triggerWeekday")
    def trigger_weekday(self) -> Optional[pulumi.Input[str]]:
        """
        Day of week for trigger. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "trigger_weekday")

    @trigger_weekday.setter
    def trigger_weekday(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_weekday", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerVdomArgs']]]]:
        """
        Virtual domain(s) that this trigger is valid for. The structure of `vdom` block is documented below.
        """
        return pulumi.get(self, "vdoms")

    @vdoms.setter
    def vdoms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationtriggerVdomArgs']]]]):
        pulumi.set(self, "vdoms", value)


class Automationtrigger(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 event_type: Optional[pulumi.Input[str]] = None,
                 fabric_event_name: Optional[pulumi.Input[str]] = None,
                 fabric_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_name: Optional[pulumi.Input[str]] = None,
                 faz_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_tags: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerFieldArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ioc_level: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 logid: Optional[pulumi.Input[int]] = None,
                 logid_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerLogidBlockArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 report_type: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 trigger_datetime: Optional[pulumi.Input[str]] = None,
                 trigger_day: Optional[pulumi.Input[int]] = None,
                 trigger_frequency: Optional[pulumi.Input[str]] = None,
                 trigger_hour: Optional[pulumi.Input[int]] = None,
                 trigger_minute: Optional[pulumi.Input[int]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 trigger_weekday: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerVdomArgs']]]]] = None,
                 __props__=None):
        """
        Trigger for automation stitches.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Automationtrigger("trname",
            event_type="event-log",
            ioc_level="high",
            license_type="forticare-support",
            logid=32002,
            trigger_frequency="daily",
            trigger_minute=60,
            trigger_type="event-based")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System AutomationTrigger can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/automationtrigger:Automationtrigger labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/automationtrigger:Automationtrigger labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] event_type: Event type.
        :param pulumi.Input[str] fabric_event_name: Fabric connector event handler name.
        :param pulumi.Input[str] fabric_event_severity: Fabric connector event severity.
        :param pulumi.Input[str] faz_event_name: FortiAnalyzer event handler name.
        :param pulumi.Input[str] faz_event_severity: FortiAnalyzer event severity.
        :param pulumi.Input[str] faz_event_tags: FortiAnalyzer event tags.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerFieldArgs']]]] fields: Customized trigger field settings. The structure of `fields` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ioc_level: IOC threat level. Valid values: `medium`, `high`.
        :param pulumi.Input[str] license_type: License type.
        :param pulumi.Input[int] logid: Log ID to trigger event.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerLogidBlockArgs']]]] logid_blocks: Log IDs to trigger event. The structure of `logid_block` block is documented below.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] report_type: Security Rating report.
        :param pulumi.Input[str] serial: Fabric connector serial number.
        :param pulumi.Input[str] trigger_datetime: Trigger date and time (YYYY-MM-DD HH:MM:SS).
        :param pulumi.Input[int] trigger_day: Day within a month to trigger.
        :param pulumi.Input[str] trigger_frequency: Scheduled trigger frequency (default = daily).
        :param pulumi.Input[int] trigger_hour: Hour of the day on which to trigger (0 - 23, default = 1).
        :param pulumi.Input[int] trigger_minute: Minute of the hour on which to trigger (0 - 59, 60 to randomize).
        :param pulumi.Input[str] trigger_type: Trigger type. Valid values: `event-based`, `scheduled`.
        :param pulumi.Input[str] trigger_weekday: Day of week for trigger. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerVdomArgs']]]] vdoms: Virtual domain(s) that this trigger is valid for. The structure of `vdom` block is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AutomationtriggerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Trigger for automation stitches.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Automationtrigger("trname",
            event_type="event-log",
            ioc_level="high",
            license_type="forticare-support",
            logid=32002,
            trigger_frequency="daily",
            trigger_minute=60,
            trigger_type="event-based")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System AutomationTrigger can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/automationtrigger:Automationtrigger labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/automationtrigger:Automationtrigger labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param AutomationtriggerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutomationtriggerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 event_type: Optional[pulumi.Input[str]] = None,
                 fabric_event_name: Optional[pulumi.Input[str]] = None,
                 fabric_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_name: Optional[pulumi.Input[str]] = None,
                 faz_event_severity: Optional[pulumi.Input[str]] = None,
                 faz_event_tags: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerFieldArgs']]]]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ioc_level: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 logid: Optional[pulumi.Input[int]] = None,
                 logid_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerLogidBlockArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 report_type: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 trigger_datetime: Optional[pulumi.Input[str]] = None,
                 trigger_day: Optional[pulumi.Input[int]] = None,
                 trigger_frequency: Optional[pulumi.Input[str]] = None,
                 trigger_hour: Optional[pulumi.Input[int]] = None,
                 trigger_minute: Optional[pulumi.Input[int]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 trigger_weekday: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerVdomArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutomationtriggerArgs.__new__(AutomationtriggerArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["event_type"] = event_type
            __props__.__dict__["fabric_event_name"] = fabric_event_name
            __props__.__dict__["fabric_event_severity"] = fabric_event_severity
            __props__.__dict__["faz_event_name"] = faz_event_name
            __props__.__dict__["faz_event_severity"] = faz_event_severity
            __props__.__dict__["faz_event_tags"] = faz_event_tags
            __props__.__dict__["fields"] = fields
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ioc_level"] = ioc_level
            __props__.__dict__["license_type"] = license_type
            __props__.__dict__["logid"] = logid
            __props__.__dict__["logid_blocks"] = logid_blocks
            __props__.__dict__["name"] = name
            __props__.__dict__["report_type"] = report_type
            __props__.__dict__["serial"] = serial
            __props__.__dict__["trigger_datetime"] = trigger_datetime
            __props__.__dict__["trigger_day"] = trigger_day
            __props__.__dict__["trigger_frequency"] = trigger_frequency
            __props__.__dict__["trigger_hour"] = trigger_hour
            __props__.__dict__["trigger_minute"] = trigger_minute
            __props__.__dict__["trigger_type"] = trigger_type
            __props__.__dict__["trigger_weekday"] = trigger_weekday
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vdoms"] = vdoms
        super(Automationtrigger, __self__).__init__(
            'fortios:system/automationtrigger:Automationtrigger',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            event_type: Optional[pulumi.Input[str]] = None,
            fabric_event_name: Optional[pulumi.Input[str]] = None,
            fabric_event_severity: Optional[pulumi.Input[str]] = None,
            faz_event_name: Optional[pulumi.Input[str]] = None,
            faz_event_severity: Optional[pulumi.Input[str]] = None,
            faz_event_tags: Optional[pulumi.Input[str]] = None,
            fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerFieldArgs']]]]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ioc_level: Optional[pulumi.Input[str]] = None,
            license_type: Optional[pulumi.Input[str]] = None,
            logid: Optional[pulumi.Input[int]] = None,
            logid_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerLogidBlockArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            report_type: Optional[pulumi.Input[str]] = None,
            serial: Optional[pulumi.Input[str]] = None,
            trigger_datetime: Optional[pulumi.Input[str]] = None,
            trigger_day: Optional[pulumi.Input[int]] = None,
            trigger_frequency: Optional[pulumi.Input[str]] = None,
            trigger_hour: Optional[pulumi.Input[int]] = None,
            trigger_minute: Optional[pulumi.Input[int]] = None,
            trigger_type: Optional[pulumi.Input[str]] = None,
            trigger_weekday: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vdoms: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerVdomArgs']]]]] = None) -> 'Automationtrigger':
        """
        Get an existing Automationtrigger resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] event_type: Event type.
        :param pulumi.Input[str] fabric_event_name: Fabric connector event handler name.
        :param pulumi.Input[str] fabric_event_severity: Fabric connector event severity.
        :param pulumi.Input[str] faz_event_name: FortiAnalyzer event handler name.
        :param pulumi.Input[str] faz_event_severity: FortiAnalyzer event severity.
        :param pulumi.Input[str] faz_event_tags: FortiAnalyzer event tags.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerFieldArgs']]]] fields: Customized trigger field settings. The structure of `fields` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ioc_level: IOC threat level. Valid values: `medium`, `high`.
        :param pulumi.Input[str] license_type: License type.
        :param pulumi.Input[int] logid: Log ID to trigger event.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerLogidBlockArgs']]]] logid_blocks: Log IDs to trigger event. The structure of `logid_block` block is documented below.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] report_type: Security Rating report.
        :param pulumi.Input[str] serial: Fabric connector serial number.
        :param pulumi.Input[str] trigger_datetime: Trigger date and time (YYYY-MM-DD HH:MM:SS).
        :param pulumi.Input[int] trigger_day: Day within a month to trigger.
        :param pulumi.Input[str] trigger_frequency: Scheduled trigger frequency (default = daily).
        :param pulumi.Input[int] trigger_hour: Hour of the day on which to trigger (0 - 23, default = 1).
        :param pulumi.Input[int] trigger_minute: Minute of the hour on which to trigger (0 - 59, 60 to randomize).
        :param pulumi.Input[str] trigger_type: Trigger type. Valid values: `event-based`, `scheduled`.
        :param pulumi.Input[str] trigger_weekday: Day of week for trigger. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AutomationtriggerVdomArgs']]]] vdoms: Virtual domain(s) that this trigger is valid for. The structure of `vdom` block is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AutomationtriggerState.__new__(_AutomationtriggerState)

        __props__.__dict__["description"] = description
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["event_type"] = event_type
        __props__.__dict__["fabric_event_name"] = fabric_event_name
        __props__.__dict__["fabric_event_severity"] = fabric_event_severity
        __props__.__dict__["faz_event_name"] = faz_event_name
        __props__.__dict__["faz_event_severity"] = faz_event_severity
        __props__.__dict__["faz_event_tags"] = faz_event_tags
        __props__.__dict__["fields"] = fields
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ioc_level"] = ioc_level
        __props__.__dict__["license_type"] = license_type
        __props__.__dict__["logid"] = logid
        __props__.__dict__["logid_blocks"] = logid_blocks
        __props__.__dict__["name"] = name
        __props__.__dict__["report_type"] = report_type
        __props__.__dict__["serial"] = serial
        __props__.__dict__["trigger_datetime"] = trigger_datetime
        __props__.__dict__["trigger_day"] = trigger_day
        __props__.__dict__["trigger_frequency"] = trigger_frequency
        __props__.__dict__["trigger_hour"] = trigger_hour
        __props__.__dict__["trigger_minute"] = trigger_minute
        __props__.__dict__["trigger_type"] = trigger_type
        __props__.__dict__["trigger_weekday"] = trigger_weekday
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vdoms"] = vdoms
        return Automationtrigger(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Output[str]:
        """
        Event type.
        """
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter(name="fabricEventName")
    def fabric_event_name(self) -> pulumi.Output[Optional[str]]:
        """
        Fabric connector event handler name.
        """
        return pulumi.get(self, "fabric_event_name")

    @property
    @pulumi.getter(name="fabricEventSeverity")
    def fabric_event_severity(self) -> pulumi.Output[Optional[str]]:
        """
        Fabric connector event severity.
        """
        return pulumi.get(self, "fabric_event_severity")

    @property
    @pulumi.getter(name="fazEventName")
    def faz_event_name(self) -> pulumi.Output[Optional[str]]:
        """
        FortiAnalyzer event handler name.
        """
        return pulumi.get(self, "faz_event_name")

    @property
    @pulumi.getter(name="fazEventSeverity")
    def faz_event_severity(self) -> pulumi.Output[Optional[str]]:
        """
        FortiAnalyzer event severity.
        """
        return pulumi.get(self, "faz_event_severity")

    @property
    @pulumi.getter(name="fazEventTags")
    def faz_event_tags(self) -> pulumi.Output[Optional[str]]:
        """
        FortiAnalyzer event tags.
        """
        return pulumi.get(self, "faz_event_tags")

    @property
    @pulumi.getter
    def fields(self) -> pulumi.Output[Optional[Sequence['outputs.AutomationtriggerField']]]:
        """
        Customized trigger field settings. The structure of `fields` block is documented below.
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="iocLevel")
    def ioc_level(self) -> pulumi.Output[str]:
        """
        IOC threat level. Valid values: `medium`, `high`.
        """
        return pulumi.get(self, "ioc_level")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> pulumi.Output[str]:
        """
        License type.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter
    def logid(self) -> pulumi.Output[int]:
        """
        Log ID to trigger event.
        """
        return pulumi.get(self, "logid")

    @property
    @pulumi.getter(name="logidBlocks")
    def logid_blocks(self) -> pulumi.Output[Optional[Sequence['outputs.AutomationtriggerLogidBlock']]]:
        """
        Log IDs to trigger event. The structure of `logid_block` block is documented below.
        """
        return pulumi.get(self, "logid_blocks")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="reportType")
    def report_type(self) -> pulumi.Output[str]:
        """
        Security Rating report.
        """
        return pulumi.get(self, "report_type")

    @property
    @pulumi.getter
    def serial(self) -> pulumi.Output[Optional[str]]:
        """
        Fabric connector serial number.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="triggerDatetime")
    def trigger_datetime(self) -> pulumi.Output[str]:
        """
        Trigger date and time (YYYY-MM-DD HH:MM:SS).
        """
        return pulumi.get(self, "trigger_datetime")

    @property
    @pulumi.getter(name="triggerDay")
    def trigger_day(self) -> pulumi.Output[int]:
        """
        Day within a month to trigger.
        """
        return pulumi.get(self, "trigger_day")

    @property
    @pulumi.getter(name="triggerFrequency")
    def trigger_frequency(self) -> pulumi.Output[str]:
        """
        Scheduled trigger frequency (default = daily).
        """
        return pulumi.get(self, "trigger_frequency")

    @property
    @pulumi.getter(name="triggerHour")
    def trigger_hour(self) -> pulumi.Output[int]:
        """
        Hour of the day on which to trigger (0 - 23, default = 1).
        """
        return pulumi.get(self, "trigger_hour")

    @property
    @pulumi.getter(name="triggerMinute")
    def trigger_minute(self) -> pulumi.Output[int]:
        """
        Minute of the hour on which to trigger (0 - 59, 60 to randomize).
        """
        return pulumi.get(self, "trigger_minute")

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> pulumi.Output[str]:
        """
        Trigger type. Valid values: `event-based`, `scheduled`.
        """
        return pulumi.get(self, "trigger_type")

    @property
    @pulumi.getter(name="triggerWeekday")
    def trigger_weekday(self) -> pulumi.Output[str]:
        """
        Day of week for trigger. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "trigger_weekday")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vdoms(self) -> pulumi.Output[Optional[Sequence['outputs.AutomationtriggerVdom']]]:
        """
        Virtual domain(s) that this trigger is valid for. The structure of `vdom` block is documented below.
        """
        return pulumi.get(self, "vdoms")

