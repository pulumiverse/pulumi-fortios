# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VxlanArgs', 'Vxlan']

@pulumi.input_type
class VxlanArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str],
                 ip_version: pulumi.Input[str],
                 vni: pulumi.Input[int],
                 dstport: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 evpn_id: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 learn_from_traffic: Optional[pulumi.Input[str]] = None,
                 multicast_ttl: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_ip6s: Optional[pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIp6Args']]]] = None,
                 remote_ips: Optional[pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIpArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Vxlan resource.
        :param pulumi.Input[str] interface: Outgoing interface for VXLAN encapsulated traffic.
        :param pulumi.Input[str] ip_version: IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
        :param pulumi.Input[int] vni: VXLAN network ID.
        :param pulumi.Input[int] dstport: VXLAN destination port (1 - 65535, default = 4789).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] evpn_id: EVPN instance.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] learn_from_traffic: Enable/disable VXLAN MAC learning from traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] multicast_ttl: VXLAN multicast TTL (1-255, default = 0).
        :param pulumi.Input[str] name: VXLAN device or interface name. Must be a unique interface name.
        :param pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIp6Args']]] remote_ip6s: IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIpArgs']]] remote_ips: IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "vni", vni)
        if dstport is not None:
            pulumi.set(__self__, "dstport", dstport)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if evpn_id is not None:
            pulumi.set(__self__, "evpn_id", evpn_id)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if learn_from_traffic is not None:
            pulumi.set(__self__, "learn_from_traffic", learn_from_traffic)
        if multicast_ttl is not None:
            pulumi.set(__self__, "multicast_ttl", multicast_ttl)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remote_ip6s is not None:
            pulumi.set(__self__, "remote_ip6s", remote_ip6s)
        if remote_ips is not None:
            pulumi.set(__self__, "remote_ips", remote_ips)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        """
        Outgoing interface for VXLAN encapsulated traffic.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Input[str]:
        """
        IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter
    def vni(self) -> pulumi.Input[int]:
        """
        VXLAN network ID.
        """
        return pulumi.get(self, "vni")

    @vni.setter
    def vni(self, value: pulumi.Input[int]):
        pulumi.set(self, "vni", value)

    @property
    @pulumi.getter
    def dstport(self) -> Optional[pulumi.Input[int]]:
        """
        VXLAN destination port (1 - 65535, default = 4789).
        """
        return pulumi.get(self, "dstport")

    @dstport.setter
    def dstport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dstport", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="evpnId")
    def evpn_id(self) -> Optional[pulumi.Input[int]]:
        """
        EVPN instance.
        """
        return pulumi.get(self, "evpn_id")

    @evpn_id.setter
    def evpn_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "evpn_id", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="learnFromTraffic")
    def learn_from_traffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VXLAN MAC learning from traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "learn_from_traffic")

    @learn_from_traffic.setter
    def learn_from_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learn_from_traffic", value)

    @property
    @pulumi.getter(name="multicastTtl")
    def multicast_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        VXLAN multicast TTL (1-255, default = 0).
        """
        return pulumi.get(self, "multicast_ttl")

    @multicast_ttl.setter
    def multicast_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "multicast_ttl", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VXLAN device or interface name. Must be a unique interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="remoteIp6s")
    def remote_ip6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIp6Args']]]]:
        """
        IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip6` block is documented below.
        """
        return pulumi.get(self, "remote_ip6s")

    @remote_ip6s.setter
    def remote_ip6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIp6Args']]]]):
        pulumi.set(self, "remote_ip6s", value)

    @property
    @pulumi.getter(name="remoteIps")
    def remote_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIpArgs']]]]:
        """
        IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip` block is documented below.
        """
        return pulumi.get(self, "remote_ips")

    @remote_ips.setter
    def remote_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIpArgs']]]]):
        pulumi.set(self, "remote_ips", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _VxlanState:
    def __init__(__self__, *,
                 dstport: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 evpn_id: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 learn_from_traffic: Optional[pulumi.Input[str]] = None,
                 multicast_ttl: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_ip6s: Optional[pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIp6Args']]]] = None,
                 remote_ips: Optional[pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIpArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vni: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Vxlan resources.
        :param pulumi.Input[int] dstport: VXLAN destination port (1 - 65535, default = 4789).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] evpn_id: EVPN instance.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Outgoing interface for VXLAN encapsulated traffic.
        :param pulumi.Input[str] ip_version: IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
        :param pulumi.Input[str] learn_from_traffic: Enable/disable VXLAN MAC learning from traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] multicast_ttl: VXLAN multicast TTL (1-255, default = 0).
        :param pulumi.Input[str] name: VXLAN device or interface name. Must be a unique interface name.
        :param pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIp6Args']]] remote_ip6s: IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIpArgs']]] remote_ips: IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] vni: VXLAN network ID.
        """
        if dstport is not None:
            pulumi.set(__self__, "dstport", dstport)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if evpn_id is not None:
            pulumi.set(__self__, "evpn_id", evpn_id)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if learn_from_traffic is not None:
            pulumi.set(__self__, "learn_from_traffic", learn_from_traffic)
        if multicast_ttl is not None:
            pulumi.set(__self__, "multicast_ttl", multicast_ttl)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if remote_ip6s is not None:
            pulumi.set(__self__, "remote_ip6s", remote_ip6s)
        if remote_ips is not None:
            pulumi.set(__self__, "remote_ips", remote_ips)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vni is not None:
            pulumi.set(__self__, "vni", vni)

    @property
    @pulumi.getter
    def dstport(self) -> Optional[pulumi.Input[int]]:
        """
        VXLAN destination port (1 - 65535, default = 4789).
        """
        return pulumi.get(self, "dstport")

    @dstport.setter
    def dstport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dstport", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="evpnId")
    def evpn_id(self) -> Optional[pulumi.Input[int]]:
        """
        EVPN instance.
        """
        return pulumi.get(self, "evpn_id")

    @evpn_id.setter
    def evpn_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "evpn_id", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Outgoing interface for VXLAN encapsulated traffic.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="learnFromTraffic")
    def learn_from_traffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VXLAN MAC learning from traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "learn_from_traffic")

    @learn_from_traffic.setter
    def learn_from_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learn_from_traffic", value)

    @property
    @pulumi.getter(name="multicastTtl")
    def multicast_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        VXLAN multicast TTL (1-255, default = 0).
        """
        return pulumi.get(self, "multicast_ttl")

    @multicast_ttl.setter
    def multicast_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "multicast_ttl", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VXLAN device or interface name. Must be a unique interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="remoteIp6s")
    def remote_ip6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIp6Args']]]]:
        """
        IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip6` block is documented below.
        """
        return pulumi.get(self, "remote_ip6s")

    @remote_ip6s.setter
    def remote_ip6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIp6Args']]]]):
        pulumi.set(self, "remote_ip6s", value)

    @property
    @pulumi.getter(name="remoteIps")
    def remote_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIpArgs']]]]:
        """
        IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip` block is documented below.
        """
        return pulumi.get(self, "remote_ips")

    @remote_ips.setter
    def remote_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VxlanRemoteIpArgs']]]]):
        pulumi.set(self, "remote_ips", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vni(self) -> Optional[pulumi.Input[int]]:
        """
        VXLAN network ID.
        """
        return pulumi.get(self, "vni")

    @vni.setter
    def vni(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vni", value)


class Vxlan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dstport: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 evpn_id: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 learn_from_traffic: Optional[pulumi.Input[str]] = None,
                 multicast_ttl: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_ip6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VxlanRemoteIp6Args']]]]] = None,
                 remote_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VxlanRemoteIpArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vni: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Configure VXLAN devices.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Vxlan("trname",
            dstport=4789,
            interface="port3",
            ip_version="ipv4-unicast",
            remote_ips=[fortios.system.VxlanRemoteIpArgs(
                ip="1.1.1.1",
            )],
            vni=3)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Vxlan can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/vxlan:Vxlan labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/vxlan:Vxlan labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] dstport: VXLAN destination port (1 - 65535, default = 4789).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] evpn_id: EVPN instance.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Outgoing interface for VXLAN encapsulated traffic.
        :param pulumi.Input[str] ip_version: IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
        :param pulumi.Input[str] learn_from_traffic: Enable/disable VXLAN MAC learning from traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] multicast_ttl: VXLAN multicast TTL (1-255, default = 0).
        :param pulumi.Input[str] name: VXLAN device or interface name. Must be a unique interface name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VxlanRemoteIp6Args']]]] remote_ip6s: IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VxlanRemoteIpArgs']]]] remote_ips: IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] vni: VXLAN network ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VxlanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure VXLAN devices.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Vxlan("trname",
            dstport=4789,
            interface="port3",
            ip_version="ipv4-unicast",
            remote_ips=[fortios.system.VxlanRemoteIpArgs(
                ip="1.1.1.1",
            )],
            vni=3)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Vxlan can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/vxlan:Vxlan labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/vxlan:Vxlan labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param VxlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VxlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dstport: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 evpn_id: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 learn_from_traffic: Optional[pulumi.Input[str]] = None,
                 multicast_ttl: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 remote_ip6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VxlanRemoteIp6Args']]]]] = None,
                 remote_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VxlanRemoteIpArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vni: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VxlanArgs.__new__(VxlanArgs)

            __props__.__dict__["dstport"] = dstport
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["evpn_id"] = evpn_id
            __props__.__dict__["get_all_tables"] = get_all_tables
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            if ip_version is None and not opts.urn:
                raise TypeError("Missing required property 'ip_version'")
            __props__.__dict__["ip_version"] = ip_version
            __props__.__dict__["learn_from_traffic"] = learn_from_traffic
            __props__.__dict__["multicast_ttl"] = multicast_ttl
            __props__.__dict__["name"] = name
            __props__.__dict__["remote_ip6s"] = remote_ip6s
            __props__.__dict__["remote_ips"] = remote_ips
            __props__.__dict__["vdomparam"] = vdomparam
            if vni is None and not opts.urn:
                raise TypeError("Missing required property 'vni'")
            __props__.__dict__["vni"] = vni
        super(Vxlan, __self__).__init__(
            'fortios:system/vxlan:Vxlan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dstport: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            evpn_id: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ip_version: Optional[pulumi.Input[str]] = None,
            learn_from_traffic: Optional[pulumi.Input[str]] = None,
            multicast_ttl: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            remote_ip6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VxlanRemoteIp6Args']]]]] = None,
            remote_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VxlanRemoteIpArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vni: Optional[pulumi.Input[int]] = None) -> 'Vxlan':
        """
        Get an existing Vxlan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] dstport: VXLAN destination port (1 - 65535, default = 4789).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] evpn_id: EVPN instance.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Outgoing interface for VXLAN encapsulated traffic.
        :param pulumi.Input[str] ip_version: IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
        :param pulumi.Input[str] learn_from_traffic: Enable/disable VXLAN MAC learning from traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] multicast_ttl: VXLAN multicast TTL (1-255, default = 0).
        :param pulumi.Input[str] name: VXLAN device or interface name. Must be a unique interface name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VxlanRemoteIp6Args']]]] remote_ip6s: IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VxlanRemoteIpArgs']]]] remote_ips: IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] vni: VXLAN network ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VxlanState.__new__(_VxlanState)

        __props__.__dict__["dstport"] = dstport
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["evpn_id"] = evpn_id
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["learn_from_traffic"] = learn_from_traffic
        __props__.__dict__["multicast_ttl"] = multicast_ttl
        __props__.__dict__["name"] = name
        __props__.__dict__["remote_ip6s"] = remote_ip6s
        __props__.__dict__["remote_ips"] = remote_ips
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vni"] = vni
        return Vxlan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def dstport(self) -> pulumi.Output[int]:
        """
        VXLAN destination port (1 - 65535, default = 4789).
        """
        return pulumi.get(self, "dstport")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="evpnId")
    def evpn_id(self) -> pulumi.Output[int]:
        """
        EVPN instance.
        """
        return pulumi.get(self, "evpn_id")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Outgoing interface for VXLAN encapsulated traffic.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[str]:
        """
        IP version to use for the VXLAN interface and so for communication over the VXLAN. IPv4 or IPv6 unicast or multicast. Valid values: `ipv4-unicast`, `ipv6-unicast`, `ipv4-multicast`, `ipv6-multicast`.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="learnFromTraffic")
    def learn_from_traffic(self) -> pulumi.Output[str]:
        """
        Enable/disable VXLAN MAC learning from traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "learn_from_traffic")

    @property
    @pulumi.getter(name="multicastTtl")
    def multicast_ttl(self) -> pulumi.Output[int]:
        """
        VXLAN multicast TTL (1-255, default = 0).
        """
        return pulumi.get(self, "multicast_ttl")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        VXLAN device or interface name. Must be a unique interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="remoteIp6s")
    def remote_ip6s(self) -> pulumi.Output[Optional[Sequence['outputs.VxlanRemoteIp6']]]:
        """
        IPv6 IP address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip6` block is documented below.
        """
        return pulumi.get(self, "remote_ip6s")

    @property
    @pulumi.getter(name="remoteIps")
    def remote_ips(self) -> pulumi.Output[Optional[Sequence['outputs.VxlanRemoteIp']]]:
        """
        IPv4 address of the VXLAN interface on the device at the remote end of the VXLAN. The structure of `remote_ip` block is documented below.
        """
        return pulumi.get(self, "remote_ips")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vni(self) -> pulumi.Output[int]:
        """
        VXLAN network ID.
        """
        return pulumi.get(self, "vni")

