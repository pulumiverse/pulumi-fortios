# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetExternalresourceResult',
    'AwaitableGetExternalresourceResult',
    'get_externalresource',
    'get_externalresource_output',
]

@pulumi.output_type
class GetExternalresourceResult:
    """
    A collection of values returned by getExternalresource.
    """
    def __init__(__self__, category=None, comments=None, id=None, interface=None, interface_select_method=None, name=None, password=None, refresh_rate=None, resource=None, server_identity_check=None, source_ip=None, status=None, type=None, update_method=None, user_agent=None, username=None, uuid=None, vdomparam=None):
        if category and not isinstance(category, int):
            raise TypeError("Expected argument 'category' to be a int")
        pulumi.set(__self__, "category", category)
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface and not isinstance(interface, str):
            raise TypeError("Expected argument 'interface' to be a str")
        pulumi.set(__self__, "interface", interface)
        if interface_select_method and not isinstance(interface_select_method, str):
            raise TypeError("Expected argument 'interface_select_method' to be a str")
        pulumi.set(__self__, "interface_select_method", interface_select_method)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if refresh_rate and not isinstance(refresh_rate, int):
            raise TypeError("Expected argument 'refresh_rate' to be a int")
        pulumi.set(__self__, "refresh_rate", refresh_rate)
        if resource and not isinstance(resource, str):
            raise TypeError("Expected argument 'resource' to be a str")
        pulumi.set(__self__, "resource", resource)
        if server_identity_check and not isinstance(server_identity_check, str):
            raise TypeError("Expected argument 'server_identity_check' to be a str")
        pulumi.set(__self__, "server_identity_check", server_identity_check)
        if source_ip and not isinstance(source_ip, str):
            raise TypeError("Expected argument 'source_ip' to be a str")
        pulumi.set(__self__, "source_ip", source_ip)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if update_method and not isinstance(update_method, str):
            raise TypeError("Expected argument 'update_method' to be a str")
        pulumi.set(__self__, "update_method", update_method)
        if user_agent and not isinstance(user_agent, str):
            raise TypeError("Expected argument 'user_agent' to be a str")
        pulumi.set(__self__, "user_agent", user_agent)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def category(self) -> int:
        """
        User resource category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> str:
        """
        Specify how to select outgoing interface to reach server.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        External resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        HTTP basic authentication password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="refreshRate")
    def refresh_rate(self) -> int:
        """
        Time interval to refresh external resource (1 - 43200 min, default = 5 min).
        """
        return pulumi.get(self, "refresh_rate")

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        URI of external resource.
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="serverIdentityCheck")
    def server_identity_check(self) -> str:
        """
        Certificate verification option.
        """
        return pulumi.get(self, "server_identity_check")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> str:
        """
        Source IPv4 address used to communicate with server.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable user resource.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        User resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateMethod")
    def update_method(self) -> str:
        """
        External resource update method.
        """
        return pulumi.get(self, "update_method")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> str:
        """
        Override HTTP User-Agent header used when retrieving this external resource.
        """
        return pulumi.get(self, "user_agent")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        HTTP basic authentication user name.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetExternalresourceResult(GetExternalresourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetExternalresourceResult(
            category=self.category,
            comments=self.comments,
            id=self.id,
            interface=self.interface,
            interface_select_method=self.interface_select_method,
            name=self.name,
            password=self.password,
            refresh_rate=self.refresh_rate,
            resource=self.resource,
            server_identity_check=self.server_identity_check,
            source_ip=self.source_ip,
            status=self.status,
            type=self.type,
            update_method=self.update_method,
            user_agent=self.user_agent,
            username=self.username,
            uuid=self.uuid,
            vdomparam=self.vdomparam)


def get_externalresource(name: Optional[str] = None,
                         vdomparam: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetExternalresourceResult:
    """
    Use this data source to get information on an fortios system externalresource


    :param str name: Specify the name of the desired system externalresource.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:system/getExternalresource:getExternalresource', __args__, opts=opts, typ=GetExternalresourceResult).value

    return AwaitableGetExternalresourceResult(
        category=pulumi.get(__ret__, 'category'),
        comments=pulumi.get(__ret__, 'comments'),
        id=pulumi.get(__ret__, 'id'),
        interface=pulumi.get(__ret__, 'interface'),
        interface_select_method=pulumi.get(__ret__, 'interface_select_method'),
        name=pulumi.get(__ret__, 'name'),
        password=pulumi.get(__ret__, 'password'),
        refresh_rate=pulumi.get(__ret__, 'refresh_rate'),
        resource=pulumi.get(__ret__, 'resource'),
        server_identity_check=pulumi.get(__ret__, 'server_identity_check'),
        source_ip=pulumi.get(__ret__, 'source_ip'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        update_method=pulumi.get(__ret__, 'update_method'),
        user_agent=pulumi.get(__ret__, 'user_agent'),
        username=pulumi.get(__ret__, 'username'),
        uuid=pulumi.get(__ret__, 'uuid'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_externalresource)
def get_externalresource_output(name: Optional[pulumi.Input[str]] = None,
                                vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetExternalresourceResult]:
    """
    Use this data source to get information on an fortios system externalresource


    :param str name: Specify the name of the desired system externalresource.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
