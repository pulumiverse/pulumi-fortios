# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EvpnArgs', 'Evpn']

@pulumi.input_type
class EvpnArgs:
    def __init__(__self__, *,
                 arp_suppression: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 export_rts: Optional[pulumi.Input[Sequence[pulumi.Input['EvpnExportRtArgs']]]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 import_rts: Optional[pulumi.Input[Sequence[pulumi.Input['EvpnImportRtArgs']]]] = None,
                 ip_local_learning: Optional[pulumi.Input[str]] = None,
                 rd: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Evpn resource.
        :param pulumi.Input[str] arp_suppression: Enable/disable ARP suppression. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input['EvpnExportRtArgs']]] export_rts: List of export route targets. The structure of `export_rt` block is documented below.
        :param pulumi.Input[int] fosid: ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['EvpnImportRtArgs']]] import_rts: List of import route targets. The structure of `import_rt` block is documented below.
        :param pulumi.Input[str] ip_local_learning: Enable/disable IP address local learning. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] rd: Route Distinguisher: AA|AA:NN|A.B.C.D:NN.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if arp_suppression is not None:
            pulumi.set(__self__, "arp_suppression", arp_suppression)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if export_rts is not None:
            pulumi.set(__self__, "export_rts", export_rts)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if import_rts is not None:
            pulumi.set(__self__, "import_rts", import_rts)
        if ip_local_learning is not None:
            pulumi.set(__self__, "ip_local_learning", ip_local_learning)
        if rd is not None:
            pulumi.set(__self__, "rd", rd)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="arpSuppression")
    def arp_suppression(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ARP suppression. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "arp_suppression")

    @arp_suppression.setter
    def arp_suppression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_suppression", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="exportRts")
    def export_rts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EvpnExportRtArgs']]]]:
        """
        List of export route targets. The structure of `export_rt` block is documented below.
        """
        return pulumi.get(self, "export_rts")

    @export_rts.setter
    def export_rts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EvpnExportRtArgs']]]]):
        pulumi.set(self, "export_rts", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="importRts")
    def import_rts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EvpnImportRtArgs']]]]:
        """
        List of import route targets. The structure of `import_rt` block is documented below.
        """
        return pulumi.get(self, "import_rts")

    @import_rts.setter
    def import_rts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EvpnImportRtArgs']]]]):
        pulumi.set(self, "import_rts", value)

    @property
    @pulumi.getter(name="ipLocalLearning")
    def ip_local_learning(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IP address local learning. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip_local_learning")

    @ip_local_learning.setter
    def ip_local_learning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_local_learning", value)

    @property
    @pulumi.getter
    def rd(self) -> Optional[pulumi.Input[str]]:
        """
        Route Distinguisher: AA|AA:NN|A.B.C.D:NN.
        """
        return pulumi.get(self, "rd")

    @rd.setter
    def rd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rd", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _EvpnState:
    def __init__(__self__, *,
                 arp_suppression: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 export_rts: Optional[pulumi.Input[Sequence[pulumi.Input['EvpnExportRtArgs']]]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 import_rts: Optional[pulumi.Input[Sequence[pulumi.Input['EvpnImportRtArgs']]]] = None,
                 ip_local_learning: Optional[pulumi.Input[str]] = None,
                 rd: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Evpn resources.
        :param pulumi.Input[str] arp_suppression: Enable/disable ARP suppression. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input['EvpnExportRtArgs']]] export_rts: List of export route targets. The structure of `export_rt` block is documented below.
        :param pulumi.Input[int] fosid: ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['EvpnImportRtArgs']]] import_rts: List of import route targets. The structure of `import_rt` block is documented below.
        :param pulumi.Input[str] ip_local_learning: Enable/disable IP address local learning. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] rd: Route Distinguisher: AA|AA:NN|A.B.C.D:NN.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if arp_suppression is not None:
            pulumi.set(__self__, "arp_suppression", arp_suppression)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if export_rts is not None:
            pulumi.set(__self__, "export_rts", export_rts)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if import_rts is not None:
            pulumi.set(__self__, "import_rts", import_rts)
        if ip_local_learning is not None:
            pulumi.set(__self__, "ip_local_learning", ip_local_learning)
        if rd is not None:
            pulumi.set(__self__, "rd", rd)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="arpSuppression")
    def arp_suppression(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ARP suppression. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "arp_suppression")

    @arp_suppression.setter
    def arp_suppression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_suppression", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="exportRts")
    def export_rts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EvpnExportRtArgs']]]]:
        """
        List of export route targets. The structure of `export_rt` block is documented below.
        """
        return pulumi.get(self, "export_rts")

    @export_rts.setter
    def export_rts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EvpnExportRtArgs']]]]):
        pulumi.set(self, "export_rts", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="importRts")
    def import_rts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EvpnImportRtArgs']]]]:
        """
        List of import route targets. The structure of `import_rt` block is documented below.
        """
        return pulumi.get(self, "import_rts")

    @import_rts.setter
    def import_rts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EvpnImportRtArgs']]]]):
        pulumi.set(self, "import_rts", value)

    @property
    @pulumi.getter(name="ipLocalLearning")
    def ip_local_learning(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IP address local learning. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip_local_learning")

    @ip_local_learning.setter
    def ip_local_learning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_local_learning", value)

    @property
    @pulumi.getter
    def rd(self) -> Optional[pulumi.Input[str]]:
        """
        Route Distinguisher: AA|AA:NN|A.B.C.D:NN.
        """
        return pulumi.get(self, "rd")

    @rd.setter
    def rd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rd", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Evpn(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arp_suppression: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 export_rts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EvpnExportRtArgs']]]]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 import_rts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EvpnImportRtArgs']]]]] = None,
                 ip_local_learning: Optional[pulumi.Input[str]] = None,
                 rd: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure EVPN instance. Applies to FortiOS Version `>= 7.4.0`.

        ## Import

        System Evpn can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/evpn:Evpn labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/evpn:Evpn labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arp_suppression: Enable/disable ARP suppression. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EvpnExportRtArgs']]]] export_rts: List of export route targets. The structure of `export_rt` block is documented below.
        :param pulumi.Input[int] fosid: ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EvpnImportRtArgs']]]] import_rts: List of import route targets. The structure of `import_rt` block is documented below.
        :param pulumi.Input[str] ip_local_learning: Enable/disable IP address local learning. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] rd: Route Distinguisher: AA|AA:NN|A.B.C.D:NN.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[EvpnArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure EVPN instance. Applies to FortiOS Version `>= 7.4.0`.

        ## Import

        System Evpn can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/evpn:Evpn labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/evpn:Evpn labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param EvpnArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EvpnArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arp_suppression: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 export_rts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EvpnExportRtArgs']]]]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 import_rts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EvpnImportRtArgs']]]]] = None,
                 ip_local_learning: Optional[pulumi.Input[str]] = None,
                 rd: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EvpnArgs.__new__(EvpnArgs)

            __props__.__dict__["arp_suppression"] = arp_suppression
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["export_rts"] = export_rts
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["import_rts"] = import_rts
            __props__.__dict__["ip_local_learning"] = ip_local_learning
            __props__.__dict__["rd"] = rd
            __props__.__dict__["vdomparam"] = vdomparam
        super(Evpn, __self__).__init__(
            'fortios:system/evpn:Evpn',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arp_suppression: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            export_rts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EvpnExportRtArgs']]]]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            import_rts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EvpnImportRtArgs']]]]] = None,
            ip_local_learning: Optional[pulumi.Input[str]] = None,
            rd: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Evpn':
        """
        Get an existing Evpn resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] arp_suppression: Enable/disable ARP suppression. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EvpnExportRtArgs']]]] export_rts: List of export route targets. The structure of `export_rt` block is documented below.
        :param pulumi.Input[int] fosid: ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EvpnImportRtArgs']]]] import_rts: List of import route targets. The structure of `import_rt` block is documented below.
        :param pulumi.Input[str] ip_local_learning: Enable/disable IP address local learning. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] rd: Route Distinguisher: AA|AA:NN|A.B.C.D:NN.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EvpnState.__new__(_EvpnState)

        __props__.__dict__["arp_suppression"] = arp_suppression
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["export_rts"] = export_rts
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["import_rts"] = import_rts
        __props__.__dict__["ip_local_learning"] = ip_local_learning
        __props__.__dict__["rd"] = rd
        __props__.__dict__["vdomparam"] = vdomparam
        return Evpn(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="arpSuppression")
    def arp_suppression(self) -> pulumi.Output[str]:
        """
        Enable/disable ARP suppression. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "arp_suppression")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="exportRts")
    def export_rts(self) -> pulumi.Output[Optional[Sequence['outputs.EvpnExportRt']]]:
        """
        List of export route targets. The structure of `export_rt` block is documented below.
        """
        return pulumi.get(self, "export_rts")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        ID.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="importRts")
    def import_rts(self) -> pulumi.Output[Optional[Sequence['outputs.EvpnImportRt']]]:
        """
        List of import route targets. The structure of `import_rt` block is documented below.
        """
        return pulumi.get(self, "import_rts")

    @property
    @pulumi.getter(name="ipLocalLearning")
    def ip_local_learning(self) -> pulumi.Output[str]:
        """
        Enable/disable IP address local learning. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip_local_learning")

    @property
    @pulumi.getter
    def rd(self) -> pulumi.Output[str]:
        """
        Route Distinguisher: AA|AA:NN|A.B.C.D:NN.
        """
        return pulumi.get(self, "rd")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

