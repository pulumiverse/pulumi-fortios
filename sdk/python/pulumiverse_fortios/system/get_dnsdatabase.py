# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDnsdatabaseResult',
    'AwaitableGetDnsdatabaseResult',
    'get_dnsdatabase',
    'get_dnsdatabase_output',
]

@pulumi.output_type
class GetDnsdatabaseResult:
    """
    A collection of values returned by getDnsdatabase.
    """
    def __init__(__self__, allow_transfer=None, authoritative=None, contact=None, dns_entries=None, domain=None, forwarder=None, forwarder6=None, id=None, ip_master=None, ip_primary=None, name=None, primary_name=None, rr_max=None, source_ip=None, source_ip6=None, status=None, ttl=None, type=None, vdomparam=None, view=None):
        if allow_transfer and not isinstance(allow_transfer, str):
            raise TypeError("Expected argument 'allow_transfer' to be a str")
        pulumi.set(__self__, "allow_transfer", allow_transfer)
        if authoritative and not isinstance(authoritative, str):
            raise TypeError("Expected argument 'authoritative' to be a str")
        pulumi.set(__self__, "authoritative", authoritative)
        if contact and not isinstance(contact, str):
            raise TypeError("Expected argument 'contact' to be a str")
        pulumi.set(__self__, "contact", contact)
        if dns_entries and not isinstance(dns_entries, list):
            raise TypeError("Expected argument 'dns_entries' to be a list")
        pulumi.set(__self__, "dns_entries", dns_entries)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if forwarder and not isinstance(forwarder, str):
            raise TypeError("Expected argument 'forwarder' to be a str")
        pulumi.set(__self__, "forwarder", forwarder)
        if forwarder6 and not isinstance(forwarder6, str):
            raise TypeError("Expected argument 'forwarder6' to be a str")
        pulumi.set(__self__, "forwarder6", forwarder6)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_master and not isinstance(ip_master, str):
            raise TypeError("Expected argument 'ip_master' to be a str")
        pulumi.set(__self__, "ip_master", ip_master)
        if ip_primary and not isinstance(ip_primary, str):
            raise TypeError("Expected argument 'ip_primary' to be a str")
        pulumi.set(__self__, "ip_primary", ip_primary)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if primary_name and not isinstance(primary_name, str):
            raise TypeError("Expected argument 'primary_name' to be a str")
        pulumi.set(__self__, "primary_name", primary_name)
        if rr_max and not isinstance(rr_max, int):
            raise TypeError("Expected argument 'rr_max' to be a int")
        pulumi.set(__self__, "rr_max", rr_max)
        if source_ip and not isinstance(source_ip, str):
            raise TypeError("Expected argument 'source_ip' to be a str")
        pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 and not isinstance(source_ip6, str):
            raise TypeError("Expected argument 'source_ip6' to be a str")
        pulumi.set(__self__, "source_ip6", source_ip6)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if ttl and not isinstance(ttl, int):
            raise TypeError("Expected argument 'ttl' to be a int")
        pulumi.set(__self__, "ttl", ttl)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if view and not isinstance(view, str):
            raise TypeError("Expected argument 'view' to be a str")
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter(name="allowTransfer")
    def allow_transfer(self) -> str:
        """
        DNS zone transfer IP address list.
        """
        return pulumi.get(self, "allow_transfer")

    @property
    @pulumi.getter
    def authoritative(self) -> str:
        """
        Enable/disable authoritative zone.
        """
        return pulumi.get(self, "authoritative")

    @property
    @pulumi.getter
    def contact(self) -> str:
        """
        Email address of the administrator for this zone.
        You can specify only the username (e.g. admin) or full email address (e.g. admin@test.com)
        When using a simple username, the domain of the email will be this zone.
        """
        return pulumi.get(self, "contact")

    @property
    @pulumi.getter(name="dnsEntries")
    def dns_entries(self) -> Sequence['outputs.GetDnsdatabaseDnsEntryResult']:
        """
        DNS entry. The structure of `dns_entry` block is documented below.
        """
        return pulumi.get(self, "dns_entries")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Domain name.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def forwarder(self) -> str:
        """
        DNS zone forwarder IP address list.
        """
        return pulumi.get(self, "forwarder")

    @property
    @pulumi.getter
    def forwarder6(self) -> str:
        """
        Forwarder IPv6 address.
        """
        return pulumi.get(self, "forwarder6")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipMaster")
    def ip_master(self) -> str:
        """
        IP address of master DNS server. Entries in this master DNS server and imported into the DNS zone.
        """
        return pulumi.get(self, "ip_master")

    @property
    @pulumi.getter(name="ipPrimary")
    def ip_primary(self) -> str:
        """
        IP address of primary DNS server. Entries in this primary DNS server and imported into the DNS zone.
        """
        return pulumi.get(self, "ip_primary")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Zone name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryName")
    def primary_name(self) -> str:
        """
        Domain name of the default DNS server for this zone.
        """
        return pulumi.get(self, "primary_name")

    @property
    @pulumi.getter(name="rrMax")
    def rr_max(self) -> int:
        """
        Maximum number of resource records (10 - 65536, 0 means infinite).
        """
        return pulumi.get(self, "rr_max")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> str:
        """
        Source IP for forwarding to DNS server.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> str:
        """
        IPv6 source IP address for forwarding to DNS server.
        """
        return pulumi.get(self, "source_ip6")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable resource record status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        """
        Time-to-live for this entry (0 to 2147483647 sec, default = 0).
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource record type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def view(self) -> str:
        """
        Zone view (public to serve public clients, shadow to serve internal clients).
        """
        return pulumi.get(self, "view")


class AwaitableGetDnsdatabaseResult(GetDnsdatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDnsdatabaseResult(
            allow_transfer=self.allow_transfer,
            authoritative=self.authoritative,
            contact=self.contact,
            dns_entries=self.dns_entries,
            domain=self.domain,
            forwarder=self.forwarder,
            forwarder6=self.forwarder6,
            id=self.id,
            ip_master=self.ip_master,
            ip_primary=self.ip_primary,
            name=self.name,
            primary_name=self.primary_name,
            rr_max=self.rr_max,
            source_ip=self.source_ip,
            source_ip6=self.source_ip6,
            status=self.status,
            ttl=self.ttl,
            type=self.type,
            vdomparam=self.vdomparam,
            view=self.view)


def get_dnsdatabase(name: Optional[str] = None,
                    vdomparam: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDnsdatabaseResult:
    """
    Use this data source to get information on an fortios system dnsdatabase


    :param str name: Specify the name of the desired system dnsdatabase.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:system/getDnsdatabase:getDnsdatabase', __args__, opts=opts, typ=GetDnsdatabaseResult).value

    return AwaitableGetDnsdatabaseResult(
        allow_transfer=pulumi.get(__ret__, 'allow_transfer'),
        authoritative=pulumi.get(__ret__, 'authoritative'),
        contact=pulumi.get(__ret__, 'contact'),
        dns_entries=pulumi.get(__ret__, 'dns_entries'),
        domain=pulumi.get(__ret__, 'domain'),
        forwarder=pulumi.get(__ret__, 'forwarder'),
        forwarder6=pulumi.get(__ret__, 'forwarder6'),
        id=pulumi.get(__ret__, 'id'),
        ip_master=pulumi.get(__ret__, 'ip_master'),
        ip_primary=pulumi.get(__ret__, 'ip_primary'),
        name=pulumi.get(__ret__, 'name'),
        primary_name=pulumi.get(__ret__, 'primary_name'),
        rr_max=pulumi.get(__ret__, 'rr_max'),
        source_ip=pulumi.get(__ret__, 'source_ip'),
        source_ip6=pulumi.get(__ret__, 'source_ip6'),
        status=pulumi.get(__ret__, 'status'),
        ttl=pulumi.get(__ret__, 'ttl'),
        type=pulumi.get(__ret__, 'type'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        view=pulumi.get(__ret__, 'view'))


@_utilities.lift_output_func(get_dnsdatabase)
def get_dnsdatabase_output(name: Optional[pulumi.Input[str]] = None,
                           vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDnsdatabaseResult]:
    """
    Use this data source to get information on an fortios system dnsdatabase


    :param str name: Specify the name of the desired system dnsdatabase.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
