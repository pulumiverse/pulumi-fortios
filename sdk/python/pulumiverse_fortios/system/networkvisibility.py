# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['NetworkvisibilityArgs', 'Networkvisibility']

@pulumi.input_type
class NetworkvisibilityArgs:
    def __init__(__self__, *,
                 destination_hostname_visibility: Optional[pulumi.Input[str]] = None,
                 destination_location: Optional[pulumi.Input[str]] = None,
                 destination_visibility: Optional[pulumi.Input[str]] = None,
                 hostname_limit: Optional[pulumi.Input[int]] = None,
                 hostname_ttl: Optional[pulumi.Input[int]] = None,
                 source_location: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Networkvisibility resource.
        :param pulumi.Input[str] destination_hostname_visibility: Enable/disable logging of destination hostname visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] destination_location: Enable/disable logging of destination geographical location visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] destination_visibility: Enable/disable logging of destination visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] hostname_limit: Limit of the number of hostname table entries (0 - 50000).
        :param pulumi.Input[int] hostname_ttl: TTL of hostname table entries (60 - 86400).
        :param pulumi.Input[str] source_location: Enable/disable logging of source geographical location visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if destination_hostname_visibility is not None:
            pulumi.set(__self__, "destination_hostname_visibility", destination_hostname_visibility)
        if destination_location is not None:
            pulumi.set(__self__, "destination_location", destination_location)
        if destination_visibility is not None:
            pulumi.set(__self__, "destination_visibility", destination_visibility)
        if hostname_limit is not None:
            pulumi.set(__self__, "hostname_limit", hostname_limit)
        if hostname_ttl is not None:
            pulumi.set(__self__, "hostname_ttl", hostname_ttl)
        if source_location is not None:
            pulumi.set(__self__, "source_location", source_location)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="destinationHostnameVisibility")
    def destination_hostname_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of destination hostname visibility. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "destination_hostname_visibility")

    @destination_hostname_visibility.setter
    def destination_hostname_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_hostname_visibility", value)

    @property
    @pulumi.getter(name="destinationLocation")
    def destination_location(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of destination geographical location visibility. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "destination_location")

    @destination_location.setter
    def destination_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_location", value)

    @property
    @pulumi.getter(name="destinationVisibility")
    def destination_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of destination visibility. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "destination_visibility")

    @destination_visibility.setter
    def destination_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_visibility", value)

    @property
    @pulumi.getter(name="hostnameLimit")
    def hostname_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Limit of the number of hostname table entries (0 - 50000).
        """
        return pulumi.get(self, "hostname_limit")

    @hostname_limit.setter
    def hostname_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hostname_limit", value)

    @property
    @pulumi.getter(name="hostnameTtl")
    def hostname_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL of hostname table entries (60 - 86400).
        """
        return pulumi.get(self, "hostname_ttl")

    @hostname_ttl.setter
    def hostname_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hostname_ttl", value)

    @property
    @pulumi.getter(name="sourceLocation")
    def source_location(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of source geographical location visibility. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "source_location")

    @source_location.setter
    def source_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_location", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _NetworkvisibilityState:
    def __init__(__self__, *,
                 destination_hostname_visibility: Optional[pulumi.Input[str]] = None,
                 destination_location: Optional[pulumi.Input[str]] = None,
                 destination_visibility: Optional[pulumi.Input[str]] = None,
                 hostname_limit: Optional[pulumi.Input[int]] = None,
                 hostname_ttl: Optional[pulumi.Input[int]] = None,
                 source_location: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Networkvisibility resources.
        :param pulumi.Input[str] destination_hostname_visibility: Enable/disable logging of destination hostname visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] destination_location: Enable/disable logging of destination geographical location visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] destination_visibility: Enable/disable logging of destination visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] hostname_limit: Limit of the number of hostname table entries (0 - 50000).
        :param pulumi.Input[int] hostname_ttl: TTL of hostname table entries (60 - 86400).
        :param pulumi.Input[str] source_location: Enable/disable logging of source geographical location visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if destination_hostname_visibility is not None:
            pulumi.set(__self__, "destination_hostname_visibility", destination_hostname_visibility)
        if destination_location is not None:
            pulumi.set(__self__, "destination_location", destination_location)
        if destination_visibility is not None:
            pulumi.set(__self__, "destination_visibility", destination_visibility)
        if hostname_limit is not None:
            pulumi.set(__self__, "hostname_limit", hostname_limit)
        if hostname_ttl is not None:
            pulumi.set(__self__, "hostname_ttl", hostname_ttl)
        if source_location is not None:
            pulumi.set(__self__, "source_location", source_location)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="destinationHostnameVisibility")
    def destination_hostname_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of destination hostname visibility. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "destination_hostname_visibility")

    @destination_hostname_visibility.setter
    def destination_hostname_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_hostname_visibility", value)

    @property
    @pulumi.getter(name="destinationLocation")
    def destination_location(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of destination geographical location visibility. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "destination_location")

    @destination_location.setter
    def destination_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_location", value)

    @property
    @pulumi.getter(name="destinationVisibility")
    def destination_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of destination visibility. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "destination_visibility")

    @destination_visibility.setter
    def destination_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_visibility", value)

    @property
    @pulumi.getter(name="hostnameLimit")
    def hostname_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Limit of the number of hostname table entries (0 - 50000).
        """
        return pulumi.get(self, "hostname_limit")

    @hostname_limit.setter
    def hostname_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hostname_limit", value)

    @property
    @pulumi.getter(name="hostnameTtl")
    def hostname_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL of hostname table entries (60 - 86400).
        """
        return pulumi.get(self, "hostname_ttl")

    @hostname_ttl.setter
    def hostname_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hostname_ttl", value)

    @property
    @pulumi.getter(name="sourceLocation")
    def source_location(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of source geographical location visibility. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "source_location")

    @source_location.setter
    def source_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_location", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Networkvisibility(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_hostname_visibility: Optional[pulumi.Input[str]] = None,
                 destination_location: Optional[pulumi.Input[str]] = None,
                 destination_visibility: Optional[pulumi.Input[str]] = None,
                 hostname_limit: Optional[pulumi.Input[int]] = None,
                 hostname_ttl: Optional[pulumi.Input[int]] = None,
                 source_location: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure network visibility settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Networkvisibility("trname",
            destination_hostname_visibility="enable",
            destination_location="enable",
            destination_visibility="enable",
            hostname_limit=5000,
            hostname_ttl=86400,
            source_location="enable")
        ```

        ## Import

        System NetworkVisibility can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/networkvisibility:Networkvisibility labelname SystemNetworkVisibility
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/networkvisibility:Networkvisibility labelname SystemNetworkVisibility
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] destination_hostname_visibility: Enable/disable logging of destination hostname visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] destination_location: Enable/disable logging of destination geographical location visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] destination_visibility: Enable/disable logging of destination visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] hostname_limit: Limit of the number of hostname table entries (0 - 50000).
        :param pulumi.Input[int] hostname_ttl: TTL of hostname table entries (60 - 86400).
        :param pulumi.Input[str] source_location: Enable/disable logging of source geographical location visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NetworkvisibilityArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure network visibility settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Networkvisibility("trname",
            destination_hostname_visibility="enable",
            destination_location="enable",
            destination_visibility="enable",
            hostname_limit=5000,
            hostname_ttl=86400,
            source_location="enable")
        ```

        ## Import

        System NetworkVisibility can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/networkvisibility:Networkvisibility labelname SystemNetworkVisibility
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/networkvisibility:Networkvisibility labelname SystemNetworkVisibility
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param NetworkvisibilityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkvisibilityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_hostname_visibility: Optional[pulumi.Input[str]] = None,
                 destination_location: Optional[pulumi.Input[str]] = None,
                 destination_visibility: Optional[pulumi.Input[str]] = None,
                 hostname_limit: Optional[pulumi.Input[int]] = None,
                 hostname_ttl: Optional[pulumi.Input[int]] = None,
                 source_location: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkvisibilityArgs.__new__(NetworkvisibilityArgs)

            __props__.__dict__["destination_hostname_visibility"] = destination_hostname_visibility
            __props__.__dict__["destination_location"] = destination_location
            __props__.__dict__["destination_visibility"] = destination_visibility
            __props__.__dict__["hostname_limit"] = hostname_limit
            __props__.__dict__["hostname_ttl"] = hostname_ttl
            __props__.__dict__["source_location"] = source_location
            __props__.__dict__["vdomparam"] = vdomparam
        super(Networkvisibility, __self__).__init__(
            'fortios:system/networkvisibility:Networkvisibility',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            destination_hostname_visibility: Optional[pulumi.Input[str]] = None,
            destination_location: Optional[pulumi.Input[str]] = None,
            destination_visibility: Optional[pulumi.Input[str]] = None,
            hostname_limit: Optional[pulumi.Input[int]] = None,
            hostname_ttl: Optional[pulumi.Input[int]] = None,
            source_location: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Networkvisibility':
        """
        Get an existing Networkvisibility resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] destination_hostname_visibility: Enable/disable logging of destination hostname visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] destination_location: Enable/disable logging of destination geographical location visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] destination_visibility: Enable/disable logging of destination visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] hostname_limit: Limit of the number of hostname table entries (0 - 50000).
        :param pulumi.Input[int] hostname_ttl: TTL of hostname table entries (60 - 86400).
        :param pulumi.Input[str] source_location: Enable/disable logging of source geographical location visibility. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkvisibilityState.__new__(_NetworkvisibilityState)

        __props__.__dict__["destination_hostname_visibility"] = destination_hostname_visibility
        __props__.__dict__["destination_location"] = destination_location
        __props__.__dict__["destination_visibility"] = destination_visibility
        __props__.__dict__["hostname_limit"] = hostname_limit
        __props__.__dict__["hostname_ttl"] = hostname_ttl
        __props__.__dict__["source_location"] = source_location
        __props__.__dict__["vdomparam"] = vdomparam
        return Networkvisibility(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="destinationHostnameVisibility")
    def destination_hostname_visibility(self) -> pulumi.Output[str]:
        """
        Enable/disable logging of destination hostname visibility. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "destination_hostname_visibility")

    @property
    @pulumi.getter(name="destinationLocation")
    def destination_location(self) -> pulumi.Output[str]:
        """
        Enable/disable logging of destination geographical location visibility. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "destination_location")

    @property
    @pulumi.getter(name="destinationVisibility")
    def destination_visibility(self) -> pulumi.Output[str]:
        """
        Enable/disable logging of destination visibility. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "destination_visibility")

    @property
    @pulumi.getter(name="hostnameLimit")
    def hostname_limit(self) -> pulumi.Output[int]:
        """
        Limit of the number of hostname table entries (0 - 50000).
        """
        return pulumi.get(self, "hostname_limit")

    @property
    @pulumi.getter(name="hostnameTtl")
    def hostname_ttl(self) -> pulumi.Output[int]:
        """
        TTL of hostname table entries (60 - 86400).
        """
        return pulumi.get(self, "hostname_ttl")

    @property
    @pulumi.getter(name="sourceLocation")
    def source_location(self) -> pulumi.Output[str]:
        """
        Enable/disable logging of source geographical location visibility. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "source_location")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

