# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeviceupgradeArgs', 'Deviceupgrade']

@pulumi.input_type
class DeviceupgradeArgs:
    def __init__(__self__, *,
                 device_type: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_reboot_controller: Optional[pulumi.Input[str]] = None,
                 known_ha_members: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceupgradeKnownHaMemberArgs']]]] = None,
                 maximum_minutes: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 setup_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 timing: Optional[pulumi.Input[str]] = None,
                 upgrade_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Deviceupgrade resource.
        :param pulumi.Input[str] device_type: Fortinet device type.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] failure_reason: Upgrade failure reason.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_reboot_controller: Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        :param pulumi.Input[Sequence[pulumi.Input['DeviceupgradeKnownHaMemberArgs']]] known_ha_members: Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        :param pulumi.Input[int] maximum_minutes: Maximum number of minutes to allow for immediate upgrade preparation.
        :param pulumi.Input[str] serial: Serial number of the node to include.
        :param pulumi.Input[str] setup_time: Upgrade configuration time in UTC (hh:mm yyyy/mm/dd UTC).
        :param pulumi.Input[str] status: Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `device-disconnected`, `ready`, `coordinating`, `staging`, `final-check`, `upgrade-devices`, `cancelled`, `confirmed`, `done`, `failed`.
        :param pulumi.Input[str] time: Scheduled upgrade execution time in UTC (hh:mm yyyy/mm/dd UTC).
        :param pulumi.Input[str] timing: Run immediately or at a scheduled time. Valid values: `immediate`, `scheduled`.
        :param pulumi.Input[str] upgrade_path: Fortinet OS image versions to upgrade through in major-minor-patch format, such as 7-0-4.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ha_reboot_controller is not None:
            pulumi.set(__self__, "ha_reboot_controller", ha_reboot_controller)
        if known_ha_members is not None:
            pulumi.set(__self__, "known_ha_members", known_ha_members)
        if maximum_minutes is not None:
            pulumi.set(__self__, "maximum_minutes", maximum_minutes)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if setup_time is not None:
            pulumi.set(__self__, "setup_time", setup_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if timing is not None:
            pulumi.set(__self__, "timing", timing)
        if upgrade_path is not None:
            pulumi.set(__self__, "upgrade_path", upgrade_path)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Fortinet device type.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Upgrade failure reason.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="haRebootController")
    def ha_reboot_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        """
        return pulumi.get(self, "ha_reboot_controller")

    @ha_reboot_controller.setter
    def ha_reboot_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_reboot_controller", value)

    @property
    @pulumi.getter(name="knownHaMembers")
    def known_ha_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceupgradeKnownHaMemberArgs']]]]:
        """
        Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        """
        return pulumi.get(self, "known_ha_members")

    @known_ha_members.setter
    def known_ha_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceupgradeKnownHaMemberArgs']]]]):
        pulumi.set(self, "known_ha_members", value)

    @property
    @pulumi.getter(name="maximumMinutes")
    def maximum_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of minutes to allow for immediate upgrade preparation.
        """
        return pulumi.get(self, "maximum_minutes")

    @maximum_minutes.setter
    def maximum_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_minutes", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number of the node to include.
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="setupTime")
    def setup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Upgrade configuration time in UTC (hh:mm yyyy/mm/dd UTC).
        """
        return pulumi.get(self, "setup_time")

    @setup_time.setter
    def setup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "setup_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `device-disconnected`, `ready`, `coordinating`, `staging`, `final-check`, `upgrade-devices`, `cancelled`, `confirmed`, `done`, `failed`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduled upgrade execution time in UTC (hh:mm yyyy/mm/dd UTC).
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def timing(self) -> Optional[pulumi.Input[str]]:
        """
        Run immediately or at a scheduled time. Valid values: `immediate`, `scheduled`.
        """
        return pulumi.get(self, "timing")

    @timing.setter
    def timing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timing", value)

    @property
    @pulumi.getter(name="upgradePath")
    def upgrade_path(self) -> Optional[pulumi.Input[str]]:
        """
        Fortinet OS image versions to upgrade through in major-minor-patch format, such as 7-0-4.
        """
        return pulumi.get(self, "upgrade_path")

    @upgrade_path.setter
    def upgrade_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_path", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _DeviceupgradeState:
    def __init__(__self__, *,
                 device_type: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_reboot_controller: Optional[pulumi.Input[str]] = None,
                 known_ha_members: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceupgradeKnownHaMemberArgs']]]] = None,
                 maximum_minutes: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 setup_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 timing: Optional[pulumi.Input[str]] = None,
                 upgrade_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Deviceupgrade resources.
        :param pulumi.Input[str] device_type: Fortinet device type.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] failure_reason: Upgrade failure reason.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_reboot_controller: Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        :param pulumi.Input[Sequence[pulumi.Input['DeviceupgradeKnownHaMemberArgs']]] known_ha_members: Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        :param pulumi.Input[int] maximum_minutes: Maximum number of minutes to allow for immediate upgrade preparation.
        :param pulumi.Input[str] serial: Serial number of the node to include.
        :param pulumi.Input[str] setup_time: Upgrade configuration time in UTC (hh:mm yyyy/mm/dd UTC).
        :param pulumi.Input[str] status: Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `device-disconnected`, `ready`, `coordinating`, `staging`, `final-check`, `upgrade-devices`, `cancelled`, `confirmed`, `done`, `failed`.
        :param pulumi.Input[str] time: Scheduled upgrade execution time in UTC (hh:mm yyyy/mm/dd UTC).
        :param pulumi.Input[str] timing: Run immediately or at a scheduled time. Valid values: `immediate`, `scheduled`.
        :param pulumi.Input[str] upgrade_path: Fortinet OS image versions to upgrade through in major-minor-patch format, such as 7-0-4.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ha_reboot_controller is not None:
            pulumi.set(__self__, "ha_reboot_controller", ha_reboot_controller)
        if known_ha_members is not None:
            pulumi.set(__self__, "known_ha_members", known_ha_members)
        if maximum_minutes is not None:
            pulumi.set(__self__, "maximum_minutes", maximum_minutes)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if setup_time is not None:
            pulumi.set(__self__, "setup_time", setup_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if timing is not None:
            pulumi.set(__self__, "timing", timing)
        if upgrade_path is not None:
            pulumi.set(__self__, "upgrade_path", upgrade_path)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Fortinet device type.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Upgrade failure reason.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="haRebootController")
    def ha_reboot_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        """
        return pulumi.get(self, "ha_reboot_controller")

    @ha_reboot_controller.setter
    def ha_reboot_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_reboot_controller", value)

    @property
    @pulumi.getter(name="knownHaMembers")
    def known_ha_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceupgradeKnownHaMemberArgs']]]]:
        """
        Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        """
        return pulumi.get(self, "known_ha_members")

    @known_ha_members.setter
    def known_ha_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceupgradeKnownHaMemberArgs']]]]):
        pulumi.set(self, "known_ha_members", value)

    @property
    @pulumi.getter(name="maximumMinutes")
    def maximum_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of minutes to allow for immediate upgrade preparation.
        """
        return pulumi.get(self, "maximum_minutes")

    @maximum_minutes.setter
    def maximum_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_minutes", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number of the node to include.
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="setupTime")
    def setup_time(self) -> Optional[pulumi.Input[str]]:
        """
        Upgrade configuration time in UTC (hh:mm yyyy/mm/dd UTC).
        """
        return pulumi.get(self, "setup_time")

    @setup_time.setter
    def setup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "setup_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `device-disconnected`, `ready`, `coordinating`, `staging`, `final-check`, `upgrade-devices`, `cancelled`, `confirmed`, `done`, `failed`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduled upgrade execution time in UTC (hh:mm yyyy/mm/dd UTC).
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def timing(self) -> Optional[pulumi.Input[str]]:
        """
        Run immediately or at a scheduled time. Valid values: `immediate`, `scheduled`.
        """
        return pulumi.get(self, "timing")

    @timing.setter
    def timing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timing", value)

    @property
    @pulumi.getter(name="upgradePath")
    def upgrade_path(self) -> Optional[pulumi.Input[str]]:
        """
        Fortinet OS image versions to upgrade through in major-minor-patch format, such as 7-0-4.
        """
        return pulumi.get(self, "upgrade_path")

    @upgrade_path.setter
    def upgrade_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_path", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Deviceupgrade(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_reboot_controller: Optional[pulumi.Input[str]] = None,
                 known_ha_members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeviceupgradeKnownHaMemberArgs']]]]] = None,
                 maximum_minutes: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 setup_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 timing: Optional[pulumi.Input[str]] = None,
                 upgrade_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Independent upgrades for managed devices. Applies to FortiOS Version `>= 7.2.4`.

        ## Import

        System DeviceUpgrade can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/deviceupgrade:Deviceupgrade labelname {{serial}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/deviceupgrade:Deviceupgrade labelname {{serial}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device_type: Fortinet device type.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] failure_reason: Upgrade failure reason.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_reboot_controller: Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeviceupgradeKnownHaMemberArgs']]]] known_ha_members: Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        :param pulumi.Input[int] maximum_minutes: Maximum number of minutes to allow for immediate upgrade preparation.
        :param pulumi.Input[str] serial: Serial number of the node to include.
        :param pulumi.Input[str] setup_time: Upgrade configuration time in UTC (hh:mm yyyy/mm/dd UTC).
        :param pulumi.Input[str] status: Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `device-disconnected`, `ready`, `coordinating`, `staging`, `final-check`, `upgrade-devices`, `cancelled`, `confirmed`, `done`, `failed`.
        :param pulumi.Input[str] time: Scheduled upgrade execution time in UTC (hh:mm yyyy/mm/dd UTC).
        :param pulumi.Input[str] timing: Run immediately or at a scheduled time. Valid values: `immediate`, `scheduled`.
        :param pulumi.Input[str] upgrade_path: Fortinet OS image versions to upgrade through in major-minor-patch format, such as 7-0-4.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DeviceupgradeArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Independent upgrades for managed devices. Applies to FortiOS Version `>= 7.2.4`.

        ## Import

        System DeviceUpgrade can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/deviceupgrade:Deviceupgrade labelname {{serial}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/deviceupgrade:Deviceupgrade labelname {{serial}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param DeviceupgradeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceupgradeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_reboot_controller: Optional[pulumi.Input[str]] = None,
                 known_ha_members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeviceupgradeKnownHaMemberArgs']]]]] = None,
                 maximum_minutes: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 setup_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 timing: Optional[pulumi.Input[str]] = None,
                 upgrade_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceupgradeArgs.__new__(DeviceupgradeArgs)

            __props__.__dict__["device_type"] = device_type
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["failure_reason"] = failure_reason
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ha_reboot_controller"] = ha_reboot_controller
            __props__.__dict__["known_ha_members"] = known_ha_members
            __props__.__dict__["maximum_minutes"] = maximum_minutes
            __props__.__dict__["serial"] = serial
            __props__.__dict__["setup_time"] = setup_time
            __props__.__dict__["status"] = status
            __props__.__dict__["time"] = time
            __props__.__dict__["timing"] = timing
            __props__.__dict__["upgrade_path"] = upgrade_path
            __props__.__dict__["vdomparam"] = vdomparam
        super(Deviceupgrade, __self__).__init__(
            'fortios:system/deviceupgrade:Deviceupgrade',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device_type: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            failure_reason: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ha_reboot_controller: Optional[pulumi.Input[str]] = None,
            known_ha_members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeviceupgradeKnownHaMemberArgs']]]]] = None,
            maximum_minutes: Optional[pulumi.Input[int]] = None,
            serial: Optional[pulumi.Input[str]] = None,
            setup_time: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            time: Optional[pulumi.Input[str]] = None,
            timing: Optional[pulumi.Input[str]] = None,
            upgrade_path: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Deviceupgrade':
        """
        Get an existing Deviceupgrade resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device_type: Fortinet device type.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] failure_reason: Upgrade failure reason.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_reboot_controller: Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeviceupgradeKnownHaMemberArgs']]]] known_ha_members: Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        :param pulumi.Input[int] maximum_minutes: Maximum number of minutes to allow for immediate upgrade preparation.
        :param pulumi.Input[str] serial: Serial number of the node to include.
        :param pulumi.Input[str] setup_time: Upgrade configuration time in UTC (hh:mm yyyy/mm/dd UTC).
        :param pulumi.Input[str] status: Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `device-disconnected`, `ready`, `coordinating`, `staging`, `final-check`, `upgrade-devices`, `cancelled`, `confirmed`, `done`, `failed`.
        :param pulumi.Input[str] time: Scheduled upgrade execution time in UTC (hh:mm yyyy/mm/dd UTC).
        :param pulumi.Input[str] timing: Run immediately or at a scheduled time. Valid values: `immediate`, `scheduled`.
        :param pulumi.Input[str] upgrade_path: Fortinet OS image versions to upgrade through in major-minor-patch format, such as 7-0-4.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceupgradeState.__new__(_DeviceupgradeState)

        __props__.__dict__["device_type"] = device_type
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["failure_reason"] = failure_reason
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ha_reboot_controller"] = ha_reboot_controller
        __props__.__dict__["known_ha_members"] = known_ha_members
        __props__.__dict__["maximum_minutes"] = maximum_minutes
        __props__.__dict__["serial"] = serial
        __props__.__dict__["setup_time"] = setup_time
        __props__.__dict__["status"] = status
        __props__.__dict__["time"] = time
        __props__.__dict__["timing"] = timing
        __props__.__dict__["upgrade_path"] = upgrade_path
        __props__.__dict__["vdomparam"] = vdomparam
        return Deviceupgrade(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> pulumi.Output[str]:
        """
        Fortinet device type.
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> pulumi.Output[str]:
        """
        Upgrade failure reason.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="haRebootController")
    def ha_reboot_controller(self) -> pulumi.Output[str]:
        """
        Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        """
        return pulumi.get(self, "ha_reboot_controller")

    @property
    @pulumi.getter(name="knownHaMembers")
    def known_ha_members(self) -> pulumi.Output[Optional[Sequence['outputs.DeviceupgradeKnownHaMember']]]:
        """
        Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        """
        return pulumi.get(self, "known_ha_members")

    @property
    @pulumi.getter(name="maximumMinutes")
    def maximum_minutes(self) -> pulumi.Output[int]:
        """
        Maximum number of minutes to allow for immediate upgrade preparation.
        """
        return pulumi.get(self, "maximum_minutes")

    @property
    @pulumi.getter
    def serial(self) -> pulumi.Output[str]:
        """
        Serial number of the node to include.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="setupTime")
    def setup_time(self) -> pulumi.Output[str]:
        """
        Upgrade configuration time in UTC (hh:mm yyyy/mm/dd UTC).
        """
        return pulumi.get(self, "setup_time")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Current status of the upgrade. Valid values: `disabled`, `initialized`, `downloading`, `device-disconnected`, `ready`, `coordinating`, `staging`, `final-check`, `upgrade-devices`, `cancelled`, `confirmed`, `done`, `failed`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def time(self) -> pulumi.Output[str]:
        """
        Scheduled upgrade execution time in UTC (hh:mm yyyy/mm/dd UTC).
        """
        return pulumi.get(self, "time")

    @property
    @pulumi.getter
    def timing(self) -> pulumi.Output[str]:
        """
        Run immediately or at a scheduled time. Valid values: `immediate`, `scheduled`.
        """
        return pulumi.get(self, "timing")

    @property
    @pulumi.getter(name="upgradePath")
    def upgrade_path(self) -> pulumi.Output[str]:
        """
        Fortinet OS image versions to upgrade through in major-minor-patch format, such as 7-0-4.
        """
        return pulumi.get(self, "upgrade_path")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

