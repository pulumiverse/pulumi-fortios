# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAutomationtriggerResult',
    'AwaitableGetAutomationtriggerResult',
    'get_automationtrigger',
    'get_automationtrigger_output',
]

@pulumi.output_type
class GetAutomationtriggerResult:
    """
    A collection of values returned by getAutomationtrigger.
    """
    def __init__(__self__, description=None, event_type=None, fabric_event_name=None, fabric_event_severity=None, faz_event_name=None, faz_event_severity=None, faz_event_tags=None, fields=None, id=None, ioc_level=None, license_type=None, logid=None, logid_blocks=None, name=None, report_type=None, serial=None, trigger_datetime=None, trigger_day=None, trigger_frequency=None, trigger_hour=None, trigger_minute=None, trigger_type=None, trigger_weekday=None, vdomparam=None, vdoms=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if event_type and not isinstance(event_type, str):
            raise TypeError("Expected argument 'event_type' to be a str")
        pulumi.set(__self__, "event_type", event_type)
        if fabric_event_name and not isinstance(fabric_event_name, str):
            raise TypeError("Expected argument 'fabric_event_name' to be a str")
        pulumi.set(__self__, "fabric_event_name", fabric_event_name)
        if fabric_event_severity and not isinstance(fabric_event_severity, str):
            raise TypeError("Expected argument 'fabric_event_severity' to be a str")
        pulumi.set(__self__, "fabric_event_severity", fabric_event_severity)
        if faz_event_name and not isinstance(faz_event_name, str):
            raise TypeError("Expected argument 'faz_event_name' to be a str")
        pulumi.set(__self__, "faz_event_name", faz_event_name)
        if faz_event_severity and not isinstance(faz_event_severity, str):
            raise TypeError("Expected argument 'faz_event_severity' to be a str")
        pulumi.set(__self__, "faz_event_severity", faz_event_severity)
        if faz_event_tags and not isinstance(faz_event_tags, str):
            raise TypeError("Expected argument 'faz_event_tags' to be a str")
        pulumi.set(__self__, "faz_event_tags", faz_event_tags)
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ioc_level and not isinstance(ioc_level, str):
            raise TypeError("Expected argument 'ioc_level' to be a str")
        pulumi.set(__self__, "ioc_level", ioc_level)
        if license_type and not isinstance(license_type, str):
            raise TypeError("Expected argument 'license_type' to be a str")
        pulumi.set(__self__, "license_type", license_type)
        if logid and not isinstance(logid, int):
            raise TypeError("Expected argument 'logid' to be a int")
        pulumi.set(__self__, "logid", logid)
        if logid_blocks and not isinstance(logid_blocks, list):
            raise TypeError("Expected argument 'logid_blocks' to be a list")
        pulumi.set(__self__, "logid_blocks", logid_blocks)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if report_type and not isinstance(report_type, str):
            raise TypeError("Expected argument 'report_type' to be a str")
        pulumi.set(__self__, "report_type", report_type)
        if serial and not isinstance(serial, str):
            raise TypeError("Expected argument 'serial' to be a str")
        pulumi.set(__self__, "serial", serial)
        if trigger_datetime and not isinstance(trigger_datetime, str):
            raise TypeError("Expected argument 'trigger_datetime' to be a str")
        pulumi.set(__self__, "trigger_datetime", trigger_datetime)
        if trigger_day and not isinstance(trigger_day, int):
            raise TypeError("Expected argument 'trigger_day' to be a int")
        pulumi.set(__self__, "trigger_day", trigger_day)
        if trigger_frequency and not isinstance(trigger_frequency, str):
            raise TypeError("Expected argument 'trigger_frequency' to be a str")
        pulumi.set(__self__, "trigger_frequency", trigger_frequency)
        if trigger_hour and not isinstance(trigger_hour, int):
            raise TypeError("Expected argument 'trigger_hour' to be a int")
        pulumi.set(__self__, "trigger_hour", trigger_hour)
        if trigger_minute and not isinstance(trigger_minute, int):
            raise TypeError("Expected argument 'trigger_minute' to be a int")
        pulumi.set(__self__, "trigger_minute", trigger_minute)
        if trigger_type and not isinstance(trigger_type, str):
            raise TypeError("Expected argument 'trigger_type' to be a str")
        pulumi.set(__self__, "trigger_type", trigger_type)
        if trigger_weekday and not isinstance(trigger_weekday, str):
            raise TypeError("Expected argument 'trigger_weekday' to be a str")
        pulumi.set(__self__, "trigger_weekday", trigger_weekday)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if vdoms and not isinstance(vdoms, list):
            raise TypeError("Expected argument 'vdoms' to be a list")
        pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> str:
        """
        Event type.
        """
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter(name="fabricEventName")
    def fabric_event_name(self) -> str:
        """
        Fabric connector event handler name.
        """
        return pulumi.get(self, "fabric_event_name")

    @property
    @pulumi.getter(name="fabricEventSeverity")
    def fabric_event_severity(self) -> str:
        """
        Fabric connector event severity.
        """
        return pulumi.get(self, "fabric_event_severity")

    @property
    @pulumi.getter(name="fazEventName")
    def faz_event_name(self) -> str:
        """
        FortiAnalyzer event handler name.
        """
        return pulumi.get(self, "faz_event_name")

    @property
    @pulumi.getter(name="fazEventSeverity")
    def faz_event_severity(self) -> str:
        """
        FortiAnalyzer event severity.
        """
        return pulumi.get(self, "faz_event_severity")

    @property
    @pulumi.getter(name="fazEventTags")
    def faz_event_tags(self) -> str:
        """
        FortiAnalyzer event tags.
        """
        return pulumi.get(self, "faz_event_tags")

    @property
    @pulumi.getter
    def fields(self) -> Sequence['outputs.GetAutomationtriggerFieldResult']:
        """
        Customized trigger field settings. The structure of `fields` block is documented below.
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="iocLevel")
    def ioc_level(self) -> str:
        """
        IOC threat level.
        """
        return pulumi.get(self, "ioc_level")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        License type.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter
    def logid(self) -> int:
        """
        Log ID to trigger event.
        """
        return pulumi.get(self, "logid")

    @property
    @pulumi.getter(name="logidBlocks")
    def logid_blocks(self) -> Sequence['outputs.GetAutomationtriggerLogidBlockResult']:
        """
        Log IDs to trigger event. The structure of `logid_block` block is documented below.
        """
        return pulumi.get(self, "logid_blocks")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="reportType")
    def report_type(self) -> str:
        """
        Security Rating report.
        """
        return pulumi.get(self, "report_type")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Fabric connector serial number.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="triggerDatetime")
    def trigger_datetime(self) -> str:
        """
        Trigger date and time (YYYY-MM-DD HH:MM:SS).
        """
        return pulumi.get(self, "trigger_datetime")

    @property
    @pulumi.getter(name="triggerDay")
    def trigger_day(self) -> int:
        """
        Day within a month to trigger.
        """
        return pulumi.get(self, "trigger_day")

    @property
    @pulumi.getter(name="triggerFrequency")
    def trigger_frequency(self) -> str:
        """
        Scheduled trigger frequency (default = daily).
        """
        return pulumi.get(self, "trigger_frequency")

    @property
    @pulumi.getter(name="triggerHour")
    def trigger_hour(self) -> int:
        """
        Hour of the day on which to trigger (0 - 23, default = 1).
        """
        return pulumi.get(self, "trigger_hour")

    @property
    @pulumi.getter(name="triggerMinute")
    def trigger_minute(self) -> int:
        """
        Minute of the hour on which to trigger (0 - 59, 60 to randomize).
        """
        return pulumi.get(self, "trigger_minute")

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> str:
        """
        Trigger type.
        """
        return pulumi.get(self, "trigger_type")

    @property
    @pulumi.getter(name="triggerWeekday")
    def trigger_weekday(self) -> str:
        """
        Day of week for trigger.
        """
        return pulumi.get(self, "trigger_weekday")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vdoms(self) -> Sequence['outputs.GetAutomationtriggerVdomResult']:
        """
        Virtual domain(s) that this trigger is valid for. The structure of `vdom` block is documented below.
        """
        return pulumi.get(self, "vdoms")


class AwaitableGetAutomationtriggerResult(GetAutomationtriggerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutomationtriggerResult(
            description=self.description,
            event_type=self.event_type,
            fabric_event_name=self.fabric_event_name,
            fabric_event_severity=self.fabric_event_severity,
            faz_event_name=self.faz_event_name,
            faz_event_severity=self.faz_event_severity,
            faz_event_tags=self.faz_event_tags,
            fields=self.fields,
            id=self.id,
            ioc_level=self.ioc_level,
            license_type=self.license_type,
            logid=self.logid,
            logid_blocks=self.logid_blocks,
            name=self.name,
            report_type=self.report_type,
            serial=self.serial,
            trigger_datetime=self.trigger_datetime,
            trigger_day=self.trigger_day,
            trigger_frequency=self.trigger_frequency,
            trigger_hour=self.trigger_hour,
            trigger_minute=self.trigger_minute,
            trigger_type=self.trigger_type,
            trigger_weekday=self.trigger_weekday,
            vdomparam=self.vdomparam,
            vdoms=self.vdoms)


def get_automationtrigger(name: Optional[str] = None,
                          vdomparam: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutomationtriggerResult:
    """
    Use this data source to get information on an fortios system automationtrigger


    :param str name: Specify the name of the desired system automationtrigger.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:system/getAutomationtrigger:getAutomationtrigger', __args__, opts=opts, typ=GetAutomationtriggerResult).value

    return AwaitableGetAutomationtriggerResult(
        description=pulumi.get(__ret__, 'description'),
        event_type=pulumi.get(__ret__, 'event_type'),
        fabric_event_name=pulumi.get(__ret__, 'fabric_event_name'),
        fabric_event_severity=pulumi.get(__ret__, 'fabric_event_severity'),
        faz_event_name=pulumi.get(__ret__, 'faz_event_name'),
        faz_event_severity=pulumi.get(__ret__, 'faz_event_severity'),
        faz_event_tags=pulumi.get(__ret__, 'faz_event_tags'),
        fields=pulumi.get(__ret__, 'fields'),
        id=pulumi.get(__ret__, 'id'),
        ioc_level=pulumi.get(__ret__, 'ioc_level'),
        license_type=pulumi.get(__ret__, 'license_type'),
        logid=pulumi.get(__ret__, 'logid'),
        logid_blocks=pulumi.get(__ret__, 'logid_blocks'),
        name=pulumi.get(__ret__, 'name'),
        report_type=pulumi.get(__ret__, 'report_type'),
        serial=pulumi.get(__ret__, 'serial'),
        trigger_datetime=pulumi.get(__ret__, 'trigger_datetime'),
        trigger_day=pulumi.get(__ret__, 'trigger_day'),
        trigger_frequency=pulumi.get(__ret__, 'trigger_frequency'),
        trigger_hour=pulumi.get(__ret__, 'trigger_hour'),
        trigger_minute=pulumi.get(__ret__, 'trigger_minute'),
        trigger_type=pulumi.get(__ret__, 'trigger_type'),
        trigger_weekday=pulumi.get(__ret__, 'trigger_weekday'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        vdoms=pulumi.get(__ret__, 'vdoms'))


@_utilities.lift_output_func(get_automationtrigger)
def get_automationtrigger_output(name: Optional[pulumi.Input[str]] = None,
                                 vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAutomationtriggerResult]:
    """
    Use this data source to get information on an fortios system automationtrigger


    :param str name: Specify the name of the desired system automationtrigger.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
