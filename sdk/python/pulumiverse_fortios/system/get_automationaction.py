# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAutomationactionResult',
    'AwaitableGetAutomationactionResult',
    'get_automationaction',
    'get_automationaction_output',
]

@pulumi.output_type
class GetAutomationactionResult:
    """
    A collection of values returned by getAutomationaction.
    """
    def __init__(__self__, accprofile=None, action_type=None, alicloud_access_key_id=None, alicloud_access_key_secret=None, alicloud_account_id=None, alicloud_function=None, alicloud_function_authorization=None, alicloud_function_domain=None, alicloud_region=None, alicloud_service=None, alicloud_version=None, aws_api_id=None, aws_api_key=None, aws_api_path=None, aws_api_stage=None, aws_domain=None, aws_region=None, azure_api_key=None, azure_app=None, azure_domain=None, azure_function=None, azure_function_authorization=None, delay=None, description=None, email_body=None, email_from=None, email_subject=None, email_tos=None, execute_security_fabric=None, forticare_email=None, gcp_function=None, gcp_function_domain=None, gcp_function_region=None, gcp_project=None, headers=None, http_body=None, http_headers=None, id=None, message=None, message_type=None, method=None, minimum_interval=None, name=None, output_size=None, port=None, protocol=None, replacement_message=None, replacemsg_group=None, required=None, script=None, sdn_connectors=None, security_tag=None, system_action=None, timeout=None, tls_certificate=None, uri=None, vdomparam=None, verify_host_cert=None):
        if accprofile and not isinstance(accprofile, str):
            raise TypeError("Expected argument 'accprofile' to be a str")
        pulumi.set(__self__, "accprofile", accprofile)
        if action_type and not isinstance(action_type, str):
            raise TypeError("Expected argument 'action_type' to be a str")
        pulumi.set(__self__, "action_type", action_type)
        if alicloud_access_key_id and not isinstance(alicloud_access_key_id, str):
            raise TypeError("Expected argument 'alicloud_access_key_id' to be a str")
        pulumi.set(__self__, "alicloud_access_key_id", alicloud_access_key_id)
        if alicloud_access_key_secret and not isinstance(alicloud_access_key_secret, str):
            raise TypeError("Expected argument 'alicloud_access_key_secret' to be a str")
        pulumi.set(__self__, "alicloud_access_key_secret", alicloud_access_key_secret)
        if alicloud_account_id and not isinstance(alicloud_account_id, str):
            raise TypeError("Expected argument 'alicloud_account_id' to be a str")
        pulumi.set(__self__, "alicloud_account_id", alicloud_account_id)
        if alicloud_function and not isinstance(alicloud_function, str):
            raise TypeError("Expected argument 'alicloud_function' to be a str")
        pulumi.set(__self__, "alicloud_function", alicloud_function)
        if alicloud_function_authorization and not isinstance(alicloud_function_authorization, str):
            raise TypeError("Expected argument 'alicloud_function_authorization' to be a str")
        pulumi.set(__self__, "alicloud_function_authorization", alicloud_function_authorization)
        if alicloud_function_domain and not isinstance(alicloud_function_domain, str):
            raise TypeError("Expected argument 'alicloud_function_domain' to be a str")
        pulumi.set(__self__, "alicloud_function_domain", alicloud_function_domain)
        if alicloud_region and not isinstance(alicloud_region, str):
            raise TypeError("Expected argument 'alicloud_region' to be a str")
        pulumi.set(__self__, "alicloud_region", alicloud_region)
        if alicloud_service and not isinstance(alicloud_service, str):
            raise TypeError("Expected argument 'alicloud_service' to be a str")
        pulumi.set(__self__, "alicloud_service", alicloud_service)
        if alicloud_version and not isinstance(alicloud_version, str):
            raise TypeError("Expected argument 'alicloud_version' to be a str")
        pulumi.set(__self__, "alicloud_version", alicloud_version)
        if aws_api_id and not isinstance(aws_api_id, str):
            raise TypeError("Expected argument 'aws_api_id' to be a str")
        pulumi.set(__self__, "aws_api_id", aws_api_id)
        if aws_api_key and not isinstance(aws_api_key, str):
            raise TypeError("Expected argument 'aws_api_key' to be a str")
        pulumi.set(__self__, "aws_api_key", aws_api_key)
        if aws_api_path and not isinstance(aws_api_path, str):
            raise TypeError("Expected argument 'aws_api_path' to be a str")
        pulumi.set(__self__, "aws_api_path", aws_api_path)
        if aws_api_stage and not isinstance(aws_api_stage, str):
            raise TypeError("Expected argument 'aws_api_stage' to be a str")
        pulumi.set(__self__, "aws_api_stage", aws_api_stage)
        if aws_domain and not isinstance(aws_domain, str):
            raise TypeError("Expected argument 'aws_domain' to be a str")
        pulumi.set(__self__, "aws_domain", aws_domain)
        if aws_region and not isinstance(aws_region, str):
            raise TypeError("Expected argument 'aws_region' to be a str")
        pulumi.set(__self__, "aws_region", aws_region)
        if azure_api_key and not isinstance(azure_api_key, str):
            raise TypeError("Expected argument 'azure_api_key' to be a str")
        pulumi.set(__self__, "azure_api_key", azure_api_key)
        if azure_app and not isinstance(azure_app, str):
            raise TypeError("Expected argument 'azure_app' to be a str")
        pulumi.set(__self__, "azure_app", azure_app)
        if azure_domain and not isinstance(azure_domain, str):
            raise TypeError("Expected argument 'azure_domain' to be a str")
        pulumi.set(__self__, "azure_domain", azure_domain)
        if azure_function and not isinstance(azure_function, str):
            raise TypeError("Expected argument 'azure_function' to be a str")
        pulumi.set(__self__, "azure_function", azure_function)
        if azure_function_authorization and not isinstance(azure_function_authorization, str):
            raise TypeError("Expected argument 'azure_function_authorization' to be a str")
        pulumi.set(__self__, "azure_function_authorization", azure_function_authorization)
        if delay and not isinstance(delay, int):
            raise TypeError("Expected argument 'delay' to be a int")
        pulumi.set(__self__, "delay", delay)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if email_body and not isinstance(email_body, str):
            raise TypeError("Expected argument 'email_body' to be a str")
        pulumi.set(__self__, "email_body", email_body)
        if email_from and not isinstance(email_from, str):
            raise TypeError("Expected argument 'email_from' to be a str")
        pulumi.set(__self__, "email_from", email_from)
        if email_subject and not isinstance(email_subject, str):
            raise TypeError("Expected argument 'email_subject' to be a str")
        pulumi.set(__self__, "email_subject", email_subject)
        if email_tos and not isinstance(email_tos, list):
            raise TypeError("Expected argument 'email_tos' to be a list")
        pulumi.set(__self__, "email_tos", email_tos)
        if execute_security_fabric and not isinstance(execute_security_fabric, str):
            raise TypeError("Expected argument 'execute_security_fabric' to be a str")
        pulumi.set(__self__, "execute_security_fabric", execute_security_fabric)
        if forticare_email and not isinstance(forticare_email, str):
            raise TypeError("Expected argument 'forticare_email' to be a str")
        pulumi.set(__self__, "forticare_email", forticare_email)
        if gcp_function and not isinstance(gcp_function, str):
            raise TypeError("Expected argument 'gcp_function' to be a str")
        pulumi.set(__self__, "gcp_function", gcp_function)
        if gcp_function_domain and not isinstance(gcp_function_domain, str):
            raise TypeError("Expected argument 'gcp_function_domain' to be a str")
        pulumi.set(__self__, "gcp_function_domain", gcp_function_domain)
        if gcp_function_region and not isinstance(gcp_function_region, str):
            raise TypeError("Expected argument 'gcp_function_region' to be a str")
        pulumi.set(__self__, "gcp_function_region", gcp_function_region)
        if gcp_project and not isinstance(gcp_project, str):
            raise TypeError("Expected argument 'gcp_project' to be a str")
        pulumi.set(__self__, "gcp_project", gcp_project)
        if headers and not isinstance(headers, list):
            raise TypeError("Expected argument 'headers' to be a list")
        pulumi.set(__self__, "headers", headers)
        if http_body and not isinstance(http_body, str):
            raise TypeError("Expected argument 'http_body' to be a str")
        pulumi.set(__self__, "http_body", http_body)
        if http_headers and not isinstance(http_headers, list):
            raise TypeError("Expected argument 'http_headers' to be a list")
        pulumi.set(__self__, "http_headers", http_headers)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if message and not isinstance(message, str):
            raise TypeError("Expected argument 'message' to be a str")
        pulumi.set(__self__, "message", message)
        if message_type and not isinstance(message_type, str):
            raise TypeError("Expected argument 'message_type' to be a str")
        pulumi.set(__self__, "message_type", message_type)
        if method and not isinstance(method, str):
            raise TypeError("Expected argument 'method' to be a str")
        pulumi.set(__self__, "method", method)
        if minimum_interval and not isinstance(minimum_interval, int):
            raise TypeError("Expected argument 'minimum_interval' to be a int")
        pulumi.set(__self__, "minimum_interval", minimum_interval)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if output_size and not isinstance(output_size, int):
            raise TypeError("Expected argument 'output_size' to be a int")
        pulumi.set(__self__, "output_size", output_size)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if replacement_message and not isinstance(replacement_message, str):
            raise TypeError("Expected argument 'replacement_message' to be a str")
        pulumi.set(__self__, "replacement_message", replacement_message)
        if replacemsg_group and not isinstance(replacemsg_group, str):
            raise TypeError("Expected argument 'replacemsg_group' to be a str")
        pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if required and not isinstance(required, str):
            raise TypeError("Expected argument 'required' to be a str")
        pulumi.set(__self__, "required", required)
        if script and not isinstance(script, str):
            raise TypeError("Expected argument 'script' to be a str")
        pulumi.set(__self__, "script", script)
        if sdn_connectors and not isinstance(sdn_connectors, list):
            raise TypeError("Expected argument 'sdn_connectors' to be a list")
        pulumi.set(__self__, "sdn_connectors", sdn_connectors)
        if security_tag and not isinstance(security_tag, str):
            raise TypeError("Expected argument 'security_tag' to be a str")
        pulumi.set(__self__, "security_tag", security_tag)
        if system_action and not isinstance(system_action, str):
            raise TypeError("Expected argument 'system_action' to be a str")
        pulumi.set(__self__, "system_action", system_action)
        if timeout and not isinstance(timeout, int):
            raise TypeError("Expected argument 'timeout' to be a int")
        pulumi.set(__self__, "timeout", timeout)
        if tls_certificate and not isinstance(tls_certificate, str):
            raise TypeError("Expected argument 'tls_certificate' to be a str")
        pulumi.set(__self__, "tls_certificate", tls_certificate)
        if uri and not isinstance(uri, str):
            raise TypeError("Expected argument 'uri' to be a str")
        pulumi.set(__self__, "uri", uri)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if verify_host_cert and not isinstance(verify_host_cert, str):
            raise TypeError("Expected argument 'verify_host_cert' to be a str")
        pulumi.set(__self__, "verify_host_cert", verify_host_cert)

    @property
    @pulumi.getter
    def accprofile(self) -> str:
        """
        Access profile for CLI script action to access FortiGate features.
        """
        return pulumi.get(self, "accprofile")

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> str:
        """
        Action type.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="alicloudAccessKeyId")
    def alicloud_access_key_id(self) -> str:
        """
        AliCloud AccessKey ID.
        """
        return pulumi.get(self, "alicloud_access_key_id")

    @property
    @pulumi.getter(name="alicloudAccessKeySecret")
    def alicloud_access_key_secret(self) -> str:
        """
        AliCloud AccessKey secret.
        """
        return pulumi.get(self, "alicloud_access_key_secret")

    @property
    @pulumi.getter(name="alicloudAccountId")
    def alicloud_account_id(self) -> str:
        """
        AliCloud account ID.
        """
        return pulumi.get(self, "alicloud_account_id")

    @property
    @pulumi.getter(name="alicloudFunction")
    def alicloud_function(self) -> str:
        """
        AliCloud function name.
        """
        return pulumi.get(self, "alicloud_function")

    @property
    @pulumi.getter(name="alicloudFunctionAuthorization")
    def alicloud_function_authorization(self) -> str:
        """
        AliCloud function authorization type.
        """
        return pulumi.get(self, "alicloud_function_authorization")

    @property
    @pulumi.getter(name="alicloudFunctionDomain")
    def alicloud_function_domain(self) -> str:
        """
        AliCloud function domain.
        """
        return pulumi.get(self, "alicloud_function_domain")

    @property
    @pulumi.getter(name="alicloudRegion")
    def alicloud_region(self) -> str:
        """
        AliCloud region.
        """
        return pulumi.get(self, "alicloud_region")

    @property
    @pulumi.getter(name="alicloudService")
    def alicloud_service(self) -> str:
        """
        AliCloud service name.
        """
        return pulumi.get(self, "alicloud_service")

    @property
    @pulumi.getter(name="alicloudVersion")
    def alicloud_version(self) -> str:
        """
        AliCloud version.
        """
        return pulumi.get(self, "alicloud_version")

    @property
    @pulumi.getter(name="awsApiId")
    def aws_api_id(self) -> str:
        """
        AWS API Gateway ID.
        """
        return pulumi.get(self, "aws_api_id")

    @property
    @pulumi.getter(name="awsApiKey")
    def aws_api_key(self) -> str:
        """
        AWS API Gateway API key.
        """
        return pulumi.get(self, "aws_api_key")

    @property
    @pulumi.getter(name="awsApiPath")
    def aws_api_path(self) -> str:
        """
        AWS API Gateway path.
        """
        return pulumi.get(self, "aws_api_path")

    @property
    @pulumi.getter(name="awsApiStage")
    def aws_api_stage(self) -> str:
        """
        AWS API Gateway deployment stage name.
        """
        return pulumi.get(self, "aws_api_stage")

    @property
    @pulumi.getter(name="awsDomain")
    def aws_domain(self) -> str:
        """
        AWS domain.
        """
        return pulumi.get(self, "aws_domain")

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> str:
        """
        AWS region.
        """
        return pulumi.get(self, "aws_region")

    @property
    @pulumi.getter(name="azureApiKey")
    def azure_api_key(self) -> str:
        """
        Azure function API key.
        """
        return pulumi.get(self, "azure_api_key")

    @property
    @pulumi.getter(name="azureApp")
    def azure_app(self) -> str:
        """
        Azure function application name.
        """
        return pulumi.get(self, "azure_app")

    @property
    @pulumi.getter(name="azureDomain")
    def azure_domain(self) -> str:
        """
        Azure function domain.
        """
        return pulumi.get(self, "azure_domain")

    @property
    @pulumi.getter(name="azureFunction")
    def azure_function(self) -> str:
        """
        Azure function name.
        """
        return pulumi.get(self, "azure_function")

    @property
    @pulumi.getter(name="azureFunctionAuthorization")
    def azure_function_authorization(self) -> str:
        """
        Azure function authorization level.
        """
        return pulumi.get(self, "azure_function_authorization")

    @property
    @pulumi.getter
    def delay(self) -> int:
        """
        Delay before execution (in seconds).
        """
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="emailBody")
    def email_body(self) -> str:
        """
        Email body.
        """
        return pulumi.get(self, "email_body")

    @property
    @pulumi.getter(name="emailFrom")
    def email_from(self) -> str:
        """
        Email sender name.
        """
        return pulumi.get(self, "email_from")

    @property
    @pulumi.getter(name="emailSubject")
    def email_subject(self) -> str:
        """
        Email subject.
        """
        return pulumi.get(self, "email_subject")

    @property
    @pulumi.getter(name="emailTos")
    def email_tos(self) -> Sequence['outputs.GetAutomationactionEmailToResult']:
        """
        Email addresses. The structure of `email_to` block is documented below.
        """
        return pulumi.get(self, "email_tos")

    @property
    @pulumi.getter(name="executeSecurityFabric")
    def execute_security_fabric(self) -> str:
        """
        Enable/disable execution of CLI script on all or only one FortiGate unit in the Security Fabric.
        """
        return pulumi.get(self, "execute_security_fabric")

    @property
    @pulumi.getter(name="forticareEmail")
    def forticare_email(self) -> str:
        """
        Enable/disable use of your FortiCare email address as the email-to address.
        """
        return pulumi.get(self, "forticare_email")

    @property
    @pulumi.getter(name="gcpFunction")
    def gcp_function(self) -> str:
        """
        Google Cloud function name.
        """
        return pulumi.get(self, "gcp_function")

    @property
    @pulumi.getter(name="gcpFunctionDomain")
    def gcp_function_domain(self) -> str:
        """
        Google Cloud function domain.
        """
        return pulumi.get(self, "gcp_function_domain")

    @property
    @pulumi.getter(name="gcpFunctionRegion")
    def gcp_function_region(self) -> str:
        """
        Google Cloud function region.
        """
        return pulumi.get(self, "gcp_function_region")

    @property
    @pulumi.getter(name="gcpProject")
    def gcp_project(self) -> str:
        """
        Google Cloud Platform project name.
        """
        return pulumi.get(self, "gcp_project")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetAutomationactionHeaderResult']:
        """
        Request headers. The structure of `headers` block is documented below.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="httpBody")
    def http_body(self) -> str:
        """
        Request body (if necessary). Should be serialized json string.
        """
        return pulumi.get(self, "http_body")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Sequence['outputs.GetAutomationactionHttpHeaderResult']:
        """
        Request headers. The structure of `http_headers` block is documented below.
        """
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Message content.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "message_type")

    @property
    @pulumi.getter
    def method(self) -> str:
        """
        Request method (POST, PUT, GET, PATCH or DELETE).
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="minimumInterval")
    def minimum_interval(self) -> int:
        """
        Limit execution to no more than once in this interval (in seconds).
        """
        return pulumi.get(self, "minimum_interval")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        SDN connector name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputSize")
    def output_size(self) -> int:
        """
        Number of megabytes to limit script output to (1 - 1024, default = 10).
        """
        return pulumi.get(self, "output_size")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Protocol port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Request protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="replacementMessage")
    def replacement_message(self) -> str:
        """
        Enable/disable replacement message.
        """
        return pulumi.get(self, "replacement_message")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> str:
        """
        Replacement message group.
        """
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter
    def required(self) -> str:
        """
        Required in action chain.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def script(self) -> str:
        """
        CLI script.
        """
        return pulumi.get(self, "script")

    @property
    @pulumi.getter(name="sdnConnectors")
    def sdn_connectors(self) -> Sequence['outputs.GetAutomationactionSdnConnectorResult']:
        """
        NSX SDN connector names. The structure of `sdn_connector` block is documented below.
        """
        return pulumi.get(self, "sdn_connectors")

    @property
    @pulumi.getter(name="securityTag")
    def security_tag(self) -> str:
        """
        NSX security tag.
        """
        return pulumi.get(self, "security_tag")

    @property
    @pulumi.getter(name="systemAction")
    def system_action(self) -> str:
        """
        System action type.
        """
        return pulumi.get(self, "system_action")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        Maximum running time for this script in seconds (0 = no timeout).
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="tlsCertificate")
    def tls_certificate(self) -> str:
        """
        Custom TLS certificate for API request.
        """
        return pulumi.get(self, "tls_certificate")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        Request API URI.
        """
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="verifyHostCert")
    def verify_host_cert(self) -> str:
        """
        Enable/disable verification of the remote host certificate.
        """
        return pulumi.get(self, "verify_host_cert")


class AwaitableGetAutomationactionResult(GetAutomationactionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutomationactionResult(
            accprofile=self.accprofile,
            action_type=self.action_type,
            alicloud_access_key_id=self.alicloud_access_key_id,
            alicloud_access_key_secret=self.alicloud_access_key_secret,
            alicloud_account_id=self.alicloud_account_id,
            alicloud_function=self.alicloud_function,
            alicloud_function_authorization=self.alicloud_function_authorization,
            alicloud_function_domain=self.alicloud_function_domain,
            alicloud_region=self.alicloud_region,
            alicloud_service=self.alicloud_service,
            alicloud_version=self.alicloud_version,
            aws_api_id=self.aws_api_id,
            aws_api_key=self.aws_api_key,
            aws_api_path=self.aws_api_path,
            aws_api_stage=self.aws_api_stage,
            aws_domain=self.aws_domain,
            aws_region=self.aws_region,
            azure_api_key=self.azure_api_key,
            azure_app=self.azure_app,
            azure_domain=self.azure_domain,
            azure_function=self.azure_function,
            azure_function_authorization=self.azure_function_authorization,
            delay=self.delay,
            description=self.description,
            email_body=self.email_body,
            email_from=self.email_from,
            email_subject=self.email_subject,
            email_tos=self.email_tos,
            execute_security_fabric=self.execute_security_fabric,
            forticare_email=self.forticare_email,
            gcp_function=self.gcp_function,
            gcp_function_domain=self.gcp_function_domain,
            gcp_function_region=self.gcp_function_region,
            gcp_project=self.gcp_project,
            headers=self.headers,
            http_body=self.http_body,
            http_headers=self.http_headers,
            id=self.id,
            message=self.message,
            message_type=self.message_type,
            method=self.method,
            minimum_interval=self.minimum_interval,
            name=self.name,
            output_size=self.output_size,
            port=self.port,
            protocol=self.protocol,
            replacement_message=self.replacement_message,
            replacemsg_group=self.replacemsg_group,
            required=self.required,
            script=self.script,
            sdn_connectors=self.sdn_connectors,
            security_tag=self.security_tag,
            system_action=self.system_action,
            timeout=self.timeout,
            tls_certificate=self.tls_certificate,
            uri=self.uri,
            vdomparam=self.vdomparam,
            verify_host_cert=self.verify_host_cert)


def get_automationaction(name: Optional[str] = None,
                         vdomparam: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutomationactionResult:
    """
    Use this data source to get information on an fortios system automationaction


    :param str name: Specify the name of the desired system automationaction.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:system/getAutomationaction:getAutomationaction', __args__, opts=opts, typ=GetAutomationactionResult).value

    return AwaitableGetAutomationactionResult(
        accprofile=pulumi.get(__ret__, 'accprofile'),
        action_type=pulumi.get(__ret__, 'action_type'),
        alicloud_access_key_id=pulumi.get(__ret__, 'alicloud_access_key_id'),
        alicloud_access_key_secret=pulumi.get(__ret__, 'alicloud_access_key_secret'),
        alicloud_account_id=pulumi.get(__ret__, 'alicloud_account_id'),
        alicloud_function=pulumi.get(__ret__, 'alicloud_function'),
        alicloud_function_authorization=pulumi.get(__ret__, 'alicloud_function_authorization'),
        alicloud_function_domain=pulumi.get(__ret__, 'alicloud_function_domain'),
        alicloud_region=pulumi.get(__ret__, 'alicloud_region'),
        alicloud_service=pulumi.get(__ret__, 'alicloud_service'),
        alicloud_version=pulumi.get(__ret__, 'alicloud_version'),
        aws_api_id=pulumi.get(__ret__, 'aws_api_id'),
        aws_api_key=pulumi.get(__ret__, 'aws_api_key'),
        aws_api_path=pulumi.get(__ret__, 'aws_api_path'),
        aws_api_stage=pulumi.get(__ret__, 'aws_api_stage'),
        aws_domain=pulumi.get(__ret__, 'aws_domain'),
        aws_region=pulumi.get(__ret__, 'aws_region'),
        azure_api_key=pulumi.get(__ret__, 'azure_api_key'),
        azure_app=pulumi.get(__ret__, 'azure_app'),
        azure_domain=pulumi.get(__ret__, 'azure_domain'),
        azure_function=pulumi.get(__ret__, 'azure_function'),
        azure_function_authorization=pulumi.get(__ret__, 'azure_function_authorization'),
        delay=pulumi.get(__ret__, 'delay'),
        description=pulumi.get(__ret__, 'description'),
        email_body=pulumi.get(__ret__, 'email_body'),
        email_from=pulumi.get(__ret__, 'email_from'),
        email_subject=pulumi.get(__ret__, 'email_subject'),
        email_tos=pulumi.get(__ret__, 'email_tos'),
        execute_security_fabric=pulumi.get(__ret__, 'execute_security_fabric'),
        forticare_email=pulumi.get(__ret__, 'forticare_email'),
        gcp_function=pulumi.get(__ret__, 'gcp_function'),
        gcp_function_domain=pulumi.get(__ret__, 'gcp_function_domain'),
        gcp_function_region=pulumi.get(__ret__, 'gcp_function_region'),
        gcp_project=pulumi.get(__ret__, 'gcp_project'),
        headers=pulumi.get(__ret__, 'headers'),
        http_body=pulumi.get(__ret__, 'http_body'),
        http_headers=pulumi.get(__ret__, 'http_headers'),
        id=pulumi.get(__ret__, 'id'),
        message=pulumi.get(__ret__, 'message'),
        message_type=pulumi.get(__ret__, 'message_type'),
        method=pulumi.get(__ret__, 'method'),
        minimum_interval=pulumi.get(__ret__, 'minimum_interval'),
        name=pulumi.get(__ret__, 'name'),
        output_size=pulumi.get(__ret__, 'output_size'),
        port=pulumi.get(__ret__, 'port'),
        protocol=pulumi.get(__ret__, 'protocol'),
        replacement_message=pulumi.get(__ret__, 'replacement_message'),
        replacemsg_group=pulumi.get(__ret__, 'replacemsg_group'),
        required=pulumi.get(__ret__, 'required'),
        script=pulumi.get(__ret__, 'script'),
        sdn_connectors=pulumi.get(__ret__, 'sdn_connectors'),
        security_tag=pulumi.get(__ret__, 'security_tag'),
        system_action=pulumi.get(__ret__, 'system_action'),
        timeout=pulumi.get(__ret__, 'timeout'),
        tls_certificate=pulumi.get(__ret__, 'tls_certificate'),
        uri=pulumi.get(__ret__, 'uri'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        verify_host_cert=pulumi.get(__ret__, 'verify_host_cert'))


@_utilities.lift_output_func(get_automationaction)
def get_automationaction_output(name: Optional[pulumi.Input[str]] = None,
                                vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAutomationactionResult]:
    """
    Use this data source to get information on an fortios system automationaction


    :param str name: Specify the name of the desired system automationaction.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
