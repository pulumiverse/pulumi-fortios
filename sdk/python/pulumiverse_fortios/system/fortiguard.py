# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['FortiguardArgs', 'Fortiguard']

@pulumi.input_type
class FortiguardArgs:
    def __init__(__self__, *,
                 antispam_timeout: pulumi.Input[int],
                 outbreak_prevention_timeout: pulumi.Input[int],
                 webfilter_timeout: pulumi.Input[int],
                 antispam_cache: Optional[pulumi.Input[str]] = None,
                 antispam_cache_mpercent: Optional[pulumi.Input[int]] = None,
                 antispam_cache_mpermille: Optional[pulumi.Input[int]] = None,
                 antispam_cache_ttl: Optional[pulumi.Input[int]] = None,
                 antispam_expiration: Optional[pulumi.Input[int]] = None,
                 antispam_force_off: Optional[pulumi.Input[str]] = None,
                 antispam_license: Optional[pulumi.Input[int]] = None,
                 anycast_sdns_server_ip: Optional[pulumi.Input[str]] = None,
                 anycast_sdns_server_port: Optional[pulumi.Input[int]] = None,
                 auto_firmware_upgrade: Optional[pulumi.Input[str]] = None,
                 auto_firmware_upgrade_day: Optional[pulumi.Input[str]] = None,
                 auto_firmware_upgrade_delay: Optional[pulumi.Input[int]] = None,
                 auto_firmware_upgrade_end_hour: Optional[pulumi.Input[int]] = None,
                 auto_firmware_upgrade_start_hour: Optional[pulumi.Input[int]] = None,
                 auto_join_forticloud: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip6: Optional[pulumi.Input[str]] = None,
                 ddns_server_port: Optional[pulumi.Input[int]] = None,
                 fds_license_expiring_days: Optional[pulumi.Input[int]] = None,
                 fortiguard_anycast: Optional[pulumi.Input[str]] = None,
                 fortiguard_anycast_source: Optional[pulumi.Input[str]] = None,
                 gui_prompt_auto_upgrade: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 load_balance_servers: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_cache: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention_cache_mpercent: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_cache_mpermille: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_cache_ttl: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_expiration: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_force_off: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention_license: Optional[pulumi.Input[int]] = None,
                 persistent_connection: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 proxy_password: Optional[pulumi.Input[str]] = None,
                 proxy_server_ip: Optional[pulumi.Input[str]] = None,
                 proxy_server_port: Optional[pulumi.Input[int]] = None,
                 proxy_username: Optional[pulumi.Input[str]] = None,
                 sandbox_inline_scan: Optional[pulumi.Input[str]] = None,
                 sandbox_region: Optional[pulumi.Input[str]] = None,
                 sdns_options: Optional[pulumi.Input[str]] = None,
                 sdns_server_ip: Optional[pulumi.Input[str]] = None,
                 sdns_server_port: Optional[pulumi.Input[int]] = None,
                 service_account_id: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 update_build_proxy: Optional[pulumi.Input[str]] = None,
                 update_dldb: Optional[pulumi.Input[str]] = None,
                 update_extdb: Optional[pulumi.Input[str]] = None,
                 update_ffdb: Optional[pulumi.Input[str]] = None,
                 update_server_location: Optional[pulumi.Input[str]] = None,
                 update_uwdb: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_expiration: Optional[pulumi.Input[int]] = None,
                 videofilter_license: Optional[pulumi.Input[int]] = None,
                 webfilter_cache: Optional[pulumi.Input[str]] = None,
                 webfilter_cache_ttl: Optional[pulumi.Input[int]] = None,
                 webfilter_expiration: Optional[pulumi.Input[int]] = None,
                 webfilter_force_off: Optional[pulumi.Input[str]] = None,
                 webfilter_license: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Fortiguard resource.
        :param pulumi.Input[int] antispam_timeout: Antispam query time out (1 - 30 sec, default = 7).
        :param pulumi.Input[int] outbreak_prevention_timeout: FortiGuard Virus Outbreak Prevention time out (1 - 30 sec, default = 7).
        :param pulumi.Input[int] webfilter_timeout: Web filter query time out (1 - 30 sec, default = 7).
        :param pulumi.Input[str] antispam_cache: Enable/disable FortiGuard antispam request caching. Uses a small amount of memory but improves performance. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] antispam_cache_mpercent: Maximum percent of FortiGate memory the antispam cache is allowed to use (1 - 15%!)(MISSING).
        :param pulumi.Input[int] antispam_cache_mpermille: Maximum permille of FortiGate memory the antispam cache is allowed to use (1 - 150).
        :param pulumi.Input[int] antispam_cache_ttl: Time-to-live for antispam cache entries in seconds (300 - 86400). Lower times reduce the cache size. Higher times may improve performance since the cache will have more entries.
        :param pulumi.Input[int] antispam_expiration: Expiration date of the FortiGuard antispam contract.
        :param pulumi.Input[str] antispam_force_off: Enable/disable turning off the FortiGuard antispam service. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] antispam_license: Interval of time between license checks for the FortiGuard antispam contract.
        :param pulumi.Input[str] anycast_sdns_server_ip: IP address of the FortiGuard anycast DNS rating server.
        :param pulumi.Input[int] anycast_sdns_server_port: Port to connect to on the FortiGuard anycast DNS rating server.
        :param pulumi.Input[str] auto_firmware_upgrade: Enable/disable automatic patch-level firmware upgrade from FortiGuard. The FortiGate unit searches for new patches only in the same major and minor version. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_firmware_upgrade_day: Allowed day(s) of the week to start automatic patch-level firmware upgrade from FortiGuard. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[int] auto_firmware_upgrade_delay: Delay of day(s) before installing an automatic patch-level firmware upgrade from FortiGuard (default = 3). Set it 0 to use auto-firmware-upgrade-day instead, which selects allowed day(s) of the week for installing an automatic patch-level firmware upgrade.
        :param pulumi.Input[int] auto_firmware_upgrade_end_hour: End time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 4). When the end time is smaller than the start time, the end time is interpreted as the next day. The actual upgrade time is selected randomly within the time window.
        :param pulumi.Input[int] auto_firmware_upgrade_start_hour: Start time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 2). The actual upgrade time is selected randomly within the time window.
        :param pulumi.Input[str] auto_join_forticloud: Automatically connect to and login to FortiCloud. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ddns_server_ip: IP address of the FortiDDNS server.
        :param pulumi.Input[str] ddns_server_ip6: IPv6 address of the FortiDDNS server.
        :param pulumi.Input[int] ddns_server_port: Port used to communicate with FortiDDNS servers.
        :param pulumi.Input[int] fds_license_expiring_days: Threshold for number of days before FortiGuard license expiration to generate license expiring event log (1 - 100 days, default = 15).
        :param pulumi.Input[str] fortiguard_anycast: Enable/disable use of FortiGuard's anycast network. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortiguard_anycast_source: Configure which of Fortinet's servers to provide FortiGuard services in FortiGuard's anycast network. Default is Fortinet. Valid values: `fortinet`, `aws`, `debug`.
        :param pulumi.Input[str] gui_prompt_auto_upgrade: Enable/disable prompting of automatic patch-level firmware upgrade recommendation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[int] load_balance_servers: Number of servers to alternate between as first FortiGuard option.
        :param pulumi.Input[str] outbreak_prevention_cache: Enable/disable FortiGuard Virus Outbreak Prevention cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] outbreak_prevention_cache_mpercent: Maximum percent of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 15%!,(MISSING) default = 2).
        :param pulumi.Input[int] outbreak_prevention_cache_mpermille: Maximum permille of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 150 permille, default = 1).
        :param pulumi.Input[int] outbreak_prevention_cache_ttl: Time-to-live for FortiGuard Virus Outbreak Prevention cache entries (300 - 86400 sec, default = 300).
        :param pulumi.Input[int] outbreak_prevention_expiration: Expiration date of FortiGuard Virus Outbreak Prevention contract.
        :param pulumi.Input[str] outbreak_prevention_force_off: Turn off FortiGuard Virus Outbreak Prevention service. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] outbreak_prevention_license: Interval of time between license checks for FortiGuard Virus Outbreak Prevention contract.
        :param pulumi.Input[str] persistent_connection: Enable/disable use of persistent connection to receive update notification from FortiGuard. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] port: Port used to communicate with the FortiGuard servers.
        :param pulumi.Input[str] protocol: Protocol used to communicate with the FortiGuard servers. Valid values: `udp`, `http`, `https`.
        :param pulumi.Input[str] proxy_password: Proxy user password.
        :param pulumi.Input[str] proxy_server_ip: IP address of the proxy server.
        :param pulumi.Input[int] proxy_server_port: Port used to communicate with the proxy server.
        :param pulumi.Input[str] proxy_username: Proxy user name.
        :param pulumi.Input[str] sandbox_inline_scan: Enable/disable FortiCloud Sandbox inline-scan. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sandbox_region: Cloud sandbox region.
        :param pulumi.Input[str] sdns_options: Customization options for the FortiGuard DNS service. Valid values: `include-question-section`.
        :param pulumi.Input[str] sdns_server_ip: IP address of the FortiDNS server.
        :param pulumi.Input[int] sdns_server_port: Port used to communicate with FortiDNS servers.
        :param pulumi.Input[str] service_account_id: Service account ID.
        :param pulumi.Input[str] source_ip: Source IPv4 address used to communicate with FortiGuard.
        :param pulumi.Input[str] source_ip6: Source IPv6 address used to communicate with FortiGuard.
        :param pulumi.Input[str] update_build_proxy: Enable/disable proxy dictionary rebuild. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_dldb: Enable/disable DLP signature update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_extdb: Enable/disable external resource update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_ffdb: Enable/disable Internet Service Database update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_server_location: Signature update server location.
        :param pulumi.Input[str] update_uwdb: Enable/disable allowlist update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdom: FortiGuard Service virtual domain name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] videofilter_expiration: Expiration date of the FortiGuard video filter contract.
        :param pulumi.Input[int] videofilter_license: Interval of time between license checks for the FortiGuard video filter contract.
        :param pulumi.Input[str] webfilter_cache: Enable/disable FortiGuard web filter caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] webfilter_cache_ttl: Time-to-live for web filter cache entries in seconds (300 - 86400).
        :param pulumi.Input[int] webfilter_expiration: Expiration date of the FortiGuard web filter contract.
        :param pulumi.Input[str] webfilter_force_off: Enable/disable turning off the FortiGuard web filtering service. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] webfilter_license: Interval of time between license checks for the FortiGuard web filter contract.
        """
        pulumi.set(__self__, "antispam_timeout", antispam_timeout)
        pulumi.set(__self__, "outbreak_prevention_timeout", outbreak_prevention_timeout)
        pulumi.set(__self__, "webfilter_timeout", webfilter_timeout)
        if antispam_cache is not None:
            pulumi.set(__self__, "antispam_cache", antispam_cache)
        if antispam_cache_mpercent is not None:
            pulumi.set(__self__, "antispam_cache_mpercent", antispam_cache_mpercent)
        if antispam_cache_mpermille is not None:
            pulumi.set(__self__, "antispam_cache_mpermille", antispam_cache_mpermille)
        if antispam_cache_ttl is not None:
            pulumi.set(__self__, "antispam_cache_ttl", antispam_cache_ttl)
        if antispam_expiration is not None:
            pulumi.set(__self__, "antispam_expiration", antispam_expiration)
        if antispam_force_off is not None:
            pulumi.set(__self__, "antispam_force_off", antispam_force_off)
        if antispam_license is not None:
            pulumi.set(__self__, "antispam_license", antispam_license)
        if anycast_sdns_server_ip is not None:
            pulumi.set(__self__, "anycast_sdns_server_ip", anycast_sdns_server_ip)
        if anycast_sdns_server_port is not None:
            pulumi.set(__self__, "anycast_sdns_server_port", anycast_sdns_server_port)
        if auto_firmware_upgrade is not None:
            pulumi.set(__self__, "auto_firmware_upgrade", auto_firmware_upgrade)
        if auto_firmware_upgrade_day is not None:
            pulumi.set(__self__, "auto_firmware_upgrade_day", auto_firmware_upgrade_day)
        if auto_firmware_upgrade_delay is not None:
            pulumi.set(__self__, "auto_firmware_upgrade_delay", auto_firmware_upgrade_delay)
        if auto_firmware_upgrade_end_hour is not None:
            pulumi.set(__self__, "auto_firmware_upgrade_end_hour", auto_firmware_upgrade_end_hour)
        if auto_firmware_upgrade_start_hour is not None:
            pulumi.set(__self__, "auto_firmware_upgrade_start_hour", auto_firmware_upgrade_start_hour)
        if auto_join_forticloud is not None:
            pulumi.set(__self__, "auto_join_forticloud", auto_join_forticloud)
        if ddns_server_ip is not None:
            pulumi.set(__self__, "ddns_server_ip", ddns_server_ip)
        if ddns_server_ip6 is not None:
            pulumi.set(__self__, "ddns_server_ip6", ddns_server_ip6)
        if ddns_server_port is not None:
            pulumi.set(__self__, "ddns_server_port", ddns_server_port)
        if fds_license_expiring_days is not None:
            pulumi.set(__self__, "fds_license_expiring_days", fds_license_expiring_days)
        if fortiguard_anycast is not None:
            pulumi.set(__self__, "fortiguard_anycast", fortiguard_anycast)
        if fortiguard_anycast_source is not None:
            pulumi.set(__self__, "fortiguard_anycast_source", fortiguard_anycast_source)
        if gui_prompt_auto_upgrade is not None:
            pulumi.set(__self__, "gui_prompt_auto_upgrade", gui_prompt_auto_upgrade)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if load_balance_servers is not None:
            pulumi.set(__self__, "load_balance_servers", load_balance_servers)
        if outbreak_prevention_cache is not None:
            pulumi.set(__self__, "outbreak_prevention_cache", outbreak_prevention_cache)
        if outbreak_prevention_cache_mpercent is not None:
            pulumi.set(__self__, "outbreak_prevention_cache_mpercent", outbreak_prevention_cache_mpercent)
        if outbreak_prevention_cache_mpermille is not None:
            pulumi.set(__self__, "outbreak_prevention_cache_mpermille", outbreak_prevention_cache_mpermille)
        if outbreak_prevention_cache_ttl is not None:
            pulumi.set(__self__, "outbreak_prevention_cache_ttl", outbreak_prevention_cache_ttl)
        if outbreak_prevention_expiration is not None:
            pulumi.set(__self__, "outbreak_prevention_expiration", outbreak_prevention_expiration)
        if outbreak_prevention_force_off is not None:
            pulumi.set(__self__, "outbreak_prevention_force_off", outbreak_prevention_force_off)
        if outbreak_prevention_license is not None:
            pulumi.set(__self__, "outbreak_prevention_license", outbreak_prevention_license)
        if persistent_connection is not None:
            pulumi.set(__self__, "persistent_connection", persistent_connection)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if proxy_password is not None:
            pulumi.set(__self__, "proxy_password", proxy_password)
        if proxy_server_ip is not None:
            pulumi.set(__self__, "proxy_server_ip", proxy_server_ip)
        if proxy_server_port is not None:
            pulumi.set(__self__, "proxy_server_port", proxy_server_port)
        if proxy_username is not None:
            pulumi.set(__self__, "proxy_username", proxy_username)
        if sandbox_inline_scan is not None:
            pulumi.set(__self__, "sandbox_inline_scan", sandbox_inline_scan)
        if sandbox_region is not None:
            pulumi.set(__self__, "sandbox_region", sandbox_region)
        if sdns_options is not None:
            pulumi.set(__self__, "sdns_options", sdns_options)
        if sdns_server_ip is not None:
            pulumi.set(__self__, "sdns_server_ip", sdns_server_ip)
        if sdns_server_port is not None:
            pulumi.set(__self__, "sdns_server_port", sdns_server_port)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if update_build_proxy is not None:
            pulumi.set(__self__, "update_build_proxy", update_build_proxy)
        if update_dldb is not None:
            pulumi.set(__self__, "update_dldb", update_dldb)
        if update_extdb is not None:
            pulumi.set(__self__, "update_extdb", update_extdb)
        if update_ffdb is not None:
            pulumi.set(__self__, "update_ffdb", update_ffdb)
        if update_server_location is not None:
            pulumi.set(__self__, "update_server_location", update_server_location)
        if update_uwdb is not None:
            pulumi.set(__self__, "update_uwdb", update_uwdb)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if videofilter_expiration is not None:
            pulumi.set(__self__, "videofilter_expiration", videofilter_expiration)
        if videofilter_license is not None:
            pulumi.set(__self__, "videofilter_license", videofilter_license)
        if webfilter_cache is not None:
            pulumi.set(__self__, "webfilter_cache", webfilter_cache)
        if webfilter_cache_ttl is not None:
            pulumi.set(__self__, "webfilter_cache_ttl", webfilter_cache_ttl)
        if webfilter_expiration is not None:
            pulumi.set(__self__, "webfilter_expiration", webfilter_expiration)
        if webfilter_force_off is not None:
            pulumi.set(__self__, "webfilter_force_off", webfilter_force_off)
        if webfilter_license is not None:
            pulumi.set(__self__, "webfilter_license", webfilter_license)

    @property
    @pulumi.getter(name="antispamTimeout")
    def antispam_timeout(self) -> pulumi.Input[int]:
        """
        Antispam query time out (1 - 30 sec, default = 7).
        """
        return pulumi.get(self, "antispam_timeout")

    @antispam_timeout.setter
    def antispam_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "antispam_timeout", value)

    @property
    @pulumi.getter(name="outbreakPreventionTimeout")
    def outbreak_prevention_timeout(self) -> pulumi.Input[int]:
        """
        FortiGuard Virus Outbreak Prevention time out (1 - 30 sec, default = 7).
        """
        return pulumi.get(self, "outbreak_prevention_timeout")

    @outbreak_prevention_timeout.setter
    def outbreak_prevention_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "outbreak_prevention_timeout", value)

    @property
    @pulumi.getter(name="webfilterTimeout")
    def webfilter_timeout(self) -> pulumi.Input[int]:
        """
        Web filter query time out (1 - 30 sec, default = 7).
        """
        return pulumi.get(self, "webfilter_timeout")

    @webfilter_timeout.setter
    def webfilter_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "webfilter_timeout", value)

    @property
    @pulumi.getter(name="antispamCache")
    def antispam_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiGuard antispam request caching. Uses a small amount of memory but improves performance. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "antispam_cache")

    @antispam_cache.setter
    def antispam_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antispam_cache", value)

    @property
    @pulumi.getter(name="antispamCacheMpercent")
    def antispam_cache_mpercent(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum percent of FortiGate memory the antispam cache is allowed to use (1 - 15%!)(MISSING).
        """
        return pulumi.get(self, "antispam_cache_mpercent")

    @antispam_cache_mpercent.setter
    def antispam_cache_mpercent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "antispam_cache_mpercent", value)

    @property
    @pulumi.getter(name="antispamCacheMpermille")
    def antispam_cache_mpermille(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum permille of FortiGate memory the antispam cache is allowed to use (1 - 150).
        """
        return pulumi.get(self, "antispam_cache_mpermille")

    @antispam_cache_mpermille.setter
    def antispam_cache_mpermille(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "antispam_cache_mpermille", value)

    @property
    @pulumi.getter(name="antispamCacheTtl")
    def antispam_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Time-to-live for antispam cache entries in seconds (300 - 86400). Lower times reduce the cache size. Higher times may improve performance since the cache will have more entries.
        """
        return pulumi.get(self, "antispam_cache_ttl")

    @antispam_cache_ttl.setter
    def antispam_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "antispam_cache_ttl", value)

    @property
    @pulumi.getter(name="antispamExpiration")
    def antispam_expiration(self) -> Optional[pulumi.Input[int]]:
        """
        Expiration date of the FortiGuard antispam contract.
        """
        return pulumi.get(self, "antispam_expiration")

    @antispam_expiration.setter
    def antispam_expiration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "antispam_expiration", value)

    @property
    @pulumi.getter(name="antispamForceOff")
    def antispam_force_off(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable turning off the FortiGuard antispam service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "antispam_force_off")

    @antispam_force_off.setter
    def antispam_force_off(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antispam_force_off", value)

    @property
    @pulumi.getter(name="antispamLicense")
    def antispam_license(self) -> Optional[pulumi.Input[int]]:
        """
        Interval of time between license checks for the FortiGuard antispam contract.
        """
        return pulumi.get(self, "antispam_license")

    @antispam_license.setter
    def antispam_license(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "antispam_license", value)

    @property
    @pulumi.getter(name="anycastSdnsServerIp")
    def anycast_sdns_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the FortiGuard anycast DNS rating server.
        """
        return pulumi.get(self, "anycast_sdns_server_ip")

    @anycast_sdns_server_ip.setter
    def anycast_sdns_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anycast_sdns_server_ip", value)

    @property
    @pulumi.getter(name="anycastSdnsServerPort")
    def anycast_sdns_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port to connect to on the FortiGuard anycast DNS rating server.
        """
        return pulumi.get(self, "anycast_sdns_server_port")

    @anycast_sdns_server_port.setter
    def anycast_sdns_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "anycast_sdns_server_port", value)

    @property
    @pulumi.getter(name="autoFirmwareUpgrade")
    def auto_firmware_upgrade(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic patch-level firmware upgrade from FortiGuard. The FortiGate unit searches for new patches only in the same major and minor version. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_firmware_upgrade")

    @auto_firmware_upgrade.setter
    def auto_firmware_upgrade(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_firmware_upgrade", value)

    @property
    @pulumi.getter(name="autoFirmwareUpgradeDay")
    def auto_firmware_upgrade_day(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed day(s) of the week to start automatic patch-level firmware upgrade from FortiGuard. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "auto_firmware_upgrade_day")

    @auto_firmware_upgrade_day.setter
    def auto_firmware_upgrade_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_firmware_upgrade_day", value)

    @property
    @pulumi.getter(name="autoFirmwareUpgradeDelay")
    def auto_firmware_upgrade_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Delay of day(s) before installing an automatic patch-level firmware upgrade from FortiGuard (default = 3). Set it 0 to use auto-firmware-upgrade-day instead, which selects allowed day(s) of the week for installing an automatic patch-level firmware upgrade.
        """
        return pulumi.get(self, "auto_firmware_upgrade_delay")

    @auto_firmware_upgrade_delay.setter
    def auto_firmware_upgrade_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_firmware_upgrade_delay", value)

    @property
    @pulumi.getter(name="autoFirmwareUpgradeEndHour")
    def auto_firmware_upgrade_end_hour(self) -> Optional[pulumi.Input[int]]:
        """
        End time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 4). When the end time is smaller than the start time, the end time is interpreted as the next day. The actual upgrade time is selected randomly within the time window.
        """
        return pulumi.get(self, "auto_firmware_upgrade_end_hour")

    @auto_firmware_upgrade_end_hour.setter
    def auto_firmware_upgrade_end_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_firmware_upgrade_end_hour", value)

    @property
    @pulumi.getter(name="autoFirmwareUpgradeStartHour")
    def auto_firmware_upgrade_start_hour(self) -> Optional[pulumi.Input[int]]:
        """
        Start time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 2). The actual upgrade time is selected randomly within the time window.
        """
        return pulumi.get(self, "auto_firmware_upgrade_start_hour")

    @auto_firmware_upgrade_start_hour.setter
    def auto_firmware_upgrade_start_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_firmware_upgrade_start_hour", value)

    @property
    @pulumi.getter(name="autoJoinForticloud")
    def auto_join_forticloud(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically connect to and login to FortiCloud. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_join_forticloud")

    @auto_join_forticloud.setter
    def auto_join_forticloud(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_join_forticloud", value)

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the FortiDDNS server.
        """
        return pulumi.get(self, "ddns_server_ip")

    @ddns_server_ip.setter
    def ddns_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_server_ip", value)

    @property
    @pulumi.getter(name="ddnsServerIp6")
    def ddns_server_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the FortiDDNS server.
        """
        return pulumi.get(self, "ddns_server_ip6")

    @ddns_server_ip6.setter
    def ddns_server_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_server_ip6", value)

    @property
    @pulumi.getter(name="ddnsServerPort")
    def ddns_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port used to communicate with FortiDDNS servers.
        """
        return pulumi.get(self, "ddns_server_port")

    @ddns_server_port.setter
    def ddns_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ddns_server_port", value)

    @property
    @pulumi.getter(name="fdsLicenseExpiringDays")
    def fds_license_expiring_days(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold for number of days before FortiGuard license expiration to generate license expiring event log (1 - 100 days, default = 15).
        """
        return pulumi.get(self, "fds_license_expiring_days")

    @fds_license_expiring_days.setter
    def fds_license_expiring_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fds_license_expiring_days", value)

    @property
    @pulumi.getter(name="fortiguardAnycast")
    def fortiguard_anycast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of FortiGuard's anycast network. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortiguard_anycast")

    @fortiguard_anycast.setter
    def fortiguard_anycast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_anycast", value)

    @property
    @pulumi.getter(name="fortiguardAnycastSource")
    def fortiguard_anycast_source(self) -> Optional[pulumi.Input[str]]:
        """
        Configure which of Fortinet's servers to provide FortiGuard services in FortiGuard's anycast network. Default is Fortinet. Valid values: `fortinet`, `aws`, `debug`.
        """
        return pulumi.get(self, "fortiguard_anycast_source")

    @fortiguard_anycast_source.setter
    def fortiguard_anycast_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_anycast_source", value)

    @property
    @pulumi.getter(name="guiPromptAutoUpgrade")
    def gui_prompt_auto_upgrade(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable prompting of automatic patch-level firmware upgrade recommendation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_prompt_auto_upgrade")

    @gui_prompt_auto_upgrade.setter
    def gui_prompt_auto_upgrade(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_prompt_auto_upgrade", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="loadBalanceServers")
    def load_balance_servers(self) -> Optional[pulumi.Input[int]]:
        """
        Number of servers to alternate between as first FortiGuard option.
        """
        return pulumi.get(self, "load_balance_servers")

    @load_balance_servers.setter
    def load_balance_servers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "load_balance_servers", value)

    @property
    @pulumi.getter(name="outbreakPreventionCache")
    def outbreak_prevention_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiGuard Virus Outbreak Prevention cache. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "outbreak_prevention_cache")

    @outbreak_prevention_cache.setter
    def outbreak_prevention_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention_cache", value)

    @property
    @pulumi.getter(name="outbreakPreventionCacheMpercent")
    def outbreak_prevention_cache_mpercent(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum percent of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 15%!,(MISSING) default = 2).
        """
        return pulumi.get(self, "outbreak_prevention_cache_mpercent")

    @outbreak_prevention_cache_mpercent.setter
    def outbreak_prevention_cache_mpercent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outbreak_prevention_cache_mpercent", value)

    @property
    @pulumi.getter(name="outbreakPreventionCacheMpermille")
    def outbreak_prevention_cache_mpermille(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum permille of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 150 permille, default = 1).
        """
        return pulumi.get(self, "outbreak_prevention_cache_mpermille")

    @outbreak_prevention_cache_mpermille.setter
    def outbreak_prevention_cache_mpermille(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outbreak_prevention_cache_mpermille", value)

    @property
    @pulumi.getter(name="outbreakPreventionCacheTtl")
    def outbreak_prevention_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Time-to-live for FortiGuard Virus Outbreak Prevention cache entries (300 - 86400 sec, default = 300).
        """
        return pulumi.get(self, "outbreak_prevention_cache_ttl")

    @outbreak_prevention_cache_ttl.setter
    def outbreak_prevention_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outbreak_prevention_cache_ttl", value)

    @property
    @pulumi.getter(name="outbreakPreventionExpiration")
    def outbreak_prevention_expiration(self) -> Optional[pulumi.Input[int]]:
        """
        Expiration date of FortiGuard Virus Outbreak Prevention contract.
        """
        return pulumi.get(self, "outbreak_prevention_expiration")

    @outbreak_prevention_expiration.setter
    def outbreak_prevention_expiration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outbreak_prevention_expiration", value)

    @property
    @pulumi.getter(name="outbreakPreventionForceOff")
    def outbreak_prevention_force_off(self) -> Optional[pulumi.Input[str]]:
        """
        Turn off FortiGuard Virus Outbreak Prevention service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "outbreak_prevention_force_off")

    @outbreak_prevention_force_off.setter
    def outbreak_prevention_force_off(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention_force_off", value)

    @property
    @pulumi.getter(name="outbreakPreventionLicense")
    def outbreak_prevention_license(self) -> Optional[pulumi.Input[int]]:
        """
        Interval of time between license checks for FortiGuard Virus Outbreak Prevention contract.
        """
        return pulumi.get(self, "outbreak_prevention_license")

    @outbreak_prevention_license.setter
    def outbreak_prevention_license(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outbreak_prevention_license", value)

    @property
    @pulumi.getter(name="persistentConnection")
    def persistent_connection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of persistent connection to receive update notification from FortiGuard. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "persistent_connection")

    @persistent_connection.setter
    def persistent_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistent_connection", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Port used to communicate with the FortiGuard servers.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol used to communicate with the FortiGuard servers. Valid values: `udp`, `http`, `https`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="proxyPassword")
    def proxy_password(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy user password.
        """
        return pulumi.get(self, "proxy_password")

    @proxy_password.setter
    def proxy_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_password", value)

    @property
    @pulumi.getter(name="proxyServerIp")
    def proxy_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the proxy server.
        """
        return pulumi.get(self, "proxy_server_ip")

    @proxy_server_ip.setter
    def proxy_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_server_ip", value)

    @property
    @pulumi.getter(name="proxyServerPort")
    def proxy_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port used to communicate with the proxy server.
        """
        return pulumi.get(self, "proxy_server_port")

    @proxy_server_port.setter
    def proxy_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_server_port", value)

    @property
    @pulumi.getter(name="proxyUsername")
    def proxy_username(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy user name.
        """
        return pulumi.get(self, "proxy_username")

    @proxy_username.setter
    def proxy_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_username", value)

    @property
    @pulumi.getter(name="sandboxInlineScan")
    def sandbox_inline_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiCloud Sandbox inline-scan. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sandbox_inline_scan")

    @sandbox_inline_scan.setter
    def sandbox_inline_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sandbox_inline_scan", value)

    @property
    @pulumi.getter(name="sandboxRegion")
    def sandbox_region(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud sandbox region.
        """
        return pulumi.get(self, "sandbox_region")

    @sandbox_region.setter
    def sandbox_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sandbox_region", value)

    @property
    @pulumi.getter(name="sdnsOptions")
    def sdns_options(self) -> Optional[pulumi.Input[str]]:
        """
        Customization options for the FortiGuard DNS service. Valid values: `include-question-section`.
        """
        return pulumi.get(self, "sdns_options")

    @sdns_options.setter
    def sdns_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdns_options", value)

    @property
    @pulumi.getter(name="sdnsServerIp")
    def sdns_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the FortiDNS server.
        """
        return pulumi.get(self, "sdns_server_ip")

    @sdns_server_ip.setter
    def sdns_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdns_server_ip", value)

    @property
    @pulumi.getter(name="sdnsServerPort")
    def sdns_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port used to communicate with FortiDNS servers.
        """
        return pulumi.get(self, "sdns_server_port")

    @sdns_server_port.setter
    def sdns_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sdns_server_port", value)

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Service account ID.
        """
        return pulumi.get(self, "service_account_id")

    @service_account_id.setter
    def service_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_id", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv4 address used to communicate with FortiGuard.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address used to communicate with FortiGuard.
        """
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter(name="updateBuildProxy")
    def update_build_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable proxy dictionary rebuild. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_build_proxy")

    @update_build_proxy.setter
    def update_build_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_build_proxy", value)

    @property
    @pulumi.getter(name="updateDldb")
    def update_dldb(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DLP signature update. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_dldb")

    @update_dldb.setter
    def update_dldb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_dldb", value)

    @property
    @pulumi.getter(name="updateExtdb")
    def update_extdb(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable external resource update. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_extdb")

    @update_extdb.setter
    def update_extdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_extdb", value)

    @property
    @pulumi.getter(name="updateFfdb")
    def update_ffdb(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Internet Service Database update. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_ffdb")

    @update_ffdb.setter
    def update_ffdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_ffdb", value)

    @property
    @pulumi.getter(name="updateServerLocation")
    def update_server_location(self) -> Optional[pulumi.Input[str]]:
        """
        Signature update server location.
        """
        return pulumi.get(self, "update_server_location")

    @update_server_location.setter
    def update_server_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_server_location", value)

    @property
    @pulumi.getter(name="updateUwdb")
    def update_uwdb(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowlist update. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_uwdb")

    @update_uwdb.setter
    def update_uwdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_uwdb", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard Service virtual domain name.
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="videofilterExpiration")
    def videofilter_expiration(self) -> Optional[pulumi.Input[int]]:
        """
        Expiration date of the FortiGuard video filter contract.
        """
        return pulumi.get(self, "videofilter_expiration")

    @videofilter_expiration.setter
    def videofilter_expiration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "videofilter_expiration", value)

    @property
    @pulumi.getter(name="videofilterLicense")
    def videofilter_license(self) -> Optional[pulumi.Input[int]]:
        """
        Interval of time between license checks for the FortiGuard video filter contract.
        """
        return pulumi.get(self, "videofilter_license")

    @videofilter_license.setter
    def videofilter_license(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "videofilter_license", value)

    @property
    @pulumi.getter(name="webfilterCache")
    def webfilter_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiGuard web filter caching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_cache")

    @webfilter_cache.setter
    def webfilter_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_cache", value)

    @property
    @pulumi.getter(name="webfilterCacheTtl")
    def webfilter_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Time-to-live for web filter cache entries in seconds (300 - 86400).
        """
        return pulumi.get(self, "webfilter_cache_ttl")

    @webfilter_cache_ttl.setter
    def webfilter_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "webfilter_cache_ttl", value)

    @property
    @pulumi.getter(name="webfilterExpiration")
    def webfilter_expiration(self) -> Optional[pulumi.Input[int]]:
        """
        Expiration date of the FortiGuard web filter contract.
        """
        return pulumi.get(self, "webfilter_expiration")

    @webfilter_expiration.setter
    def webfilter_expiration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "webfilter_expiration", value)

    @property
    @pulumi.getter(name="webfilterForceOff")
    def webfilter_force_off(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable turning off the FortiGuard web filtering service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_force_off")

    @webfilter_force_off.setter
    def webfilter_force_off(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_force_off", value)

    @property
    @pulumi.getter(name="webfilterLicense")
    def webfilter_license(self) -> Optional[pulumi.Input[int]]:
        """
        Interval of time between license checks for the FortiGuard web filter contract.
        """
        return pulumi.get(self, "webfilter_license")

    @webfilter_license.setter
    def webfilter_license(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "webfilter_license", value)


@pulumi.input_type
class _FortiguardState:
    def __init__(__self__, *,
                 antispam_cache: Optional[pulumi.Input[str]] = None,
                 antispam_cache_mpercent: Optional[pulumi.Input[int]] = None,
                 antispam_cache_mpermille: Optional[pulumi.Input[int]] = None,
                 antispam_cache_ttl: Optional[pulumi.Input[int]] = None,
                 antispam_expiration: Optional[pulumi.Input[int]] = None,
                 antispam_force_off: Optional[pulumi.Input[str]] = None,
                 antispam_license: Optional[pulumi.Input[int]] = None,
                 antispam_timeout: Optional[pulumi.Input[int]] = None,
                 anycast_sdns_server_ip: Optional[pulumi.Input[str]] = None,
                 anycast_sdns_server_port: Optional[pulumi.Input[int]] = None,
                 auto_firmware_upgrade: Optional[pulumi.Input[str]] = None,
                 auto_firmware_upgrade_day: Optional[pulumi.Input[str]] = None,
                 auto_firmware_upgrade_delay: Optional[pulumi.Input[int]] = None,
                 auto_firmware_upgrade_end_hour: Optional[pulumi.Input[int]] = None,
                 auto_firmware_upgrade_start_hour: Optional[pulumi.Input[int]] = None,
                 auto_join_forticloud: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip6: Optional[pulumi.Input[str]] = None,
                 ddns_server_port: Optional[pulumi.Input[int]] = None,
                 fds_license_expiring_days: Optional[pulumi.Input[int]] = None,
                 fortiguard_anycast: Optional[pulumi.Input[str]] = None,
                 fortiguard_anycast_source: Optional[pulumi.Input[str]] = None,
                 gui_prompt_auto_upgrade: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 load_balance_servers: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_cache: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention_cache_mpercent: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_cache_mpermille: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_cache_ttl: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_expiration: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_force_off: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention_license: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_timeout: Optional[pulumi.Input[int]] = None,
                 persistent_connection: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 proxy_password: Optional[pulumi.Input[str]] = None,
                 proxy_server_ip: Optional[pulumi.Input[str]] = None,
                 proxy_server_port: Optional[pulumi.Input[int]] = None,
                 proxy_username: Optional[pulumi.Input[str]] = None,
                 sandbox_inline_scan: Optional[pulumi.Input[str]] = None,
                 sandbox_region: Optional[pulumi.Input[str]] = None,
                 sdns_options: Optional[pulumi.Input[str]] = None,
                 sdns_server_ip: Optional[pulumi.Input[str]] = None,
                 sdns_server_port: Optional[pulumi.Input[int]] = None,
                 service_account_id: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 update_build_proxy: Optional[pulumi.Input[str]] = None,
                 update_dldb: Optional[pulumi.Input[str]] = None,
                 update_extdb: Optional[pulumi.Input[str]] = None,
                 update_ffdb: Optional[pulumi.Input[str]] = None,
                 update_server_location: Optional[pulumi.Input[str]] = None,
                 update_uwdb: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_expiration: Optional[pulumi.Input[int]] = None,
                 videofilter_license: Optional[pulumi.Input[int]] = None,
                 webfilter_cache: Optional[pulumi.Input[str]] = None,
                 webfilter_cache_ttl: Optional[pulumi.Input[int]] = None,
                 webfilter_expiration: Optional[pulumi.Input[int]] = None,
                 webfilter_force_off: Optional[pulumi.Input[str]] = None,
                 webfilter_license: Optional[pulumi.Input[int]] = None,
                 webfilter_timeout: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Fortiguard resources.
        :param pulumi.Input[str] antispam_cache: Enable/disable FortiGuard antispam request caching. Uses a small amount of memory but improves performance. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] antispam_cache_mpercent: Maximum percent of FortiGate memory the antispam cache is allowed to use (1 - 15%!)(MISSING).
        :param pulumi.Input[int] antispam_cache_mpermille: Maximum permille of FortiGate memory the antispam cache is allowed to use (1 - 150).
        :param pulumi.Input[int] antispam_cache_ttl: Time-to-live for antispam cache entries in seconds (300 - 86400). Lower times reduce the cache size. Higher times may improve performance since the cache will have more entries.
        :param pulumi.Input[int] antispam_expiration: Expiration date of the FortiGuard antispam contract.
        :param pulumi.Input[str] antispam_force_off: Enable/disable turning off the FortiGuard antispam service. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] antispam_license: Interval of time between license checks for the FortiGuard antispam contract.
        :param pulumi.Input[int] antispam_timeout: Antispam query time out (1 - 30 sec, default = 7).
        :param pulumi.Input[str] anycast_sdns_server_ip: IP address of the FortiGuard anycast DNS rating server.
        :param pulumi.Input[int] anycast_sdns_server_port: Port to connect to on the FortiGuard anycast DNS rating server.
        :param pulumi.Input[str] auto_firmware_upgrade: Enable/disable automatic patch-level firmware upgrade from FortiGuard. The FortiGate unit searches for new patches only in the same major and minor version. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_firmware_upgrade_day: Allowed day(s) of the week to start automatic patch-level firmware upgrade from FortiGuard. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[int] auto_firmware_upgrade_delay: Delay of day(s) before installing an automatic patch-level firmware upgrade from FortiGuard (default = 3). Set it 0 to use auto-firmware-upgrade-day instead, which selects allowed day(s) of the week for installing an automatic patch-level firmware upgrade.
        :param pulumi.Input[int] auto_firmware_upgrade_end_hour: End time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 4). When the end time is smaller than the start time, the end time is interpreted as the next day. The actual upgrade time is selected randomly within the time window.
        :param pulumi.Input[int] auto_firmware_upgrade_start_hour: Start time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 2). The actual upgrade time is selected randomly within the time window.
        :param pulumi.Input[str] auto_join_forticloud: Automatically connect to and login to FortiCloud. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ddns_server_ip: IP address of the FortiDDNS server.
        :param pulumi.Input[str] ddns_server_ip6: IPv6 address of the FortiDDNS server.
        :param pulumi.Input[int] ddns_server_port: Port used to communicate with FortiDDNS servers.
        :param pulumi.Input[int] fds_license_expiring_days: Threshold for number of days before FortiGuard license expiration to generate license expiring event log (1 - 100 days, default = 15).
        :param pulumi.Input[str] fortiguard_anycast: Enable/disable use of FortiGuard's anycast network. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortiguard_anycast_source: Configure which of Fortinet's servers to provide FortiGuard services in FortiGuard's anycast network. Default is Fortinet. Valid values: `fortinet`, `aws`, `debug`.
        :param pulumi.Input[str] gui_prompt_auto_upgrade: Enable/disable prompting of automatic patch-level firmware upgrade recommendation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[int] load_balance_servers: Number of servers to alternate between as first FortiGuard option.
        :param pulumi.Input[str] outbreak_prevention_cache: Enable/disable FortiGuard Virus Outbreak Prevention cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] outbreak_prevention_cache_mpercent: Maximum percent of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 15%!,(MISSING) default = 2).
        :param pulumi.Input[int] outbreak_prevention_cache_mpermille: Maximum permille of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 150 permille, default = 1).
        :param pulumi.Input[int] outbreak_prevention_cache_ttl: Time-to-live for FortiGuard Virus Outbreak Prevention cache entries (300 - 86400 sec, default = 300).
        :param pulumi.Input[int] outbreak_prevention_expiration: Expiration date of FortiGuard Virus Outbreak Prevention contract.
        :param pulumi.Input[str] outbreak_prevention_force_off: Turn off FortiGuard Virus Outbreak Prevention service. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] outbreak_prevention_license: Interval of time between license checks for FortiGuard Virus Outbreak Prevention contract.
        :param pulumi.Input[int] outbreak_prevention_timeout: FortiGuard Virus Outbreak Prevention time out (1 - 30 sec, default = 7).
        :param pulumi.Input[str] persistent_connection: Enable/disable use of persistent connection to receive update notification from FortiGuard. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] port: Port used to communicate with the FortiGuard servers.
        :param pulumi.Input[str] protocol: Protocol used to communicate with the FortiGuard servers. Valid values: `udp`, `http`, `https`.
        :param pulumi.Input[str] proxy_password: Proxy user password.
        :param pulumi.Input[str] proxy_server_ip: IP address of the proxy server.
        :param pulumi.Input[int] proxy_server_port: Port used to communicate with the proxy server.
        :param pulumi.Input[str] proxy_username: Proxy user name.
        :param pulumi.Input[str] sandbox_inline_scan: Enable/disable FortiCloud Sandbox inline-scan. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sandbox_region: Cloud sandbox region.
        :param pulumi.Input[str] sdns_options: Customization options for the FortiGuard DNS service. Valid values: `include-question-section`.
        :param pulumi.Input[str] sdns_server_ip: IP address of the FortiDNS server.
        :param pulumi.Input[int] sdns_server_port: Port used to communicate with FortiDNS servers.
        :param pulumi.Input[str] service_account_id: Service account ID.
        :param pulumi.Input[str] source_ip: Source IPv4 address used to communicate with FortiGuard.
        :param pulumi.Input[str] source_ip6: Source IPv6 address used to communicate with FortiGuard.
        :param pulumi.Input[str] update_build_proxy: Enable/disable proxy dictionary rebuild. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_dldb: Enable/disable DLP signature update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_extdb: Enable/disable external resource update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_ffdb: Enable/disable Internet Service Database update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_server_location: Signature update server location.
        :param pulumi.Input[str] update_uwdb: Enable/disable allowlist update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdom: FortiGuard Service virtual domain name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] videofilter_expiration: Expiration date of the FortiGuard video filter contract.
        :param pulumi.Input[int] videofilter_license: Interval of time between license checks for the FortiGuard video filter contract.
        :param pulumi.Input[str] webfilter_cache: Enable/disable FortiGuard web filter caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] webfilter_cache_ttl: Time-to-live for web filter cache entries in seconds (300 - 86400).
        :param pulumi.Input[int] webfilter_expiration: Expiration date of the FortiGuard web filter contract.
        :param pulumi.Input[str] webfilter_force_off: Enable/disable turning off the FortiGuard web filtering service. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] webfilter_license: Interval of time between license checks for the FortiGuard web filter contract.
        :param pulumi.Input[int] webfilter_timeout: Web filter query time out (1 - 30 sec, default = 7).
        """
        if antispam_cache is not None:
            pulumi.set(__self__, "antispam_cache", antispam_cache)
        if antispam_cache_mpercent is not None:
            pulumi.set(__self__, "antispam_cache_mpercent", antispam_cache_mpercent)
        if antispam_cache_mpermille is not None:
            pulumi.set(__self__, "antispam_cache_mpermille", antispam_cache_mpermille)
        if antispam_cache_ttl is not None:
            pulumi.set(__self__, "antispam_cache_ttl", antispam_cache_ttl)
        if antispam_expiration is not None:
            pulumi.set(__self__, "antispam_expiration", antispam_expiration)
        if antispam_force_off is not None:
            pulumi.set(__self__, "antispam_force_off", antispam_force_off)
        if antispam_license is not None:
            pulumi.set(__self__, "antispam_license", antispam_license)
        if antispam_timeout is not None:
            pulumi.set(__self__, "antispam_timeout", antispam_timeout)
        if anycast_sdns_server_ip is not None:
            pulumi.set(__self__, "anycast_sdns_server_ip", anycast_sdns_server_ip)
        if anycast_sdns_server_port is not None:
            pulumi.set(__self__, "anycast_sdns_server_port", anycast_sdns_server_port)
        if auto_firmware_upgrade is not None:
            pulumi.set(__self__, "auto_firmware_upgrade", auto_firmware_upgrade)
        if auto_firmware_upgrade_day is not None:
            pulumi.set(__self__, "auto_firmware_upgrade_day", auto_firmware_upgrade_day)
        if auto_firmware_upgrade_delay is not None:
            pulumi.set(__self__, "auto_firmware_upgrade_delay", auto_firmware_upgrade_delay)
        if auto_firmware_upgrade_end_hour is not None:
            pulumi.set(__self__, "auto_firmware_upgrade_end_hour", auto_firmware_upgrade_end_hour)
        if auto_firmware_upgrade_start_hour is not None:
            pulumi.set(__self__, "auto_firmware_upgrade_start_hour", auto_firmware_upgrade_start_hour)
        if auto_join_forticloud is not None:
            pulumi.set(__self__, "auto_join_forticloud", auto_join_forticloud)
        if ddns_server_ip is not None:
            pulumi.set(__self__, "ddns_server_ip", ddns_server_ip)
        if ddns_server_ip6 is not None:
            pulumi.set(__self__, "ddns_server_ip6", ddns_server_ip6)
        if ddns_server_port is not None:
            pulumi.set(__self__, "ddns_server_port", ddns_server_port)
        if fds_license_expiring_days is not None:
            pulumi.set(__self__, "fds_license_expiring_days", fds_license_expiring_days)
        if fortiguard_anycast is not None:
            pulumi.set(__self__, "fortiguard_anycast", fortiguard_anycast)
        if fortiguard_anycast_source is not None:
            pulumi.set(__self__, "fortiguard_anycast_source", fortiguard_anycast_source)
        if gui_prompt_auto_upgrade is not None:
            pulumi.set(__self__, "gui_prompt_auto_upgrade", gui_prompt_auto_upgrade)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if load_balance_servers is not None:
            pulumi.set(__self__, "load_balance_servers", load_balance_servers)
        if outbreak_prevention_cache is not None:
            pulumi.set(__self__, "outbreak_prevention_cache", outbreak_prevention_cache)
        if outbreak_prevention_cache_mpercent is not None:
            pulumi.set(__self__, "outbreak_prevention_cache_mpercent", outbreak_prevention_cache_mpercent)
        if outbreak_prevention_cache_mpermille is not None:
            pulumi.set(__self__, "outbreak_prevention_cache_mpermille", outbreak_prevention_cache_mpermille)
        if outbreak_prevention_cache_ttl is not None:
            pulumi.set(__self__, "outbreak_prevention_cache_ttl", outbreak_prevention_cache_ttl)
        if outbreak_prevention_expiration is not None:
            pulumi.set(__self__, "outbreak_prevention_expiration", outbreak_prevention_expiration)
        if outbreak_prevention_force_off is not None:
            pulumi.set(__self__, "outbreak_prevention_force_off", outbreak_prevention_force_off)
        if outbreak_prevention_license is not None:
            pulumi.set(__self__, "outbreak_prevention_license", outbreak_prevention_license)
        if outbreak_prevention_timeout is not None:
            pulumi.set(__self__, "outbreak_prevention_timeout", outbreak_prevention_timeout)
        if persistent_connection is not None:
            pulumi.set(__self__, "persistent_connection", persistent_connection)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if proxy_password is not None:
            pulumi.set(__self__, "proxy_password", proxy_password)
        if proxy_server_ip is not None:
            pulumi.set(__self__, "proxy_server_ip", proxy_server_ip)
        if proxy_server_port is not None:
            pulumi.set(__self__, "proxy_server_port", proxy_server_port)
        if proxy_username is not None:
            pulumi.set(__self__, "proxy_username", proxy_username)
        if sandbox_inline_scan is not None:
            pulumi.set(__self__, "sandbox_inline_scan", sandbox_inline_scan)
        if sandbox_region is not None:
            pulumi.set(__self__, "sandbox_region", sandbox_region)
        if sdns_options is not None:
            pulumi.set(__self__, "sdns_options", sdns_options)
        if sdns_server_ip is not None:
            pulumi.set(__self__, "sdns_server_ip", sdns_server_ip)
        if sdns_server_port is not None:
            pulumi.set(__self__, "sdns_server_port", sdns_server_port)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if update_build_proxy is not None:
            pulumi.set(__self__, "update_build_proxy", update_build_proxy)
        if update_dldb is not None:
            pulumi.set(__self__, "update_dldb", update_dldb)
        if update_extdb is not None:
            pulumi.set(__self__, "update_extdb", update_extdb)
        if update_ffdb is not None:
            pulumi.set(__self__, "update_ffdb", update_ffdb)
        if update_server_location is not None:
            pulumi.set(__self__, "update_server_location", update_server_location)
        if update_uwdb is not None:
            pulumi.set(__self__, "update_uwdb", update_uwdb)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if videofilter_expiration is not None:
            pulumi.set(__self__, "videofilter_expiration", videofilter_expiration)
        if videofilter_license is not None:
            pulumi.set(__self__, "videofilter_license", videofilter_license)
        if webfilter_cache is not None:
            pulumi.set(__self__, "webfilter_cache", webfilter_cache)
        if webfilter_cache_ttl is not None:
            pulumi.set(__self__, "webfilter_cache_ttl", webfilter_cache_ttl)
        if webfilter_expiration is not None:
            pulumi.set(__self__, "webfilter_expiration", webfilter_expiration)
        if webfilter_force_off is not None:
            pulumi.set(__self__, "webfilter_force_off", webfilter_force_off)
        if webfilter_license is not None:
            pulumi.set(__self__, "webfilter_license", webfilter_license)
        if webfilter_timeout is not None:
            pulumi.set(__self__, "webfilter_timeout", webfilter_timeout)

    @property
    @pulumi.getter(name="antispamCache")
    def antispam_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiGuard antispam request caching. Uses a small amount of memory but improves performance. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "antispam_cache")

    @antispam_cache.setter
    def antispam_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antispam_cache", value)

    @property
    @pulumi.getter(name="antispamCacheMpercent")
    def antispam_cache_mpercent(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum percent of FortiGate memory the antispam cache is allowed to use (1 - 15%!)(MISSING).
        """
        return pulumi.get(self, "antispam_cache_mpercent")

    @antispam_cache_mpercent.setter
    def antispam_cache_mpercent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "antispam_cache_mpercent", value)

    @property
    @pulumi.getter(name="antispamCacheMpermille")
    def antispam_cache_mpermille(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum permille of FortiGate memory the antispam cache is allowed to use (1 - 150).
        """
        return pulumi.get(self, "antispam_cache_mpermille")

    @antispam_cache_mpermille.setter
    def antispam_cache_mpermille(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "antispam_cache_mpermille", value)

    @property
    @pulumi.getter(name="antispamCacheTtl")
    def antispam_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Time-to-live for antispam cache entries in seconds (300 - 86400). Lower times reduce the cache size. Higher times may improve performance since the cache will have more entries.
        """
        return pulumi.get(self, "antispam_cache_ttl")

    @antispam_cache_ttl.setter
    def antispam_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "antispam_cache_ttl", value)

    @property
    @pulumi.getter(name="antispamExpiration")
    def antispam_expiration(self) -> Optional[pulumi.Input[int]]:
        """
        Expiration date of the FortiGuard antispam contract.
        """
        return pulumi.get(self, "antispam_expiration")

    @antispam_expiration.setter
    def antispam_expiration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "antispam_expiration", value)

    @property
    @pulumi.getter(name="antispamForceOff")
    def antispam_force_off(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable turning off the FortiGuard antispam service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "antispam_force_off")

    @antispam_force_off.setter
    def antispam_force_off(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antispam_force_off", value)

    @property
    @pulumi.getter(name="antispamLicense")
    def antispam_license(self) -> Optional[pulumi.Input[int]]:
        """
        Interval of time between license checks for the FortiGuard antispam contract.
        """
        return pulumi.get(self, "antispam_license")

    @antispam_license.setter
    def antispam_license(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "antispam_license", value)

    @property
    @pulumi.getter(name="antispamTimeout")
    def antispam_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Antispam query time out (1 - 30 sec, default = 7).
        """
        return pulumi.get(self, "antispam_timeout")

    @antispam_timeout.setter
    def antispam_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "antispam_timeout", value)

    @property
    @pulumi.getter(name="anycastSdnsServerIp")
    def anycast_sdns_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the FortiGuard anycast DNS rating server.
        """
        return pulumi.get(self, "anycast_sdns_server_ip")

    @anycast_sdns_server_ip.setter
    def anycast_sdns_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anycast_sdns_server_ip", value)

    @property
    @pulumi.getter(name="anycastSdnsServerPort")
    def anycast_sdns_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port to connect to on the FortiGuard anycast DNS rating server.
        """
        return pulumi.get(self, "anycast_sdns_server_port")

    @anycast_sdns_server_port.setter
    def anycast_sdns_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "anycast_sdns_server_port", value)

    @property
    @pulumi.getter(name="autoFirmwareUpgrade")
    def auto_firmware_upgrade(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic patch-level firmware upgrade from FortiGuard. The FortiGate unit searches for new patches only in the same major and minor version. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_firmware_upgrade")

    @auto_firmware_upgrade.setter
    def auto_firmware_upgrade(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_firmware_upgrade", value)

    @property
    @pulumi.getter(name="autoFirmwareUpgradeDay")
    def auto_firmware_upgrade_day(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed day(s) of the week to start automatic patch-level firmware upgrade from FortiGuard. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "auto_firmware_upgrade_day")

    @auto_firmware_upgrade_day.setter
    def auto_firmware_upgrade_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_firmware_upgrade_day", value)

    @property
    @pulumi.getter(name="autoFirmwareUpgradeDelay")
    def auto_firmware_upgrade_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Delay of day(s) before installing an automatic patch-level firmware upgrade from FortiGuard (default = 3). Set it 0 to use auto-firmware-upgrade-day instead, which selects allowed day(s) of the week for installing an automatic patch-level firmware upgrade.
        """
        return pulumi.get(self, "auto_firmware_upgrade_delay")

    @auto_firmware_upgrade_delay.setter
    def auto_firmware_upgrade_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_firmware_upgrade_delay", value)

    @property
    @pulumi.getter(name="autoFirmwareUpgradeEndHour")
    def auto_firmware_upgrade_end_hour(self) -> Optional[pulumi.Input[int]]:
        """
        End time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 4). When the end time is smaller than the start time, the end time is interpreted as the next day. The actual upgrade time is selected randomly within the time window.
        """
        return pulumi.get(self, "auto_firmware_upgrade_end_hour")

    @auto_firmware_upgrade_end_hour.setter
    def auto_firmware_upgrade_end_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_firmware_upgrade_end_hour", value)

    @property
    @pulumi.getter(name="autoFirmwareUpgradeStartHour")
    def auto_firmware_upgrade_start_hour(self) -> Optional[pulumi.Input[int]]:
        """
        Start time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 2). The actual upgrade time is selected randomly within the time window.
        """
        return pulumi.get(self, "auto_firmware_upgrade_start_hour")

    @auto_firmware_upgrade_start_hour.setter
    def auto_firmware_upgrade_start_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_firmware_upgrade_start_hour", value)

    @property
    @pulumi.getter(name="autoJoinForticloud")
    def auto_join_forticloud(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically connect to and login to FortiCloud. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_join_forticloud")

    @auto_join_forticloud.setter
    def auto_join_forticloud(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_join_forticloud", value)

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the FortiDDNS server.
        """
        return pulumi.get(self, "ddns_server_ip")

    @ddns_server_ip.setter
    def ddns_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_server_ip", value)

    @property
    @pulumi.getter(name="ddnsServerIp6")
    def ddns_server_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the FortiDDNS server.
        """
        return pulumi.get(self, "ddns_server_ip6")

    @ddns_server_ip6.setter
    def ddns_server_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_server_ip6", value)

    @property
    @pulumi.getter(name="ddnsServerPort")
    def ddns_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port used to communicate with FortiDDNS servers.
        """
        return pulumi.get(self, "ddns_server_port")

    @ddns_server_port.setter
    def ddns_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ddns_server_port", value)

    @property
    @pulumi.getter(name="fdsLicenseExpiringDays")
    def fds_license_expiring_days(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold for number of days before FortiGuard license expiration to generate license expiring event log (1 - 100 days, default = 15).
        """
        return pulumi.get(self, "fds_license_expiring_days")

    @fds_license_expiring_days.setter
    def fds_license_expiring_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fds_license_expiring_days", value)

    @property
    @pulumi.getter(name="fortiguardAnycast")
    def fortiguard_anycast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of FortiGuard's anycast network. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortiguard_anycast")

    @fortiguard_anycast.setter
    def fortiguard_anycast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_anycast", value)

    @property
    @pulumi.getter(name="fortiguardAnycastSource")
    def fortiguard_anycast_source(self) -> Optional[pulumi.Input[str]]:
        """
        Configure which of Fortinet's servers to provide FortiGuard services in FortiGuard's anycast network. Default is Fortinet. Valid values: `fortinet`, `aws`, `debug`.
        """
        return pulumi.get(self, "fortiguard_anycast_source")

    @fortiguard_anycast_source.setter
    def fortiguard_anycast_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_anycast_source", value)

    @property
    @pulumi.getter(name="guiPromptAutoUpgrade")
    def gui_prompt_auto_upgrade(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable prompting of automatic patch-level firmware upgrade recommendation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_prompt_auto_upgrade")

    @gui_prompt_auto_upgrade.setter
    def gui_prompt_auto_upgrade(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gui_prompt_auto_upgrade", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="loadBalanceServers")
    def load_balance_servers(self) -> Optional[pulumi.Input[int]]:
        """
        Number of servers to alternate between as first FortiGuard option.
        """
        return pulumi.get(self, "load_balance_servers")

    @load_balance_servers.setter
    def load_balance_servers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "load_balance_servers", value)

    @property
    @pulumi.getter(name="outbreakPreventionCache")
    def outbreak_prevention_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiGuard Virus Outbreak Prevention cache. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "outbreak_prevention_cache")

    @outbreak_prevention_cache.setter
    def outbreak_prevention_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention_cache", value)

    @property
    @pulumi.getter(name="outbreakPreventionCacheMpercent")
    def outbreak_prevention_cache_mpercent(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum percent of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 15%!,(MISSING) default = 2).
        """
        return pulumi.get(self, "outbreak_prevention_cache_mpercent")

    @outbreak_prevention_cache_mpercent.setter
    def outbreak_prevention_cache_mpercent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outbreak_prevention_cache_mpercent", value)

    @property
    @pulumi.getter(name="outbreakPreventionCacheMpermille")
    def outbreak_prevention_cache_mpermille(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum permille of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 150 permille, default = 1).
        """
        return pulumi.get(self, "outbreak_prevention_cache_mpermille")

    @outbreak_prevention_cache_mpermille.setter
    def outbreak_prevention_cache_mpermille(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outbreak_prevention_cache_mpermille", value)

    @property
    @pulumi.getter(name="outbreakPreventionCacheTtl")
    def outbreak_prevention_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Time-to-live for FortiGuard Virus Outbreak Prevention cache entries (300 - 86400 sec, default = 300).
        """
        return pulumi.get(self, "outbreak_prevention_cache_ttl")

    @outbreak_prevention_cache_ttl.setter
    def outbreak_prevention_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outbreak_prevention_cache_ttl", value)

    @property
    @pulumi.getter(name="outbreakPreventionExpiration")
    def outbreak_prevention_expiration(self) -> Optional[pulumi.Input[int]]:
        """
        Expiration date of FortiGuard Virus Outbreak Prevention contract.
        """
        return pulumi.get(self, "outbreak_prevention_expiration")

    @outbreak_prevention_expiration.setter
    def outbreak_prevention_expiration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outbreak_prevention_expiration", value)

    @property
    @pulumi.getter(name="outbreakPreventionForceOff")
    def outbreak_prevention_force_off(self) -> Optional[pulumi.Input[str]]:
        """
        Turn off FortiGuard Virus Outbreak Prevention service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "outbreak_prevention_force_off")

    @outbreak_prevention_force_off.setter
    def outbreak_prevention_force_off(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention_force_off", value)

    @property
    @pulumi.getter(name="outbreakPreventionLicense")
    def outbreak_prevention_license(self) -> Optional[pulumi.Input[int]]:
        """
        Interval of time between license checks for FortiGuard Virus Outbreak Prevention contract.
        """
        return pulumi.get(self, "outbreak_prevention_license")

    @outbreak_prevention_license.setter
    def outbreak_prevention_license(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outbreak_prevention_license", value)

    @property
    @pulumi.getter(name="outbreakPreventionTimeout")
    def outbreak_prevention_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        FortiGuard Virus Outbreak Prevention time out (1 - 30 sec, default = 7).
        """
        return pulumi.get(self, "outbreak_prevention_timeout")

    @outbreak_prevention_timeout.setter
    def outbreak_prevention_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outbreak_prevention_timeout", value)

    @property
    @pulumi.getter(name="persistentConnection")
    def persistent_connection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of persistent connection to receive update notification from FortiGuard. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "persistent_connection")

    @persistent_connection.setter
    def persistent_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistent_connection", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Port used to communicate with the FortiGuard servers.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol used to communicate with the FortiGuard servers. Valid values: `udp`, `http`, `https`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="proxyPassword")
    def proxy_password(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy user password.
        """
        return pulumi.get(self, "proxy_password")

    @proxy_password.setter
    def proxy_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_password", value)

    @property
    @pulumi.getter(name="proxyServerIp")
    def proxy_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the proxy server.
        """
        return pulumi.get(self, "proxy_server_ip")

    @proxy_server_ip.setter
    def proxy_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_server_ip", value)

    @property
    @pulumi.getter(name="proxyServerPort")
    def proxy_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port used to communicate with the proxy server.
        """
        return pulumi.get(self, "proxy_server_port")

    @proxy_server_port.setter
    def proxy_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_server_port", value)

    @property
    @pulumi.getter(name="proxyUsername")
    def proxy_username(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy user name.
        """
        return pulumi.get(self, "proxy_username")

    @proxy_username.setter
    def proxy_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_username", value)

    @property
    @pulumi.getter(name="sandboxInlineScan")
    def sandbox_inline_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiCloud Sandbox inline-scan. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sandbox_inline_scan")

    @sandbox_inline_scan.setter
    def sandbox_inline_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sandbox_inline_scan", value)

    @property
    @pulumi.getter(name="sandboxRegion")
    def sandbox_region(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud sandbox region.
        """
        return pulumi.get(self, "sandbox_region")

    @sandbox_region.setter
    def sandbox_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sandbox_region", value)

    @property
    @pulumi.getter(name="sdnsOptions")
    def sdns_options(self) -> Optional[pulumi.Input[str]]:
        """
        Customization options for the FortiGuard DNS service. Valid values: `include-question-section`.
        """
        return pulumi.get(self, "sdns_options")

    @sdns_options.setter
    def sdns_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdns_options", value)

    @property
    @pulumi.getter(name="sdnsServerIp")
    def sdns_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the FortiDNS server.
        """
        return pulumi.get(self, "sdns_server_ip")

    @sdns_server_ip.setter
    def sdns_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdns_server_ip", value)

    @property
    @pulumi.getter(name="sdnsServerPort")
    def sdns_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port used to communicate with FortiDNS servers.
        """
        return pulumi.get(self, "sdns_server_port")

    @sdns_server_port.setter
    def sdns_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sdns_server_port", value)

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        Service account ID.
        """
        return pulumi.get(self, "service_account_id")

    @service_account_id.setter
    def service_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_id", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv4 address used to communicate with FortiGuard.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address used to communicate with FortiGuard.
        """
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter(name="updateBuildProxy")
    def update_build_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable proxy dictionary rebuild. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_build_proxy")

    @update_build_proxy.setter
    def update_build_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_build_proxy", value)

    @property
    @pulumi.getter(name="updateDldb")
    def update_dldb(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DLP signature update. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_dldb")

    @update_dldb.setter
    def update_dldb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_dldb", value)

    @property
    @pulumi.getter(name="updateExtdb")
    def update_extdb(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable external resource update. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_extdb")

    @update_extdb.setter
    def update_extdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_extdb", value)

    @property
    @pulumi.getter(name="updateFfdb")
    def update_ffdb(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Internet Service Database update. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_ffdb")

    @update_ffdb.setter
    def update_ffdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_ffdb", value)

    @property
    @pulumi.getter(name="updateServerLocation")
    def update_server_location(self) -> Optional[pulumi.Input[str]]:
        """
        Signature update server location.
        """
        return pulumi.get(self, "update_server_location")

    @update_server_location.setter
    def update_server_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_server_location", value)

    @property
    @pulumi.getter(name="updateUwdb")
    def update_uwdb(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowlist update. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_uwdb")

    @update_uwdb.setter
    def update_uwdb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_uwdb", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard Service virtual domain name.
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="videofilterExpiration")
    def videofilter_expiration(self) -> Optional[pulumi.Input[int]]:
        """
        Expiration date of the FortiGuard video filter contract.
        """
        return pulumi.get(self, "videofilter_expiration")

    @videofilter_expiration.setter
    def videofilter_expiration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "videofilter_expiration", value)

    @property
    @pulumi.getter(name="videofilterLicense")
    def videofilter_license(self) -> Optional[pulumi.Input[int]]:
        """
        Interval of time between license checks for the FortiGuard video filter contract.
        """
        return pulumi.get(self, "videofilter_license")

    @videofilter_license.setter
    def videofilter_license(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "videofilter_license", value)

    @property
    @pulumi.getter(name="webfilterCache")
    def webfilter_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiGuard web filter caching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_cache")

    @webfilter_cache.setter
    def webfilter_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_cache", value)

    @property
    @pulumi.getter(name="webfilterCacheTtl")
    def webfilter_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Time-to-live for web filter cache entries in seconds (300 - 86400).
        """
        return pulumi.get(self, "webfilter_cache_ttl")

    @webfilter_cache_ttl.setter
    def webfilter_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "webfilter_cache_ttl", value)

    @property
    @pulumi.getter(name="webfilterExpiration")
    def webfilter_expiration(self) -> Optional[pulumi.Input[int]]:
        """
        Expiration date of the FortiGuard web filter contract.
        """
        return pulumi.get(self, "webfilter_expiration")

    @webfilter_expiration.setter
    def webfilter_expiration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "webfilter_expiration", value)

    @property
    @pulumi.getter(name="webfilterForceOff")
    def webfilter_force_off(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable turning off the FortiGuard web filtering service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_force_off")

    @webfilter_force_off.setter
    def webfilter_force_off(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_force_off", value)

    @property
    @pulumi.getter(name="webfilterLicense")
    def webfilter_license(self) -> Optional[pulumi.Input[int]]:
        """
        Interval of time between license checks for the FortiGuard web filter contract.
        """
        return pulumi.get(self, "webfilter_license")

    @webfilter_license.setter
    def webfilter_license(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "webfilter_license", value)

    @property
    @pulumi.getter(name="webfilterTimeout")
    def webfilter_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Web filter query time out (1 - 30 sec, default = 7).
        """
        return pulumi.get(self, "webfilter_timeout")

    @webfilter_timeout.setter
    def webfilter_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "webfilter_timeout", value)


class Fortiguard(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 antispam_cache: Optional[pulumi.Input[str]] = None,
                 antispam_cache_mpercent: Optional[pulumi.Input[int]] = None,
                 antispam_cache_mpermille: Optional[pulumi.Input[int]] = None,
                 antispam_cache_ttl: Optional[pulumi.Input[int]] = None,
                 antispam_expiration: Optional[pulumi.Input[int]] = None,
                 antispam_force_off: Optional[pulumi.Input[str]] = None,
                 antispam_license: Optional[pulumi.Input[int]] = None,
                 antispam_timeout: Optional[pulumi.Input[int]] = None,
                 anycast_sdns_server_ip: Optional[pulumi.Input[str]] = None,
                 anycast_sdns_server_port: Optional[pulumi.Input[int]] = None,
                 auto_firmware_upgrade: Optional[pulumi.Input[str]] = None,
                 auto_firmware_upgrade_day: Optional[pulumi.Input[str]] = None,
                 auto_firmware_upgrade_delay: Optional[pulumi.Input[int]] = None,
                 auto_firmware_upgrade_end_hour: Optional[pulumi.Input[int]] = None,
                 auto_firmware_upgrade_start_hour: Optional[pulumi.Input[int]] = None,
                 auto_join_forticloud: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip6: Optional[pulumi.Input[str]] = None,
                 ddns_server_port: Optional[pulumi.Input[int]] = None,
                 fds_license_expiring_days: Optional[pulumi.Input[int]] = None,
                 fortiguard_anycast: Optional[pulumi.Input[str]] = None,
                 fortiguard_anycast_source: Optional[pulumi.Input[str]] = None,
                 gui_prompt_auto_upgrade: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 load_balance_servers: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_cache: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention_cache_mpercent: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_cache_mpermille: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_cache_ttl: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_expiration: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_force_off: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention_license: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_timeout: Optional[pulumi.Input[int]] = None,
                 persistent_connection: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 proxy_password: Optional[pulumi.Input[str]] = None,
                 proxy_server_ip: Optional[pulumi.Input[str]] = None,
                 proxy_server_port: Optional[pulumi.Input[int]] = None,
                 proxy_username: Optional[pulumi.Input[str]] = None,
                 sandbox_inline_scan: Optional[pulumi.Input[str]] = None,
                 sandbox_region: Optional[pulumi.Input[str]] = None,
                 sdns_options: Optional[pulumi.Input[str]] = None,
                 sdns_server_ip: Optional[pulumi.Input[str]] = None,
                 sdns_server_port: Optional[pulumi.Input[int]] = None,
                 service_account_id: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 update_build_proxy: Optional[pulumi.Input[str]] = None,
                 update_dldb: Optional[pulumi.Input[str]] = None,
                 update_extdb: Optional[pulumi.Input[str]] = None,
                 update_ffdb: Optional[pulumi.Input[str]] = None,
                 update_server_location: Optional[pulumi.Input[str]] = None,
                 update_uwdb: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_expiration: Optional[pulumi.Input[int]] = None,
                 videofilter_license: Optional[pulumi.Input[int]] = None,
                 webfilter_cache: Optional[pulumi.Input[str]] = None,
                 webfilter_cache_ttl: Optional[pulumi.Input[int]] = None,
                 webfilter_expiration: Optional[pulumi.Input[int]] = None,
                 webfilter_force_off: Optional[pulumi.Input[str]] = None,
                 webfilter_license: Optional[pulumi.Input[int]] = None,
                 webfilter_timeout: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Configure FortiGuard services.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Fortiguard("trname",
            antispam_cache="enable",
            antispam_cache_mpercent=2,
            antispam_cache_ttl=1800,
            antispam_expiration=1618617600,
            antispam_force_off="disable",
            antispam_license=1,
            antispam_timeout=7,
            auto_join_forticloud="enable",
            ddns_server_ip="0.0.0.0",
            ddns_server_port=443,
            load_balance_servers=1,
            outbreak_prevention_cache="enable",
            outbreak_prevention_cache_mpercent=2,
            outbreak_prevention_cache_ttl=300,
            outbreak_prevention_expiration=1618617600,
            outbreak_prevention_force_off="disable",
            outbreak_prevention_license=1,
            outbreak_prevention_timeout=7,
            port="8888",
            sdns_server_ip="\\"208.91.112.220\\" ",
            sdns_server_port=53,
            source_ip="0.0.0.0",
            source_ip6="::",
            update_server_location="usa",
            webfilter_cache="enable",
            webfilter_cache_ttl=3600,
            webfilter_expiration=1618617600,
            webfilter_force_off="disable",
            webfilter_license=1,
            webfilter_timeout=15)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Fortiguard can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/fortiguard:Fortiguard labelname SystemFortiguard
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/fortiguard:Fortiguard labelname SystemFortiguard
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] antispam_cache: Enable/disable FortiGuard antispam request caching. Uses a small amount of memory but improves performance. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] antispam_cache_mpercent: Maximum percent of FortiGate memory the antispam cache is allowed to use (1 - 15%!)(MISSING).
        :param pulumi.Input[int] antispam_cache_mpermille: Maximum permille of FortiGate memory the antispam cache is allowed to use (1 - 150).
        :param pulumi.Input[int] antispam_cache_ttl: Time-to-live for antispam cache entries in seconds (300 - 86400). Lower times reduce the cache size. Higher times may improve performance since the cache will have more entries.
        :param pulumi.Input[int] antispam_expiration: Expiration date of the FortiGuard antispam contract.
        :param pulumi.Input[str] antispam_force_off: Enable/disable turning off the FortiGuard antispam service. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] antispam_license: Interval of time between license checks for the FortiGuard antispam contract.
        :param pulumi.Input[int] antispam_timeout: Antispam query time out (1 - 30 sec, default = 7).
        :param pulumi.Input[str] anycast_sdns_server_ip: IP address of the FortiGuard anycast DNS rating server.
        :param pulumi.Input[int] anycast_sdns_server_port: Port to connect to on the FortiGuard anycast DNS rating server.
        :param pulumi.Input[str] auto_firmware_upgrade: Enable/disable automatic patch-level firmware upgrade from FortiGuard. The FortiGate unit searches for new patches only in the same major and minor version. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_firmware_upgrade_day: Allowed day(s) of the week to start automatic patch-level firmware upgrade from FortiGuard. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[int] auto_firmware_upgrade_delay: Delay of day(s) before installing an automatic patch-level firmware upgrade from FortiGuard (default = 3). Set it 0 to use auto-firmware-upgrade-day instead, which selects allowed day(s) of the week for installing an automatic patch-level firmware upgrade.
        :param pulumi.Input[int] auto_firmware_upgrade_end_hour: End time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 4). When the end time is smaller than the start time, the end time is interpreted as the next day. The actual upgrade time is selected randomly within the time window.
        :param pulumi.Input[int] auto_firmware_upgrade_start_hour: Start time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 2). The actual upgrade time is selected randomly within the time window.
        :param pulumi.Input[str] auto_join_forticloud: Automatically connect to and login to FortiCloud. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ddns_server_ip: IP address of the FortiDDNS server.
        :param pulumi.Input[str] ddns_server_ip6: IPv6 address of the FortiDDNS server.
        :param pulumi.Input[int] ddns_server_port: Port used to communicate with FortiDDNS servers.
        :param pulumi.Input[int] fds_license_expiring_days: Threshold for number of days before FortiGuard license expiration to generate license expiring event log (1 - 100 days, default = 15).
        :param pulumi.Input[str] fortiguard_anycast: Enable/disable use of FortiGuard's anycast network. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortiguard_anycast_source: Configure which of Fortinet's servers to provide FortiGuard services in FortiGuard's anycast network. Default is Fortinet. Valid values: `fortinet`, `aws`, `debug`.
        :param pulumi.Input[str] gui_prompt_auto_upgrade: Enable/disable prompting of automatic patch-level firmware upgrade recommendation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[int] load_balance_servers: Number of servers to alternate between as first FortiGuard option.
        :param pulumi.Input[str] outbreak_prevention_cache: Enable/disable FortiGuard Virus Outbreak Prevention cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] outbreak_prevention_cache_mpercent: Maximum percent of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 15%!,(MISSING) default = 2).
        :param pulumi.Input[int] outbreak_prevention_cache_mpermille: Maximum permille of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 150 permille, default = 1).
        :param pulumi.Input[int] outbreak_prevention_cache_ttl: Time-to-live for FortiGuard Virus Outbreak Prevention cache entries (300 - 86400 sec, default = 300).
        :param pulumi.Input[int] outbreak_prevention_expiration: Expiration date of FortiGuard Virus Outbreak Prevention contract.
        :param pulumi.Input[str] outbreak_prevention_force_off: Turn off FortiGuard Virus Outbreak Prevention service. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] outbreak_prevention_license: Interval of time between license checks for FortiGuard Virus Outbreak Prevention contract.
        :param pulumi.Input[int] outbreak_prevention_timeout: FortiGuard Virus Outbreak Prevention time out (1 - 30 sec, default = 7).
        :param pulumi.Input[str] persistent_connection: Enable/disable use of persistent connection to receive update notification from FortiGuard. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] port: Port used to communicate with the FortiGuard servers.
        :param pulumi.Input[str] protocol: Protocol used to communicate with the FortiGuard servers. Valid values: `udp`, `http`, `https`.
        :param pulumi.Input[str] proxy_password: Proxy user password.
        :param pulumi.Input[str] proxy_server_ip: IP address of the proxy server.
        :param pulumi.Input[int] proxy_server_port: Port used to communicate with the proxy server.
        :param pulumi.Input[str] proxy_username: Proxy user name.
        :param pulumi.Input[str] sandbox_inline_scan: Enable/disable FortiCloud Sandbox inline-scan. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sandbox_region: Cloud sandbox region.
        :param pulumi.Input[str] sdns_options: Customization options for the FortiGuard DNS service. Valid values: `include-question-section`.
        :param pulumi.Input[str] sdns_server_ip: IP address of the FortiDNS server.
        :param pulumi.Input[int] sdns_server_port: Port used to communicate with FortiDNS servers.
        :param pulumi.Input[str] service_account_id: Service account ID.
        :param pulumi.Input[str] source_ip: Source IPv4 address used to communicate with FortiGuard.
        :param pulumi.Input[str] source_ip6: Source IPv6 address used to communicate with FortiGuard.
        :param pulumi.Input[str] update_build_proxy: Enable/disable proxy dictionary rebuild. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_dldb: Enable/disable DLP signature update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_extdb: Enable/disable external resource update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_ffdb: Enable/disable Internet Service Database update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_server_location: Signature update server location.
        :param pulumi.Input[str] update_uwdb: Enable/disable allowlist update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdom: FortiGuard Service virtual domain name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] videofilter_expiration: Expiration date of the FortiGuard video filter contract.
        :param pulumi.Input[int] videofilter_license: Interval of time between license checks for the FortiGuard video filter contract.
        :param pulumi.Input[str] webfilter_cache: Enable/disable FortiGuard web filter caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] webfilter_cache_ttl: Time-to-live for web filter cache entries in seconds (300 - 86400).
        :param pulumi.Input[int] webfilter_expiration: Expiration date of the FortiGuard web filter contract.
        :param pulumi.Input[str] webfilter_force_off: Enable/disable turning off the FortiGuard web filtering service. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] webfilter_license: Interval of time between license checks for the FortiGuard web filter contract.
        :param pulumi.Input[int] webfilter_timeout: Web filter query time out (1 - 30 sec, default = 7).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FortiguardArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure FortiGuard services.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Fortiguard("trname",
            antispam_cache="enable",
            antispam_cache_mpercent=2,
            antispam_cache_ttl=1800,
            antispam_expiration=1618617600,
            antispam_force_off="disable",
            antispam_license=1,
            antispam_timeout=7,
            auto_join_forticloud="enable",
            ddns_server_ip="0.0.0.0",
            ddns_server_port=443,
            load_balance_servers=1,
            outbreak_prevention_cache="enable",
            outbreak_prevention_cache_mpercent=2,
            outbreak_prevention_cache_ttl=300,
            outbreak_prevention_expiration=1618617600,
            outbreak_prevention_force_off="disable",
            outbreak_prevention_license=1,
            outbreak_prevention_timeout=7,
            port="8888",
            sdns_server_ip="\\"208.91.112.220\\" ",
            sdns_server_port=53,
            source_ip="0.0.0.0",
            source_ip6="::",
            update_server_location="usa",
            webfilter_cache="enable",
            webfilter_cache_ttl=3600,
            webfilter_expiration=1618617600,
            webfilter_force_off="disable",
            webfilter_license=1,
            webfilter_timeout=15)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Fortiguard can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/fortiguard:Fortiguard labelname SystemFortiguard
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/fortiguard:Fortiguard labelname SystemFortiguard
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param FortiguardArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FortiguardArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 antispam_cache: Optional[pulumi.Input[str]] = None,
                 antispam_cache_mpercent: Optional[pulumi.Input[int]] = None,
                 antispam_cache_mpermille: Optional[pulumi.Input[int]] = None,
                 antispam_cache_ttl: Optional[pulumi.Input[int]] = None,
                 antispam_expiration: Optional[pulumi.Input[int]] = None,
                 antispam_force_off: Optional[pulumi.Input[str]] = None,
                 antispam_license: Optional[pulumi.Input[int]] = None,
                 antispam_timeout: Optional[pulumi.Input[int]] = None,
                 anycast_sdns_server_ip: Optional[pulumi.Input[str]] = None,
                 anycast_sdns_server_port: Optional[pulumi.Input[int]] = None,
                 auto_firmware_upgrade: Optional[pulumi.Input[str]] = None,
                 auto_firmware_upgrade_day: Optional[pulumi.Input[str]] = None,
                 auto_firmware_upgrade_delay: Optional[pulumi.Input[int]] = None,
                 auto_firmware_upgrade_end_hour: Optional[pulumi.Input[int]] = None,
                 auto_firmware_upgrade_start_hour: Optional[pulumi.Input[int]] = None,
                 auto_join_forticloud: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip6: Optional[pulumi.Input[str]] = None,
                 ddns_server_port: Optional[pulumi.Input[int]] = None,
                 fds_license_expiring_days: Optional[pulumi.Input[int]] = None,
                 fortiguard_anycast: Optional[pulumi.Input[str]] = None,
                 fortiguard_anycast_source: Optional[pulumi.Input[str]] = None,
                 gui_prompt_auto_upgrade: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 load_balance_servers: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_cache: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention_cache_mpercent: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_cache_mpermille: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_cache_ttl: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_expiration: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_force_off: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention_license: Optional[pulumi.Input[int]] = None,
                 outbreak_prevention_timeout: Optional[pulumi.Input[int]] = None,
                 persistent_connection: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 proxy_password: Optional[pulumi.Input[str]] = None,
                 proxy_server_ip: Optional[pulumi.Input[str]] = None,
                 proxy_server_port: Optional[pulumi.Input[int]] = None,
                 proxy_username: Optional[pulumi.Input[str]] = None,
                 sandbox_inline_scan: Optional[pulumi.Input[str]] = None,
                 sandbox_region: Optional[pulumi.Input[str]] = None,
                 sdns_options: Optional[pulumi.Input[str]] = None,
                 sdns_server_ip: Optional[pulumi.Input[str]] = None,
                 sdns_server_port: Optional[pulumi.Input[int]] = None,
                 service_account_id: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 update_build_proxy: Optional[pulumi.Input[str]] = None,
                 update_dldb: Optional[pulumi.Input[str]] = None,
                 update_extdb: Optional[pulumi.Input[str]] = None,
                 update_ffdb: Optional[pulumi.Input[str]] = None,
                 update_server_location: Optional[pulumi.Input[str]] = None,
                 update_uwdb: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 videofilter_expiration: Optional[pulumi.Input[int]] = None,
                 videofilter_license: Optional[pulumi.Input[int]] = None,
                 webfilter_cache: Optional[pulumi.Input[str]] = None,
                 webfilter_cache_ttl: Optional[pulumi.Input[int]] = None,
                 webfilter_expiration: Optional[pulumi.Input[int]] = None,
                 webfilter_force_off: Optional[pulumi.Input[str]] = None,
                 webfilter_license: Optional[pulumi.Input[int]] = None,
                 webfilter_timeout: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FortiguardArgs.__new__(FortiguardArgs)

            __props__.__dict__["antispam_cache"] = antispam_cache
            __props__.__dict__["antispam_cache_mpercent"] = antispam_cache_mpercent
            __props__.__dict__["antispam_cache_mpermille"] = antispam_cache_mpermille
            __props__.__dict__["antispam_cache_ttl"] = antispam_cache_ttl
            __props__.__dict__["antispam_expiration"] = antispam_expiration
            __props__.__dict__["antispam_force_off"] = antispam_force_off
            __props__.__dict__["antispam_license"] = antispam_license
            if antispam_timeout is None and not opts.urn:
                raise TypeError("Missing required property 'antispam_timeout'")
            __props__.__dict__["antispam_timeout"] = antispam_timeout
            __props__.__dict__["anycast_sdns_server_ip"] = anycast_sdns_server_ip
            __props__.__dict__["anycast_sdns_server_port"] = anycast_sdns_server_port
            __props__.__dict__["auto_firmware_upgrade"] = auto_firmware_upgrade
            __props__.__dict__["auto_firmware_upgrade_day"] = auto_firmware_upgrade_day
            __props__.__dict__["auto_firmware_upgrade_delay"] = auto_firmware_upgrade_delay
            __props__.__dict__["auto_firmware_upgrade_end_hour"] = auto_firmware_upgrade_end_hour
            __props__.__dict__["auto_firmware_upgrade_start_hour"] = auto_firmware_upgrade_start_hour
            __props__.__dict__["auto_join_forticloud"] = auto_join_forticloud
            __props__.__dict__["ddns_server_ip"] = ddns_server_ip
            __props__.__dict__["ddns_server_ip6"] = ddns_server_ip6
            __props__.__dict__["ddns_server_port"] = ddns_server_port
            __props__.__dict__["fds_license_expiring_days"] = fds_license_expiring_days
            __props__.__dict__["fortiguard_anycast"] = fortiguard_anycast
            __props__.__dict__["fortiguard_anycast_source"] = fortiguard_anycast_source
            __props__.__dict__["gui_prompt_auto_upgrade"] = gui_prompt_auto_upgrade
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interface_select_method"] = interface_select_method
            __props__.__dict__["load_balance_servers"] = load_balance_servers
            __props__.__dict__["outbreak_prevention_cache"] = outbreak_prevention_cache
            __props__.__dict__["outbreak_prevention_cache_mpercent"] = outbreak_prevention_cache_mpercent
            __props__.__dict__["outbreak_prevention_cache_mpermille"] = outbreak_prevention_cache_mpermille
            __props__.__dict__["outbreak_prevention_cache_ttl"] = outbreak_prevention_cache_ttl
            __props__.__dict__["outbreak_prevention_expiration"] = outbreak_prevention_expiration
            __props__.__dict__["outbreak_prevention_force_off"] = outbreak_prevention_force_off
            __props__.__dict__["outbreak_prevention_license"] = outbreak_prevention_license
            if outbreak_prevention_timeout is None and not opts.urn:
                raise TypeError("Missing required property 'outbreak_prevention_timeout'")
            __props__.__dict__["outbreak_prevention_timeout"] = outbreak_prevention_timeout
            __props__.__dict__["persistent_connection"] = persistent_connection
            __props__.__dict__["port"] = port
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["proxy_password"] = None if proxy_password is None else pulumi.Output.secret(proxy_password)
            __props__.__dict__["proxy_server_ip"] = proxy_server_ip
            __props__.__dict__["proxy_server_port"] = proxy_server_port
            __props__.__dict__["proxy_username"] = proxy_username
            __props__.__dict__["sandbox_inline_scan"] = sandbox_inline_scan
            __props__.__dict__["sandbox_region"] = sandbox_region
            __props__.__dict__["sdns_options"] = sdns_options
            __props__.__dict__["sdns_server_ip"] = sdns_server_ip
            __props__.__dict__["sdns_server_port"] = sdns_server_port
            __props__.__dict__["service_account_id"] = service_account_id
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["source_ip6"] = source_ip6
            __props__.__dict__["update_build_proxy"] = update_build_proxy
            __props__.__dict__["update_dldb"] = update_dldb
            __props__.__dict__["update_extdb"] = update_extdb
            __props__.__dict__["update_ffdb"] = update_ffdb
            __props__.__dict__["update_server_location"] = update_server_location
            __props__.__dict__["update_uwdb"] = update_uwdb
            __props__.__dict__["vdom"] = vdom
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["videofilter_expiration"] = videofilter_expiration
            __props__.__dict__["videofilter_license"] = videofilter_license
            __props__.__dict__["webfilter_cache"] = webfilter_cache
            __props__.__dict__["webfilter_cache_ttl"] = webfilter_cache_ttl
            __props__.__dict__["webfilter_expiration"] = webfilter_expiration
            __props__.__dict__["webfilter_force_off"] = webfilter_force_off
            __props__.__dict__["webfilter_license"] = webfilter_license
            if webfilter_timeout is None and not opts.urn:
                raise TypeError("Missing required property 'webfilter_timeout'")
            __props__.__dict__["webfilter_timeout"] = webfilter_timeout
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["proxyPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Fortiguard, __self__).__init__(
            'fortios:system/fortiguard:Fortiguard',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            antispam_cache: Optional[pulumi.Input[str]] = None,
            antispam_cache_mpercent: Optional[pulumi.Input[int]] = None,
            antispam_cache_mpermille: Optional[pulumi.Input[int]] = None,
            antispam_cache_ttl: Optional[pulumi.Input[int]] = None,
            antispam_expiration: Optional[pulumi.Input[int]] = None,
            antispam_force_off: Optional[pulumi.Input[str]] = None,
            antispam_license: Optional[pulumi.Input[int]] = None,
            antispam_timeout: Optional[pulumi.Input[int]] = None,
            anycast_sdns_server_ip: Optional[pulumi.Input[str]] = None,
            anycast_sdns_server_port: Optional[pulumi.Input[int]] = None,
            auto_firmware_upgrade: Optional[pulumi.Input[str]] = None,
            auto_firmware_upgrade_day: Optional[pulumi.Input[str]] = None,
            auto_firmware_upgrade_delay: Optional[pulumi.Input[int]] = None,
            auto_firmware_upgrade_end_hour: Optional[pulumi.Input[int]] = None,
            auto_firmware_upgrade_start_hour: Optional[pulumi.Input[int]] = None,
            auto_join_forticloud: Optional[pulumi.Input[str]] = None,
            ddns_server_ip: Optional[pulumi.Input[str]] = None,
            ddns_server_ip6: Optional[pulumi.Input[str]] = None,
            ddns_server_port: Optional[pulumi.Input[int]] = None,
            fds_license_expiring_days: Optional[pulumi.Input[int]] = None,
            fortiguard_anycast: Optional[pulumi.Input[str]] = None,
            fortiguard_anycast_source: Optional[pulumi.Input[str]] = None,
            gui_prompt_auto_upgrade: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interface_select_method: Optional[pulumi.Input[str]] = None,
            load_balance_servers: Optional[pulumi.Input[int]] = None,
            outbreak_prevention_cache: Optional[pulumi.Input[str]] = None,
            outbreak_prevention_cache_mpercent: Optional[pulumi.Input[int]] = None,
            outbreak_prevention_cache_mpermille: Optional[pulumi.Input[int]] = None,
            outbreak_prevention_cache_ttl: Optional[pulumi.Input[int]] = None,
            outbreak_prevention_expiration: Optional[pulumi.Input[int]] = None,
            outbreak_prevention_force_off: Optional[pulumi.Input[str]] = None,
            outbreak_prevention_license: Optional[pulumi.Input[int]] = None,
            outbreak_prevention_timeout: Optional[pulumi.Input[int]] = None,
            persistent_connection: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            proxy_password: Optional[pulumi.Input[str]] = None,
            proxy_server_ip: Optional[pulumi.Input[str]] = None,
            proxy_server_port: Optional[pulumi.Input[int]] = None,
            proxy_username: Optional[pulumi.Input[str]] = None,
            sandbox_inline_scan: Optional[pulumi.Input[str]] = None,
            sandbox_region: Optional[pulumi.Input[str]] = None,
            sdns_options: Optional[pulumi.Input[str]] = None,
            sdns_server_ip: Optional[pulumi.Input[str]] = None,
            sdns_server_port: Optional[pulumi.Input[int]] = None,
            service_account_id: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            source_ip6: Optional[pulumi.Input[str]] = None,
            update_build_proxy: Optional[pulumi.Input[str]] = None,
            update_dldb: Optional[pulumi.Input[str]] = None,
            update_extdb: Optional[pulumi.Input[str]] = None,
            update_ffdb: Optional[pulumi.Input[str]] = None,
            update_server_location: Optional[pulumi.Input[str]] = None,
            update_uwdb: Optional[pulumi.Input[str]] = None,
            vdom: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            videofilter_expiration: Optional[pulumi.Input[int]] = None,
            videofilter_license: Optional[pulumi.Input[int]] = None,
            webfilter_cache: Optional[pulumi.Input[str]] = None,
            webfilter_cache_ttl: Optional[pulumi.Input[int]] = None,
            webfilter_expiration: Optional[pulumi.Input[int]] = None,
            webfilter_force_off: Optional[pulumi.Input[str]] = None,
            webfilter_license: Optional[pulumi.Input[int]] = None,
            webfilter_timeout: Optional[pulumi.Input[int]] = None) -> 'Fortiguard':
        """
        Get an existing Fortiguard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] antispam_cache: Enable/disable FortiGuard antispam request caching. Uses a small amount of memory but improves performance. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] antispam_cache_mpercent: Maximum percent of FortiGate memory the antispam cache is allowed to use (1 - 15%!)(MISSING).
        :param pulumi.Input[int] antispam_cache_mpermille: Maximum permille of FortiGate memory the antispam cache is allowed to use (1 - 150).
        :param pulumi.Input[int] antispam_cache_ttl: Time-to-live for antispam cache entries in seconds (300 - 86400). Lower times reduce the cache size. Higher times may improve performance since the cache will have more entries.
        :param pulumi.Input[int] antispam_expiration: Expiration date of the FortiGuard antispam contract.
        :param pulumi.Input[str] antispam_force_off: Enable/disable turning off the FortiGuard antispam service. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] antispam_license: Interval of time between license checks for the FortiGuard antispam contract.
        :param pulumi.Input[int] antispam_timeout: Antispam query time out (1 - 30 sec, default = 7).
        :param pulumi.Input[str] anycast_sdns_server_ip: IP address of the FortiGuard anycast DNS rating server.
        :param pulumi.Input[int] anycast_sdns_server_port: Port to connect to on the FortiGuard anycast DNS rating server.
        :param pulumi.Input[str] auto_firmware_upgrade: Enable/disable automatic patch-level firmware upgrade from FortiGuard. The FortiGate unit searches for new patches only in the same major and minor version. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_firmware_upgrade_day: Allowed day(s) of the week to start automatic patch-level firmware upgrade from FortiGuard. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[int] auto_firmware_upgrade_delay: Delay of day(s) before installing an automatic patch-level firmware upgrade from FortiGuard (default = 3). Set it 0 to use auto-firmware-upgrade-day instead, which selects allowed day(s) of the week for installing an automatic patch-level firmware upgrade.
        :param pulumi.Input[int] auto_firmware_upgrade_end_hour: End time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 4). When the end time is smaller than the start time, the end time is interpreted as the next day. The actual upgrade time is selected randomly within the time window.
        :param pulumi.Input[int] auto_firmware_upgrade_start_hour: Start time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 2). The actual upgrade time is selected randomly within the time window.
        :param pulumi.Input[str] auto_join_forticloud: Automatically connect to and login to FortiCloud. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ddns_server_ip: IP address of the FortiDDNS server.
        :param pulumi.Input[str] ddns_server_ip6: IPv6 address of the FortiDDNS server.
        :param pulumi.Input[int] ddns_server_port: Port used to communicate with FortiDDNS servers.
        :param pulumi.Input[int] fds_license_expiring_days: Threshold for number of days before FortiGuard license expiration to generate license expiring event log (1 - 100 days, default = 15).
        :param pulumi.Input[str] fortiguard_anycast: Enable/disable use of FortiGuard's anycast network. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortiguard_anycast_source: Configure which of Fortinet's servers to provide FortiGuard services in FortiGuard's anycast network. Default is Fortinet. Valid values: `fortinet`, `aws`, `debug`.
        :param pulumi.Input[str] gui_prompt_auto_upgrade: Enable/disable prompting of automatic patch-level firmware upgrade recommendation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[int] load_balance_servers: Number of servers to alternate between as first FortiGuard option.
        :param pulumi.Input[str] outbreak_prevention_cache: Enable/disable FortiGuard Virus Outbreak Prevention cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] outbreak_prevention_cache_mpercent: Maximum percent of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 15%!,(MISSING) default = 2).
        :param pulumi.Input[int] outbreak_prevention_cache_mpermille: Maximum permille of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 150 permille, default = 1).
        :param pulumi.Input[int] outbreak_prevention_cache_ttl: Time-to-live for FortiGuard Virus Outbreak Prevention cache entries (300 - 86400 sec, default = 300).
        :param pulumi.Input[int] outbreak_prevention_expiration: Expiration date of FortiGuard Virus Outbreak Prevention contract.
        :param pulumi.Input[str] outbreak_prevention_force_off: Turn off FortiGuard Virus Outbreak Prevention service. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] outbreak_prevention_license: Interval of time between license checks for FortiGuard Virus Outbreak Prevention contract.
        :param pulumi.Input[int] outbreak_prevention_timeout: FortiGuard Virus Outbreak Prevention time out (1 - 30 sec, default = 7).
        :param pulumi.Input[str] persistent_connection: Enable/disable use of persistent connection to receive update notification from FortiGuard. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] port: Port used to communicate with the FortiGuard servers.
        :param pulumi.Input[str] protocol: Protocol used to communicate with the FortiGuard servers. Valid values: `udp`, `http`, `https`.
        :param pulumi.Input[str] proxy_password: Proxy user password.
        :param pulumi.Input[str] proxy_server_ip: IP address of the proxy server.
        :param pulumi.Input[int] proxy_server_port: Port used to communicate with the proxy server.
        :param pulumi.Input[str] proxy_username: Proxy user name.
        :param pulumi.Input[str] sandbox_inline_scan: Enable/disable FortiCloud Sandbox inline-scan. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sandbox_region: Cloud sandbox region.
        :param pulumi.Input[str] sdns_options: Customization options for the FortiGuard DNS service. Valid values: `include-question-section`.
        :param pulumi.Input[str] sdns_server_ip: IP address of the FortiDNS server.
        :param pulumi.Input[int] sdns_server_port: Port used to communicate with FortiDNS servers.
        :param pulumi.Input[str] service_account_id: Service account ID.
        :param pulumi.Input[str] source_ip: Source IPv4 address used to communicate with FortiGuard.
        :param pulumi.Input[str] source_ip6: Source IPv6 address used to communicate with FortiGuard.
        :param pulumi.Input[str] update_build_proxy: Enable/disable proxy dictionary rebuild. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_dldb: Enable/disable DLP signature update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_extdb: Enable/disable external resource update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_ffdb: Enable/disable Internet Service Database update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_server_location: Signature update server location.
        :param pulumi.Input[str] update_uwdb: Enable/disable allowlist update. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdom: FortiGuard Service virtual domain name.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] videofilter_expiration: Expiration date of the FortiGuard video filter contract.
        :param pulumi.Input[int] videofilter_license: Interval of time between license checks for the FortiGuard video filter contract.
        :param pulumi.Input[str] webfilter_cache: Enable/disable FortiGuard web filter caching. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] webfilter_cache_ttl: Time-to-live for web filter cache entries in seconds (300 - 86400).
        :param pulumi.Input[int] webfilter_expiration: Expiration date of the FortiGuard web filter contract.
        :param pulumi.Input[str] webfilter_force_off: Enable/disable turning off the FortiGuard web filtering service. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] webfilter_license: Interval of time between license checks for the FortiGuard web filter contract.
        :param pulumi.Input[int] webfilter_timeout: Web filter query time out (1 - 30 sec, default = 7).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FortiguardState.__new__(_FortiguardState)

        __props__.__dict__["antispam_cache"] = antispam_cache
        __props__.__dict__["antispam_cache_mpercent"] = antispam_cache_mpercent
        __props__.__dict__["antispam_cache_mpermille"] = antispam_cache_mpermille
        __props__.__dict__["antispam_cache_ttl"] = antispam_cache_ttl
        __props__.__dict__["antispam_expiration"] = antispam_expiration
        __props__.__dict__["antispam_force_off"] = antispam_force_off
        __props__.__dict__["antispam_license"] = antispam_license
        __props__.__dict__["antispam_timeout"] = antispam_timeout
        __props__.__dict__["anycast_sdns_server_ip"] = anycast_sdns_server_ip
        __props__.__dict__["anycast_sdns_server_port"] = anycast_sdns_server_port
        __props__.__dict__["auto_firmware_upgrade"] = auto_firmware_upgrade
        __props__.__dict__["auto_firmware_upgrade_day"] = auto_firmware_upgrade_day
        __props__.__dict__["auto_firmware_upgrade_delay"] = auto_firmware_upgrade_delay
        __props__.__dict__["auto_firmware_upgrade_end_hour"] = auto_firmware_upgrade_end_hour
        __props__.__dict__["auto_firmware_upgrade_start_hour"] = auto_firmware_upgrade_start_hour
        __props__.__dict__["auto_join_forticloud"] = auto_join_forticloud
        __props__.__dict__["ddns_server_ip"] = ddns_server_ip
        __props__.__dict__["ddns_server_ip6"] = ddns_server_ip6
        __props__.__dict__["ddns_server_port"] = ddns_server_port
        __props__.__dict__["fds_license_expiring_days"] = fds_license_expiring_days
        __props__.__dict__["fortiguard_anycast"] = fortiguard_anycast
        __props__.__dict__["fortiguard_anycast_source"] = fortiguard_anycast_source
        __props__.__dict__["gui_prompt_auto_upgrade"] = gui_prompt_auto_upgrade
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interface_select_method"] = interface_select_method
        __props__.__dict__["load_balance_servers"] = load_balance_servers
        __props__.__dict__["outbreak_prevention_cache"] = outbreak_prevention_cache
        __props__.__dict__["outbreak_prevention_cache_mpercent"] = outbreak_prevention_cache_mpercent
        __props__.__dict__["outbreak_prevention_cache_mpermille"] = outbreak_prevention_cache_mpermille
        __props__.__dict__["outbreak_prevention_cache_ttl"] = outbreak_prevention_cache_ttl
        __props__.__dict__["outbreak_prevention_expiration"] = outbreak_prevention_expiration
        __props__.__dict__["outbreak_prevention_force_off"] = outbreak_prevention_force_off
        __props__.__dict__["outbreak_prevention_license"] = outbreak_prevention_license
        __props__.__dict__["outbreak_prevention_timeout"] = outbreak_prevention_timeout
        __props__.__dict__["persistent_connection"] = persistent_connection
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["proxy_password"] = proxy_password
        __props__.__dict__["proxy_server_ip"] = proxy_server_ip
        __props__.__dict__["proxy_server_port"] = proxy_server_port
        __props__.__dict__["proxy_username"] = proxy_username
        __props__.__dict__["sandbox_inline_scan"] = sandbox_inline_scan
        __props__.__dict__["sandbox_region"] = sandbox_region
        __props__.__dict__["sdns_options"] = sdns_options
        __props__.__dict__["sdns_server_ip"] = sdns_server_ip
        __props__.__dict__["sdns_server_port"] = sdns_server_port
        __props__.__dict__["service_account_id"] = service_account_id
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["source_ip6"] = source_ip6
        __props__.__dict__["update_build_proxy"] = update_build_proxy
        __props__.__dict__["update_dldb"] = update_dldb
        __props__.__dict__["update_extdb"] = update_extdb
        __props__.__dict__["update_ffdb"] = update_ffdb
        __props__.__dict__["update_server_location"] = update_server_location
        __props__.__dict__["update_uwdb"] = update_uwdb
        __props__.__dict__["vdom"] = vdom
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["videofilter_expiration"] = videofilter_expiration
        __props__.__dict__["videofilter_license"] = videofilter_license
        __props__.__dict__["webfilter_cache"] = webfilter_cache
        __props__.__dict__["webfilter_cache_ttl"] = webfilter_cache_ttl
        __props__.__dict__["webfilter_expiration"] = webfilter_expiration
        __props__.__dict__["webfilter_force_off"] = webfilter_force_off
        __props__.__dict__["webfilter_license"] = webfilter_license
        __props__.__dict__["webfilter_timeout"] = webfilter_timeout
        return Fortiguard(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="antispamCache")
    def antispam_cache(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiGuard antispam request caching. Uses a small amount of memory but improves performance. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "antispam_cache")

    @property
    @pulumi.getter(name="antispamCacheMpercent")
    def antispam_cache_mpercent(self) -> pulumi.Output[int]:
        """
        Maximum percent of FortiGate memory the antispam cache is allowed to use (1 - 15%!)(MISSING).
        """
        return pulumi.get(self, "antispam_cache_mpercent")

    @property
    @pulumi.getter(name="antispamCacheMpermille")
    def antispam_cache_mpermille(self) -> pulumi.Output[int]:
        """
        Maximum permille of FortiGate memory the antispam cache is allowed to use (1 - 150).
        """
        return pulumi.get(self, "antispam_cache_mpermille")

    @property
    @pulumi.getter(name="antispamCacheTtl")
    def antispam_cache_ttl(self) -> pulumi.Output[int]:
        """
        Time-to-live for antispam cache entries in seconds (300 - 86400). Lower times reduce the cache size. Higher times may improve performance since the cache will have more entries.
        """
        return pulumi.get(self, "antispam_cache_ttl")

    @property
    @pulumi.getter(name="antispamExpiration")
    def antispam_expiration(self) -> pulumi.Output[int]:
        """
        Expiration date of the FortiGuard antispam contract.
        """
        return pulumi.get(self, "antispam_expiration")

    @property
    @pulumi.getter(name="antispamForceOff")
    def antispam_force_off(self) -> pulumi.Output[str]:
        """
        Enable/disable turning off the FortiGuard antispam service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "antispam_force_off")

    @property
    @pulumi.getter(name="antispamLicense")
    def antispam_license(self) -> pulumi.Output[int]:
        """
        Interval of time between license checks for the FortiGuard antispam contract.
        """
        return pulumi.get(self, "antispam_license")

    @property
    @pulumi.getter(name="antispamTimeout")
    def antispam_timeout(self) -> pulumi.Output[int]:
        """
        Antispam query time out (1 - 30 sec, default = 7).
        """
        return pulumi.get(self, "antispam_timeout")

    @property
    @pulumi.getter(name="anycastSdnsServerIp")
    def anycast_sdns_server_ip(self) -> pulumi.Output[str]:
        """
        IP address of the FortiGuard anycast DNS rating server.
        """
        return pulumi.get(self, "anycast_sdns_server_ip")

    @property
    @pulumi.getter(name="anycastSdnsServerPort")
    def anycast_sdns_server_port(self) -> pulumi.Output[int]:
        """
        Port to connect to on the FortiGuard anycast DNS rating server.
        """
        return pulumi.get(self, "anycast_sdns_server_port")

    @property
    @pulumi.getter(name="autoFirmwareUpgrade")
    def auto_firmware_upgrade(self) -> pulumi.Output[str]:
        """
        Enable/disable automatic patch-level firmware upgrade from FortiGuard. The FortiGate unit searches for new patches only in the same major and minor version. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_firmware_upgrade")

    @property
    @pulumi.getter(name="autoFirmwareUpgradeDay")
    def auto_firmware_upgrade_day(self) -> pulumi.Output[str]:
        """
        Allowed day(s) of the week to start automatic patch-level firmware upgrade from FortiGuard. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "auto_firmware_upgrade_day")

    @property
    @pulumi.getter(name="autoFirmwareUpgradeDelay")
    def auto_firmware_upgrade_delay(self) -> pulumi.Output[int]:
        """
        Delay of day(s) before installing an automatic patch-level firmware upgrade from FortiGuard (default = 3). Set it 0 to use auto-firmware-upgrade-day instead, which selects allowed day(s) of the week for installing an automatic patch-level firmware upgrade.
        """
        return pulumi.get(self, "auto_firmware_upgrade_delay")

    @property
    @pulumi.getter(name="autoFirmwareUpgradeEndHour")
    def auto_firmware_upgrade_end_hour(self) -> pulumi.Output[int]:
        """
        End time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 4). When the end time is smaller than the start time, the end time is interpreted as the next day. The actual upgrade time is selected randomly within the time window.
        """
        return pulumi.get(self, "auto_firmware_upgrade_end_hour")

    @property
    @pulumi.getter(name="autoFirmwareUpgradeStartHour")
    def auto_firmware_upgrade_start_hour(self) -> pulumi.Output[int]:
        """
        Start time in the designated time window for automatic patch-level firmware upgrade from FortiGuard in 24 hour time (0 ~ 23, default = 2). The actual upgrade time is selected randomly within the time window.
        """
        return pulumi.get(self, "auto_firmware_upgrade_start_hour")

    @property
    @pulumi.getter(name="autoJoinForticloud")
    def auto_join_forticloud(self) -> pulumi.Output[str]:
        """
        Automatically connect to and login to FortiCloud. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_join_forticloud")

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> pulumi.Output[str]:
        """
        IP address of the FortiDDNS server.
        """
        return pulumi.get(self, "ddns_server_ip")

    @property
    @pulumi.getter(name="ddnsServerIp6")
    def ddns_server_ip6(self) -> pulumi.Output[str]:
        """
        IPv6 address of the FortiDDNS server.
        """
        return pulumi.get(self, "ddns_server_ip6")

    @property
    @pulumi.getter(name="ddnsServerPort")
    def ddns_server_port(self) -> pulumi.Output[int]:
        """
        Port used to communicate with FortiDDNS servers.
        """
        return pulumi.get(self, "ddns_server_port")

    @property
    @pulumi.getter(name="fdsLicenseExpiringDays")
    def fds_license_expiring_days(self) -> pulumi.Output[int]:
        """
        Threshold for number of days before FortiGuard license expiration to generate license expiring event log (1 - 100 days, default = 15).
        """
        return pulumi.get(self, "fds_license_expiring_days")

    @property
    @pulumi.getter(name="fortiguardAnycast")
    def fortiguard_anycast(self) -> pulumi.Output[str]:
        """
        Enable/disable use of FortiGuard's anycast network. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortiguard_anycast")

    @property
    @pulumi.getter(name="fortiguardAnycastSource")
    def fortiguard_anycast_source(self) -> pulumi.Output[str]:
        """
        Configure which of Fortinet's servers to provide FortiGuard services in FortiGuard's anycast network. Default is Fortinet. Valid values: `fortinet`, `aws`, `debug`.
        """
        return pulumi.get(self, "fortiguard_anycast_source")

    @property
    @pulumi.getter(name="guiPromptAutoUpgrade")
    def gui_prompt_auto_upgrade(self) -> pulumi.Output[str]:
        """
        Enable/disable prompting of automatic patch-level firmware upgrade recommendation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gui_prompt_auto_upgrade")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> pulumi.Output[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="loadBalanceServers")
    def load_balance_servers(self) -> pulumi.Output[int]:
        """
        Number of servers to alternate between as first FortiGuard option.
        """
        return pulumi.get(self, "load_balance_servers")

    @property
    @pulumi.getter(name="outbreakPreventionCache")
    def outbreak_prevention_cache(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiGuard Virus Outbreak Prevention cache. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "outbreak_prevention_cache")

    @property
    @pulumi.getter(name="outbreakPreventionCacheMpercent")
    def outbreak_prevention_cache_mpercent(self) -> pulumi.Output[int]:
        """
        Maximum percent of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 15%!,(MISSING) default = 2).
        """
        return pulumi.get(self, "outbreak_prevention_cache_mpercent")

    @property
    @pulumi.getter(name="outbreakPreventionCacheMpermille")
    def outbreak_prevention_cache_mpermille(self) -> pulumi.Output[int]:
        """
        Maximum permille of memory FortiGuard Virus Outbreak Prevention cache can use (1 - 150 permille, default = 1).
        """
        return pulumi.get(self, "outbreak_prevention_cache_mpermille")

    @property
    @pulumi.getter(name="outbreakPreventionCacheTtl")
    def outbreak_prevention_cache_ttl(self) -> pulumi.Output[int]:
        """
        Time-to-live for FortiGuard Virus Outbreak Prevention cache entries (300 - 86400 sec, default = 300).
        """
        return pulumi.get(self, "outbreak_prevention_cache_ttl")

    @property
    @pulumi.getter(name="outbreakPreventionExpiration")
    def outbreak_prevention_expiration(self) -> pulumi.Output[int]:
        """
        Expiration date of FortiGuard Virus Outbreak Prevention contract.
        """
        return pulumi.get(self, "outbreak_prevention_expiration")

    @property
    @pulumi.getter(name="outbreakPreventionForceOff")
    def outbreak_prevention_force_off(self) -> pulumi.Output[str]:
        """
        Turn off FortiGuard Virus Outbreak Prevention service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "outbreak_prevention_force_off")

    @property
    @pulumi.getter(name="outbreakPreventionLicense")
    def outbreak_prevention_license(self) -> pulumi.Output[int]:
        """
        Interval of time between license checks for FortiGuard Virus Outbreak Prevention contract.
        """
        return pulumi.get(self, "outbreak_prevention_license")

    @property
    @pulumi.getter(name="outbreakPreventionTimeout")
    def outbreak_prevention_timeout(self) -> pulumi.Output[int]:
        """
        FortiGuard Virus Outbreak Prevention time out (1 - 30 sec, default = 7).
        """
        return pulumi.get(self, "outbreak_prevention_timeout")

    @property
    @pulumi.getter(name="persistentConnection")
    def persistent_connection(self) -> pulumi.Output[str]:
        """
        Enable/disable use of persistent connection to receive update notification from FortiGuard. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "persistent_connection")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[str]:
        """
        Port used to communicate with the FortiGuard servers.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Protocol used to communicate with the FortiGuard servers. Valid values: `udp`, `http`, `https`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="proxyPassword")
    def proxy_password(self) -> pulumi.Output[Optional[str]]:
        """
        Proxy user password.
        """
        return pulumi.get(self, "proxy_password")

    @property
    @pulumi.getter(name="proxyServerIp")
    def proxy_server_ip(self) -> pulumi.Output[str]:
        """
        IP address of the proxy server.
        """
        return pulumi.get(self, "proxy_server_ip")

    @property
    @pulumi.getter(name="proxyServerPort")
    def proxy_server_port(self) -> pulumi.Output[int]:
        """
        Port used to communicate with the proxy server.
        """
        return pulumi.get(self, "proxy_server_port")

    @property
    @pulumi.getter(name="proxyUsername")
    def proxy_username(self) -> pulumi.Output[str]:
        """
        Proxy user name.
        """
        return pulumi.get(self, "proxy_username")

    @property
    @pulumi.getter(name="sandboxInlineScan")
    def sandbox_inline_scan(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiCloud Sandbox inline-scan. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sandbox_inline_scan")

    @property
    @pulumi.getter(name="sandboxRegion")
    def sandbox_region(self) -> pulumi.Output[str]:
        """
        Cloud sandbox region.
        """
        return pulumi.get(self, "sandbox_region")

    @property
    @pulumi.getter(name="sdnsOptions")
    def sdns_options(self) -> pulumi.Output[str]:
        """
        Customization options for the FortiGuard DNS service. Valid values: `include-question-section`.
        """
        return pulumi.get(self, "sdns_options")

    @property
    @pulumi.getter(name="sdnsServerIp")
    def sdns_server_ip(self) -> pulumi.Output[str]:
        """
        IP address of the FortiDNS server.
        """
        return pulumi.get(self, "sdns_server_ip")

    @property
    @pulumi.getter(name="sdnsServerPort")
    def sdns_server_port(self) -> pulumi.Output[int]:
        """
        Port used to communicate with FortiDNS servers.
        """
        return pulumi.get(self, "sdns_server_port")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> pulumi.Output[str]:
        """
        Service account ID.
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        """
        Source IPv4 address used to communicate with FortiGuard.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> pulumi.Output[str]:
        """
        Source IPv6 address used to communicate with FortiGuard.
        """
        return pulumi.get(self, "source_ip6")

    @property
    @pulumi.getter(name="updateBuildProxy")
    def update_build_proxy(self) -> pulumi.Output[str]:
        """
        Enable/disable proxy dictionary rebuild. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_build_proxy")

    @property
    @pulumi.getter(name="updateDldb")
    def update_dldb(self) -> pulumi.Output[str]:
        """
        Enable/disable DLP signature update. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_dldb")

    @property
    @pulumi.getter(name="updateExtdb")
    def update_extdb(self) -> pulumi.Output[str]:
        """
        Enable/disable external resource update. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_extdb")

    @property
    @pulumi.getter(name="updateFfdb")
    def update_ffdb(self) -> pulumi.Output[str]:
        """
        Enable/disable Internet Service Database update. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_ffdb")

    @property
    @pulumi.getter(name="updateServerLocation")
    def update_server_location(self) -> pulumi.Output[str]:
        """
        Signature update server location.
        """
        return pulumi.get(self, "update_server_location")

    @property
    @pulumi.getter(name="updateUwdb")
    def update_uwdb(self) -> pulumi.Output[str]:
        """
        Enable/disable allowlist update. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_uwdb")

    @property
    @pulumi.getter
    def vdom(self) -> pulumi.Output[str]:
        """
        FortiGuard Service virtual domain name.
        """
        return pulumi.get(self, "vdom")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="videofilterExpiration")
    def videofilter_expiration(self) -> pulumi.Output[int]:
        """
        Expiration date of the FortiGuard video filter contract.
        """
        return pulumi.get(self, "videofilter_expiration")

    @property
    @pulumi.getter(name="videofilterLicense")
    def videofilter_license(self) -> pulumi.Output[int]:
        """
        Interval of time between license checks for the FortiGuard video filter contract.
        """
        return pulumi.get(self, "videofilter_license")

    @property
    @pulumi.getter(name="webfilterCache")
    def webfilter_cache(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiGuard web filter caching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_cache")

    @property
    @pulumi.getter(name="webfilterCacheTtl")
    def webfilter_cache_ttl(self) -> pulumi.Output[int]:
        """
        Time-to-live for web filter cache entries in seconds (300 - 86400).
        """
        return pulumi.get(self, "webfilter_cache_ttl")

    @property
    @pulumi.getter(name="webfilterExpiration")
    def webfilter_expiration(self) -> pulumi.Output[int]:
        """
        Expiration date of the FortiGuard web filter contract.
        """
        return pulumi.get(self, "webfilter_expiration")

    @property
    @pulumi.getter(name="webfilterForceOff")
    def webfilter_force_off(self) -> pulumi.Output[str]:
        """
        Enable/disable turning off the FortiGuard web filtering service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "webfilter_force_off")

    @property
    @pulumi.getter(name="webfilterLicense")
    def webfilter_license(self) -> pulumi.Output[int]:
        """
        Interval of time between license checks for the FortiGuard web filter contract.
        """
        return pulumi.get(self, "webfilter_license")

    @property
    @pulumi.getter(name="webfilterTimeout")
    def webfilter_timeout(self) -> pulumi.Output[int]:
        """
        Web filter query time out (1 - 30 sec, default = 7).
        """
        return pulumi.get(self, "webfilter_timeout")

