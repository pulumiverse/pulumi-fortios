# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SpeedtestscheduleArgs', 'Speedtestschedule']

@pulumi.input_type
class SpeedtestscheduleArgs:
    def __init__(__self__, *,
                 ctrl_port: Optional[pulumi.Input[int]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 dynamic_server: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['SpeedtestscheduleScheduleArgs']]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 server_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_inbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth: Optional[pulumi.Input[str]] = None,
                 update_outbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 update_shaper: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Speedtestschedule resource.
        :param pulumi.Input[int] ctrl_port: Port of the controller to get access token.
        :param pulumi.Input[str] diffserv: DSCP used for speed test.
        :param pulumi.Input[str] dynamic_server: Enable/disable dynamic server option. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] mode: Protocol Auto(default), TCP or UDP used for speed test. Valid values: `UDP`, `TCP`, `Auto`.
        :param pulumi.Input[Sequence[pulumi.Input['SpeedtestscheduleScheduleArgs']]] schedules: Schedules for the interface. The structure of `schedules` block is documented below.
        :param pulumi.Input[str] server_name: Speed test server name.
        :param pulumi.Input[int] server_port: Port of the server to run speed test.
        :param pulumi.Input[str] status: Enable/disable scheduled speed test. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] update_inbandwidth: Enable/disable bypassing interface's inbound bandwidth setting. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] update_inbandwidth_maximum: Maximum downloading bandwidth (kbps) to be used in a speed test.
        :param pulumi.Input[int] update_inbandwidth_minimum: Minimum downloading bandwidth (kbps) to be considered effective.
        :param pulumi.Input[str] update_outbandwidth: Enable/disable bypassing interface's outbound bandwidth setting. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] update_outbandwidth_maximum: Maximum uploading bandwidth (kbps) to be used in a speed test.
        :param pulumi.Input[int] update_outbandwidth_minimum: Minimum uploading bandwidth (kbps) to be considered effective.
        :param pulumi.Input[str] update_shaper: Set egress shaper based on the test result. Valid values: `disable`, `local`, `remote`, `both`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if ctrl_port is not None:
            pulumi.set(__self__, "ctrl_port", ctrl_port)
        if diffserv is not None:
            pulumi.set(__self__, "diffserv", diffserv)
        if dynamic_server is not None:
            pulumi.set(__self__, "dynamic_server", dynamic_server)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if server_port is not None:
            pulumi.set(__self__, "server_port", server_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_inbandwidth is not None:
            pulumi.set(__self__, "update_inbandwidth", update_inbandwidth)
        if update_inbandwidth_maximum is not None:
            pulumi.set(__self__, "update_inbandwidth_maximum", update_inbandwidth_maximum)
        if update_inbandwidth_minimum is not None:
            pulumi.set(__self__, "update_inbandwidth_minimum", update_inbandwidth_minimum)
        if update_outbandwidth is not None:
            pulumi.set(__self__, "update_outbandwidth", update_outbandwidth)
        if update_outbandwidth_maximum is not None:
            pulumi.set(__self__, "update_outbandwidth_maximum", update_outbandwidth_maximum)
        if update_outbandwidth_minimum is not None:
            pulumi.set(__self__, "update_outbandwidth_minimum", update_outbandwidth_minimum)
        if update_shaper is not None:
            pulumi.set(__self__, "update_shaper", update_shaper)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="ctrlPort")
    def ctrl_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the controller to get access token.
        """
        return pulumi.get(self, "ctrl_port")

    @ctrl_port.setter
    def ctrl_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ctrl_port", value)

    @property
    @pulumi.getter
    def diffserv(self) -> Optional[pulumi.Input[str]]:
        """
        DSCP used for speed test.
        """
        return pulumi.get(self, "diffserv")

    @diffserv.setter
    def diffserv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv", value)

    @property
    @pulumi.getter(name="dynamicServer")
    def dynamic_server(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic server option. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dynamic_server")

    @dynamic_server.setter
    def dynamic_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_server", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol Auto(default), TCP or UDP used for speed test. Valid values: `UDP`, `TCP`, `Auto`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SpeedtestscheduleScheduleArgs']]]]:
        """
        Schedules for the interface. The structure of `schedules` block is documented below.
        """
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SpeedtestscheduleScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Speed test server name.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the server to run speed test.
        """
        return pulumi.get(self, "server_port")

    @server_port.setter
    def server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "server_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scheduled speed test. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updateInbandwidth")
    def update_inbandwidth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bypassing interface's inbound bandwidth setting. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "update_inbandwidth")

    @update_inbandwidth.setter
    def update_inbandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_inbandwidth", value)

    @property
    @pulumi.getter(name="updateInbandwidthMaximum")
    def update_inbandwidth_maximum(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum downloading bandwidth (kbps) to be used in a speed test.
        """
        return pulumi.get(self, "update_inbandwidth_maximum")

    @update_inbandwidth_maximum.setter
    def update_inbandwidth_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_inbandwidth_maximum", value)

    @property
    @pulumi.getter(name="updateInbandwidthMinimum")
    def update_inbandwidth_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum downloading bandwidth (kbps) to be considered effective.
        """
        return pulumi.get(self, "update_inbandwidth_minimum")

    @update_inbandwidth_minimum.setter
    def update_inbandwidth_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_inbandwidth_minimum", value)

    @property
    @pulumi.getter(name="updateOutbandwidth")
    def update_outbandwidth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bypassing interface's outbound bandwidth setting. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "update_outbandwidth")

    @update_outbandwidth.setter
    def update_outbandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_outbandwidth", value)

    @property
    @pulumi.getter(name="updateOutbandwidthMaximum")
    def update_outbandwidth_maximum(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum uploading bandwidth (kbps) to be used in a speed test.
        """
        return pulumi.get(self, "update_outbandwidth_maximum")

    @update_outbandwidth_maximum.setter
    def update_outbandwidth_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_outbandwidth_maximum", value)

    @property
    @pulumi.getter(name="updateOutbandwidthMinimum")
    def update_outbandwidth_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum uploading bandwidth (kbps) to be considered effective.
        """
        return pulumi.get(self, "update_outbandwidth_minimum")

    @update_outbandwidth_minimum.setter
    def update_outbandwidth_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_outbandwidth_minimum", value)

    @property
    @pulumi.getter(name="updateShaper")
    def update_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Set egress shaper based on the test result. Valid values: `disable`, `local`, `remote`, `both`.
        """
        return pulumi.get(self, "update_shaper")

    @update_shaper.setter
    def update_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_shaper", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SpeedtestscheduleState:
    def __init__(__self__, *,
                 ctrl_port: Optional[pulumi.Input[int]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 dynamic_server: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['SpeedtestscheduleScheduleArgs']]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 server_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_inbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth: Optional[pulumi.Input[str]] = None,
                 update_outbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 update_shaper: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Speedtestschedule resources.
        :param pulumi.Input[int] ctrl_port: Port of the controller to get access token.
        :param pulumi.Input[str] diffserv: DSCP used for speed test.
        :param pulumi.Input[str] dynamic_server: Enable/disable dynamic server option. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] mode: Protocol Auto(default), TCP or UDP used for speed test. Valid values: `UDP`, `TCP`, `Auto`.
        :param pulumi.Input[Sequence[pulumi.Input['SpeedtestscheduleScheduleArgs']]] schedules: Schedules for the interface. The structure of `schedules` block is documented below.
        :param pulumi.Input[str] server_name: Speed test server name.
        :param pulumi.Input[int] server_port: Port of the server to run speed test.
        :param pulumi.Input[str] status: Enable/disable scheduled speed test. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] update_inbandwidth: Enable/disable bypassing interface's inbound bandwidth setting. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] update_inbandwidth_maximum: Maximum downloading bandwidth (kbps) to be used in a speed test.
        :param pulumi.Input[int] update_inbandwidth_minimum: Minimum downloading bandwidth (kbps) to be considered effective.
        :param pulumi.Input[str] update_outbandwidth: Enable/disable bypassing interface's outbound bandwidth setting. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] update_outbandwidth_maximum: Maximum uploading bandwidth (kbps) to be used in a speed test.
        :param pulumi.Input[int] update_outbandwidth_minimum: Minimum uploading bandwidth (kbps) to be considered effective.
        :param pulumi.Input[str] update_shaper: Set egress shaper based on the test result. Valid values: `disable`, `local`, `remote`, `both`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if ctrl_port is not None:
            pulumi.set(__self__, "ctrl_port", ctrl_port)
        if diffserv is not None:
            pulumi.set(__self__, "diffserv", diffserv)
        if dynamic_server is not None:
            pulumi.set(__self__, "dynamic_server", dynamic_server)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if server_port is not None:
            pulumi.set(__self__, "server_port", server_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_inbandwidth is not None:
            pulumi.set(__self__, "update_inbandwidth", update_inbandwidth)
        if update_inbandwidth_maximum is not None:
            pulumi.set(__self__, "update_inbandwidth_maximum", update_inbandwidth_maximum)
        if update_inbandwidth_minimum is not None:
            pulumi.set(__self__, "update_inbandwidth_minimum", update_inbandwidth_minimum)
        if update_outbandwidth is not None:
            pulumi.set(__self__, "update_outbandwidth", update_outbandwidth)
        if update_outbandwidth_maximum is not None:
            pulumi.set(__self__, "update_outbandwidth_maximum", update_outbandwidth_maximum)
        if update_outbandwidth_minimum is not None:
            pulumi.set(__self__, "update_outbandwidth_minimum", update_outbandwidth_minimum)
        if update_shaper is not None:
            pulumi.set(__self__, "update_shaper", update_shaper)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="ctrlPort")
    def ctrl_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the controller to get access token.
        """
        return pulumi.get(self, "ctrl_port")

    @ctrl_port.setter
    def ctrl_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ctrl_port", value)

    @property
    @pulumi.getter
    def diffserv(self) -> Optional[pulumi.Input[str]]:
        """
        DSCP used for speed test.
        """
        return pulumi.get(self, "diffserv")

    @diffserv.setter
    def diffserv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv", value)

    @property
    @pulumi.getter(name="dynamicServer")
    def dynamic_server(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic server option. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dynamic_server")

    @dynamic_server.setter
    def dynamic_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_server", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol Auto(default), TCP or UDP used for speed test. Valid values: `UDP`, `TCP`, `Auto`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SpeedtestscheduleScheduleArgs']]]]:
        """
        Schedules for the interface. The structure of `schedules` block is documented below.
        """
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SpeedtestscheduleScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Speed test server name.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the server to run speed test.
        """
        return pulumi.get(self, "server_port")

    @server_port.setter
    def server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "server_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scheduled speed test. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updateInbandwidth")
    def update_inbandwidth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bypassing interface's inbound bandwidth setting. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "update_inbandwidth")

    @update_inbandwidth.setter
    def update_inbandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_inbandwidth", value)

    @property
    @pulumi.getter(name="updateInbandwidthMaximum")
    def update_inbandwidth_maximum(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum downloading bandwidth (kbps) to be used in a speed test.
        """
        return pulumi.get(self, "update_inbandwidth_maximum")

    @update_inbandwidth_maximum.setter
    def update_inbandwidth_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_inbandwidth_maximum", value)

    @property
    @pulumi.getter(name="updateInbandwidthMinimum")
    def update_inbandwidth_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum downloading bandwidth (kbps) to be considered effective.
        """
        return pulumi.get(self, "update_inbandwidth_minimum")

    @update_inbandwidth_minimum.setter
    def update_inbandwidth_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_inbandwidth_minimum", value)

    @property
    @pulumi.getter(name="updateOutbandwidth")
    def update_outbandwidth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bypassing interface's outbound bandwidth setting. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "update_outbandwidth")

    @update_outbandwidth.setter
    def update_outbandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_outbandwidth", value)

    @property
    @pulumi.getter(name="updateOutbandwidthMaximum")
    def update_outbandwidth_maximum(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum uploading bandwidth (kbps) to be used in a speed test.
        """
        return pulumi.get(self, "update_outbandwidth_maximum")

    @update_outbandwidth_maximum.setter
    def update_outbandwidth_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_outbandwidth_maximum", value)

    @property
    @pulumi.getter(name="updateOutbandwidthMinimum")
    def update_outbandwidth_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum uploading bandwidth (kbps) to be considered effective.
        """
        return pulumi.get(self, "update_outbandwidth_minimum")

    @update_outbandwidth_minimum.setter
    def update_outbandwidth_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_outbandwidth_minimum", value)

    @property
    @pulumi.getter(name="updateShaper")
    def update_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Set egress shaper based on the test result. Valid values: `disable`, `local`, `remote`, `both`.
        """
        return pulumi.get(self, "update_shaper")

    @update_shaper.setter
    def update_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_shaper", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Speedtestschedule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ctrl_port: Optional[pulumi.Input[int]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 dynamic_server: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SpeedtestscheduleScheduleArgs']]]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 server_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_inbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth: Optional[pulumi.Input[str]] = None,
                 update_outbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 update_shaper: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Speed test schedule for each interface. Applies to FortiOS Version `>= 7.0.0`.

        ## Import

        System SpeedTestSchedule can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/speedtestschedule:Speedtestschedule labelname {{interface}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/speedtestschedule:Speedtestschedule labelname {{interface}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ctrl_port: Port of the controller to get access token.
        :param pulumi.Input[str] diffserv: DSCP used for speed test.
        :param pulumi.Input[str] dynamic_server: Enable/disable dynamic server option. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] mode: Protocol Auto(default), TCP or UDP used for speed test. Valid values: `UDP`, `TCP`, `Auto`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SpeedtestscheduleScheduleArgs']]]] schedules: Schedules for the interface. The structure of `schedules` block is documented below.
        :param pulumi.Input[str] server_name: Speed test server name.
        :param pulumi.Input[int] server_port: Port of the server to run speed test.
        :param pulumi.Input[str] status: Enable/disable scheduled speed test. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] update_inbandwidth: Enable/disable bypassing interface's inbound bandwidth setting. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] update_inbandwidth_maximum: Maximum downloading bandwidth (kbps) to be used in a speed test.
        :param pulumi.Input[int] update_inbandwidth_minimum: Minimum downloading bandwidth (kbps) to be considered effective.
        :param pulumi.Input[str] update_outbandwidth: Enable/disable bypassing interface's outbound bandwidth setting. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] update_outbandwidth_maximum: Maximum uploading bandwidth (kbps) to be used in a speed test.
        :param pulumi.Input[int] update_outbandwidth_minimum: Minimum uploading bandwidth (kbps) to be considered effective.
        :param pulumi.Input[str] update_shaper: Set egress shaper based on the test result. Valid values: `disable`, `local`, `remote`, `both`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SpeedtestscheduleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Speed test schedule for each interface. Applies to FortiOS Version `>= 7.0.0`.

        ## Import

        System SpeedTestSchedule can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/speedtestschedule:Speedtestschedule labelname {{interface}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/speedtestschedule:Speedtestschedule labelname {{interface}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SpeedtestscheduleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SpeedtestscheduleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ctrl_port: Optional[pulumi.Input[int]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 dynamic_server: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SpeedtestscheduleScheduleArgs']]]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 server_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth: Optional[pulumi.Input[str]] = None,
                 update_inbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_inbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth: Optional[pulumi.Input[str]] = None,
                 update_outbandwidth_maximum: Optional[pulumi.Input[int]] = None,
                 update_outbandwidth_minimum: Optional[pulumi.Input[int]] = None,
                 update_shaper: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SpeedtestscheduleArgs.__new__(SpeedtestscheduleArgs)

            __props__.__dict__["ctrl_port"] = ctrl_port
            __props__.__dict__["diffserv"] = diffserv
            __props__.__dict__["dynamic_server"] = dynamic_server
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["interface"] = interface
            __props__.__dict__["mode"] = mode
            __props__.__dict__["schedules"] = schedules
            __props__.__dict__["server_name"] = server_name
            __props__.__dict__["server_port"] = server_port
            __props__.__dict__["status"] = status
            __props__.__dict__["update_inbandwidth"] = update_inbandwidth
            __props__.__dict__["update_inbandwidth_maximum"] = update_inbandwidth_maximum
            __props__.__dict__["update_inbandwidth_minimum"] = update_inbandwidth_minimum
            __props__.__dict__["update_outbandwidth"] = update_outbandwidth
            __props__.__dict__["update_outbandwidth_maximum"] = update_outbandwidth_maximum
            __props__.__dict__["update_outbandwidth_minimum"] = update_outbandwidth_minimum
            __props__.__dict__["update_shaper"] = update_shaper
            __props__.__dict__["vdomparam"] = vdomparam
        super(Speedtestschedule, __self__).__init__(
            'fortios:system/speedtestschedule:Speedtestschedule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ctrl_port: Optional[pulumi.Input[int]] = None,
            diffserv: Optional[pulumi.Input[str]] = None,
            dynamic_server: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SpeedtestscheduleScheduleArgs']]]]] = None,
            server_name: Optional[pulumi.Input[str]] = None,
            server_port: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            update_inbandwidth: Optional[pulumi.Input[str]] = None,
            update_inbandwidth_maximum: Optional[pulumi.Input[int]] = None,
            update_inbandwidth_minimum: Optional[pulumi.Input[int]] = None,
            update_outbandwidth: Optional[pulumi.Input[str]] = None,
            update_outbandwidth_maximum: Optional[pulumi.Input[int]] = None,
            update_outbandwidth_minimum: Optional[pulumi.Input[int]] = None,
            update_shaper: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Speedtestschedule':
        """
        Get an existing Speedtestschedule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ctrl_port: Port of the controller to get access token.
        :param pulumi.Input[str] diffserv: DSCP used for speed test.
        :param pulumi.Input[str] dynamic_server: Enable/disable dynamic server option. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] mode: Protocol Auto(default), TCP or UDP used for speed test. Valid values: `UDP`, `TCP`, `Auto`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SpeedtestscheduleScheduleArgs']]]] schedules: Schedules for the interface. The structure of `schedules` block is documented below.
        :param pulumi.Input[str] server_name: Speed test server name.
        :param pulumi.Input[int] server_port: Port of the server to run speed test.
        :param pulumi.Input[str] status: Enable/disable scheduled speed test. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] update_inbandwidth: Enable/disable bypassing interface's inbound bandwidth setting. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] update_inbandwidth_maximum: Maximum downloading bandwidth (kbps) to be used in a speed test.
        :param pulumi.Input[int] update_inbandwidth_minimum: Minimum downloading bandwidth (kbps) to be considered effective.
        :param pulumi.Input[str] update_outbandwidth: Enable/disable bypassing interface's outbound bandwidth setting. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] update_outbandwidth_maximum: Maximum uploading bandwidth (kbps) to be used in a speed test.
        :param pulumi.Input[int] update_outbandwidth_minimum: Minimum uploading bandwidth (kbps) to be considered effective.
        :param pulumi.Input[str] update_shaper: Set egress shaper based on the test result. Valid values: `disable`, `local`, `remote`, `both`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SpeedtestscheduleState.__new__(_SpeedtestscheduleState)

        __props__.__dict__["ctrl_port"] = ctrl_port
        __props__.__dict__["diffserv"] = diffserv
        __props__.__dict__["dynamic_server"] = dynamic_server
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interface"] = interface
        __props__.__dict__["mode"] = mode
        __props__.__dict__["schedules"] = schedules
        __props__.__dict__["server_name"] = server_name
        __props__.__dict__["server_port"] = server_port
        __props__.__dict__["status"] = status
        __props__.__dict__["update_inbandwidth"] = update_inbandwidth
        __props__.__dict__["update_inbandwidth_maximum"] = update_inbandwidth_maximum
        __props__.__dict__["update_inbandwidth_minimum"] = update_inbandwidth_minimum
        __props__.__dict__["update_outbandwidth"] = update_outbandwidth
        __props__.__dict__["update_outbandwidth_maximum"] = update_outbandwidth_maximum
        __props__.__dict__["update_outbandwidth_minimum"] = update_outbandwidth_minimum
        __props__.__dict__["update_shaper"] = update_shaper
        __props__.__dict__["vdomparam"] = vdomparam
        return Speedtestschedule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="ctrlPort")
    def ctrl_port(self) -> pulumi.Output[int]:
        """
        Port of the controller to get access token.
        """
        return pulumi.get(self, "ctrl_port")

    @property
    @pulumi.getter
    def diffserv(self) -> pulumi.Output[str]:
        """
        DSCP used for speed test.
        """
        return pulumi.get(self, "diffserv")

    @property
    @pulumi.getter(name="dynamicServer")
    def dynamic_server(self) -> pulumi.Output[str]:
        """
        Enable/disable dynamic server option. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dynamic_server")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        Protocol Auto(default), TCP or UDP used for speed test. Valid values: `UDP`, `TCP`, `Auto`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def schedules(self) -> pulumi.Output[Optional[Sequence['outputs.SpeedtestscheduleSchedule']]]:
        """
        Schedules for the interface. The structure of `schedules` block is documented below.
        """
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> pulumi.Output[str]:
        """
        Speed test server name.
        """
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> pulumi.Output[int]:
        """
        Port of the server to run speed test.
        """
        return pulumi.get(self, "server_port")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable scheduled speed test. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateInbandwidth")
    def update_inbandwidth(self) -> pulumi.Output[str]:
        """
        Enable/disable bypassing interface's inbound bandwidth setting. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "update_inbandwidth")

    @property
    @pulumi.getter(name="updateInbandwidthMaximum")
    def update_inbandwidth_maximum(self) -> pulumi.Output[int]:
        """
        Maximum downloading bandwidth (kbps) to be used in a speed test.
        """
        return pulumi.get(self, "update_inbandwidth_maximum")

    @property
    @pulumi.getter(name="updateInbandwidthMinimum")
    def update_inbandwidth_minimum(self) -> pulumi.Output[int]:
        """
        Minimum downloading bandwidth (kbps) to be considered effective.
        """
        return pulumi.get(self, "update_inbandwidth_minimum")

    @property
    @pulumi.getter(name="updateOutbandwidth")
    def update_outbandwidth(self) -> pulumi.Output[str]:
        """
        Enable/disable bypassing interface's outbound bandwidth setting. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "update_outbandwidth")

    @property
    @pulumi.getter(name="updateOutbandwidthMaximum")
    def update_outbandwidth_maximum(self) -> pulumi.Output[int]:
        """
        Maximum uploading bandwidth (kbps) to be used in a speed test.
        """
        return pulumi.get(self, "update_outbandwidth_maximum")

    @property
    @pulumi.getter(name="updateOutbandwidthMinimum")
    def update_outbandwidth_minimum(self) -> pulumi.Output[int]:
        """
        Minimum uploading bandwidth (kbps) to be considered effective.
        """
        return pulumi.get(self, "update_outbandwidth_minimum")

    @property
    @pulumi.getter(name="updateShaper")
    def update_shaper(self) -> pulumi.Output[str]:
        """
        Set egress shaper based on the test result. Valid values: `disable`, `local`, `remote`, `both`.
        """
        return pulumi.get(self, "update_shaper")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

