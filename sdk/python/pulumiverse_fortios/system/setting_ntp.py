# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SettingNtpArgs', 'SettingNtp']

@pulumi.input_type
class SettingNtpArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ntpsync: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SettingNtp resource.
        :param pulumi.Input[str] type: Use the FortiGuard NTP server or any other available NTP Server.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntpservers: Configure the FortiGate to connect to any available third-party NTP server.
        :param pulumi.Input[str] ntpsync: Enable/disable setting the FortiGate system time by synchronizing with an NTP Server.
        """
        pulumi.set(__self__, "type", type)
        if ntpservers is not None:
            pulumi.set(__self__, "ntpservers", ntpservers)
        if ntpsync is not None:
            pulumi.set(__self__, "ntpsync", ntpsync)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Use the FortiGuard NTP server or any other available NTP Server.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def ntpservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Configure the FortiGate to connect to any available third-party NTP server.
        """
        return pulumi.get(self, "ntpservers")

    @ntpservers.setter
    def ntpservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntpservers", value)

    @property
    @pulumi.getter
    def ntpsync(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting the FortiGate system time by synchronizing with an NTP Server.
        """
        return pulumi.get(self, "ntpsync")

    @ntpsync.setter
    def ntpsync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntpsync", value)


@pulumi.input_type
class _SettingNtpState:
    def __init__(__self__, *,
                 ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ntpsync: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SettingNtp resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntpservers: Configure the FortiGate to connect to any available third-party NTP server.
        :param pulumi.Input[str] ntpsync: Enable/disable setting the FortiGate system time by synchronizing with an NTP Server.
        :param pulumi.Input[str] type: Use the FortiGuard NTP server or any other available NTP Server.
        """
        if ntpservers is not None:
            pulumi.set(__self__, "ntpservers", ntpservers)
        if ntpsync is not None:
            pulumi.set(__self__, "ntpsync", ntpsync)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ntpservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Configure the FortiGate to connect to any available third-party NTP server.
        """
        return pulumi.get(self, "ntpservers")

    @ntpservers.setter
    def ntpservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntpservers", value)

    @property
    @pulumi.getter
    def ntpsync(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting the FortiGate system time by synchronizing with an NTP Server.
        """
        return pulumi.get(self, "ntpsync")

    @ntpsync.setter
    def ntpsync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntpsync", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Use the FortiGuard NTP server or any other available NTP Server.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class SettingNtp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ntpsync: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to configure Network Time Protocol (NTP) servers of FortiOS.

        !> **Warning:** The resource will be deprecated and replaced by new resource `system.Ntp`, we recommend that you use the new resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test2 = fortios.system.SettingNtp("test2",
            ntpservers=[
                "1.1.1.1",
                "3.3.3.3",
            ],
            ntpsync="disable",
            type="custom")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntpservers: Configure the FortiGate to connect to any available third-party NTP server.
        :param pulumi.Input[str] ntpsync: Enable/disable setting the FortiGate system time by synchronizing with an NTP Server.
        :param pulumi.Input[str] type: Use the FortiGuard NTP server or any other available NTP Server.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SettingNtpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to configure Network Time Protocol (NTP) servers of FortiOS.

        !> **Warning:** The resource will be deprecated and replaced by new resource `system.Ntp`, we recommend that you use the new resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test2 = fortios.system.SettingNtp("test2",
            ntpservers=[
                "1.1.1.1",
                "3.3.3.3",
            ],
            ntpsync="disable",
            type="custom")
        ```

        :param str resource_name: The name of the resource.
        :param SettingNtpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingNtpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ntpsync: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingNtpArgs.__new__(SettingNtpArgs)

            __props__.__dict__["ntpservers"] = ntpservers
            __props__.__dict__["ntpsync"] = ntpsync
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(SettingNtp, __self__).__init__(
            'fortios:system/settingNtp:SettingNtp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ntpservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ntpsync: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'SettingNtp':
        """
        Get an existing SettingNtp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntpservers: Configure the FortiGate to connect to any available third-party NTP server.
        :param pulumi.Input[str] ntpsync: Enable/disable setting the FortiGate system time by synchronizing with an NTP Server.
        :param pulumi.Input[str] type: Use the FortiGuard NTP server or any other available NTP Server.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingNtpState.__new__(_SettingNtpState)

        __props__.__dict__["ntpservers"] = ntpservers
        __props__.__dict__["ntpsync"] = ntpsync
        __props__.__dict__["type"] = type
        return SettingNtp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ntpservers(self) -> pulumi.Output[Sequence[str]]:
        """
        Configure the FortiGate to connect to any available third-party NTP server.
        """
        return pulumi.get(self, "ntpservers")

    @property
    @pulumi.getter
    def ntpsync(self) -> pulumi.Output[str]:
        """
        Enable/disable setting the FortiGate system time by synchronizing with an NTP Server.
        """
        return pulumi.get(self, "ntpsync")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Use the FortiGuard NTP server or any other available NTP Server.
        """
        return pulumi.get(self, "type")

