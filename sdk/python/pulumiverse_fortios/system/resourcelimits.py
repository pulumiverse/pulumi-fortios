# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ResourcelimitsArgs', 'Resourcelimits']

@pulumi.input_type
class ResourcelimitsArgs:
    def __init__(__self__, *,
                 custom_service: Optional[pulumi.Input[int]] = None,
                 dialup_tunnel: Optional[pulumi.Input[int]] = None,
                 firewall_address: Optional[pulumi.Input[int]] = None,
                 firewall_addrgrp: Optional[pulumi.Input[int]] = None,
                 firewall_policy: Optional[pulumi.Input[int]] = None,
                 ipsec_phase1: Optional[pulumi.Input[int]] = None,
                 ipsec_phase1_interface: Optional[pulumi.Input[int]] = None,
                 ipsec_phase2: Optional[pulumi.Input[int]] = None,
                 ipsec_phase2_interface: Optional[pulumi.Input[int]] = None,
                 log_disk_quota: Optional[pulumi.Input[int]] = None,
                 onetime_schedule: Optional[pulumi.Input[int]] = None,
                 proxy: Optional[pulumi.Input[int]] = None,
                 recurring_schedule: Optional[pulumi.Input[int]] = None,
                 service_group: Optional[pulumi.Input[int]] = None,
                 session: Optional[pulumi.Input[int]] = None,
                 sslvpn: Optional[pulumi.Input[int]] = None,
                 user: Optional[pulumi.Input[int]] = None,
                 user_group: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Resourcelimits resource.
        :param pulumi.Input[int] custom_service: Maximum number of firewall custom services.
        :param pulumi.Input[int] dialup_tunnel: Maximum number of dial-up tunnels.
        :param pulumi.Input[int] firewall_address: Maximum number of firewall addresses (IPv4, IPv6, multicast).
        :param pulumi.Input[int] firewall_addrgrp: Maximum number of firewall address groups (IPv4, IPv6).
        :param pulumi.Input[int] firewall_policy: Maximum number of firewall policies (policy, DoS-policy4, DoS-policy6, multicast).
        :param pulumi.Input[int] ipsec_phase1: Maximum number of VPN IPsec phase1 tunnels.
        :param pulumi.Input[int] ipsec_phase1_interface: Maximum number of VPN IPsec phase1 interface tunnels.
        :param pulumi.Input[int] ipsec_phase2: Maximum number of VPN IPsec phase2 tunnels.
        :param pulumi.Input[int] ipsec_phase2_interface: Maximum number of VPN IPsec phase2 interface tunnels.
        :param pulumi.Input[int] log_disk_quota: Log disk quota in megabytes (MB).
        :param pulumi.Input[int] onetime_schedule: Maximum number of firewall one-time schedules.
        :param pulumi.Input[int] proxy: Maximum number of concurrent proxy users.
        :param pulumi.Input[int] recurring_schedule: Maximum number of firewall recurring schedules.
        :param pulumi.Input[int] service_group: Maximum number of firewall service groups.
        :param pulumi.Input[int] session: Maximum number of sessions.
        :param pulumi.Input[int] sslvpn: Maximum number of SSL-VPN.
        :param pulumi.Input[int] user: Maximum number of local users.
        :param pulumi.Input[int] user_group: Maximum number of user groups.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if custom_service is not None:
            pulumi.set(__self__, "custom_service", custom_service)
        if dialup_tunnel is not None:
            pulumi.set(__self__, "dialup_tunnel", dialup_tunnel)
        if firewall_address is not None:
            pulumi.set(__self__, "firewall_address", firewall_address)
        if firewall_addrgrp is not None:
            pulumi.set(__self__, "firewall_addrgrp", firewall_addrgrp)
        if firewall_policy is not None:
            pulumi.set(__self__, "firewall_policy", firewall_policy)
        if ipsec_phase1 is not None:
            pulumi.set(__self__, "ipsec_phase1", ipsec_phase1)
        if ipsec_phase1_interface is not None:
            pulumi.set(__self__, "ipsec_phase1_interface", ipsec_phase1_interface)
        if ipsec_phase2 is not None:
            pulumi.set(__self__, "ipsec_phase2", ipsec_phase2)
        if ipsec_phase2_interface is not None:
            pulumi.set(__self__, "ipsec_phase2_interface", ipsec_phase2_interface)
        if log_disk_quota is not None:
            pulumi.set(__self__, "log_disk_quota", log_disk_quota)
        if onetime_schedule is not None:
            pulumi.set(__self__, "onetime_schedule", onetime_schedule)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if recurring_schedule is not None:
            pulumi.set(__self__, "recurring_schedule", recurring_schedule)
        if service_group is not None:
            pulumi.set(__self__, "service_group", service_group)
        if session is not None:
            pulumi.set(__self__, "session", session)
        if sslvpn is not None:
            pulumi.set(__self__, "sslvpn", sslvpn)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="customService")
    def custom_service(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of firewall custom services.
        """
        return pulumi.get(self, "custom_service")

    @custom_service.setter
    def custom_service(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_service", value)

    @property
    @pulumi.getter(name="dialupTunnel")
    def dialup_tunnel(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of dial-up tunnels.
        """
        return pulumi.get(self, "dialup_tunnel")

    @dialup_tunnel.setter
    def dialup_tunnel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dialup_tunnel", value)

    @property
    @pulumi.getter(name="firewallAddress")
    def firewall_address(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of firewall addresses (IPv4, IPv6, multicast).
        """
        return pulumi.get(self, "firewall_address")

    @firewall_address.setter
    def firewall_address(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "firewall_address", value)

    @property
    @pulumi.getter(name="firewallAddrgrp")
    def firewall_addrgrp(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of firewall address groups (IPv4, IPv6).
        """
        return pulumi.get(self, "firewall_addrgrp")

    @firewall_addrgrp.setter
    def firewall_addrgrp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "firewall_addrgrp", value)

    @property
    @pulumi.getter(name="firewallPolicy")
    def firewall_policy(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of firewall policies (policy, DoS-policy4, DoS-policy6, multicast).
        """
        return pulumi.get(self, "firewall_policy")

    @firewall_policy.setter
    def firewall_policy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "firewall_policy", value)

    @property
    @pulumi.getter(name="ipsecPhase1")
    def ipsec_phase1(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of VPN IPsec phase1 tunnels.
        """
        return pulumi.get(self, "ipsec_phase1")

    @ipsec_phase1.setter
    def ipsec_phase1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_phase1", value)

    @property
    @pulumi.getter(name="ipsecPhase1Interface")
    def ipsec_phase1_interface(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of VPN IPsec phase1 interface tunnels.
        """
        return pulumi.get(self, "ipsec_phase1_interface")

    @ipsec_phase1_interface.setter
    def ipsec_phase1_interface(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_phase1_interface", value)

    @property
    @pulumi.getter(name="ipsecPhase2")
    def ipsec_phase2(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of VPN IPsec phase2 tunnels.
        """
        return pulumi.get(self, "ipsec_phase2")

    @ipsec_phase2.setter
    def ipsec_phase2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_phase2", value)

    @property
    @pulumi.getter(name="ipsecPhase2Interface")
    def ipsec_phase2_interface(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of VPN IPsec phase2 interface tunnels.
        """
        return pulumi.get(self, "ipsec_phase2_interface")

    @ipsec_phase2_interface.setter
    def ipsec_phase2_interface(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_phase2_interface", value)

    @property
    @pulumi.getter(name="logDiskQuota")
    def log_disk_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Log disk quota in megabytes (MB).
        """
        return pulumi.get(self, "log_disk_quota")

    @log_disk_quota.setter
    def log_disk_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_disk_quota", value)

    @property
    @pulumi.getter(name="onetimeSchedule")
    def onetime_schedule(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of firewall one-time schedules.
        """
        return pulumi.get(self, "onetime_schedule")

    @onetime_schedule.setter
    def onetime_schedule(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "onetime_schedule", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of concurrent proxy users.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="recurringSchedule")
    def recurring_schedule(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of firewall recurring schedules.
        """
        return pulumi.get(self, "recurring_schedule")

    @recurring_schedule.setter
    def recurring_schedule(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recurring_schedule", value)

    @property
    @pulumi.getter(name="serviceGroup")
    def service_group(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of firewall service groups.
        """
        return pulumi.get(self, "service_group")

    @service_group.setter
    def service_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "service_group", value)

    @property
    @pulumi.getter
    def session(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of sessions.
        """
        return pulumi.get(self, "session")

    @session.setter
    def session(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session", value)

    @property
    @pulumi.getter
    def sslvpn(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of SSL-VPN.
        """
        return pulumi.get(self, "sslvpn")

    @sslvpn.setter
    def sslvpn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sslvpn", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of local users.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of user groups.
        """
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_group", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ResourcelimitsState:
    def __init__(__self__, *,
                 custom_service: Optional[pulumi.Input[int]] = None,
                 dialup_tunnel: Optional[pulumi.Input[int]] = None,
                 firewall_address: Optional[pulumi.Input[int]] = None,
                 firewall_addrgrp: Optional[pulumi.Input[int]] = None,
                 firewall_policy: Optional[pulumi.Input[int]] = None,
                 ipsec_phase1: Optional[pulumi.Input[int]] = None,
                 ipsec_phase1_interface: Optional[pulumi.Input[int]] = None,
                 ipsec_phase2: Optional[pulumi.Input[int]] = None,
                 ipsec_phase2_interface: Optional[pulumi.Input[int]] = None,
                 log_disk_quota: Optional[pulumi.Input[int]] = None,
                 onetime_schedule: Optional[pulumi.Input[int]] = None,
                 proxy: Optional[pulumi.Input[int]] = None,
                 recurring_schedule: Optional[pulumi.Input[int]] = None,
                 service_group: Optional[pulumi.Input[int]] = None,
                 session: Optional[pulumi.Input[int]] = None,
                 sslvpn: Optional[pulumi.Input[int]] = None,
                 user: Optional[pulumi.Input[int]] = None,
                 user_group: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Resourcelimits resources.
        :param pulumi.Input[int] custom_service: Maximum number of firewall custom services.
        :param pulumi.Input[int] dialup_tunnel: Maximum number of dial-up tunnels.
        :param pulumi.Input[int] firewall_address: Maximum number of firewall addresses (IPv4, IPv6, multicast).
        :param pulumi.Input[int] firewall_addrgrp: Maximum number of firewall address groups (IPv4, IPv6).
        :param pulumi.Input[int] firewall_policy: Maximum number of firewall policies (policy, DoS-policy4, DoS-policy6, multicast).
        :param pulumi.Input[int] ipsec_phase1: Maximum number of VPN IPsec phase1 tunnels.
        :param pulumi.Input[int] ipsec_phase1_interface: Maximum number of VPN IPsec phase1 interface tunnels.
        :param pulumi.Input[int] ipsec_phase2: Maximum number of VPN IPsec phase2 tunnels.
        :param pulumi.Input[int] ipsec_phase2_interface: Maximum number of VPN IPsec phase2 interface tunnels.
        :param pulumi.Input[int] log_disk_quota: Log disk quota in megabytes (MB).
        :param pulumi.Input[int] onetime_schedule: Maximum number of firewall one-time schedules.
        :param pulumi.Input[int] proxy: Maximum number of concurrent proxy users.
        :param pulumi.Input[int] recurring_schedule: Maximum number of firewall recurring schedules.
        :param pulumi.Input[int] service_group: Maximum number of firewall service groups.
        :param pulumi.Input[int] session: Maximum number of sessions.
        :param pulumi.Input[int] sslvpn: Maximum number of SSL-VPN.
        :param pulumi.Input[int] user: Maximum number of local users.
        :param pulumi.Input[int] user_group: Maximum number of user groups.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if custom_service is not None:
            pulumi.set(__self__, "custom_service", custom_service)
        if dialup_tunnel is not None:
            pulumi.set(__self__, "dialup_tunnel", dialup_tunnel)
        if firewall_address is not None:
            pulumi.set(__self__, "firewall_address", firewall_address)
        if firewall_addrgrp is not None:
            pulumi.set(__self__, "firewall_addrgrp", firewall_addrgrp)
        if firewall_policy is not None:
            pulumi.set(__self__, "firewall_policy", firewall_policy)
        if ipsec_phase1 is not None:
            pulumi.set(__self__, "ipsec_phase1", ipsec_phase1)
        if ipsec_phase1_interface is not None:
            pulumi.set(__self__, "ipsec_phase1_interface", ipsec_phase1_interface)
        if ipsec_phase2 is not None:
            pulumi.set(__self__, "ipsec_phase2", ipsec_phase2)
        if ipsec_phase2_interface is not None:
            pulumi.set(__self__, "ipsec_phase2_interface", ipsec_phase2_interface)
        if log_disk_quota is not None:
            pulumi.set(__self__, "log_disk_quota", log_disk_quota)
        if onetime_schedule is not None:
            pulumi.set(__self__, "onetime_schedule", onetime_schedule)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if recurring_schedule is not None:
            pulumi.set(__self__, "recurring_schedule", recurring_schedule)
        if service_group is not None:
            pulumi.set(__self__, "service_group", service_group)
        if session is not None:
            pulumi.set(__self__, "session", session)
        if sslvpn is not None:
            pulumi.set(__self__, "sslvpn", sslvpn)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="customService")
    def custom_service(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of firewall custom services.
        """
        return pulumi.get(self, "custom_service")

    @custom_service.setter
    def custom_service(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_service", value)

    @property
    @pulumi.getter(name="dialupTunnel")
    def dialup_tunnel(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of dial-up tunnels.
        """
        return pulumi.get(self, "dialup_tunnel")

    @dialup_tunnel.setter
    def dialup_tunnel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dialup_tunnel", value)

    @property
    @pulumi.getter(name="firewallAddress")
    def firewall_address(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of firewall addresses (IPv4, IPv6, multicast).
        """
        return pulumi.get(self, "firewall_address")

    @firewall_address.setter
    def firewall_address(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "firewall_address", value)

    @property
    @pulumi.getter(name="firewallAddrgrp")
    def firewall_addrgrp(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of firewall address groups (IPv4, IPv6).
        """
        return pulumi.get(self, "firewall_addrgrp")

    @firewall_addrgrp.setter
    def firewall_addrgrp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "firewall_addrgrp", value)

    @property
    @pulumi.getter(name="firewallPolicy")
    def firewall_policy(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of firewall policies (policy, DoS-policy4, DoS-policy6, multicast).
        """
        return pulumi.get(self, "firewall_policy")

    @firewall_policy.setter
    def firewall_policy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "firewall_policy", value)

    @property
    @pulumi.getter(name="ipsecPhase1")
    def ipsec_phase1(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of VPN IPsec phase1 tunnels.
        """
        return pulumi.get(self, "ipsec_phase1")

    @ipsec_phase1.setter
    def ipsec_phase1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_phase1", value)

    @property
    @pulumi.getter(name="ipsecPhase1Interface")
    def ipsec_phase1_interface(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of VPN IPsec phase1 interface tunnels.
        """
        return pulumi.get(self, "ipsec_phase1_interface")

    @ipsec_phase1_interface.setter
    def ipsec_phase1_interface(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_phase1_interface", value)

    @property
    @pulumi.getter(name="ipsecPhase2")
    def ipsec_phase2(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of VPN IPsec phase2 tunnels.
        """
        return pulumi.get(self, "ipsec_phase2")

    @ipsec_phase2.setter
    def ipsec_phase2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_phase2", value)

    @property
    @pulumi.getter(name="ipsecPhase2Interface")
    def ipsec_phase2_interface(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of VPN IPsec phase2 interface tunnels.
        """
        return pulumi.get(self, "ipsec_phase2_interface")

    @ipsec_phase2_interface.setter
    def ipsec_phase2_interface(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_phase2_interface", value)

    @property
    @pulumi.getter(name="logDiskQuota")
    def log_disk_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Log disk quota in megabytes (MB).
        """
        return pulumi.get(self, "log_disk_quota")

    @log_disk_quota.setter
    def log_disk_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_disk_quota", value)

    @property
    @pulumi.getter(name="onetimeSchedule")
    def onetime_schedule(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of firewall one-time schedules.
        """
        return pulumi.get(self, "onetime_schedule")

    @onetime_schedule.setter
    def onetime_schedule(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "onetime_schedule", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of concurrent proxy users.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="recurringSchedule")
    def recurring_schedule(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of firewall recurring schedules.
        """
        return pulumi.get(self, "recurring_schedule")

    @recurring_schedule.setter
    def recurring_schedule(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recurring_schedule", value)

    @property
    @pulumi.getter(name="serviceGroup")
    def service_group(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of firewall service groups.
        """
        return pulumi.get(self, "service_group")

    @service_group.setter
    def service_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "service_group", value)

    @property
    @pulumi.getter
    def session(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of sessions.
        """
        return pulumi.get(self, "session")

    @session.setter
    def session(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session", value)

    @property
    @pulumi.getter
    def sslvpn(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of SSL-VPN.
        """
        return pulumi.get(self, "sslvpn")

    @sslvpn.setter
    def sslvpn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sslvpn", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of local users.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of user groups.
        """
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_group", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Resourcelimits(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_service: Optional[pulumi.Input[int]] = None,
                 dialup_tunnel: Optional[pulumi.Input[int]] = None,
                 firewall_address: Optional[pulumi.Input[int]] = None,
                 firewall_addrgrp: Optional[pulumi.Input[int]] = None,
                 firewall_policy: Optional[pulumi.Input[int]] = None,
                 ipsec_phase1: Optional[pulumi.Input[int]] = None,
                 ipsec_phase1_interface: Optional[pulumi.Input[int]] = None,
                 ipsec_phase2: Optional[pulumi.Input[int]] = None,
                 ipsec_phase2_interface: Optional[pulumi.Input[int]] = None,
                 log_disk_quota: Optional[pulumi.Input[int]] = None,
                 onetime_schedule: Optional[pulumi.Input[int]] = None,
                 proxy: Optional[pulumi.Input[int]] = None,
                 recurring_schedule: Optional[pulumi.Input[int]] = None,
                 service_group: Optional[pulumi.Input[int]] = None,
                 session: Optional[pulumi.Input[int]] = None,
                 sslvpn: Optional[pulumi.Input[int]] = None,
                 user: Optional[pulumi.Input[int]] = None,
                 user_group: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure resource limits.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Resourcelimits("trname",
            custom_service=0,
            dialup_tunnel=0,
            firewall_address=41024,
            firewall_addrgrp=10692,
            firewall_policy=41024,
            ipsec_phase1=2000,
            ipsec_phase1_interface=0,
            ipsec_phase2=2000,
            ipsec_phase2_interface=0,
            log_disk_quota=30235,
            onetime_schedule=0,
            proxy=64000,
            recurring_schedule=0,
            service_group=0,
            session=0,
            sslvpn=0,
            user=0,
            user_group=0)
        ```

        ## Import

        System ResourceLimits can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/resourcelimits:Resourcelimits labelname SystemResourceLimits
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/resourcelimits:Resourcelimits labelname SystemResourceLimits
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] custom_service: Maximum number of firewall custom services.
        :param pulumi.Input[int] dialup_tunnel: Maximum number of dial-up tunnels.
        :param pulumi.Input[int] firewall_address: Maximum number of firewall addresses (IPv4, IPv6, multicast).
        :param pulumi.Input[int] firewall_addrgrp: Maximum number of firewall address groups (IPv4, IPv6).
        :param pulumi.Input[int] firewall_policy: Maximum number of firewall policies (policy, DoS-policy4, DoS-policy6, multicast).
        :param pulumi.Input[int] ipsec_phase1: Maximum number of VPN IPsec phase1 tunnels.
        :param pulumi.Input[int] ipsec_phase1_interface: Maximum number of VPN IPsec phase1 interface tunnels.
        :param pulumi.Input[int] ipsec_phase2: Maximum number of VPN IPsec phase2 tunnels.
        :param pulumi.Input[int] ipsec_phase2_interface: Maximum number of VPN IPsec phase2 interface tunnels.
        :param pulumi.Input[int] log_disk_quota: Log disk quota in megabytes (MB).
        :param pulumi.Input[int] onetime_schedule: Maximum number of firewall one-time schedules.
        :param pulumi.Input[int] proxy: Maximum number of concurrent proxy users.
        :param pulumi.Input[int] recurring_schedule: Maximum number of firewall recurring schedules.
        :param pulumi.Input[int] service_group: Maximum number of firewall service groups.
        :param pulumi.Input[int] session: Maximum number of sessions.
        :param pulumi.Input[int] sslvpn: Maximum number of SSL-VPN.
        :param pulumi.Input[int] user: Maximum number of local users.
        :param pulumi.Input[int] user_group: Maximum number of user groups.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ResourcelimitsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure resource limits.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Resourcelimits("trname",
            custom_service=0,
            dialup_tunnel=0,
            firewall_address=41024,
            firewall_addrgrp=10692,
            firewall_policy=41024,
            ipsec_phase1=2000,
            ipsec_phase1_interface=0,
            ipsec_phase2=2000,
            ipsec_phase2_interface=0,
            log_disk_quota=30235,
            onetime_schedule=0,
            proxy=64000,
            recurring_schedule=0,
            service_group=0,
            session=0,
            sslvpn=0,
            user=0,
            user_group=0)
        ```

        ## Import

        System ResourceLimits can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/resourcelimits:Resourcelimits labelname SystemResourceLimits
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/resourcelimits:Resourcelimits labelname SystemResourceLimits
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ResourcelimitsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourcelimitsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_service: Optional[pulumi.Input[int]] = None,
                 dialup_tunnel: Optional[pulumi.Input[int]] = None,
                 firewall_address: Optional[pulumi.Input[int]] = None,
                 firewall_addrgrp: Optional[pulumi.Input[int]] = None,
                 firewall_policy: Optional[pulumi.Input[int]] = None,
                 ipsec_phase1: Optional[pulumi.Input[int]] = None,
                 ipsec_phase1_interface: Optional[pulumi.Input[int]] = None,
                 ipsec_phase2: Optional[pulumi.Input[int]] = None,
                 ipsec_phase2_interface: Optional[pulumi.Input[int]] = None,
                 log_disk_quota: Optional[pulumi.Input[int]] = None,
                 onetime_schedule: Optional[pulumi.Input[int]] = None,
                 proxy: Optional[pulumi.Input[int]] = None,
                 recurring_schedule: Optional[pulumi.Input[int]] = None,
                 service_group: Optional[pulumi.Input[int]] = None,
                 session: Optional[pulumi.Input[int]] = None,
                 sslvpn: Optional[pulumi.Input[int]] = None,
                 user: Optional[pulumi.Input[int]] = None,
                 user_group: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourcelimitsArgs.__new__(ResourcelimitsArgs)

            __props__.__dict__["custom_service"] = custom_service
            __props__.__dict__["dialup_tunnel"] = dialup_tunnel
            __props__.__dict__["firewall_address"] = firewall_address
            __props__.__dict__["firewall_addrgrp"] = firewall_addrgrp
            __props__.__dict__["firewall_policy"] = firewall_policy
            __props__.__dict__["ipsec_phase1"] = ipsec_phase1
            __props__.__dict__["ipsec_phase1_interface"] = ipsec_phase1_interface
            __props__.__dict__["ipsec_phase2"] = ipsec_phase2
            __props__.__dict__["ipsec_phase2_interface"] = ipsec_phase2_interface
            __props__.__dict__["log_disk_quota"] = log_disk_quota
            __props__.__dict__["onetime_schedule"] = onetime_schedule
            __props__.__dict__["proxy"] = proxy
            __props__.__dict__["recurring_schedule"] = recurring_schedule
            __props__.__dict__["service_group"] = service_group
            __props__.__dict__["session"] = session
            __props__.__dict__["sslvpn"] = sslvpn
            __props__.__dict__["user"] = user
            __props__.__dict__["user_group"] = user_group
            __props__.__dict__["vdomparam"] = vdomparam
        super(Resourcelimits, __self__).__init__(
            'fortios:system/resourcelimits:Resourcelimits',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            custom_service: Optional[pulumi.Input[int]] = None,
            dialup_tunnel: Optional[pulumi.Input[int]] = None,
            firewall_address: Optional[pulumi.Input[int]] = None,
            firewall_addrgrp: Optional[pulumi.Input[int]] = None,
            firewall_policy: Optional[pulumi.Input[int]] = None,
            ipsec_phase1: Optional[pulumi.Input[int]] = None,
            ipsec_phase1_interface: Optional[pulumi.Input[int]] = None,
            ipsec_phase2: Optional[pulumi.Input[int]] = None,
            ipsec_phase2_interface: Optional[pulumi.Input[int]] = None,
            log_disk_quota: Optional[pulumi.Input[int]] = None,
            onetime_schedule: Optional[pulumi.Input[int]] = None,
            proxy: Optional[pulumi.Input[int]] = None,
            recurring_schedule: Optional[pulumi.Input[int]] = None,
            service_group: Optional[pulumi.Input[int]] = None,
            session: Optional[pulumi.Input[int]] = None,
            sslvpn: Optional[pulumi.Input[int]] = None,
            user: Optional[pulumi.Input[int]] = None,
            user_group: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Resourcelimits':
        """
        Get an existing Resourcelimits resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] custom_service: Maximum number of firewall custom services.
        :param pulumi.Input[int] dialup_tunnel: Maximum number of dial-up tunnels.
        :param pulumi.Input[int] firewall_address: Maximum number of firewall addresses (IPv4, IPv6, multicast).
        :param pulumi.Input[int] firewall_addrgrp: Maximum number of firewall address groups (IPv4, IPv6).
        :param pulumi.Input[int] firewall_policy: Maximum number of firewall policies (policy, DoS-policy4, DoS-policy6, multicast).
        :param pulumi.Input[int] ipsec_phase1: Maximum number of VPN IPsec phase1 tunnels.
        :param pulumi.Input[int] ipsec_phase1_interface: Maximum number of VPN IPsec phase1 interface tunnels.
        :param pulumi.Input[int] ipsec_phase2: Maximum number of VPN IPsec phase2 tunnels.
        :param pulumi.Input[int] ipsec_phase2_interface: Maximum number of VPN IPsec phase2 interface tunnels.
        :param pulumi.Input[int] log_disk_quota: Log disk quota in megabytes (MB).
        :param pulumi.Input[int] onetime_schedule: Maximum number of firewall one-time schedules.
        :param pulumi.Input[int] proxy: Maximum number of concurrent proxy users.
        :param pulumi.Input[int] recurring_schedule: Maximum number of firewall recurring schedules.
        :param pulumi.Input[int] service_group: Maximum number of firewall service groups.
        :param pulumi.Input[int] session: Maximum number of sessions.
        :param pulumi.Input[int] sslvpn: Maximum number of SSL-VPN.
        :param pulumi.Input[int] user: Maximum number of local users.
        :param pulumi.Input[int] user_group: Maximum number of user groups.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourcelimitsState.__new__(_ResourcelimitsState)

        __props__.__dict__["custom_service"] = custom_service
        __props__.__dict__["dialup_tunnel"] = dialup_tunnel
        __props__.__dict__["firewall_address"] = firewall_address
        __props__.__dict__["firewall_addrgrp"] = firewall_addrgrp
        __props__.__dict__["firewall_policy"] = firewall_policy
        __props__.__dict__["ipsec_phase1"] = ipsec_phase1
        __props__.__dict__["ipsec_phase1_interface"] = ipsec_phase1_interface
        __props__.__dict__["ipsec_phase2"] = ipsec_phase2
        __props__.__dict__["ipsec_phase2_interface"] = ipsec_phase2_interface
        __props__.__dict__["log_disk_quota"] = log_disk_quota
        __props__.__dict__["onetime_schedule"] = onetime_schedule
        __props__.__dict__["proxy"] = proxy
        __props__.__dict__["recurring_schedule"] = recurring_schedule
        __props__.__dict__["service_group"] = service_group
        __props__.__dict__["session"] = session
        __props__.__dict__["sslvpn"] = sslvpn
        __props__.__dict__["user"] = user
        __props__.__dict__["user_group"] = user_group
        __props__.__dict__["vdomparam"] = vdomparam
        return Resourcelimits(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customService")
    def custom_service(self) -> pulumi.Output[int]:
        """
        Maximum number of firewall custom services.
        """
        return pulumi.get(self, "custom_service")

    @property
    @pulumi.getter(name="dialupTunnel")
    def dialup_tunnel(self) -> pulumi.Output[int]:
        """
        Maximum number of dial-up tunnels.
        """
        return pulumi.get(self, "dialup_tunnel")

    @property
    @pulumi.getter(name="firewallAddress")
    def firewall_address(self) -> pulumi.Output[int]:
        """
        Maximum number of firewall addresses (IPv4, IPv6, multicast).
        """
        return pulumi.get(self, "firewall_address")

    @property
    @pulumi.getter(name="firewallAddrgrp")
    def firewall_addrgrp(self) -> pulumi.Output[int]:
        """
        Maximum number of firewall address groups (IPv4, IPv6).
        """
        return pulumi.get(self, "firewall_addrgrp")

    @property
    @pulumi.getter(name="firewallPolicy")
    def firewall_policy(self) -> pulumi.Output[int]:
        """
        Maximum number of firewall policies (policy, DoS-policy4, DoS-policy6, multicast).
        """
        return pulumi.get(self, "firewall_policy")

    @property
    @pulumi.getter(name="ipsecPhase1")
    def ipsec_phase1(self) -> pulumi.Output[int]:
        """
        Maximum number of VPN IPsec phase1 tunnels.
        """
        return pulumi.get(self, "ipsec_phase1")

    @property
    @pulumi.getter(name="ipsecPhase1Interface")
    def ipsec_phase1_interface(self) -> pulumi.Output[int]:
        """
        Maximum number of VPN IPsec phase1 interface tunnels.
        """
        return pulumi.get(self, "ipsec_phase1_interface")

    @property
    @pulumi.getter(name="ipsecPhase2")
    def ipsec_phase2(self) -> pulumi.Output[int]:
        """
        Maximum number of VPN IPsec phase2 tunnels.
        """
        return pulumi.get(self, "ipsec_phase2")

    @property
    @pulumi.getter(name="ipsecPhase2Interface")
    def ipsec_phase2_interface(self) -> pulumi.Output[int]:
        """
        Maximum number of VPN IPsec phase2 interface tunnels.
        """
        return pulumi.get(self, "ipsec_phase2_interface")

    @property
    @pulumi.getter(name="logDiskQuota")
    def log_disk_quota(self) -> pulumi.Output[int]:
        """
        Log disk quota in megabytes (MB).
        """
        return pulumi.get(self, "log_disk_quota")

    @property
    @pulumi.getter(name="onetimeSchedule")
    def onetime_schedule(self) -> pulumi.Output[int]:
        """
        Maximum number of firewall one-time schedules.
        """
        return pulumi.get(self, "onetime_schedule")

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Output[int]:
        """
        Maximum number of concurrent proxy users.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter(name="recurringSchedule")
    def recurring_schedule(self) -> pulumi.Output[int]:
        """
        Maximum number of firewall recurring schedules.
        """
        return pulumi.get(self, "recurring_schedule")

    @property
    @pulumi.getter(name="serviceGroup")
    def service_group(self) -> pulumi.Output[int]:
        """
        Maximum number of firewall service groups.
        """
        return pulumi.get(self, "service_group")

    @property
    @pulumi.getter
    def session(self) -> pulumi.Output[int]:
        """
        Maximum number of sessions.
        """
        return pulumi.get(self, "session")

    @property
    @pulumi.getter
    def sslvpn(self) -> pulumi.Output[int]:
        """
        Maximum number of SSL-VPN.
        """
        return pulumi.get(self, "sslvpn")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[int]:
        """
        Maximum number of local users.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> pulumi.Output[int]:
        """
        Maximum number of user groups.
        """
        return pulumi.get(self, "user_group")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

