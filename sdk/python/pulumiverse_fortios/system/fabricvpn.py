# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FabricvpnArgs', 'Fabricvpn']

@pulumi.input_type
class FabricvpnArgs:
    def __init__(__self__, *,
                 advertised_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['FabricvpnAdvertisedSubnetArgs']]]] = None,
                 bgp_as: Optional[pulumi.Input[int]] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[str]] = None,
                 loopback_address_block: Optional[pulumi.Input[str]] = None,
                 loopback_advertised_subnet: Optional[pulumi.Input[int]] = None,
                 loopback_interface: Optional[pulumi.Input[str]] = None,
                 overlays: Optional[pulumi.Input[Sequence[pulumi.Input['FabricvpnOverlayArgs']]]] = None,
                 policy_rule: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 sdwan_zone: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sync_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpn_role: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Fabricvpn resource.
        :param pulumi.Input[Sequence[pulumi.Input['FabricvpnAdvertisedSubnetArgs']]] advertised_subnets: Local advertised subnets. The structure of `advertised_subnets` block is documented below.
        :param pulumi.Input[int] bgp_as: BGP Router AS number, valid from 1 to 4294967295.
        :param pulumi.Input[str] branch_name: Branch name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] health_checks: Underlying health checks.
        :param pulumi.Input[str] loopback_address_block: IPv4 address and subnet mask for hub's loopback address, syntax: X.X.X.X/24.
        :param pulumi.Input[int] loopback_advertised_subnet: Loopback advertised subnet reference.
        :param pulumi.Input[str] loopback_interface: Loopback interface.
        :param pulumi.Input[Sequence[pulumi.Input['FabricvpnOverlayArgs']]] overlays: Local overlay interfaces table. The structure of `overlays` block is documented below.
        :param pulumi.Input[str] policy_rule: Policy creation rule. Valid values: `health-check`, `manual`, `auto`.
        :param pulumi.Input[str] psksecret: Pre-shared secret for ADVPN.
        :param pulumi.Input[str] sdwan_zone: Reference to created SD-WAN zone.
        :param pulumi.Input[str] status: Enable/disable Fabric VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sync_mode: Setting synchronised by fabric or manual. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vpn_role: Fabric VPN role. Valid values: `hub`, `spoke`.
        """
        if advertised_subnets is not None:
            pulumi.set(__self__, "advertised_subnets", advertised_subnets)
        if bgp_as is not None:
            pulumi.set(__self__, "bgp_as", bgp_as)
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if loopback_address_block is not None:
            pulumi.set(__self__, "loopback_address_block", loopback_address_block)
        if loopback_advertised_subnet is not None:
            pulumi.set(__self__, "loopback_advertised_subnet", loopback_advertised_subnet)
        if loopback_interface is not None:
            pulumi.set(__self__, "loopback_interface", loopback_interface)
        if overlays is not None:
            pulumi.set(__self__, "overlays", overlays)
        if policy_rule is not None:
            pulumi.set(__self__, "policy_rule", policy_rule)
        if psksecret is not None:
            pulumi.set(__self__, "psksecret", psksecret)
        if sdwan_zone is not None:
            pulumi.set(__self__, "sdwan_zone", sdwan_zone)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sync_mode is not None:
            pulumi.set(__self__, "sync_mode", sync_mode)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vpn_role is not None:
            pulumi.set(__self__, "vpn_role", vpn_role)

    @property
    @pulumi.getter(name="advertisedSubnets")
    def advertised_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FabricvpnAdvertisedSubnetArgs']]]]:
        """
        Local advertised subnets. The structure of `advertised_subnets` block is documented below.
        """
        return pulumi.get(self, "advertised_subnets")

    @advertised_subnets.setter
    def advertised_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FabricvpnAdvertisedSubnetArgs']]]]):
        pulumi.set(self, "advertised_subnets", value)

    @property
    @pulumi.getter(name="bgpAs")
    def bgp_as(self) -> Optional[pulumi.Input[int]]:
        """
        BGP Router AS number, valid from 1 to 4294967295.
        """
        return pulumi.get(self, "bgp_as")

    @bgp_as.setter
    def bgp_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_as", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        Branch name.
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[pulumi.Input[str]]:
        """
        Underlying health checks.
        """
        return pulumi.get(self, "health_checks")

    @health_checks.setter
    def health_checks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_checks", value)

    @property
    @pulumi.getter(name="loopbackAddressBlock")
    def loopback_address_block(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address and subnet mask for hub's loopback address, syntax: X.X.X.X/24.
        """
        return pulumi.get(self, "loopback_address_block")

    @loopback_address_block.setter
    def loopback_address_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loopback_address_block", value)

    @property
    @pulumi.getter(name="loopbackAdvertisedSubnet")
    def loopback_advertised_subnet(self) -> Optional[pulumi.Input[int]]:
        """
        Loopback advertised subnet reference.
        """
        return pulumi.get(self, "loopback_advertised_subnet")

    @loopback_advertised_subnet.setter
    def loopback_advertised_subnet(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "loopback_advertised_subnet", value)

    @property
    @pulumi.getter(name="loopbackInterface")
    def loopback_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Loopback interface.
        """
        return pulumi.get(self, "loopback_interface")

    @loopback_interface.setter
    def loopback_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loopback_interface", value)

    @property
    @pulumi.getter
    def overlays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FabricvpnOverlayArgs']]]]:
        """
        Local overlay interfaces table. The structure of `overlays` block is documented below.
        """
        return pulumi.get(self, "overlays")

    @overlays.setter
    def overlays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FabricvpnOverlayArgs']]]]):
        pulumi.set(self, "overlays", value)

    @property
    @pulumi.getter(name="policyRule")
    def policy_rule(self) -> Optional[pulumi.Input[str]]:
        """
        Policy creation rule. Valid values: `health-check`, `manual`, `auto`.
        """
        return pulumi.get(self, "policy_rule")

    @policy_rule.setter
    def policy_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_rule", value)

    @property
    @pulumi.getter
    def psksecret(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared secret for ADVPN.
        """
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter(name="sdwanZone")
    def sdwan_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to created SD-WAN zone.
        """
        return pulumi.get(self, "sdwan_zone")

    @sdwan_zone.setter
    def sdwan_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdwan_zone", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Fabric VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Setting synchronised by fabric or manual. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sync_mode")

    @sync_mode.setter
    def sync_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_mode", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vpnRole")
    def vpn_role(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric VPN role. Valid values: `hub`, `spoke`.
        """
        return pulumi.get(self, "vpn_role")

    @vpn_role.setter
    def vpn_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_role", value)


@pulumi.input_type
class _FabricvpnState:
    def __init__(__self__, *,
                 advertised_subnets: Optional[pulumi.Input[Sequence[pulumi.Input['FabricvpnAdvertisedSubnetArgs']]]] = None,
                 bgp_as: Optional[pulumi.Input[int]] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[str]] = None,
                 loopback_address_block: Optional[pulumi.Input[str]] = None,
                 loopback_advertised_subnet: Optional[pulumi.Input[int]] = None,
                 loopback_interface: Optional[pulumi.Input[str]] = None,
                 overlays: Optional[pulumi.Input[Sequence[pulumi.Input['FabricvpnOverlayArgs']]]] = None,
                 policy_rule: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 sdwan_zone: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sync_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpn_role: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Fabricvpn resources.
        :param pulumi.Input[Sequence[pulumi.Input['FabricvpnAdvertisedSubnetArgs']]] advertised_subnets: Local advertised subnets. The structure of `advertised_subnets` block is documented below.
        :param pulumi.Input[int] bgp_as: BGP Router AS number, valid from 1 to 4294967295.
        :param pulumi.Input[str] branch_name: Branch name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] health_checks: Underlying health checks.
        :param pulumi.Input[str] loopback_address_block: IPv4 address and subnet mask for hub's loopback address, syntax: X.X.X.X/24.
        :param pulumi.Input[int] loopback_advertised_subnet: Loopback advertised subnet reference.
        :param pulumi.Input[str] loopback_interface: Loopback interface.
        :param pulumi.Input[Sequence[pulumi.Input['FabricvpnOverlayArgs']]] overlays: Local overlay interfaces table. The structure of `overlays` block is documented below.
        :param pulumi.Input[str] policy_rule: Policy creation rule. Valid values: `health-check`, `manual`, `auto`.
        :param pulumi.Input[str] psksecret: Pre-shared secret for ADVPN.
        :param pulumi.Input[str] sdwan_zone: Reference to created SD-WAN zone.
        :param pulumi.Input[str] status: Enable/disable Fabric VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sync_mode: Setting synchronised by fabric or manual. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vpn_role: Fabric VPN role. Valid values: `hub`, `spoke`.
        """
        if advertised_subnets is not None:
            pulumi.set(__self__, "advertised_subnets", advertised_subnets)
        if bgp_as is not None:
            pulumi.set(__self__, "bgp_as", bgp_as)
        if branch_name is not None:
            pulumi.set(__self__, "branch_name", branch_name)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if loopback_address_block is not None:
            pulumi.set(__self__, "loopback_address_block", loopback_address_block)
        if loopback_advertised_subnet is not None:
            pulumi.set(__self__, "loopback_advertised_subnet", loopback_advertised_subnet)
        if loopback_interface is not None:
            pulumi.set(__self__, "loopback_interface", loopback_interface)
        if overlays is not None:
            pulumi.set(__self__, "overlays", overlays)
        if policy_rule is not None:
            pulumi.set(__self__, "policy_rule", policy_rule)
        if psksecret is not None:
            pulumi.set(__self__, "psksecret", psksecret)
        if sdwan_zone is not None:
            pulumi.set(__self__, "sdwan_zone", sdwan_zone)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sync_mode is not None:
            pulumi.set(__self__, "sync_mode", sync_mode)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vpn_role is not None:
            pulumi.set(__self__, "vpn_role", vpn_role)

    @property
    @pulumi.getter(name="advertisedSubnets")
    def advertised_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FabricvpnAdvertisedSubnetArgs']]]]:
        """
        Local advertised subnets. The structure of `advertised_subnets` block is documented below.
        """
        return pulumi.get(self, "advertised_subnets")

    @advertised_subnets.setter
    def advertised_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FabricvpnAdvertisedSubnetArgs']]]]):
        pulumi.set(self, "advertised_subnets", value)

    @property
    @pulumi.getter(name="bgpAs")
    def bgp_as(self) -> Optional[pulumi.Input[int]]:
        """
        BGP Router AS number, valid from 1 to 4294967295.
        """
        return pulumi.get(self, "bgp_as")

    @bgp_as.setter
    def bgp_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_as", value)

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> Optional[pulumi.Input[str]]:
        """
        Branch name.
        """
        return pulumi.get(self, "branch_name")

    @branch_name.setter
    def branch_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_name", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[pulumi.Input[str]]:
        """
        Underlying health checks.
        """
        return pulumi.get(self, "health_checks")

    @health_checks.setter
    def health_checks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_checks", value)

    @property
    @pulumi.getter(name="loopbackAddressBlock")
    def loopback_address_block(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address and subnet mask for hub's loopback address, syntax: X.X.X.X/24.
        """
        return pulumi.get(self, "loopback_address_block")

    @loopback_address_block.setter
    def loopback_address_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loopback_address_block", value)

    @property
    @pulumi.getter(name="loopbackAdvertisedSubnet")
    def loopback_advertised_subnet(self) -> Optional[pulumi.Input[int]]:
        """
        Loopback advertised subnet reference.
        """
        return pulumi.get(self, "loopback_advertised_subnet")

    @loopback_advertised_subnet.setter
    def loopback_advertised_subnet(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "loopback_advertised_subnet", value)

    @property
    @pulumi.getter(name="loopbackInterface")
    def loopback_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Loopback interface.
        """
        return pulumi.get(self, "loopback_interface")

    @loopback_interface.setter
    def loopback_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loopback_interface", value)

    @property
    @pulumi.getter
    def overlays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FabricvpnOverlayArgs']]]]:
        """
        Local overlay interfaces table. The structure of `overlays` block is documented below.
        """
        return pulumi.get(self, "overlays")

    @overlays.setter
    def overlays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FabricvpnOverlayArgs']]]]):
        pulumi.set(self, "overlays", value)

    @property
    @pulumi.getter(name="policyRule")
    def policy_rule(self) -> Optional[pulumi.Input[str]]:
        """
        Policy creation rule. Valid values: `health-check`, `manual`, `auto`.
        """
        return pulumi.get(self, "policy_rule")

    @policy_rule.setter
    def policy_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_rule", value)

    @property
    @pulumi.getter
    def psksecret(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared secret for ADVPN.
        """
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter(name="sdwanZone")
    def sdwan_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to created SD-WAN zone.
        """
        return pulumi.get(self, "sdwan_zone")

    @sdwan_zone.setter
    def sdwan_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sdwan_zone", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Fabric VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Setting synchronised by fabric or manual. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sync_mode")

    @sync_mode.setter
    def sync_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_mode", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="vpnRole")
    def vpn_role(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric VPN role. Valid values: `hub`, `spoke`.
        """
        return pulumi.get(self, "vpn_role")

    @vpn_role.setter
    def vpn_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_role", value)


class Fabricvpn(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advertised_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FabricvpnAdvertisedSubnetArgs']]]]] = None,
                 bgp_as: Optional[pulumi.Input[int]] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[str]] = None,
                 loopback_address_block: Optional[pulumi.Input[str]] = None,
                 loopback_advertised_subnet: Optional[pulumi.Input[int]] = None,
                 loopback_interface: Optional[pulumi.Input[str]] = None,
                 overlays: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FabricvpnOverlayArgs']]]]] = None,
                 policy_rule: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 sdwan_zone: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sync_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpn_role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Setup for self orchestrated fabric auto discovery VPN. Applies to FortiOS Version `>= 7.2.4`.

        ## Import

        System FabricVpn can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/fabricvpn:Fabricvpn labelname SystemFabricVpn
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/fabricvpn:Fabricvpn labelname SystemFabricVpn
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FabricvpnAdvertisedSubnetArgs']]]] advertised_subnets: Local advertised subnets. The structure of `advertised_subnets` block is documented below.
        :param pulumi.Input[int] bgp_as: BGP Router AS number, valid from 1 to 4294967295.
        :param pulumi.Input[str] branch_name: Branch name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] health_checks: Underlying health checks.
        :param pulumi.Input[str] loopback_address_block: IPv4 address and subnet mask for hub's loopback address, syntax: X.X.X.X/24.
        :param pulumi.Input[int] loopback_advertised_subnet: Loopback advertised subnet reference.
        :param pulumi.Input[str] loopback_interface: Loopback interface.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FabricvpnOverlayArgs']]]] overlays: Local overlay interfaces table. The structure of `overlays` block is documented below.
        :param pulumi.Input[str] policy_rule: Policy creation rule. Valid values: `health-check`, `manual`, `auto`.
        :param pulumi.Input[str] psksecret: Pre-shared secret for ADVPN.
        :param pulumi.Input[str] sdwan_zone: Reference to created SD-WAN zone.
        :param pulumi.Input[str] status: Enable/disable Fabric VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sync_mode: Setting synchronised by fabric or manual. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vpn_role: Fabric VPN role. Valid values: `hub`, `spoke`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FabricvpnArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Setup for self orchestrated fabric auto discovery VPN. Applies to FortiOS Version `>= 7.2.4`.

        ## Import

        System FabricVpn can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/fabricvpn:Fabricvpn labelname SystemFabricVpn
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/fabricvpn:Fabricvpn labelname SystemFabricVpn
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param FabricvpnArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FabricvpnArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advertised_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FabricvpnAdvertisedSubnetArgs']]]]] = None,
                 bgp_as: Optional[pulumi.Input[int]] = None,
                 branch_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[str]] = None,
                 loopback_address_block: Optional[pulumi.Input[str]] = None,
                 loopback_advertised_subnet: Optional[pulumi.Input[int]] = None,
                 loopback_interface: Optional[pulumi.Input[str]] = None,
                 overlays: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FabricvpnOverlayArgs']]]]] = None,
                 policy_rule: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 sdwan_zone: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sync_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpn_role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FabricvpnArgs.__new__(FabricvpnArgs)

            __props__.__dict__["advertised_subnets"] = advertised_subnets
            __props__.__dict__["bgp_as"] = bgp_as
            __props__.__dict__["branch_name"] = branch_name
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["health_checks"] = health_checks
            __props__.__dict__["loopback_address_block"] = loopback_address_block
            __props__.__dict__["loopback_advertised_subnet"] = loopback_advertised_subnet
            __props__.__dict__["loopback_interface"] = loopback_interface
            __props__.__dict__["overlays"] = overlays
            __props__.__dict__["policy_rule"] = policy_rule
            __props__.__dict__["psksecret"] = psksecret
            __props__.__dict__["sdwan_zone"] = sdwan_zone
            __props__.__dict__["status"] = status
            __props__.__dict__["sync_mode"] = sync_mode
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vpn_role"] = vpn_role
        super(Fabricvpn, __self__).__init__(
            'fortios:system/fabricvpn:Fabricvpn',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            advertised_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FabricvpnAdvertisedSubnetArgs']]]]] = None,
            bgp_as: Optional[pulumi.Input[int]] = None,
            branch_name: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            health_checks: Optional[pulumi.Input[str]] = None,
            loopback_address_block: Optional[pulumi.Input[str]] = None,
            loopback_advertised_subnet: Optional[pulumi.Input[int]] = None,
            loopback_interface: Optional[pulumi.Input[str]] = None,
            overlays: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FabricvpnOverlayArgs']]]]] = None,
            policy_rule: Optional[pulumi.Input[str]] = None,
            psksecret: Optional[pulumi.Input[str]] = None,
            sdwan_zone: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            sync_mode: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vpn_role: Optional[pulumi.Input[str]] = None) -> 'Fabricvpn':
        """
        Get an existing Fabricvpn resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FabricvpnAdvertisedSubnetArgs']]]] advertised_subnets: Local advertised subnets. The structure of `advertised_subnets` block is documented below.
        :param pulumi.Input[int] bgp_as: BGP Router AS number, valid from 1 to 4294967295.
        :param pulumi.Input[str] branch_name: Branch name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] health_checks: Underlying health checks.
        :param pulumi.Input[str] loopback_address_block: IPv4 address and subnet mask for hub's loopback address, syntax: X.X.X.X/24.
        :param pulumi.Input[int] loopback_advertised_subnet: Loopback advertised subnet reference.
        :param pulumi.Input[str] loopback_interface: Loopback interface.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FabricvpnOverlayArgs']]]] overlays: Local overlay interfaces table. The structure of `overlays` block is documented below.
        :param pulumi.Input[str] policy_rule: Policy creation rule. Valid values: `health-check`, `manual`, `auto`.
        :param pulumi.Input[str] psksecret: Pre-shared secret for ADVPN.
        :param pulumi.Input[str] sdwan_zone: Reference to created SD-WAN zone.
        :param pulumi.Input[str] status: Enable/disable Fabric VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sync_mode: Setting synchronised by fabric or manual. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vpn_role: Fabric VPN role. Valid values: `hub`, `spoke`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FabricvpnState.__new__(_FabricvpnState)

        __props__.__dict__["advertised_subnets"] = advertised_subnets
        __props__.__dict__["bgp_as"] = bgp_as
        __props__.__dict__["branch_name"] = branch_name
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["health_checks"] = health_checks
        __props__.__dict__["loopback_address_block"] = loopback_address_block
        __props__.__dict__["loopback_advertised_subnet"] = loopback_advertised_subnet
        __props__.__dict__["loopback_interface"] = loopback_interface
        __props__.__dict__["overlays"] = overlays
        __props__.__dict__["policy_rule"] = policy_rule
        __props__.__dict__["psksecret"] = psksecret
        __props__.__dict__["sdwan_zone"] = sdwan_zone
        __props__.__dict__["status"] = status
        __props__.__dict__["sync_mode"] = sync_mode
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vpn_role"] = vpn_role
        return Fabricvpn(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="advertisedSubnets")
    def advertised_subnets(self) -> pulumi.Output[Optional[Sequence['outputs.FabricvpnAdvertisedSubnet']]]:
        """
        Local advertised subnets. The structure of `advertised_subnets` block is documented below.
        """
        return pulumi.get(self, "advertised_subnets")

    @property
    @pulumi.getter(name="bgpAs")
    def bgp_as(self) -> pulumi.Output[int]:
        """
        BGP Router AS number, valid from 1 to 4294967295.
        """
        return pulumi.get(self, "bgp_as")

    @property
    @pulumi.getter(name="branchName")
    def branch_name(self) -> pulumi.Output[str]:
        """
        Branch name.
        """
        return pulumi.get(self, "branch_name")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> pulumi.Output[str]:
        """
        Underlying health checks.
        """
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="loopbackAddressBlock")
    def loopback_address_block(self) -> pulumi.Output[str]:
        """
        IPv4 address and subnet mask for hub's loopback address, syntax: X.X.X.X/24.
        """
        return pulumi.get(self, "loopback_address_block")

    @property
    @pulumi.getter(name="loopbackAdvertisedSubnet")
    def loopback_advertised_subnet(self) -> pulumi.Output[int]:
        """
        Loopback advertised subnet reference.
        """
        return pulumi.get(self, "loopback_advertised_subnet")

    @property
    @pulumi.getter(name="loopbackInterface")
    def loopback_interface(self) -> pulumi.Output[str]:
        """
        Loopback interface.
        """
        return pulumi.get(self, "loopback_interface")

    @property
    @pulumi.getter
    def overlays(self) -> pulumi.Output[Optional[Sequence['outputs.FabricvpnOverlay']]]:
        """
        Local overlay interfaces table. The structure of `overlays` block is documented below.
        """
        return pulumi.get(self, "overlays")

    @property
    @pulumi.getter(name="policyRule")
    def policy_rule(self) -> pulumi.Output[str]:
        """
        Policy creation rule. Valid values: `health-check`, `manual`, `auto`.
        """
        return pulumi.get(self, "policy_rule")

    @property
    @pulumi.getter
    def psksecret(self) -> pulumi.Output[Optional[str]]:
        """
        Pre-shared secret for ADVPN.
        """
        return pulumi.get(self, "psksecret")

    @property
    @pulumi.getter(name="sdwanZone")
    def sdwan_zone(self) -> pulumi.Output[str]:
        """
        Reference to created SD-WAN zone.
        """
        return pulumi.get(self, "sdwan_zone")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable Fabric VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> pulumi.Output[str]:
        """
        Setting synchronised by fabric or manual. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sync_mode")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="vpnRole")
    def vpn_role(self) -> pulumi.Output[str]:
        """
        Fabric VPN role. Valid values: `hub`, `spoke`.
        """
        return pulumi.get(self, "vpn_role")

