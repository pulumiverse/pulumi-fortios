# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CsfArgs', 'Csf']

@pulumi.input_type
class CsfArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 accept_auth_by_cert: Optional[pulumi.Input[str]] = None,
                 authorization_request_type: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 configuration_sync: Optional[pulumi.Input[str]] = None,
                 downstream_access: Optional[pulumi.Input[str]] = None,
                 downstream_accprofile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_connectors: Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricConnectorArgs']]]] = None,
                 fabric_devices: Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricDeviceArgs']]]] = None,
                 fabric_object_unification: Optional[pulumi.Input[str]] = None,
                 fabric_workers: Optional[pulumi.Input[int]] = None,
                 file_mgmt: Optional[pulumi.Input[str]] = None,
                 file_quota: Optional[pulumi.Input[int]] = None,
                 file_quota_warning: Optional[pulumi.Input[int]] = None,
                 fixed_key: Optional[pulumi.Input[str]] = None,
                 forticloud_account_enforcement: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_password: Optional[pulumi.Input[str]] = None,
                 log_unification: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 management_port: Optional[pulumi.Input[int]] = None,
                 saml_configuration_sync: Optional[pulumi.Input[str]] = None,
                 trusted_lists: Optional[pulumi.Input[Sequence[pulumi.Input['CsfTrustedListArgs']]]] = None,
                 uid: Optional[pulumi.Input[str]] = None,
                 upstream: Optional[pulumi.Input[str]] = None,
                 upstream_ip: Optional[pulumi.Input[str]] = None,
                 upstream_port: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Csf resource.
        :param pulumi.Input[str] status: Enable/disable Security Fabric. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] accept_auth_by_cert: Accept connections with unknown certificates and ask admin for approval. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] authorization_request_type: Authorization request type. Valid values: `serial`, `certificate`.
        :param pulumi.Input[str] certificate: Certificate.
        :param pulumi.Input[str] configuration_sync: Configuration sync mode. Valid values: `default`, `local`.
        :param pulumi.Input[str] downstream_access: Enable/disable downstream device access to this device's configuration and data. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] downstream_accprofile: Default access profile for requests from downstream devices.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input['CsfFabricConnectorArgs']]] fabric_connectors: Fabric connector configuration. The structure of `fabric_connector` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['CsfFabricDeviceArgs']]] fabric_devices: Fabric device configuration. The structure of `fabric_device` block is documented below.
        :param pulumi.Input[str] fabric_object_unification: Fabric CMDB Object Unification Valid values: `default`, `local`.
        :param pulumi.Input[int] fabric_workers: Number of worker processes for Security Fabric daemon.
        :param pulumi.Input[str] file_mgmt: Enable/disable Security Fabric daemon file management. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] file_quota: Maximum amount of memory that can be used by the daemon files (in bytes).
        :param pulumi.Input[int] file_quota_warning: Warn when the set percentage of quota has been used.
        :param pulumi.Input[str] fixed_key: Auto-generated fixed key used when this device is the root. (Will automatically be generated if not set.)
        :param pulumi.Input[str] forticloud_account_enforcement: Fabric FortiCloud account unification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_name: Security Fabric group name. All FortiGates in a Security Fabric must have the same group name.
        :param pulumi.Input[str] group_password: Security Fabric group password. All FortiGates in a Security Fabric must have the same group password.
        :param pulumi.Input[str] log_unification: Enable/disable broadcast of discovery messages for log unification. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] management_ip: Management IP address of this FortiGate. Used to log into this FortiGate from another FortiGate in the Security Fabric.
        :param pulumi.Input[int] management_port: Overriding port for management connection (Overrides admin port).
        :param pulumi.Input[str] saml_configuration_sync: SAML setting configuration synchronization. Valid values: `default`, `local`.
        :param pulumi.Input[Sequence[pulumi.Input['CsfTrustedListArgs']]] trusted_lists: Pre-authorized and blocked security fabric nodes. The structure of `trusted_list` block is documented below.
        :param pulumi.Input[str] uid: Unique ID of the current CSF node
        :param pulumi.Input[str] upstream: IP/FQDN of the FortiGate upstream from this FortiGate in the Security Fabric.
        :param pulumi.Input[str] upstream_ip: IP address of the FortiGate upstream from this FortiGate in the Security Fabric.
        :param pulumi.Input[int] upstream_port: The port number to use to communicate with the FortiGate upstream from this FortiGate in the Security Fabric (default = 8013).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "status", status)
        if accept_auth_by_cert is not None:
            pulumi.set(__self__, "accept_auth_by_cert", accept_auth_by_cert)
        if authorization_request_type is not None:
            pulumi.set(__self__, "authorization_request_type", authorization_request_type)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if configuration_sync is not None:
            pulumi.set(__self__, "configuration_sync", configuration_sync)
        if downstream_access is not None:
            pulumi.set(__self__, "downstream_access", downstream_access)
        if downstream_accprofile is not None:
            pulumi.set(__self__, "downstream_accprofile", downstream_accprofile)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fabric_connectors is not None:
            pulumi.set(__self__, "fabric_connectors", fabric_connectors)
        if fabric_devices is not None:
            pulumi.set(__self__, "fabric_devices", fabric_devices)
        if fabric_object_unification is not None:
            pulumi.set(__self__, "fabric_object_unification", fabric_object_unification)
        if fabric_workers is not None:
            pulumi.set(__self__, "fabric_workers", fabric_workers)
        if file_mgmt is not None:
            pulumi.set(__self__, "file_mgmt", file_mgmt)
        if file_quota is not None:
            pulumi.set(__self__, "file_quota", file_quota)
        if file_quota_warning is not None:
            pulumi.set(__self__, "file_quota_warning", file_quota_warning)
        if fixed_key is not None:
            pulumi.set(__self__, "fixed_key", fixed_key)
        if forticloud_account_enforcement is not None:
            pulumi.set(__self__, "forticloud_account_enforcement", forticloud_account_enforcement)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if group_password is not None:
            pulumi.set(__self__, "group_password", group_password)
        if log_unification is not None:
            pulumi.set(__self__, "log_unification", log_unification)
        if management_ip is not None:
            pulumi.set(__self__, "management_ip", management_ip)
        if management_port is not None:
            pulumi.set(__self__, "management_port", management_port)
        if saml_configuration_sync is not None:
            pulumi.set(__self__, "saml_configuration_sync", saml_configuration_sync)
        if trusted_lists is not None:
            pulumi.set(__self__, "trusted_lists", trusted_lists)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)
        if upstream_ip is not None:
            pulumi.set(__self__, "upstream_ip", upstream_ip)
        if upstream_port is not None:
            pulumi.set(__self__, "upstream_port", upstream_port)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Enable/disable Security Fabric. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="acceptAuthByCert")
    def accept_auth_by_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Accept connections with unknown certificates and ask admin for approval. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "accept_auth_by_cert")

    @accept_auth_by_cert.setter
    def accept_auth_by_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_auth_by_cert", value)

    @property
    @pulumi.getter(name="authorizationRequestType")
    def authorization_request_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization request type. Valid values: `serial`, `certificate`.
        """
        return pulumi.get(self, "authorization_request_type")

    @authorization_request_type.setter
    def authorization_request_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_request_type", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="configurationSync")
    def configuration_sync(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration sync mode. Valid values: `default`, `local`.
        """
        return pulumi.get(self, "configuration_sync")

    @configuration_sync.setter
    def configuration_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_sync", value)

    @property
    @pulumi.getter(name="downstreamAccess")
    def downstream_access(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable downstream device access to this device's configuration and data. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "downstream_access")

    @downstream_access.setter
    def downstream_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_access", value)

    @property
    @pulumi.getter(name="downstreamAccprofile")
    def downstream_accprofile(self) -> Optional[pulumi.Input[str]]:
        """
        Default access profile for requests from downstream devices.
        """
        return pulumi.get(self, "downstream_accprofile")

    @downstream_accprofile.setter
    def downstream_accprofile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_accprofile", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fabricConnectors")
    def fabric_connectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricConnectorArgs']]]]:
        """
        Fabric connector configuration. The structure of `fabric_connector` block is documented below.
        """
        return pulumi.get(self, "fabric_connectors")

    @fabric_connectors.setter
    def fabric_connectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricConnectorArgs']]]]):
        pulumi.set(self, "fabric_connectors", value)

    @property
    @pulumi.getter(name="fabricDevices")
    def fabric_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricDeviceArgs']]]]:
        """
        Fabric device configuration. The structure of `fabric_device` block is documented below.
        """
        return pulumi.get(self, "fabric_devices")

    @fabric_devices.setter
    def fabric_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricDeviceArgs']]]]):
        pulumi.set(self, "fabric_devices", value)

    @property
    @pulumi.getter(name="fabricObjectUnification")
    def fabric_object_unification(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric CMDB Object Unification Valid values: `default`, `local`.
        """
        return pulumi.get(self, "fabric_object_unification")

    @fabric_object_unification.setter
    def fabric_object_unification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_object_unification", value)

    @property
    @pulumi.getter(name="fabricWorkers")
    def fabric_workers(self) -> Optional[pulumi.Input[int]]:
        """
        Number of worker processes for Security Fabric daemon.
        """
        return pulumi.get(self, "fabric_workers")

    @fabric_workers.setter
    def fabric_workers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fabric_workers", value)

    @property
    @pulumi.getter(name="fileMgmt")
    def file_mgmt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Security Fabric daemon file management. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "file_mgmt")

    @file_mgmt.setter
    def file_mgmt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_mgmt", value)

    @property
    @pulumi.getter(name="fileQuota")
    def file_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum amount of memory that can be used by the daemon files (in bytes).
        """
        return pulumi.get(self, "file_quota")

    @file_quota.setter
    def file_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_quota", value)

    @property
    @pulumi.getter(name="fileQuotaWarning")
    def file_quota_warning(self) -> Optional[pulumi.Input[int]]:
        """
        Warn when the set percentage of quota has been used.
        """
        return pulumi.get(self, "file_quota_warning")

    @file_quota_warning.setter
    def file_quota_warning(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_quota_warning", value)

    @property
    @pulumi.getter(name="fixedKey")
    def fixed_key(self) -> Optional[pulumi.Input[str]]:
        """
        Auto-generated fixed key used when this device is the root. (Will automatically be generated if not set.)
        """
        return pulumi.get(self, "fixed_key")

    @fixed_key.setter
    def fixed_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fixed_key", value)

    @property
    @pulumi.getter(name="forticloudAccountEnforcement")
    def forticloud_account_enforcement(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric FortiCloud account unification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticloud_account_enforcement")

    @forticloud_account_enforcement.setter
    def forticloud_account_enforcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticloud_account_enforcement", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Security Fabric group name. All FortiGates in a Security Fabric must have the same group name.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="groupPassword")
    def group_password(self) -> Optional[pulumi.Input[str]]:
        """
        Security Fabric group password. All FortiGates in a Security Fabric must have the same group password.
        """
        return pulumi.get(self, "group_password")

    @group_password.setter
    def group_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_password", value)

    @property
    @pulumi.getter(name="logUnification")
    def log_unification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable broadcast of discovery messages for log unification. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_unification")

    @log_unification.setter
    def log_unification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_unification", value)

    @property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Management IP address of this FortiGate. Used to log into this FortiGate from another FortiGate in the Security Fabric.
        """
        return pulumi.get(self, "management_ip")

    @management_ip.setter
    def management_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_ip", value)

    @property
    @pulumi.getter(name="managementPort")
    def management_port(self) -> Optional[pulumi.Input[int]]:
        """
        Overriding port for management connection (Overrides admin port).
        """
        return pulumi.get(self, "management_port")

    @management_port.setter
    def management_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "management_port", value)

    @property
    @pulumi.getter(name="samlConfigurationSync")
    def saml_configuration_sync(self) -> Optional[pulumi.Input[str]]:
        """
        SAML setting configuration synchronization. Valid values: `default`, `local`.
        """
        return pulumi.get(self, "saml_configuration_sync")

    @saml_configuration_sync.setter
    def saml_configuration_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_configuration_sync", value)

    @property
    @pulumi.getter(name="trustedLists")
    def trusted_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CsfTrustedListArgs']]]]:
        """
        Pre-authorized and blocked security fabric nodes. The structure of `trusted_list` block is documented below.
        """
        return pulumi.get(self, "trusted_lists")

    @trusted_lists.setter
    def trusted_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CsfTrustedListArgs']]]]):
        pulumi.set(self, "trusted_lists", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        Unique ID of the current CSF node
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter
    def upstream(self) -> Optional[pulumi.Input[str]]:
        """
        IP/FQDN of the FortiGate upstream from this FortiGate in the Security Fabric.
        """
        return pulumi.get(self, "upstream")

    @upstream.setter
    def upstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream", value)

    @property
    @pulumi.getter(name="upstreamIp")
    def upstream_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the FortiGate upstream from this FortiGate in the Security Fabric.
        """
        return pulumi.get(self, "upstream_ip")

    @upstream_ip.setter
    def upstream_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_ip", value)

    @property
    @pulumi.getter(name="upstreamPort")
    def upstream_port(self) -> Optional[pulumi.Input[int]]:
        """
        The port number to use to communicate with the FortiGate upstream from this FortiGate in the Security Fabric (default = 8013).
        """
        return pulumi.get(self, "upstream_port")

    @upstream_port.setter
    def upstream_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upstream_port", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _CsfState:
    def __init__(__self__, *,
                 accept_auth_by_cert: Optional[pulumi.Input[str]] = None,
                 authorization_request_type: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 configuration_sync: Optional[pulumi.Input[str]] = None,
                 downstream_access: Optional[pulumi.Input[str]] = None,
                 downstream_accprofile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_connectors: Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricConnectorArgs']]]] = None,
                 fabric_devices: Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricDeviceArgs']]]] = None,
                 fabric_object_unification: Optional[pulumi.Input[str]] = None,
                 fabric_workers: Optional[pulumi.Input[int]] = None,
                 file_mgmt: Optional[pulumi.Input[str]] = None,
                 file_quota: Optional[pulumi.Input[int]] = None,
                 file_quota_warning: Optional[pulumi.Input[int]] = None,
                 fixed_key: Optional[pulumi.Input[str]] = None,
                 forticloud_account_enforcement: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_password: Optional[pulumi.Input[str]] = None,
                 log_unification: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 management_port: Optional[pulumi.Input[int]] = None,
                 saml_configuration_sync: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trusted_lists: Optional[pulumi.Input[Sequence[pulumi.Input['CsfTrustedListArgs']]]] = None,
                 uid: Optional[pulumi.Input[str]] = None,
                 upstream: Optional[pulumi.Input[str]] = None,
                 upstream_ip: Optional[pulumi.Input[str]] = None,
                 upstream_port: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Csf resources.
        :param pulumi.Input[str] accept_auth_by_cert: Accept connections with unknown certificates and ask admin for approval. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] authorization_request_type: Authorization request type. Valid values: `serial`, `certificate`.
        :param pulumi.Input[str] certificate: Certificate.
        :param pulumi.Input[str] configuration_sync: Configuration sync mode. Valid values: `default`, `local`.
        :param pulumi.Input[str] downstream_access: Enable/disable downstream device access to this device's configuration and data. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] downstream_accprofile: Default access profile for requests from downstream devices.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input['CsfFabricConnectorArgs']]] fabric_connectors: Fabric connector configuration. The structure of `fabric_connector` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['CsfFabricDeviceArgs']]] fabric_devices: Fabric device configuration. The structure of `fabric_device` block is documented below.
        :param pulumi.Input[str] fabric_object_unification: Fabric CMDB Object Unification Valid values: `default`, `local`.
        :param pulumi.Input[int] fabric_workers: Number of worker processes for Security Fabric daemon.
        :param pulumi.Input[str] file_mgmt: Enable/disable Security Fabric daemon file management. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] file_quota: Maximum amount of memory that can be used by the daemon files (in bytes).
        :param pulumi.Input[int] file_quota_warning: Warn when the set percentage of quota has been used.
        :param pulumi.Input[str] fixed_key: Auto-generated fixed key used when this device is the root. (Will automatically be generated if not set.)
        :param pulumi.Input[str] forticloud_account_enforcement: Fabric FortiCloud account unification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_name: Security Fabric group name. All FortiGates in a Security Fabric must have the same group name.
        :param pulumi.Input[str] group_password: Security Fabric group password. All FortiGates in a Security Fabric must have the same group password.
        :param pulumi.Input[str] log_unification: Enable/disable broadcast of discovery messages for log unification. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] management_ip: Management IP address of this FortiGate. Used to log into this FortiGate from another FortiGate in the Security Fabric.
        :param pulumi.Input[int] management_port: Overriding port for management connection (Overrides admin port).
        :param pulumi.Input[str] saml_configuration_sync: SAML setting configuration synchronization. Valid values: `default`, `local`.
        :param pulumi.Input[str] status: Enable/disable Security Fabric. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['CsfTrustedListArgs']]] trusted_lists: Pre-authorized and blocked security fabric nodes. The structure of `trusted_list` block is documented below.
        :param pulumi.Input[str] uid: Unique ID of the current CSF node
        :param pulumi.Input[str] upstream: IP/FQDN of the FortiGate upstream from this FortiGate in the Security Fabric.
        :param pulumi.Input[str] upstream_ip: IP address of the FortiGate upstream from this FortiGate in the Security Fabric.
        :param pulumi.Input[int] upstream_port: The port number to use to communicate with the FortiGate upstream from this FortiGate in the Security Fabric (default = 8013).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if accept_auth_by_cert is not None:
            pulumi.set(__self__, "accept_auth_by_cert", accept_auth_by_cert)
        if authorization_request_type is not None:
            pulumi.set(__self__, "authorization_request_type", authorization_request_type)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if configuration_sync is not None:
            pulumi.set(__self__, "configuration_sync", configuration_sync)
        if downstream_access is not None:
            pulumi.set(__self__, "downstream_access", downstream_access)
        if downstream_accprofile is not None:
            pulumi.set(__self__, "downstream_accprofile", downstream_accprofile)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fabric_connectors is not None:
            pulumi.set(__self__, "fabric_connectors", fabric_connectors)
        if fabric_devices is not None:
            pulumi.set(__self__, "fabric_devices", fabric_devices)
        if fabric_object_unification is not None:
            pulumi.set(__self__, "fabric_object_unification", fabric_object_unification)
        if fabric_workers is not None:
            pulumi.set(__self__, "fabric_workers", fabric_workers)
        if file_mgmt is not None:
            pulumi.set(__self__, "file_mgmt", file_mgmt)
        if file_quota is not None:
            pulumi.set(__self__, "file_quota", file_quota)
        if file_quota_warning is not None:
            pulumi.set(__self__, "file_quota_warning", file_quota_warning)
        if fixed_key is not None:
            pulumi.set(__self__, "fixed_key", fixed_key)
        if forticloud_account_enforcement is not None:
            pulumi.set(__self__, "forticloud_account_enforcement", forticloud_account_enforcement)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if group_password is not None:
            pulumi.set(__self__, "group_password", group_password)
        if log_unification is not None:
            pulumi.set(__self__, "log_unification", log_unification)
        if management_ip is not None:
            pulumi.set(__self__, "management_ip", management_ip)
        if management_port is not None:
            pulumi.set(__self__, "management_port", management_port)
        if saml_configuration_sync is not None:
            pulumi.set(__self__, "saml_configuration_sync", saml_configuration_sync)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trusted_lists is not None:
            pulumi.set(__self__, "trusted_lists", trusted_lists)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if upstream is not None:
            pulumi.set(__self__, "upstream", upstream)
        if upstream_ip is not None:
            pulumi.set(__self__, "upstream_ip", upstream_ip)
        if upstream_port is not None:
            pulumi.set(__self__, "upstream_port", upstream_port)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="acceptAuthByCert")
    def accept_auth_by_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Accept connections with unknown certificates and ask admin for approval. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "accept_auth_by_cert")

    @accept_auth_by_cert.setter
    def accept_auth_by_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_auth_by_cert", value)

    @property
    @pulumi.getter(name="authorizationRequestType")
    def authorization_request_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization request type. Valid values: `serial`, `certificate`.
        """
        return pulumi.get(self, "authorization_request_type")

    @authorization_request_type.setter
    def authorization_request_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_request_type", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="configurationSync")
    def configuration_sync(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration sync mode. Valid values: `default`, `local`.
        """
        return pulumi.get(self, "configuration_sync")

    @configuration_sync.setter
    def configuration_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_sync", value)

    @property
    @pulumi.getter(name="downstreamAccess")
    def downstream_access(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable downstream device access to this device's configuration and data. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "downstream_access")

    @downstream_access.setter
    def downstream_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_access", value)

    @property
    @pulumi.getter(name="downstreamAccprofile")
    def downstream_accprofile(self) -> Optional[pulumi.Input[str]]:
        """
        Default access profile for requests from downstream devices.
        """
        return pulumi.get(self, "downstream_accprofile")

    @downstream_accprofile.setter
    def downstream_accprofile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_accprofile", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fabricConnectors")
    def fabric_connectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricConnectorArgs']]]]:
        """
        Fabric connector configuration. The structure of `fabric_connector` block is documented below.
        """
        return pulumi.get(self, "fabric_connectors")

    @fabric_connectors.setter
    def fabric_connectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricConnectorArgs']]]]):
        pulumi.set(self, "fabric_connectors", value)

    @property
    @pulumi.getter(name="fabricDevices")
    def fabric_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricDeviceArgs']]]]:
        """
        Fabric device configuration. The structure of `fabric_device` block is documented below.
        """
        return pulumi.get(self, "fabric_devices")

    @fabric_devices.setter
    def fabric_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CsfFabricDeviceArgs']]]]):
        pulumi.set(self, "fabric_devices", value)

    @property
    @pulumi.getter(name="fabricObjectUnification")
    def fabric_object_unification(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric CMDB Object Unification Valid values: `default`, `local`.
        """
        return pulumi.get(self, "fabric_object_unification")

    @fabric_object_unification.setter
    def fabric_object_unification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_object_unification", value)

    @property
    @pulumi.getter(name="fabricWorkers")
    def fabric_workers(self) -> Optional[pulumi.Input[int]]:
        """
        Number of worker processes for Security Fabric daemon.
        """
        return pulumi.get(self, "fabric_workers")

    @fabric_workers.setter
    def fabric_workers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fabric_workers", value)

    @property
    @pulumi.getter(name="fileMgmt")
    def file_mgmt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Security Fabric daemon file management. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "file_mgmt")

    @file_mgmt.setter
    def file_mgmt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_mgmt", value)

    @property
    @pulumi.getter(name="fileQuota")
    def file_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum amount of memory that can be used by the daemon files (in bytes).
        """
        return pulumi.get(self, "file_quota")

    @file_quota.setter
    def file_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_quota", value)

    @property
    @pulumi.getter(name="fileQuotaWarning")
    def file_quota_warning(self) -> Optional[pulumi.Input[int]]:
        """
        Warn when the set percentage of quota has been used.
        """
        return pulumi.get(self, "file_quota_warning")

    @file_quota_warning.setter
    def file_quota_warning(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_quota_warning", value)

    @property
    @pulumi.getter(name="fixedKey")
    def fixed_key(self) -> Optional[pulumi.Input[str]]:
        """
        Auto-generated fixed key used when this device is the root. (Will automatically be generated if not set.)
        """
        return pulumi.get(self, "fixed_key")

    @fixed_key.setter
    def fixed_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fixed_key", value)

    @property
    @pulumi.getter(name="forticloudAccountEnforcement")
    def forticloud_account_enforcement(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric FortiCloud account unification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticloud_account_enforcement")

    @forticloud_account_enforcement.setter
    def forticloud_account_enforcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticloud_account_enforcement", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Security Fabric group name. All FortiGates in a Security Fabric must have the same group name.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="groupPassword")
    def group_password(self) -> Optional[pulumi.Input[str]]:
        """
        Security Fabric group password. All FortiGates in a Security Fabric must have the same group password.
        """
        return pulumi.get(self, "group_password")

    @group_password.setter
    def group_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_password", value)

    @property
    @pulumi.getter(name="logUnification")
    def log_unification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable broadcast of discovery messages for log unification. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_unification")

    @log_unification.setter
    def log_unification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_unification", value)

    @property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Management IP address of this FortiGate. Used to log into this FortiGate from another FortiGate in the Security Fabric.
        """
        return pulumi.get(self, "management_ip")

    @management_ip.setter
    def management_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_ip", value)

    @property
    @pulumi.getter(name="managementPort")
    def management_port(self) -> Optional[pulumi.Input[int]]:
        """
        Overriding port for management connection (Overrides admin port).
        """
        return pulumi.get(self, "management_port")

    @management_port.setter
    def management_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "management_port", value)

    @property
    @pulumi.getter(name="samlConfigurationSync")
    def saml_configuration_sync(self) -> Optional[pulumi.Input[str]]:
        """
        SAML setting configuration synchronization. Valid values: `default`, `local`.
        """
        return pulumi.get(self, "saml_configuration_sync")

    @saml_configuration_sync.setter
    def saml_configuration_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_configuration_sync", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Security Fabric. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trustedLists")
    def trusted_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CsfTrustedListArgs']]]]:
        """
        Pre-authorized and blocked security fabric nodes. The structure of `trusted_list` block is documented below.
        """
        return pulumi.get(self, "trusted_lists")

    @trusted_lists.setter
    def trusted_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CsfTrustedListArgs']]]]):
        pulumi.set(self, "trusted_lists", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        Unique ID of the current CSF node
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter
    def upstream(self) -> Optional[pulumi.Input[str]]:
        """
        IP/FQDN of the FortiGate upstream from this FortiGate in the Security Fabric.
        """
        return pulumi.get(self, "upstream")

    @upstream.setter
    def upstream(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream", value)

    @property
    @pulumi.getter(name="upstreamIp")
    def upstream_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the FortiGate upstream from this FortiGate in the Security Fabric.
        """
        return pulumi.get(self, "upstream_ip")

    @upstream_ip.setter
    def upstream_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_ip", value)

    @property
    @pulumi.getter(name="upstreamPort")
    def upstream_port(self) -> Optional[pulumi.Input[int]]:
        """
        The port number to use to communicate with the FortiGate upstream from this FortiGate in the Security Fabric (default = 8013).
        """
        return pulumi.get(self, "upstream_port")

    @upstream_port.setter
    def upstream_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upstream_port", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Csf(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_auth_by_cert: Optional[pulumi.Input[str]] = None,
                 authorization_request_type: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 configuration_sync: Optional[pulumi.Input[str]] = None,
                 downstream_access: Optional[pulumi.Input[str]] = None,
                 downstream_accprofile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_connectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfFabricConnectorArgs']]]]] = None,
                 fabric_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfFabricDeviceArgs']]]]] = None,
                 fabric_object_unification: Optional[pulumi.Input[str]] = None,
                 fabric_workers: Optional[pulumi.Input[int]] = None,
                 file_mgmt: Optional[pulumi.Input[str]] = None,
                 file_quota: Optional[pulumi.Input[int]] = None,
                 file_quota_warning: Optional[pulumi.Input[int]] = None,
                 fixed_key: Optional[pulumi.Input[str]] = None,
                 forticloud_account_enforcement: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_password: Optional[pulumi.Input[str]] = None,
                 log_unification: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 management_port: Optional[pulumi.Input[int]] = None,
                 saml_configuration_sync: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trusted_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfTrustedListArgs']]]]] = None,
                 uid: Optional[pulumi.Input[str]] = None,
                 upstream: Optional[pulumi.Input[str]] = None,
                 upstream_ip: Optional[pulumi.Input[str]] = None,
                 upstream_port: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Add this FortiGate to a Security Fabric or set up a new Security Fabric on this FortiGate.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Csf("trname",
            configuration_sync="default",
            group_password="tmp",
            management_ip="0.0.0.0",
            management_port=33,
            status="disable",
            upstream_ip="0.0.0.0",
            upstream_port=8013)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Csf can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/csf:Csf labelname SystemCsf
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/csf:Csf labelname SystemCsf
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accept_auth_by_cert: Accept connections with unknown certificates and ask admin for approval. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] authorization_request_type: Authorization request type. Valid values: `serial`, `certificate`.
        :param pulumi.Input[str] certificate: Certificate.
        :param pulumi.Input[str] configuration_sync: Configuration sync mode. Valid values: `default`, `local`.
        :param pulumi.Input[str] downstream_access: Enable/disable downstream device access to this device's configuration and data. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] downstream_accprofile: Default access profile for requests from downstream devices.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfFabricConnectorArgs']]]] fabric_connectors: Fabric connector configuration. The structure of `fabric_connector` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfFabricDeviceArgs']]]] fabric_devices: Fabric device configuration. The structure of `fabric_device` block is documented below.
        :param pulumi.Input[str] fabric_object_unification: Fabric CMDB Object Unification Valid values: `default`, `local`.
        :param pulumi.Input[int] fabric_workers: Number of worker processes for Security Fabric daemon.
        :param pulumi.Input[str] file_mgmt: Enable/disable Security Fabric daemon file management. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] file_quota: Maximum amount of memory that can be used by the daemon files (in bytes).
        :param pulumi.Input[int] file_quota_warning: Warn when the set percentage of quota has been used.
        :param pulumi.Input[str] fixed_key: Auto-generated fixed key used when this device is the root. (Will automatically be generated if not set.)
        :param pulumi.Input[str] forticloud_account_enforcement: Fabric FortiCloud account unification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_name: Security Fabric group name. All FortiGates in a Security Fabric must have the same group name.
        :param pulumi.Input[str] group_password: Security Fabric group password. All FortiGates in a Security Fabric must have the same group password.
        :param pulumi.Input[str] log_unification: Enable/disable broadcast of discovery messages for log unification. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] management_ip: Management IP address of this FortiGate. Used to log into this FortiGate from another FortiGate in the Security Fabric.
        :param pulumi.Input[int] management_port: Overriding port for management connection (Overrides admin port).
        :param pulumi.Input[str] saml_configuration_sync: SAML setting configuration synchronization. Valid values: `default`, `local`.
        :param pulumi.Input[str] status: Enable/disable Security Fabric. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfTrustedListArgs']]]] trusted_lists: Pre-authorized and blocked security fabric nodes. The structure of `trusted_list` block is documented below.
        :param pulumi.Input[str] uid: Unique ID of the current CSF node
        :param pulumi.Input[str] upstream: IP/FQDN of the FortiGate upstream from this FortiGate in the Security Fabric.
        :param pulumi.Input[str] upstream_ip: IP address of the FortiGate upstream from this FortiGate in the Security Fabric.
        :param pulumi.Input[int] upstream_port: The port number to use to communicate with the FortiGate upstream from this FortiGate in the Security Fabric (default = 8013).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CsfArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Add this FortiGate to a Security Fabric or set up a new Security Fabric on this FortiGate.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Csf("trname",
            configuration_sync="default",
            group_password="tmp",
            management_ip="0.0.0.0",
            management_port=33,
            status="disable",
            upstream_ip="0.0.0.0",
            upstream_port=8013)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Csf can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/csf:Csf labelname SystemCsf
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/csf:Csf labelname SystemCsf
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param CsfArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CsfArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_auth_by_cert: Optional[pulumi.Input[str]] = None,
                 authorization_request_type: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 configuration_sync: Optional[pulumi.Input[str]] = None,
                 downstream_access: Optional[pulumi.Input[str]] = None,
                 downstream_accprofile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fabric_connectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfFabricConnectorArgs']]]]] = None,
                 fabric_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfFabricDeviceArgs']]]]] = None,
                 fabric_object_unification: Optional[pulumi.Input[str]] = None,
                 fabric_workers: Optional[pulumi.Input[int]] = None,
                 file_mgmt: Optional[pulumi.Input[str]] = None,
                 file_quota: Optional[pulumi.Input[int]] = None,
                 file_quota_warning: Optional[pulumi.Input[int]] = None,
                 fixed_key: Optional[pulumi.Input[str]] = None,
                 forticloud_account_enforcement: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_password: Optional[pulumi.Input[str]] = None,
                 log_unification: Optional[pulumi.Input[str]] = None,
                 management_ip: Optional[pulumi.Input[str]] = None,
                 management_port: Optional[pulumi.Input[int]] = None,
                 saml_configuration_sync: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trusted_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfTrustedListArgs']]]]] = None,
                 uid: Optional[pulumi.Input[str]] = None,
                 upstream: Optional[pulumi.Input[str]] = None,
                 upstream_ip: Optional[pulumi.Input[str]] = None,
                 upstream_port: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CsfArgs.__new__(CsfArgs)

            __props__.__dict__["accept_auth_by_cert"] = accept_auth_by_cert
            __props__.__dict__["authorization_request_type"] = authorization_request_type
            __props__.__dict__["certificate"] = certificate
            __props__.__dict__["configuration_sync"] = configuration_sync
            __props__.__dict__["downstream_access"] = downstream_access
            __props__.__dict__["downstream_accprofile"] = downstream_accprofile
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fabric_connectors"] = fabric_connectors
            __props__.__dict__["fabric_devices"] = fabric_devices
            __props__.__dict__["fabric_object_unification"] = fabric_object_unification
            __props__.__dict__["fabric_workers"] = fabric_workers
            __props__.__dict__["file_mgmt"] = file_mgmt
            __props__.__dict__["file_quota"] = file_quota
            __props__.__dict__["file_quota_warning"] = file_quota_warning
            __props__.__dict__["fixed_key"] = None if fixed_key is None else pulumi.Output.secret(fixed_key)
            __props__.__dict__["forticloud_account_enforcement"] = forticloud_account_enforcement
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["group_password"] = None if group_password is None else pulumi.Output.secret(group_password)
            __props__.__dict__["log_unification"] = log_unification
            __props__.__dict__["management_ip"] = management_ip
            __props__.__dict__["management_port"] = management_port
            __props__.__dict__["saml_configuration_sync"] = saml_configuration_sync
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["trusted_lists"] = trusted_lists
            __props__.__dict__["uid"] = uid
            __props__.__dict__["upstream"] = upstream
            __props__.__dict__["upstream_ip"] = upstream_ip
            __props__.__dict__["upstream_port"] = upstream_port
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["fixedKey", "groupPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Csf, __self__).__init__(
            'fortios:system/csf:Csf',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accept_auth_by_cert: Optional[pulumi.Input[str]] = None,
            authorization_request_type: Optional[pulumi.Input[str]] = None,
            certificate: Optional[pulumi.Input[str]] = None,
            configuration_sync: Optional[pulumi.Input[str]] = None,
            downstream_access: Optional[pulumi.Input[str]] = None,
            downstream_accprofile: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fabric_connectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfFabricConnectorArgs']]]]] = None,
            fabric_devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfFabricDeviceArgs']]]]] = None,
            fabric_object_unification: Optional[pulumi.Input[str]] = None,
            fabric_workers: Optional[pulumi.Input[int]] = None,
            file_mgmt: Optional[pulumi.Input[str]] = None,
            file_quota: Optional[pulumi.Input[int]] = None,
            file_quota_warning: Optional[pulumi.Input[int]] = None,
            fixed_key: Optional[pulumi.Input[str]] = None,
            forticloud_account_enforcement: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            group_password: Optional[pulumi.Input[str]] = None,
            log_unification: Optional[pulumi.Input[str]] = None,
            management_ip: Optional[pulumi.Input[str]] = None,
            management_port: Optional[pulumi.Input[int]] = None,
            saml_configuration_sync: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            trusted_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfTrustedListArgs']]]]] = None,
            uid: Optional[pulumi.Input[str]] = None,
            upstream: Optional[pulumi.Input[str]] = None,
            upstream_ip: Optional[pulumi.Input[str]] = None,
            upstream_port: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Csf':
        """
        Get an existing Csf resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accept_auth_by_cert: Accept connections with unknown certificates and ask admin for approval. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] authorization_request_type: Authorization request type. Valid values: `serial`, `certificate`.
        :param pulumi.Input[str] certificate: Certificate.
        :param pulumi.Input[str] configuration_sync: Configuration sync mode. Valid values: `default`, `local`.
        :param pulumi.Input[str] downstream_access: Enable/disable downstream device access to this device's configuration and data. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] downstream_accprofile: Default access profile for requests from downstream devices.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfFabricConnectorArgs']]]] fabric_connectors: Fabric connector configuration. The structure of `fabric_connector` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfFabricDeviceArgs']]]] fabric_devices: Fabric device configuration. The structure of `fabric_device` block is documented below.
        :param pulumi.Input[str] fabric_object_unification: Fabric CMDB Object Unification Valid values: `default`, `local`.
        :param pulumi.Input[int] fabric_workers: Number of worker processes for Security Fabric daemon.
        :param pulumi.Input[str] file_mgmt: Enable/disable Security Fabric daemon file management. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] file_quota: Maximum amount of memory that can be used by the daemon files (in bytes).
        :param pulumi.Input[int] file_quota_warning: Warn when the set percentage of quota has been used.
        :param pulumi.Input[str] fixed_key: Auto-generated fixed key used when this device is the root. (Will automatically be generated if not set.)
        :param pulumi.Input[str] forticloud_account_enforcement: Fabric FortiCloud account unification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_name: Security Fabric group name. All FortiGates in a Security Fabric must have the same group name.
        :param pulumi.Input[str] group_password: Security Fabric group password. All FortiGates in a Security Fabric must have the same group password.
        :param pulumi.Input[str] log_unification: Enable/disable broadcast of discovery messages for log unification. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] management_ip: Management IP address of this FortiGate. Used to log into this FortiGate from another FortiGate in the Security Fabric.
        :param pulumi.Input[int] management_port: Overriding port for management connection (Overrides admin port).
        :param pulumi.Input[str] saml_configuration_sync: SAML setting configuration synchronization. Valid values: `default`, `local`.
        :param pulumi.Input[str] status: Enable/disable Security Fabric. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CsfTrustedListArgs']]]] trusted_lists: Pre-authorized and blocked security fabric nodes. The structure of `trusted_list` block is documented below.
        :param pulumi.Input[str] uid: Unique ID of the current CSF node
        :param pulumi.Input[str] upstream: IP/FQDN of the FortiGate upstream from this FortiGate in the Security Fabric.
        :param pulumi.Input[str] upstream_ip: IP address of the FortiGate upstream from this FortiGate in the Security Fabric.
        :param pulumi.Input[int] upstream_port: The port number to use to communicate with the FortiGate upstream from this FortiGate in the Security Fabric (default = 8013).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CsfState.__new__(_CsfState)

        __props__.__dict__["accept_auth_by_cert"] = accept_auth_by_cert
        __props__.__dict__["authorization_request_type"] = authorization_request_type
        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["configuration_sync"] = configuration_sync
        __props__.__dict__["downstream_access"] = downstream_access
        __props__.__dict__["downstream_accprofile"] = downstream_accprofile
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fabric_connectors"] = fabric_connectors
        __props__.__dict__["fabric_devices"] = fabric_devices
        __props__.__dict__["fabric_object_unification"] = fabric_object_unification
        __props__.__dict__["fabric_workers"] = fabric_workers
        __props__.__dict__["file_mgmt"] = file_mgmt
        __props__.__dict__["file_quota"] = file_quota
        __props__.__dict__["file_quota_warning"] = file_quota_warning
        __props__.__dict__["fixed_key"] = fixed_key
        __props__.__dict__["forticloud_account_enforcement"] = forticloud_account_enforcement
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["group_password"] = group_password
        __props__.__dict__["log_unification"] = log_unification
        __props__.__dict__["management_ip"] = management_ip
        __props__.__dict__["management_port"] = management_port
        __props__.__dict__["saml_configuration_sync"] = saml_configuration_sync
        __props__.__dict__["status"] = status
        __props__.__dict__["trusted_lists"] = trusted_lists
        __props__.__dict__["uid"] = uid
        __props__.__dict__["upstream"] = upstream
        __props__.__dict__["upstream_ip"] = upstream_ip
        __props__.__dict__["upstream_port"] = upstream_port
        __props__.__dict__["vdomparam"] = vdomparam
        return Csf(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acceptAuthByCert")
    def accept_auth_by_cert(self) -> pulumi.Output[str]:
        """
        Accept connections with unknown certificates and ask admin for approval. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "accept_auth_by_cert")

    @property
    @pulumi.getter(name="authorizationRequestType")
    def authorization_request_type(self) -> pulumi.Output[str]:
        """
        Authorization request type. Valid values: `serial`, `certificate`.
        """
        return pulumi.get(self, "authorization_request_type")

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[str]:
        """
        Certificate.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="configurationSync")
    def configuration_sync(self) -> pulumi.Output[str]:
        """
        Configuration sync mode. Valid values: `default`, `local`.
        """
        return pulumi.get(self, "configuration_sync")

    @property
    @pulumi.getter(name="downstreamAccess")
    def downstream_access(self) -> pulumi.Output[str]:
        """
        Enable/disable downstream device access to this device's configuration and data. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "downstream_access")

    @property
    @pulumi.getter(name="downstreamAccprofile")
    def downstream_accprofile(self) -> pulumi.Output[str]:
        """
        Default access profile for requests from downstream devices.
        """
        return pulumi.get(self, "downstream_accprofile")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="fabricConnectors")
    def fabric_connectors(self) -> pulumi.Output[Optional[Sequence['outputs.CsfFabricConnector']]]:
        """
        Fabric connector configuration. The structure of `fabric_connector` block is documented below.
        """
        return pulumi.get(self, "fabric_connectors")

    @property
    @pulumi.getter(name="fabricDevices")
    def fabric_devices(self) -> pulumi.Output[Optional[Sequence['outputs.CsfFabricDevice']]]:
        """
        Fabric device configuration. The structure of `fabric_device` block is documented below.
        """
        return pulumi.get(self, "fabric_devices")

    @property
    @pulumi.getter(name="fabricObjectUnification")
    def fabric_object_unification(self) -> pulumi.Output[str]:
        """
        Fabric CMDB Object Unification Valid values: `default`, `local`.
        """
        return pulumi.get(self, "fabric_object_unification")

    @property
    @pulumi.getter(name="fabricWorkers")
    def fabric_workers(self) -> pulumi.Output[int]:
        """
        Number of worker processes for Security Fabric daemon.
        """
        return pulumi.get(self, "fabric_workers")

    @property
    @pulumi.getter(name="fileMgmt")
    def file_mgmt(self) -> pulumi.Output[str]:
        """
        Enable/disable Security Fabric daemon file management. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "file_mgmt")

    @property
    @pulumi.getter(name="fileQuota")
    def file_quota(self) -> pulumi.Output[int]:
        """
        Maximum amount of memory that can be used by the daemon files (in bytes).
        """
        return pulumi.get(self, "file_quota")

    @property
    @pulumi.getter(name="fileQuotaWarning")
    def file_quota_warning(self) -> pulumi.Output[int]:
        """
        Warn when the set percentage of quota has been used.
        """
        return pulumi.get(self, "file_quota_warning")

    @property
    @pulumi.getter(name="fixedKey")
    def fixed_key(self) -> pulumi.Output[Optional[str]]:
        """
        Auto-generated fixed key used when this device is the root. (Will automatically be generated if not set.)
        """
        return pulumi.get(self, "fixed_key")

    @property
    @pulumi.getter(name="forticloudAccountEnforcement")
    def forticloud_account_enforcement(self) -> pulumi.Output[str]:
        """
        Fabric FortiCloud account unification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticloud_account_enforcement")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[str]:
        """
        Security Fabric group name. All FortiGates in a Security Fabric must have the same group name.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="groupPassword")
    def group_password(self) -> pulumi.Output[Optional[str]]:
        """
        Security Fabric group password. All FortiGates in a Security Fabric must have the same group password.
        """
        return pulumi.get(self, "group_password")

    @property
    @pulumi.getter(name="logUnification")
    def log_unification(self) -> pulumi.Output[str]:
        """
        Enable/disable broadcast of discovery messages for log unification. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_unification")

    @property
    @pulumi.getter(name="managementIp")
    def management_ip(self) -> pulumi.Output[str]:
        """
        Management IP address of this FortiGate. Used to log into this FortiGate from another FortiGate in the Security Fabric.
        """
        return pulumi.get(self, "management_ip")

    @property
    @pulumi.getter(name="managementPort")
    def management_port(self) -> pulumi.Output[int]:
        """
        Overriding port for management connection (Overrides admin port).
        """
        return pulumi.get(self, "management_port")

    @property
    @pulumi.getter(name="samlConfigurationSync")
    def saml_configuration_sync(self) -> pulumi.Output[str]:
        """
        SAML setting configuration synchronization. Valid values: `default`, `local`.
        """
        return pulumi.get(self, "saml_configuration_sync")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable Security Fabric. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trustedLists")
    def trusted_lists(self) -> pulumi.Output[Optional[Sequence['outputs.CsfTrustedList']]]:
        """
        Pre-authorized and blocked security fabric nodes. The structure of `trusted_list` block is documented below.
        """
        return pulumi.get(self, "trusted_lists")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        Unique ID of the current CSF node
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter
    def upstream(self) -> pulumi.Output[str]:
        """
        IP/FQDN of the FortiGate upstream from this FortiGate in the Security Fabric.
        """
        return pulumi.get(self, "upstream")

    @property
    @pulumi.getter(name="upstreamIp")
    def upstream_ip(self) -> pulumi.Output[str]:
        """
        IP address of the FortiGate upstream from this FortiGate in the Security Fabric.
        """
        return pulumi.get(self, "upstream_ip")

    @property
    @pulumi.getter(name="upstreamPort")
    def upstream_port(self) -> pulumi.Output[int]:
        """
        The port number to use to communicate with the FortiGate upstream from this FortiGate in the Security Fabric (default = 8013).
        """
        return pulumi.get(self, "upstream_port")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

