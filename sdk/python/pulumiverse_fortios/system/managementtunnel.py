# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ManagementtunnelArgs', 'Managementtunnel']

@pulumi.input_type
class ManagementtunnelArgs:
    def __init__(__self__, *,
                 allow_collect_statistics: Optional[pulumi.Input[str]] = None,
                 allow_config_restore: Optional[pulumi.Input[str]] = None,
                 allow_push_configuration: Optional[pulumi.Input[str]] = None,
                 allow_push_firmware: Optional[pulumi.Input[str]] = None,
                 authorized_manager_only: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Managementtunnel resource.
        :param pulumi.Input[str] allow_collect_statistics: Enable/disable collection of run time statistics. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_config_restore: Enable/disable allow config restore. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_configuration: Enable/disable push configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_firmware: Enable/disable push firmware. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] authorized_manager_only: Enable/disable restriction of authorized manager only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] serial_number: Serial number.
        :param pulumi.Input[str] status: Enable/disable FGFM tunnel. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if allow_collect_statistics is not None:
            pulumi.set(__self__, "allow_collect_statistics", allow_collect_statistics)
        if allow_config_restore is not None:
            pulumi.set(__self__, "allow_config_restore", allow_config_restore)
        if allow_push_configuration is not None:
            pulumi.set(__self__, "allow_push_configuration", allow_push_configuration)
        if allow_push_firmware is not None:
            pulumi.set(__self__, "allow_push_firmware", allow_push_firmware)
        if authorized_manager_only is not None:
            pulumi.set(__self__, "authorized_manager_only", authorized_manager_only)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="allowCollectStatistics")
    def allow_collect_statistics(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable collection of run time statistics. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_collect_statistics")

    @allow_collect_statistics.setter
    def allow_collect_statistics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_collect_statistics", value)

    @property
    @pulumi.getter(name="allowConfigRestore")
    def allow_config_restore(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow config restore. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_config_restore")

    @allow_config_restore.setter
    def allow_config_restore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_config_restore", value)

    @property
    @pulumi.getter(name="allowPushConfiguration")
    def allow_push_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable push configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_push_configuration")

    @allow_push_configuration.setter
    def allow_push_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_push_configuration", value)

    @property
    @pulumi.getter(name="allowPushFirmware")
    def allow_push_firmware(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable push firmware. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_push_firmware")

    @allow_push_firmware.setter
    def allow_push_firmware(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_push_firmware", value)

    @property
    @pulumi.getter(name="authorizedManagerOnly")
    def authorized_manager_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable restriction of authorized manager only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authorized_manager_only")

    @authorized_manager_only.setter
    def authorized_manager_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorized_manager_only", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FGFM tunnel. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ManagementtunnelState:
    def __init__(__self__, *,
                 allow_collect_statistics: Optional[pulumi.Input[str]] = None,
                 allow_config_restore: Optional[pulumi.Input[str]] = None,
                 allow_push_configuration: Optional[pulumi.Input[str]] = None,
                 allow_push_firmware: Optional[pulumi.Input[str]] = None,
                 authorized_manager_only: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Managementtunnel resources.
        :param pulumi.Input[str] allow_collect_statistics: Enable/disable collection of run time statistics. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_config_restore: Enable/disable allow config restore. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_configuration: Enable/disable push configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_firmware: Enable/disable push firmware. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] authorized_manager_only: Enable/disable restriction of authorized manager only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] serial_number: Serial number.
        :param pulumi.Input[str] status: Enable/disable FGFM tunnel. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if allow_collect_statistics is not None:
            pulumi.set(__self__, "allow_collect_statistics", allow_collect_statistics)
        if allow_config_restore is not None:
            pulumi.set(__self__, "allow_config_restore", allow_config_restore)
        if allow_push_configuration is not None:
            pulumi.set(__self__, "allow_push_configuration", allow_push_configuration)
        if allow_push_firmware is not None:
            pulumi.set(__self__, "allow_push_firmware", allow_push_firmware)
        if authorized_manager_only is not None:
            pulumi.set(__self__, "authorized_manager_only", authorized_manager_only)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="allowCollectStatistics")
    def allow_collect_statistics(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable collection of run time statistics. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_collect_statistics")

    @allow_collect_statistics.setter
    def allow_collect_statistics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_collect_statistics", value)

    @property
    @pulumi.getter(name="allowConfigRestore")
    def allow_config_restore(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow config restore. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_config_restore")

    @allow_config_restore.setter
    def allow_config_restore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_config_restore", value)

    @property
    @pulumi.getter(name="allowPushConfiguration")
    def allow_push_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable push configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_push_configuration")

    @allow_push_configuration.setter
    def allow_push_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_push_configuration", value)

    @property
    @pulumi.getter(name="allowPushFirmware")
    def allow_push_firmware(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable push firmware. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_push_firmware")

    @allow_push_firmware.setter
    def allow_push_firmware(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allow_push_firmware", value)

    @property
    @pulumi.getter(name="authorizedManagerOnly")
    def authorized_manager_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable restriction of authorized manager only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authorized_manager_only")

    @authorized_manager_only.setter
    def authorized_manager_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorized_manager_only", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FGFM tunnel. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Managementtunnel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_collect_statistics: Optional[pulumi.Input[str]] = None,
                 allow_config_restore: Optional[pulumi.Input[str]] = None,
                 allow_push_configuration: Optional[pulumi.Input[str]] = None,
                 allow_push_firmware: Optional[pulumi.Input[str]] = None,
                 authorized_manager_only: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Management tunnel configuration.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Managementtunnel("trname",
            allow_collect_statistics="enable",
            allow_config_restore="enable",
            allow_push_configuration="enable",
            allow_push_firmware="enable",
            authorized_manager_only="enable",
            status="enable")
        ```

        ## Import

        System ManagementTunnel can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/managementtunnel:Managementtunnel labelname SystemManagementTunnel
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/managementtunnel:Managementtunnel labelname SystemManagementTunnel
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allow_collect_statistics: Enable/disable collection of run time statistics. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_config_restore: Enable/disable allow config restore. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_configuration: Enable/disable push configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_firmware: Enable/disable push firmware. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] authorized_manager_only: Enable/disable restriction of authorized manager only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] serial_number: Serial number.
        :param pulumi.Input[str] status: Enable/disable FGFM tunnel. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ManagementtunnelArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Management tunnel configuration.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Managementtunnel("trname",
            allow_collect_statistics="enable",
            allow_config_restore="enable",
            allow_push_configuration="enable",
            allow_push_firmware="enable",
            authorized_manager_only="enable",
            status="enable")
        ```

        ## Import

        System ManagementTunnel can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/managementtunnel:Managementtunnel labelname SystemManagementTunnel
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/managementtunnel:Managementtunnel labelname SystemManagementTunnel
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ManagementtunnelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ManagementtunnelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_collect_statistics: Optional[pulumi.Input[str]] = None,
                 allow_config_restore: Optional[pulumi.Input[str]] = None,
                 allow_push_configuration: Optional[pulumi.Input[str]] = None,
                 allow_push_firmware: Optional[pulumi.Input[str]] = None,
                 authorized_manager_only: Optional[pulumi.Input[str]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ManagementtunnelArgs.__new__(ManagementtunnelArgs)

            __props__.__dict__["allow_collect_statistics"] = allow_collect_statistics
            __props__.__dict__["allow_config_restore"] = allow_config_restore
            __props__.__dict__["allow_push_configuration"] = allow_push_configuration
            __props__.__dict__["allow_push_firmware"] = allow_push_firmware
            __props__.__dict__["authorized_manager_only"] = authorized_manager_only
            __props__.__dict__["serial_number"] = serial_number
            __props__.__dict__["status"] = status
            __props__.__dict__["vdomparam"] = vdomparam
        super(Managementtunnel, __self__).__init__(
            'fortios:system/managementtunnel:Managementtunnel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_collect_statistics: Optional[pulumi.Input[str]] = None,
            allow_config_restore: Optional[pulumi.Input[str]] = None,
            allow_push_configuration: Optional[pulumi.Input[str]] = None,
            allow_push_firmware: Optional[pulumi.Input[str]] = None,
            authorized_manager_only: Optional[pulumi.Input[str]] = None,
            serial_number: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Managementtunnel':
        """
        Get an existing Managementtunnel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allow_collect_statistics: Enable/disable collection of run time statistics. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_config_restore: Enable/disable allow config restore. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_configuration: Enable/disable push configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allow_push_firmware: Enable/disable push firmware. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] authorized_manager_only: Enable/disable restriction of authorized manager only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] serial_number: Serial number.
        :param pulumi.Input[str] status: Enable/disable FGFM tunnel. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ManagementtunnelState.__new__(_ManagementtunnelState)

        __props__.__dict__["allow_collect_statistics"] = allow_collect_statistics
        __props__.__dict__["allow_config_restore"] = allow_config_restore
        __props__.__dict__["allow_push_configuration"] = allow_push_configuration
        __props__.__dict__["allow_push_firmware"] = allow_push_firmware
        __props__.__dict__["authorized_manager_only"] = authorized_manager_only
        __props__.__dict__["serial_number"] = serial_number
        __props__.__dict__["status"] = status
        __props__.__dict__["vdomparam"] = vdomparam
        return Managementtunnel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowCollectStatistics")
    def allow_collect_statistics(self) -> pulumi.Output[str]:
        """
        Enable/disable collection of run time statistics. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_collect_statistics")

    @property
    @pulumi.getter(name="allowConfigRestore")
    def allow_config_restore(self) -> pulumi.Output[str]:
        """
        Enable/disable allow config restore. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_config_restore")

    @property
    @pulumi.getter(name="allowPushConfiguration")
    def allow_push_configuration(self) -> pulumi.Output[str]:
        """
        Enable/disable push configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_push_configuration")

    @property
    @pulumi.getter(name="allowPushFirmware")
    def allow_push_firmware(self) -> pulumi.Output[str]:
        """
        Enable/disable push firmware. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allow_push_firmware")

    @property
    @pulumi.getter(name="authorizedManagerOnly")
    def authorized_manager_only(self) -> pulumi.Output[str]:
        """
        Enable/disable restriction of authorized manager only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authorized_manager_only")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Output[str]:
        """
        Serial number.
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable FGFM tunnel. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

