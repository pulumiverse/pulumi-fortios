# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccprofileArgs', 'Accprofile']

@pulumi.input_type
class AccprofileArgs:
    def __init__(__self__, *,
                 admintimeout: Optional[pulumi.Input[int]] = None,
                 admintimeout_override: Optional[pulumi.Input[str]] = None,
                 authgrp: Optional[pulumi.Input[str]] = None,
                 cli_config: Optional[pulumi.Input[str]] = None,
                 cli_diagnose: Optional[pulumi.Input[str]] = None,
                 cli_exec: Optional[pulumi.Input[str]] = None,
                 cli_get: Optional[pulumi.Input[str]] = None,
                 cli_show: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 ftviewgrp: Optional[pulumi.Input[str]] = None,
                 fwgrp: Optional[pulumi.Input[str]] = None,
                 fwgrp_permission: Optional[pulumi.Input['AccprofileFwgrpPermissionArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 loggrp: Optional[pulumi.Input[str]] = None,
                 loggrp_permission: Optional[pulumi.Input['AccprofileLoggrpPermissionArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 netgrp: Optional[pulumi.Input[str]] = None,
                 netgrp_permission: Optional[pulumi.Input['AccprofileNetgrpPermissionArgs']] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 secfabgrp: Optional[pulumi.Input[str]] = None,
                 sysgrp: Optional[pulumi.Input[str]] = None,
                 sysgrp_permission: Optional[pulumi.Input['AccprofileSysgrpPermissionArgs']] = None,
                 system_diagnostics: Optional[pulumi.Input[str]] = None,
                 system_execute_ssh: Optional[pulumi.Input[str]] = None,
                 system_execute_telnet: Optional[pulumi.Input[str]] = None,
                 utmgrp: Optional[pulumi.Input[str]] = None,
                 utmgrp_permission: Optional[pulumi.Input['AccprofileUtmgrpPermissionArgs']] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpngrp: Optional[pulumi.Input[str]] = None,
                 wanoptgrp: Optional[pulumi.Input[str]] = None,
                 wifi: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Accprofile resource.
        :param pulumi.Input[int] admintimeout: Administrator timeout for this access profile (0 - 480 min, default = 10, 0 means never timeout).
        :param pulumi.Input[str] admintimeout_override: Enable/disable overriding the global administrator idle timeout. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] authgrp: Administrator access to Users and Devices. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] cli_config: Enable/disable permission to run config commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_diagnose: Enable/disable permission to run diagnostic commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_exec: Enable/disable permission to run execute commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_get: Enable/disable permission to run get commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_show: Enable/disable permission to run show commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] ftviewgrp: FortiView. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] fwgrp: Administrator access to the Firewall configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input['AccprofileFwgrpPermissionArgs'] fwgrp_permission: Custom firewall permission. The structure of `fwgrp_permission` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] loggrp: Administrator access to Logging and Reporting including viewing log messages. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input['AccprofileLoggrpPermissionArgs'] loggrp_permission: Custom Log & Report permission. The structure of `loggrp_permission` block is documented below.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] netgrp: Network Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input['AccprofileNetgrpPermissionArgs'] netgrp_permission: Custom network permission. The structure of `netgrp_permission` block is documented below.
        :param pulumi.Input[str] scope: Scope of admin access: global or specific VDOM(s). Valid values: `vdom`, `global`.
        :param pulumi.Input[str] secfabgrp: Security Fabric. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] sysgrp: System Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input['AccprofileSysgrpPermissionArgs'] sysgrp_permission: Custom system permission. The structure of `sysgrp_permission` block is documented below.
        :param pulumi.Input[str] system_diagnostics: Enable/disable permission to run system diagnostic commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] system_execute_ssh: Enable/disable permission to execute SSH commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] system_execute_telnet: Enable/disable permission to execute TELNET commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] utmgrp: Administrator access to Security Profiles. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input['AccprofileUtmgrpPermissionArgs'] utmgrp_permission: Custom Security Profile permissions. The structure of `utmgrp_permission` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vpngrp: Administrator access to IPsec, SSL, PPTP, and L2TP VPN. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] wanoptgrp: Administrator access to WAN Opt & Cache. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] wifi: Administrator access to the WiFi controller and Switch controller. Valid values: `none`, `read`, `read-write`.
        """
        if admintimeout is not None:
            pulumi.set(__self__, "admintimeout", admintimeout)
        if admintimeout_override is not None:
            pulumi.set(__self__, "admintimeout_override", admintimeout_override)
        if authgrp is not None:
            pulumi.set(__self__, "authgrp", authgrp)
        if cli_config is not None:
            pulumi.set(__self__, "cli_config", cli_config)
        if cli_diagnose is not None:
            pulumi.set(__self__, "cli_diagnose", cli_diagnose)
        if cli_exec is not None:
            pulumi.set(__self__, "cli_exec", cli_exec)
        if cli_get is not None:
            pulumi.set(__self__, "cli_get", cli_get)
        if cli_show is not None:
            pulumi.set(__self__, "cli_show", cli_show)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if ftviewgrp is not None:
            pulumi.set(__self__, "ftviewgrp", ftviewgrp)
        if fwgrp is not None:
            pulumi.set(__self__, "fwgrp", fwgrp)
        if fwgrp_permission is not None:
            pulumi.set(__self__, "fwgrp_permission", fwgrp_permission)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if loggrp is not None:
            pulumi.set(__self__, "loggrp", loggrp)
        if loggrp_permission is not None:
            pulumi.set(__self__, "loggrp_permission", loggrp_permission)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if netgrp is not None:
            pulumi.set(__self__, "netgrp", netgrp)
        if netgrp_permission is not None:
            pulumi.set(__self__, "netgrp_permission", netgrp_permission)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if secfabgrp is not None:
            pulumi.set(__self__, "secfabgrp", secfabgrp)
        if sysgrp is not None:
            pulumi.set(__self__, "sysgrp", sysgrp)
        if sysgrp_permission is not None:
            pulumi.set(__self__, "sysgrp_permission", sysgrp_permission)
        if system_diagnostics is not None:
            pulumi.set(__self__, "system_diagnostics", system_diagnostics)
        if system_execute_ssh is not None:
            pulumi.set(__self__, "system_execute_ssh", system_execute_ssh)
        if system_execute_telnet is not None:
            pulumi.set(__self__, "system_execute_telnet", system_execute_telnet)
        if utmgrp is not None:
            pulumi.set(__self__, "utmgrp", utmgrp)
        if utmgrp_permission is not None:
            pulumi.set(__self__, "utmgrp_permission", utmgrp_permission)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vpngrp is not None:
            pulumi.set(__self__, "vpngrp", vpngrp)
        if wanoptgrp is not None:
            pulumi.set(__self__, "wanoptgrp", wanoptgrp)
        if wifi is not None:
            pulumi.set(__self__, "wifi", wifi)

    @property
    @pulumi.getter
    def admintimeout(self) -> Optional[pulumi.Input[int]]:
        """
        Administrator timeout for this access profile (0 - 480 min, default = 10, 0 means never timeout).
        """
        return pulumi.get(self, "admintimeout")

    @admintimeout.setter
    def admintimeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admintimeout", value)

    @property
    @pulumi.getter(name="admintimeoutOverride")
    def admintimeout_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the global administrator idle timeout. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "admintimeout_override")

    @admintimeout_override.setter
    def admintimeout_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admintimeout_override", value)

    @property
    @pulumi.getter
    def authgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator access to Users and Devices. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "authgrp")

    @authgrp.setter
    def authgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authgrp", value)

    @property
    @pulumi.getter(name="cliConfig")
    def cli_config(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to run config commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_config")

    @cli_config.setter
    def cli_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_config", value)

    @property
    @pulumi.getter(name="cliDiagnose")
    def cli_diagnose(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to run diagnostic commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_diagnose")

    @cli_diagnose.setter
    def cli_diagnose(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_diagnose", value)

    @property
    @pulumi.getter(name="cliExec")
    def cli_exec(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to run execute commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_exec")

    @cli_exec.setter
    def cli_exec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_exec", value)

    @property
    @pulumi.getter(name="cliGet")
    def cli_get(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to run get commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_get")

    @cli_get.setter
    def cli_get(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_get", value)

    @property
    @pulumi.getter(name="cliShow")
    def cli_show(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to run show commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_show")

    @cli_show.setter
    def cli_show(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_show", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def ftviewgrp(self) -> Optional[pulumi.Input[str]]:
        """
        FortiView. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "ftviewgrp")

    @ftviewgrp.setter
    def ftviewgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftviewgrp", value)

    @property
    @pulumi.getter
    def fwgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator access to the Firewall configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "fwgrp")

    @fwgrp.setter
    def fwgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fwgrp", value)

    @property
    @pulumi.getter(name="fwgrpPermission")
    def fwgrp_permission(self) -> Optional[pulumi.Input['AccprofileFwgrpPermissionArgs']]:
        """
        Custom firewall permission. The structure of `fwgrp_permission` block is documented below.
        """
        return pulumi.get(self, "fwgrp_permission")

    @fwgrp_permission.setter
    def fwgrp_permission(self, value: Optional[pulumi.Input['AccprofileFwgrpPermissionArgs']]):
        pulumi.set(self, "fwgrp_permission", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def loggrp(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator access to Logging and Reporting including viewing log messages. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "loggrp")

    @loggrp.setter
    def loggrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loggrp", value)

    @property
    @pulumi.getter(name="loggrpPermission")
    def loggrp_permission(self) -> Optional[pulumi.Input['AccprofileLoggrpPermissionArgs']]:
        """
        Custom Log & Report permission. The structure of `loggrp_permission` block is documented below.
        """
        return pulumi.get(self, "loggrp_permission")

    @loggrp_permission.setter
    def loggrp_permission(self, value: Optional[pulumi.Input['AccprofileLoggrpPermissionArgs']]):
        pulumi.set(self, "loggrp_permission", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def netgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Network Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "netgrp")

    @netgrp.setter
    def netgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netgrp", value)

    @property
    @pulumi.getter(name="netgrpPermission")
    def netgrp_permission(self) -> Optional[pulumi.Input['AccprofileNetgrpPermissionArgs']]:
        """
        Custom network permission. The structure of `netgrp_permission` block is documented below.
        """
        return pulumi.get(self, "netgrp_permission")

    @netgrp_permission.setter
    def netgrp_permission(self, value: Optional[pulumi.Input['AccprofileNetgrpPermissionArgs']]):
        pulumi.set(self, "netgrp_permission", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        Scope of admin access: global or specific VDOM(s). Valid values: `vdom`, `global`.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def secfabgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Security Fabric. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "secfabgrp")

    @secfabgrp.setter
    def secfabgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secfabgrp", value)

    @property
    @pulumi.getter
    def sysgrp(self) -> Optional[pulumi.Input[str]]:
        """
        System Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "sysgrp")

    @sysgrp.setter
    def sysgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sysgrp", value)

    @property
    @pulumi.getter(name="sysgrpPermission")
    def sysgrp_permission(self) -> Optional[pulumi.Input['AccprofileSysgrpPermissionArgs']]:
        """
        Custom system permission. The structure of `sysgrp_permission` block is documented below.
        """
        return pulumi.get(self, "sysgrp_permission")

    @sysgrp_permission.setter
    def sysgrp_permission(self, value: Optional[pulumi.Input['AccprofileSysgrpPermissionArgs']]):
        pulumi.set(self, "sysgrp_permission", value)

    @property
    @pulumi.getter(name="systemDiagnostics")
    def system_diagnostics(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to run system diagnostic commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "system_diagnostics")

    @system_diagnostics.setter
    def system_diagnostics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_diagnostics", value)

    @property
    @pulumi.getter(name="systemExecuteSsh")
    def system_execute_ssh(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to execute SSH commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "system_execute_ssh")

    @system_execute_ssh.setter
    def system_execute_ssh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_execute_ssh", value)

    @property
    @pulumi.getter(name="systemExecuteTelnet")
    def system_execute_telnet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to execute TELNET commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "system_execute_telnet")

    @system_execute_telnet.setter
    def system_execute_telnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_execute_telnet", value)

    @property
    @pulumi.getter
    def utmgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator access to Security Profiles. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "utmgrp")

    @utmgrp.setter
    def utmgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utmgrp", value)

    @property
    @pulumi.getter(name="utmgrpPermission")
    def utmgrp_permission(self) -> Optional[pulumi.Input['AccprofileUtmgrpPermissionArgs']]:
        """
        Custom Security Profile permissions. The structure of `utmgrp_permission` block is documented below.
        """
        return pulumi.get(self, "utmgrp_permission")

    @utmgrp_permission.setter
    def utmgrp_permission(self, value: Optional[pulumi.Input['AccprofileUtmgrpPermissionArgs']]):
        pulumi.set(self, "utmgrp_permission", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vpngrp(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator access to IPsec, SSL, PPTP, and L2TP VPN. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "vpngrp")

    @vpngrp.setter
    def vpngrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpngrp", value)

    @property
    @pulumi.getter
    def wanoptgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator access to WAN Opt & Cache. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "wanoptgrp")

    @wanoptgrp.setter
    def wanoptgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanoptgrp", value)

    @property
    @pulumi.getter
    def wifi(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator access to the WiFi controller and Switch controller. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "wifi")

    @wifi.setter
    def wifi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi", value)


@pulumi.input_type
class _AccprofileState:
    def __init__(__self__, *,
                 admintimeout: Optional[pulumi.Input[int]] = None,
                 admintimeout_override: Optional[pulumi.Input[str]] = None,
                 authgrp: Optional[pulumi.Input[str]] = None,
                 cli_config: Optional[pulumi.Input[str]] = None,
                 cli_diagnose: Optional[pulumi.Input[str]] = None,
                 cli_exec: Optional[pulumi.Input[str]] = None,
                 cli_get: Optional[pulumi.Input[str]] = None,
                 cli_show: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 ftviewgrp: Optional[pulumi.Input[str]] = None,
                 fwgrp: Optional[pulumi.Input[str]] = None,
                 fwgrp_permission: Optional[pulumi.Input['AccprofileFwgrpPermissionArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 loggrp: Optional[pulumi.Input[str]] = None,
                 loggrp_permission: Optional[pulumi.Input['AccprofileLoggrpPermissionArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 netgrp: Optional[pulumi.Input[str]] = None,
                 netgrp_permission: Optional[pulumi.Input['AccprofileNetgrpPermissionArgs']] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 secfabgrp: Optional[pulumi.Input[str]] = None,
                 sysgrp: Optional[pulumi.Input[str]] = None,
                 sysgrp_permission: Optional[pulumi.Input['AccprofileSysgrpPermissionArgs']] = None,
                 system_diagnostics: Optional[pulumi.Input[str]] = None,
                 system_execute_ssh: Optional[pulumi.Input[str]] = None,
                 system_execute_telnet: Optional[pulumi.Input[str]] = None,
                 utmgrp: Optional[pulumi.Input[str]] = None,
                 utmgrp_permission: Optional[pulumi.Input['AccprofileUtmgrpPermissionArgs']] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpngrp: Optional[pulumi.Input[str]] = None,
                 wanoptgrp: Optional[pulumi.Input[str]] = None,
                 wifi: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Accprofile resources.
        :param pulumi.Input[int] admintimeout: Administrator timeout for this access profile (0 - 480 min, default = 10, 0 means never timeout).
        :param pulumi.Input[str] admintimeout_override: Enable/disable overriding the global administrator idle timeout. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] authgrp: Administrator access to Users and Devices. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] cli_config: Enable/disable permission to run config commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_diagnose: Enable/disable permission to run diagnostic commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_exec: Enable/disable permission to run execute commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_get: Enable/disable permission to run get commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_show: Enable/disable permission to run show commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] ftviewgrp: FortiView. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] fwgrp: Administrator access to the Firewall configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input['AccprofileFwgrpPermissionArgs'] fwgrp_permission: Custom firewall permission. The structure of `fwgrp_permission` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] loggrp: Administrator access to Logging and Reporting including viewing log messages. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input['AccprofileLoggrpPermissionArgs'] loggrp_permission: Custom Log & Report permission. The structure of `loggrp_permission` block is documented below.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] netgrp: Network Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input['AccprofileNetgrpPermissionArgs'] netgrp_permission: Custom network permission. The structure of `netgrp_permission` block is documented below.
        :param pulumi.Input[str] scope: Scope of admin access: global or specific VDOM(s). Valid values: `vdom`, `global`.
        :param pulumi.Input[str] secfabgrp: Security Fabric. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] sysgrp: System Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input['AccprofileSysgrpPermissionArgs'] sysgrp_permission: Custom system permission. The structure of `sysgrp_permission` block is documented below.
        :param pulumi.Input[str] system_diagnostics: Enable/disable permission to run system diagnostic commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] system_execute_ssh: Enable/disable permission to execute SSH commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] system_execute_telnet: Enable/disable permission to execute TELNET commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] utmgrp: Administrator access to Security Profiles. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input['AccprofileUtmgrpPermissionArgs'] utmgrp_permission: Custom Security Profile permissions. The structure of `utmgrp_permission` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vpngrp: Administrator access to IPsec, SSL, PPTP, and L2TP VPN. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] wanoptgrp: Administrator access to WAN Opt & Cache. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] wifi: Administrator access to the WiFi controller and Switch controller. Valid values: `none`, `read`, `read-write`.
        """
        if admintimeout is not None:
            pulumi.set(__self__, "admintimeout", admintimeout)
        if admintimeout_override is not None:
            pulumi.set(__self__, "admintimeout_override", admintimeout_override)
        if authgrp is not None:
            pulumi.set(__self__, "authgrp", authgrp)
        if cli_config is not None:
            pulumi.set(__self__, "cli_config", cli_config)
        if cli_diagnose is not None:
            pulumi.set(__self__, "cli_diagnose", cli_diagnose)
        if cli_exec is not None:
            pulumi.set(__self__, "cli_exec", cli_exec)
        if cli_get is not None:
            pulumi.set(__self__, "cli_get", cli_get)
        if cli_show is not None:
            pulumi.set(__self__, "cli_show", cli_show)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if ftviewgrp is not None:
            pulumi.set(__self__, "ftviewgrp", ftviewgrp)
        if fwgrp is not None:
            pulumi.set(__self__, "fwgrp", fwgrp)
        if fwgrp_permission is not None:
            pulumi.set(__self__, "fwgrp_permission", fwgrp_permission)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if loggrp is not None:
            pulumi.set(__self__, "loggrp", loggrp)
        if loggrp_permission is not None:
            pulumi.set(__self__, "loggrp_permission", loggrp_permission)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if netgrp is not None:
            pulumi.set(__self__, "netgrp", netgrp)
        if netgrp_permission is not None:
            pulumi.set(__self__, "netgrp_permission", netgrp_permission)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if secfabgrp is not None:
            pulumi.set(__self__, "secfabgrp", secfabgrp)
        if sysgrp is not None:
            pulumi.set(__self__, "sysgrp", sysgrp)
        if sysgrp_permission is not None:
            pulumi.set(__self__, "sysgrp_permission", sysgrp_permission)
        if system_diagnostics is not None:
            pulumi.set(__self__, "system_diagnostics", system_diagnostics)
        if system_execute_ssh is not None:
            pulumi.set(__self__, "system_execute_ssh", system_execute_ssh)
        if system_execute_telnet is not None:
            pulumi.set(__self__, "system_execute_telnet", system_execute_telnet)
        if utmgrp is not None:
            pulumi.set(__self__, "utmgrp", utmgrp)
        if utmgrp_permission is not None:
            pulumi.set(__self__, "utmgrp_permission", utmgrp_permission)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vpngrp is not None:
            pulumi.set(__self__, "vpngrp", vpngrp)
        if wanoptgrp is not None:
            pulumi.set(__self__, "wanoptgrp", wanoptgrp)
        if wifi is not None:
            pulumi.set(__self__, "wifi", wifi)

    @property
    @pulumi.getter
    def admintimeout(self) -> Optional[pulumi.Input[int]]:
        """
        Administrator timeout for this access profile (0 - 480 min, default = 10, 0 means never timeout).
        """
        return pulumi.get(self, "admintimeout")

    @admintimeout.setter
    def admintimeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admintimeout", value)

    @property
    @pulumi.getter(name="admintimeoutOverride")
    def admintimeout_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the global administrator idle timeout. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "admintimeout_override")

    @admintimeout_override.setter
    def admintimeout_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admintimeout_override", value)

    @property
    @pulumi.getter
    def authgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator access to Users and Devices. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "authgrp")

    @authgrp.setter
    def authgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authgrp", value)

    @property
    @pulumi.getter(name="cliConfig")
    def cli_config(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to run config commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_config")

    @cli_config.setter
    def cli_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_config", value)

    @property
    @pulumi.getter(name="cliDiagnose")
    def cli_diagnose(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to run diagnostic commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_diagnose")

    @cli_diagnose.setter
    def cli_diagnose(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_diagnose", value)

    @property
    @pulumi.getter(name="cliExec")
    def cli_exec(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to run execute commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_exec")

    @cli_exec.setter
    def cli_exec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_exec", value)

    @property
    @pulumi.getter(name="cliGet")
    def cli_get(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to run get commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_get")

    @cli_get.setter
    def cli_get(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_get", value)

    @property
    @pulumi.getter(name="cliShow")
    def cli_show(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to run show commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_show")

    @cli_show.setter
    def cli_show(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_show", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def ftviewgrp(self) -> Optional[pulumi.Input[str]]:
        """
        FortiView. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "ftviewgrp")

    @ftviewgrp.setter
    def ftviewgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftviewgrp", value)

    @property
    @pulumi.getter
    def fwgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator access to the Firewall configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "fwgrp")

    @fwgrp.setter
    def fwgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fwgrp", value)

    @property
    @pulumi.getter(name="fwgrpPermission")
    def fwgrp_permission(self) -> Optional[pulumi.Input['AccprofileFwgrpPermissionArgs']]:
        """
        Custom firewall permission. The structure of `fwgrp_permission` block is documented below.
        """
        return pulumi.get(self, "fwgrp_permission")

    @fwgrp_permission.setter
    def fwgrp_permission(self, value: Optional[pulumi.Input['AccprofileFwgrpPermissionArgs']]):
        pulumi.set(self, "fwgrp_permission", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def loggrp(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator access to Logging and Reporting including viewing log messages. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "loggrp")

    @loggrp.setter
    def loggrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loggrp", value)

    @property
    @pulumi.getter(name="loggrpPermission")
    def loggrp_permission(self) -> Optional[pulumi.Input['AccprofileLoggrpPermissionArgs']]:
        """
        Custom Log & Report permission. The structure of `loggrp_permission` block is documented below.
        """
        return pulumi.get(self, "loggrp_permission")

    @loggrp_permission.setter
    def loggrp_permission(self, value: Optional[pulumi.Input['AccprofileLoggrpPermissionArgs']]):
        pulumi.set(self, "loggrp_permission", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def netgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Network Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "netgrp")

    @netgrp.setter
    def netgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netgrp", value)

    @property
    @pulumi.getter(name="netgrpPermission")
    def netgrp_permission(self) -> Optional[pulumi.Input['AccprofileNetgrpPermissionArgs']]:
        """
        Custom network permission. The structure of `netgrp_permission` block is documented below.
        """
        return pulumi.get(self, "netgrp_permission")

    @netgrp_permission.setter
    def netgrp_permission(self, value: Optional[pulumi.Input['AccprofileNetgrpPermissionArgs']]):
        pulumi.set(self, "netgrp_permission", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        Scope of admin access: global or specific VDOM(s). Valid values: `vdom`, `global`.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def secfabgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Security Fabric. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "secfabgrp")

    @secfabgrp.setter
    def secfabgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secfabgrp", value)

    @property
    @pulumi.getter
    def sysgrp(self) -> Optional[pulumi.Input[str]]:
        """
        System Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "sysgrp")

    @sysgrp.setter
    def sysgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sysgrp", value)

    @property
    @pulumi.getter(name="sysgrpPermission")
    def sysgrp_permission(self) -> Optional[pulumi.Input['AccprofileSysgrpPermissionArgs']]:
        """
        Custom system permission. The structure of `sysgrp_permission` block is documented below.
        """
        return pulumi.get(self, "sysgrp_permission")

    @sysgrp_permission.setter
    def sysgrp_permission(self, value: Optional[pulumi.Input['AccprofileSysgrpPermissionArgs']]):
        pulumi.set(self, "sysgrp_permission", value)

    @property
    @pulumi.getter(name="systemDiagnostics")
    def system_diagnostics(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to run system diagnostic commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "system_diagnostics")

    @system_diagnostics.setter
    def system_diagnostics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_diagnostics", value)

    @property
    @pulumi.getter(name="systemExecuteSsh")
    def system_execute_ssh(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to execute SSH commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "system_execute_ssh")

    @system_execute_ssh.setter
    def system_execute_ssh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_execute_ssh", value)

    @property
    @pulumi.getter(name="systemExecuteTelnet")
    def system_execute_telnet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable permission to execute TELNET commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "system_execute_telnet")

    @system_execute_telnet.setter
    def system_execute_telnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_execute_telnet", value)

    @property
    @pulumi.getter
    def utmgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator access to Security Profiles. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "utmgrp")

    @utmgrp.setter
    def utmgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utmgrp", value)

    @property
    @pulumi.getter(name="utmgrpPermission")
    def utmgrp_permission(self) -> Optional[pulumi.Input['AccprofileUtmgrpPermissionArgs']]:
        """
        Custom Security Profile permissions. The structure of `utmgrp_permission` block is documented below.
        """
        return pulumi.get(self, "utmgrp_permission")

    @utmgrp_permission.setter
    def utmgrp_permission(self, value: Optional[pulumi.Input['AccprofileUtmgrpPermissionArgs']]):
        pulumi.set(self, "utmgrp_permission", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vpngrp(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator access to IPsec, SSL, PPTP, and L2TP VPN. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "vpngrp")

    @vpngrp.setter
    def vpngrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpngrp", value)

    @property
    @pulumi.getter
    def wanoptgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator access to WAN Opt & Cache. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "wanoptgrp")

    @wanoptgrp.setter
    def wanoptgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wanoptgrp", value)

    @property
    @pulumi.getter
    def wifi(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator access to the WiFi controller and Switch controller. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "wifi")

    @wifi.setter
    def wifi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi", value)


class Accprofile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admintimeout: Optional[pulumi.Input[int]] = None,
                 admintimeout_override: Optional[pulumi.Input[str]] = None,
                 authgrp: Optional[pulumi.Input[str]] = None,
                 cli_config: Optional[pulumi.Input[str]] = None,
                 cli_diagnose: Optional[pulumi.Input[str]] = None,
                 cli_exec: Optional[pulumi.Input[str]] = None,
                 cli_get: Optional[pulumi.Input[str]] = None,
                 cli_show: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 ftviewgrp: Optional[pulumi.Input[str]] = None,
                 fwgrp: Optional[pulumi.Input[str]] = None,
                 fwgrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileFwgrpPermissionArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 loggrp: Optional[pulumi.Input[str]] = None,
                 loggrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileLoggrpPermissionArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 netgrp: Optional[pulumi.Input[str]] = None,
                 netgrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileNetgrpPermissionArgs']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 secfabgrp: Optional[pulumi.Input[str]] = None,
                 sysgrp: Optional[pulumi.Input[str]] = None,
                 sysgrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileSysgrpPermissionArgs']]] = None,
                 system_diagnostics: Optional[pulumi.Input[str]] = None,
                 system_execute_ssh: Optional[pulumi.Input[str]] = None,
                 system_execute_telnet: Optional[pulumi.Input[str]] = None,
                 utmgrp: Optional[pulumi.Input[str]] = None,
                 utmgrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileUtmgrpPermissionArgs']]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpngrp: Optional[pulumi.Input[str]] = None,
                 wanoptgrp: Optional[pulumi.Input[str]] = None,
                 wifi: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure access profiles for system administrators.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test12 = fortios.system.Accprofile("test12",
            admintimeout=10,
            admintimeout_override="disable",
            authgrp="read-write",
            ftviewgrp="read-write",
            fwgrp="custom",
            fwgrp_permission=fortios.system.AccprofileFwgrpPermissionArgs(
                address="read-write",
                policy="read-write",
                schedule="none",
                service="none",
            ),
            loggrp="read-write",
            loggrp_permission=fortios.system.AccprofileLoggrpPermissionArgs(
                config="none",
                data_access="none",
                report_access="none",
                threat_weight="none",
            ),
            netgrp="read-write",
            netgrp_permission=fortios.system.AccprofileNetgrpPermissionArgs(
                cfg="none",
                packet_capture="none",
                route_cfg="none",
            ),
            scope="vdom",
            secfabgrp="read-write",
            sysgrp="read-write",
            sysgrp_permission=fortios.system.AccprofileSysgrpPermissionArgs(
                admin="none",
                cfg="none",
                mnt="none",
                upd="none",
            ),
            utmgrp="custom",
            utmgrp_permission=fortios.system.AccprofileUtmgrpPermissionArgs(
                antivirus="read-write",
                application_control="none",
                data_loss_prevention="none",
                dnsfilter="none",
                endpoint_control="none",
                icap="none",
                ips="read-write",
                voip="none",
                waf="none",
                webfilter="none",
            ),
            vpngrp="read-write",
            wanoptgrp="read-write",
            wifi="read-write")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Accprofile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/accprofile:Accprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/accprofile:Accprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] admintimeout: Administrator timeout for this access profile (0 - 480 min, default = 10, 0 means never timeout).
        :param pulumi.Input[str] admintimeout_override: Enable/disable overriding the global administrator idle timeout. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] authgrp: Administrator access to Users and Devices. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] cli_config: Enable/disable permission to run config commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_diagnose: Enable/disable permission to run diagnostic commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_exec: Enable/disable permission to run execute commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_get: Enable/disable permission to run get commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_show: Enable/disable permission to run show commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] ftviewgrp: FortiView. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] fwgrp: Administrator access to the Firewall configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input[pulumi.InputType['AccprofileFwgrpPermissionArgs']] fwgrp_permission: Custom firewall permission. The structure of `fwgrp_permission` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] loggrp: Administrator access to Logging and Reporting including viewing log messages. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input[pulumi.InputType['AccprofileLoggrpPermissionArgs']] loggrp_permission: Custom Log & Report permission. The structure of `loggrp_permission` block is documented below.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] netgrp: Network Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input[pulumi.InputType['AccprofileNetgrpPermissionArgs']] netgrp_permission: Custom network permission. The structure of `netgrp_permission` block is documented below.
        :param pulumi.Input[str] scope: Scope of admin access: global or specific VDOM(s). Valid values: `vdom`, `global`.
        :param pulumi.Input[str] secfabgrp: Security Fabric. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] sysgrp: System Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input[pulumi.InputType['AccprofileSysgrpPermissionArgs']] sysgrp_permission: Custom system permission. The structure of `sysgrp_permission` block is documented below.
        :param pulumi.Input[str] system_diagnostics: Enable/disable permission to run system diagnostic commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] system_execute_ssh: Enable/disable permission to execute SSH commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] system_execute_telnet: Enable/disable permission to execute TELNET commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] utmgrp: Administrator access to Security Profiles. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input[pulumi.InputType['AccprofileUtmgrpPermissionArgs']] utmgrp_permission: Custom Security Profile permissions. The structure of `utmgrp_permission` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vpngrp: Administrator access to IPsec, SSL, PPTP, and L2TP VPN. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] wanoptgrp: Administrator access to WAN Opt & Cache. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] wifi: Administrator access to the WiFi controller and Switch controller. Valid values: `none`, `read`, `read-write`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AccprofileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure access profiles for system administrators.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test12 = fortios.system.Accprofile("test12",
            admintimeout=10,
            admintimeout_override="disable",
            authgrp="read-write",
            ftviewgrp="read-write",
            fwgrp="custom",
            fwgrp_permission=fortios.system.AccprofileFwgrpPermissionArgs(
                address="read-write",
                policy="read-write",
                schedule="none",
                service="none",
            ),
            loggrp="read-write",
            loggrp_permission=fortios.system.AccprofileLoggrpPermissionArgs(
                config="none",
                data_access="none",
                report_access="none",
                threat_weight="none",
            ),
            netgrp="read-write",
            netgrp_permission=fortios.system.AccprofileNetgrpPermissionArgs(
                cfg="none",
                packet_capture="none",
                route_cfg="none",
            ),
            scope="vdom",
            secfabgrp="read-write",
            sysgrp="read-write",
            sysgrp_permission=fortios.system.AccprofileSysgrpPermissionArgs(
                admin="none",
                cfg="none",
                mnt="none",
                upd="none",
            ),
            utmgrp="custom",
            utmgrp_permission=fortios.system.AccprofileUtmgrpPermissionArgs(
                antivirus="read-write",
                application_control="none",
                data_loss_prevention="none",
                dnsfilter="none",
                endpoint_control="none",
                icap="none",
                ips="read-write",
                voip="none",
                waf="none",
                webfilter="none",
            ),
            vpngrp="read-write",
            wanoptgrp="read-write",
            wifi="read-write")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Accprofile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/accprofile:Accprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/accprofile:Accprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param AccprofileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccprofileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admintimeout: Optional[pulumi.Input[int]] = None,
                 admintimeout_override: Optional[pulumi.Input[str]] = None,
                 authgrp: Optional[pulumi.Input[str]] = None,
                 cli_config: Optional[pulumi.Input[str]] = None,
                 cli_diagnose: Optional[pulumi.Input[str]] = None,
                 cli_exec: Optional[pulumi.Input[str]] = None,
                 cli_get: Optional[pulumi.Input[str]] = None,
                 cli_show: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 ftviewgrp: Optional[pulumi.Input[str]] = None,
                 fwgrp: Optional[pulumi.Input[str]] = None,
                 fwgrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileFwgrpPermissionArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 loggrp: Optional[pulumi.Input[str]] = None,
                 loggrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileLoggrpPermissionArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 netgrp: Optional[pulumi.Input[str]] = None,
                 netgrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileNetgrpPermissionArgs']]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 secfabgrp: Optional[pulumi.Input[str]] = None,
                 sysgrp: Optional[pulumi.Input[str]] = None,
                 sysgrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileSysgrpPermissionArgs']]] = None,
                 system_diagnostics: Optional[pulumi.Input[str]] = None,
                 system_execute_ssh: Optional[pulumi.Input[str]] = None,
                 system_execute_telnet: Optional[pulumi.Input[str]] = None,
                 utmgrp: Optional[pulumi.Input[str]] = None,
                 utmgrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileUtmgrpPermissionArgs']]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vpngrp: Optional[pulumi.Input[str]] = None,
                 wanoptgrp: Optional[pulumi.Input[str]] = None,
                 wifi: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccprofileArgs.__new__(AccprofileArgs)

            __props__.__dict__["admintimeout"] = admintimeout
            __props__.__dict__["admintimeout_override"] = admintimeout_override
            __props__.__dict__["authgrp"] = authgrp
            __props__.__dict__["cli_config"] = cli_config
            __props__.__dict__["cli_diagnose"] = cli_diagnose
            __props__.__dict__["cli_exec"] = cli_exec
            __props__.__dict__["cli_get"] = cli_get
            __props__.__dict__["cli_show"] = cli_show
            __props__.__dict__["comments"] = comments
            __props__.__dict__["ftviewgrp"] = ftviewgrp
            __props__.__dict__["fwgrp"] = fwgrp
            __props__.__dict__["fwgrp_permission"] = fwgrp_permission
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["loggrp"] = loggrp
            __props__.__dict__["loggrp_permission"] = loggrp_permission
            __props__.__dict__["name"] = name
            __props__.__dict__["netgrp"] = netgrp
            __props__.__dict__["netgrp_permission"] = netgrp_permission
            __props__.__dict__["scope"] = scope
            __props__.__dict__["secfabgrp"] = secfabgrp
            __props__.__dict__["sysgrp"] = sysgrp
            __props__.__dict__["sysgrp_permission"] = sysgrp_permission
            __props__.__dict__["system_diagnostics"] = system_diagnostics
            __props__.__dict__["system_execute_ssh"] = system_execute_ssh
            __props__.__dict__["system_execute_telnet"] = system_execute_telnet
            __props__.__dict__["utmgrp"] = utmgrp
            __props__.__dict__["utmgrp_permission"] = utmgrp_permission
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vpngrp"] = vpngrp
            __props__.__dict__["wanoptgrp"] = wanoptgrp
            __props__.__dict__["wifi"] = wifi
        super(Accprofile, __self__).__init__(
            'fortios:system/accprofile:Accprofile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admintimeout: Optional[pulumi.Input[int]] = None,
            admintimeout_override: Optional[pulumi.Input[str]] = None,
            authgrp: Optional[pulumi.Input[str]] = None,
            cli_config: Optional[pulumi.Input[str]] = None,
            cli_diagnose: Optional[pulumi.Input[str]] = None,
            cli_exec: Optional[pulumi.Input[str]] = None,
            cli_get: Optional[pulumi.Input[str]] = None,
            cli_show: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            ftviewgrp: Optional[pulumi.Input[str]] = None,
            fwgrp: Optional[pulumi.Input[str]] = None,
            fwgrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileFwgrpPermissionArgs']]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            loggrp: Optional[pulumi.Input[str]] = None,
            loggrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileLoggrpPermissionArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            netgrp: Optional[pulumi.Input[str]] = None,
            netgrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileNetgrpPermissionArgs']]] = None,
            scope: Optional[pulumi.Input[str]] = None,
            secfabgrp: Optional[pulumi.Input[str]] = None,
            sysgrp: Optional[pulumi.Input[str]] = None,
            sysgrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileSysgrpPermissionArgs']]] = None,
            system_diagnostics: Optional[pulumi.Input[str]] = None,
            system_execute_ssh: Optional[pulumi.Input[str]] = None,
            system_execute_telnet: Optional[pulumi.Input[str]] = None,
            utmgrp: Optional[pulumi.Input[str]] = None,
            utmgrp_permission: Optional[pulumi.Input[pulumi.InputType['AccprofileUtmgrpPermissionArgs']]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vpngrp: Optional[pulumi.Input[str]] = None,
            wanoptgrp: Optional[pulumi.Input[str]] = None,
            wifi: Optional[pulumi.Input[str]] = None) -> 'Accprofile':
        """
        Get an existing Accprofile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] admintimeout: Administrator timeout for this access profile (0 - 480 min, default = 10, 0 means never timeout).
        :param pulumi.Input[str] admintimeout_override: Enable/disable overriding the global administrator idle timeout. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] authgrp: Administrator access to Users and Devices. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] cli_config: Enable/disable permission to run config commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_diagnose: Enable/disable permission to run diagnostic commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_exec: Enable/disable permission to run execute commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_get: Enable/disable permission to run get commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cli_show: Enable/disable permission to run show commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] ftviewgrp: FortiView. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] fwgrp: Administrator access to the Firewall configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input[pulumi.InputType['AccprofileFwgrpPermissionArgs']] fwgrp_permission: Custom firewall permission. The structure of `fwgrp_permission` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] loggrp: Administrator access to Logging and Reporting including viewing log messages. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input[pulumi.InputType['AccprofileLoggrpPermissionArgs']] loggrp_permission: Custom Log & Report permission. The structure of `loggrp_permission` block is documented below.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[str] netgrp: Network Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input[pulumi.InputType['AccprofileNetgrpPermissionArgs']] netgrp_permission: Custom network permission. The structure of `netgrp_permission` block is documented below.
        :param pulumi.Input[str] scope: Scope of admin access: global or specific VDOM(s). Valid values: `vdom`, `global`.
        :param pulumi.Input[str] secfabgrp: Security Fabric. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] sysgrp: System Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input[pulumi.InputType['AccprofileSysgrpPermissionArgs']] sysgrp_permission: Custom system permission. The structure of `sysgrp_permission` block is documented below.
        :param pulumi.Input[str] system_diagnostics: Enable/disable permission to run system diagnostic commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] system_execute_ssh: Enable/disable permission to execute SSH commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] system_execute_telnet: Enable/disable permission to execute TELNET commands. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] utmgrp: Administrator access to Security Profiles. Valid values: `none`, `read`, `read-write`, `custom`.
        :param pulumi.Input[pulumi.InputType['AccprofileUtmgrpPermissionArgs']] utmgrp_permission: Custom Security Profile permissions. The structure of `utmgrp_permission` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vpngrp: Administrator access to IPsec, SSL, PPTP, and L2TP VPN. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] wanoptgrp: Administrator access to WAN Opt & Cache. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] wifi: Administrator access to the WiFi controller and Switch controller. Valid values: `none`, `read`, `read-write`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccprofileState.__new__(_AccprofileState)

        __props__.__dict__["admintimeout"] = admintimeout
        __props__.__dict__["admintimeout_override"] = admintimeout_override
        __props__.__dict__["authgrp"] = authgrp
        __props__.__dict__["cli_config"] = cli_config
        __props__.__dict__["cli_diagnose"] = cli_diagnose
        __props__.__dict__["cli_exec"] = cli_exec
        __props__.__dict__["cli_get"] = cli_get
        __props__.__dict__["cli_show"] = cli_show
        __props__.__dict__["comments"] = comments
        __props__.__dict__["ftviewgrp"] = ftviewgrp
        __props__.__dict__["fwgrp"] = fwgrp
        __props__.__dict__["fwgrp_permission"] = fwgrp_permission
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["loggrp"] = loggrp
        __props__.__dict__["loggrp_permission"] = loggrp_permission
        __props__.__dict__["name"] = name
        __props__.__dict__["netgrp"] = netgrp
        __props__.__dict__["netgrp_permission"] = netgrp_permission
        __props__.__dict__["scope"] = scope
        __props__.__dict__["secfabgrp"] = secfabgrp
        __props__.__dict__["sysgrp"] = sysgrp
        __props__.__dict__["sysgrp_permission"] = sysgrp_permission
        __props__.__dict__["system_diagnostics"] = system_diagnostics
        __props__.__dict__["system_execute_ssh"] = system_execute_ssh
        __props__.__dict__["system_execute_telnet"] = system_execute_telnet
        __props__.__dict__["utmgrp"] = utmgrp
        __props__.__dict__["utmgrp_permission"] = utmgrp_permission
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vpngrp"] = vpngrp
        __props__.__dict__["wanoptgrp"] = wanoptgrp
        __props__.__dict__["wifi"] = wifi
        return Accprofile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def admintimeout(self) -> pulumi.Output[int]:
        """
        Administrator timeout for this access profile (0 - 480 min, default = 10, 0 means never timeout).
        """
        return pulumi.get(self, "admintimeout")

    @property
    @pulumi.getter(name="admintimeoutOverride")
    def admintimeout_override(self) -> pulumi.Output[str]:
        """
        Enable/disable overriding the global administrator idle timeout. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "admintimeout_override")

    @property
    @pulumi.getter
    def authgrp(self) -> pulumi.Output[str]:
        """
        Administrator access to Users and Devices. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "authgrp")

    @property
    @pulumi.getter(name="cliConfig")
    def cli_config(self) -> pulumi.Output[str]:
        """
        Enable/disable permission to run config commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_config")

    @property
    @pulumi.getter(name="cliDiagnose")
    def cli_diagnose(self) -> pulumi.Output[str]:
        """
        Enable/disable permission to run diagnostic commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_diagnose")

    @property
    @pulumi.getter(name="cliExec")
    def cli_exec(self) -> pulumi.Output[str]:
        """
        Enable/disable permission to run execute commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_exec")

    @property
    @pulumi.getter(name="cliGet")
    def cli_get(self) -> pulumi.Output[str]:
        """
        Enable/disable permission to run get commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_get")

    @property
    @pulumi.getter(name="cliShow")
    def cli_show(self) -> pulumi.Output[str]:
        """
        Enable/disable permission to run show commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cli_show")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def ftviewgrp(self) -> pulumi.Output[str]:
        """
        FortiView. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "ftviewgrp")

    @property
    @pulumi.getter
    def fwgrp(self) -> pulumi.Output[str]:
        """
        Administrator access to the Firewall configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "fwgrp")

    @property
    @pulumi.getter(name="fwgrpPermission")
    def fwgrp_permission(self) -> pulumi.Output['outputs.AccprofileFwgrpPermission']:
        """
        Custom firewall permission. The structure of `fwgrp_permission` block is documented below.
        """
        return pulumi.get(self, "fwgrp_permission")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def loggrp(self) -> pulumi.Output[str]:
        """
        Administrator access to Logging and Reporting including viewing log messages. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "loggrp")

    @property
    @pulumi.getter(name="loggrpPermission")
    def loggrp_permission(self) -> pulumi.Output['outputs.AccprofileLoggrpPermission']:
        """
        Custom Log & Report permission. The structure of `loggrp_permission` block is documented below.
        """
        return pulumi.get(self, "loggrp_permission")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def netgrp(self) -> pulumi.Output[str]:
        """
        Network Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "netgrp")

    @property
    @pulumi.getter(name="netgrpPermission")
    def netgrp_permission(self) -> pulumi.Output['outputs.AccprofileNetgrpPermission']:
        """
        Custom network permission. The structure of `netgrp_permission` block is documented below.
        """
        return pulumi.get(self, "netgrp_permission")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[str]:
        """
        Scope of admin access: global or specific VDOM(s). Valid values: `vdom`, `global`.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def secfabgrp(self) -> pulumi.Output[str]:
        """
        Security Fabric. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "secfabgrp")

    @property
    @pulumi.getter
    def sysgrp(self) -> pulumi.Output[str]:
        """
        System Configuration. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "sysgrp")

    @property
    @pulumi.getter(name="sysgrpPermission")
    def sysgrp_permission(self) -> pulumi.Output['outputs.AccprofileSysgrpPermission']:
        """
        Custom system permission. The structure of `sysgrp_permission` block is documented below.
        """
        return pulumi.get(self, "sysgrp_permission")

    @property
    @pulumi.getter(name="systemDiagnostics")
    def system_diagnostics(self) -> pulumi.Output[str]:
        """
        Enable/disable permission to run system diagnostic commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "system_diagnostics")

    @property
    @pulumi.getter(name="systemExecuteSsh")
    def system_execute_ssh(self) -> pulumi.Output[str]:
        """
        Enable/disable permission to execute SSH commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "system_execute_ssh")

    @property
    @pulumi.getter(name="systemExecuteTelnet")
    def system_execute_telnet(self) -> pulumi.Output[str]:
        """
        Enable/disable permission to execute TELNET commands. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "system_execute_telnet")

    @property
    @pulumi.getter
    def utmgrp(self) -> pulumi.Output[str]:
        """
        Administrator access to Security Profiles. Valid values: `none`, `read`, `read-write`, `custom`.
        """
        return pulumi.get(self, "utmgrp")

    @property
    @pulumi.getter(name="utmgrpPermission")
    def utmgrp_permission(self) -> pulumi.Output['outputs.AccprofileUtmgrpPermission']:
        """
        Custom Security Profile permissions. The structure of `utmgrp_permission` block is documented below.
        """
        return pulumi.get(self, "utmgrp_permission")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vpngrp(self) -> pulumi.Output[str]:
        """
        Administrator access to IPsec, SSL, PPTP, and L2TP VPN. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "vpngrp")

    @property
    @pulumi.getter
    def wanoptgrp(self) -> pulumi.Output[str]:
        """
        Administrator access to WAN Opt & Cache. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "wanoptgrp")

    @property
    @pulumi.getter
    def wifi(self) -> pulumi.Output[str]:
        """
        Administrator access to the WiFi controller and Switch controller. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "wifi")

