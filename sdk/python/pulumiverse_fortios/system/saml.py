# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SamlArgs', 'Saml']

@pulumi.input_type
class SamlArgs:
    def __init__(__self__, *,
                 binding_protocol: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 default_login_page: Optional[pulumi.Input[str]] = None,
                 default_profile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 idp_cert: Optional[pulumi.Input[str]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 life: Optional[pulumi.Input[int]] = None,
                 portal_url: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 server_address: Optional[pulumi.Input[str]] = None,
                 service_providers: Optional[pulumi.Input[Sequence[pulumi.Input['SamlServiceProviderArgs']]]] = None,
                 single_logout_url: Optional[pulumi.Input[str]] = None,
                 single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tolerance: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Saml resource.
        :param pulumi.Input[str] binding_protocol: IdP Binding protocol. Valid values: `post`, `redirect`.
        :param pulumi.Input[str] cert: Certificate to sign SAML messages.
        :param pulumi.Input[str] default_login_page: Choose default login page. Valid values: `normal`, `sso`.
        :param pulumi.Input[str] default_profile: Default profile for new SSO admin.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] entity_id: SP entity ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] idp_cert: IDP certificate name.
        :param pulumi.Input[str] idp_entity_id: IDP entity ID.
        :param pulumi.Input[str] idp_single_logout_url: IDP single logout URL.
        :param pulumi.Input[str] idp_single_sign_on_url: IDP single sign-on URL.
        :param pulumi.Input[int] life: Length of the range of time when the assertion is valid (in minutes).
        :param pulumi.Input[str] portal_url: SP portal URL.
        :param pulumi.Input[str] role: SAML role. Valid values: `identity-provider`, `service-provider`.
        :param pulumi.Input[str] server_address: Server address.
        :param pulumi.Input[Sequence[pulumi.Input['SamlServiceProviderArgs']]] service_providers: Authorized service providers. The structure of `service_providers` block is documented below.
        :param pulumi.Input[str] single_logout_url: SP single logout URL.
        :param pulumi.Input[str] single_sign_on_url: SP single sign-on URL.
        :param pulumi.Input[str] status: Enable/disable SAML authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tolerance: Tolerance to the range of time when the assertion is valid (in minutes).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if binding_protocol is not None:
            pulumi.set(__self__, "binding_protocol", binding_protocol)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if default_login_page is not None:
            pulumi.set(__self__, "default_login_page", default_login_page)
        if default_profile is not None:
            pulumi.set(__self__, "default_profile", default_profile)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if idp_cert is not None:
            pulumi.set(__self__, "idp_cert", idp_cert)
        if idp_entity_id is not None:
            pulumi.set(__self__, "idp_entity_id", idp_entity_id)
        if idp_single_logout_url is not None:
            pulumi.set(__self__, "idp_single_logout_url", idp_single_logout_url)
        if idp_single_sign_on_url is not None:
            pulumi.set(__self__, "idp_single_sign_on_url", idp_single_sign_on_url)
        if life is not None:
            pulumi.set(__self__, "life", life)
        if portal_url is not None:
            pulumi.set(__self__, "portal_url", portal_url)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if server_address is not None:
            pulumi.set(__self__, "server_address", server_address)
        if service_providers is not None:
            pulumi.set(__self__, "service_providers", service_providers)
        if single_logout_url is not None:
            pulumi.set(__self__, "single_logout_url", single_logout_url)
        if single_sign_on_url is not None:
            pulumi.set(__self__, "single_sign_on_url", single_sign_on_url)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="bindingProtocol")
    def binding_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        IdP Binding protocol. Valid values: `post`, `redirect`.
        """
        return pulumi.get(self, "binding_protocol")

    @binding_protocol.setter
    def binding_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binding_protocol", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate to sign SAML messages.
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="defaultLoginPage")
    def default_login_page(self) -> Optional[pulumi.Input[str]]:
        """
        Choose default login page. Valid values: `normal`, `sso`.
        """
        return pulumi.get(self, "default_login_page")

    @default_login_page.setter
    def default_login_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_login_page", value)

    @property
    @pulumi.getter(name="defaultProfile")
    def default_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Default profile for new SSO admin.
        """
        return pulumi.get(self, "default_profile")

    @default_profile.setter
    def default_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_profile", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        SP entity ID.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="idpCert")
    def idp_cert(self) -> Optional[pulumi.Input[str]]:
        """
        IDP certificate name.
        """
        return pulumi.get(self, "idp_cert")

    @idp_cert.setter
    def idp_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_cert", value)

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        IDP entity ID.
        """
        return pulumi.get(self, "idp_entity_id")

    @idp_entity_id.setter
    def idp_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_entity_id", value)

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        IDP single logout URL.
        """
        return pulumi.get(self, "idp_single_logout_url")

    @idp_single_logout_url.setter
    def idp_single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_logout_url", value)

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        """
        IDP single sign-on URL.
        """
        return pulumi.get(self, "idp_single_sign_on_url")

    @idp_single_sign_on_url.setter
    def idp_single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_sign_on_url", value)

    @property
    @pulumi.getter
    def life(self) -> Optional[pulumi.Input[int]]:
        """
        Length of the range of time when the assertion is valid (in minutes).
        """
        return pulumi.get(self, "life")

    @life.setter
    def life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "life", value)

    @property
    @pulumi.getter(name="portalUrl")
    def portal_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP portal URL.
        """
        return pulumi.get(self, "portal_url")

    @portal_url.setter
    def portal_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_url", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        SAML role. Valid values: `identity-provider`, `service-provider`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> Optional[pulumi.Input[str]]:
        """
        Server address.
        """
        return pulumi.get(self, "server_address")

    @server_address.setter
    def server_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_address", value)

    @property
    @pulumi.getter(name="serviceProviders")
    def service_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SamlServiceProviderArgs']]]]:
        """
        Authorized service providers. The structure of `service_providers` block is documented below.
        """
        return pulumi.get(self, "service_providers")

    @service_providers.setter
    def service_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SamlServiceProviderArgs']]]]):
        pulumi.set(self, "service_providers", value)

    @property
    @pulumi.getter(name="singleLogoutUrl")
    def single_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP single logout URL.
        """
        return pulumi.get(self, "single_logout_url")

    @single_logout_url.setter
    def single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_logout_url", value)

    @property
    @pulumi.getter(name="singleSignOnUrl")
    def single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP single sign-on URL.
        """
        return pulumi.get(self, "single_sign_on_url")

    @single_sign_on_url.setter
    def single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_sign_on_url", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SAML authentication (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[pulumi.Input[int]]:
        """
        Tolerance to the range of time when the assertion is valid (in minutes).
        """
        return pulumi.get(self, "tolerance")

    @tolerance.setter
    def tolerance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerance", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SamlState:
    def __init__(__self__, *,
                 binding_protocol: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 default_login_page: Optional[pulumi.Input[str]] = None,
                 default_profile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 idp_cert: Optional[pulumi.Input[str]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 life: Optional[pulumi.Input[int]] = None,
                 portal_url: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 server_address: Optional[pulumi.Input[str]] = None,
                 service_providers: Optional[pulumi.Input[Sequence[pulumi.Input['SamlServiceProviderArgs']]]] = None,
                 single_logout_url: Optional[pulumi.Input[str]] = None,
                 single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tolerance: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Saml resources.
        :param pulumi.Input[str] binding_protocol: IdP Binding protocol. Valid values: `post`, `redirect`.
        :param pulumi.Input[str] cert: Certificate to sign SAML messages.
        :param pulumi.Input[str] default_login_page: Choose default login page. Valid values: `normal`, `sso`.
        :param pulumi.Input[str] default_profile: Default profile for new SSO admin.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] entity_id: SP entity ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] idp_cert: IDP certificate name.
        :param pulumi.Input[str] idp_entity_id: IDP entity ID.
        :param pulumi.Input[str] idp_single_logout_url: IDP single logout URL.
        :param pulumi.Input[str] idp_single_sign_on_url: IDP single sign-on URL.
        :param pulumi.Input[int] life: Length of the range of time when the assertion is valid (in minutes).
        :param pulumi.Input[str] portal_url: SP portal URL.
        :param pulumi.Input[str] role: SAML role. Valid values: `identity-provider`, `service-provider`.
        :param pulumi.Input[str] server_address: Server address.
        :param pulumi.Input[Sequence[pulumi.Input['SamlServiceProviderArgs']]] service_providers: Authorized service providers. The structure of `service_providers` block is documented below.
        :param pulumi.Input[str] single_logout_url: SP single logout URL.
        :param pulumi.Input[str] single_sign_on_url: SP single sign-on URL.
        :param pulumi.Input[str] status: Enable/disable SAML authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tolerance: Tolerance to the range of time when the assertion is valid (in minutes).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if binding_protocol is not None:
            pulumi.set(__self__, "binding_protocol", binding_protocol)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if default_login_page is not None:
            pulumi.set(__self__, "default_login_page", default_login_page)
        if default_profile is not None:
            pulumi.set(__self__, "default_profile", default_profile)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if idp_cert is not None:
            pulumi.set(__self__, "idp_cert", idp_cert)
        if idp_entity_id is not None:
            pulumi.set(__self__, "idp_entity_id", idp_entity_id)
        if idp_single_logout_url is not None:
            pulumi.set(__self__, "idp_single_logout_url", idp_single_logout_url)
        if idp_single_sign_on_url is not None:
            pulumi.set(__self__, "idp_single_sign_on_url", idp_single_sign_on_url)
        if life is not None:
            pulumi.set(__self__, "life", life)
        if portal_url is not None:
            pulumi.set(__self__, "portal_url", portal_url)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if server_address is not None:
            pulumi.set(__self__, "server_address", server_address)
        if service_providers is not None:
            pulumi.set(__self__, "service_providers", service_providers)
        if single_logout_url is not None:
            pulumi.set(__self__, "single_logout_url", single_logout_url)
        if single_sign_on_url is not None:
            pulumi.set(__self__, "single_sign_on_url", single_sign_on_url)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="bindingProtocol")
    def binding_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        IdP Binding protocol. Valid values: `post`, `redirect`.
        """
        return pulumi.get(self, "binding_protocol")

    @binding_protocol.setter
    def binding_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binding_protocol", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate to sign SAML messages.
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="defaultLoginPage")
    def default_login_page(self) -> Optional[pulumi.Input[str]]:
        """
        Choose default login page. Valid values: `normal`, `sso`.
        """
        return pulumi.get(self, "default_login_page")

    @default_login_page.setter
    def default_login_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_login_page", value)

    @property
    @pulumi.getter(name="defaultProfile")
    def default_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Default profile for new SSO admin.
        """
        return pulumi.get(self, "default_profile")

    @default_profile.setter
    def default_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_profile", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        SP entity ID.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="idpCert")
    def idp_cert(self) -> Optional[pulumi.Input[str]]:
        """
        IDP certificate name.
        """
        return pulumi.get(self, "idp_cert")

    @idp_cert.setter
    def idp_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_cert", value)

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        IDP entity ID.
        """
        return pulumi.get(self, "idp_entity_id")

    @idp_entity_id.setter
    def idp_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_entity_id", value)

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        IDP single logout URL.
        """
        return pulumi.get(self, "idp_single_logout_url")

    @idp_single_logout_url.setter
    def idp_single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_logout_url", value)

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        """
        IDP single sign-on URL.
        """
        return pulumi.get(self, "idp_single_sign_on_url")

    @idp_single_sign_on_url.setter
    def idp_single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_sign_on_url", value)

    @property
    @pulumi.getter
    def life(self) -> Optional[pulumi.Input[int]]:
        """
        Length of the range of time when the assertion is valid (in minutes).
        """
        return pulumi.get(self, "life")

    @life.setter
    def life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "life", value)

    @property
    @pulumi.getter(name="portalUrl")
    def portal_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP portal URL.
        """
        return pulumi.get(self, "portal_url")

    @portal_url.setter
    def portal_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_url", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        SAML role. Valid values: `identity-provider`, `service-provider`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> Optional[pulumi.Input[str]]:
        """
        Server address.
        """
        return pulumi.get(self, "server_address")

    @server_address.setter
    def server_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_address", value)

    @property
    @pulumi.getter(name="serviceProviders")
    def service_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SamlServiceProviderArgs']]]]:
        """
        Authorized service providers. The structure of `service_providers` block is documented below.
        """
        return pulumi.get(self, "service_providers")

    @service_providers.setter
    def service_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SamlServiceProviderArgs']]]]):
        pulumi.set(self, "service_providers", value)

    @property
    @pulumi.getter(name="singleLogoutUrl")
    def single_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP single logout URL.
        """
        return pulumi.get(self, "single_logout_url")

    @single_logout_url.setter
    def single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_logout_url", value)

    @property
    @pulumi.getter(name="singleSignOnUrl")
    def single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP single sign-on URL.
        """
        return pulumi.get(self, "single_sign_on_url")

    @single_sign_on_url.setter
    def single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_sign_on_url", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SAML authentication (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[pulumi.Input[int]]:
        """
        Tolerance to the range of time when the assertion is valid (in minutes).
        """
        return pulumi.get(self, "tolerance")

    @tolerance.setter
    def tolerance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerance", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Saml(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 binding_protocol: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 default_login_page: Optional[pulumi.Input[str]] = None,
                 default_profile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 idp_cert: Optional[pulumi.Input[str]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 life: Optional[pulumi.Input[int]] = None,
                 portal_url: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 server_address: Optional[pulumi.Input[str]] = None,
                 service_providers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SamlServiceProviderArgs']]]]] = None,
                 single_logout_url: Optional[pulumi.Input[str]] = None,
                 single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tolerance: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Global settings for SAML authentication. Applies to FortiOS Version `>= 6.2.4`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Saml("trname",
            default_login_page="normal",
            default_profile="admin_no_access",
            life=30,
            role="service-provider",
            status="disable",
            tolerance=5)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Saml can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/saml:Saml labelname SystemSaml
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/saml:Saml labelname SystemSaml
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] binding_protocol: IdP Binding protocol. Valid values: `post`, `redirect`.
        :param pulumi.Input[str] cert: Certificate to sign SAML messages.
        :param pulumi.Input[str] default_login_page: Choose default login page. Valid values: `normal`, `sso`.
        :param pulumi.Input[str] default_profile: Default profile for new SSO admin.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] entity_id: SP entity ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] idp_cert: IDP certificate name.
        :param pulumi.Input[str] idp_entity_id: IDP entity ID.
        :param pulumi.Input[str] idp_single_logout_url: IDP single logout URL.
        :param pulumi.Input[str] idp_single_sign_on_url: IDP single sign-on URL.
        :param pulumi.Input[int] life: Length of the range of time when the assertion is valid (in minutes).
        :param pulumi.Input[str] portal_url: SP portal URL.
        :param pulumi.Input[str] role: SAML role. Valid values: `identity-provider`, `service-provider`.
        :param pulumi.Input[str] server_address: Server address.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SamlServiceProviderArgs']]]] service_providers: Authorized service providers. The structure of `service_providers` block is documented below.
        :param pulumi.Input[str] single_logout_url: SP single logout URL.
        :param pulumi.Input[str] single_sign_on_url: SP single sign-on URL.
        :param pulumi.Input[str] status: Enable/disable SAML authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tolerance: Tolerance to the range of time when the assertion is valid (in minutes).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SamlArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Global settings for SAML authentication. Applies to FortiOS Version `>= 6.2.4`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Saml("trname",
            default_login_page="normal",
            default_profile="admin_no_access",
            life=30,
            role="service-provider",
            status="disable",
            tolerance=5)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Saml can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/saml:Saml labelname SystemSaml
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/saml:Saml labelname SystemSaml
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SamlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SamlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 binding_protocol: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 default_login_page: Optional[pulumi.Input[str]] = None,
                 default_profile: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 idp_cert: Optional[pulumi.Input[str]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 life: Optional[pulumi.Input[int]] = None,
                 portal_url: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 server_address: Optional[pulumi.Input[str]] = None,
                 service_providers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SamlServiceProviderArgs']]]]] = None,
                 single_logout_url: Optional[pulumi.Input[str]] = None,
                 single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tolerance: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SamlArgs.__new__(SamlArgs)

            __props__.__dict__["binding_protocol"] = binding_protocol
            __props__.__dict__["cert"] = cert
            __props__.__dict__["default_login_page"] = default_login_page
            __props__.__dict__["default_profile"] = default_profile
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["entity_id"] = entity_id
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["idp_cert"] = idp_cert
            __props__.__dict__["idp_entity_id"] = idp_entity_id
            __props__.__dict__["idp_single_logout_url"] = idp_single_logout_url
            __props__.__dict__["idp_single_sign_on_url"] = idp_single_sign_on_url
            __props__.__dict__["life"] = life
            __props__.__dict__["portal_url"] = portal_url
            __props__.__dict__["role"] = role
            __props__.__dict__["server_address"] = server_address
            __props__.__dict__["service_providers"] = service_providers
            __props__.__dict__["single_logout_url"] = single_logout_url
            __props__.__dict__["single_sign_on_url"] = single_sign_on_url
            __props__.__dict__["status"] = status
            __props__.__dict__["tolerance"] = tolerance
            __props__.__dict__["vdomparam"] = vdomparam
        super(Saml, __self__).__init__(
            'fortios:system/saml:Saml',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            binding_protocol: Optional[pulumi.Input[str]] = None,
            cert: Optional[pulumi.Input[str]] = None,
            default_login_page: Optional[pulumi.Input[str]] = None,
            default_profile: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            entity_id: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            idp_cert: Optional[pulumi.Input[str]] = None,
            idp_entity_id: Optional[pulumi.Input[str]] = None,
            idp_single_logout_url: Optional[pulumi.Input[str]] = None,
            idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
            life: Optional[pulumi.Input[int]] = None,
            portal_url: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None,
            server_address: Optional[pulumi.Input[str]] = None,
            service_providers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SamlServiceProviderArgs']]]]] = None,
            single_logout_url: Optional[pulumi.Input[str]] = None,
            single_sign_on_url: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tolerance: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Saml':
        """
        Get an existing Saml resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] binding_protocol: IdP Binding protocol. Valid values: `post`, `redirect`.
        :param pulumi.Input[str] cert: Certificate to sign SAML messages.
        :param pulumi.Input[str] default_login_page: Choose default login page. Valid values: `normal`, `sso`.
        :param pulumi.Input[str] default_profile: Default profile for new SSO admin.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] entity_id: SP entity ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] idp_cert: IDP certificate name.
        :param pulumi.Input[str] idp_entity_id: IDP entity ID.
        :param pulumi.Input[str] idp_single_logout_url: IDP single logout URL.
        :param pulumi.Input[str] idp_single_sign_on_url: IDP single sign-on URL.
        :param pulumi.Input[int] life: Length of the range of time when the assertion is valid (in minutes).
        :param pulumi.Input[str] portal_url: SP portal URL.
        :param pulumi.Input[str] role: SAML role. Valid values: `identity-provider`, `service-provider`.
        :param pulumi.Input[str] server_address: Server address.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SamlServiceProviderArgs']]]] service_providers: Authorized service providers. The structure of `service_providers` block is documented below.
        :param pulumi.Input[str] single_logout_url: SP single logout URL.
        :param pulumi.Input[str] single_sign_on_url: SP single sign-on URL.
        :param pulumi.Input[str] status: Enable/disable SAML authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tolerance: Tolerance to the range of time when the assertion is valid (in minutes).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SamlState.__new__(_SamlState)

        __props__.__dict__["binding_protocol"] = binding_protocol
        __props__.__dict__["cert"] = cert
        __props__.__dict__["default_login_page"] = default_login_page
        __props__.__dict__["default_profile"] = default_profile
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["entity_id"] = entity_id
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["idp_cert"] = idp_cert
        __props__.__dict__["idp_entity_id"] = idp_entity_id
        __props__.__dict__["idp_single_logout_url"] = idp_single_logout_url
        __props__.__dict__["idp_single_sign_on_url"] = idp_single_sign_on_url
        __props__.__dict__["life"] = life
        __props__.__dict__["portal_url"] = portal_url
        __props__.__dict__["role"] = role
        __props__.__dict__["server_address"] = server_address
        __props__.__dict__["service_providers"] = service_providers
        __props__.__dict__["single_logout_url"] = single_logout_url
        __props__.__dict__["single_sign_on_url"] = single_sign_on_url
        __props__.__dict__["status"] = status
        __props__.__dict__["tolerance"] = tolerance
        __props__.__dict__["vdomparam"] = vdomparam
        return Saml(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bindingProtocol")
    def binding_protocol(self) -> pulumi.Output[str]:
        """
        IdP Binding protocol. Valid values: `post`, `redirect`.
        """
        return pulumi.get(self, "binding_protocol")

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Output[str]:
        """
        Certificate to sign SAML messages.
        """
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter(name="defaultLoginPage")
    def default_login_page(self) -> pulumi.Output[str]:
        """
        Choose default login page. Valid values: `normal`, `sso`.
        """
        return pulumi.get(self, "default_login_page")

    @property
    @pulumi.getter(name="defaultProfile")
    def default_profile(self) -> pulumi.Output[str]:
        """
        Default profile for new SSO admin.
        """
        return pulumi.get(self, "default_profile")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Output[str]:
        """
        SP entity ID.
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="idpCert")
    def idp_cert(self) -> pulumi.Output[str]:
        """
        IDP certificate name.
        """
        return pulumi.get(self, "idp_cert")

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> pulumi.Output[str]:
        """
        IDP entity ID.
        """
        return pulumi.get(self, "idp_entity_id")

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> pulumi.Output[str]:
        """
        IDP single logout URL.
        """
        return pulumi.get(self, "idp_single_logout_url")

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> pulumi.Output[str]:
        """
        IDP single sign-on URL.
        """
        return pulumi.get(self, "idp_single_sign_on_url")

    @property
    @pulumi.getter
    def life(self) -> pulumi.Output[int]:
        """
        Length of the range of time when the assertion is valid (in minutes).
        """
        return pulumi.get(self, "life")

    @property
    @pulumi.getter(name="portalUrl")
    def portal_url(self) -> pulumi.Output[str]:
        """
        SP portal URL.
        """
        return pulumi.get(self, "portal_url")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        SAML role. Valid values: `identity-provider`, `service-provider`.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> pulumi.Output[str]:
        """
        Server address.
        """
        return pulumi.get(self, "server_address")

    @property
    @pulumi.getter(name="serviceProviders")
    def service_providers(self) -> pulumi.Output[Optional[Sequence['outputs.SamlServiceProvider']]]:
        """
        Authorized service providers. The structure of `service_providers` block is documented below.
        """
        return pulumi.get(self, "service_providers")

    @property
    @pulumi.getter(name="singleLogoutUrl")
    def single_logout_url(self) -> pulumi.Output[str]:
        """
        SP single logout URL.
        """
        return pulumi.get(self, "single_logout_url")

    @property
    @pulumi.getter(name="singleSignOnUrl")
    def single_sign_on_url(self) -> pulumi.Output[str]:
        """
        SP single sign-on URL.
        """
        return pulumi.get(self, "single_sign_on_url")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable SAML authentication (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tolerance(self) -> pulumi.Output[int]:
        """
        Tolerance to the range of time when the assertion is valid (in minutes).
        """
        return pulumi.get(self, "tolerance")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

