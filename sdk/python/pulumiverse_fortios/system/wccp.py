# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['WccpArgs', 'Wccp']

@pulumi.input_type
class WccpArgs:
    def __init__(__self__, *,
                 assignment_bucket_format: Optional[pulumi.Input[str]] = None,
                 assignment_dstaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_method: Optional[pulumi.Input[str]] = None,
                 assignment_srcaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_weight: Optional[pulumi.Input[int]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 cache_engine_method: Optional[pulumi.Input[str]] = None,
                 cache_id: Optional[pulumi.Input[str]] = None,
                 forward_method: Optional[pulumi.Input[str]] = None,
                 group_address: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 ports_defined: Optional[pulumi.Input[str]] = None,
                 primary_hash: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 return_method: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 router_list: Optional[pulumi.Input[str]] = None,
                 server_list: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Wccp resource.
        :param pulumi.Input[str] assignment_bucket_format: Assignment bucket format for the WCCP cache engine. Valid values: `wccp-v2`, `cisco-implementation`.
        :param pulumi.Input[str] assignment_dstaddr_mask: Assignment destination address mask.
        :param pulumi.Input[str] assignment_method: Hash key assignment preference. Valid values: `HASH`, `MASK`, `any`.
        :param pulumi.Input[str] assignment_srcaddr_mask: Assignment source address mask.
        :param pulumi.Input[int] assignment_weight: Assignment of hash weight/ratio for the WCCP cache engine.
        :param pulumi.Input[str] authentication: Enable/disable MD5 authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cache_engine_method: Method used to forward traffic to the routers or to return to the cache engine. Valid values: `GRE`, `L2`.
        :param pulumi.Input[str] cache_id: IP address known to all routers. If the addresses are the same, use the default 0.0.0.0.
        :param pulumi.Input[str] forward_method: Method used to forward traffic to the cache servers. Valid values: `GRE`, `L2`, `any`.
        :param pulumi.Input[str] group_address: IP multicast address used by the cache routers. For the FortiGate to ignore multicast WCCP traffic, use the default 0.0.0.0.
        :param pulumi.Input[str] password: Password for MD5 authentication.
        :param pulumi.Input[str] ports: Service ports.
        :param pulumi.Input[str] ports_defined: Match method. Valid values: `source`, `destination`.
        :param pulumi.Input[str] primary_hash: Hash method. Valid values: `src-ip`, `dst-ip`, `src-port`, `dst-port`.
        :param pulumi.Input[int] priority: Service priority.
        :param pulumi.Input[int] protocol: Service protocol.
        :param pulumi.Input[str] return_method: Method used to decline a redirected packet and return it to the FortiGate. Valid values: `GRE`, `L2`, `any`.
        :param pulumi.Input[str] router_id: IP address known to all cache engines. If all cache engines connect to the same FortiGate interface, use the default 0.0.0.0.
        :param pulumi.Input[str] router_list: IP addresses of one or more WCCP routers.
        :param pulumi.Input[str] server_list: IP addresses and netmasks for up to four cache servers.
        :param pulumi.Input[str] server_type: Cache server type. Valid values: `forward`, `proxy`.
        :param pulumi.Input[str] service_id: Service ID.
        :param pulumi.Input[str] service_type: WCCP service type used by the cache server for logical interception and redirection of traffic. Valid values: `auto`, `standard`, `dynamic`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if assignment_bucket_format is not None:
            pulumi.set(__self__, "assignment_bucket_format", assignment_bucket_format)
        if assignment_dstaddr_mask is not None:
            pulumi.set(__self__, "assignment_dstaddr_mask", assignment_dstaddr_mask)
        if assignment_method is not None:
            pulumi.set(__self__, "assignment_method", assignment_method)
        if assignment_srcaddr_mask is not None:
            pulumi.set(__self__, "assignment_srcaddr_mask", assignment_srcaddr_mask)
        if assignment_weight is not None:
            pulumi.set(__self__, "assignment_weight", assignment_weight)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if cache_engine_method is not None:
            pulumi.set(__self__, "cache_engine_method", cache_engine_method)
        if cache_id is not None:
            pulumi.set(__self__, "cache_id", cache_id)
        if forward_method is not None:
            pulumi.set(__self__, "forward_method", forward_method)
        if group_address is not None:
            pulumi.set(__self__, "group_address", group_address)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if ports_defined is not None:
            pulumi.set(__self__, "ports_defined", ports_defined)
        if primary_hash is not None:
            pulumi.set(__self__, "primary_hash", primary_hash)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if return_method is not None:
            pulumi.set(__self__, "return_method", return_method)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if router_list is not None:
            pulumi.set(__self__, "router_list", router_list)
        if server_list is not None:
            pulumi.set(__self__, "server_list", server_list)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="assignmentBucketFormat")
    def assignment_bucket_format(self) -> Optional[pulumi.Input[str]]:
        """
        Assignment bucket format for the WCCP cache engine. Valid values: `wccp-v2`, `cisco-implementation`.
        """
        return pulumi.get(self, "assignment_bucket_format")

    @assignment_bucket_format.setter
    def assignment_bucket_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_bucket_format", value)

    @property
    @pulumi.getter(name="assignmentDstaddrMask")
    def assignment_dstaddr_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Assignment destination address mask.
        """
        return pulumi.get(self, "assignment_dstaddr_mask")

    @assignment_dstaddr_mask.setter
    def assignment_dstaddr_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_dstaddr_mask", value)

    @property
    @pulumi.getter(name="assignmentMethod")
    def assignment_method(self) -> Optional[pulumi.Input[str]]:
        """
        Hash key assignment preference. Valid values: `HASH`, `MASK`, `any`.
        """
        return pulumi.get(self, "assignment_method")

    @assignment_method.setter
    def assignment_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_method", value)

    @property
    @pulumi.getter(name="assignmentSrcaddrMask")
    def assignment_srcaddr_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Assignment source address mask.
        """
        return pulumi.get(self, "assignment_srcaddr_mask")

    @assignment_srcaddr_mask.setter
    def assignment_srcaddr_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_srcaddr_mask", value)

    @property
    @pulumi.getter(name="assignmentWeight")
    def assignment_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Assignment of hash weight/ratio for the WCCP cache engine.
        """
        return pulumi.get(self, "assignment_weight")

    @assignment_weight.setter
    def assignment_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assignment_weight", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MD5 authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="cacheEngineMethod")
    def cache_engine_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to forward traffic to the routers or to return to the cache engine. Valid values: `GRE`, `L2`.
        """
        return pulumi.get(self, "cache_engine_method")

    @cache_engine_method.setter
    def cache_engine_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_engine_method", value)

    @property
    @pulumi.getter(name="cacheId")
    def cache_id(self) -> Optional[pulumi.Input[str]]:
        """
        IP address known to all routers. If the addresses are the same, use the default 0.0.0.0.
        """
        return pulumi.get(self, "cache_id")

    @cache_id.setter
    def cache_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_id", value)

    @property
    @pulumi.getter(name="forwardMethod")
    def forward_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to forward traffic to the cache servers. Valid values: `GRE`, `L2`, `any`.
        """
        return pulumi.get(self, "forward_method")

    @forward_method.setter
    def forward_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_method", value)

    @property
    @pulumi.getter(name="groupAddress")
    def group_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP multicast address used by the cache routers. For the FortiGate to ignore multicast WCCP traffic, use the default 0.0.0.0.
        """
        return pulumi.get(self, "group_address")

    @group_address.setter
    def group_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_address", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for MD5 authentication.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        Service ports.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="portsDefined")
    def ports_defined(self) -> Optional[pulumi.Input[str]]:
        """
        Match method. Valid values: `source`, `destination`.
        """
        return pulumi.get(self, "ports_defined")

    @ports_defined.setter
    def ports_defined(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports_defined", value)

    @property
    @pulumi.getter(name="primaryHash")
    def primary_hash(self) -> Optional[pulumi.Input[str]]:
        """
        Hash method. Valid values: `src-ip`, `dst-ip`, `src-port`, `dst-port`.
        """
        return pulumi.get(self, "primary_hash")

    @primary_hash.setter
    def primary_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_hash", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Service priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Service protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="returnMethod")
    def return_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to decline a redirected packet and return it to the FortiGate. Valid values: `GRE`, `L2`, `any`.
        """
        return pulumi.get(self, "return_method")

    @return_method.setter
    def return_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "return_method", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        IP address known to all cache engines. If all cache engines connect to the same FortiGate interface, use the default 0.0.0.0.
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="routerList")
    def router_list(self) -> Optional[pulumi.Input[str]]:
        """
        IP addresses of one or more WCCP routers.
        """
        return pulumi.get(self, "router_list")

    @router_list.setter
    def router_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_list", value)

    @property
    @pulumi.getter(name="serverList")
    def server_list(self) -> Optional[pulumi.Input[str]]:
        """
        IP addresses and netmasks for up to four cache servers.
        """
        return pulumi.get(self, "server_list")

    @server_list.setter
    def server_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_list", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Cache server type. Valid values: `forward`, `proxy`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        Service ID.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        WCCP service type used by the cache server for logical interception and redirection of traffic. Valid values: `auto`, `standard`, `dynamic`.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _WccpState:
    def __init__(__self__, *,
                 assignment_bucket_format: Optional[pulumi.Input[str]] = None,
                 assignment_dstaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_method: Optional[pulumi.Input[str]] = None,
                 assignment_srcaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_weight: Optional[pulumi.Input[int]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 cache_engine_method: Optional[pulumi.Input[str]] = None,
                 cache_id: Optional[pulumi.Input[str]] = None,
                 forward_method: Optional[pulumi.Input[str]] = None,
                 group_address: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 ports_defined: Optional[pulumi.Input[str]] = None,
                 primary_hash: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 return_method: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 router_list: Optional[pulumi.Input[str]] = None,
                 server_list: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Wccp resources.
        :param pulumi.Input[str] assignment_bucket_format: Assignment bucket format for the WCCP cache engine. Valid values: `wccp-v2`, `cisco-implementation`.
        :param pulumi.Input[str] assignment_dstaddr_mask: Assignment destination address mask.
        :param pulumi.Input[str] assignment_method: Hash key assignment preference. Valid values: `HASH`, `MASK`, `any`.
        :param pulumi.Input[str] assignment_srcaddr_mask: Assignment source address mask.
        :param pulumi.Input[int] assignment_weight: Assignment of hash weight/ratio for the WCCP cache engine.
        :param pulumi.Input[str] authentication: Enable/disable MD5 authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cache_engine_method: Method used to forward traffic to the routers or to return to the cache engine. Valid values: `GRE`, `L2`.
        :param pulumi.Input[str] cache_id: IP address known to all routers. If the addresses are the same, use the default 0.0.0.0.
        :param pulumi.Input[str] forward_method: Method used to forward traffic to the cache servers. Valid values: `GRE`, `L2`, `any`.
        :param pulumi.Input[str] group_address: IP multicast address used by the cache routers. For the FortiGate to ignore multicast WCCP traffic, use the default 0.0.0.0.
        :param pulumi.Input[str] password: Password for MD5 authentication.
        :param pulumi.Input[str] ports: Service ports.
        :param pulumi.Input[str] ports_defined: Match method. Valid values: `source`, `destination`.
        :param pulumi.Input[str] primary_hash: Hash method. Valid values: `src-ip`, `dst-ip`, `src-port`, `dst-port`.
        :param pulumi.Input[int] priority: Service priority.
        :param pulumi.Input[int] protocol: Service protocol.
        :param pulumi.Input[str] return_method: Method used to decline a redirected packet and return it to the FortiGate. Valid values: `GRE`, `L2`, `any`.
        :param pulumi.Input[str] router_id: IP address known to all cache engines. If all cache engines connect to the same FortiGate interface, use the default 0.0.0.0.
        :param pulumi.Input[str] router_list: IP addresses of one or more WCCP routers.
        :param pulumi.Input[str] server_list: IP addresses and netmasks for up to four cache servers.
        :param pulumi.Input[str] server_type: Cache server type. Valid values: `forward`, `proxy`.
        :param pulumi.Input[str] service_id: Service ID.
        :param pulumi.Input[str] service_type: WCCP service type used by the cache server for logical interception and redirection of traffic. Valid values: `auto`, `standard`, `dynamic`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if assignment_bucket_format is not None:
            pulumi.set(__self__, "assignment_bucket_format", assignment_bucket_format)
        if assignment_dstaddr_mask is not None:
            pulumi.set(__self__, "assignment_dstaddr_mask", assignment_dstaddr_mask)
        if assignment_method is not None:
            pulumi.set(__self__, "assignment_method", assignment_method)
        if assignment_srcaddr_mask is not None:
            pulumi.set(__self__, "assignment_srcaddr_mask", assignment_srcaddr_mask)
        if assignment_weight is not None:
            pulumi.set(__self__, "assignment_weight", assignment_weight)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if cache_engine_method is not None:
            pulumi.set(__self__, "cache_engine_method", cache_engine_method)
        if cache_id is not None:
            pulumi.set(__self__, "cache_id", cache_id)
        if forward_method is not None:
            pulumi.set(__self__, "forward_method", forward_method)
        if group_address is not None:
            pulumi.set(__self__, "group_address", group_address)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if ports_defined is not None:
            pulumi.set(__self__, "ports_defined", ports_defined)
        if primary_hash is not None:
            pulumi.set(__self__, "primary_hash", primary_hash)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if return_method is not None:
            pulumi.set(__self__, "return_method", return_method)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if router_list is not None:
            pulumi.set(__self__, "router_list", router_list)
        if server_list is not None:
            pulumi.set(__self__, "server_list", server_list)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="assignmentBucketFormat")
    def assignment_bucket_format(self) -> Optional[pulumi.Input[str]]:
        """
        Assignment bucket format for the WCCP cache engine. Valid values: `wccp-v2`, `cisco-implementation`.
        """
        return pulumi.get(self, "assignment_bucket_format")

    @assignment_bucket_format.setter
    def assignment_bucket_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_bucket_format", value)

    @property
    @pulumi.getter(name="assignmentDstaddrMask")
    def assignment_dstaddr_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Assignment destination address mask.
        """
        return pulumi.get(self, "assignment_dstaddr_mask")

    @assignment_dstaddr_mask.setter
    def assignment_dstaddr_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_dstaddr_mask", value)

    @property
    @pulumi.getter(name="assignmentMethod")
    def assignment_method(self) -> Optional[pulumi.Input[str]]:
        """
        Hash key assignment preference. Valid values: `HASH`, `MASK`, `any`.
        """
        return pulumi.get(self, "assignment_method")

    @assignment_method.setter
    def assignment_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_method", value)

    @property
    @pulumi.getter(name="assignmentSrcaddrMask")
    def assignment_srcaddr_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Assignment source address mask.
        """
        return pulumi.get(self, "assignment_srcaddr_mask")

    @assignment_srcaddr_mask.setter
    def assignment_srcaddr_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_srcaddr_mask", value)

    @property
    @pulumi.getter(name="assignmentWeight")
    def assignment_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Assignment of hash weight/ratio for the WCCP cache engine.
        """
        return pulumi.get(self, "assignment_weight")

    @assignment_weight.setter
    def assignment_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assignment_weight", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MD5 authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="cacheEngineMethod")
    def cache_engine_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to forward traffic to the routers or to return to the cache engine. Valid values: `GRE`, `L2`.
        """
        return pulumi.get(self, "cache_engine_method")

    @cache_engine_method.setter
    def cache_engine_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_engine_method", value)

    @property
    @pulumi.getter(name="cacheId")
    def cache_id(self) -> Optional[pulumi.Input[str]]:
        """
        IP address known to all routers. If the addresses are the same, use the default 0.0.0.0.
        """
        return pulumi.get(self, "cache_id")

    @cache_id.setter
    def cache_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_id", value)

    @property
    @pulumi.getter(name="forwardMethod")
    def forward_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to forward traffic to the cache servers. Valid values: `GRE`, `L2`, `any`.
        """
        return pulumi.get(self, "forward_method")

    @forward_method.setter
    def forward_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_method", value)

    @property
    @pulumi.getter(name="groupAddress")
    def group_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP multicast address used by the cache routers. For the FortiGate to ignore multicast WCCP traffic, use the default 0.0.0.0.
        """
        return pulumi.get(self, "group_address")

    @group_address.setter
    def group_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_address", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for MD5 authentication.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        Service ports.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="portsDefined")
    def ports_defined(self) -> Optional[pulumi.Input[str]]:
        """
        Match method. Valid values: `source`, `destination`.
        """
        return pulumi.get(self, "ports_defined")

    @ports_defined.setter
    def ports_defined(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports_defined", value)

    @property
    @pulumi.getter(name="primaryHash")
    def primary_hash(self) -> Optional[pulumi.Input[str]]:
        """
        Hash method. Valid values: `src-ip`, `dst-ip`, `src-port`, `dst-port`.
        """
        return pulumi.get(self, "primary_hash")

    @primary_hash.setter
    def primary_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_hash", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Service priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Service protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="returnMethod")
    def return_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to decline a redirected packet and return it to the FortiGate. Valid values: `GRE`, `L2`, `any`.
        """
        return pulumi.get(self, "return_method")

    @return_method.setter
    def return_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "return_method", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        IP address known to all cache engines. If all cache engines connect to the same FortiGate interface, use the default 0.0.0.0.
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="routerList")
    def router_list(self) -> Optional[pulumi.Input[str]]:
        """
        IP addresses of one or more WCCP routers.
        """
        return pulumi.get(self, "router_list")

    @router_list.setter
    def router_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_list", value)

    @property
    @pulumi.getter(name="serverList")
    def server_list(self) -> Optional[pulumi.Input[str]]:
        """
        IP addresses and netmasks for up to four cache servers.
        """
        return pulumi.get(self, "server_list")

    @server_list.setter
    def server_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_list", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Cache server type. Valid values: `forward`, `proxy`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        Service ID.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        WCCP service type used by the cache server for logical interception and redirection of traffic. Valid values: `auto`, `standard`, `dynamic`.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Wccp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assignment_bucket_format: Optional[pulumi.Input[str]] = None,
                 assignment_dstaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_method: Optional[pulumi.Input[str]] = None,
                 assignment_srcaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_weight: Optional[pulumi.Input[int]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 cache_engine_method: Optional[pulumi.Input[str]] = None,
                 cache_id: Optional[pulumi.Input[str]] = None,
                 forward_method: Optional[pulumi.Input[str]] = None,
                 group_address: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 ports_defined: Optional[pulumi.Input[str]] = None,
                 primary_hash: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 return_method: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 router_list: Optional[pulumi.Input[str]] = None,
                 server_list: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure WCCP.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Wccp("trname",
            assignment_bucket_format="cisco-implementation",
            assignment_dstaddr_mask="0.0.0.0",
            assignment_method="HASH",
            assignment_srcaddr_mask="0.0.23.65",
            assignment_weight=0,
            authentication="disable",
            cache_engine_method="GRE",
            cache_id="1.1.1.1",
            forward_method="GRE",
            group_address="0.0.0.0",
            primary_hash="dst-ip",
            priority=0,
            protocol=0,
            return_method="GRE",
            router_id="1.1.1.1",
            router_list="\\"1.0.0.0\\" ",
            server_type="forward",
            service_id="1",
            service_type="auto")
        ```

        ## Import

        System Wccp can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/wccp:Wccp labelname {{service_id}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/wccp:Wccp labelname {{service_id}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assignment_bucket_format: Assignment bucket format for the WCCP cache engine. Valid values: `wccp-v2`, `cisco-implementation`.
        :param pulumi.Input[str] assignment_dstaddr_mask: Assignment destination address mask.
        :param pulumi.Input[str] assignment_method: Hash key assignment preference. Valid values: `HASH`, `MASK`, `any`.
        :param pulumi.Input[str] assignment_srcaddr_mask: Assignment source address mask.
        :param pulumi.Input[int] assignment_weight: Assignment of hash weight/ratio for the WCCP cache engine.
        :param pulumi.Input[str] authentication: Enable/disable MD5 authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cache_engine_method: Method used to forward traffic to the routers or to return to the cache engine. Valid values: `GRE`, `L2`.
        :param pulumi.Input[str] cache_id: IP address known to all routers. If the addresses are the same, use the default 0.0.0.0.
        :param pulumi.Input[str] forward_method: Method used to forward traffic to the cache servers. Valid values: `GRE`, `L2`, `any`.
        :param pulumi.Input[str] group_address: IP multicast address used by the cache routers. For the FortiGate to ignore multicast WCCP traffic, use the default 0.0.0.0.
        :param pulumi.Input[str] password: Password for MD5 authentication.
        :param pulumi.Input[str] ports: Service ports.
        :param pulumi.Input[str] ports_defined: Match method. Valid values: `source`, `destination`.
        :param pulumi.Input[str] primary_hash: Hash method. Valid values: `src-ip`, `dst-ip`, `src-port`, `dst-port`.
        :param pulumi.Input[int] priority: Service priority.
        :param pulumi.Input[int] protocol: Service protocol.
        :param pulumi.Input[str] return_method: Method used to decline a redirected packet and return it to the FortiGate. Valid values: `GRE`, `L2`, `any`.
        :param pulumi.Input[str] router_id: IP address known to all cache engines. If all cache engines connect to the same FortiGate interface, use the default 0.0.0.0.
        :param pulumi.Input[str] router_list: IP addresses of one or more WCCP routers.
        :param pulumi.Input[str] server_list: IP addresses and netmasks for up to four cache servers.
        :param pulumi.Input[str] server_type: Cache server type. Valid values: `forward`, `proxy`.
        :param pulumi.Input[str] service_id: Service ID.
        :param pulumi.Input[str] service_type: WCCP service type used by the cache server for logical interception and redirection of traffic. Valid values: `auto`, `standard`, `dynamic`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WccpArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure WCCP.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Wccp("trname",
            assignment_bucket_format="cisco-implementation",
            assignment_dstaddr_mask="0.0.0.0",
            assignment_method="HASH",
            assignment_srcaddr_mask="0.0.23.65",
            assignment_weight=0,
            authentication="disable",
            cache_engine_method="GRE",
            cache_id="1.1.1.1",
            forward_method="GRE",
            group_address="0.0.0.0",
            primary_hash="dst-ip",
            priority=0,
            protocol=0,
            return_method="GRE",
            router_id="1.1.1.1",
            router_list="\\"1.0.0.0\\" ",
            server_type="forward",
            service_id="1",
            service_type="auto")
        ```

        ## Import

        System Wccp can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/wccp:Wccp labelname {{service_id}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/wccp:Wccp labelname {{service_id}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param WccpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WccpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assignment_bucket_format: Optional[pulumi.Input[str]] = None,
                 assignment_dstaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_method: Optional[pulumi.Input[str]] = None,
                 assignment_srcaddr_mask: Optional[pulumi.Input[str]] = None,
                 assignment_weight: Optional[pulumi.Input[int]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 cache_engine_method: Optional[pulumi.Input[str]] = None,
                 cache_id: Optional[pulumi.Input[str]] = None,
                 forward_method: Optional[pulumi.Input[str]] = None,
                 group_address: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 ports_defined: Optional[pulumi.Input[str]] = None,
                 primary_hash: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 return_method: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 router_list: Optional[pulumi.Input[str]] = None,
                 server_list: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WccpArgs.__new__(WccpArgs)

            __props__.__dict__["assignment_bucket_format"] = assignment_bucket_format
            __props__.__dict__["assignment_dstaddr_mask"] = assignment_dstaddr_mask
            __props__.__dict__["assignment_method"] = assignment_method
            __props__.__dict__["assignment_srcaddr_mask"] = assignment_srcaddr_mask
            __props__.__dict__["assignment_weight"] = assignment_weight
            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["cache_engine_method"] = cache_engine_method
            __props__.__dict__["cache_id"] = cache_id
            __props__.__dict__["forward_method"] = forward_method
            __props__.__dict__["group_address"] = group_address
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["ports"] = ports
            __props__.__dict__["ports_defined"] = ports_defined
            __props__.__dict__["primary_hash"] = primary_hash
            __props__.__dict__["priority"] = priority
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["return_method"] = return_method
            __props__.__dict__["router_id"] = router_id
            __props__.__dict__["router_list"] = router_list
            __props__.__dict__["server_list"] = server_list
            __props__.__dict__["server_type"] = server_type
            __props__.__dict__["service_id"] = service_id
            __props__.__dict__["service_type"] = service_type
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Wccp, __self__).__init__(
            'fortios:system/wccp:Wccp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assignment_bucket_format: Optional[pulumi.Input[str]] = None,
            assignment_dstaddr_mask: Optional[pulumi.Input[str]] = None,
            assignment_method: Optional[pulumi.Input[str]] = None,
            assignment_srcaddr_mask: Optional[pulumi.Input[str]] = None,
            assignment_weight: Optional[pulumi.Input[int]] = None,
            authentication: Optional[pulumi.Input[str]] = None,
            cache_engine_method: Optional[pulumi.Input[str]] = None,
            cache_id: Optional[pulumi.Input[str]] = None,
            forward_method: Optional[pulumi.Input[str]] = None,
            group_address: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            ports: Optional[pulumi.Input[str]] = None,
            ports_defined: Optional[pulumi.Input[str]] = None,
            primary_hash: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[int]] = None,
            return_method: Optional[pulumi.Input[str]] = None,
            router_id: Optional[pulumi.Input[str]] = None,
            router_list: Optional[pulumi.Input[str]] = None,
            server_list: Optional[pulumi.Input[str]] = None,
            server_type: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            service_type: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Wccp':
        """
        Get an existing Wccp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assignment_bucket_format: Assignment bucket format for the WCCP cache engine. Valid values: `wccp-v2`, `cisco-implementation`.
        :param pulumi.Input[str] assignment_dstaddr_mask: Assignment destination address mask.
        :param pulumi.Input[str] assignment_method: Hash key assignment preference. Valid values: `HASH`, `MASK`, `any`.
        :param pulumi.Input[str] assignment_srcaddr_mask: Assignment source address mask.
        :param pulumi.Input[int] assignment_weight: Assignment of hash weight/ratio for the WCCP cache engine.
        :param pulumi.Input[str] authentication: Enable/disable MD5 authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cache_engine_method: Method used to forward traffic to the routers or to return to the cache engine. Valid values: `GRE`, `L2`.
        :param pulumi.Input[str] cache_id: IP address known to all routers. If the addresses are the same, use the default 0.0.0.0.
        :param pulumi.Input[str] forward_method: Method used to forward traffic to the cache servers. Valid values: `GRE`, `L2`, `any`.
        :param pulumi.Input[str] group_address: IP multicast address used by the cache routers. For the FortiGate to ignore multicast WCCP traffic, use the default 0.0.0.0.
        :param pulumi.Input[str] password: Password for MD5 authentication.
        :param pulumi.Input[str] ports: Service ports.
        :param pulumi.Input[str] ports_defined: Match method. Valid values: `source`, `destination`.
        :param pulumi.Input[str] primary_hash: Hash method. Valid values: `src-ip`, `dst-ip`, `src-port`, `dst-port`.
        :param pulumi.Input[int] priority: Service priority.
        :param pulumi.Input[int] protocol: Service protocol.
        :param pulumi.Input[str] return_method: Method used to decline a redirected packet and return it to the FortiGate. Valid values: `GRE`, `L2`, `any`.
        :param pulumi.Input[str] router_id: IP address known to all cache engines. If all cache engines connect to the same FortiGate interface, use the default 0.0.0.0.
        :param pulumi.Input[str] router_list: IP addresses of one or more WCCP routers.
        :param pulumi.Input[str] server_list: IP addresses and netmasks for up to four cache servers.
        :param pulumi.Input[str] server_type: Cache server type. Valid values: `forward`, `proxy`.
        :param pulumi.Input[str] service_id: Service ID.
        :param pulumi.Input[str] service_type: WCCP service type used by the cache server for logical interception and redirection of traffic. Valid values: `auto`, `standard`, `dynamic`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WccpState.__new__(_WccpState)

        __props__.__dict__["assignment_bucket_format"] = assignment_bucket_format
        __props__.__dict__["assignment_dstaddr_mask"] = assignment_dstaddr_mask
        __props__.__dict__["assignment_method"] = assignment_method
        __props__.__dict__["assignment_srcaddr_mask"] = assignment_srcaddr_mask
        __props__.__dict__["assignment_weight"] = assignment_weight
        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["cache_engine_method"] = cache_engine_method
        __props__.__dict__["cache_id"] = cache_id
        __props__.__dict__["forward_method"] = forward_method
        __props__.__dict__["group_address"] = group_address
        __props__.__dict__["password"] = password
        __props__.__dict__["ports"] = ports
        __props__.__dict__["ports_defined"] = ports_defined
        __props__.__dict__["primary_hash"] = primary_hash
        __props__.__dict__["priority"] = priority
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["return_method"] = return_method
        __props__.__dict__["router_id"] = router_id
        __props__.__dict__["router_list"] = router_list
        __props__.__dict__["server_list"] = server_list
        __props__.__dict__["server_type"] = server_type
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["service_type"] = service_type
        __props__.__dict__["vdomparam"] = vdomparam
        return Wccp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assignmentBucketFormat")
    def assignment_bucket_format(self) -> pulumi.Output[str]:
        """
        Assignment bucket format for the WCCP cache engine. Valid values: `wccp-v2`, `cisco-implementation`.
        """
        return pulumi.get(self, "assignment_bucket_format")

    @property
    @pulumi.getter(name="assignmentDstaddrMask")
    def assignment_dstaddr_mask(self) -> pulumi.Output[str]:
        """
        Assignment destination address mask.
        """
        return pulumi.get(self, "assignment_dstaddr_mask")

    @property
    @pulumi.getter(name="assignmentMethod")
    def assignment_method(self) -> pulumi.Output[str]:
        """
        Hash key assignment preference. Valid values: `HASH`, `MASK`, `any`.
        """
        return pulumi.get(self, "assignment_method")

    @property
    @pulumi.getter(name="assignmentSrcaddrMask")
    def assignment_srcaddr_mask(self) -> pulumi.Output[str]:
        """
        Assignment source address mask.
        """
        return pulumi.get(self, "assignment_srcaddr_mask")

    @property
    @pulumi.getter(name="assignmentWeight")
    def assignment_weight(self) -> pulumi.Output[int]:
        """
        Assignment of hash weight/ratio for the WCCP cache engine.
        """
        return pulumi.get(self, "assignment_weight")

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output[str]:
        """
        Enable/disable MD5 authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="cacheEngineMethod")
    def cache_engine_method(self) -> pulumi.Output[str]:
        """
        Method used to forward traffic to the routers or to return to the cache engine. Valid values: `GRE`, `L2`.
        """
        return pulumi.get(self, "cache_engine_method")

    @property
    @pulumi.getter(name="cacheId")
    def cache_id(self) -> pulumi.Output[str]:
        """
        IP address known to all routers. If the addresses are the same, use the default 0.0.0.0.
        """
        return pulumi.get(self, "cache_id")

    @property
    @pulumi.getter(name="forwardMethod")
    def forward_method(self) -> pulumi.Output[str]:
        """
        Method used to forward traffic to the cache servers. Valid values: `GRE`, `L2`, `any`.
        """
        return pulumi.get(self, "forward_method")

    @property
    @pulumi.getter(name="groupAddress")
    def group_address(self) -> pulumi.Output[str]:
        """
        IP multicast address used by the cache routers. For the FortiGate to ignore multicast WCCP traffic, use the default 0.0.0.0.
        """
        return pulumi.get(self, "group_address")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password for MD5 authentication.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Output[str]:
        """
        Service ports.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="portsDefined")
    def ports_defined(self) -> pulumi.Output[str]:
        """
        Match method. Valid values: `source`, `destination`.
        """
        return pulumi.get(self, "ports_defined")

    @property
    @pulumi.getter(name="primaryHash")
    def primary_hash(self) -> pulumi.Output[str]:
        """
        Hash method. Valid values: `src-ip`, `dst-ip`, `src-port`, `dst-port`.
        """
        return pulumi.get(self, "primary_hash")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Service priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[int]:
        """
        Service protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="returnMethod")
    def return_method(self) -> pulumi.Output[str]:
        """
        Method used to decline a redirected packet and return it to the FortiGate. Valid values: `GRE`, `L2`, `any`.
        """
        return pulumi.get(self, "return_method")

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Output[str]:
        """
        IP address known to all cache engines. If all cache engines connect to the same FortiGate interface, use the default 0.0.0.0.
        """
        return pulumi.get(self, "router_id")

    @property
    @pulumi.getter(name="routerList")
    def router_list(self) -> pulumi.Output[str]:
        """
        IP addresses of one or more WCCP routers.
        """
        return pulumi.get(self, "router_list")

    @property
    @pulumi.getter(name="serverList")
    def server_list(self) -> pulumi.Output[str]:
        """
        IP addresses and netmasks for up to four cache servers.
        """
        return pulumi.get(self, "server_list")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[str]:
        """
        Cache server type. Valid values: `forward`, `proxy`.
        """
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        Service ID.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Output[str]:
        """
        WCCP service type used by the cache server for logical interception and redirection of traffic. Valid values: `auto`, `standard`, `dynamic`.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

