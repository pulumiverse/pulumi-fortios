# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AccprofileFwgrpPermission',
    'AccprofileLoggrpPermission',
    'AccprofileNetgrpPermission',
    'AccprofileSysgrpPermission',
    'AccprofileUtmgrpPermission',
    'AcmeAccount',
    'AcmeInterface',
    'AdminGuestUsergroup',
    'AdminGuiDashboard',
    'AdminGuiDashboardWidget',
    'AdminGuiDashboardWidgetFilter',
    'AdminGuiGlobalMenuFavorite',
    'AdminGuiNewFeatureAcknowledge',
    'AdminGuiVdomMenuFavorite',
    'AdminLoginTime',
    'AdminVdom',
    'AlarmGroup',
    'AlarmGroupFwPolicyViolation',
    'ApiuserSettingTrusthost',
    'ApiuserTrusthost',
    'ApiuserVdom',
    'AutomationactionEmailTo',
    'AutomationactionHeader',
    'AutomationactionHttpHeader',
    'AutomationactionSdnConnector',
    'AutomationdestinationDestination',
    'AutomationstitchAction',
    'AutomationstitchDestination',
    'AutomationtriggerField',
    'AutomationtriggerLogidBlock',
    'AutomationtriggerVdom',
    'CentralmanagementServerList',
    'ClustersyncDownIntfsBeforeSessSync',
    'ClustersyncSessionSyncFilter',
    'ClustersyncSessionSyncFilterCustomService',
    'ClustersyncSyncvd',
    'CsfFabricConnector',
    'CsfFabricConnectorVdom',
    'CsfFabricDevice',
    'CsfTrustedList',
    'DdnsDdnsServerAddr',
    'DdnsMonitorInterface',
    'DeviceupgradeKnownHaMember',
    'DnsDomain',
    'DnsServerHostname',
    'DnsdatabaseDnsEntry',
    'EvpnExportRt',
    'EvpnImportRt',
    'FabricvpnAdvertisedSubnet',
    'FabricvpnOverlay',
    'FederatedupgradeKnownHaMember',
    'FederatedupgradeNodeList',
    'GeoipoverrideIp6Range',
    'GeoipoverrideIpRange',
    'GlobalInternetServiceDownloadList',
    'HaHaMgmtInterface',
    'HaSecondaryVcluster',
    'HaUnicastPeer',
    'HaVcluster',
    'HaVclusterVdom',
    'IkeDhGroup14',
    'IkeDhGroup15',
    'IkeDhGroup16',
    'IkeDhGroup17',
    'IkeDhGroup18',
    'IkeDhGroup19',
    'IkeDhGroup1',
    'IkeDhGroup20',
    'IkeDhGroup21',
    'IkeDhGroup27',
    'IkeDhGroup28',
    'IkeDhGroup29',
    'IkeDhGroup2',
    'IkeDhGroup30',
    'IkeDhGroup31',
    'IkeDhGroup32',
    'IkeDhGroup5',
    'InterfaceClientOption',
    'InterfaceDhcpSnoopingServerList',
    'InterfaceFailAlertInterface',
    'InterfaceIpv6',
    'InterfaceIpv6Dhcp6IapdList',
    'InterfaceIpv6Ip6DelegatedPrefixList',
    'InterfaceIpv6Ip6ExtraAddr',
    'InterfaceIpv6Ip6PrefixList',
    'InterfaceIpv6Ip6PrefixListDnssl',
    'InterfaceIpv6Vrrp6',
    'InterfaceManagedDevice',
    'InterfaceMember',
    'InterfaceSecondaryip',
    'InterfaceSecurityGroup',
    'InterfaceTagging',
    'InterfaceTaggingTag',
    'InterfaceVrrp',
    'InterfaceVrrpProxyArp',
    'IpamPool',
    'IpamRule',
    'IpamRuleDevice',
    'IpamRuleInterface',
    'IpamRulePool',
    'IpsecaggregateMember',
    'LinkmonitorRoute',
    'LinkmonitorServer',
    'LinkmonitorServerList',
    'MobiletunnelNetwork',
    'Nat64SecondaryPrefix',
    'NdproxyMember',
    'NetflowCollector',
    'NpuPriorityProtocol',
    'NtpInterface',
    'NtpNtpserver',
    'ObjecttaggingTag',
    'PcpserverPool',
    'PcpserverPoolClientSubnet',
    'PcpserverPoolIntlIntf',
    'PcpserverPoolThirdPartySubnet',
    'PtpServerInterface',
    'ReplacemsggroupAdmin',
    'ReplacemsggroupAlertmail',
    'ReplacemsggroupAuth',
    'ReplacemsggroupAutomation',
    'ReplacemsggroupCustomMessage',
    'ReplacemsggroupDeviceDetectionPortal',
    'ReplacemsggroupEc',
    'ReplacemsggroupFortiguardWf',
    'ReplacemsggroupFtp',
    'ReplacemsggroupHttp',
    'ReplacemsggroupIcap',
    'ReplacemsggroupMail',
    'ReplacemsggroupNacQuar',
    'ReplacemsggroupNntp',
    'ReplacemsggroupSpam',
    'ReplacemsggroupSslvpn',
    'ReplacemsggroupTrafficQuota',
    'ReplacemsggroupUtm',
    'ReplacemsggroupWebproxy',
    'SamlServiceProvider',
    'SamlServiceProviderAssertionAttribute',
    'SdnconnectorCompartmentList',
    'SdnconnectorExternalAccountList',
    'SdnconnectorExternalAccountListRegionList',
    'SdnconnectorExternalIp',
    'SdnconnectorForwardingRule',
    'SdnconnectorGcpProjectList',
    'SdnconnectorGcpProjectListGcpZoneList',
    'SdnconnectorNic',
    'SdnconnectorNicIp',
    'SdnconnectorOciRegionList',
    'SdnconnectorRoute',
    'SdnconnectorRouteTable',
    'SdnconnectorRouteTableRoute',
    'SdnconnectorServerList',
    'SdwanDuplication',
    'SdwanDuplicationDstaddr6',
    'SdwanDuplicationDstaddr',
    'SdwanDuplicationDstintf',
    'SdwanDuplicationService',
    'SdwanDuplicationServiceId',
    'SdwanDuplicationSrcaddr6',
    'SdwanDuplicationSrcaddr',
    'SdwanDuplicationSrcintf',
    'SdwanFailAlertInterface',
    'SdwanHealthCheck',
    'SdwanHealthCheckMember',
    'SdwanHealthCheckSla',
    'SdwanMember',
    'SdwanNeighbor',
    'SdwanNeighborMemberBlock',
    'SdwanService',
    'SdwanServiceDst6',
    'SdwanServiceDst',
    'SdwanServiceGroup',
    'SdwanServiceHealthCheck',
    'SdwanServiceInputDevice',
    'SdwanServiceInputZone',
    'SdwanServiceInternetServiceAppCtrl',
    'SdwanServiceInternetServiceAppCtrlCategory',
    'SdwanServiceInternetServiceAppCtrlGroup',
    'SdwanServiceInternetServiceCustom',
    'SdwanServiceInternetServiceCustomGroup',
    'SdwanServiceInternetServiceGroup',
    'SdwanServiceInternetServiceName',
    'SdwanServicePriorityMember',
    'SdwanServicePriorityZone',
    'SdwanServiceSla',
    'SdwanServiceSrc6',
    'SdwanServiceSrc',
    'SdwanServiceUser',
    'SdwanZone',
    'SessionttlPort',
    'SettingsGuiDefaultPolicyColumn',
    'SflowCollector',
    'SpeedtestscheduleSchedule',
    'SpeedtestserverHost',
    'SsoadminVdom',
    'SsoforticloudadminVdom',
    'SsofortigatecloudadminVdom',
    'StandaloneclusterClusterPeer',
    'StandaloneclusterClusterPeerDownIntfsBeforeSessSync',
    'StandaloneclusterClusterPeerSessionSyncFilter',
    'StandaloneclusterClusterPeerSessionSyncFilterCustomService',
    'StandaloneclusterClusterPeerSyncvd',
    'SwitchinterfaceMember',
    'SwitchinterfaceSpanSourcePort',
    'VdomdnsServerHostname',
    'VdomexceptionVdom',
    'VdomnetflowCollector',
    'VdomsflowCollector',
    'VirtualswitchPort',
    'VirtualwanlinkFailAlertInterface',
    'VirtualwanlinkHealthCheck',
    'VirtualwanlinkHealthCheckMember',
    'VirtualwanlinkHealthCheckSla',
    'VirtualwanlinkMember',
    'VirtualwanlinkNeighbor',
    'VirtualwanlinkService',
    'VirtualwanlinkServiceDst6',
    'VirtualwanlinkServiceDst',
    'VirtualwanlinkServiceGroup',
    'VirtualwanlinkServiceInputDevice',
    'VirtualwanlinkServiceInternetServiceAppCtrl',
    'VirtualwanlinkServiceInternetServiceAppCtrlGroup',
    'VirtualwanlinkServiceInternetServiceCtrl',
    'VirtualwanlinkServiceInternetServiceCtrlGroup',
    'VirtualwanlinkServiceInternetServiceCustom',
    'VirtualwanlinkServiceInternetServiceCustomGroup',
    'VirtualwanlinkServiceInternetServiceGroup',
    'VirtualwanlinkServiceInternetServiceId',
    'VirtualwanlinkServiceInternetServiceName',
    'VirtualwanlinkServicePriorityMember',
    'VirtualwanlinkServiceSla',
    'VirtualwanlinkServiceSrc6',
    'VirtualwanlinkServiceSrc',
    'VirtualwanlinkServiceUser',
    'VirtualwanlinkZone',
    'VirtualwirepairMember',
    'VxlanRemoteIp6',
    'VxlanRemoteIp',
    'ZoneInterface',
    'ZoneTagging',
    'ZoneTaggingTag',
    'GetAccprofileFwgrpPermissionResult',
    'GetAccprofileLoggrpPermissionResult',
    'GetAccprofileNetgrpPermissionResult',
    'GetAccprofileSysgrpPermissionResult',
    'GetAccprofileUtmgrpPermissionResult',
    'GetAdminGuestUsergroupResult',
    'GetAdminGuiDashboardResult',
    'GetAdminGuiDashboardWidgetResult',
    'GetAdminGuiDashboardWidgetFilterResult',
    'GetAdminGuiGlobalMenuFavoriteResult',
    'GetAdminGuiNewFeatureAcknowledgeResult',
    'GetAdminGuiVdomMenuFavoriteResult',
    'GetAdminLoginTimeResult',
    'GetAdminVdomResult',
    'GetApiuserTrusthostResult',
    'GetApiuserVdomResult',
    'GetAutomationactionEmailToResult',
    'GetAutomationactionHeaderResult',
    'GetAutomationactionHttpHeaderResult',
    'GetAutomationactionSdnConnectorResult',
    'GetAutomationdestinationDestinationResult',
    'GetAutomationtriggerFieldResult',
    'GetAutomationtriggerLogidBlockResult',
    'GetAutomationtriggerVdomResult',
    'GetCentralmanagementServerListResult',
    'GetClustersyncDownIntfsBeforeSessSyncResult',
    'GetClustersyncSessionSyncFilterResult',
    'GetClustersyncSessionSyncFilterCustomServiceResult',
    'GetClustersyncSyncvdResult',
    'GetCsfFabricConnectorResult',
    'GetCsfFabricConnectorVdomResult',
    'GetCsfFabricDeviceResult',
    'GetCsfTrustedListResult',
    'GetDdnsDdnsServerAddrResult',
    'GetDdnsMonitorInterfaceResult',
    'GetDnsDomainResult',
    'GetDnsServerHostnameResult',
    'GetDnsdatabaseDnsEntryResult',
    'GetGlobalInternetServiceDownloadListResult',
    'GetHaHaMgmtInterfaceResult',
    'GetHaSecondaryVclusterResult',
    'GetHaUnicastPeerResult',
    'GetHaVclusterResult',
    'GetHaVclusterVdomResult',
    'GetInterfaceClientOptionResult',
    'GetInterfaceDhcpSnoopingServerListResult',
    'GetInterfaceFailAlertInterfaceResult',
    'GetInterfaceIpv6Result',
    'GetInterfaceIpv6Dhcp6IapdListResult',
    'GetInterfaceIpv6Ip6DelegatedPrefixListResult',
    'GetInterfaceIpv6Ip6ExtraAddrResult',
    'GetInterfaceIpv6Ip6PrefixListResult',
    'GetInterfaceIpv6Ip6PrefixListDnsslResult',
    'GetInterfaceIpv6Vrrp6Result',
    'GetInterfaceManagedDeviceResult',
    'GetInterfaceMemberResult',
    'GetInterfaceSecondaryipResult',
    'GetInterfaceSecurityGroupResult',
    'GetInterfaceTaggingResult',
    'GetInterfaceTaggingTagResult',
    'GetInterfaceVrrpResult',
    'GetInterfaceVrrpProxyArpResult',
    'GetLinkmonitorRouteResult',
    'GetLinkmonitorServerResult',
    'GetLinkmonitorServerListResult',
    'GetMobiletunnelNetworkResult',
    'GetNat64SecondaryPrefixResult',
    'GetNdproxyMemberResult',
    'GetNetflowCollectorResult',
    'GetNtpInterfaceResult',
    'GetNtpNtpserverResult',
    'GetObjecttaggingTagResult',
    'GetReplacemsggroupAdminResult',
    'GetReplacemsggroupAlertmailResult',
    'GetReplacemsggroupAuthResult',
    'GetReplacemsggroupAutomationResult',
    'GetReplacemsggroupCustomMessageResult',
    'GetReplacemsggroupDeviceDetectionPortalResult',
    'GetReplacemsggroupEcResult',
    'GetReplacemsggroupFortiguardWfResult',
    'GetReplacemsggroupFtpResult',
    'GetReplacemsggroupHttpResult',
    'GetReplacemsggroupIcapResult',
    'GetReplacemsggroupMailResult',
    'GetReplacemsggroupNacQuarResult',
    'GetReplacemsggroupNntpResult',
    'GetReplacemsggroupSpamResult',
    'GetReplacemsggroupSslvpnResult',
    'GetReplacemsggroupTrafficQuotaResult',
    'GetReplacemsggroupUtmResult',
    'GetReplacemsggroupWebproxyResult',
    'GetSdnconnectorCompartmentListResult',
    'GetSdnconnectorExternalAccountListResult',
    'GetSdnconnectorExternalAccountListRegionListResult',
    'GetSdnconnectorExternalIpResult',
    'GetSdnconnectorForwardingRuleResult',
    'GetSdnconnectorGcpProjectListResult',
    'GetSdnconnectorGcpProjectListGcpZoneListResult',
    'GetSdnconnectorNicResult',
    'GetSdnconnectorNicIpResult',
    'GetSdnconnectorOciRegionListResult',
    'GetSdnconnectorRouteResult',
    'GetSdnconnectorRouteTableResult',
    'GetSdnconnectorRouteTableRouteResult',
    'GetSdnconnectorServerListResult',
    'GetSessionttlPortResult',
    'GetSflowCollectorResult',
    'GetVdomexceptionVdomResult',
    'GetVdomnetflowCollectorResult',
    'GetVdomsflowCollectorResult',
    'GetVirtualwanlinkFailAlertInterfaceResult',
    'GetVirtualwanlinkHealthCheckResult',
    'GetVirtualwanlinkHealthCheckMemberResult',
    'GetVirtualwanlinkHealthCheckSlaResult',
    'GetVirtualwanlinkMemberResult',
    'GetVirtualwanlinkNeighborResult',
    'GetVirtualwanlinkServiceResult',
    'GetVirtualwanlinkServiceDst6Result',
    'GetVirtualwanlinkServiceDstResult',
    'GetVirtualwanlinkServiceGroupResult',
    'GetVirtualwanlinkServiceInputDeviceResult',
    'GetVirtualwanlinkServiceInternetServiceAppCtrlResult',
    'GetVirtualwanlinkServiceInternetServiceAppCtrlGroupResult',
    'GetVirtualwanlinkServiceInternetServiceCtrlResult',
    'GetVirtualwanlinkServiceInternetServiceCtrlGroupResult',
    'GetVirtualwanlinkServiceInternetServiceCustomResult',
    'GetVirtualwanlinkServiceInternetServiceCustomGroupResult',
    'GetVirtualwanlinkServiceInternetServiceGroupResult',
    'GetVirtualwanlinkServiceInternetServiceIdResult',
    'GetVirtualwanlinkServiceInternetServiceNameResult',
    'GetVirtualwanlinkServicePriorityMemberResult',
    'GetVirtualwanlinkServiceSlaResult',
    'GetVirtualwanlinkServiceSrc6Result',
    'GetVirtualwanlinkServiceSrcResult',
    'GetVirtualwanlinkServiceUserResult',
    'GetVirtualwanlinkZoneResult',
    'GetVxlanRemoteIp6Result',
    'GetVxlanRemoteIpResult',
    'GetZoneInterfaceResult',
    'GetZoneTaggingResult',
    'GetZoneTaggingTagResult',
]

@pulumi.output_type
class AccprofileFwgrpPermission(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 others: Optional[str] = None,
                 policy: Optional[str] = None,
                 schedule: Optional[str] = None,
                 service: Optional[str] = None):
        """
        :param str address: Address Configuration. Valid values: `none`, `read`, `read-write`.
        :param str others: Other Firewall Configuration. Valid values: `none`, `read`, `read-write`.
        :param str policy: Policy Configuration. Valid values: `none`, `read`, `read-write`.
        :param str schedule: Schedule Configuration. Valid values: `none`, `read`, `read-write`.
        :param str service: Service Configuration. Valid values: `none`, `read`, `read-write`.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if others is not None:
            pulumi.set(__self__, "others", others)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Address Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def others(self) -> Optional[str]:
        """
        Other Firewall Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "others")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        """
        Policy Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def schedule(self) -> Optional[str]:
        """
        Schedule Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        """
        Service Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "service")


@pulumi.output_type
class AccprofileLoggrpPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataAccess":
            suggest = "data_access"
        elif key == "reportAccess":
            suggest = "report_access"
        elif key == "threatWeight":
            suggest = "threat_weight"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccprofileLoggrpPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccprofileLoggrpPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccprofileLoggrpPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config: Optional[str] = None,
                 data_access: Optional[str] = None,
                 report_access: Optional[str] = None,
                 threat_weight: Optional[str] = None):
        """
        :param str config: Log & Report configuration. Valid values: `none`, `read`, `read-write`.
        :param str data_access: Log & Report Data Access. Valid values: `none`, `read`, `read-write`.
        :param str report_access: Log & Report Report Access. Valid values: `none`, `read`, `read-write`.
        :param str threat_weight: Log & Report Threat Weight. Valid values: `none`, `read`, `read-write`.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if data_access is not None:
            pulumi.set(__self__, "data_access", data_access)
        if report_access is not None:
            pulumi.set(__self__, "report_access", report_access)
        if threat_weight is not None:
            pulumi.set(__self__, "threat_weight", threat_weight)

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        """
        Log & Report configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="dataAccess")
    def data_access(self) -> Optional[str]:
        """
        Log & Report Data Access. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "data_access")

    @property
    @pulumi.getter(name="reportAccess")
    def report_access(self) -> Optional[str]:
        """
        Log & Report Report Access. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "report_access")

    @property
    @pulumi.getter(name="threatWeight")
    def threat_weight(self) -> Optional[str]:
        """
        Log & Report Threat Weight. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "threat_weight")


@pulumi.output_type
class AccprofileNetgrpPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packetCapture":
            suggest = "packet_capture"
        elif key == "routeCfg":
            suggest = "route_cfg"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccprofileNetgrpPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccprofileNetgrpPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccprofileNetgrpPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cfg: Optional[str] = None,
                 packet_capture: Optional[str] = None,
                 route_cfg: Optional[str] = None):
        """
        :param str cfg: Network Configuration. Valid values: `none`, `read`, `read-write`.
        :param str packet_capture: Packet Capture Configuration. Valid values: `none`, `read`, `read-write`.
        :param str route_cfg: Router Configuration. Valid values: `none`, `read`, `read-write`.
        """
        if cfg is not None:
            pulumi.set(__self__, "cfg", cfg)
        if packet_capture is not None:
            pulumi.set(__self__, "packet_capture", packet_capture)
        if route_cfg is not None:
            pulumi.set(__self__, "route_cfg", route_cfg)

    @property
    @pulumi.getter
    def cfg(self) -> Optional[str]:
        """
        Network Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "cfg")

    @property
    @pulumi.getter(name="packetCapture")
    def packet_capture(self) -> Optional[str]:
        """
        Packet Capture Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "packet_capture")

    @property
    @pulumi.getter(name="routeCfg")
    def route_cfg(self) -> Optional[str]:
        """
        Router Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "route_cfg")


@pulumi.output_type
class AccprofileSysgrpPermission(dict):
    def __init__(__self__, *,
                 admin: Optional[str] = None,
                 cfg: Optional[str] = None,
                 mnt: Optional[str] = None,
                 upd: Optional[str] = None):
        """
        :param str admin: Administrator Users. Valid values: `none`, `read`, `read-write`.
        :param str cfg: System Configuration. Valid values: `none`, `read`, `read-write`.
        :param str mnt: Maintenance. Valid values: `none`, `read`, `read-write`.
        :param str upd: FortiGuard Updates. Valid values: `none`, `read`, `read-write`.
        """
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if cfg is not None:
            pulumi.set(__self__, "cfg", cfg)
        if mnt is not None:
            pulumi.set(__self__, "mnt", mnt)
        if upd is not None:
            pulumi.set(__self__, "upd", upd)

    @property
    @pulumi.getter
    def admin(self) -> Optional[str]:
        """
        Administrator Users. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter
    def cfg(self) -> Optional[str]:
        """
        System Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "cfg")

    @property
    @pulumi.getter
    def mnt(self) -> Optional[str]:
        """
        Maintenance. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "mnt")

    @property
    @pulumi.getter
    def upd(self) -> Optional[str]:
        """
        FortiGuard Updates. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "upd")


@pulumi.output_type
class AccprofileUtmgrpPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationControl":
            suggest = "application_control"
        elif key == "dataLeakPrevention":
            suggest = "data_leak_prevention"
        elif key == "dataLossPrevention":
            suggest = "data_loss_prevention"
        elif key == "endpointControl":
            suggest = "endpoint_control"
        elif key == "fileFilter":
            suggest = "file_filter"
        elif key == "virtualPatch":
            suggest = "virtual_patch"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccprofileUtmgrpPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccprofileUtmgrpPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccprofileUtmgrpPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 antivirus: Optional[str] = None,
                 application_control: Optional[str] = None,
                 casb: Optional[str] = None,
                 data_leak_prevention: Optional[str] = None,
                 data_loss_prevention: Optional[str] = None,
                 dnsfilter: Optional[str] = None,
                 emailfilter: Optional[str] = None,
                 endpoint_control: Optional[str] = None,
                 file_filter: Optional[str] = None,
                 icap: Optional[str] = None,
                 ips: Optional[str] = None,
                 spamfilter: Optional[str] = None,
                 videofilter: Optional[str] = None,
                 virtual_patch: Optional[str] = None,
                 voip: Optional[str] = None,
                 waf: Optional[str] = None,
                 webfilter: Optional[str] = None):
        """
        :param str antivirus: Antivirus profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param str application_control: Application Control profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param str casb: Inline CASB filter profile and settings Valid values: `none`, `read`, `read-write`.
        :param str data_leak_prevention: DLP profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param str data_loss_prevention: DLP profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param str dnsfilter: DNS Filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param str emailfilter: AntiSpam filter and settings. Valid values: `none`, `read`, `read-write`.
        :param str endpoint_control: FortiClient Profiles. Valid values: `none`, `read`, `read-write`.
        :param str file_filter: File-filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param str icap: ICAP profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param str ips: IPS profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param str spamfilter: AntiSpam filter and settings. Valid values: `none`, `read`, `read-write`.
        :param str videofilter: Video filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param str virtual_patch: Virtual patch profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param str voip: VoIP profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param str waf: Web Application Firewall profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param str webfilter: Web Filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        if antivirus is not None:
            pulumi.set(__self__, "antivirus", antivirus)
        if application_control is not None:
            pulumi.set(__self__, "application_control", application_control)
        if casb is not None:
            pulumi.set(__self__, "casb", casb)
        if data_leak_prevention is not None:
            pulumi.set(__self__, "data_leak_prevention", data_leak_prevention)
        if data_loss_prevention is not None:
            pulumi.set(__self__, "data_loss_prevention", data_loss_prevention)
        if dnsfilter is not None:
            pulumi.set(__self__, "dnsfilter", dnsfilter)
        if emailfilter is not None:
            pulumi.set(__self__, "emailfilter", emailfilter)
        if endpoint_control is not None:
            pulumi.set(__self__, "endpoint_control", endpoint_control)
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)
        if icap is not None:
            pulumi.set(__self__, "icap", icap)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if spamfilter is not None:
            pulumi.set(__self__, "spamfilter", spamfilter)
        if videofilter is not None:
            pulumi.set(__self__, "videofilter", videofilter)
        if virtual_patch is not None:
            pulumi.set(__self__, "virtual_patch", virtual_patch)
        if voip is not None:
            pulumi.set(__self__, "voip", voip)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)
        if webfilter is not None:
            pulumi.set(__self__, "webfilter", webfilter)

    @property
    @pulumi.getter
    def antivirus(self) -> Optional[str]:
        """
        Antivirus profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "antivirus")

    @property
    @pulumi.getter(name="applicationControl")
    def application_control(self) -> Optional[str]:
        """
        Application Control profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "application_control")

    @property
    @pulumi.getter
    def casb(self) -> Optional[str]:
        """
        Inline CASB filter profile and settings Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "casb")

    @property
    @pulumi.getter(name="dataLeakPrevention")
    def data_leak_prevention(self) -> Optional[str]:
        """
        DLP profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "data_leak_prevention")

    @property
    @pulumi.getter(name="dataLossPrevention")
    def data_loss_prevention(self) -> Optional[str]:
        """
        DLP profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "data_loss_prevention")

    @property
    @pulumi.getter
    def dnsfilter(self) -> Optional[str]:
        """
        DNS Filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "dnsfilter")

    @property
    @pulumi.getter
    def emailfilter(self) -> Optional[str]:
        """
        AntiSpam filter and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "emailfilter")

    @property
    @pulumi.getter(name="endpointControl")
    def endpoint_control(self) -> Optional[str]:
        """
        FortiClient Profiles. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "endpoint_control")

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional[str]:
        """
        File-filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "file_filter")

    @property
    @pulumi.getter
    def icap(self) -> Optional[str]:
        """
        ICAP profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "icap")

    @property
    @pulumi.getter
    def ips(self) -> Optional[str]:
        """
        IPS profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def spamfilter(self) -> Optional[str]:
        """
        AntiSpam filter and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "spamfilter")

    @property
    @pulumi.getter
    def videofilter(self) -> Optional[str]:
        """
        Video filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "videofilter")

    @property
    @pulumi.getter(name="virtualPatch")
    def virtual_patch(self) -> Optional[str]:
        """
        Virtual patch profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "virtual_patch")

    @property
    @pulumi.getter
    def voip(self) -> Optional[str]:
        """
        VoIP profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "voip")

    @property
    @pulumi.getter
    def waf(self) -> Optional[str]:
        """
        Web Application Firewall profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "waf")

    @property
    @pulumi.getter
    def webfilter(self) -> Optional[str]:
        """
        Web Filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "webfilter")


@pulumi.output_type
class AcmeAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caUrl":
            suggest = "ca_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AcmeAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AcmeAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AcmeAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_url: Optional[str] = None,
                 email: Optional[str] = None,
                 id: Optional[str] = None,
                 privatekey: Optional[str] = None,
                 status: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str ca_url: Account ca_url.
        :param str email: Account email.
        :param str id: Account id.
        :param str privatekey: Account Private Key.
        :param str status: Account status.
        :param str url: Account url.
        """
        if ca_url is not None:
            pulumi.set(__self__, "ca_url", ca_url)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if privatekey is not None:
            pulumi.set(__self__, "privatekey", privatekey)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="caUrl")
    def ca_url(self) -> Optional[str]:
        """
        Account ca_url.
        """
        return pulumi.get(self, "ca_url")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Account email.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Account id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def privatekey(self) -> Optional[str]:
        """
        Account Private Key.
        """
        return pulumi.get(self, "privatekey")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Account status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        Account url.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class AcmeInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AcmeInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AcmeInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AcmeInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        """
        :param str interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class AdminGuestUsergroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Select guest user groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Select guest user groups.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AdminGuiDashboard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "layoutType":
            suggest = "layout_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdminGuiDashboard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdminGuiDashboard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdminGuiDashboard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 columns: Optional[int] = None,
                 id: Optional[int] = None,
                 layout_type: Optional[str] = None,
                 name: Optional[str] = None,
                 scope: Optional[str] = None,
                 widgets: Optional[Sequence['outputs.AdminGuiDashboardWidget']] = None):
        """
        :param int columns: Number of columns.
        :param int id: Dashboard ID.
        :param str layout_type: Layout type. Valid values: `responsive`, `fixed`.
        :param str name: Dashboard name.
        :param str scope: Dashboard scope. Valid values: `global`, `vdom`.
        :param Sequence['AdminGuiDashboardWidgetArgs'] widgets: Dashboard widgets. The structure of `widget` block is documented below.
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if layout_type is not None:
            pulumi.set(__self__, "layout_type", layout_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if widgets is not None:
            pulumi.set(__self__, "widgets", widgets)

    @property
    @pulumi.getter
    def columns(self) -> Optional[int]:
        """
        Number of columns.
        """
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Dashboard ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="layoutType")
    def layout_type(self) -> Optional[str]:
        """
        Layout type. Valid values: `responsive`, `fixed`.
        """
        return pulumi.get(self, "layout_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Dashboard name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        Dashboard scope. Valid values: `global`, `vdom`.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def widgets(self) -> Optional[Sequence['outputs.AdminGuiDashboardWidget']]:
        """
        Dashboard widgets. The structure of `widget` block is documented below.
        """
        return pulumi.get(self, "widgets")


@pulumi.output_type
class AdminGuiDashboardWidget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fabricDevice":
            suggest = "fabric_device"
        elif key == "reportBy":
            suggest = "report_by"
        elif key == "sortBy":
            suggest = "sort_by"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdminGuiDashboardWidget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdminGuiDashboardWidget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdminGuiDashboardWidget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fabric_device: Optional[str] = None,
                 filters: Optional[Sequence['outputs.AdminGuiDashboardWidgetFilter']] = None,
                 height: Optional[int] = None,
                 id: Optional[int] = None,
                 industry: Optional[str] = None,
                 interface: Optional[str] = None,
                 region: Optional[str] = None,
                 report_by: Optional[str] = None,
                 sort_by: Optional[str] = None,
                 timeframe: Optional[str] = None,
                 title: Optional[str] = None,
                 type: Optional[str] = None,
                 visualization: Optional[str] = None,
                 width: Optional[int] = None,
                 x_pos: Optional[int] = None,
                 y_pos: Optional[int] = None):
        """
        :param str fabric_device: Fabric device to monitor.
        :param Sequence['AdminGuiDashboardWidgetFilterArgs'] filters: FortiView filters. The structure of `filters` block is documented below.
        :param int height: Height.
        :param int id: Widget ID.
        :param str industry: Security Audit Rating industry. Valid values: `default`, `custom`.
        :param str interface: Interface to monitor.
        :param str region: Security Audit Rating region. Valid values: `default`, `custom`.
        :param str report_by: Field to aggregate the data by. Valid values: `source`, `destination`, `country`, `intfpair`, `srcintf`, `dstintf`, `policy`, `wificlient`, `shaper`, `endpoint-vulnerability`, `endpoint-device`, `application`, `cloud-app`, `cloud-user`, `web-domain`, `web-category`, `web-search-phrase`, `threat`, `system`, `unauth`, `admin`, `vpn`.
        :param str sort_by: Field to sort the data by.
        :param str timeframe: Timeframe period of reported data. Valid values: `realtime`, `5min`, `hour`, `day`, `week`.
        :param str title: Widget title.
        :param str type: Widget type. Valid values: `sysinfo`, `licinfo`, `vminfo`, `forticloud`, `cpu-usage`, `memory-usage`, `disk-usage`, `log-rate`, `sessions`, `session-rate`, `tr-history`, `analytics`, `usb-modem`, `admins`, `security-fabric`, `security-fabric-ranking`, `ha-status`, `vulnerability-summary`, `host-scan-summary`, `fortiview`, `botnet-activity`, `fortimail`.
        :param str visualization: Visualization to use. Valid values: `table`, `bubble`, `country`, `chord`.
        :param int width: Width.
        :param int x_pos: X position.
        :param int y_pos: Y position.
        """
        if fabric_device is not None:
            pulumi.set(__self__, "fabric_device", fabric_device)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if industry is not None:
            pulumi.set(__self__, "industry", industry)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if report_by is not None:
            pulumi.set(__self__, "report_by", report_by)
        if sort_by is not None:
            pulumi.set(__self__, "sort_by", sort_by)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if visualization is not None:
            pulumi.set(__self__, "visualization", visualization)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="fabricDevice")
    def fabric_device(self) -> Optional[str]:
        """
        Fabric device to monitor.
        """
        return pulumi.get(self, "fabric_device")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.AdminGuiDashboardWidgetFilter']]:
        """
        FortiView filters. The structure of `filters` block is documented below.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        """
        Height.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Widget ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def industry(self) -> Optional[str]:
        """
        Security Audit Rating industry. Valid values: `default`, `custom`.
        """
        return pulumi.get(self, "industry")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Interface to monitor.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        Security Audit Rating region. Valid values: `default`, `custom`.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="reportBy")
    def report_by(self) -> Optional[str]:
        """
        Field to aggregate the data by. Valid values: `source`, `destination`, `country`, `intfpair`, `srcintf`, `dstintf`, `policy`, `wificlient`, `shaper`, `endpoint-vulnerability`, `endpoint-device`, `application`, `cloud-app`, `cloud-user`, `web-domain`, `web-category`, `web-search-phrase`, `threat`, `system`, `unauth`, `admin`, `vpn`.
        """
        return pulumi.get(self, "report_by")

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> Optional[str]:
        """
        Field to sort the data by.
        """
        return pulumi.get(self, "sort_by")

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[str]:
        """
        Timeframe period of reported data. Valid values: `realtime`, `5min`, `hour`, `day`, `week`.
        """
        return pulumi.get(self, "timeframe")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Widget title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Widget type. Valid values: `sysinfo`, `licinfo`, `vminfo`, `forticloud`, `cpu-usage`, `memory-usage`, `disk-usage`, `log-rate`, `sessions`, `session-rate`, `tr-history`, `analytics`, `usb-modem`, `admins`, `security-fabric`, `security-fabric-ranking`, `ha-status`, `vulnerability-summary`, `host-scan-summary`, `fortiview`, `botnet-activity`, `fortimail`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def visualization(self) -> Optional[str]:
        """
        Visualization to use. Valid values: `table`, `bubble`, `country`, `chord`.
        """
        return pulumi.get(self, "visualization")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        """
        Width.
        """
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[int]:
        """
        X position.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[int]:
        """
        Y position.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class AdminGuiDashboardWidgetFilter(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param int id: FortiView Filter ID.
        :param str key: Filter key.
        :param str value: Filter value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        FortiView Filter ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Filter key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Filter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AdminGuiGlobalMenuFavorite(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: Select menu ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class AdminGuiNewFeatureAcknowledge(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: Select menu ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class AdminGuiVdomMenuFavorite(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: Select menu ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class AdminLoginTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastFailedLogin":
            suggest = "last_failed_login"
        elif key == "lastLogin":
            suggest = "last_login"
        elif key == "usrName":
            suggest = "usr_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdminLoginTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdminLoginTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdminLoginTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_failed_login: Optional[str] = None,
                 last_login: Optional[str] = None,
                 usr_name: Optional[str] = None):
        """
        :param str last_failed_login: Last failed login time.
        :param str last_login: Last successful login time.
        :param str usr_name: User name.
        """
        if last_failed_login is not None:
            pulumi.set(__self__, "last_failed_login", last_failed_login)
        if last_login is not None:
            pulumi.set(__self__, "last_login", last_login)
        if usr_name is not None:
            pulumi.set(__self__, "usr_name", usr_name)

    @property
    @pulumi.getter(name="lastFailedLogin")
    def last_failed_login(self) -> Optional[str]:
        """
        Last failed login time.
        """
        return pulumi.get(self, "last_failed_login")

    @property
    @pulumi.getter(name="lastLogin")
    def last_login(self) -> Optional[str]:
        """
        Last successful login time.
        """
        return pulumi.get(self, "last_login")

    @property
    @pulumi.getter(name="usrName")
    def usr_name(self) -> Optional[str]:
        """
        User name.
        """
        return pulumi.get(self, "usr_name")


@pulumi.output_type
class AdminVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AlarmGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminAuthFailureThreshold":
            suggest = "admin_auth_failure_threshold"
        elif key == "adminAuthLockoutThreshold":
            suggest = "admin_auth_lockout_threshold"
        elif key == "decryptionFailureThreshold":
            suggest = "decryption_failure_threshold"
        elif key == "encryptionFailureThreshold":
            suggest = "encryption_failure_threshold"
        elif key == "fwPolicyId":
            suggest = "fw_policy_id"
        elif key == "fwPolicyIdThreshold":
            suggest = "fw_policy_id_threshold"
        elif key == "fwPolicyViolations":
            suggest = "fw_policy_violations"
        elif key == "logFullWarningThreshold":
            suggest = "log_full_warning_threshold"
        elif key == "replayAttemptThreshold":
            suggest = "replay_attempt_threshold"
        elif key == "selfTestFailureThreshold":
            suggest = "self_test_failure_threshold"
        elif key == "userAuthFailureThreshold":
            suggest = "user_auth_failure_threshold"
        elif key == "userAuthLockoutThreshold":
            suggest = "user_auth_lockout_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_auth_failure_threshold: Optional[int] = None,
                 admin_auth_lockout_threshold: Optional[int] = None,
                 decryption_failure_threshold: Optional[int] = None,
                 encryption_failure_threshold: Optional[int] = None,
                 fw_policy_id: Optional[int] = None,
                 fw_policy_id_threshold: Optional[int] = None,
                 fw_policy_violations: Optional[Sequence['outputs.AlarmGroupFwPolicyViolation']] = None,
                 id: Optional[int] = None,
                 log_full_warning_threshold: Optional[int] = None,
                 period: Optional[int] = None,
                 replay_attempt_threshold: Optional[int] = None,
                 self_test_failure_threshold: Optional[int] = None,
                 user_auth_failure_threshold: Optional[int] = None,
                 user_auth_lockout_threshold: Optional[int] = None):
        """
        :param int admin_auth_failure_threshold: Admin authentication failure threshold.
        :param int admin_auth_lockout_threshold: Admin authentication lockout threshold.
        :param int decryption_failure_threshold: Decryption failure threshold.
        :param int encryption_failure_threshold: Encryption failure threshold.
        :param int fw_policy_id: Firewall policy ID.
        :param int fw_policy_id_threshold: Firewall policy ID threshold.
        :param Sequence['AlarmGroupFwPolicyViolationArgs'] fw_policy_violations: Firewall policy violations. The structure of `fw_policy_violations` block is documented below.
        :param int id: Group ID.
        :param int log_full_warning_threshold: Log full warning threshold.
        :param int period: Time period in seconds (0 = from start up).
        :param int replay_attempt_threshold: Replay attempt threshold.
        :param int self_test_failure_threshold: Self-test failure threshold.
        :param int user_auth_failure_threshold: User authentication failure threshold.
        :param int user_auth_lockout_threshold: User authentication lockout threshold.
        """
        if admin_auth_failure_threshold is not None:
            pulumi.set(__self__, "admin_auth_failure_threshold", admin_auth_failure_threshold)
        if admin_auth_lockout_threshold is not None:
            pulumi.set(__self__, "admin_auth_lockout_threshold", admin_auth_lockout_threshold)
        if decryption_failure_threshold is not None:
            pulumi.set(__self__, "decryption_failure_threshold", decryption_failure_threshold)
        if encryption_failure_threshold is not None:
            pulumi.set(__self__, "encryption_failure_threshold", encryption_failure_threshold)
        if fw_policy_id is not None:
            pulumi.set(__self__, "fw_policy_id", fw_policy_id)
        if fw_policy_id_threshold is not None:
            pulumi.set(__self__, "fw_policy_id_threshold", fw_policy_id_threshold)
        if fw_policy_violations is not None:
            pulumi.set(__self__, "fw_policy_violations", fw_policy_violations)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log_full_warning_threshold is not None:
            pulumi.set(__self__, "log_full_warning_threshold", log_full_warning_threshold)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if replay_attempt_threshold is not None:
            pulumi.set(__self__, "replay_attempt_threshold", replay_attempt_threshold)
        if self_test_failure_threshold is not None:
            pulumi.set(__self__, "self_test_failure_threshold", self_test_failure_threshold)
        if user_auth_failure_threshold is not None:
            pulumi.set(__self__, "user_auth_failure_threshold", user_auth_failure_threshold)
        if user_auth_lockout_threshold is not None:
            pulumi.set(__self__, "user_auth_lockout_threshold", user_auth_lockout_threshold)

    @property
    @pulumi.getter(name="adminAuthFailureThreshold")
    def admin_auth_failure_threshold(self) -> Optional[int]:
        """
        Admin authentication failure threshold.
        """
        return pulumi.get(self, "admin_auth_failure_threshold")

    @property
    @pulumi.getter(name="adminAuthLockoutThreshold")
    def admin_auth_lockout_threshold(self) -> Optional[int]:
        """
        Admin authentication lockout threshold.
        """
        return pulumi.get(self, "admin_auth_lockout_threshold")

    @property
    @pulumi.getter(name="decryptionFailureThreshold")
    def decryption_failure_threshold(self) -> Optional[int]:
        """
        Decryption failure threshold.
        """
        return pulumi.get(self, "decryption_failure_threshold")

    @property
    @pulumi.getter(name="encryptionFailureThreshold")
    def encryption_failure_threshold(self) -> Optional[int]:
        """
        Encryption failure threshold.
        """
        return pulumi.get(self, "encryption_failure_threshold")

    @property
    @pulumi.getter(name="fwPolicyId")
    def fw_policy_id(self) -> Optional[int]:
        """
        Firewall policy ID.
        """
        return pulumi.get(self, "fw_policy_id")

    @property
    @pulumi.getter(name="fwPolicyIdThreshold")
    def fw_policy_id_threshold(self) -> Optional[int]:
        """
        Firewall policy ID threshold.
        """
        return pulumi.get(self, "fw_policy_id_threshold")

    @property
    @pulumi.getter(name="fwPolicyViolations")
    def fw_policy_violations(self) -> Optional[Sequence['outputs.AlarmGroupFwPolicyViolation']]:
        """
        Firewall policy violations. The structure of `fw_policy_violations` block is documented below.
        """
        return pulumi.get(self, "fw_policy_violations")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Group ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logFullWarningThreshold")
    def log_full_warning_threshold(self) -> Optional[int]:
        """
        Log full warning threshold.
        """
        return pulumi.get(self, "log_full_warning_threshold")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        """
        Time period in seconds (0 = from start up).
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="replayAttemptThreshold")
    def replay_attempt_threshold(self) -> Optional[int]:
        """
        Replay attempt threshold.
        """
        return pulumi.get(self, "replay_attempt_threshold")

    @property
    @pulumi.getter(name="selfTestFailureThreshold")
    def self_test_failure_threshold(self) -> Optional[int]:
        """
        Self-test failure threshold.
        """
        return pulumi.get(self, "self_test_failure_threshold")

    @property
    @pulumi.getter(name="userAuthFailureThreshold")
    def user_auth_failure_threshold(self) -> Optional[int]:
        """
        User authentication failure threshold.
        """
        return pulumi.get(self, "user_auth_failure_threshold")

    @property
    @pulumi.getter(name="userAuthLockoutThreshold")
    def user_auth_lockout_threshold(self) -> Optional[int]:
        """
        User authentication lockout threshold.
        """
        return pulumi.get(self, "user_auth_lockout_threshold")


@pulumi.output_type
class AlarmGroupFwPolicyViolation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstIp":
            suggest = "dst_ip"
        elif key == "dstPort":
            suggest = "dst_port"
        elif key == "srcIp":
            suggest = "src_ip"
        elif key == "srcPort":
            suggest = "src_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmGroupFwPolicyViolation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmGroupFwPolicyViolation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmGroupFwPolicyViolation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_ip: Optional[str] = None,
                 dst_port: Optional[int] = None,
                 id: Optional[int] = None,
                 src_ip: Optional[str] = None,
                 src_port: Optional[int] = None,
                 threshold: Optional[int] = None):
        """
        :param str dst_ip: Destination IP (0=all).
        :param int dst_port: Destination port (0=all).
        :param int id: Firewall policy violations ID.
        :param str src_ip: Source IP (0=all).
        :param int src_port: Source port (0=all).
        :param int threshold: Firewall policy violation threshold.
        """
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[str]:
        """
        Destination IP (0=all).
        """
        return pulumi.get(self, "dst_ip")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[int]:
        """
        Destination port (0=all).
        """
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Firewall policy violations ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[str]:
        """
        Source IP (0=all).
        """
        return pulumi.get(self, "src_ip")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[int]:
        """
        Source port (0=all).
        """
        return pulumi.get(self, "src_port")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[int]:
        """
        Firewall policy violation threshold.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class ApiuserSettingTrusthost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Trusthost":
            suggest = "ipv4_trusthost"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiuserSettingTrusthost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiuserSettingTrusthost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiuserSettingTrusthost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_trusthost: str,
                 type: str):
        pulumi.set(__self__, "ipv4_trusthost", ipv4_trusthost)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="ipv4Trusthost")
    def ipv4_trusthost(self) -> str:
        return pulumi.get(self, "ipv4_trusthost")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class ApiuserTrusthost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Trusthost":
            suggest = "ipv4_trusthost"
        elif key == "ipv6Trusthost":
            suggest = "ipv6_trusthost"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiuserTrusthost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiuserTrusthost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiuserTrusthost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 ipv4_trusthost: Optional[str] = None,
                 ipv6_trusthost: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param int id: Table ID.
        :param str ipv4_trusthost: IPv4 trusted host address.
        :param str ipv6_trusthost: IPv6 trusted host address.
        :param str type: Trusthost type. Valid values: `ipv4-trusthost`, `ipv6-trusthost`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv4_trusthost is not None:
            pulumi.set(__self__, "ipv4_trusthost", ipv4_trusthost)
        if ipv6_trusthost is not None:
            pulumi.set(__self__, "ipv6_trusthost", ipv6_trusthost)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Table ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv4Trusthost")
    def ipv4_trusthost(self) -> Optional[str]:
        """
        IPv4 trusted host address.
        """
        return pulumi.get(self, "ipv4_trusthost")

    @property
    @pulumi.getter(name="ipv6Trusthost")
    def ipv6_trusthost(self) -> Optional[str]:
        """
        IPv6 trusted host address.
        """
        return pulumi.get(self, "ipv6_trusthost")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Trusthost type. Valid values: `ipv4-trusthost`, `ipv6-trusthost`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApiuserVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AutomationactionEmailTo(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Email address.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Email address.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AutomationactionHeader(dict):
    def __init__(__self__, *,
                 header: Optional[str] = None):
        """
        :param str header: Request header.
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Request header.
        """
        return pulumi.get(self, "header")


@pulumi.output_type
class AutomationactionHttpHeader(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param int id: Entry ID.
        :param str key: Request header key.
        :param str value: Request header value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Request header key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Request header value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AutomationactionSdnConnector(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: SDN connector name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        SDN connector name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AutomationdestinationDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Destination.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Destination.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AutomationstitchAction(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 delay: Optional[int] = None,
                 id: Optional[int] = None,
                 required: Optional[str] = None):
        """
        :param str action: Action name.
        :param int delay: Delay before execution (in seconds).
        :param int id: Entry ID.
        :param str required: Required in action chain. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def delay(self) -> Optional[int]:
        """
        Delay before execution (in seconds).
        """
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def required(self) -> Optional[str]:
        """
        Required in action chain. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "required")


@pulumi.output_type
class AutomationstitchDestination(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Destination name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Destination name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class AutomationtriggerField(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param int id: Entry ID.
        :param str name: Name.
        :param str value: Value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AutomationtriggerLogidBlock(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Log ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Log ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class AutomationtriggerVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CentralmanagementServerList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrType":
            suggest = "addr_type"
        elif key == "serverAddress":
            suggest = "server_address"
        elif key == "serverAddress6":
            suggest = "server_address6"
        elif key == "serverType":
            suggest = "server_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CentralmanagementServerList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CentralmanagementServerList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CentralmanagementServerList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_type: Optional[str] = None,
                 fqdn: Optional[str] = None,
                 id: Optional[int] = None,
                 server_address: Optional[str] = None,
                 server_address6: Optional[str] = None,
                 server_type: Optional[str] = None):
        """
        :param str addr_type: Indicate whether the FortiGate communicates with the override server using an IPv4 address, an IPv6 address or a FQDN. Valid values: `ipv4`, `ipv6`, `fqdn`.
        :param str fqdn: FQDN address of override server.
        :param int id: ID.
        :param str server_address: IPv4 address of override server.
        :param str server_address6: IPv6 address of override server.
        :param str server_type: FortiGuard service type.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_address is not None:
            pulumi.set(__self__, "server_address", server_address)
        if server_address6 is not None:
            pulumi.set(__self__, "server_address6", server_address6)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[str]:
        """
        Indicate whether the FortiGate communicates with the override server using an IPv4 address, an IPv6 address or a FQDN. Valid values: `ipv4`, `ipv6`, `fqdn`.
        """
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        """
        FQDN address of override server.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> Optional[str]:
        """
        IPv4 address of override server.
        """
        return pulumi.get(self, "server_address")

    @property
    @pulumi.getter(name="serverAddress6")
    def server_address6(self) -> Optional[str]:
        """
        IPv6 address of override server.
        """
        return pulumi.get(self, "server_address6")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[str]:
        """
        FortiGuard service type.
        """
        return pulumi.get(self, "server_type")


@pulumi.output_type
class ClustersyncDownIntfsBeforeSessSync(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ClustersyncSessionSyncFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customServices":
            suggest = "custom_services"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClustersyncSessionSyncFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClustersyncSessionSyncFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClustersyncSessionSyncFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_services: Optional[Sequence['outputs.ClustersyncSessionSyncFilterCustomService']] = None,
                 dstaddr: Optional[str] = None,
                 dstaddr6: Optional[str] = None,
                 dstintf: Optional[str] = None,
                 srcaddr: Optional[str] = None,
                 srcaddr6: Optional[str] = None,
                 srcintf: Optional[str] = None):
        """
        :param Sequence['ClustersyncSessionSyncFilterCustomServiceArgs'] custom_services: Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custome services. The structure of `custom_service` block is documented below.
        :param str dstaddr: Only sessions to this IPv4 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        :param str dstaddr6: Only sessions to this IPv6 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        :param str dstintf: Only sessions to this interface are synchronized. You can only enter one interface name. To synchronize sessions to multiple destination interfaces, add multiple filters.
        :param str srcaddr: Only sessions from this IPv4 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        :param str srcaddr6: Only sessions from this IPv6 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        :param str srcintf: Only sessions from this interface are synchronized. You can only enter one interface name. To synchronize sessions for multiple source interfaces, add multiple filters.
        """
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstaddr6 is not None:
            pulumi.set(__self__, "dstaddr6", dstaddr6)
        if dstintf is not None:
            pulumi.set(__self__, "dstintf", dstintf)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcaddr6 is not None:
            pulumi.set(__self__, "srcaddr6", srcaddr6)
        if srcintf is not None:
            pulumi.set(__self__, "srcintf", srcintf)

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[Sequence['outputs.ClustersyncSessionSyncFilterCustomService']]:
        """
        Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custome services. The structure of `custom_service` block is documented below.
        """
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[str]:
        """
        Only sessions to this IPv4 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        """
        return pulumi.get(self, "dstaddr")

    @property
    @pulumi.getter
    def dstaddr6(self) -> Optional[str]:
        """
        Only sessions to this IPv6 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        """
        return pulumi.get(self, "dstaddr6")

    @property
    @pulumi.getter
    def dstintf(self) -> Optional[str]:
        """
        Only sessions to this interface are synchronized. You can only enter one interface name. To synchronize sessions to multiple destination interfaces, add multiple filters.
        """
        return pulumi.get(self, "dstintf")

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[str]:
        """
        Only sessions from this IPv4 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        """
        return pulumi.get(self, "srcaddr")

    @property
    @pulumi.getter
    def srcaddr6(self) -> Optional[str]:
        """
        Only sessions from this IPv6 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        """
        return pulumi.get(self, "srcaddr6")

    @property
    @pulumi.getter
    def srcintf(self) -> Optional[str]:
        """
        Only sessions from this interface are synchronized. You can only enter one interface name. To synchronize sessions for multiple source interfaces, add multiple filters.
        """
        return pulumi.get(self, "srcintf")


@pulumi.output_type
class ClustersyncSessionSyncFilterCustomService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstPortRange":
            suggest = "dst_port_range"
        elif key == "srcPortRange":
            suggest = "src_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClustersyncSessionSyncFilterCustomService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClustersyncSessionSyncFilterCustomService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClustersyncSessionSyncFilterCustomService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_port_range: Optional[str] = None,
                 id: Optional[int] = None,
                 src_port_range: Optional[str] = None):
        """
        :param str dst_port_range: Custom service destination port range.
        :param int id: Custom service ID.
        :param str src_port_range: Custom service source port range.
        """
        if dst_port_range is not None:
            pulumi.set(__self__, "dst_port_range", dst_port_range)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_port_range is not None:
            pulumi.set(__self__, "src_port_range", src_port_range)

    @property
    @pulumi.getter(name="dstPortRange")
    def dst_port_range(self) -> Optional[str]:
        """
        Custom service destination port range.
        """
        return pulumi.get(self, "dst_port_range")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Custom service ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="srcPortRange")
    def src_port_range(self) -> Optional[str]:
        """
        Custom service source port range.
        """
        return pulumi.get(self, "src_port_range")


@pulumi.output_type
class ClustersyncSyncvd(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: VDOM name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        VDOM name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CsfFabricConnector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationWriteAccess":
            suggest = "configuration_write_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CsfFabricConnector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CsfFabricConnector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CsfFabricConnector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accprofile: Optional[str] = None,
                 configuration_write_access: Optional[str] = None,
                 serial: Optional[str] = None,
                 vdoms: Optional[Sequence['outputs.CsfFabricConnectorVdom']] = None):
        """
        :param str accprofile: Override access profile.
        :param str configuration_write_access: Enable/disable downstream device write access to configuration. Valid values: `enable`, `disable`.
        :param str serial: Serial.
        :param Sequence['CsfFabricConnectorVdomArgs'] vdoms: Virtual domains that the connector has access to. If none are set, the connector will only have access to the VDOM that it joins the Security Fabric through. The structure of `vdom` block is documented below.
        """
        if accprofile is not None:
            pulumi.set(__self__, "accprofile", accprofile)
        if configuration_write_access is not None:
            pulumi.set(__self__, "configuration_write_access", configuration_write_access)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def accprofile(self) -> Optional[str]:
        """
        Override access profile.
        """
        return pulumi.get(self, "accprofile")

    @property
    @pulumi.getter(name="configurationWriteAccess")
    def configuration_write_access(self) -> Optional[str]:
        """
        Enable/disable downstream device write access to configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "configuration_write_access")

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        """
        Serial.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[Sequence['outputs.CsfFabricConnectorVdom']]:
        """
        Virtual domains that the connector has access to. If none are set, the connector will only have access to the VDOM that it joins the Security Fabric through. The structure of `vdom` block is documented below.
        """
        return pulumi.get(self, "vdoms")


@pulumi.output_type
class CsfFabricConnectorVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class CsfFabricDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "deviceIp":
            suggest = "device_ip"
        elif key == "deviceType":
            suggest = "device_type"
        elif key == "httpsPort":
            suggest = "https_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CsfFabricDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CsfFabricDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CsfFabricDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: Optional[str] = None,
                 device_ip: Optional[str] = None,
                 device_type: Optional[str] = None,
                 https_port: Optional[int] = None,
                 login: Optional[str] = None,
                 name: Optional[str] = None,
                 password: Optional[str] = None):
        """
        :param str access_token: Device access token.
        :param str device_ip: Device IP.
        :param str device_type: Device type. Valid values: `fortimail`.
        :param int https_port: HTTPS port for fabric device.
        :param str login: Device login name.
        :param str name: Device name.
        :param str password: Device login password.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if device_ip is not None:
            pulumi.set(__self__, "device_ip", device_ip)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        """
        Device access token.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="deviceIp")
    def device_ip(self) -> Optional[str]:
        """
        Device IP.
        """
        return pulumi.get(self, "device_ip")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[str]:
        """
        Device type. Valid values: `fortimail`.
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[int]:
        """
        HTTPS port for fabric device.
        """
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter
    def login(self) -> Optional[str]:
        """
        Device login name.
        """
        return pulumi.get(self, "login")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Device login password.
        """
        return pulumi.get(self, "password")


@pulumi.output_type
class CsfTrustedList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationType":
            suggest = "authorization_type"
        elif key == "downstreamAuthorization":
            suggest = "downstream_authorization"
        elif key == "haMembers":
            suggest = "ha_members"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CsfTrustedList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CsfTrustedList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CsfTrustedList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 authorization_type: Optional[str] = None,
                 certificate: Optional[str] = None,
                 downstream_authorization: Optional[str] = None,
                 ha_members: Optional[str] = None,
                 index: Optional[int] = None,
                 name: Optional[str] = None,
                 serial: Optional[str] = None):
        """
        :param str action: Security fabric authorization action. Valid values: `accept`, `deny`.
        :param str authorization_type: Authorization type. Valid values: `serial`, `certificate`.
        :param str certificate: Certificate.
        :param str downstream_authorization: Trust authorizations by this node's administrator. Valid values: `enable`, `disable`.
        :param str ha_members: HA members.
        :param int index: Index of the downstream in tree.
        :param str name: Name.
        :param str serial: Serial.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if authorization_type is not None:
            pulumi.set(__self__, "authorization_type", authorization_type)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if downstream_authorization is not None:
            pulumi.set(__self__, "downstream_authorization", downstream_authorization)
        if ha_members is not None:
            pulumi.set(__self__, "ha_members", ha_members)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Security fabric authorization action. Valid values: `accept`, `deny`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="authorizationType")
    def authorization_type(self) -> Optional[str]:
        """
        Authorization type. Valid values: `serial`, `certificate`.
        """
        return pulumi.get(self, "authorization_type")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        """
        Certificate.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="downstreamAuthorization")
    def downstream_authorization(self) -> Optional[str]:
        """
        Trust authorizations by this node's administrator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "downstream_authorization")

    @property
    @pulumi.getter(name="haMembers")
    def ha_members(self) -> Optional[str]:
        """
        HA members.
        """
        return pulumi.get(self, "ha_members")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        Index of the downstream in tree.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        """
        Serial.
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class DdnsDdnsServerAddr(dict):
    def __init__(__self__, *,
                 addr: Optional[str] = None):
        """
        :param str addr: IP address or FQDN of the server.
        """
        if addr is not None:
            pulumi.set(__self__, "addr", addr)

    @property
    @pulumi.getter
    def addr(self) -> Optional[str]:
        """
        IP address or FQDN of the server.
        """
        return pulumi.get(self, "addr")


@pulumi.output_type
class DdnsMonitorInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdnsMonitorInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdnsMonitorInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdnsMonitorInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        """
        :param str interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class DeviceupgradeKnownHaMember(dict):
    def __init__(__self__, *,
                 serial: Optional[str] = None):
        """
        :param str serial: Serial number of HA member
        """
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        """
        Serial number of HA member
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class DnsDomain(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None):
        """
        :param str domain: DNS search domain list separated by space (maximum 8 domains)
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        DNS search domain list separated by space (maximum 8 domains)
        """
        return pulumi.get(self, "domain")


@pulumi.output_type
class DnsServerHostname(dict):
    def __init__(__self__, *,
                 hostname: Optional[str] = None):
        """
        :param str hostname: DNS server host name list separated by space (maximum 4 domains).
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        DNS server host name list separated by space (maximum 4 domains).
        """
        return pulumi.get(self, "hostname")


@pulumi.output_type
class DnsdatabaseDnsEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canonicalName":
            suggest = "canonical_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DnsdatabaseDnsEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DnsdatabaseDnsEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DnsdatabaseDnsEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 canonical_name: Optional[str] = None,
                 hostname: Optional[str] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 ipv6: Optional[str] = None,
                 preference: Optional[int] = None,
                 status: Optional[str] = None,
                 ttl: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str canonical_name: Canonical name of the host.
        :param str hostname: Name of the host.
        :param int id: DNS entry ID.
        :param str ip: IPv4 address of the host.
        :param str ipv6: IPv6 address of the host.
        :param int preference: DNS entry preference, 0 is the highest preference (0 - 65535, default = 10)
        :param str status: Enable/disable resource record status. Valid values: `enable`, `disable`.
        :param int ttl: Time-to-live for this entry (0 to 2147483647 sec, default = 0).
        :param str type: Resource record type. Valid values: `A`, `NS`, `CNAME`, `MX`, `AAAA`, `PTR`, `PTR_V6`.
        """
        if canonical_name is not None:
            pulumi.set(__self__, "canonical_name", canonical_name)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="canonicalName")
    def canonical_name(self) -> Optional[str]:
        """
        Canonical name of the host.
        """
        return pulumi.get(self, "canonical_name")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        Name of the host.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        DNS entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IPv4 address of the host.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[str]:
        """
        IPv6 address of the host.
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        """
        DNS entry preference, 0 is the highest preference (0 - 65535, default = 10)
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable resource record status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        """
        Time-to-live for this entry (0 to 2147483647 sec, default = 0).
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Resource record type. Valid values: `A`, `NS`, `CNAME`, `MX`, `AAAA`, `PTR`, `PTR_V6`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class EvpnExportRt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTarget":
            suggest = "route_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvpnExportRt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvpnExportRt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvpnExportRt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_target: Optional[str] = None):
        """
        :param str route_target: Route target: AA|AA:NN.
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[str]:
        """
        Route target: AA|AA:NN.
        """
        return pulumi.get(self, "route_target")


@pulumi.output_type
class EvpnImportRt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTarget":
            suggest = "route_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvpnImportRt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvpnImportRt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvpnImportRt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_target: Optional[str] = None):
        """
        :param str route_target: Route target: AA|AA:NN.
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[str]:
        """
        Route target: AA|AA:NN.
        """
        return pulumi.get(self, "route_target")


@pulumi.output_type
class FabricvpnAdvertisedSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bgpNetwork":
            suggest = "bgp_network"
        elif key == "firewallAddress":
            suggest = "firewall_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FabricvpnAdvertisedSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FabricvpnAdvertisedSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FabricvpnAdvertisedSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access: Optional[str] = None,
                 bgp_network: Optional[int] = None,
                 firewall_address: Optional[str] = None,
                 id: Optional[int] = None,
                 policies: Optional[int] = None,
                 prefix: Optional[str] = None):
        """
        :param str access: Access policy direction. Valid values: `inbound`, `bidirectional`.
        :param int bgp_network: Underlying BGP network.
        :param str firewall_address: Underlying firewall address.
        :param int id: ID.
        :param int policies: Underlying policies.
        :param str prefix: Network prefix.
        """
        if access is not None:
            pulumi.set(__self__, "access", access)
        if bgp_network is not None:
            pulumi.set(__self__, "bgp_network", bgp_network)
        if firewall_address is not None:
            pulumi.set(__self__, "firewall_address", firewall_address)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        """
        Access policy direction. Valid values: `inbound`, `bidirectional`.
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="bgpNetwork")
    def bgp_network(self) -> Optional[int]:
        """
        Underlying BGP network.
        """
        return pulumi.get(self, "bgp_network")

    @property
    @pulumi.getter(name="firewallAddress")
    def firewall_address(self) -> Optional[str]:
        """
        Underlying firewall address.
        """
        return pulumi.get(self, "firewall_address")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def policies(self) -> Optional[int]:
        """
        Underlying policies.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Network prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class FabricvpnOverlay(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bgpNeighbor":
            suggest = "bgp_neighbor"
        elif key == "bgpNeighborGroup":
            suggest = "bgp_neighbor_group"
        elif key == "bgpNeighborRange":
            suggest = "bgp_neighbor_range"
        elif key == "bgpNetwork":
            suggest = "bgp_network"
        elif key == "ipsecPhase1":
            suggest = "ipsec_phase1"
        elif key == "overlayPolicy":
            suggest = "overlay_policy"
        elif key == "overlayTunnelBlock":
            suggest = "overlay_tunnel_block"
        elif key == "remoteGw":
            suggest = "remote_gw"
        elif key == "routePolicy":
            suggest = "route_policy"
        elif key == "sdwanMember":
            suggest = "sdwan_member"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FabricvpnOverlay. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FabricvpnOverlay.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FabricvpnOverlay.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bgp_neighbor: Optional[str] = None,
                 bgp_neighbor_group: Optional[str] = None,
                 bgp_neighbor_range: Optional[int] = None,
                 bgp_network: Optional[int] = None,
                 interface: Optional[str] = None,
                 ipsec_phase1: Optional[str] = None,
                 name: Optional[str] = None,
                 overlay_policy: Optional[int] = None,
                 overlay_tunnel_block: Optional[str] = None,
                 remote_gw: Optional[str] = None,
                 route_policy: Optional[int] = None,
                 sdwan_member: Optional[int] = None):
        """
        :param str bgp_neighbor: Underlying BGP neighbor entry.
        :param str bgp_neighbor_group: Underlying BGP neighbor group entry.
        :param int bgp_neighbor_range: Underlying BGP neighbor range entry.
        :param int bgp_network: Underlying BGP network.
        :param str interface: Underlying interface name.
        :param str ipsec_phase1: IPsec interface.
        :param str name: Overlay name.
        :param int overlay_policy: The overlay policy to allow ADVPN thru traffic.
        :param str overlay_tunnel_block: IPv4 address and subnet mask for the overlay tunnel , syntax: X.X.X.X/24.
        :param str remote_gw: IP address of the hub gateway (Set by hub).
        :param int route_policy: Underlying router policy.
        :param int sdwan_member: Reference to SD-WAN member entry.
        """
        if bgp_neighbor is not None:
            pulumi.set(__self__, "bgp_neighbor", bgp_neighbor)
        if bgp_neighbor_group is not None:
            pulumi.set(__self__, "bgp_neighbor_group", bgp_neighbor_group)
        if bgp_neighbor_range is not None:
            pulumi.set(__self__, "bgp_neighbor_range", bgp_neighbor_range)
        if bgp_network is not None:
            pulumi.set(__self__, "bgp_network", bgp_network)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ipsec_phase1 is not None:
            pulumi.set(__self__, "ipsec_phase1", ipsec_phase1)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overlay_policy is not None:
            pulumi.set(__self__, "overlay_policy", overlay_policy)
        if overlay_tunnel_block is not None:
            pulumi.set(__self__, "overlay_tunnel_block", overlay_tunnel_block)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if route_policy is not None:
            pulumi.set(__self__, "route_policy", route_policy)
        if sdwan_member is not None:
            pulumi.set(__self__, "sdwan_member", sdwan_member)

    @property
    @pulumi.getter(name="bgpNeighbor")
    def bgp_neighbor(self) -> Optional[str]:
        """
        Underlying BGP neighbor entry.
        """
        return pulumi.get(self, "bgp_neighbor")

    @property
    @pulumi.getter(name="bgpNeighborGroup")
    def bgp_neighbor_group(self) -> Optional[str]:
        """
        Underlying BGP neighbor group entry.
        """
        return pulumi.get(self, "bgp_neighbor_group")

    @property
    @pulumi.getter(name="bgpNeighborRange")
    def bgp_neighbor_range(self) -> Optional[int]:
        """
        Underlying BGP neighbor range entry.
        """
        return pulumi.get(self, "bgp_neighbor_range")

    @property
    @pulumi.getter(name="bgpNetwork")
    def bgp_network(self) -> Optional[int]:
        """
        Underlying BGP network.
        """
        return pulumi.get(self, "bgp_network")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Underlying interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipsecPhase1")
    def ipsec_phase1(self) -> Optional[str]:
        """
        IPsec interface.
        """
        return pulumi.get(self, "ipsec_phase1")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Overlay name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overlayPolicy")
    def overlay_policy(self) -> Optional[int]:
        """
        The overlay policy to allow ADVPN thru traffic.
        """
        return pulumi.get(self, "overlay_policy")

    @property
    @pulumi.getter(name="overlayTunnelBlock")
    def overlay_tunnel_block(self) -> Optional[str]:
        """
        IPv4 address and subnet mask for the overlay tunnel , syntax: X.X.X.X/24.
        """
        return pulumi.get(self, "overlay_tunnel_block")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[str]:
        """
        IP address of the hub gateway (Set by hub).
        """
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter(name="routePolicy")
    def route_policy(self) -> Optional[int]:
        """
        Underlying router policy.
        """
        return pulumi.get(self, "route_policy")

    @property
    @pulumi.getter(name="sdwanMember")
    def sdwan_member(self) -> Optional[int]:
        """
        Reference to SD-WAN member entry.
        """
        return pulumi.get(self, "sdwan_member")


@pulumi.output_type
class FederatedupgradeKnownHaMember(dict):
    def __init__(__self__, *,
                 serial: Optional[str] = None):
        """
        :param str serial: Serial number of HA member
        """
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        """
        Serial number of HA member
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class FederatedupgradeNodeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinatingFortigate":
            suggest = "coordinating_fortigate"
        elif key == "deviceType":
            suggest = "device_type"
        elif key == "maximumMinutes":
            suggest = "maximum_minutes"
        elif key == "setupTime":
            suggest = "setup_time"
        elif key == "upgradePath":
            suggest = "upgrade_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FederatedupgradeNodeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FederatedupgradeNodeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FederatedupgradeNodeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 coordinating_fortigate: Optional[str] = None,
                 device_type: Optional[str] = None,
                 maximum_minutes: Optional[int] = None,
                 serial: Optional[str] = None,
                 setup_time: Optional[str] = None,
                 time: Optional[str] = None,
                 timing: Optional[str] = None,
                 upgrade_path: Optional[str] = None):
        """
        :param str coordinating_fortigate: The serial of the FortiGate that controls this device
        :param str device_type: What type of device this node represents.
        :param int maximum_minutes: Maximum number of minutes to allow for immediate upgrade preparation.
        :param str serial: Serial number of the node to include.
        :param str setup_time: When the upgrade was configured. Format hh:mm yyyy/mm/dd UTC.
        :param str time: Scheduled time for the upgrade. Format hh:mm yyyy/mm/dd UTC.
        :param str timing: Whether the upgrade should be run immediately, or at a scheduled time. Valid values: `immediate`, `scheduled`.
        :param str upgrade_path: Image IDs to upgrade through.
        """
        if coordinating_fortigate is not None:
            pulumi.set(__self__, "coordinating_fortigate", coordinating_fortigate)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if maximum_minutes is not None:
            pulumi.set(__self__, "maximum_minutes", maximum_minutes)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if setup_time is not None:
            pulumi.set(__self__, "setup_time", setup_time)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if timing is not None:
            pulumi.set(__self__, "timing", timing)
        if upgrade_path is not None:
            pulumi.set(__self__, "upgrade_path", upgrade_path)

    @property
    @pulumi.getter(name="coordinatingFortigate")
    def coordinating_fortigate(self) -> Optional[str]:
        """
        The serial of the FortiGate that controls this device
        """
        return pulumi.get(self, "coordinating_fortigate")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[str]:
        """
        What type of device this node represents.
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="maximumMinutes")
    def maximum_minutes(self) -> Optional[int]:
        """
        Maximum number of minutes to allow for immediate upgrade preparation.
        """
        return pulumi.get(self, "maximum_minutes")

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        """
        Serial number of the node to include.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="setupTime")
    def setup_time(self) -> Optional[str]:
        """
        When the upgrade was configured. Format hh:mm yyyy/mm/dd UTC.
        """
        return pulumi.get(self, "setup_time")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        """
        Scheduled time for the upgrade. Format hh:mm yyyy/mm/dd UTC.
        """
        return pulumi.get(self, "time")

    @property
    @pulumi.getter
    def timing(self) -> Optional[str]:
        """
        Whether the upgrade should be run immediately, or at a scheduled time. Valid values: `immediate`, `scheduled`.
        """
        return pulumi.get(self, "timing")

    @property
    @pulumi.getter(name="upgradePath")
    def upgrade_path(self) -> Optional[str]:
        """
        Image IDs to upgrade through.
        """
        return pulumi.get(self, "upgrade_path")


@pulumi.output_type
class GeoipoverrideIp6Range(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GeoipoverrideIp6Range. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GeoipoverrideIp6Range.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GeoipoverrideIp6Range.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip: Optional[str] = None):
        """
        :param str end_ip: Ending IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        :param int id: ID of individual entry in the IPv6 range table.
        :param str start_ip: Starting IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        """
        Ending IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID of individual entry in the IPv6 range table.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        """
        Starting IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class GeoipoverrideIpRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GeoipoverrideIpRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GeoipoverrideIpRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GeoipoverrideIpRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip: Optional[str] = None):
        """
        :param str end_ip: Ending IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        :param int id: ID of individual entry in the IPv6 range table.
        :param str start_ip: Starting IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        """
        Ending IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID of individual entry in the IPv6 range table.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        """
        Starting IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class GlobalInternetServiceDownloadList(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class HaHaMgmtInterface(dict):
    def __init__(__self__, *,
                 dst: Optional[str] = None,
                 gateway: Optional[str] = None,
                 gateway6: Optional[str] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None):
        """
        :param str dst: Default route destination for reserved HA management interface.
        :param str gateway: Default route gateway for reserved HA management interface.
        :param str gateway6: Default IPv6 gateway for reserved HA management interface.
        :param int id: Table ID.
        :param str interface: Interface to reserve for HA management.
        """
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter
    def dst(self) -> Optional[str]:
        """
        Default route destination for reserved HA management interface.
        """
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        Default route gateway for reserved HA management interface.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[str]:
        """
        Default IPv6 gateway for reserved HA management interface.
        """
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Table ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Interface to reserve for HA management.
        """
        return pulumi.get(self, "interface")


@pulumi.output_type
class HaSecondaryVcluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "overrideWaitTime":
            suggest = "override_wait_time"
        elif key == "pingserverFailoverThreshold":
            suggest = "pingserver_failover_threshold"
        elif key == "pingserverMonitorInterface":
            suggest = "pingserver_monitor_interface"
        elif key == "pingserverSecondaryForceReset":
            suggest = "pingserver_secondary_force_reset"
        elif key == "pingserverSlaveForceReset":
            suggest = "pingserver_slave_force_reset"
        elif key == "vclusterId":
            suggest = "vcluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HaSecondaryVcluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HaSecondaryVcluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HaSecondaryVcluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitor: Optional[str] = None,
                 override: Optional[str] = None,
                 override_wait_time: Optional[int] = None,
                 pingserver_failover_threshold: Optional[int] = None,
                 pingserver_monitor_interface: Optional[str] = None,
                 pingserver_secondary_force_reset: Optional[str] = None,
                 pingserver_slave_force_reset: Optional[str] = None,
                 priority: Optional[int] = None,
                 vcluster_id: Optional[int] = None,
                 vdom: Optional[str] = None):
        """
        :param str monitor: Interfaces to check for port monitoring (or link failure).
        :param str override: Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        :param int override_wait_time: Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        :param int pingserver_failover_threshold: Remote IP monitoring failover threshold (0 - 50).
        :param str pingserver_monitor_interface: Interfaces to check for remote IP monitoring.
        :param str pingserver_secondary_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param str pingserver_slave_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param int priority: Increase the priority to select the primary unit (0 - 255).
        :param int vcluster_id: Cluster ID.
        :param str vdom: VDOMs in virtual cluster 2.
        """
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_wait_time is not None:
            pulumi.set(__self__, "override_wait_time", override_wait_time)
        if pingserver_failover_threshold is not None:
            pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        if pingserver_monitor_interface is not None:
            pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        if pingserver_secondary_force_reset is not None:
            pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        if pingserver_slave_force_reset is not None:
            pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if vcluster_id is not None:
            pulumi.set(__self__, "vcluster_id", vcluster_id)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[str]:
        """
        Interfaces to check for port monitoring (or link failure).
        """
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def override(self) -> Optional[str]:
        """
        Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> Optional[int]:
        """
        Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        """
        return pulumi.get(self, "override_wait_time")

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> Optional[int]:
        """
        Remote IP monitoring failover threshold (0 - 50).
        """
        return pulumi.get(self, "pingserver_failover_threshold")

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> Optional[str]:
        """
        Interfaces to check for remote IP monitoring.
        """
        return pulumi.get(self, "pingserver_monitor_interface")

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> Optional[str]:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> Optional[str]:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pingserver_slave_force_reset")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Increase the priority to select the primary unit (0 - 255).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> Optional[int]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "vcluster_id")

    @property
    @pulumi.getter
    def vdom(self) -> Optional[str]:
        """
        VDOMs in virtual cluster 2.
        """
        return pulumi.get(self, "vdom")


@pulumi.output_type
class HaUnicastPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "peerIp":
            suggest = "peer_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HaUnicastPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HaUnicastPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HaUnicastPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 peer_ip: Optional[str] = None):
        """
        :param int id: Table ID.
        :param str peer_ip: Unicast peer IP.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if peer_ip is not None:
            pulumi.set(__self__, "peer_ip", peer_ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Table ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> Optional[str]:
        """
        Unicast peer IP.
        """
        return pulumi.get(self, "peer_ip")


@pulumi.output_type
class HaVcluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "overrideWaitTime":
            suggest = "override_wait_time"
        elif key == "pingserverFailoverThreshold":
            suggest = "pingserver_failover_threshold"
        elif key == "pingserverFlipTimeout":
            suggest = "pingserver_flip_timeout"
        elif key == "pingserverMonitorInterface":
            suggest = "pingserver_monitor_interface"
        elif key == "pingserverSecondaryForceReset":
            suggest = "pingserver_secondary_force_reset"
        elif key == "pingserverSlaveForceReset":
            suggest = "pingserver_slave_force_reset"
        elif key == "vclusterId":
            suggest = "vcluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HaVcluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HaVcluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HaVcluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 monitor: Optional[str] = None,
                 override: Optional[str] = None,
                 override_wait_time: Optional[int] = None,
                 pingserver_failover_threshold: Optional[int] = None,
                 pingserver_flip_timeout: Optional[int] = None,
                 pingserver_monitor_interface: Optional[str] = None,
                 pingserver_secondary_force_reset: Optional[str] = None,
                 pingserver_slave_force_reset: Optional[str] = None,
                 priority: Optional[int] = None,
                 vcluster_id: Optional[int] = None,
                 vdoms: Optional[Sequence['outputs.HaVclusterVdom']] = None):
        """
        :param str monitor: Interfaces to check for port monitoring (or link failure).
        :param str override: Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        :param int override_wait_time: Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        :param int pingserver_failover_threshold: Remote IP monitoring failover threshold (0 - 50).
        :param int pingserver_flip_timeout: Time to wait in minutes before renegotiating after a remote IP monitoring failover.
        :param str pingserver_monitor_interface: Interfaces to check for remote IP monitoring.
        :param str pingserver_secondary_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param str pingserver_slave_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        :param int priority: Increase the priority to select the primary unit (0 - 255).
        :param int vcluster_id: ID.
        :param Sequence['HaVclusterVdomArgs'] vdoms: Virtual domain(s) in the virtual cluster. The structure of `vdom` block is documented below.
        """
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_wait_time is not None:
            pulumi.set(__self__, "override_wait_time", override_wait_time)
        if pingserver_failover_threshold is not None:
            pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        if pingserver_flip_timeout is not None:
            pulumi.set(__self__, "pingserver_flip_timeout", pingserver_flip_timeout)
        if pingserver_monitor_interface is not None:
            pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        if pingserver_secondary_force_reset is not None:
            pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        if pingserver_slave_force_reset is not None:
            pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if vcluster_id is not None:
            pulumi.set(__self__, "vcluster_id", vcluster_id)
        if vdoms is not None:
            pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[str]:
        """
        Interfaces to check for port monitoring (or link failure).
        """
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def override(self) -> Optional[str]:
        """
        Enable and increase the priority of the unit that should always be primary (master). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> Optional[int]:
        """
        Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        """
        return pulumi.get(self, "override_wait_time")

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> Optional[int]:
        """
        Remote IP monitoring failover threshold (0 - 50).
        """
        return pulumi.get(self, "pingserver_failover_threshold")

    @property
    @pulumi.getter(name="pingserverFlipTimeout")
    def pingserver_flip_timeout(self) -> Optional[int]:
        """
        Time to wait in minutes before renegotiating after a remote IP monitoring failover.
        """
        return pulumi.get(self, "pingserver_flip_timeout")

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> Optional[str]:
        """
        Interfaces to check for remote IP monitoring.
        """
        return pulumi.get(self, "pingserver_monitor_interface")

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> Optional[str]:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> Optional[str]:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pingserver_slave_force_reset")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Increase the priority to select the primary unit (0 - 255).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "vcluster_id")

    @property
    @pulumi.getter
    def vdoms(self) -> Optional[Sequence['outputs.HaVclusterVdom']]:
        """
        Virtual domain(s) in the virtual cluster. The structure of `vdom` block is documented below.
        """
        return pulumi.get(self, "vdoms")


@pulumi.output_type
class HaVclusterVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class IkeDhGroup14(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup14. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup14.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup14.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup15(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup15. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup15.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup15.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup16(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup16. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup16.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup16.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup17(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup17. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup17.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup17.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup18(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup18. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup18.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup18.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup19(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup19. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup19.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup19.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup21(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup21. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup21.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup21.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup27(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup27. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup27.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup27.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup28(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup28. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup28.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup28.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup29(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup29. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup29.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup29.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup30(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup30. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup30.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup30.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup31(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup31. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup31.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup31.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup32(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup32. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup32.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup32.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class IkeDhGroup5(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keypairCache":
            suggest = "keypair_cache"
        elif key == "keypairCount":
            suggest = "keypair_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IkeDhGroup5. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IkeDhGroup5.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IkeDhGroup5.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keypair_cache: Optional[str] = None,
                 keypair_count: Optional[int] = None,
                 mode: Optional[str] = None):
        """
        :param str keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param int keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param str mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[str]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[int]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class InterfaceClientOption(dict):
    def __init__(__self__, *,
                 code: Optional[int] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param int code: DHCP client option code.
        :param int id: ID.
        :param str ip: DHCP option IPs.
        :param str type: DHCP client option type. Valid values: `hex`, `string`, `ip`, `fqdn`.
        :param str value: DHCP client option value.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        """
        DHCP client option code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        DHCP option IPs.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        DHCP client option type. Valid values: `hex`, `string`, `ip`, `fqdn`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        DHCP client option value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InterfaceDhcpSnoopingServerList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverIp":
            suggest = "server_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceDhcpSnoopingServerList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceDhcpSnoopingServerList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceDhcpSnoopingServerList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 server_ip: Optional[str] = None):
        """
        :param str name: DHCP server name.
        :param str server_ip: IP address for DHCP server.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server_ip is not None:
            pulumi.set(__self__, "server_ip", server_ip)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        DHCP server name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> Optional[str]:
        """
        IP address for DHCP server.
        """
        return pulumi.get(self, "server_ip")


@pulumi.output_type
class InterfaceFailAlertInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Names of the physical interfaces belonging to the aggregate or redundant interface.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Names of the physical interfaces belonging to the aggregate or redundant interface.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InterfaceIpv6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cliConn6Status":
            suggest = "cli_conn6_status"
        elif key == "dhcp6ClientOptions":
            suggest = "dhcp6_client_options"
        elif key == "dhcp6IapdLists":
            suggest = "dhcp6_iapd_lists"
        elif key == "dhcp6InformationRequest":
            suggest = "dhcp6_information_request"
        elif key == "dhcp6PrefixDelegation":
            suggest = "dhcp6_prefix_delegation"
        elif key == "dhcp6PrefixHint":
            suggest = "dhcp6_prefix_hint"
        elif key == "dhcp6PrefixHintPlt":
            suggest = "dhcp6_prefix_hint_plt"
        elif key == "dhcp6PrefixHintVlt":
            suggest = "dhcp6_prefix_hint_vlt"
        elif key == "dhcp6RelayInterfaceId":
            suggest = "dhcp6_relay_interface_id"
        elif key == "dhcp6RelayIp":
            suggest = "dhcp6_relay_ip"
        elif key == "dhcp6RelayService":
            suggest = "dhcp6_relay_service"
        elif key == "dhcp6RelaySourceInterface":
            suggest = "dhcp6_relay_source_interface"
        elif key == "dhcp6RelaySourceIp":
            suggest = "dhcp6_relay_source_ip"
        elif key == "dhcp6RelayType":
            suggest = "dhcp6_relay_type"
        elif key == "icmp6SendRedirect":
            suggest = "icmp6_send_redirect"
        elif key == "interfaceIdentifier":
            suggest = "interface_identifier"
        elif key == "ip6Address":
            suggest = "ip6_address"
        elif key == "ip6Allowaccess":
            suggest = "ip6_allowaccess"
        elif key == "ip6DefaultLife":
            suggest = "ip6_default_life"
        elif key == "ip6DelegatedPrefixIaid":
            suggest = "ip6_delegated_prefix_iaid"
        elif key == "ip6DelegatedPrefixLists":
            suggest = "ip6_delegated_prefix_lists"
        elif key == "ip6DnsServerOverride":
            suggest = "ip6_dns_server_override"
        elif key == "ip6ExtraAddrs":
            suggest = "ip6_extra_addrs"
        elif key == "ip6HopLimit":
            suggest = "ip6_hop_limit"
        elif key == "ip6LinkMtu":
            suggest = "ip6_link_mtu"
        elif key == "ip6ManageFlag":
            suggest = "ip6_manage_flag"
        elif key == "ip6MaxInterval":
            suggest = "ip6_max_interval"
        elif key == "ip6MinInterval":
            suggest = "ip6_min_interval"
        elif key == "ip6Mode":
            suggest = "ip6_mode"
        elif key == "ip6OtherFlag":
            suggest = "ip6_other_flag"
        elif key == "ip6PrefixLists":
            suggest = "ip6_prefix_lists"
        elif key == "ip6PrefixMode":
            suggest = "ip6_prefix_mode"
        elif key == "ip6ReachableTime":
            suggest = "ip6_reachable_time"
        elif key == "ip6RetransTime":
            suggest = "ip6_retrans_time"
        elif key == "ip6SendAdv":
            suggest = "ip6_send_adv"
        elif key == "ip6Subnet":
            suggest = "ip6_subnet"
        elif key == "ip6UpstreamInterface":
            suggest = "ip6_upstream_interface"
        elif key == "ndCert":
            suggest = "nd_cert"
        elif key == "ndCgaModifier":
            suggest = "nd_cga_modifier"
        elif key == "ndMode":
            suggest = "nd_mode"
        elif key == "ndSecurityLevel":
            suggest = "nd_security_level"
        elif key == "ndTimestampDelta":
            suggest = "nd_timestamp_delta"
        elif key == "ndTimestampFuzz":
            suggest = "nd_timestamp_fuzz"
        elif key == "raSendMtu":
            suggest = "ra_send_mtu"
        elif key == "uniqueAutoconfAddr":
            suggest = "unique_autoconf_addr"
        elif key == "vrip6LinkLocal":
            suggest = "vrip6_link_local"
        elif key == "vrrpVirtualMac6":
            suggest = "vrrp_virtual_mac6"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceIpv6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceIpv6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceIpv6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autoconf: Optional[str] = None,
                 cli_conn6_status: Optional[int] = None,
                 dhcp6_client_options: Optional[str] = None,
                 dhcp6_iapd_lists: Optional[Sequence['outputs.InterfaceIpv6Dhcp6IapdList']] = None,
                 dhcp6_information_request: Optional[str] = None,
                 dhcp6_prefix_delegation: Optional[str] = None,
                 dhcp6_prefix_hint: Optional[str] = None,
                 dhcp6_prefix_hint_plt: Optional[int] = None,
                 dhcp6_prefix_hint_vlt: Optional[int] = None,
                 dhcp6_relay_interface_id: Optional[str] = None,
                 dhcp6_relay_ip: Optional[str] = None,
                 dhcp6_relay_service: Optional[str] = None,
                 dhcp6_relay_source_interface: Optional[str] = None,
                 dhcp6_relay_source_ip: Optional[str] = None,
                 dhcp6_relay_type: Optional[str] = None,
                 icmp6_send_redirect: Optional[str] = None,
                 interface_identifier: Optional[str] = None,
                 ip6_address: Optional[str] = None,
                 ip6_allowaccess: Optional[str] = None,
                 ip6_default_life: Optional[int] = None,
                 ip6_delegated_prefix_iaid: Optional[int] = None,
                 ip6_delegated_prefix_lists: Optional[Sequence['outputs.InterfaceIpv6Ip6DelegatedPrefixList']] = None,
                 ip6_dns_server_override: Optional[str] = None,
                 ip6_extra_addrs: Optional[Sequence['outputs.InterfaceIpv6Ip6ExtraAddr']] = None,
                 ip6_hop_limit: Optional[int] = None,
                 ip6_link_mtu: Optional[int] = None,
                 ip6_manage_flag: Optional[str] = None,
                 ip6_max_interval: Optional[int] = None,
                 ip6_min_interval: Optional[int] = None,
                 ip6_mode: Optional[str] = None,
                 ip6_other_flag: Optional[str] = None,
                 ip6_prefix_lists: Optional[Sequence['outputs.InterfaceIpv6Ip6PrefixList']] = None,
                 ip6_prefix_mode: Optional[str] = None,
                 ip6_reachable_time: Optional[int] = None,
                 ip6_retrans_time: Optional[int] = None,
                 ip6_send_adv: Optional[str] = None,
                 ip6_subnet: Optional[str] = None,
                 ip6_upstream_interface: Optional[str] = None,
                 nd_cert: Optional[str] = None,
                 nd_cga_modifier: Optional[str] = None,
                 nd_mode: Optional[str] = None,
                 nd_security_level: Optional[int] = None,
                 nd_timestamp_delta: Optional[int] = None,
                 nd_timestamp_fuzz: Optional[int] = None,
                 ra_send_mtu: Optional[str] = None,
                 unique_autoconf_addr: Optional[str] = None,
                 vrip6_link_local: Optional[str] = None,
                 vrrp6s: Optional[Sequence['outputs.InterfaceIpv6Vrrp6']] = None,
                 vrrp_virtual_mac6: Optional[str] = None):
        """
        :param str autoconf: Enable/disable address auto config. Valid values: `enable`, `disable`.
        :param int cli_conn6_status: CLI IPv6 connection status.
        :param str dhcp6_client_options: DHCPv6 client options. Valid values: `rapid`, `iapd`, `iana`.
        :param Sequence['InterfaceIpv6Dhcp6IapdListArgs'] dhcp6_iapd_lists: DHCPv6 IA-PD list The structure of `dhcp6_iapd_list` block is documented below.
        :param str dhcp6_information_request: Enable/disable DHCPv6 information request. Valid values: `enable`, `disable`.
        :param str dhcp6_prefix_delegation: Enable/disable DHCPv6 prefix delegation. Valid values: `enable`, `disable`.
        :param str dhcp6_prefix_hint: DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        :param int dhcp6_prefix_hint_plt: DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        :param int dhcp6_prefix_hint_vlt: DHCPv6 prefix hint valid life time (sec).
        :param str dhcp6_relay_interface_id: DHCP6 relay interface ID.
        :param str dhcp6_relay_ip: DHCPv6 relay IP address.
        :param str dhcp6_relay_service: Enable/disable DHCPv6 relay. Valid values: `disable`, `enable`.
        :param str dhcp6_relay_source_interface: Enable/disable use of address on this interface as the source address of the relay message. Valid values: `disable`, `enable`.
        :param str dhcp6_relay_source_ip: IPv6 address used by the DHCP6 relay as its source IP.
        :param str dhcp6_relay_type: DHCPv6 relay type. Valid values: `regular`.
        :param str icmp6_send_redirect: Enable/disable sending of ICMPv6 redirects. Valid values: `enable`, `disable`.
        :param str interface_identifier: IPv6 interface identifier.
        :param str ip6_address: Primary IPv6 address prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        :param str ip6_allowaccess: Allow management access to the interface.
        :param int ip6_default_life: Default life (sec).
        :param int ip6_delegated_prefix_iaid: IAID of obtained delegated-prefix from the upstream interface.
        :param Sequence['InterfaceIpv6Ip6DelegatedPrefixListArgs'] ip6_delegated_prefix_lists: Advertised IPv6 delegated prefix list. The structure of `ip6_delegated_prefix_list` block is documented below.
        :param str ip6_dns_server_override: Enable/disable using the DNS server acquired by DHCP. Valid values: `enable`, `disable`.
        :param Sequence['InterfaceIpv6Ip6ExtraAddrArgs'] ip6_extra_addrs: Extra IPv6 address prefixes of interface. The structure of `ip6_extra_addr` block is documented below.
        :param int ip6_hop_limit: Hop limit (0 means unspecified).
        :param int ip6_link_mtu: IPv6 link MTU.
        :param str ip6_manage_flag: Enable/disable the managed flag. Valid values: `enable`, `disable`.
        :param int ip6_max_interval: IPv6 maximum interval (4 to 1800 sec).
        :param int ip6_min_interval: IPv6 minimum interval (3 to 1350 sec).
        :param str ip6_mode: Addressing mode (static, DHCP, delegated). Valid values: `static`, `dhcp`, `pppoe`, `delegated`.
        :param str ip6_other_flag: Enable/disable the other IPv6 flag. Valid values: `enable`, `disable`.
        :param Sequence['InterfaceIpv6Ip6PrefixListArgs'] ip6_prefix_lists: Advertised prefix list. The structure of `ip6_prefix_list` block is documented below.
        :param str ip6_prefix_mode: Assigning a prefix from DHCP or RA. Valid values: `dhcp6`, `ra`.
        :param int ip6_reachable_time: IPv6 reachable time (milliseconds; 0 means unspecified).
        :param int ip6_retrans_time: IPv6 retransmit time (milliseconds; 0 means unspecified).
        :param str ip6_send_adv: Enable/disable sending advertisements about the interface. Valid values: `enable`, `disable`.
        :param str ip6_subnet: Subnet to routing prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        :param str ip6_upstream_interface: Interface name providing delegated information.
        :param str nd_cert: Neighbor discovery certificate.
        :param str nd_cga_modifier: Neighbor discovery CGA modifier.
        :param str nd_mode: Neighbor discovery mode. Valid values: `basic`, `SEND-compatible`.
        :param int nd_security_level: Neighbor discovery security level (0 - 7; 0 = least secure, default = 0).
        :param int nd_timestamp_delta: Neighbor discovery timestamp delta value (1 - 3600 sec; default = 300).
        :param int nd_timestamp_fuzz: Neighbor discovery timestamp fuzz factor (1 - 60 sec; default = 1).
        :param str ra_send_mtu: Enable/disable sending link MTU in RA packet. Valid values: `enable`, `disable`.
        :param str unique_autoconf_addr: Enable/disable unique auto config address. Valid values: `enable`, `disable`.
        :param str vrip6_link_local: Link-local IPv6 address of virtual router.
        :param Sequence['InterfaceIpv6Vrrp6Args'] vrrp6s: IPv6 VRRP configuration. The structure of `vrrp6` block is documented below.
               
               The `ip6_extra_addr` block supports:
        :param str vrrp_virtual_mac6: Enable/disable virtual MAC for VRRP. Valid values: `enable`, `disable`.
        """
        if autoconf is not None:
            pulumi.set(__self__, "autoconf", autoconf)
        if cli_conn6_status is not None:
            pulumi.set(__self__, "cli_conn6_status", cli_conn6_status)
        if dhcp6_client_options is not None:
            pulumi.set(__self__, "dhcp6_client_options", dhcp6_client_options)
        if dhcp6_iapd_lists is not None:
            pulumi.set(__self__, "dhcp6_iapd_lists", dhcp6_iapd_lists)
        if dhcp6_information_request is not None:
            pulumi.set(__self__, "dhcp6_information_request", dhcp6_information_request)
        if dhcp6_prefix_delegation is not None:
            pulumi.set(__self__, "dhcp6_prefix_delegation", dhcp6_prefix_delegation)
        if dhcp6_prefix_hint is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint", dhcp6_prefix_hint)
        if dhcp6_prefix_hint_plt is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint_plt", dhcp6_prefix_hint_plt)
        if dhcp6_prefix_hint_vlt is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint_vlt", dhcp6_prefix_hint_vlt)
        if dhcp6_relay_interface_id is not None:
            pulumi.set(__self__, "dhcp6_relay_interface_id", dhcp6_relay_interface_id)
        if dhcp6_relay_ip is not None:
            pulumi.set(__self__, "dhcp6_relay_ip", dhcp6_relay_ip)
        if dhcp6_relay_service is not None:
            pulumi.set(__self__, "dhcp6_relay_service", dhcp6_relay_service)
        if dhcp6_relay_source_interface is not None:
            pulumi.set(__self__, "dhcp6_relay_source_interface", dhcp6_relay_source_interface)
        if dhcp6_relay_source_ip is not None:
            pulumi.set(__self__, "dhcp6_relay_source_ip", dhcp6_relay_source_ip)
        if dhcp6_relay_type is not None:
            pulumi.set(__self__, "dhcp6_relay_type", dhcp6_relay_type)
        if icmp6_send_redirect is not None:
            pulumi.set(__self__, "icmp6_send_redirect", icmp6_send_redirect)
        if interface_identifier is not None:
            pulumi.set(__self__, "interface_identifier", interface_identifier)
        if ip6_address is not None:
            pulumi.set(__self__, "ip6_address", ip6_address)
        if ip6_allowaccess is not None:
            pulumi.set(__self__, "ip6_allowaccess", ip6_allowaccess)
        if ip6_default_life is not None:
            pulumi.set(__self__, "ip6_default_life", ip6_default_life)
        if ip6_delegated_prefix_iaid is not None:
            pulumi.set(__self__, "ip6_delegated_prefix_iaid", ip6_delegated_prefix_iaid)
        if ip6_delegated_prefix_lists is not None:
            pulumi.set(__self__, "ip6_delegated_prefix_lists", ip6_delegated_prefix_lists)
        if ip6_dns_server_override is not None:
            pulumi.set(__self__, "ip6_dns_server_override", ip6_dns_server_override)
        if ip6_extra_addrs is not None:
            pulumi.set(__self__, "ip6_extra_addrs", ip6_extra_addrs)
        if ip6_hop_limit is not None:
            pulumi.set(__self__, "ip6_hop_limit", ip6_hop_limit)
        if ip6_link_mtu is not None:
            pulumi.set(__self__, "ip6_link_mtu", ip6_link_mtu)
        if ip6_manage_flag is not None:
            pulumi.set(__self__, "ip6_manage_flag", ip6_manage_flag)
        if ip6_max_interval is not None:
            pulumi.set(__self__, "ip6_max_interval", ip6_max_interval)
        if ip6_min_interval is not None:
            pulumi.set(__self__, "ip6_min_interval", ip6_min_interval)
        if ip6_mode is not None:
            pulumi.set(__self__, "ip6_mode", ip6_mode)
        if ip6_other_flag is not None:
            pulumi.set(__self__, "ip6_other_flag", ip6_other_flag)
        if ip6_prefix_lists is not None:
            pulumi.set(__self__, "ip6_prefix_lists", ip6_prefix_lists)
        if ip6_prefix_mode is not None:
            pulumi.set(__self__, "ip6_prefix_mode", ip6_prefix_mode)
        if ip6_reachable_time is not None:
            pulumi.set(__self__, "ip6_reachable_time", ip6_reachable_time)
        if ip6_retrans_time is not None:
            pulumi.set(__self__, "ip6_retrans_time", ip6_retrans_time)
        if ip6_send_adv is not None:
            pulumi.set(__self__, "ip6_send_adv", ip6_send_adv)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if ip6_upstream_interface is not None:
            pulumi.set(__self__, "ip6_upstream_interface", ip6_upstream_interface)
        if nd_cert is not None:
            pulumi.set(__self__, "nd_cert", nd_cert)
        if nd_cga_modifier is not None:
            pulumi.set(__self__, "nd_cga_modifier", nd_cga_modifier)
        if nd_mode is not None:
            pulumi.set(__self__, "nd_mode", nd_mode)
        if nd_security_level is not None:
            pulumi.set(__self__, "nd_security_level", nd_security_level)
        if nd_timestamp_delta is not None:
            pulumi.set(__self__, "nd_timestamp_delta", nd_timestamp_delta)
        if nd_timestamp_fuzz is not None:
            pulumi.set(__self__, "nd_timestamp_fuzz", nd_timestamp_fuzz)
        if ra_send_mtu is not None:
            pulumi.set(__self__, "ra_send_mtu", ra_send_mtu)
        if unique_autoconf_addr is not None:
            pulumi.set(__self__, "unique_autoconf_addr", unique_autoconf_addr)
        if vrip6_link_local is not None:
            pulumi.set(__self__, "vrip6_link_local", vrip6_link_local)
        if vrrp6s is not None:
            pulumi.set(__self__, "vrrp6s", vrrp6s)
        if vrrp_virtual_mac6 is not None:
            pulumi.set(__self__, "vrrp_virtual_mac6", vrrp_virtual_mac6)

    @property
    @pulumi.getter
    def autoconf(self) -> Optional[str]:
        """
        Enable/disable address auto config. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "autoconf")

    @property
    @pulumi.getter(name="cliConn6Status")
    def cli_conn6_status(self) -> Optional[int]:
        """
        CLI IPv6 connection status.
        """
        return pulumi.get(self, "cli_conn6_status")

    @property
    @pulumi.getter(name="dhcp6ClientOptions")
    def dhcp6_client_options(self) -> Optional[str]:
        """
        DHCPv6 client options. Valid values: `rapid`, `iapd`, `iana`.
        """
        return pulumi.get(self, "dhcp6_client_options")

    @property
    @pulumi.getter(name="dhcp6IapdLists")
    def dhcp6_iapd_lists(self) -> Optional[Sequence['outputs.InterfaceIpv6Dhcp6IapdList']]:
        """
        DHCPv6 IA-PD list The structure of `dhcp6_iapd_list` block is documented below.
        """
        return pulumi.get(self, "dhcp6_iapd_lists")

    @property
    @pulumi.getter(name="dhcp6InformationRequest")
    def dhcp6_information_request(self) -> Optional[str]:
        """
        Enable/disable DHCPv6 information request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp6_information_request")

    @property
    @pulumi.getter(name="dhcp6PrefixDelegation")
    def dhcp6_prefix_delegation(self) -> Optional[str]:
        """
        Enable/disable DHCPv6 prefix delegation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp6_prefix_delegation")

    @property
    @pulumi.getter(name="dhcp6PrefixHint")
    def dhcp6_prefix_hint(self) -> Optional[str]:
        """
        DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        """
        return pulumi.get(self, "dhcp6_prefix_hint")

    @property
    @pulumi.getter(name="dhcp6PrefixHintPlt")
    def dhcp6_prefix_hint_plt(self) -> Optional[int]:
        """
        DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        """
        return pulumi.get(self, "dhcp6_prefix_hint_plt")

    @property
    @pulumi.getter(name="dhcp6PrefixHintVlt")
    def dhcp6_prefix_hint_vlt(self) -> Optional[int]:
        """
        DHCPv6 prefix hint valid life time (sec).
        """
        return pulumi.get(self, "dhcp6_prefix_hint_vlt")

    @property
    @pulumi.getter(name="dhcp6RelayInterfaceId")
    def dhcp6_relay_interface_id(self) -> Optional[str]:
        """
        DHCP6 relay interface ID.
        """
        return pulumi.get(self, "dhcp6_relay_interface_id")

    @property
    @pulumi.getter(name="dhcp6RelayIp")
    def dhcp6_relay_ip(self) -> Optional[str]:
        """
        DHCPv6 relay IP address.
        """
        return pulumi.get(self, "dhcp6_relay_ip")

    @property
    @pulumi.getter(name="dhcp6RelayService")
    def dhcp6_relay_service(self) -> Optional[str]:
        """
        Enable/disable DHCPv6 relay. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp6_relay_service")

    @property
    @pulumi.getter(name="dhcp6RelaySourceInterface")
    def dhcp6_relay_source_interface(self) -> Optional[str]:
        """
        Enable/disable use of address on this interface as the source address of the relay message. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp6_relay_source_interface")

    @property
    @pulumi.getter(name="dhcp6RelaySourceIp")
    def dhcp6_relay_source_ip(self) -> Optional[str]:
        """
        IPv6 address used by the DHCP6 relay as its source IP.
        """
        return pulumi.get(self, "dhcp6_relay_source_ip")

    @property
    @pulumi.getter(name="dhcp6RelayType")
    def dhcp6_relay_type(self) -> Optional[str]:
        """
        DHCPv6 relay type. Valid values: `regular`.
        """
        return pulumi.get(self, "dhcp6_relay_type")

    @property
    @pulumi.getter(name="icmp6SendRedirect")
    def icmp6_send_redirect(self) -> Optional[str]:
        """
        Enable/disable sending of ICMPv6 redirects. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "icmp6_send_redirect")

    @property
    @pulumi.getter(name="interfaceIdentifier")
    def interface_identifier(self) -> Optional[str]:
        """
        IPv6 interface identifier.
        """
        return pulumi.get(self, "interface_identifier")

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> Optional[str]:
        """
        Primary IPv6 address prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        """
        return pulumi.get(self, "ip6_address")

    @property
    @pulumi.getter(name="ip6Allowaccess")
    def ip6_allowaccess(self) -> Optional[str]:
        """
        Allow management access to the interface.
        """
        return pulumi.get(self, "ip6_allowaccess")

    @property
    @pulumi.getter(name="ip6DefaultLife")
    def ip6_default_life(self) -> Optional[int]:
        """
        Default life (sec).
        """
        return pulumi.get(self, "ip6_default_life")

    @property
    @pulumi.getter(name="ip6DelegatedPrefixIaid")
    def ip6_delegated_prefix_iaid(self) -> Optional[int]:
        """
        IAID of obtained delegated-prefix from the upstream interface.
        """
        return pulumi.get(self, "ip6_delegated_prefix_iaid")

    @property
    @pulumi.getter(name="ip6DelegatedPrefixLists")
    def ip6_delegated_prefix_lists(self) -> Optional[Sequence['outputs.InterfaceIpv6Ip6DelegatedPrefixList']]:
        """
        Advertised IPv6 delegated prefix list. The structure of `ip6_delegated_prefix_list` block is documented below.
        """
        return pulumi.get(self, "ip6_delegated_prefix_lists")

    @property
    @pulumi.getter(name="ip6DnsServerOverride")
    def ip6_dns_server_override(self) -> Optional[str]:
        """
        Enable/disable using the DNS server acquired by DHCP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip6_dns_server_override")

    @property
    @pulumi.getter(name="ip6ExtraAddrs")
    def ip6_extra_addrs(self) -> Optional[Sequence['outputs.InterfaceIpv6Ip6ExtraAddr']]:
        """
        Extra IPv6 address prefixes of interface. The structure of `ip6_extra_addr` block is documented below.
        """
        return pulumi.get(self, "ip6_extra_addrs")

    @property
    @pulumi.getter(name="ip6HopLimit")
    def ip6_hop_limit(self) -> Optional[int]:
        """
        Hop limit (0 means unspecified).
        """
        return pulumi.get(self, "ip6_hop_limit")

    @property
    @pulumi.getter(name="ip6LinkMtu")
    def ip6_link_mtu(self) -> Optional[int]:
        """
        IPv6 link MTU.
        """
        return pulumi.get(self, "ip6_link_mtu")

    @property
    @pulumi.getter(name="ip6ManageFlag")
    def ip6_manage_flag(self) -> Optional[str]:
        """
        Enable/disable the managed flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip6_manage_flag")

    @property
    @pulumi.getter(name="ip6MaxInterval")
    def ip6_max_interval(self) -> Optional[int]:
        """
        IPv6 maximum interval (4 to 1800 sec).
        """
        return pulumi.get(self, "ip6_max_interval")

    @property
    @pulumi.getter(name="ip6MinInterval")
    def ip6_min_interval(self) -> Optional[int]:
        """
        IPv6 minimum interval (3 to 1350 sec).
        """
        return pulumi.get(self, "ip6_min_interval")

    @property
    @pulumi.getter(name="ip6Mode")
    def ip6_mode(self) -> Optional[str]:
        """
        Addressing mode (static, DHCP, delegated). Valid values: `static`, `dhcp`, `pppoe`, `delegated`.
        """
        return pulumi.get(self, "ip6_mode")

    @property
    @pulumi.getter(name="ip6OtherFlag")
    def ip6_other_flag(self) -> Optional[str]:
        """
        Enable/disable the other IPv6 flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip6_other_flag")

    @property
    @pulumi.getter(name="ip6PrefixLists")
    def ip6_prefix_lists(self) -> Optional[Sequence['outputs.InterfaceIpv6Ip6PrefixList']]:
        """
        Advertised prefix list. The structure of `ip6_prefix_list` block is documented below.
        """
        return pulumi.get(self, "ip6_prefix_lists")

    @property
    @pulumi.getter(name="ip6PrefixMode")
    def ip6_prefix_mode(self) -> Optional[str]:
        """
        Assigning a prefix from DHCP or RA. Valid values: `dhcp6`, `ra`.
        """
        return pulumi.get(self, "ip6_prefix_mode")

    @property
    @pulumi.getter(name="ip6ReachableTime")
    def ip6_reachable_time(self) -> Optional[int]:
        """
        IPv6 reachable time (milliseconds; 0 means unspecified).
        """
        return pulumi.get(self, "ip6_reachable_time")

    @property
    @pulumi.getter(name="ip6RetransTime")
    def ip6_retrans_time(self) -> Optional[int]:
        """
        IPv6 retransmit time (milliseconds; 0 means unspecified).
        """
        return pulumi.get(self, "ip6_retrans_time")

    @property
    @pulumi.getter(name="ip6SendAdv")
    def ip6_send_adv(self) -> Optional[str]:
        """
        Enable/disable sending advertisements about the interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip6_send_adv")

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[str]:
        """
        Subnet to routing prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        """
        return pulumi.get(self, "ip6_subnet")

    @property
    @pulumi.getter(name="ip6UpstreamInterface")
    def ip6_upstream_interface(self) -> Optional[str]:
        """
        Interface name providing delegated information.
        """
        return pulumi.get(self, "ip6_upstream_interface")

    @property
    @pulumi.getter(name="ndCert")
    def nd_cert(self) -> Optional[str]:
        """
        Neighbor discovery certificate.
        """
        return pulumi.get(self, "nd_cert")

    @property
    @pulumi.getter(name="ndCgaModifier")
    def nd_cga_modifier(self) -> Optional[str]:
        """
        Neighbor discovery CGA modifier.
        """
        return pulumi.get(self, "nd_cga_modifier")

    @property
    @pulumi.getter(name="ndMode")
    def nd_mode(self) -> Optional[str]:
        """
        Neighbor discovery mode. Valid values: `basic`, `SEND-compatible`.
        """
        return pulumi.get(self, "nd_mode")

    @property
    @pulumi.getter(name="ndSecurityLevel")
    def nd_security_level(self) -> Optional[int]:
        """
        Neighbor discovery security level (0 - 7; 0 = least secure, default = 0).
        """
        return pulumi.get(self, "nd_security_level")

    @property
    @pulumi.getter(name="ndTimestampDelta")
    def nd_timestamp_delta(self) -> Optional[int]:
        """
        Neighbor discovery timestamp delta value (1 - 3600 sec; default = 300).
        """
        return pulumi.get(self, "nd_timestamp_delta")

    @property
    @pulumi.getter(name="ndTimestampFuzz")
    def nd_timestamp_fuzz(self) -> Optional[int]:
        """
        Neighbor discovery timestamp fuzz factor (1 - 60 sec; default = 1).
        """
        return pulumi.get(self, "nd_timestamp_fuzz")

    @property
    @pulumi.getter(name="raSendMtu")
    def ra_send_mtu(self) -> Optional[str]:
        """
        Enable/disable sending link MTU in RA packet. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ra_send_mtu")

    @property
    @pulumi.getter(name="uniqueAutoconfAddr")
    def unique_autoconf_addr(self) -> Optional[str]:
        """
        Enable/disable unique auto config address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "unique_autoconf_addr")

    @property
    @pulumi.getter(name="vrip6LinkLocal")
    def vrip6_link_local(self) -> Optional[str]:
        """
        Link-local IPv6 address of virtual router.
        """
        return pulumi.get(self, "vrip6_link_local")

    @property
    @pulumi.getter
    def vrrp6s(self) -> Optional[Sequence['outputs.InterfaceIpv6Vrrp6']]:
        """
        IPv6 VRRP configuration. The structure of `vrrp6` block is documented below.

        The `ip6_extra_addr` block supports:
        """
        return pulumi.get(self, "vrrp6s")

    @property
    @pulumi.getter(name="vrrpVirtualMac6")
    def vrrp_virtual_mac6(self) -> Optional[str]:
        """
        Enable/disable virtual MAC for VRRP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vrrp_virtual_mac6")


@pulumi.output_type
class InterfaceIpv6Dhcp6IapdList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "prefixHint":
            suggest = "prefix_hint"
        elif key == "prefixHintPlt":
            suggest = "prefix_hint_plt"
        elif key == "prefixHintVlt":
            suggest = "prefix_hint_vlt"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceIpv6Dhcp6IapdList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceIpv6Dhcp6IapdList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceIpv6Dhcp6IapdList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iaid: Optional[int] = None,
                 prefix_hint: Optional[str] = None,
                 prefix_hint_plt: Optional[int] = None,
                 prefix_hint_vlt: Optional[int] = None):
        """
        :param int iaid: Identity association identifier.
        :param str prefix_hint: DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        :param int prefix_hint_plt: DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        :param int prefix_hint_vlt: DHCPv6 prefix hint valid life time (sec).
               
               The `vrrp6` block supports:
        """
        if iaid is not None:
            pulumi.set(__self__, "iaid", iaid)
        if prefix_hint is not None:
            pulumi.set(__self__, "prefix_hint", prefix_hint)
        if prefix_hint_plt is not None:
            pulumi.set(__self__, "prefix_hint_plt", prefix_hint_plt)
        if prefix_hint_vlt is not None:
            pulumi.set(__self__, "prefix_hint_vlt", prefix_hint_vlt)

    @property
    @pulumi.getter
    def iaid(self) -> Optional[int]:
        """
        Identity association identifier.
        """
        return pulumi.get(self, "iaid")

    @property
    @pulumi.getter(name="prefixHint")
    def prefix_hint(self) -> Optional[str]:
        """
        DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        """
        return pulumi.get(self, "prefix_hint")

    @property
    @pulumi.getter(name="prefixHintPlt")
    def prefix_hint_plt(self) -> Optional[int]:
        """
        DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        """
        return pulumi.get(self, "prefix_hint_plt")

    @property
    @pulumi.getter(name="prefixHintVlt")
    def prefix_hint_vlt(self) -> Optional[int]:
        """
        DHCPv6 prefix hint valid life time (sec).

        The `vrrp6` block supports:
        """
        return pulumi.get(self, "prefix_hint_vlt")


@pulumi.output_type
class InterfaceIpv6Ip6DelegatedPrefixList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autonomousFlag":
            suggest = "autonomous_flag"
        elif key == "delegatedPrefixIaid":
            suggest = "delegated_prefix_iaid"
        elif key == "onlinkFlag":
            suggest = "onlink_flag"
        elif key == "prefixId":
            suggest = "prefix_id"
        elif key == "rdnssService":
            suggest = "rdnss_service"
        elif key == "upstreamInterface":
            suggest = "upstream_interface"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceIpv6Ip6DelegatedPrefixList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceIpv6Ip6DelegatedPrefixList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceIpv6Ip6DelegatedPrefixList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autonomous_flag: Optional[str] = None,
                 delegated_prefix_iaid: Optional[int] = None,
                 onlink_flag: Optional[str] = None,
                 prefix_id: Optional[int] = None,
                 rdnss: Optional[str] = None,
                 rdnss_service: Optional[str] = None,
                 subnet: Optional[str] = None,
                 upstream_interface: Optional[str] = None):
        """
        :param str autonomous_flag: Enable/disable the autonomous flag. Valid values: `enable`, `disable`.
        :param int delegated_prefix_iaid: IAID of obtained delegated-prefix from the upstream interface.
        :param str onlink_flag: Enable/disable the onlink flag. Valid values: `enable`, `disable`.
        :param int prefix_id: Prefix ID.
        :param str rdnss: Recursive DNS server option.
               
               The `dhcp6_iapd_list` block supports:
        :param str rdnss_service: Recursive DNS service option. Valid values: `delegated`, `default`, `specify`.
        :param str subnet: Add subnet ID to routing prefix.
        :param str upstream_interface: Name of the interface that provides delegated information.
        """
        if autonomous_flag is not None:
            pulumi.set(__self__, "autonomous_flag", autonomous_flag)
        if delegated_prefix_iaid is not None:
            pulumi.set(__self__, "delegated_prefix_iaid", delegated_prefix_iaid)
        if onlink_flag is not None:
            pulumi.set(__self__, "onlink_flag", onlink_flag)
        if prefix_id is not None:
            pulumi.set(__self__, "prefix_id", prefix_id)
        if rdnss is not None:
            pulumi.set(__self__, "rdnss", rdnss)
        if rdnss_service is not None:
            pulumi.set(__self__, "rdnss_service", rdnss_service)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if upstream_interface is not None:
            pulumi.set(__self__, "upstream_interface", upstream_interface)

    @property
    @pulumi.getter(name="autonomousFlag")
    def autonomous_flag(self) -> Optional[str]:
        """
        Enable/disable the autonomous flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "autonomous_flag")

    @property
    @pulumi.getter(name="delegatedPrefixIaid")
    def delegated_prefix_iaid(self) -> Optional[int]:
        """
        IAID of obtained delegated-prefix from the upstream interface.
        """
        return pulumi.get(self, "delegated_prefix_iaid")

    @property
    @pulumi.getter(name="onlinkFlag")
    def onlink_flag(self) -> Optional[str]:
        """
        Enable/disable the onlink flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "onlink_flag")

    @property
    @pulumi.getter(name="prefixId")
    def prefix_id(self) -> Optional[int]:
        """
        Prefix ID.
        """
        return pulumi.get(self, "prefix_id")

    @property
    @pulumi.getter
    def rdnss(self) -> Optional[str]:
        """
        Recursive DNS server option.

        The `dhcp6_iapd_list` block supports:
        """
        return pulumi.get(self, "rdnss")

    @property
    @pulumi.getter(name="rdnssService")
    def rdnss_service(self) -> Optional[str]:
        """
        Recursive DNS service option. Valid values: `delegated`, `default`, `specify`.
        """
        return pulumi.get(self, "rdnss_service")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        """
        Add subnet ID to routing prefix.
        """
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="upstreamInterface")
    def upstream_interface(self) -> Optional[str]:
        """
        Name of the interface that provides delegated information.
        """
        return pulumi.get(self, "upstream_interface")


@pulumi.output_type
class InterfaceIpv6Ip6ExtraAddr(dict):
    def __init__(__self__, *,
                 prefix: Optional[str] = None):
        """
        :param str prefix: IPv6 prefix.
        """
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class InterfaceIpv6Ip6PrefixList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autonomousFlag":
            suggest = "autonomous_flag"
        elif key == "onlinkFlag":
            suggest = "onlink_flag"
        elif key == "preferredLifeTime":
            suggest = "preferred_life_time"
        elif key == "validLifeTime":
            suggest = "valid_life_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceIpv6Ip6PrefixList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceIpv6Ip6PrefixList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceIpv6Ip6PrefixList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autonomous_flag: Optional[str] = None,
                 dnssls: Optional[Sequence['outputs.InterfaceIpv6Ip6PrefixListDnssl']] = None,
                 onlink_flag: Optional[str] = None,
                 preferred_life_time: Optional[int] = None,
                 prefix: Optional[str] = None,
                 rdnss: Optional[str] = None,
                 valid_life_time: Optional[int] = None):
        """
        :param str autonomous_flag: Enable/disable the autonomous flag. Valid values: `enable`, `disable`.
        :param Sequence['InterfaceIpv6Ip6PrefixListDnsslArgs'] dnssls: DNS search list option. The structure of `dnssl` block is documented below.
        :param str onlink_flag: Enable/disable the onlink flag. Valid values: `enable`, `disable`.
        :param int preferred_life_time: Preferred life time (sec).
        :param str prefix: IPv6 prefix.
        :param str rdnss: Recursive DNS server option.
               
               The `dhcp6_iapd_list` block supports:
        :param int valid_life_time: Valid life time (sec).
        """
        if autonomous_flag is not None:
            pulumi.set(__self__, "autonomous_flag", autonomous_flag)
        if dnssls is not None:
            pulumi.set(__self__, "dnssls", dnssls)
        if onlink_flag is not None:
            pulumi.set(__self__, "onlink_flag", onlink_flag)
        if preferred_life_time is not None:
            pulumi.set(__self__, "preferred_life_time", preferred_life_time)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if rdnss is not None:
            pulumi.set(__self__, "rdnss", rdnss)
        if valid_life_time is not None:
            pulumi.set(__self__, "valid_life_time", valid_life_time)

    @property
    @pulumi.getter(name="autonomousFlag")
    def autonomous_flag(self) -> Optional[str]:
        """
        Enable/disable the autonomous flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "autonomous_flag")

    @property
    @pulumi.getter
    def dnssls(self) -> Optional[Sequence['outputs.InterfaceIpv6Ip6PrefixListDnssl']]:
        """
        DNS search list option. The structure of `dnssl` block is documented below.
        """
        return pulumi.get(self, "dnssls")

    @property
    @pulumi.getter(name="onlinkFlag")
    def onlink_flag(self) -> Optional[str]:
        """
        Enable/disable the onlink flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "onlink_flag")

    @property
    @pulumi.getter(name="preferredLifeTime")
    def preferred_life_time(self) -> Optional[int]:
        """
        Preferred life time (sec).
        """
        return pulumi.get(self, "preferred_life_time")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def rdnss(self) -> Optional[str]:
        """
        Recursive DNS server option.

        The `dhcp6_iapd_list` block supports:
        """
        return pulumi.get(self, "rdnss")

    @property
    @pulumi.getter(name="validLifeTime")
    def valid_life_time(self) -> Optional[int]:
        """
        Valid life time (sec).
        """
        return pulumi.get(self, "valid_life_time")


@pulumi.output_type
class InterfaceIpv6Ip6PrefixListDnssl(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None):
        """
        :param str domain: Domain name.
               
               The `ip6_delegated_prefix_list` block supports:
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Domain name.

        The `ip6_delegated_prefix_list` block supports:
        """
        return pulumi.get(self, "domain")


@pulumi.output_type
class InterfaceIpv6Vrrp6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptMode":
            suggest = "accept_mode"
        elif key == "advInterval":
            suggest = "adv_interval"
        elif key == "ignoreDefaultRoute":
            suggest = "ignore_default_route"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceIpv6Vrrp6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceIpv6Vrrp6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceIpv6Vrrp6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_mode: Optional[str] = None,
                 adv_interval: Optional[int] = None,
                 ignore_default_route: Optional[str] = None,
                 preempt: Optional[str] = None,
                 priority: Optional[int] = None,
                 start_time: Optional[int] = None,
                 status: Optional[str] = None,
                 vrdst6: Optional[str] = None,
                 vrgrp: Optional[int] = None,
                 vrid: Optional[int] = None,
                 vrip6: Optional[str] = None):
        """
        :param str accept_mode: Enable/disable accept mode. Valid values: `enable`, `disable`.
        :param int adv_interval: Advertisement interval (1 - 255 seconds).
        :param str ignore_default_route: Enable/disable ignoring of default route when checking destination. Valid values: `enable`, `disable`.
        :param str preempt: Enable/disable preempt mode. Valid values: `enable`, `disable`.
        :param int priority: Priority of learned routes.
        :param int start_time: Startup time (1 - 255 seconds).
        :param str status: Bring the interface up or shut the interface down. Valid values: `up`, `down`.
        :param str vrdst6: Monitor the route to this destination.
        :param int vrgrp: VRRP group ID (1 - 65535).
        :param int vrid: Virtual router identifier (1 - 255).
        :param str vrip6: IPv6 address of the virtual router.
        """
        if accept_mode is not None:
            pulumi.set(__self__, "accept_mode", accept_mode)
        if adv_interval is not None:
            pulumi.set(__self__, "adv_interval", adv_interval)
        if ignore_default_route is not None:
            pulumi.set(__self__, "ignore_default_route", ignore_default_route)
        if preempt is not None:
            pulumi.set(__self__, "preempt", preempt)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vrdst6 is not None:
            pulumi.set(__self__, "vrdst6", vrdst6)
        if vrgrp is not None:
            pulumi.set(__self__, "vrgrp", vrgrp)
        if vrid is not None:
            pulumi.set(__self__, "vrid", vrid)
        if vrip6 is not None:
            pulumi.set(__self__, "vrip6", vrip6)

    @property
    @pulumi.getter(name="acceptMode")
    def accept_mode(self) -> Optional[str]:
        """
        Enable/disable accept mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "accept_mode")

    @property
    @pulumi.getter(name="advInterval")
    def adv_interval(self) -> Optional[int]:
        """
        Advertisement interval (1 - 255 seconds).
        """
        return pulumi.get(self, "adv_interval")

    @property
    @pulumi.getter(name="ignoreDefaultRoute")
    def ignore_default_route(self) -> Optional[str]:
        """
        Enable/disable ignoring of default route when checking destination. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ignore_default_route")

    @property
    @pulumi.getter
    def preempt(self) -> Optional[str]:
        """
        Enable/disable preempt mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "preempt")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Priority of learned routes.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        """
        Startup time (1 - 255 seconds).
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Bring the interface up or shut the interface down. Valid values: `up`, `down`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vrdst6(self) -> Optional[str]:
        """
        Monitor the route to this destination.
        """
        return pulumi.get(self, "vrdst6")

    @property
    @pulumi.getter
    def vrgrp(self) -> Optional[int]:
        """
        VRRP group ID (1 - 65535).
        """
        return pulumi.get(self, "vrgrp")

    @property
    @pulumi.getter
    def vrid(self) -> Optional[int]:
        """
        Virtual router identifier (1 - 255).
        """
        return pulumi.get(self, "vrid")

    @property
    @pulumi.getter
    def vrip6(self) -> Optional[str]:
        """
        IPv6 address of the virtual router.
        """
        return pulumi.get(self, "vrip6")


@pulumi.output_type
class InterfaceManagedDevice(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Managed dev identifier.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Managed dev identifier.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InterfaceMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        """
        :param str interface_name: Physical interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class InterfaceSecondaryip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "haPriority":
            suggest = "ha_priority"
        elif key == "pingServStatus":
            suggest = "ping_serv_status"
        elif key == "secipRelayIp":
            suggest = "secip_relay_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceSecondaryip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceSecondaryip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceSecondaryip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowaccess: Optional[str] = None,
                 detectprotocol: Optional[str] = None,
                 detectserver: Optional[str] = None,
                 gwdetect: Optional[str] = None,
                 ha_priority: Optional[int] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 ping_serv_status: Optional[int] = None,
                 secip_relay_ip: Optional[str] = None):
        """
        :param str allowaccess: Management access settings for the secondary IP address.
        :param str detectprotocol: Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
        :param str detectserver: Gateway's ping server for this IP.
        :param str gwdetect: Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
        :param int ha_priority: HA election priority for the PING server.
        :param int id: ID.
        :param str ip: Secondary IP address of the interface.
        :param int ping_serv_status: PING server status.
        :param str secip_relay_ip: DHCP relay IP address.
        """
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if detectprotocol is not None:
            pulumi.set(__self__, "detectprotocol", detectprotocol)
        if detectserver is not None:
            pulumi.set(__self__, "detectserver", detectserver)
        if gwdetect is not None:
            pulumi.set(__self__, "gwdetect", gwdetect)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ping_serv_status is not None:
            pulumi.set(__self__, "ping_serv_status", ping_serv_status)
        if secip_relay_ip is not None:
            pulumi.set(__self__, "secip_relay_ip", secip_relay_ip)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[str]:
        """
        Management access settings for the secondary IP address.
        """
        return pulumi.get(self, "allowaccess")

    @property
    @pulumi.getter
    def detectprotocol(self) -> Optional[str]:
        """
        Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
        """
        return pulumi.get(self, "detectprotocol")

    @property
    @pulumi.getter
    def detectserver(self) -> Optional[str]:
        """
        Gateway's ping server for this IP.
        """
        return pulumi.get(self, "detectserver")

    @property
    @pulumi.getter
    def gwdetect(self) -> Optional[str]:
        """
        Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gwdetect")

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[int]:
        """
        HA election priority for the PING server.
        """
        return pulumi.get(self, "ha_priority")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        Secondary IP address of the interface.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="pingServStatus")
    def ping_serv_status(self) -> Optional[int]:
        """
        PING server status.
        """
        return pulumi.get(self, "ping_serv_status")

    @property
    @pulumi.getter(name="secipRelayIp")
    def secip_relay_ip(self) -> Optional[str]:
        """
        DHCP relay IP address.
        """
        return pulumi.get(self, "secip_relay_ip")


@pulumi.output_type
class InterfaceSecurityGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Names of user groups that can authenticate with the captive portal.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Names of user groups that can authenticate with the captive portal.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InterfaceTagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.InterfaceTaggingTag']] = None):
        """
        :param str category: Tag category.
        :param str name: Tagging entry name.
        :param Sequence['InterfaceTaggingTagArgs'] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Tagging entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.InterfaceTaggingTag']]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class InterfaceTaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Tag name.
               
               The `ipv6` block supports:
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Tag name.

        The `ipv6` block supports:
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class InterfaceVrrp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptMode":
            suggest = "accept_mode"
        elif key == "advInterval":
            suggest = "adv_interval"
        elif key == "ignoreDefaultRoute":
            suggest = "ignore_default_route"
        elif key == "proxyArps":
            suggest = "proxy_arps"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "vrdstPriority":
            suggest = "vrdst_priority"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceVrrp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceVrrp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceVrrp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_mode: Optional[str] = None,
                 adv_interval: Optional[int] = None,
                 ignore_default_route: Optional[str] = None,
                 preempt: Optional[str] = None,
                 priority: Optional[int] = None,
                 proxy_arps: Optional[Sequence['outputs.InterfaceVrrpProxyArp']] = None,
                 start_time: Optional[int] = None,
                 status: Optional[str] = None,
                 version: Optional[str] = None,
                 vrdst: Optional[str] = None,
                 vrdst_priority: Optional[int] = None,
                 vrgrp: Optional[int] = None,
                 vrid: Optional[int] = None,
                 vrip: Optional[str] = None):
        """
        :param str accept_mode: Enable/disable accept mode. Valid values: `enable`, `disable`.
        :param int adv_interval: Advertisement interval (1 - 255 seconds).
        :param str ignore_default_route: Enable/disable ignoring of default route when checking destination. Valid values: `enable`, `disable`.
        :param str preempt: Enable/disable preempt mode. Valid values: `enable`, `disable`.
        :param int priority: Priority of the virtual router (1 - 255).
        :param Sequence['InterfaceVrrpProxyArpArgs'] proxy_arps: VRRP Proxy ARP configuration. The structure of `proxy_arp` block is documented below.
        :param int start_time: Startup time (1 - 255 seconds).
        :param str status: Enable/disable this VRRP configuration. Valid values: `enable`, `disable`.
        :param str version: VRRP version. Valid values: `2`, `3`.
        :param str vrdst: Monitor the route to this destination.
        :param int vrdst_priority: Priority of the virtual router when the virtual router destination becomes unreachable (0 - 254).
        :param int vrgrp: VRRP group ID (1 - 65535).
        :param int vrid: Virtual router identifier (1 - 255).
        :param str vrip: IP address of the virtual router.
        """
        if accept_mode is not None:
            pulumi.set(__self__, "accept_mode", accept_mode)
        if adv_interval is not None:
            pulumi.set(__self__, "adv_interval", adv_interval)
        if ignore_default_route is not None:
            pulumi.set(__self__, "ignore_default_route", ignore_default_route)
        if preempt is not None:
            pulumi.set(__self__, "preempt", preempt)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if proxy_arps is not None:
            pulumi.set(__self__, "proxy_arps", proxy_arps)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vrdst is not None:
            pulumi.set(__self__, "vrdst", vrdst)
        if vrdst_priority is not None:
            pulumi.set(__self__, "vrdst_priority", vrdst_priority)
        if vrgrp is not None:
            pulumi.set(__self__, "vrgrp", vrgrp)
        if vrid is not None:
            pulumi.set(__self__, "vrid", vrid)
        if vrip is not None:
            pulumi.set(__self__, "vrip", vrip)

    @property
    @pulumi.getter(name="acceptMode")
    def accept_mode(self) -> Optional[str]:
        """
        Enable/disable accept mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "accept_mode")

    @property
    @pulumi.getter(name="advInterval")
    def adv_interval(self) -> Optional[int]:
        """
        Advertisement interval (1 - 255 seconds).
        """
        return pulumi.get(self, "adv_interval")

    @property
    @pulumi.getter(name="ignoreDefaultRoute")
    def ignore_default_route(self) -> Optional[str]:
        """
        Enable/disable ignoring of default route when checking destination. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ignore_default_route")

    @property
    @pulumi.getter
    def preempt(self) -> Optional[str]:
        """
        Enable/disable preempt mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "preempt")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Priority of the virtual router (1 - 255).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="proxyArps")
    def proxy_arps(self) -> Optional[Sequence['outputs.InterfaceVrrpProxyArp']]:
        """
        VRRP Proxy ARP configuration. The structure of `proxy_arp` block is documented below.
        """
        return pulumi.get(self, "proxy_arps")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        """
        Startup time (1 - 255 seconds).
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable this VRRP configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        VRRP version. Valid values: `2`, `3`.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def vrdst(self) -> Optional[str]:
        """
        Monitor the route to this destination.
        """
        return pulumi.get(self, "vrdst")

    @property
    @pulumi.getter(name="vrdstPriority")
    def vrdst_priority(self) -> Optional[int]:
        """
        Priority of the virtual router when the virtual router destination becomes unreachable (0 - 254).
        """
        return pulumi.get(self, "vrdst_priority")

    @property
    @pulumi.getter
    def vrgrp(self) -> Optional[int]:
        """
        VRRP group ID (1 - 65535).
        """
        return pulumi.get(self, "vrgrp")

    @property
    @pulumi.getter
    def vrid(self) -> Optional[int]:
        """
        Virtual router identifier (1 - 255).
        """
        return pulumi.get(self, "vrid")

    @property
    @pulumi.getter
    def vrip(self) -> Optional[str]:
        """
        IP address of the virtual router.
        """
        return pulumi.get(self, "vrip")


@pulumi.output_type
class InterfaceVrrpProxyArp(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 ip: Optional[str] = None):
        """
        :param int id: ID.
        :param str ip: Set IP addresses of proxy ARP.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        Set IP addresses of proxy ARP.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class IpamPool(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 subnet: Optional[str] = None):
        """
        :param str description: Description.
        :param str name: IPAM pool name.
        :param str subnet: Configure IPAM pool subnet, Class A - Class B subnet.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        IPAM pool name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        """
        Configure IPAM pool subnet, Class A - Class B subnet.
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class IpamRule(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 devices: Optional[Sequence['outputs.IpamRuleDevice']] = None,
                 dhcp: Optional[str] = None,
                 interfaces: Optional[Sequence['outputs.IpamRuleInterface']] = None,
                 name: Optional[str] = None,
                 pools: Optional[Sequence['outputs.IpamRulePool']] = None,
                 role: Optional[str] = None):
        """
        :param str description: Description.
        :param Sequence['IpamRuleDeviceArgs'] devices: Configure serial number or wildcard of Fortigate to match. The structure of `device` block is documented below.
        :param str dhcp: Enable/disable DHCP server for matching IPAM interfaces. Valid values: `enable`, `disable`.
        :param Sequence['IpamRuleInterfaceArgs'] interfaces: Configure name or wildcard of interface to match. The structure of `interface` block is documented below.
        :param str name: IPAM rule name.
        :param Sequence['IpamRulePoolArgs'] pools: Configure name of IPAM pool to use. The structure of `pool` block is documented below.
        :param str role: Configure role of interface to match. Valid values: `any`, `lan`, `wan`, `dmz`, `undefined`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pools is not None:
            pulumi.set(__self__, "pools", pools)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.IpamRuleDevice']]:
        """
        Configure serial number or wildcard of Fortigate to match. The structure of `device` block is documented below.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[str]:
        """
        Enable/disable DHCP server for matching IPAM interfaces. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp")

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.IpamRuleInterface']]:
        """
        Configure name or wildcard of interface to match. The structure of `interface` block is documented below.
        """
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        IPAM rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pools(self) -> Optional[Sequence['outputs.IpamRulePool']]:
        """
        Configure name of IPAM pool to use. The structure of `pool` block is documented below.
        """
        return pulumi.get(self, "pools")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Configure role of interface to match. Valid values: `any`, `lan`, `wan`, `dmz`, `undefined`.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class IpamRuleDevice(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Fortigate serial number or wildcard.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Fortigate serial number or wildcard.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class IpamRuleInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Interface name or wildcard.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface name or wildcard.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class IpamRulePool(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Ipam pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Ipam pool name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class IpsecaggregateMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tunnelName":
            suggest = "tunnel_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpsecaggregateMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpsecaggregateMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpsecaggregateMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tunnel_name: Optional[str] = None):
        """
        :param str tunnel_name: Tunnel name.
        """
        if tunnel_name is not None:
            pulumi.set(__self__, "tunnel_name", tunnel_name)

    @property
    @pulumi.getter(name="tunnelName")
    def tunnel_name(self) -> Optional[str]:
        """
        Tunnel name.
        """
        return pulumi.get(self, "tunnel_name")


@pulumi.output_type
class LinkmonitorRoute(dict):
    def __init__(__self__, *,
                 subnet: Optional[str] = None):
        """
        :param str subnet: IP and netmask (x.x.x.x/y).
        """
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        """
        IP and netmask (x.x.x.x/y).
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class LinkmonitorServer(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None):
        """
        :param str address: Server address.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Server address.
        """
        return pulumi.get(self, "address")


@pulumi.output_type
class LinkmonitorServerList(dict):
    def __init__(__self__, *,
                 dst: Optional[str] = None,
                 id: Optional[int] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 weight: Optional[int] = None):
        """
        :param str dst: IP address of the server to be monitored.
        :param int id: Server ID.
        :param int port: Port number of the traffic to be used to monitor the server.
        :param str protocol: Protocols used to monitor the server.
        :param int weight: Weight of the monitor to this dst (0 - 255).
        """
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def dst(self) -> Optional[str]:
        """
        IP address of the server to be monitored.
        """
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Server ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port number of the traffic to be used to monitor the server.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocols used to monitor the server.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight of the monitor to this dst (0 - 255).
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class MobiletunnelNetwork(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 prefix: Optional[str] = None):
        """
        :param int id: Network entry ID.
        :param str interface: Select the associated interface name from available options.
        :param str prefix: Class IP and Netmask with correction (Format:xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx or xxx.xxx.xxx.xxx/x).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Network entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Select the associated interface name from available options.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Class IP and Netmask with correction (Format:xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx or xxx.xxx.xxx.xxx/x).
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class Nat64SecondaryPrefix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nat64Prefix":
            suggest = "nat64_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Nat64SecondaryPrefix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Nat64SecondaryPrefix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Nat64SecondaryPrefix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 nat64_prefix: Optional[str] = None):
        """
        :param str name: NAT64 prefix name.
        :param str nat64_prefix: NAT64 prefix.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat64_prefix is not None:
            pulumi.set(__self__, "nat64_prefix", nat64_prefix)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        NAT64 prefix name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nat64Prefix")
    def nat64_prefix(self) -> Optional[str]:
        """
        NAT64 prefix.
        """
        return pulumi.get(self, "nat64_prefix")


@pulumi.output_type
class NdproxyMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NdproxyMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NdproxyMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NdproxyMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        """
        :param str interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class NetflowCollector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "collectorIp":
            suggest = "collector_ip"
        elif key == "collectorPort":
            suggest = "collector_port"
        elif key == "interfaceSelectMethod":
            suggest = "interface_select_method"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetflowCollector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetflowCollector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetflowCollector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collector_ip: Optional[str] = None,
                 collector_port: Optional[int] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 interface_select_method: Optional[str] = None,
                 source_ip: Optional[str] = None):
        """
        :param str collector_ip: Collector IP.
        :param int collector_port: NetFlow collector port number.
        :param int id: ID.
        :param str interface: Specify outgoing interface to reach server.
        :param str interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param str source_ip: Source IP address for communication with the NetFlow agent.
        """
        if collector_ip is not None:
            pulumi.set(__self__, "collector_ip", collector_ip)
        if collector_port is not None:
            pulumi.set(__self__, "collector_port", collector_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> Optional[str]:
        """
        Collector IP.
        """
        return pulumi.get(self, "collector_ip")

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> Optional[int]:
        """
        NetFlow collector port number.
        """
        return pulumi.get(self, "collector_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        """
        Source IP address for communication with the NetFlow agent.
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class NpuPriorityProtocol(dict):
    def __init__(__self__, *,
                 bfd: Optional[str] = None,
                 bgp: Optional[str] = None,
                 slbc: Optional[str] = None):
        """
        :param str bfd: Enable/disable NPU BFD priority protocol. Valid values: `enable`, `disable`.
        :param str bgp: Enable/disable NPU BGP priority protocol. Valid values: `enable`, `disable`.
        :param str slbc: Enable/disable NPU SLBC priority protocol. Valid values: `enable`, `disable`.
        """
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if bgp is not None:
            pulumi.set(__self__, "bgp", bgp)
        if slbc is not None:
            pulumi.set(__self__, "slbc", slbc)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[str]:
        """
        Enable/disable NPU BFD priority protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter
    def bgp(self) -> Optional[str]:
        """
        Enable/disable NPU BGP priority protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bgp")

    @property
    @pulumi.getter
    def slbc(self) -> Optional[str]:
        """
        Enable/disable NPU SLBC priority protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "slbc")


@pulumi.output_type
class NtpInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NtpInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NtpInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NtpInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        """
        :param str interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class NtpNtpserver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceSelectMethod":
            suggest = "interface_select_method"
        elif key == "ipType":
            suggest = "ip_type"
        elif key == "keyId":
            suggest = "key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NtpNtpserver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NtpNtpserver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NtpNtpserver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 interface_select_method: Optional[str] = None,
                 ip_type: Optional[str] = None,
                 key: Optional[str] = None,
                 key_id: Optional[int] = None,
                 ntpv3: Optional[str] = None,
                 server: Optional[str] = None):
        """
        :param str authentication: Enable/disable MD5/SHA1 authentication. Valid values: `enable`, `disable`.
        :param int id: NTP server ID.
        :param str interface: Specify outgoing interface to reach server.
        :param str interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param str ip_type: Choose to connect to IPv4 or/and IPv6 NTP server. Valid values: `IPv6`, `IPv4`, `Both`.
        :param str key: Key for MD5/SHA1 authentication.
        :param int key_id: Key ID for authentication.
        :param str ntpv3: Enable to use NTPv3 instead of NTPv4. Valid values: `enable`, `disable`.
        :param str server: IP address or hostname of the NTP Server.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ip_type is not None:
            pulumi.set(__self__, "ip_type", ip_type)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if ntpv3 is not None:
            pulumi.set(__self__, "ntpv3", ntpv3)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        """
        Enable/disable MD5/SHA1 authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        NTP server ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> Optional[str]:
        """
        Choose to connect to IPv4 or/and IPv6 NTP server. Valid values: `IPv6`, `IPv4`, `Both`.
        """
        return pulumi.get(self, "ip_type")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key for MD5/SHA1 authentication.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[int]:
        """
        Key ID for authentication.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter
    def ntpv3(self) -> Optional[str]:
        """
        Enable to use NTPv3 instead of NTPv4. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ntpv3")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        IP address or hostname of the NTP Server.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class ObjecttaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PcpserverPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowOpcode":
            suggest = "allow_opcode"
        elif key == "announcementCount":
            suggest = "announcement_count"
        elif key == "arpReply":
            suggest = "arp_reply"
        elif key == "clientMappingLimit":
            suggest = "client_mapping_limit"
        elif key == "clientSubnets":
            suggest = "client_subnets"
        elif key == "extIntf":
            suggest = "ext_intf"
        elif key == "intlIntfs":
            suggest = "intl_intfs"
        elif key == "mappingFilterLimit":
            suggest = "mapping_filter_limit"
        elif key == "maximalLifetime":
            suggest = "maximal_lifetime"
        elif key == "minimalLifetime":
            suggest = "minimal_lifetime"
        elif key == "multicastAnnouncement":
            suggest = "multicast_announcement"
        elif key == "recycleDelay":
            suggest = "recycle_delay"
        elif key == "thirdParty":
            suggest = "third_party"
        elif key == "thirdPartySubnets":
            suggest = "third_party_subnets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PcpserverPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PcpserverPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PcpserverPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_opcode: Optional[str] = None,
                 announcement_count: Optional[int] = None,
                 arp_reply: Optional[str] = None,
                 client_mapping_limit: Optional[int] = None,
                 client_subnets: Optional[Sequence['outputs.PcpserverPoolClientSubnet']] = None,
                 description: Optional[str] = None,
                 ext_intf: Optional[str] = None,
                 extip: Optional[str] = None,
                 extport: Optional[str] = None,
                 id: Optional[int] = None,
                 intl_intfs: Optional[Sequence['outputs.PcpserverPoolIntlIntf']] = None,
                 mapping_filter_limit: Optional[int] = None,
                 maximal_lifetime: Optional[int] = None,
                 minimal_lifetime: Optional[int] = None,
                 multicast_announcement: Optional[str] = None,
                 name: Optional[str] = None,
                 recycle_delay: Optional[int] = None,
                 third_party: Optional[str] = None,
                 third_party_subnets: Optional[Sequence['outputs.PcpserverPoolThirdPartySubnet']] = None):
        """
        :param str allow_opcode: Allowed PCP opcode. Valid values: `map`, `peer`, `announce`.
        :param int announcement_count: Number of multicast announcements.
        :param str arp_reply: Enable to respond to ARP requests for external IP (default = enable). Valid values: `disable`, `enable`.
        :param int client_mapping_limit: Mapping limit per client (0 - 65535, default = 0, 0 = unlimited).
        :param Sequence['PcpserverPoolClientSubnetArgs'] client_subnets: Subnets from which PCP requests are accepted. The structure of `client_subnet` block is documented below.
        :param str description: Description.
        :param str ext_intf: External interface name.
        :param str extip: IP address or address range on the external interface that you want to map to an address on the internal network.
        :param str extport: Incoming port number range that you want to map to a port number on the internal network.
        :param int id: ID.
        :param Sequence['PcpserverPoolIntlIntfArgs'] intl_intfs: Internal interface name. The structure of `intl_intf` block is documented below.
        :param int mapping_filter_limit: Filter limit per mapping (0 - 5, default = 1).
        :param int maximal_lifetime: Maximal lifetime of a PCP mapping in seconds (3600 - 604800, default = 86400).
        :param int minimal_lifetime: Minimal lifetime of a PCP mapping in seconds (60 - 300, default = 120).
        :param str multicast_announcement: Enable/disable multicast announcements. Valid values: `enable`, `disable`.
        :param str name: PCP pool name.
        :param int recycle_delay: Minimum delay (in seconds) the PCP Server will wait before recycling mappings that have expired (0 - 3600, default = 0).
        :param str third_party: Allow/disallow third party option. Valid values: `allow`, `disallow`.
        :param Sequence['PcpserverPoolThirdPartySubnetArgs'] third_party_subnets: Subnets from which third party requests are accepted. The structure of `third_party_subnet` block is documented below.
        """
        if allow_opcode is not None:
            pulumi.set(__self__, "allow_opcode", allow_opcode)
        if announcement_count is not None:
            pulumi.set(__self__, "announcement_count", announcement_count)
        if arp_reply is not None:
            pulumi.set(__self__, "arp_reply", arp_reply)
        if client_mapping_limit is not None:
            pulumi.set(__self__, "client_mapping_limit", client_mapping_limit)
        if client_subnets is not None:
            pulumi.set(__self__, "client_subnets", client_subnets)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ext_intf is not None:
            pulumi.set(__self__, "ext_intf", ext_intf)
        if extip is not None:
            pulumi.set(__self__, "extip", extip)
        if extport is not None:
            pulumi.set(__self__, "extport", extport)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if intl_intfs is not None:
            pulumi.set(__self__, "intl_intfs", intl_intfs)
        if mapping_filter_limit is not None:
            pulumi.set(__self__, "mapping_filter_limit", mapping_filter_limit)
        if maximal_lifetime is not None:
            pulumi.set(__self__, "maximal_lifetime", maximal_lifetime)
        if minimal_lifetime is not None:
            pulumi.set(__self__, "minimal_lifetime", minimal_lifetime)
        if multicast_announcement is not None:
            pulumi.set(__self__, "multicast_announcement", multicast_announcement)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if recycle_delay is not None:
            pulumi.set(__self__, "recycle_delay", recycle_delay)
        if third_party is not None:
            pulumi.set(__self__, "third_party", third_party)
        if third_party_subnets is not None:
            pulumi.set(__self__, "third_party_subnets", third_party_subnets)

    @property
    @pulumi.getter(name="allowOpcode")
    def allow_opcode(self) -> Optional[str]:
        """
        Allowed PCP opcode. Valid values: `map`, `peer`, `announce`.
        """
        return pulumi.get(self, "allow_opcode")

    @property
    @pulumi.getter(name="announcementCount")
    def announcement_count(self) -> Optional[int]:
        """
        Number of multicast announcements.
        """
        return pulumi.get(self, "announcement_count")

    @property
    @pulumi.getter(name="arpReply")
    def arp_reply(self) -> Optional[str]:
        """
        Enable to respond to ARP requests for external IP (default = enable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "arp_reply")

    @property
    @pulumi.getter(name="clientMappingLimit")
    def client_mapping_limit(self) -> Optional[int]:
        """
        Mapping limit per client (0 - 65535, default = 0, 0 = unlimited).
        """
        return pulumi.get(self, "client_mapping_limit")

    @property
    @pulumi.getter(name="clientSubnets")
    def client_subnets(self) -> Optional[Sequence['outputs.PcpserverPoolClientSubnet']]:
        """
        Subnets from which PCP requests are accepted. The structure of `client_subnet` block is documented below.
        """
        return pulumi.get(self, "client_subnets")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="extIntf")
    def ext_intf(self) -> Optional[str]:
        """
        External interface name.
        """
        return pulumi.get(self, "ext_intf")

    @property
    @pulumi.getter
    def extip(self) -> Optional[str]:
        """
        IP address or address range on the external interface that you want to map to an address on the internal network.
        """
        return pulumi.get(self, "extip")

    @property
    @pulumi.getter
    def extport(self) -> Optional[str]:
        """
        Incoming port number range that you want to map to a port number on the internal network.
        """
        return pulumi.get(self, "extport")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="intlIntfs")
    def intl_intfs(self) -> Optional[Sequence['outputs.PcpserverPoolIntlIntf']]:
        """
        Internal interface name. The structure of `intl_intf` block is documented below.
        """
        return pulumi.get(self, "intl_intfs")

    @property
    @pulumi.getter(name="mappingFilterLimit")
    def mapping_filter_limit(self) -> Optional[int]:
        """
        Filter limit per mapping (0 - 5, default = 1).
        """
        return pulumi.get(self, "mapping_filter_limit")

    @property
    @pulumi.getter(name="maximalLifetime")
    def maximal_lifetime(self) -> Optional[int]:
        """
        Maximal lifetime of a PCP mapping in seconds (3600 - 604800, default = 86400).
        """
        return pulumi.get(self, "maximal_lifetime")

    @property
    @pulumi.getter(name="minimalLifetime")
    def minimal_lifetime(self) -> Optional[int]:
        """
        Minimal lifetime of a PCP mapping in seconds (60 - 300, default = 120).
        """
        return pulumi.get(self, "minimal_lifetime")

    @property
    @pulumi.getter(name="multicastAnnouncement")
    def multicast_announcement(self) -> Optional[str]:
        """
        Enable/disable multicast announcements. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "multicast_announcement")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        PCP pool name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recycleDelay")
    def recycle_delay(self) -> Optional[int]:
        """
        Minimum delay (in seconds) the PCP Server will wait before recycling mappings that have expired (0 - 3600, default = 0).
        """
        return pulumi.get(self, "recycle_delay")

    @property
    @pulumi.getter(name="thirdParty")
    def third_party(self) -> Optional[str]:
        """
        Allow/disallow third party option. Valid values: `allow`, `disallow`.
        """
        return pulumi.get(self, "third_party")

    @property
    @pulumi.getter(name="thirdPartySubnets")
    def third_party_subnets(self) -> Optional[Sequence['outputs.PcpserverPoolThirdPartySubnet']]:
        """
        Subnets from which third party requests are accepted. The structure of `third_party_subnet` block is documented below.
        """
        return pulumi.get(self, "third_party_subnets")


@pulumi.output_type
class PcpserverPoolClientSubnet(dict):
    def __init__(__self__, *,
                 subnet: Optional[str] = None):
        """
        :param str subnet: Client subnets.
        """
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        """
        Client subnets.
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class PcpserverPoolIntlIntf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PcpserverPoolIntlIntf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PcpserverPoolIntlIntf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PcpserverPoolIntlIntf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        """
        :param str interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class PcpserverPoolThirdPartySubnet(dict):
    def __init__(__self__, *,
                 subnet: Optional[str] = None):
        """
        :param str subnet: Third party subnets.
        """
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        """
        Third party subnets.
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class PtpServerInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "delayMechanism":
            suggest = "delay_mechanism"
        elif key == "serverInterfaceName":
            suggest = "server_interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PtpServerInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PtpServerInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PtpServerInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delay_mechanism: Optional[str] = None,
                 id: Optional[int] = None,
                 server_interface_name: Optional[str] = None):
        """
        :param str delay_mechanism: End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
        :param int id: ID.
        :param str server_interface_name: Interface name.
        """
        if delay_mechanism is not None:
            pulumi.set(__self__, "delay_mechanism", delay_mechanism)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_interface_name is not None:
            pulumi.set(__self__, "server_interface_name", server_interface_name)

    @property
    @pulumi.getter(name="delayMechanism")
    def delay_mechanism(self) -> Optional[str]:
        """
        End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
        """
        return pulumi.get(self, "delay_mechanism")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serverInterfaceName")
    def server_interface_name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "server_interface_name")


@pulumi.output_type
class ReplacemsggroupAdmin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupAdmin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupAdmin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupAdmin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupAlertmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupAlertmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupAlertmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupAlertmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupAutomation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupAutomation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupAutomation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupAutomation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag. Valid values: `none`, `text`, `html`.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupCustomMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupCustomMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupCustomMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupCustomMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupDeviceDetectionPortal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupDeviceDetectionPortal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupDeviceDetectionPortal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupDeviceDetectionPortal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupEc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupEc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupEc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupEc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag. Valid values: `none`, `text`, `html`, `wml`.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag. Valid values: `none`, `text`, `html`, `wml`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupFortiguardWf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupFortiguardWf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupFortiguardWf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupFortiguardWf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupFtp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupFtp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupFtp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupFtp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupHttp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupHttp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupHttp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupHttp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupIcap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupIcap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupIcap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupIcap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupMail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupMail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupMail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupMail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupNacQuar(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupNacQuar. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupNacQuar.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupNacQuar.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupNntp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupNntp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupNntp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupNntp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupSpam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupSpam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupSpam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupSpam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupSslvpn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupSslvpn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupSslvpn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupSslvpn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupTrafficQuota(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupTrafficQuota. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupTrafficQuota.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupTrafficQuota.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupUtm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupUtm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupUtm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupUtm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class ReplacemsggroupWebproxy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgType":
            suggest = "msg_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplacemsggroupWebproxy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplacemsggroupWebproxy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplacemsggroupWebproxy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer: Optional[str] = None,
                 format: Optional[str] = None,
                 header: Optional[str] = None,
                 msg_type: Optional[str] = None):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param str msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[str]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[str]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class SamlServiceProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assertionAttributes":
            suggest = "assertion_attributes"
        elif key == "idpEntityId":
            suggest = "idp_entity_id"
        elif key == "idpSingleLogoutUrl":
            suggest = "idp_single_logout_url"
        elif key == "idpSingleSignOnUrl":
            suggest = "idp_single_sign_on_url"
        elif key == "spBindingProtocol":
            suggest = "sp_binding_protocol"
        elif key == "spCert":
            suggest = "sp_cert"
        elif key == "spEntityId":
            suggest = "sp_entity_id"
        elif key == "spPortalUrl":
            suggest = "sp_portal_url"
        elif key == "spSingleLogoutUrl":
            suggest = "sp_single_logout_url"
        elif key == "spSingleSignOnUrl":
            suggest = "sp_single_sign_on_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SamlServiceProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SamlServiceProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SamlServiceProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assertion_attributes: Optional[Sequence['outputs.SamlServiceProviderAssertionAttribute']] = None,
                 idp_entity_id: Optional[str] = None,
                 idp_single_logout_url: Optional[str] = None,
                 idp_single_sign_on_url: Optional[str] = None,
                 name: Optional[str] = None,
                 prefix: Optional[str] = None,
                 sp_binding_protocol: Optional[str] = None,
                 sp_cert: Optional[str] = None,
                 sp_entity_id: Optional[str] = None,
                 sp_portal_url: Optional[str] = None,
                 sp_single_logout_url: Optional[str] = None,
                 sp_single_sign_on_url: Optional[str] = None):
        """
        :param Sequence['SamlServiceProviderAssertionAttributeArgs'] assertion_attributes: Customized SAML attributes to send along with assertion. The structure of `assertion_attributes` block is documented below.
        :param str idp_entity_id: IDP entity ID.
        :param str idp_single_logout_url: IDP single logout URL.
        :param str idp_single_sign_on_url: IDP single sign-on URL.
        :param str name: Name.
        :param str prefix: Prefix.
        :param str sp_binding_protocol: SP binding protocol. Valid values: `post`, `redirect`.
        :param str sp_cert: SP certificate name.
        :param str sp_entity_id: SP entity ID.
        :param str sp_portal_url: SP portal URL.
        :param str sp_single_logout_url: SP single logout URL.
        :param str sp_single_sign_on_url: SP single sign-on URL.
        """
        if assertion_attributes is not None:
            pulumi.set(__self__, "assertion_attributes", assertion_attributes)
        if idp_entity_id is not None:
            pulumi.set(__self__, "idp_entity_id", idp_entity_id)
        if idp_single_logout_url is not None:
            pulumi.set(__self__, "idp_single_logout_url", idp_single_logout_url)
        if idp_single_sign_on_url is not None:
            pulumi.set(__self__, "idp_single_sign_on_url", idp_single_sign_on_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if sp_binding_protocol is not None:
            pulumi.set(__self__, "sp_binding_protocol", sp_binding_protocol)
        if sp_cert is not None:
            pulumi.set(__self__, "sp_cert", sp_cert)
        if sp_entity_id is not None:
            pulumi.set(__self__, "sp_entity_id", sp_entity_id)
        if sp_portal_url is not None:
            pulumi.set(__self__, "sp_portal_url", sp_portal_url)
        if sp_single_logout_url is not None:
            pulumi.set(__self__, "sp_single_logout_url", sp_single_logout_url)
        if sp_single_sign_on_url is not None:
            pulumi.set(__self__, "sp_single_sign_on_url", sp_single_sign_on_url)

    @property
    @pulumi.getter(name="assertionAttributes")
    def assertion_attributes(self) -> Optional[Sequence['outputs.SamlServiceProviderAssertionAttribute']]:
        """
        Customized SAML attributes to send along with assertion. The structure of `assertion_attributes` block is documented below.
        """
        return pulumi.get(self, "assertion_attributes")

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> Optional[str]:
        """
        IDP entity ID.
        """
        return pulumi.get(self, "idp_entity_id")

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> Optional[str]:
        """
        IDP single logout URL.
        """
        return pulumi.get(self, "idp_single_logout_url")

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> Optional[str]:
        """
        IDP single sign-on URL.
        """
        return pulumi.get(self, "idp_single_sign_on_url")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="spBindingProtocol")
    def sp_binding_protocol(self) -> Optional[str]:
        """
        SP binding protocol. Valid values: `post`, `redirect`.
        """
        return pulumi.get(self, "sp_binding_protocol")

    @property
    @pulumi.getter(name="spCert")
    def sp_cert(self) -> Optional[str]:
        """
        SP certificate name.
        """
        return pulumi.get(self, "sp_cert")

    @property
    @pulumi.getter(name="spEntityId")
    def sp_entity_id(self) -> Optional[str]:
        """
        SP entity ID.
        """
        return pulumi.get(self, "sp_entity_id")

    @property
    @pulumi.getter(name="spPortalUrl")
    def sp_portal_url(self) -> Optional[str]:
        """
        SP portal URL.
        """
        return pulumi.get(self, "sp_portal_url")

    @property
    @pulumi.getter(name="spSingleLogoutUrl")
    def sp_single_logout_url(self) -> Optional[str]:
        """
        SP single logout URL.
        """
        return pulumi.get(self, "sp_single_logout_url")

    @property
    @pulumi.getter(name="spSingleSignOnUrl")
    def sp_single_sign_on_url(self) -> Optional[str]:
        """
        SP single sign-on URL.
        """
        return pulumi.get(self, "sp_single_sign_on_url")


@pulumi.output_type
class SamlServiceProviderAssertionAttribute(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str name: Name.
        :param str type: Type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SdnconnectorCompartmentList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdnconnectorCompartmentList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdnconnectorCompartmentList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdnconnectorCompartmentList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None):
        """
        :param str compartment_id: OCI compartment ID.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        """
        OCI compartment ID.
        """
        return pulumi.get(self, "compartment_id")


@pulumi.output_type
class SdnconnectorExternalAccountList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"
        elif key == "regionLists":
            suggest = "region_lists"
        elif key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdnconnectorExternalAccountList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdnconnectorExternalAccountList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdnconnectorExternalAccountList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: Optional[str] = None,
                 region_lists: Optional[Sequence['outputs.SdnconnectorExternalAccountListRegionList']] = None,
                 role_arn: Optional[str] = None):
        """
        :param str external_id: AWS external ID.
        :param Sequence['SdnconnectorExternalAccountListRegionListArgs'] region_lists: AWS region name list. The structure of `region_list` block is documented below.
        :param str role_arn: AWS role ARN to assume.
        """
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if region_lists is not None:
            pulumi.set(__self__, "region_lists", region_lists)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        """
        AWS external ID.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="regionLists")
    def region_lists(self) -> Optional[Sequence['outputs.SdnconnectorExternalAccountListRegionList']]:
        """
        AWS region name list. The structure of `region_list` block is documented below.
        """
        return pulumi.get(self, "region_lists")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        AWS role ARN to assume.
        """
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class SdnconnectorExternalAccountListRegionList(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None):
        """
        :param str region: AWS region name.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        AWS region name.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class SdnconnectorExternalIp(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: External IP name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        External IP name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdnconnectorForwardingRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleName":
            suggest = "rule_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdnconnectorForwardingRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdnconnectorForwardingRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdnconnectorForwardingRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_name: Optional[str] = None,
                 target: Optional[str] = None):
        """
        :param str rule_name: Forwarding rule name.
        :param str target: Target instance name.
        """
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[str]:
        """
        Forwarding rule name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        Target instance name.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class SdnconnectorGcpProjectList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gcpZoneLists":
            suggest = "gcp_zone_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdnconnectorGcpProjectList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdnconnectorGcpProjectList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdnconnectorGcpProjectList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gcp_zone_lists: Optional[Sequence['outputs.SdnconnectorGcpProjectListGcpZoneList']] = None,
                 id: Optional[str] = None):
        """
        :param Sequence['SdnconnectorGcpProjectListGcpZoneListArgs'] gcp_zone_lists: Configure GCP zone list. The structure of `gcp_zone_list` block is documented below.
        :param str id: GCP project ID.
        """
        if gcp_zone_lists is not None:
            pulumi.set(__self__, "gcp_zone_lists", gcp_zone_lists)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="gcpZoneLists")
    def gcp_zone_lists(self) -> Optional[Sequence['outputs.SdnconnectorGcpProjectListGcpZoneList']]:
        """
        Configure GCP zone list. The structure of `gcp_zone_list` block is documented below.
        """
        return pulumi.get(self, "gcp_zone_lists")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        GCP project ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SdnconnectorGcpProjectListGcpZoneList(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: GCP zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        GCP zone name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdnconnectorNic(dict):
    def __init__(__self__, *,
                 ips: Optional[Sequence['outputs.SdnconnectorNicIp']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['SdnconnectorNicIpArgs'] ips: Configure IP configuration. The structure of `ip` block is documented below.
        :param str name: Network interface name.
        """
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ips(self) -> Optional[Sequence['outputs.SdnconnectorNicIp']]:
        """
        Configure IP configuration. The structure of `ip` block is documented below.
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Network interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdnconnectorNicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicIp":
            suggest = "public_ip"
        elif key == "resourceGroup":
            suggest = "resource_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdnconnectorNicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdnconnectorNicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdnconnectorNicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 public_ip: Optional[str] = None,
                 resource_group: Optional[str] = None):
        """
        :param str name: IP configuration name.
        :param str public_ip: Public IP name.
        :param str resource_group: Resource group of Azure public IP.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        IP configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        """
        Public IP name.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        """
        Resource group of Azure public IP.
        """
        return pulumi.get(self, "resource_group")


@pulumi.output_type
class SdnconnectorOciRegionList(dict):
    def __init__(__self__, *,
                 region: Optional[str] = None):
        """
        :param str region: OCI region.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        OCI region.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class SdnconnectorRoute(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Route name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Route name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdnconnectorRouteTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceGroup":
            suggest = "resource_group"
        elif key == "subscriptionId":
            suggest = "subscription_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdnconnectorRouteTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdnconnectorRouteTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdnconnectorRouteTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 resource_group: Optional[str] = None,
                 routes: Optional[Sequence['outputs.SdnconnectorRouteTableRoute']] = None,
                 subscription_id: Optional[str] = None):
        """
        :param str name: Route table name.
        :param str resource_group: Resource group of Azure route table.
        :param Sequence['SdnconnectorRouteTableRouteArgs'] routes: Configure Azure route. The structure of `route` block is documented below.
        :param str subscription_id: Subscription ID of Azure route table.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Route table name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[str]:
        """
        Resource group of Azure route table.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def routes(self) -> Optional[Sequence['outputs.SdnconnectorRouteTableRoute']]:
        """
        Configure Azure route. The structure of `route` block is documented below.
        """
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[str]:
        """
        Subscription ID of Azure route table.
        """
        return pulumi.get(self, "subscription_id")


@pulumi.output_type
class SdnconnectorRouteTableRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextHop":
            suggest = "next_hop"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdnconnectorRouteTableRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdnconnectorRouteTableRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdnconnectorRouteTableRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 next_hop: Optional[str] = None):
        """
        :param str name: Route name.
        :param str next_hop: Next hop address.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Route name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[str]:
        """
        Next hop address.
        """
        return pulumi.get(self, "next_hop")


@pulumi.output_type
class SdnconnectorServerList(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None):
        """
        :param str ip: IPv4 address.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IPv4 address.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class SdwanDuplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packetDeDuplication":
            suggest = "packet_de_duplication"
        elif key == "packetDuplication":
            suggest = "packet_duplication"
        elif key == "serviceIds":
            suggest = "service_ids"
        elif key == "slaMatchService":
            suggest = "sla_match_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdwanDuplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdwanDuplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdwanDuplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dstaddr6s: Optional[Sequence['outputs.SdwanDuplicationDstaddr6']] = None,
                 dstaddrs: Optional[Sequence['outputs.SdwanDuplicationDstaddr']] = None,
                 dstintfs: Optional[Sequence['outputs.SdwanDuplicationDstintf']] = None,
                 id: Optional[int] = None,
                 packet_de_duplication: Optional[str] = None,
                 packet_duplication: Optional[str] = None,
                 service_ids: Optional[Sequence['outputs.SdwanDuplicationServiceId']] = None,
                 services: Optional[Sequence['outputs.SdwanDuplicationService']] = None,
                 sla_match_service: Optional[str] = None,
                 srcaddr6s: Optional[Sequence['outputs.SdwanDuplicationSrcaddr6']] = None,
                 srcaddrs: Optional[Sequence['outputs.SdwanDuplicationSrcaddr']] = None,
                 srcintfs: Optional[Sequence['outputs.SdwanDuplicationSrcintf']] = None):
        """
        :param Sequence['SdwanDuplicationDstaddr6Args'] dstaddr6s: Destination address6 or address6 group names. The structure of `dstaddr6` block is documented below.
        :param Sequence['SdwanDuplicationDstaddrArgs'] dstaddrs: Destination address or address group names. The structure of `dstaddr` block is documented below.
        :param Sequence['SdwanDuplicationDstintfArgs'] dstintfs: Outgoing (egress) interfaces or zones. The structure of `dstintf` block is documented below.
        :param int id: Duplication rule ID (1 - 255).
        :param str packet_de_duplication: Enable/disable discarding of packets that have been duplicated. Valid values: `enable`, `disable`.
        :param str packet_duplication: Configure packet duplication method. Valid values: `disable`, `force`, `on-demand`.
        :param Sequence['SdwanDuplicationServiceIdArgs'] service_ids: SD-WAN service rule ID list. The structure of `service_id` block is documented below.
        :param Sequence['SdwanDuplicationServiceArgs'] services: Service and service group name. The structure of `service` block is documented below.
        :param str sla_match_service: Enable/disable packet duplication matching health-check SLAs in service rule. Valid values: `enable`, `disable`.
        :param Sequence['SdwanDuplicationSrcaddr6Args'] srcaddr6s: Source address6 or address6 group names. The structure of `srcaddr6` block is documented below.
        :param Sequence['SdwanDuplicationSrcaddrArgs'] srcaddrs: Source address or address group names. The structure of `srcaddr` block is documented below.
        :param Sequence['SdwanDuplicationSrcintfArgs'] srcintfs: Incoming (ingress) interfaces or zones. The structure of `srcintf` block is documented below.
        """
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if packet_de_duplication is not None:
            pulumi.set(__self__, "packet_de_duplication", packet_de_duplication)
        if packet_duplication is not None:
            pulumi.set(__self__, "packet_duplication", packet_duplication)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if sla_match_service is not None:
            pulumi.set(__self__, "sla_match_service", sla_match_service)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[Sequence['outputs.SdwanDuplicationDstaddr6']]:
        """
        Destination address6 or address6 group names. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[Sequence['outputs.SdwanDuplicationDstaddr']]:
        """
        Destination address or address group names. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[Sequence['outputs.SdwanDuplicationDstintf']]:
        """
        Outgoing (egress) interfaces or zones. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Duplication rule ID (1 - 255).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="packetDeDuplication")
    def packet_de_duplication(self) -> Optional[str]:
        """
        Enable/disable discarding of packets that have been duplicated. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "packet_de_duplication")

    @property
    @pulumi.getter(name="packetDuplication")
    def packet_duplication(self) -> Optional[str]:
        """
        Configure packet duplication method. Valid values: `disable`, `force`, `on-demand`.
        """
        return pulumi.get(self, "packet_duplication")

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[Sequence['outputs.SdwanDuplicationServiceId']]:
        """
        SD-WAN service rule ID list. The structure of `service_id` block is documented below.
        """
        return pulumi.get(self, "service_ids")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence['outputs.SdwanDuplicationService']]:
        """
        Service and service group name. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="slaMatchService")
    def sla_match_service(self) -> Optional[str]:
        """
        Enable/disable packet duplication matching health-check SLAs in service rule. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sla_match_service")

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[Sequence['outputs.SdwanDuplicationSrcaddr6']]:
        """
        Source address6 or address6 group names. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[Sequence['outputs.SdwanDuplicationSrcaddr']]:
        """
        Source address or address group names. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[Sequence['outputs.SdwanDuplicationSrcintf']]:
        """
        Incoming (ingress) interfaces or zones. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")


@pulumi.output_type
class SdwanDuplicationDstaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanDuplicationDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address6 or address6 group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address6 or address6 group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanDuplicationDstintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Interface, zone or SDWAN zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface, zone or SDWAN zone name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanDuplicationService(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanDuplicationServiceId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: SD-WAN service rule ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        SD-WAN service rule ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SdwanDuplicationSrcaddr6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanDuplicationSrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanDuplicationSrcintf(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Interface, zone or SDWAN zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface, zone or SDWAN zone name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanFailAlertInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Physical interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrMode":
            suggest = "addr_mode"
        elif key == "classId":
            suggest = "class_id"
        elif key == "detectMode":
            suggest = "detect_mode"
        elif key == "dnsMatchIp":
            suggest = "dns_match_ip"
        elif key == "dnsRequestDomain":
            suggest = "dns_request_domain"
        elif key == "embedMeasuredHealth":
            suggest = "embed_measured_health"
        elif key == "ftpFile":
            suggest = "ftp_file"
        elif key == "ftpMode":
            suggest = "ftp_mode"
        elif key == "haPriority":
            suggest = "ha_priority"
        elif key == "httpAgent":
            suggest = "http_agent"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "httpMatch":
            suggest = "http_match"
        elif key == "mosCodec":
            suggest = "mos_codec"
        elif key == "packetSize":
            suggest = "packet_size"
        elif key == "probeCount":
            suggest = "probe_count"
        elif key == "probePackets":
            suggest = "probe_packets"
        elif key == "probeTimeout":
            suggest = "probe_timeout"
        elif key == "qualityMeasuredMethod":
            suggest = "quality_measured_method"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "slaFailLogPeriod":
            suggest = "sla_fail_log_period"
        elif key == "slaIdRedistribute":
            suggest = "sla_id_redistribute"
        elif key == "slaPassLogPeriod":
            suggest = "sla_pass_log_period"
        elif key == "systemDns":
            suggest = "system_dns"
        elif key == "thresholdAlertJitter":
            suggest = "threshold_alert_jitter"
        elif key == "thresholdAlertLatency":
            suggest = "threshold_alert_latency"
        elif key == "thresholdAlertPacketloss":
            suggest = "threshold_alert_packetloss"
        elif key == "thresholdWarningJitter":
            suggest = "threshold_warning_jitter"
        elif key == "thresholdWarningLatency":
            suggest = "threshold_warning_latency"
        elif key == "thresholdWarningPacketloss":
            suggest = "threshold_warning_packetloss"
        elif key == "updateCascadeInterface":
            suggest = "update_cascade_interface"
        elif key == "updateStaticRoute":
            suggest = "update_static_route"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdwanHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdwanHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdwanHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_mode: Optional[str] = None,
                 class_id: Optional[int] = None,
                 detect_mode: Optional[str] = None,
                 diffservcode: Optional[str] = None,
                 dns_match_ip: Optional[str] = None,
                 dns_request_domain: Optional[str] = None,
                 embed_measured_health: Optional[str] = None,
                 failtime: Optional[int] = None,
                 ftp_file: Optional[str] = None,
                 ftp_mode: Optional[str] = None,
                 ha_priority: Optional[int] = None,
                 http_agent: Optional[str] = None,
                 http_get: Optional[str] = None,
                 http_match: Optional[str] = None,
                 interval: Optional[int] = None,
                 members: Optional[Sequence['outputs.SdwanHealthCheckMember']] = None,
                 mos_codec: Optional[str] = None,
                 name: Optional[str] = None,
                 packet_size: Optional[int] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 probe_count: Optional[int] = None,
                 probe_packets: Optional[str] = None,
                 probe_timeout: Optional[int] = None,
                 protocol: Optional[str] = None,
                 quality_measured_method: Optional[str] = None,
                 recoverytime: Optional[int] = None,
                 security_mode: Optional[str] = None,
                 server: Optional[str] = None,
                 sla_fail_log_period: Optional[int] = None,
                 sla_id_redistribute: Optional[int] = None,
                 sla_pass_log_period: Optional[int] = None,
                 slas: Optional[Sequence['outputs.SdwanHealthCheckSla']] = None,
                 source: Optional[str] = None,
                 source6: Optional[str] = None,
                 system_dns: Optional[str] = None,
                 threshold_alert_jitter: Optional[int] = None,
                 threshold_alert_latency: Optional[int] = None,
                 threshold_alert_packetloss: Optional[int] = None,
                 threshold_warning_jitter: Optional[int] = None,
                 threshold_warning_latency: Optional[int] = None,
                 threshold_warning_packetloss: Optional[int] = None,
                 update_cascade_interface: Optional[str] = None,
                 update_static_route: Optional[str] = None,
                 user: Optional[str] = None,
                 vrf: Optional[int] = None):
        """
        :param str addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param int class_id: Traffic class ID.
        :param str detect_mode: The mode determining how to detect the server.
        :param str diffservcode: Differentiated services code point (DSCP) in the IP header of the probe packet.
        :param str dns_match_ip: Response IP expected from DNS server if the protocol is DNS.
        :param str dns_request_domain: Fully qualified domain name to resolve for the DNS probe.
        :param str embed_measured_health: Enable/disable embedding measured health information. Valid values: `enable`, `disable`.
        :param int failtime: Number of failures before server is considered lost (1 - 3600, default = 5).
        :param str ftp_file: Full path and file name on the FTP server to download for FTP health-check to probe.
        :param str ftp_mode: FTP mode. Valid values: `passive`, `port`.
        :param int ha_priority: HA election priority (1 - 50).
        :param str http_agent: String in the http-agent field in the HTTP header.
        :param str http_get: URL used to communicate with the server if the protocol if the protocol is HTTP.
        :param str http_match: Response string expected from the server if the protocol is HTTP.
        :param int interval: Status check interval in milliseconds, or the time between attempting to connect to the server (500 - 3600*1000 msec, default = 500).
        :param Sequence['SdwanHealthCheckMemberArgs'] members: Member sequence number list. The structure of `members` block is documented below.
        :param str mos_codec: Codec to use for MOS calculation (default = g711). Valid values: `g711`, `g722`, `g729`.
        :param str name: Health check name.
        :param int packet_size: Packet size of a twamp test session,
        :param str password: Twamp controller password in authentication mode
        :param int port: Port number used to communicate with the server over the selected protocol (0-65535, default = 0, auto select. http, twamp: 80, udp-echo, tcp-echo: 7, dns: 53, ftp: 21).
        :param int probe_count: Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        :param str probe_packets: Enable/disable transmission of probe packets. Valid values: `disable`, `enable`.
        :param int probe_timeout: Time to wait before a probe packet is considered lost (500 - 3600*1000 msec, default = 500).
        :param str protocol: Protocol used to determine if the FortiGate can communicate with the server.
        :param str quality_measured_method: Method to measure the quality of tcp-connect. Valid values: `half-open`, `half-close`.
        :param int recoverytime: Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
        :param str security_mode: Twamp controller security mode. Valid values: `none`, `authentication`.
        :param str server: IP address or FQDN name of the server.
        :param int sla_fail_log_period: Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
        :param int sla_id_redistribute: Select the ID from the SLA sub-table. The selected SLA's priority value will be distributed into the routing table (0 - 32, default = 0).
        :param int sla_pass_log_period: Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
        :param Sequence['SdwanHealthCheckSlaArgs'] slas: Service level agreement (SLA). The structure of `sla` block is documented below.
        :param str source: Source IP address used in the health-check packet to the server.
        :param str source6: Source IPv6 addressused in the health-check packet to server.
        :param str system_dns: Enable/disable system DNS as the probe server. Valid values: `disable`, `enable`.
        :param int threshold_alert_jitter: Alert threshold for jitter (ms, default = 0).
        :param int threshold_alert_latency: Alert threshold for latency (ms, default = 0).
        :param int threshold_alert_packetloss: Alert threshold for packet loss (percentage, default = 0).
        :param int threshold_warning_jitter: Warning threshold for jitter (ms, default = 0).
        :param int threshold_warning_latency: Warning threshold for latency (ms, default = 0).
        :param int threshold_warning_packetloss: Warning threshold for packet loss (percentage, default = 0).
        :param str update_cascade_interface: Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        :param str update_static_route: Enable/disable updating the static route. Valid values: `enable`, `disable`.
        :param str user: The user name to access probe server.
        :param int vrf: Virtual Routing Forwarding ID.
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if class_id is not None:
            pulumi.set(__self__, "class_id", class_id)
        if detect_mode is not None:
            pulumi.set(__self__, "detect_mode", detect_mode)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dns_match_ip is not None:
            pulumi.set(__self__, "dns_match_ip", dns_match_ip)
        if dns_request_domain is not None:
            pulumi.set(__self__, "dns_request_domain", dns_request_domain)
        if embed_measured_health is not None:
            pulumi.set(__self__, "embed_measured_health", embed_measured_health)
        if failtime is not None:
            pulumi.set(__self__, "failtime", failtime)
        if ftp_file is not None:
            pulumi.set(__self__, "ftp_file", ftp_file)
        if ftp_mode is not None:
            pulumi.set(__self__, "ftp_mode", ftp_mode)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if http_agent is not None:
            pulumi.set(__self__, "http_agent", http_agent)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if http_match is not None:
            pulumi.set(__self__, "http_match", http_match)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if mos_codec is not None:
            pulumi.set(__self__, "mos_codec", mos_codec)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_size is not None:
            pulumi.set(__self__, "packet_size", packet_size)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if probe_count is not None:
            pulumi.set(__self__, "probe_count", probe_count)
        if probe_packets is not None:
            pulumi.set(__self__, "probe_packets", probe_packets)
        if probe_timeout is not None:
            pulumi.set(__self__, "probe_timeout", probe_timeout)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_measured_method is not None:
            pulumi.set(__self__, "quality_measured_method", quality_measured_method)
        if recoverytime is not None:
            pulumi.set(__self__, "recoverytime", recoverytime)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if sla_fail_log_period is not None:
            pulumi.set(__self__, "sla_fail_log_period", sla_fail_log_period)
        if sla_id_redistribute is not None:
            pulumi.set(__self__, "sla_id_redistribute", sla_id_redistribute)
        if sla_pass_log_period is not None:
            pulumi.set(__self__, "sla_pass_log_period", sla_pass_log_period)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source6 is not None:
            pulumi.set(__self__, "source6", source6)
        if system_dns is not None:
            pulumi.set(__self__, "system_dns", system_dns)
        if threshold_alert_jitter is not None:
            pulumi.set(__self__, "threshold_alert_jitter", threshold_alert_jitter)
        if threshold_alert_latency is not None:
            pulumi.set(__self__, "threshold_alert_latency", threshold_alert_latency)
        if threshold_alert_packetloss is not None:
            pulumi.set(__self__, "threshold_alert_packetloss", threshold_alert_packetloss)
        if threshold_warning_jitter is not None:
            pulumi.set(__self__, "threshold_warning_jitter", threshold_warning_jitter)
        if threshold_warning_latency is not None:
            pulumi.set(__self__, "threshold_warning_latency", threshold_warning_latency)
        if threshold_warning_packetloss is not None:
            pulumi.set(__self__, "threshold_warning_packetloss", threshold_warning_packetloss)
        if update_cascade_interface is not None:
            pulumi.set(__self__, "update_cascade_interface", update_cascade_interface)
        if update_static_route is not None:
            pulumi.set(__self__, "update_static_route", update_static_route)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[str]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> Optional[int]:
        """
        Traffic class ID.
        """
        return pulumi.get(self, "class_id")

    @property
    @pulumi.getter(name="detectMode")
    def detect_mode(self) -> Optional[str]:
        """
        The mode determining how to detect the server.
        """
        return pulumi.get(self, "detect_mode")

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[str]:
        """
        Differentiated services code point (DSCP) in the IP header of the probe packet.
        """
        return pulumi.get(self, "diffservcode")

    @property
    @pulumi.getter(name="dnsMatchIp")
    def dns_match_ip(self) -> Optional[str]:
        """
        Response IP expected from DNS server if the protocol is DNS.
        """
        return pulumi.get(self, "dns_match_ip")

    @property
    @pulumi.getter(name="dnsRequestDomain")
    def dns_request_domain(self) -> Optional[str]:
        """
        Fully qualified domain name to resolve for the DNS probe.
        """
        return pulumi.get(self, "dns_request_domain")

    @property
    @pulumi.getter(name="embedMeasuredHealth")
    def embed_measured_health(self) -> Optional[str]:
        """
        Enable/disable embedding measured health information. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "embed_measured_health")

    @property
    @pulumi.getter
    def failtime(self) -> Optional[int]:
        """
        Number of failures before server is considered lost (1 - 3600, default = 5).
        """
        return pulumi.get(self, "failtime")

    @property
    @pulumi.getter(name="ftpFile")
    def ftp_file(self) -> Optional[str]:
        """
        Full path and file name on the FTP server to download for FTP health-check to probe.
        """
        return pulumi.get(self, "ftp_file")

    @property
    @pulumi.getter(name="ftpMode")
    def ftp_mode(self) -> Optional[str]:
        """
        FTP mode. Valid values: `passive`, `port`.
        """
        return pulumi.get(self, "ftp_mode")

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[int]:
        """
        HA election priority (1 - 50).
        """
        return pulumi.get(self, "ha_priority")

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> Optional[str]:
        """
        String in the http-agent field in the HTTP header.
        """
        return pulumi.get(self, "http_agent")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[str]:
        """
        URL used to communicate with the server if the protocol if the protocol is HTTP.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> Optional[str]:
        """
        Response string expected from the server if the protocol is HTTP.
        """
        return pulumi.get(self, "http_match")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        Status check interval in milliseconds, or the time between attempting to connect to the server (500 - 3600*1000 msec, default = 500).
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.SdwanHealthCheckMember']]:
        """
        Member sequence number list. The structure of `members` block is documented below.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="mosCodec")
    def mos_codec(self) -> Optional[str]:
        """
        Codec to use for MOS calculation (default = g711). Valid values: `g711`, `g722`, `g729`.
        """
        return pulumi.get(self, "mos_codec")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Health check name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> Optional[int]:
        """
        Packet size of a twamp test session,
        """
        return pulumi.get(self, "packet_size")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Twamp controller password in authentication mode
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port number used to communicate with the server over the selected protocol (0-65535, default = 0, auto select. http, twamp: 80, udp-echo, tcp-echo: 7, dns: 53, ftp: 21).
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> Optional[int]:
        """
        Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        """
        return pulumi.get(self, "probe_count")

    @property
    @pulumi.getter(name="probePackets")
    def probe_packets(self) -> Optional[str]:
        """
        Enable/disable transmission of probe packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "probe_packets")

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> Optional[int]:
        """
        Time to wait before a probe packet is considered lost (500 - 3600*1000 msec, default = 500).
        """
        return pulumi.get(self, "probe_timeout")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol used to determine if the FortiGate can communicate with the server.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="qualityMeasuredMethod")
    def quality_measured_method(self) -> Optional[str]:
        """
        Method to measure the quality of tcp-connect. Valid values: `half-open`, `half-close`.
        """
        return pulumi.get(self, "quality_measured_method")

    @property
    @pulumi.getter
    def recoverytime(self) -> Optional[int]:
        """
        Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
        """
        return pulumi.get(self, "recoverytime")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        """
        Twamp controller security mode. Valid values: `none`, `authentication`.
        """
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        IP address or FQDN name of the server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="slaFailLogPeriod")
    def sla_fail_log_period(self) -> Optional[int]:
        """
        Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "sla_fail_log_period")

    @property
    @pulumi.getter(name="slaIdRedistribute")
    def sla_id_redistribute(self) -> Optional[int]:
        """
        Select the ID from the SLA sub-table. The selected SLA's priority value will be distributed into the routing table (0 - 32, default = 0).
        """
        return pulumi.get(self, "sla_id_redistribute")

    @property
    @pulumi.getter(name="slaPassLogPeriod")
    def sla_pass_log_period(self) -> Optional[int]:
        """
        Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "sla_pass_log_period")

    @property
    @pulumi.getter
    def slas(self) -> Optional[Sequence['outputs.SdwanHealthCheckSla']]:
        """
        Service level agreement (SLA). The structure of `sla` block is documented below.
        """
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Source IP address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def source6(self) -> Optional[str]:
        """
        Source IPv6 addressused in the health-check packet to server.
        """
        return pulumi.get(self, "source6")

    @property
    @pulumi.getter(name="systemDns")
    def system_dns(self) -> Optional[str]:
        """
        Enable/disable system DNS as the probe server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "system_dns")

    @property
    @pulumi.getter(name="thresholdAlertJitter")
    def threshold_alert_jitter(self) -> Optional[int]:
        """
        Alert threshold for jitter (ms, default = 0).
        """
        return pulumi.get(self, "threshold_alert_jitter")

    @property
    @pulumi.getter(name="thresholdAlertLatency")
    def threshold_alert_latency(self) -> Optional[int]:
        """
        Alert threshold for latency (ms, default = 0).
        """
        return pulumi.get(self, "threshold_alert_latency")

    @property
    @pulumi.getter(name="thresholdAlertPacketloss")
    def threshold_alert_packetloss(self) -> Optional[int]:
        """
        Alert threshold for packet loss (percentage, default = 0).
        """
        return pulumi.get(self, "threshold_alert_packetloss")

    @property
    @pulumi.getter(name="thresholdWarningJitter")
    def threshold_warning_jitter(self) -> Optional[int]:
        """
        Warning threshold for jitter (ms, default = 0).
        """
        return pulumi.get(self, "threshold_warning_jitter")

    @property
    @pulumi.getter(name="thresholdWarningLatency")
    def threshold_warning_latency(self) -> Optional[int]:
        """
        Warning threshold for latency (ms, default = 0).
        """
        return pulumi.get(self, "threshold_warning_latency")

    @property
    @pulumi.getter(name="thresholdWarningPacketloss")
    def threshold_warning_packetloss(self) -> Optional[int]:
        """
        Warning threshold for packet loss (percentage, default = 0).
        """
        return pulumi.get(self, "threshold_warning_packetloss")

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> Optional[str]:
        """
        Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_cascade_interface")

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> Optional[str]:
        """
        Enable/disable updating the static route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_static_route")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        The user name to access probe server.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[int]:
        """
        Virtual Routing Forwarding ID.
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class SdwanHealthCheckMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "seqNum":
            suggest = "seq_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdwanHealthCheckMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdwanHealthCheckMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdwanHealthCheckMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 seq_num: Optional[int] = None):
        """
        :param int seq_num: Member sequence number.
        """
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class SdwanHealthCheckSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jitterThreshold":
            suggest = "jitter_threshold"
        elif key == "latencyThreshold":
            suggest = "latency_threshold"
        elif key == "linkCostFactor":
            suggest = "link_cost_factor"
        elif key == "mosThreshold":
            suggest = "mos_threshold"
        elif key == "packetlossThreshold":
            suggest = "packetloss_threshold"
        elif key == "priorityInSla":
            suggest = "priority_in_sla"
        elif key == "priorityOutSla":
            suggest = "priority_out_sla"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdwanHealthCheckSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdwanHealthCheckSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdwanHealthCheckSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 jitter_threshold: Optional[int] = None,
                 latency_threshold: Optional[int] = None,
                 link_cost_factor: Optional[str] = None,
                 mos_threshold: Optional[str] = None,
                 packetloss_threshold: Optional[int] = None,
                 priority_in_sla: Optional[int] = None,
                 priority_out_sla: Optional[int] = None):
        """
        :param int id: SLA ID.
        :param int jitter_threshold: Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        :param int latency_threshold: Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        :param str link_cost_factor: Criteria on which to base link selection.
        :param str mos_threshold: Minimum Mean Opinion Score for SLA to be marked as pass. (1.0 - 5.0, default = 3.6).
        :param int packetloss_threshold: Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
        :param int priority_in_sla: Value to be distributed into routing table when in-sla (0 - 65535, default = 0).
        :param int priority_out_sla: Value to be distributed into routing table when out-sla (0 - 65535, default = 0).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if jitter_threshold is not None:
            pulumi.set(__self__, "jitter_threshold", jitter_threshold)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if mos_threshold is not None:
            pulumi.set(__self__, "mos_threshold", mos_threshold)
        if packetloss_threshold is not None:
            pulumi.set(__self__, "packetloss_threshold", packetloss_threshold)
        if priority_in_sla is not None:
            pulumi.set(__self__, "priority_in_sla", priority_in_sla)
        if priority_out_sla is not None:
            pulumi.set(__self__, "priority_out_sla", priority_out_sla)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jitterThreshold")
    def jitter_threshold(self) -> Optional[int]:
        """
        Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        """
        return pulumi.get(self, "jitter_threshold")

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[int]:
        """
        Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        """
        return pulumi.get(self, "latency_threshold")

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[str]:
        """
        Criteria on which to base link selection.
        """
        return pulumi.get(self, "link_cost_factor")

    @property
    @pulumi.getter(name="mosThreshold")
    def mos_threshold(self) -> Optional[str]:
        """
        Minimum Mean Opinion Score for SLA to be marked as pass. (1.0 - 5.0, default = 3.6).
        """
        return pulumi.get(self, "mos_threshold")

    @property
    @pulumi.getter(name="packetlossThreshold")
    def packetloss_threshold(self) -> Optional[int]:
        """
        Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
        """
        return pulumi.get(self, "packetloss_threshold")

    @property
    @pulumi.getter(name="priorityInSla")
    def priority_in_sla(self) -> Optional[int]:
        """
        Value to be distributed into routing table when in-sla (0 - 65535, default = 0).
        """
        return pulumi.get(self, "priority_in_sla")

    @property
    @pulumi.getter(name="priorityOutSla")
    def priority_out_sla(self) -> Optional[int]:
        """
        Value to be distributed into routing table when out-sla (0 - 65535, default = 0).
        """
        return pulumi.get(self, "priority_out_sla")


@pulumi.output_type
class SdwanMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressSpilloverThreshold":
            suggest = "ingress_spillover_threshold"
        elif key == "preferredSource":
            suggest = "preferred_source"
        elif key == "seqNum":
            suggest = "seq_num"
        elif key == "spilloverThreshold":
            suggest = "spillover_threshold"
        elif key == "transportGroup":
            suggest = "transport_group"
        elif key == "volumeRatio":
            suggest = "volume_ratio"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdwanMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdwanMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdwanMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 cost: Optional[int] = None,
                 gateway: Optional[str] = None,
                 gateway6: Optional[str] = None,
                 ingress_spillover_threshold: Optional[int] = None,
                 interface: Optional[str] = None,
                 preferred_source: Optional[str] = None,
                 priority: Optional[int] = None,
                 priority6: Optional[int] = None,
                 seq_num: Optional[int] = None,
                 source: Optional[str] = None,
                 source6: Optional[str] = None,
                 spillover_threshold: Optional[int] = None,
                 status: Optional[str] = None,
                 transport_group: Optional[int] = None,
                 volume_ratio: Optional[int] = None,
                 weight: Optional[int] = None,
                 zone: Optional[str] = None):
        """
        :param str comment: Comments.
        :param int cost: Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
        :param str gateway: The default gateway for this interface. Usually the default gateway of the Internet service provider that this interface is connected to.
        :param str gateway6: IPv6 gateway.
        :param int ingress_spillover_threshold: Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        :param str interface: Interface name.
        :param str preferred_source: Preferred source of route for this member.
        :param int priority: Priority of the interface (0 - 65535). Used for SD-WAN rules or priority rules.
        :param int priority6: Priority of the interface for IPv6 (1 - 65535, default = 1024). Used for SD-WAN rules or priority rules.
        :param int seq_num: Member sequence number.
        :param str source: Source IP address used in the health-check packet to the server.
        :param str source6: Source IPv6 address used in the health-check packet to the server.
        :param int spillover_threshold: Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        :param str status: Enable/disable this interface in the SD-WAN. Valid values: `disable`, `enable`.
        :param int transport_group: Measured transport group (0 - 255).
        :param int volume_ratio: Measured volume ratio (this value / sum of all values = percentage of link volume, 1 - 255).
        :param int weight: Weight of this interface for weighted load balancing. (1 - 255) More traffic is directed to interfaces with higher weights.
        :param str zone: Zone name.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ingress_spillover_threshold is not None:
            pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if preferred_source is not None:
            pulumi.set(__self__, "preferred_source", preferred_source)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority6 is not None:
            pulumi.set(__self__, "priority6", priority6)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source6 is not None:
            pulumi.set(__self__, "source6", source6)
        if spillover_threshold is not None:
            pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transport_group is not None:
            pulumi.set(__self__, "transport_group", transport_group)
        if volume_ratio is not None:
            pulumi.set(__self__, "volume_ratio", volume_ratio)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Comments.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        """
        Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        The default gateway for this interface. Usually the default gateway of the Internet service provider that this interface is connected to.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[str]:
        """
        IPv6 gateway.
        """
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> Optional[int]:
        """
        Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        """
        return pulumi.get(self, "ingress_spillover_threshold")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="preferredSource")
    def preferred_source(self) -> Optional[str]:
        """
        Preferred source of route for this member.
        """
        return pulumi.get(self, "preferred_source")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Priority of the interface (0 - 65535). Used for SD-WAN rules or priority rules.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def priority6(self) -> Optional[int]:
        """
        Priority of the interface for IPv6 (1 - 65535, default = 1024). Used for SD-WAN rules or priority rules.
        """
        return pulumi.get(self, "priority6")

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Source IP address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def source6(self) -> Optional[str]:
        """
        Source IPv6 address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source6")

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> Optional[int]:
        """
        Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        """
        return pulumi.get(self, "spillover_threshold")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable this interface in the SD-WAN. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="transportGroup")
    def transport_group(self) -> Optional[int]:
        """
        Measured transport group (0 - 255).
        """
        return pulumi.get(self, "transport_group")

    @property
    @pulumi.getter(name="volumeRatio")
    def volume_ratio(self) -> Optional[int]:
        """
        Measured volume ratio (this value / sum of all values = percentage of link volume, 1 - 255).
        """
        return pulumi.get(self, "volume_ratio")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight of this interface for weighted load balancing. (1 - 255) More traffic is directed to interfaces with higher weights.
        """
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        Zone name.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class SdwanNeighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthCheck":
            suggest = "health_check"
        elif key == "memberBlocks":
            suggest = "member_blocks"
        elif key == "minimumSlaMeetMembers":
            suggest = "minimum_sla_meet_members"
        elif key == "serviceId":
            suggest = "service_id"
        elif key == "slaId":
            suggest = "sla_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdwanNeighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdwanNeighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdwanNeighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 health_check: Optional[str] = None,
                 ip: Optional[str] = None,
                 member: Optional[int] = None,
                 member_blocks: Optional[Sequence['outputs.SdwanNeighborMemberBlock']] = None,
                 minimum_sla_meet_members: Optional[int] = None,
                 mode: Optional[str] = None,
                 role: Optional[str] = None,
                 service_id: Optional[int] = None,
                 sla_id: Optional[int] = None):
        """
        :param str health_check: SD-WAN health-check name.
        :param str ip: IP/IPv6 address of neighbor.
        :param int member: Member sequence number.
        :param Sequence['SdwanNeighborMemberBlockArgs'] member_blocks: Member sequence number list. The structure of `member_block` block is documented below.
        :param int minimum_sla_meet_members: Minimum number of members which meet SLA when the neighbor is preferred.
        :param str mode: What metric to select the neighbor. Valid values: `sla`, `speedtest`.
        :param str role: Role of neighbor. Valid values: `standalone`, `primary`, `secondary`.
        :param int service_id: SD-WAN service ID to work with the neighbor.
        :param int sla_id: SLA ID.
        """
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if member_blocks is not None:
            pulumi.set(__self__, "member_blocks", member_blocks)
        if minimum_sla_meet_members is not None:
            pulumi.set(__self__, "minimum_sla_meet_members", minimum_sla_meet_members)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[str]:
        """
        SD-WAN health-check name.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IP/IPv6 address of neighbor.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def member(self) -> Optional[int]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "member")

    @property
    @pulumi.getter(name="memberBlocks")
    def member_blocks(self) -> Optional[Sequence['outputs.SdwanNeighborMemberBlock']]:
        """
        Member sequence number list. The structure of `member_block` block is documented below.
        """
        return pulumi.get(self, "member_blocks")

    @property
    @pulumi.getter(name="minimumSlaMeetMembers")
    def minimum_sla_meet_members(self) -> Optional[int]:
        """
        Minimum number of members which meet SLA when the neighbor is preferred.
        """
        return pulumi.get(self, "minimum_sla_meet_members")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        What metric to select the neighbor. Valid values: `sla`, `speedtest`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role of neighbor. Valid values: `standalone`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[int]:
        """
        SD-WAN service ID to work with the neighbor.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[int]:
        """
        SLA ID.
        """
        return pulumi.get(self, "sla_id")


@pulumi.output_type
class SdwanNeighborMemberBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "seqNum":
            suggest = "seq_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdwanNeighborMemberBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdwanNeighborMemberBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdwanNeighborMemberBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 seq_num: Optional[int] = None):
        """
        :param int seq_num: Member sequence number.
        """
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class SdwanService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrMode":
            suggest = "addr_mode"
        elif key == "agentExclusive":
            suggest = "agent_exclusive"
        elif key == "bandwidthWeight":
            suggest = "bandwidth_weight"
        elif key == "dscpForward":
            suggest = "dscp_forward"
        elif key == "dscpForwardTag":
            suggest = "dscp_forward_tag"
        elif key == "dscpReverse":
            suggest = "dscp_reverse"
        elif key == "dscpReverseTag":
            suggest = "dscp_reverse_tag"
        elif key == "dstNegate":
            suggest = "dst_negate"
        elif key == "endPort":
            suggest = "end_port"
        elif key == "endSrcPort":
            suggest = "end_src_port"
        elif key == "hashMode":
            suggest = "hash_mode"
        elif key == "healthChecks":
            suggest = "health_checks"
        elif key == "holdDownTime":
            suggest = "hold_down_time"
        elif key == "inputDeviceNegate":
            suggest = "input_device_negate"
        elif key == "inputDevices":
            suggest = "input_devices"
        elif key == "inputZones":
            suggest = "input_zones"
        elif key == "internetService":
            suggest = "internet_service"
        elif key == "internetServiceAppCtrlCategories":
            suggest = "internet_service_app_ctrl_categories"
        elif key == "internetServiceAppCtrlGroups":
            suggest = "internet_service_app_ctrl_groups"
        elif key == "internetServiceAppCtrls":
            suggest = "internet_service_app_ctrls"
        elif key == "internetServiceCustomGroups":
            suggest = "internet_service_custom_groups"
        elif key == "internetServiceCustoms":
            suggest = "internet_service_customs"
        elif key == "internetServiceGroups":
            suggest = "internet_service_groups"
        elif key == "internetServiceNames":
            suggest = "internet_service_names"
        elif key == "jitterWeight":
            suggest = "jitter_weight"
        elif key == "latencyWeight":
            suggest = "latency_weight"
        elif key == "linkCostFactor":
            suggest = "link_cost_factor"
        elif key == "linkCostThreshold":
            suggest = "link_cost_threshold"
        elif key == "loadBalance":
            suggest = "load_balance"
        elif key == "minimumSlaMeetMembers":
            suggest = "minimum_sla_meet_members"
        elif key == "packetLossWeight":
            suggest = "packet_loss_weight"
        elif key == "passiveMeasurement":
            suggest = "passive_measurement"
        elif key == "priorityMembers":
            suggest = "priority_members"
        elif key == "priorityZones":
            suggest = "priority_zones"
        elif key == "qualityLink":
            suggest = "quality_link"
        elif key == "routeTag":
            suggest = "route_tag"
        elif key == "shortcutPriority":
            suggest = "shortcut_priority"
        elif key == "shortcutStickiness":
            suggest = "shortcut_stickiness"
        elif key == "slaCompareMethod":
            suggest = "sla_compare_method"
        elif key == "slaStickiness":
            suggest = "sla_stickiness"
        elif key == "srcNegate":
            suggest = "src_negate"
        elif key == "standaloneAction":
            suggest = "standalone_action"
        elif key == "startPort":
            suggest = "start_port"
        elif key == "startSrcPort":
            suggest = "start_src_port"
        elif key == "tieBreak":
            suggest = "tie_break"
        elif key == "tosMask":
            suggest = "tos_mask"
        elif key == "useShortcutSla":
            suggest = "use_shortcut_sla"
        elif key == "zoneMode":
            suggest = "zone_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdwanService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdwanService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdwanService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_mode: Optional[str] = None,
                 agent_exclusive: Optional[str] = None,
                 bandwidth_weight: Optional[int] = None,
                 default: Optional[str] = None,
                 dscp_forward: Optional[str] = None,
                 dscp_forward_tag: Optional[str] = None,
                 dscp_reverse: Optional[str] = None,
                 dscp_reverse_tag: Optional[str] = None,
                 dst6s: Optional[Sequence['outputs.SdwanServiceDst6']] = None,
                 dst_negate: Optional[str] = None,
                 dsts: Optional[Sequence['outputs.SdwanServiceDst']] = None,
                 end_port: Optional[int] = None,
                 end_src_port: Optional[int] = None,
                 gateway: Optional[str] = None,
                 groups: Optional[Sequence['outputs.SdwanServiceGroup']] = None,
                 hash_mode: Optional[str] = None,
                 health_checks: Optional[Sequence['outputs.SdwanServiceHealthCheck']] = None,
                 hold_down_time: Optional[int] = None,
                 id: Optional[int] = None,
                 input_device_negate: Optional[str] = None,
                 input_devices: Optional[Sequence['outputs.SdwanServiceInputDevice']] = None,
                 input_zones: Optional[Sequence['outputs.SdwanServiceInputZone']] = None,
                 internet_service: Optional[str] = None,
                 internet_service_app_ctrl_categories: Optional[Sequence['outputs.SdwanServiceInternetServiceAppCtrlCategory']] = None,
                 internet_service_app_ctrl_groups: Optional[Sequence['outputs.SdwanServiceInternetServiceAppCtrlGroup']] = None,
                 internet_service_app_ctrls: Optional[Sequence['outputs.SdwanServiceInternetServiceAppCtrl']] = None,
                 internet_service_custom_groups: Optional[Sequence['outputs.SdwanServiceInternetServiceCustomGroup']] = None,
                 internet_service_customs: Optional[Sequence['outputs.SdwanServiceInternetServiceCustom']] = None,
                 internet_service_groups: Optional[Sequence['outputs.SdwanServiceInternetServiceGroup']] = None,
                 internet_service_names: Optional[Sequence['outputs.SdwanServiceInternetServiceName']] = None,
                 jitter_weight: Optional[int] = None,
                 latency_weight: Optional[int] = None,
                 link_cost_factor: Optional[str] = None,
                 link_cost_threshold: Optional[int] = None,
                 load_balance: Optional[str] = None,
                 minimum_sla_meet_members: Optional[int] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 packet_loss_weight: Optional[int] = None,
                 passive_measurement: Optional[str] = None,
                 priority_members: Optional[Sequence['outputs.SdwanServicePriorityMember']] = None,
                 priority_zones: Optional[Sequence['outputs.SdwanServicePriorityZone']] = None,
                 protocol: Optional[int] = None,
                 quality_link: Optional[int] = None,
                 role: Optional[str] = None,
                 route_tag: Optional[int] = None,
                 shortcut: Optional[str] = None,
                 shortcut_priority: Optional[str] = None,
                 shortcut_stickiness: Optional[str] = None,
                 sla_compare_method: Optional[str] = None,
                 sla_stickiness: Optional[str] = None,
                 slas: Optional[Sequence['outputs.SdwanServiceSla']] = None,
                 src6s: Optional[Sequence['outputs.SdwanServiceSrc6']] = None,
                 src_negate: Optional[str] = None,
                 srcs: Optional[Sequence['outputs.SdwanServiceSrc']] = None,
                 standalone_action: Optional[str] = None,
                 start_port: Optional[int] = None,
                 start_src_port: Optional[int] = None,
                 status: Optional[str] = None,
                 tie_break: Optional[str] = None,
                 tos: Optional[str] = None,
                 tos_mask: Optional[str] = None,
                 use_shortcut_sla: Optional[str] = None,
                 users: Optional[Sequence['outputs.SdwanServiceUser']] = None,
                 zone_mode: Optional[str] = None):
        """
        :param str addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param str agent_exclusive: Set/unset the service as agent use exclusively. Valid values: `enable`, `disable`.
        :param int bandwidth_weight: Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
        :param str default: Enable/disable use of SD-WAN as default service. Valid values: `enable`, `disable`.
        :param str dscp_forward: Enable/disable forward traffic DSCP tag. Valid values: `enable`, `disable`.
        :param str dscp_forward_tag: Forward traffic DSCP tag.
        :param str dscp_reverse: Enable/disable reverse traffic DSCP tag. Valid values: `enable`, `disable`.
        :param str dscp_reverse_tag: Reverse traffic DSCP tag.
        :param Sequence['SdwanServiceDst6Args'] dst6s: Destination address6 name. The structure of `dst6` block is documented below.
        :param str dst_negate: Enable/disable negation of destination address match. Valid values: `enable`, `disable`.
        :param Sequence['SdwanServiceDstArgs'] dsts: Destination address name. The structure of `dst` block is documented below.
        :param int end_port: End destination port number.
        :param int end_src_port: End source port number.
        :param str gateway: Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        :param Sequence['SdwanServiceGroupArgs'] groups: User groups. The structure of `groups` block is documented below.
        :param str hash_mode: Hash algorithm for selected priority members for load balance mode. Valid values: `round-robin`, `source-ip-based`, `source-dest-ip-based`, `inbandwidth`, `outbandwidth`, `bibandwidth`.
        :param Sequence['SdwanServiceHealthCheckArgs'] health_checks: Health check list. The structure of `health_check` block is documented below.
        :param int hold_down_time: Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
        :param int id: SD-WAN rule ID (1 - 4000).
        :param str input_device_negate: Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        :param Sequence['SdwanServiceInputDeviceArgs'] input_devices: Source interface name. The structure of `input_device` block is documented below.
        :param Sequence['SdwanServiceInputZoneArgs'] input_zones: Source input-zone name. The structure of `input_zone` block is documented below.
        :param str internet_service: Enable/disable use of Internet service for application-based load balancing. Valid values: `enable`, `disable`.
        :param Sequence['SdwanServiceInternetServiceAppCtrlCategoryArgs'] internet_service_app_ctrl_categories: IDs of one or more application control categories. The structure of `internet_service_app_ctrl_category` block is documented below.
        :param Sequence['SdwanServiceInternetServiceAppCtrlGroupArgs'] internet_service_app_ctrl_groups: Application control based Internet Service group list. The structure of `internet_service_app_ctrl_group` block is documented below.
        :param Sequence['SdwanServiceInternetServiceAppCtrlArgs'] internet_service_app_ctrls: Application control based Internet Service ID list. The structure of `internet_service_app_ctrl` block is documented below.
        :param Sequence['SdwanServiceInternetServiceCustomGroupArgs'] internet_service_custom_groups: Custom Internet Service group list. The structure of `internet_service_custom_group` block is documented below.
        :param Sequence['SdwanServiceInternetServiceCustomArgs'] internet_service_customs: Custom Internet service name list. The structure of `internet_service_custom` block is documented below.
        :param Sequence['SdwanServiceInternetServiceGroupArgs'] internet_service_groups: Internet Service group list. The structure of `internet_service_group` block is documented below.
        :param Sequence['SdwanServiceInternetServiceNameArgs'] internet_service_names: Internet service name list. The structure of `internet_service_name` block is documented below.
        :param int jitter_weight: Coefficient of jitter in the formula of custom-profile-1.
        :param int latency_weight: Coefficient of latency in the formula of custom-profile-1.
        :param str link_cost_factor: Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        :param int link_cost_threshold: Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
        :param str load_balance: Enable/disable load-balance. Valid values: `enable`, `disable`.
        :param int minimum_sla_meet_members: Minimum number of members which meet SLA.
        :param str mode: Control how the SD-WAN rule sets the priority of interfaces in the SD-WAN.
        :param str name: Service and service group name.
        :param int packet_loss_weight: Coefficient of packet-loss in the formula of custom-profile-1.
        :param str passive_measurement: Enable/disable passive measurement based on the service criteria. Valid values: `enable`, `disable`.
        :param Sequence['SdwanServicePriorityMemberArgs'] priority_members: Member sequence number list. The structure of `priority_members` block is documented below.
        :param Sequence['SdwanServicePriorityZoneArgs'] priority_zones: Priority zone name list. The structure of `priority_zone` block is documented below.
        :param int protocol: Protocol number.
        :param int quality_link: Quality grade.
        :param str role: Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        :param int route_tag: IPv4 route map route-tag.
        :param str shortcut: Enable/disable shortcut for this service. Valid values: `enable`, `disable`.
        :param str shortcut_priority: High priority of ADVPN shortcut for this service. Valid values: `enable`, `disable`, `auto`.
        :param str shortcut_stickiness: Enable/disable shortcut-stickiness of ADVPN. Valid values: `enable`, `disable`.
        :param str sla_compare_method: Method to compare SLA value for SLA mode. Valid values: `order`, `number`.
        :param str sla_stickiness: Enable/disable SLA stickiness (default = disable). Valid values: `enable`, `disable`.
        :param Sequence['SdwanServiceSlaArgs'] slas: Service level agreement (SLA). The structure of `sla` block is documented below.
        :param Sequence['SdwanServiceSrc6Args'] src6s: Source address6 name. The structure of `src6` block is documented below.
        :param str src_negate: Enable/disable negation of source address match. Valid values: `enable`, `disable`.
        :param Sequence['SdwanServiceSrcArgs'] srcs: Source address name. The structure of `src` block is documented below.
        :param str standalone_action: Enable/disable service when selected neighbor role is standalone while service role is not standalone. Valid values: `enable`, `disable`.
        :param int start_port: Start destination port number.
        :param int start_src_port: Start source port number.
        :param str status: Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        :param str tie_break: Method of selecting member if more than one meets the SLA.
        :param str tos: Type of service bit pattern.
        :param str tos_mask: Type of service evaluated bits.
        :param str use_shortcut_sla: Enable/disable use of ADVPN shortcut for quality comparison. Valid values: `enable`, `disable`.
        :param Sequence['SdwanServiceUserArgs'] users: User name. The structure of `users` block is documented below.
        :param str zone_mode: Enable/disable zone mode. Valid values: `enable`, `disable`.
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if agent_exclusive is not None:
            pulumi.set(__self__, "agent_exclusive", agent_exclusive)
        if bandwidth_weight is not None:
            pulumi.set(__self__, "bandwidth_weight", bandwidth_weight)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dscp_forward is not None:
            pulumi.set(__self__, "dscp_forward", dscp_forward)
        if dscp_forward_tag is not None:
            pulumi.set(__self__, "dscp_forward_tag", dscp_forward_tag)
        if dscp_reverse is not None:
            pulumi.set(__self__, "dscp_reverse", dscp_reverse)
        if dscp_reverse_tag is not None:
            pulumi.set(__self__, "dscp_reverse_tag", dscp_reverse_tag)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dst_negate is not None:
            pulumi.set(__self__, "dst_negate", dst_negate)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if end_src_port is not None:
            pulumi.set(__self__, "end_src_port", end_src_port)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if hash_mode is not None:
            pulumi.set(__self__, "hash_mode", hash_mode)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if hold_down_time is not None:
            pulumi.set(__self__, "hold_down_time", hold_down_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if input_device_negate is not None:
            pulumi.set(__self__, "input_device_negate", input_device_negate)
        if input_devices is not None:
            pulumi.set(__self__, "input_devices", input_devices)
        if input_zones is not None:
            pulumi.set(__self__, "input_zones", input_zones)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_app_ctrl_categories is not None:
            pulumi.set(__self__, "internet_service_app_ctrl_categories", internet_service_app_ctrl_categories)
        if internet_service_app_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_app_ctrl_groups", internet_service_app_ctrl_groups)
        if internet_service_app_ctrls is not None:
            pulumi.set(__self__, "internet_service_app_ctrls", internet_service_app_ctrls)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if jitter_weight is not None:
            pulumi.set(__self__, "jitter_weight", jitter_weight)
        if latency_weight is not None:
            pulumi.set(__self__, "latency_weight", latency_weight)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if link_cost_threshold is not None:
            pulumi.set(__self__, "link_cost_threshold", link_cost_threshold)
        if load_balance is not None:
            pulumi.set(__self__, "load_balance", load_balance)
        if minimum_sla_meet_members is not None:
            pulumi.set(__self__, "minimum_sla_meet_members", minimum_sla_meet_members)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_loss_weight is not None:
            pulumi.set(__self__, "packet_loss_weight", packet_loss_weight)
        if passive_measurement is not None:
            pulumi.set(__self__, "passive_measurement", passive_measurement)
        if priority_members is not None:
            pulumi.set(__self__, "priority_members", priority_members)
        if priority_zones is not None:
            pulumi.set(__self__, "priority_zones", priority_zones)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_link is not None:
            pulumi.set(__self__, "quality_link", quality_link)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if route_tag is not None:
            pulumi.set(__self__, "route_tag", route_tag)
        if shortcut is not None:
            pulumi.set(__self__, "shortcut", shortcut)
        if shortcut_priority is not None:
            pulumi.set(__self__, "shortcut_priority", shortcut_priority)
        if shortcut_stickiness is not None:
            pulumi.set(__self__, "shortcut_stickiness", shortcut_stickiness)
        if sla_compare_method is not None:
            pulumi.set(__self__, "sla_compare_method", sla_compare_method)
        if sla_stickiness is not None:
            pulumi.set(__self__, "sla_stickiness", sla_stickiness)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if src6s is not None:
            pulumi.set(__self__, "src6s", src6s)
        if src_negate is not None:
            pulumi.set(__self__, "src_negate", src_negate)
        if srcs is not None:
            pulumi.set(__self__, "srcs", srcs)
        if standalone_action is not None:
            pulumi.set(__self__, "standalone_action", standalone_action)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if start_src_port is not None:
            pulumi.set(__self__, "start_src_port", start_src_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tie_break is not None:
            pulumi.set(__self__, "tie_break", tie_break)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if use_shortcut_sla is not None:
            pulumi.set(__self__, "use_shortcut_sla", use_shortcut_sla)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if zone_mode is not None:
            pulumi.set(__self__, "zone_mode", zone_mode)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[str]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter(name="agentExclusive")
    def agent_exclusive(self) -> Optional[str]:
        """
        Set/unset the service as agent use exclusively. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "agent_exclusive")

    @property
    @pulumi.getter(name="bandwidthWeight")
    def bandwidth_weight(self) -> Optional[int]:
        """
        Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
        """
        return pulumi.get(self, "bandwidth_weight")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        Enable/disable use of SD-WAN as default service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="dscpForward")
    def dscp_forward(self) -> Optional[str]:
        """
        Enable/disable forward traffic DSCP tag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_forward")

    @property
    @pulumi.getter(name="dscpForwardTag")
    def dscp_forward_tag(self) -> Optional[str]:
        """
        Forward traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_forward_tag")

    @property
    @pulumi.getter(name="dscpReverse")
    def dscp_reverse(self) -> Optional[str]:
        """
        Enable/disable reverse traffic DSCP tag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_reverse")

    @property
    @pulumi.getter(name="dscpReverseTag")
    def dscp_reverse_tag(self) -> Optional[str]:
        """
        Reverse traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_reverse_tag")

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[Sequence['outputs.SdwanServiceDst6']]:
        """
        Destination address6 name. The structure of `dst6` block is documented below.
        """
        return pulumi.get(self, "dst6s")

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> Optional[str]:
        """
        Enable/disable negation of destination address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dst_negate")

    @property
    @pulumi.getter
    def dsts(self) -> Optional[Sequence['outputs.SdwanServiceDst']]:
        """
        Destination address name. The structure of `dst` block is documented below.
        """
        return pulumi.get(self, "dsts")

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        """
        End destination port number.
        """
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="endSrcPort")
    def end_src_port(self) -> Optional[int]:
        """
        End source port number.
        """
        return pulumi.get(self, "end_src_port")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence['outputs.SdwanServiceGroup']]:
        """
        User groups. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="hashMode")
    def hash_mode(self) -> Optional[str]:
        """
        Hash algorithm for selected priority members for load balance mode. Valid values: `round-robin`, `source-ip-based`, `source-dest-ip-based`, `inbandwidth`, `outbandwidth`, `bibandwidth`.
        """
        return pulumi.get(self, "hash_mode")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[Sequence['outputs.SdwanServiceHealthCheck']]:
        """
        Health check list. The structure of `health_check` block is documented below.
        """
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> Optional[int]:
        """
        Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
        """
        return pulumi.get(self, "hold_down_time")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        SD-WAN rule ID (1 - 4000).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> Optional[str]:
        """
        Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "input_device_negate")

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Optional[Sequence['outputs.SdwanServiceInputDevice']]:
        """
        Source interface name. The structure of `input_device` block is documented below.
        """
        return pulumi.get(self, "input_devices")

    @property
    @pulumi.getter(name="inputZones")
    def input_zones(self) -> Optional[Sequence['outputs.SdwanServiceInputZone']]:
        """
        Source input-zone name. The structure of `input_zone` block is documented below.
        """
        return pulumi.get(self, "input_zones")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[str]:
        """
        Enable/disable use of Internet service for application-based load balancing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetServiceAppCtrlCategories")
    def internet_service_app_ctrl_categories(self) -> Optional[Sequence['outputs.SdwanServiceInternetServiceAppCtrlCategory']]:
        """
        IDs of one or more application control categories. The structure of `internet_service_app_ctrl_category` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrl_categories")

    @property
    @pulumi.getter(name="internetServiceAppCtrlGroups")
    def internet_service_app_ctrl_groups(self) -> Optional[Sequence['outputs.SdwanServiceInternetServiceAppCtrlGroup']]:
        """
        Application control based Internet Service group list. The structure of `internet_service_app_ctrl_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrl_groups")

    @property
    @pulumi.getter(name="internetServiceAppCtrls")
    def internet_service_app_ctrls(self) -> Optional[Sequence['outputs.SdwanServiceInternetServiceAppCtrl']]:
        """
        Application control based Internet Service ID list. The structure of `internet_service_app_ctrl` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrls")

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[Sequence['outputs.SdwanServiceInternetServiceCustomGroup']]:
        """
        Custom Internet Service group list. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[Sequence['outputs.SdwanServiceInternetServiceCustom']]:
        """
        Custom Internet service name list. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[Sequence['outputs.SdwanServiceInternetServiceGroup']]:
        """
        Internet Service group list. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[Sequence['outputs.SdwanServiceInternetServiceName']]:
        """
        Internet service name list. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="jitterWeight")
    def jitter_weight(self) -> Optional[int]:
        """
        Coefficient of jitter in the formula of custom-profile-1.
        """
        return pulumi.get(self, "jitter_weight")

    @property
    @pulumi.getter(name="latencyWeight")
    def latency_weight(self) -> Optional[int]:
        """
        Coefficient of latency in the formula of custom-profile-1.
        """
        return pulumi.get(self, "latency_weight")

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[str]:
        """
        Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        """
        return pulumi.get(self, "link_cost_factor")

    @property
    @pulumi.getter(name="linkCostThreshold")
    def link_cost_threshold(self) -> Optional[int]:
        """
        Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
        """
        return pulumi.get(self, "link_cost_threshold")

    @property
    @pulumi.getter(name="loadBalance")
    def load_balance(self) -> Optional[str]:
        """
        Enable/disable load-balance. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "load_balance")

    @property
    @pulumi.getter(name="minimumSlaMeetMembers")
    def minimum_sla_meet_members(self) -> Optional[int]:
        """
        Minimum number of members which meet SLA.
        """
        return pulumi.get(self, "minimum_sla_meet_members")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Control how the SD-WAN rule sets the priority of interfaces in the SD-WAN.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetLossWeight")
    def packet_loss_weight(self) -> Optional[int]:
        """
        Coefficient of packet-loss in the formula of custom-profile-1.
        """
        return pulumi.get(self, "packet_loss_weight")

    @property
    @pulumi.getter(name="passiveMeasurement")
    def passive_measurement(self) -> Optional[str]:
        """
        Enable/disable passive measurement based on the service criteria. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive_measurement")

    @property
    @pulumi.getter(name="priorityMembers")
    def priority_members(self) -> Optional[Sequence['outputs.SdwanServicePriorityMember']]:
        """
        Member sequence number list. The structure of `priority_members` block is documented below.
        """
        return pulumi.get(self, "priority_members")

    @property
    @pulumi.getter(name="priorityZones")
    def priority_zones(self) -> Optional[Sequence['outputs.SdwanServicePriorityZone']]:
        """
        Priority zone name list. The structure of `priority_zone` block is documented below.
        """
        return pulumi.get(self, "priority_zones")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[int]:
        """
        Protocol number.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="qualityLink")
    def quality_link(self) -> Optional[int]:
        """
        Quality grade.
        """
        return pulumi.get(self, "quality_link")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> Optional[int]:
        """
        IPv4 route map route-tag.
        """
        return pulumi.get(self, "route_tag")

    @property
    @pulumi.getter
    def shortcut(self) -> Optional[str]:
        """
        Enable/disable shortcut for this service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "shortcut")

    @property
    @pulumi.getter(name="shortcutPriority")
    def shortcut_priority(self) -> Optional[str]:
        """
        High priority of ADVPN shortcut for this service. Valid values: `enable`, `disable`, `auto`.
        """
        return pulumi.get(self, "shortcut_priority")

    @property
    @pulumi.getter(name="shortcutStickiness")
    def shortcut_stickiness(self) -> Optional[str]:
        """
        Enable/disable shortcut-stickiness of ADVPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "shortcut_stickiness")

    @property
    @pulumi.getter(name="slaCompareMethod")
    def sla_compare_method(self) -> Optional[str]:
        """
        Method to compare SLA value for SLA mode. Valid values: `order`, `number`.
        """
        return pulumi.get(self, "sla_compare_method")

    @property
    @pulumi.getter(name="slaStickiness")
    def sla_stickiness(self) -> Optional[str]:
        """
        Enable/disable SLA stickiness (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sla_stickiness")

    @property
    @pulumi.getter
    def slas(self) -> Optional[Sequence['outputs.SdwanServiceSla']]:
        """
        Service level agreement (SLA). The structure of `sla` block is documented below.
        """
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter
    def src6s(self) -> Optional[Sequence['outputs.SdwanServiceSrc6']]:
        """
        Source address6 name. The structure of `src6` block is documented below.
        """
        return pulumi.get(self, "src6s")

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> Optional[str]:
        """
        Enable/disable negation of source address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "src_negate")

    @property
    @pulumi.getter
    def srcs(self) -> Optional[Sequence['outputs.SdwanServiceSrc']]:
        """
        Source address name. The structure of `src` block is documented below.
        """
        return pulumi.get(self, "srcs")

    @property
    @pulumi.getter(name="standaloneAction")
    def standalone_action(self) -> Optional[str]:
        """
        Enable/disable service when selected neighbor role is standalone while service role is not standalone. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "standalone_action")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        """
        Start destination port number.
        """
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter(name="startSrcPort")
    def start_src_port(self) -> Optional[int]:
        """
        Start source port number.
        """
        return pulumi.get(self, "start_src_port")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tieBreak")
    def tie_break(self) -> Optional[str]:
        """
        Method of selecting member if more than one meets the SLA.
        """
        return pulumi.get(self, "tie_break")

    @property
    @pulumi.getter
    def tos(self) -> Optional[str]:
        """
        Type of service bit pattern.
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[str]:
        """
        Type of service evaluated bits.
        """
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter(name="useShortcutSla")
    def use_shortcut_sla(self) -> Optional[str]:
        """
        Enable/disable use of ADVPN shortcut for quality comparison. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "use_shortcut_sla")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.SdwanServiceUser']]:
        """
        User name. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="zoneMode")
    def zone_mode(self) -> Optional[str]:
        """
        Enable/disable zone mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "zone_mode")


@pulumi.output_type
class SdwanServiceDst6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanServiceDst(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanServiceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanServiceHealthCheck(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Health check name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Health check name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanServiceInputDevice(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanServiceInputZone(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Zone.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Zone.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanServiceInternetServiceAppCtrl(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Application control based Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Application control based Internet Service ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SdwanServiceInternetServiceAppCtrlCategory(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Application control category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Application control category ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SdwanServiceInternetServiceAppCtrlGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Application control based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Application control based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanServiceInternetServiceCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Custom Internet service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Custom Internet service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanServiceInternetServiceCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Custom Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Custom Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanServiceInternetServiceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanServiceInternetServiceName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Internet service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Internet service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanServicePriorityMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "seqNum":
            suggest = "seq_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdwanServicePriorityMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdwanServicePriorityMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdwanServicePriorityMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 seq_num: Optional[int] = None):
        """
        :param int seq_num: Member sequence number.
        """
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class SdwanServicePriorityZone(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Priority zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Priority zone name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanServiceSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthCheck":
            suggest = "health_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdwanServiceSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdwanServiceSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdwanServiceSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 health_check: Optional[str] = None,
                 id: Optional[int] = None):
        """
        :param str health_check: SD-WAN health-check.
        :param int id: SLA ID.
        """
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[str]:
        """
        SD-WAN health-check.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SdwanServiceSrc6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanServiceSrc(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address6 or address6 group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address6 or address6 group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanServiceUser(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: User name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        User name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SdwanZone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advpnHealthCheck":
            suggest = "advpn_health_check"
        elif key == "advpnSelect":
            suggest = "advpn_select"
        elif key == "minimumSlaMeetMembers":
            suggest = "minimum_sla_meet_members"
        elif key == "serviceSlaTieBreak":
            suggest = "service_sla_tie_break"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SdwanZone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SdwanZone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SdwanZone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advpn_health_check: Optional[str] = None,
                 advpn_select: Optional[str] = None,
                 minimum_sla_meet_members: Optional[int] = None,
                 name: Optional[str] = None,
                 service_sla_tie_break: Optional[str] = None):
        """
        :param str advpn_health_check: Health check for ADVPN local overlay link quality.
        :param str advpn_select: Enable/disable selection of ADVPN based on SDWAN information. Valid values: `enable`, `disable`.
        :param int minimum_sla_meet_members: Minimum number of members which meet SLA when the neighbor is preferred.
        :param str name: Zone name.
        :param str service_sla_tie_break: Method of selecting member if more than one meets the SLA.
        """
        if advpn_health_check is not None:
            pulumi.set(__self__, "advpn_health_check", advpn_health_check)
        if advpn_select is not None:
            pulumi.set(__self__, "advpn_select", advpn_select)
        if minimum_sla_meet_members is not None:
            pulumi.set(__self__, "minimum_sla_meet_members", minimum_sla_meet_members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_sla_tie_break is not None:
            pulumi.set(__self__, "service_sla_tie_break", service_sla_tie_break)

    @property
    @pulumi.getter(name="advpnHealthCheck")
    def advpn_health_check(self) -> Optional[str]:
        """
        Health check for ADVPN local overlay link quality.
        """
        return pulumi.get(self, "advpn_health_check")

    @property
    @pulumi.getter(name="advpnSelect")
    def advpn_select(self) -> Optional[str]:
        """
        Enable/disable selection of ADVPN based on SDWAN information. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "advpn_select")

    @property
    @pulumi.getter(name="minimumSlaMeetMembers")
    def minimum_sla_meet_members(self) -> Optional[int]:
        """
        Minimum number of members which meet SLA when the neighbor is preferred.
        """
        return pulumi.get(self, "minimum_sla_meet_members")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Zone name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceSlaTieBreak")
    def service_sla_tie_break(self) -> Optional[str]:
        """
        Method of selecting member if more than one meets the SLA.
        """
        return pulumi.get(self, "service_sla_tie_break")


@pulumi.output_type
class SessionttlPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "refreshDirection":
            suggest = "refresh_direction"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SessionttlPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SessionttlPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SessionttlPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: Optional[int] = None,
                 id: Optional[int] = None,
                 protocol: Optional[int] = None,
                 refresh_direction: Optional[str] = None,
                 start_port: Optional[int] = None,
                 timeout: Optional[str] = None):
        """
        :param int end_port: End port number.
        :param int id: Table entry ID.
        :param int protocol: Protocol (0 - 255).
        :param str refresh_direction: Refresh direction: Both, outgoing, incoming Valid values: `both`, `outgoing`, `incoming`.
        :param int start_port: Start port number.
        :param str timeout: Session timeout (TTL).
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if refresh_direction is not None:
            pulumi.set(__self__, "refresh_direction", refresh_direction)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        """
        End port number.
        """
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Table entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[int]:
        """
        Protocol (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="refreshDirection")
    def refresh_direction(self) -> Optional[str]:
        """
        Refresh direction: Both, outgoing, incoming Valid values: `both`, `outgoing`, `incoming`.
        """
        return pulumi.get(self, "refresh_direction")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        """
        Start port number.
        """
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        """
        Session timeout (TTL).
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class SettingsGuiDefaultPolicyColumn(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Select column name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Select column name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SflowCollector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "collectorIp":
            suggest = "collector_ip"
        elif key == "collectorPort":
            suggest = "collector_port"
        elif key == "interfaceSelectMethod":
            suggest = "interface_select_method"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SflowCollector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SflowCollector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SflowCollector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collector_ip: Optional[str] = None,
                 collector_port: Optional[int] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 interface_select_method: Optional[str] = None,
                 source_ip: Optional[str] = None):
        """
        :param str collector_ip: IP addresses of the sFlow collectors that sFlow agents added to interfaces in this VDOM send sFlow datagrams to.
        :param int collector_port: UDP port number used for sending sFlow datagrams (configure only if required by your sFlow collector or your network configuration) (0 - 65535, default = 6343).
        :param int id: ID.
        :param str interface: Specify outgoing interface to reach server.
        :param str interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param str source_ip: Source IP address for sFlow agent.
        """
        if collector_ip is not None:
            pulumi.set(__self__, "collector_ip", collector_ip)
        if collector_port is not None:
            pulumi.set(__self__, "collector_port", collector_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> Optional[str]:
        """
        IP addresses of the sFlow collectors that sFlow agents added to interfaces in this VDOM send sFlow datagrams to.
        """
        return pulumi.get(self, "collector_ip")

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> Optional[int]:
        """
        UDP port number used for sending sFlow datagrams (configure only if required by your sFlow collector or your network configuration) (0 - 65535, default = 6343).
        """
        return pulumi.get(self, "collector_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        """
        Source IP address for sFlow agent.
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class SpeedtestscheduleSchedule(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Name of a firewall recurring schedule.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of a firewall recurring schedule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SpeedtestserverHost(dict):
    def __init__(__self__, *,
                 distance: Optional[int] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 latitude: Optional[str] = None,
                 longitude: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 user: Optional[str] = None):
        """
        :param int distance: Speed test host distance.
        :param int id: Server host ID.
        :param str ip: Server host IPv4 address.
        :param str latitude: Speed test host latitude.
        :param str longitude: Speed test host longitude.
        :param str password: Speed test host password.
        :param int port: Server host port number to communicate with client.
        :param str user: Speed test host user name.
        """
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def distance(self) -> Optional[int]:
        """
        Speed test host distance.
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Server host ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        Server host IPv4 address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def latitude(self) -> Optional[str]:
        """
        Speed test host latitude.
        """
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> Optional[str]:
        """
        Speed test host longitude.
        """
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Speed test host password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Server host port number to communicate with client.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        Speed test host user name.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class SsoadminVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SsoforticloudadminVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SsofortigatecloudadminVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class StandaloneclusterClusterPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downIntfsBeforeSessSyncs":
            suggest = "down_intfs_before_sess_syncs"
        elif key == "hbInterval":
            suggest = "hb_interval"
        elif key == "hbLostThreshold":
            suggest = "hb_lost_threshold"
        elif key == "ipsecTunnelSync":
            suggest = "ipsec_tunnel_sync"
        elif key == "secondaryAddIpsecRoutes":
            suggest = "secondary_add_ipsec_routes"
        elif key == "sessionSyncFilter":
            suggest = "session_sync_filter"
        elif key == "syncId":
            suggest = "sync_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StandaloneclusterClusterPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StandaloneclusterClusterPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StandaloneclusterClusterPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 down_intfs_before_sess_syncs: Optional[Sequence['outputs.StandaloneclusterClusterPeerDownIntfsBeforeSessSync']] = None,
                 hb_interval: Optional[int] = None,
                 hb_lost_threshold: Optional[int] = None,
                 ipsec_tunnel_sync: Optional[str] = None,
                 peerip: Optional[str] = None,
                 peervd: Optional[str] = None,
                 secondary_add_ipsec_routes: Optional[str] = None,
                 session_sync_filter: Optional['outputs.StandaloneclusterClusterPeerSessionSyncFilter'] = None,
                 sync_id: Optional[int] = None,
                 syncvds: Optional[Sequence['outputs.StandaloneclusterClusterPeerSyncvd']] = None):
        """
        :param Sequence['StandaloneclusterClusterPeerDownIntfsBeforeSessSyncArgs'] down_intfs_before_sess_syncs: List of interfaces to be turned down before session synchronization is complete. The structure of `down_intfs_before_sess_sync` block is documented below.
        :param int hb_interval: Heartbeat interval (1 - 20 (100*ms). Increase to reduce false positives.
        :param int hb_lost_threshold: Lost heartbeat threshold (1 - 60). Increase to reduce false positives.
        :param str ipsec_tunnel_sync: Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
        :param str peerip: IP address of the interface on the peer unit that is used for the session synchronization link.
        :param str peervd: VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
        :param str secondary_add_ipsec_routes: Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        :param 'StandaloneclusterClusterPeerSessionSyncFilterArgs' session_sync_filter: Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `session_sync_filter` block is documented below.
        :param int sync_id: Sync ID.
        :param Sequence['StandaloneclusterClusterPeerSyncvdArgs'] syncvds: Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
        """
        if down_intfs_before_sess_syncs is not None:
            pulumi.set(__self__, "down_intfs_before_sess_syncs", down_intfs_before_sess_syncs)
        if hb_interval is not None:
            pulumi.set(__self__, "hb_interval", hb_interval)
        if hb_lost_threshold is not None:
            pulumi.set(__self__, "hb_lost_threshold", hb_lost_threshold)
        if ipsec_tunnel_sync is not None:
            pulumi.set(__self__, "ipsec_tunnel_sync", ipsec_tunnel_sync)
        if peerip is not None:
            pulumi.set(__self__, "peerip", peerip)
        if peervd is not None:
            pulumi.set(__self__, "peervd", peervd)
        if secondary_add_ipsec_routes is not None:
            pulumi.set(__self__, "secondary_add_ipsec_routes", secondary_add_ipsec_routes)
        if session_sync_filter is not None:
            pulumi.set(__self__, "session_sync_filter", session_sync_filter)
        if sync_id is not None:
            pulumi.set(__self__, "sync_id", sync_id)
        if syncvds is not None:
            pulumi.set(__self__, "syncvds", syncvds)

    @property
    @pulumi.getter(name="downIntfsBeforeSessSyncs")
    def down_intfs_before_sess_syncs(self) -> Optional[Sequence['outputs.StandaloneclusterClusterPeerDownIntfsBeforeSessSync']]:
        """
        List of interfaces to be turned down before session synchronization is complete. The structure of `down_intfs_before_sess_sync` block is documented below.
        """
        return pulumi.get(self, "down_intfs_before_sess_syncs")

    @property
    @pulumi.getter(name="hbInterval")
    def hb_interval(self) -> Optional[int]:
        """
        Heartbeat interval (1 - 20 (100*ms). Increase to reduce false positives.
        """
        return pulumi.get(self, "hb_interval")

    @property
    @pulumi.getter(name="hbLostThreshold")
    def hb_lost_threshold(self) -> Optional[int]:
        """
        Lost heartbeat threshold (1 - 60). Increase to reduce false positives.
        """
        return pulumi.get(self, "hb_lost_threshold")

    @property
    @pulumi.getter(name="ipsecTunnelSync")
    def ipsec_tunnel_sync(self) -> Optional[str]:
        """
        Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipsec_tunnel_sync")

    @property
    @pulumi.getter
    def peerip(self) -> Optional[str]:
        """
        IP address of the interface on the peer unit that is used for the session synchronization link.
        """
        return pulumi.get(self, "peerip")

    @property
    @pulumi.getter
    def peervd(self) -> Optional[str]:
        """
        VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
        """
        return pulumi.get(self, "peervd")

    @property
    @pulumi.getter(name="secondaryAddIpsecRoutes")
    def secondary_add_ipsec_routes(self) -> Optional[str]:
        """
        Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "secondary_add_ipsec_routes")

    @property
    @pulumi.getter(name="sessionSyncFilter")
    def session_sync_filter(self) -> Optional['outputs.StandaloneclusterClusterPeerSessionSyncFilter']:
        """
        Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `session_sync_filter` block is documented below.
        """
        return pulumi.get(self, "session_sync_filter")

    @property
    @pulumi.getter(name="syncId")
    def sync_id(self) -> Optional[int]:
        """
        Sync ID.
        """
        return pulumi.get(self, "sync_id")

    @property
    @pulumi.getter
    def syncvds(self) -> Optional[Sequence['outputs.StandaloneclusterClusterPeerSyncvd']]:
        """
        Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
        """
        return pulumi.get(self, "syncvds")


@pulumi.output_type
class StandaloneclusterClusterPeerDownIntfsBeforeSessSync(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class StandaloneclusterClusterPeerSessionSyncFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customServices":
            suggest = "custom_services"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StandaloneclusterClusterPeerSessionSyncFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StandaloneclusterClusterPeerSessionSyncFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StandaloneclusterClusterPeerSessionSyncFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_services: Optional[Sequence['outputs.StandaloneclusterClusterPeerSessionSyncFilterCustomService']] = None,
                 dstaddr: Optional[str] = None,
                 dstaddr6: Optional[str] = None,
                 dstintf: Optional[str] = None,
                 srcaddr: Optional[str] = None,
                 srcaddr6: Optional[str] = None,
                 srcintf: Optional[str] = None):
        """
        :param Sequence['StandaloneclusterClusterPeerSessionSyncFilterCustomServiceArgs'] custom_services: Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custom services. The structure of `custom_service` block is documented below.
        :param str dstaddr: Only sessions to this IPv4 address are synchronized.
        :param str dstaddr6: Only sessions to this IPv6 address are synchronized.
        :param str dstintf: Only sessions to this interface are synchronized.
        :param str srcaddr: Only sessions from this IPv4 address are synchronized.
        :param str srcaddr6: Only sessions from this IPv6 address are synchronized.
        :param str srcintf: Only sessions from this interface are synchronized.
        """
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstaddr6 is not None:
            pulumi.set(__self__, "dstaddr6", dstaddr6)
        if dstintf is not None:
            pulumi.set(__self__, "dstintf", dstintf)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcaddr6 is not None:
            pulumi.set(__self__, "srcaddr6", srcaddr6)
        if srcintf is not None:
            pulumi.set(__self__, "srcintf", srcintf)

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[Sequence['outputs.StandaloneclusterClusterPeerSessionSyncFilterCustomService']]:
        """
        Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custom services. The structure of `custom_service` block is documented below.
        """
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[str]:
        """
        Only sessions to this IPv4 address are synchronized.
        """
        return pulumi.get(self, "dstaddr")

    @property
    @pulumi.getter
    def dstaddr6(self) -> Optional[str]:
        """
        Only sessions to this IPv6 address are synchronized.
        """
        return pulumi.get(self, "dstaddr6")

    @property
    @pulumi.getter
    def dstintf(self) -> Optional[str]:
        """
        Only sessions to this interface are synchronized.
        """
        return pulumi.get(self, "dstintf")

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[str]:
        """
        Only sessions from this IPv4 address are synchronized.
        """
        return pulumi.get(self, "srcaddr")

    @property
    @pulumi.getter
    def srcaddr6(self) -> Optional[str]:
        """
        Only sessions from this IPv6 address are synchronized.
        """
        return pulumi.get(self, "srcaddr6")

    @property
    @pulumi.getter
    def srcintf(self) -> Optional[str]:
        """
        Only sessions from this interface are synchronized.
        """
        return pulumi.get(self, "srcintf")


@pulumi.output_type
class StandaloneclusterClusterPeerSessionSyncFilterCustomService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstPortRange":
            suggest = "dst_port_range"
        elif key == "srcPortRange":
            suggest = "src_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StandaloneclusterClusterPeerSessionSyncFilterCustomService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StandaloneclusterClusterPeerSessionSyncFilterCustomService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StandaloneclusterClusterPeerSessionSyncFilterCustomService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_port_range: Optional[str] = None,
                 id: Optional[int] = None,
                 src_port_range: Optional[str] = None):
        """
        :param str dst_port_range: Custom service destination port range.
        :param int id: Custom service ID.
        :param str src_port_range: Custom service source port range.
        """
        if dst_port_range is not None:
            pulumi.set(__self__, "dst_port_range", dst_port_range)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_port_range is not None:
            pulumi.set(__self__, "src_port_range", src_port_range)

    @property
    @pulumi.getter(name="dstPortRange")
    def dst_port_range(self) -> Optional[str]:
        """
        Custom service destination port range.
        """
        return pulumi.get(self, "dst_port_range")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Custom service ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="srcPortRange")
    def src_port_range(self) -> Optional[str]:
        """
        Custom service source port range.
        """
        return pulumi.get(self, "src_port_range")


@pulumi.output_type
class StandaloneclusterClusterPeerSyncvd(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: VDOM name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        VDOM name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SwitchinterfaceMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchinterfaceMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchinterfaceMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchinterfaceMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        """
        :param str interface_name: Physical interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class SwitchinterfaceSpanSourcePort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchinterfaceSpanSourcePort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchinterfaceSpanSourcePort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchinterfaceSpanSourcePort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        """
        :param str interface_name: Physical interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class VdomdnsServerHostname(dict):
    def __init__(__self__, *,
                 hostname: Optional[str] = None):
        """
        :param str hostname: DNS server host name list separated by space (maximum 4 domains).
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        DNS server host name list separated by space (maximum 4 domains).
        """
        return pulumi.get(self, "hostname")


@pulumi.output_type
class VdomexceptionVdom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: VDOM name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        VDOM name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VdomnetflowCollector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "collectorIp":
            suggest = "collector_ip"
        elif key == "collectorPort":
            suggest = "collector_port"
        elif key == "interfaceSelectMethod":
            suggest = "interface_select_method"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VdomnetflowCollector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VdomnetflowCollector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VdomnetflowCollector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collector_ip: Optional[str] = None,
                 collector_port: Optional[int] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 interface_select_method: Optional[str] = None,
                 source_ip: Optional[str] = None):
        """
        :param str collector_ip: Collector IP.
        :param int collector_port: NetFlow collector port number.
        :param int id: ID.
        :param str interface: Specify outgoing interface to reach server.
        :param str interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param str source_ip: Source IP address for communication with the NetFlow agent.
        """
        if collector_ip is not None:
            pulumi.set(__self__, "collector_ip", collector_ip)
        if collector_port is not None:
            pulumi.set(__self__, "collector_port", collector_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> Optional[str]:
        """
        Collector IP.
        """
        return pulumi.get(self, "collector_ip")

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> Optional[int]:
        """
        NetFlow collector port number.
        """
        return pulumi.get(self, "collector_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        """
        Source IP address for communication with the NetFlow agent.
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class VdomsflowCollector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "collectorIp":
            suggest = "collector_ip"
        elif key == "collectorPort":
            suggest = "collector_port"
        elif key == "interfaceSelectMethod":
            suggest = "interface_select_method"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VdomsflowCollector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VdomsflowCollector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VdomsflowCollector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collector_ip: Optional[str] = None,
                 collector_port: Optional[int] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 interface_select_method: Optional[str] = None,
                 source_ip: Optional[str] = None):
        """
        :param str collector_ip: IP addresses of the sFlow collectors that sFlow agents added to interfaces in this VDOM send sFlow datagrams to.
        :param int collector_port: UDP port number used for sending sFlow datagrams (configure only if required by your sFlow collector or your network configuration) (0 - 65535, default = 6343).
        :param int id: ID.
        :param str interface: Specify outgoing interface to reach server.
        :param str interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param str source_ip: Source IP address for sFlow agent.
        """
        if collector_ip is not None:
            pulumi.set(__self__, "collector_ip", collector_ip)
        if collector_port is not None:
            pulumi.set(__self__, "collector_port", collector_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> Optional[str]:
        """
        IP addresses of the sFlow collectors that sFlow agents added to interfaces in this VDOM send sFlow datagrams to.
        """
        return pulumi.get(self, "collector_ip")

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> Optional[int]:
        """
        UDP port number used for sending sFlow datagrams (configure only if required by your sFlow collector or your network configuration) (0 - 65535, default = 6343).
        """
        return pulumi.get(self, "collector_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        """
        Source IP address for sFlow agent.
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class VirtualswitchPort(dict):
    def __init__(__self__, *,
                 alias: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str alias: Alias.
        :param str name: Physical interface name.
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        """
        Alias.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkFailAlertInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Physical interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrMode":
            suggest = "addr_mode"
        elif key == "dnsRequestDomain":
            suggest = "dns_request_domain"
        elif key == "haPriority":
            suggest = "ha_priority"
        elif key == "httpAgent":
            suggest = "http_agent"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "httpMatch":
            suggest = "http_match"
        elif key == "packetSize":
            suggest = "packet_size"
        elif key == "probeCount":
            suggest = "probe_count"
        elif key == "probePackets":
            suggest = "probe_packets"
        elif key == "probeTimeout":
            suggest = "probe_timeout"
        elif key == "securityMode":
            suggest = "security_mode"
        elif key == "slaFailLogPeriod":
            suggest = "sla_fail_log_period"
        elif key == "slaPassLogPeriod":
            suggest = "sla_pass_log_period"
        elif key == "systemDns":
            suggest = "system_dns"
        elif key == "thresholdAlertJitter":
            suggest = "threshold_alert_jitter"
        elif key == "thresholdAlertLatency":
            suggest = "threshold_alert_latency"
        elif key == "thresholdAlertPacketloss":
            suggest = "threshold_alert_packetloss"
        elif key == "thresholdWarningJitter":
            suggest = "threshold_warning_jitter"
        elif key == "thresholdWarningLatency":
            suggest = "threshold_warning_latency"
        elif key == "thresholdWarningPacketloss":
            suggest = "threshold_warning_packetloss"
        elif key == "updateCascadeInterface":
            suggest = "update_cascade_interface"
        elif key == "updateStaticRoute":
            suggest = "update_static_route"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualwanlinkHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualwanlinkHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualwanlinkHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_mode: Optional[str] = None,
                 diffservcode: Optional[str] = None,
                 dns_request_domain: Optional[str] = None,
                 failtime: Optional[int] = None,
                 ha_priority: Optional[int] = None,
                 http_agent: Optional[str] = None,
                 http_get: Optional[str] = None,
                 http_match: Optional[str] = None,
                 interval: Optional[int] = None,
                 members: Optional[Sequence['outputs.VirtualwanlinkHealthCheckMember']] = None,
                 name: Optional[str] = None,
                 packet_size: Optional[int] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 probe_count: Optional[int] = None,
                 probe_packets: Optional[str] = None,
                 probe_timeout: Optional[int] = None,
                 protocol: Optional[str] = None,
                 recoverytime: Optional[int] = None,
                 security_mode: Optional[str] = None,
                 server: Optional[str] = None,
                 sla_fail_log_period: Optional[int] = None,
                 sla_pass_log_period: Optional[int] = None,
                 slas: Optional[Sequence['outputs.VirtualwanlinkHealthCheckSla']] = None,
                 system_dns: Optional[str] = None,
                 threshold_alert_jitter: Optional[int] = None,
                 threshold_alert_latency: Optional[int] = None,
                 threshold_alert_packetloss: Optional[int] = None,
                 threshold_warning_jitter: Optional[int] = None,
                 threshold_warning_latency: Optional[int] = None,
                 threshold_warning_packetloss: Optional[int] = None,
                 update_cascade_interface: Optional[str] = None,
                 update_static_route: Optional[str] = None):
        """
        :param str addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param str diffservcode: Differentiated services code point (DSCP) in the IP header of the probe packet.
        :param str dns_request_domain: Fully qualified domain name to resolve for the DNS probe.
        :param int failtime: Number of failures before server is considered lost (1 - 3600, default = 5).
        :param int ha_priority: HA election priority (1 - 50).
        :param str http_agent: String in the http-agent field in the HTTP header.
        :param str http_get: URL used to communicate with the server if the protocol if the protocol is HTTP.
        :param str http_match: Response string expected from the server if the protocol is HTTP.
        :param int interval: Status check interval, or the time between attempting to connect to the server (1 - 3600 sec, default = 5).
        :param Sequence['VirtualwanlinkHealthCheckMemberArgs'] members: Member sequence number list. The structure of `members` block is documented below.
        :param str name: Status check or health check name.
        :param int packet_size: Packet size of a twamp test session,
        :param str password: Twamp controller password in authentication mode
        :param int port: Port number used to communicate with the server over the selected protocol.
        :param int probe_count: Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        :param str probe_packets: Enable/disable transmission of probe packets. Valid values: `disable`, `enable`.
        :param int probe_timeout: Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        :param str protocol: Protocol used to determine if the FortiGate can communicate with the server.
        :param int recoverytime: Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
        :param str security_mode: Twamp controller security mode. Valid values: `none`, `authentication`.
        :param str server: IP address or FQDN name of the server.
        :param int sla_fail_log_period: Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
        :param int sla_pass_log_period: Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
        :param Sequence['VirtualwanlinkHealthCheckSlaArgs'] slas: Service level agreement (SLA). The structure of `sla` block is documented below.
        :param str system_dns: Enable/disable system DNS as the probe server. Valid values: `disable`, `enable`.
        :param int threshold_alert_jitter: Alert threshold for jitter (ms, default = 0).
        :param int threshold_alert_latency: Alert threshold for latency (ms, default = 0).
        :param int threshold_alert_packetloss: Alert threshold for packet loss (percentage, default = 0).
        :param int threshold_warning_jitter: Warning threshold for jitter (ms, default = 0).
        :param int threshold_warning_latency: Warning threshold for latency (ms, default = 0).
        :param int threshold_warning_packetloss: Warning threshold for packet loss (percentage, default = 0).
        :param str update_cascade_interface: Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        :param str update_static_route: Enable/disable updating the static route. Valid values: `enable`, `disable`.
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dns_request_domain is not None:
            pulumi.set(__self__, "dns_request_domain", dns_request_domain)
        if failtime is not None:
            pulumi.set(__self__, "failtime", failtime)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if http_agent is not None:
            pulumi.set(__self__, "http_agent", http_agent)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if http_match is not None:
            pulumi.set(__self__, "http_match", http_match)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_size is not None:
            pulumi.set(__self__, "packet_size", packet_size)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if probe_count is not None:
            pulumi.set(__self__, "probe_count", probe_count)
        if probe_packets is not None:
            pulumi.set(__self__, "probe_packets", probe_packets)
        if probe_timeout is not None:
            pulumi.set(__self__, "probe_timeout", probe_timeout)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if recoverytime is not None:
            pulumi.set(__self__, "recoverytime", recoverytime)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if sla_fail_log_period is not None:
            pulumi.set(__self__, "sla_fail_log_period", sla_fail_log_period)
        if sla_pass_log_period is not None:
            pulumi.set(__self__, "sla_pass_log_period", sla_pass_log_period)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if system_dns is not None:
            pulumi.set(__self__, "system_dns", system_dns)
        if threshold_alert_jitter is not None:
            pulumi.set(__self__, "threshold_alert_jitter", threshold_alert_jitter)
        if threshold_alert_latency is not None:
            pulumi.set(__self__, "threshold_alert_latency", threshold_alert_latency)
        if threshold_alert_packetloss is not None:
            pulumi.set(__self__, "threshold_alert_packetloss", threshold_alert_packetloss)
        if threshold_warning_jitter is not None:
            pulumi.set(__self__, "threshold_warning_jitter", threshold_warning_jitter)
        if threshold_warning_latency is not None:
            pulumi.set(__self__, "threshold_warning_latency", threshold_warning_latency)
        if threshold_warning_packetloss is not None:
            pulumi.set(__self__, "threshold_warning_packetloss", threshold_warning_packetloss)
        if update_cascade_interface is not None:
            pulumi.set(__self__, "update_cascade_interface", update_cascade_interface)
        if update_static_route is not None:
            pulumi.set(__self__, "update_static_route", update_static_route)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[str]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[str]:
        """
        Differentiated services code point (DSCP) in the IP header of the probe packet.
        """
        return pulumi.get(self, "diffservcode")

    @property
    @pulumi.getter(name="dnsRequestDomain")
    def dns_request_domain(self) -> Optional[str]:
        """
        Fully qualified domain name to resolve for the DNS probe.
        """
        return pulumi.get(self, "dns_request_domain")

    @property
    @pulumi.getter
    def failtime(self) -> Optional[int]:
        """
        Number of failures before server is considered lost (1 - 3600, default = 5).
        """
        return pulumi.get(self, "failtime")

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[int]:
        """
        HA election priority (1 - 50).
        """
        return pulumi.get(self, "ha_priority")

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> Optional[str]:
        """
        String in the http-agent field in the HTTP header.
        """
        return pulumi.get(self, "http_agent")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[str]:
        """
        URL used to communicate with the server if the protocol if the protocol is HTTP.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> Optional[str]:
        """
        Response string expected from the server if the protocol is HTTP.
        """
        return pulumi.get(self, "http_match")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        Status check interval, or the time between attempting to connect to the server (1 - 3600 sec, default = 5).
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.VirtualwanlinkHealthCheckMember']]:
        """
        Member sequence number list. The structure of `members` block is documented below.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Status check or health check name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> Optional[int]:
        """
        Packet size of a twamp test session,
        """
        return pulumi.get(self, "packet_size")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Twamp controller password in authentication mode
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port number used to communicate with the server over the selected protocol.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> Optional[int]:
        """
        Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        """
        return pulumi.get(self, "probe_count")

    @property
    @pulumi.getter(name="probePackets")
    def probe_packets(self) -> Optional[str]:
        """
        Enable/disable transmission of probe packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "probe_packets")

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> Optional[int]:
        """
        Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        """
        return pulumi.get(self, "probe_timeout")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol used to determine if the FortiGate can communicate with the server.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def recoverytime(self) -> Optional[int]:
        """
        Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
        """
        return pulumi.get(self, "recoverytime")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        """
        Twamp controller security mode. Valid values: `none`, `authentication`.
        """
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        IP address or FQDN name of the server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="slaFailLogPeriod")
    def sla_fail_log_period(self) -> Optional[int]:
        """
        Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "sla_fail_log_period")

    @property
    @pulumi.getter(name="slaPassLogPeriod")
    def sla_pass_log_period(self) -> Optional[int]:
        """
        Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "sla_pass_log_period")

    @property
    @pulumi.getter
    def slas(self) -> Optional[Sequence['outputs.VirtualwanlinkHealthCheckSla']]:
        """
        Service level agreement (SLA). The structure of `sla` block is documented below.
        """
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="systemDns")
    def system_dns(self) -> Optional[str]:
        """
        Enable/disable system DNS as the probe server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "system_dns")

    @property
    @pulumi.getter(name="thresholdAlertJitter")
    def threshold_alert_jitter(self) -> Optional[int]:
        """
        Alert threshold for jitter (ms, default = 0).
        """
        return pulumi.get(self, "threshold_alert_jitter")

    @property
    @pulumi.getter(name="thresholdAlertLatency")
    def threshold_alert_latency(self) -> Optional[int]:
        """
        Alert threshold for latency (ms, default = 0).
        """
        return pulumi.get(self, "threshold_alert_latency")

    @property
    @pulumi.getter(name="thresholdAlertPacketloss")
    def threshold_alert_packetloss(self) -> Optional[int]:
        """
        Alert threshold for packet loss (percentage, default = 0).
        """
        return pulumi.get(self, "threshold_alert_packetloss")

    @property
    @pulumi.getter(name="thresholdWarningJitter")
    def threshold_warning_jitter(self) -> Optional[int]:
        """
        Warning threshold for jitter (ms, default = 0).
        """
        return pulumi.get(self, "threshold_warning_jitter")

    @property
    @pulumi.getter(name="thresholdWarningLatency")
    def threshold_warning_latency(self) -> Optional[int]:
        """
        Warning threshold for latency (ms, default = 0).
        """
        return pulumi.get(self, "threshold_warning_latency")

    @property
    @pulumi.getter(name="thresholdWarningPacketloss")
    def threshold_warning_packetloss(self) -> Optional[int]:
        """
        Warning threshold for packet loss (percentage, default = 0).
        """
        return pulumi.get(self, "threshold_warning_packetloss")

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> Optional[str]:
        """
        Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_cascade_interface")

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> Optional[str]:
        """
        Enable/disable updating the static route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_static_route")


@pulumi.output_type
class VirtualwanlinkHealthCheckMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "seqNum":
            suggest = "seq_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualwanlinkHealthCheckMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualwanlinkHealthCheckMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualwanlinkHealthCheckMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 seq_num: Optional[int] = None):
        """
        :param int seq_num: Member sequence number.
        """
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class VirtualwanlinkHealthCheckSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jitterThreshold":
            suggest = "jitter_threshold"
        elif key == "latencyThreshold":
            suggest = "latency_threshold"
        elif key == "linkCostFactor":
            suggest = "link_cost_factor"
        elif key == "packetlossThreshold":
            suggest = "packetloss_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualwanlinkHealthCheckSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualwanlinkHealthCheckSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualwanlinkHealthCheckSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 jitter_threshold: Optional[int] = None,
                 latency_threshold: Optional[int] = None,
                 link_cost_factor: Optional[str] = None,
                 packetloss_threshold: Optional[int] = None):
        """
        :param int id: SLA ID.
        :param int jitter_threshold: Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        :param int latency_threshold: Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        :param str link_cost_factor: Criteria on which to base link selection. Valid values: `latency`, `jitter`, `packet-loss`.
        :param int packetloss_threshold: Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if jitter_threshold is not None:
            pulumi.set(__self__, "jitter_threshold", jitter_threshold)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if packetloss_threshold is not None:
            pulumi.set(__self__, "packetloss_threshold", packetloss_threshold)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jitterThreshold")
    def jitter_threshold(self) -> Optional[int]:
        """
        Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        """
        return pulumi.get(self, "jitter_threshold")

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[int]:
        """
        Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        """
        return pulumi.get(self, "latency_threshold")

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[str]:
        """
        Criteria on which to base link selection. Valid values: `latency`, `jitter`, `packet-loss`.
        """
        return pulumi.get(self, "link_cost_factor")

    @property
    @pulumi.getter(name="packetlossThreshold")
    def packetloss_threshold(self) -> Optional[int]:
        """
        Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
        """
        return pulumi.get(self, "packetloss_threshold")


@pulumi.output_type
class VirtualwanlinkMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressSpilloverThreshold":
            suggest = "ingress_spillover_threshold"
        elif key == "seqNum":
            suggest = "seq_num"
        elif key == "spilloverThreshold":
            suggest = "spillover_threshold"
        elif key == "volumeRatio":
            suggest = "volume_ratio"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualwanlinkMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualwanlinkMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualwanlinkMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 cost: Optional[int] = None,
                 gateway: Optional[str] = None,
                 gateway6: Optional[str] = None,
                 ingress_spillover_threshold: Optional[int] = None,
                 interface: Optional[str] = None,
                 priority: Optional[int] = None,
                 seq_num: Optional[int] = None,
                 source: Optional[str] = None,
                 source6: Optional[str] = None,
                 spillover_threshold: Optional[int] = None,
                 status: Optional[str] = None,
                 volume_ratio: Optional[int] = None,
                 weight: Optional[int] = None):
        """
        :param str comment: Comments.
        :param int cost: Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
        :param str gateway: The default gateway for this interface. Usually the default gateway of the Internet service provider that this interface is connected to.
        :param str gateway6: IPv6 gateway.
        :param int ingress_spillover_threshold: Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        :param str interface: Interface name.
        :param int priority: Priority of the interface (0 - 4294967295). Used for SD-WAN rules or priority rules.
        :param int seq_num: Member sequence number.
        :param str source: Source IP address used in the health-check packet to the server.
        :param str source6: Source IPv6 address used in the health-check packet to the server.
        :param int spillover_threshold: Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        :param str status: Enable/disable this interface in the SD-WAN. Valid values: `disable`, `enable`.
        :param int volume_ratio: Measured volume ratio (this value / sum of all values = percentage of link volume, 0 - 255).
        :param int weight: Weight of this interface for weighted load balancing. (0 - 255) More traffic is directed to interfaces with higher weights.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ingress_spillover_threshold is not None:
            pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source6 is not None:
            pulumi.set(__self__, "source6", source6)
        if spillover_threshold is not None:
            pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if volume_ratio is not None:
            pulumi.set(__self__, "volume_ratio", volume_ratio)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Comments.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        """
        Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        The default gateway for this interface. Usually the default gateway of the Internet service provider that this interface is connected to.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[str]:
        """
        IPv6 gateway.
        """
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> Optional[int]:
        """
        Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        """
        return pulumi.get(self, "ingress_spillover_threshold")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Priority of the interface (0 - 4294967295). Used for SD-WAN rules or priority rules.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        Source IP address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def source6(self) -> Optional[str]:
        """
        Source IPv6 address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source6")

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> Optional[int]:
        """
        Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        """
        return pulumi.get(self, "spillover_threshold")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable this interface in the SD-WAN. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="volumeRatio")
    def volume_ratio(self) -> Optional[int]:
        """
        Measured volume ratio (this value / sum of all values = percentage of link volume, 0 - 255).
        """
        return pulumi.get(self, "volume_ratio")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight of this interface for weighted load balancing. (0 - 255) More traffic is directed to interfaces with higher weights.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class VirtualwanlinkNeighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthCheck":
            suggest = "health_check"
        elif key == "slaId":
            suggest = "sla_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualwanlinkNeighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualwanlinkNeighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualwanlinkNeighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 health_check: Optional[str] = None,
                 ip: Optional[str] = None,
                 member: Optional[int] = None,
                 role: Optional[str] = None,
                 sla_id: Optional[int] = None):
        """
        :param str health_check: SD-WAN health-check name.
        :param str ip: IP address of neighbor.
        :param int member: Member sequence number.
        :param str role: Role of neighbor. Valid values: `standalone`, `primary`, `secondary`.
        :param int sla_id: SLA ID.
        """
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[str]:
        """
        SD-WAN health-check name.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IP address of neighbor.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def member(self) -> Optional[int]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "member")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role of neighbor. Valid values: `standalone`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[int]:
        """
        SLA ID.
        """
        return pulumi.get(self, "sla_id")


@pulumi.output_type
class VirtualwanlinkService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addrMode":
            suggest = "addr_mode"
        elif key == "bandwidthWeight":
            suggest = "bandwidth_weight"
        elif key == "dscpForward":
            suggest = "dscp_forward"
        elif key == "dscpForwardTag":
            suggest = "dscp_forward_tag"
        elif key == "dscpReverse":
            suggest = "dscp_reverse"
        elif key == "dscpReverseTag":
            suggest = "dscp_reverse_tag"
        elif key == "dstNegate":
            suggest = "dst_negate"
        elif key == "endPort":
            suggest = "end_port"
        elif key == "healthCheck":
            suggest = "health_check"
        elif key == "holdDownTime":
            suggest = "hold_down_time"
        elif key == "inputDeviceNegate":
            suggest = "input_device_negate"
        elif key == "inputDevices":
            suggest = "input_devices"
        elif key == "internetService":
            suggest = "internet_service"
        elif key == "internetServiceAppCtrlGroups":
            suggest = "internet_service_app_ctrl_groups"
        elif key == "internetServiceAppCtrls":
            suggest = "internet_service_app_ctrls"
        elif key == "internetServiceCtrlGroups":
            suggest = "internet_service_ctrl_groups"
        elif key == "internetServiceCtrls":
            suggest = "internet_service_ctrls"
        elif key == "internetServiceCustomGroups":
            suggest = "internet_service_custom_groups"
        elif key == "internetServiceCustoms":
            suggest = "internet_service_customs"
        elif key == "internetServiceGroups":
            suggest = "internet_service_groups"
        elif key == "internetServiceIds":
            suggest = "internet_service_ids"
        elif key == "internetServiceNames":
            suggest = "internet_service_names"
        elif key == "jitterWeight":
            suggest = "jitter_weight"
        elif key == "latencyWeight":
            suggest = "latency_weight"
        elif key == "linkCostFactor":
            suggest = "link_cost_factor"
        elif key == "linkCostThreshold":
            suggest = "link_cost_threshold"
        elif key == "packetLossWeight":
            suggest = "packet_loss_weight"
        elif key == "priorityMembers":
            suggest = "priority_members"
        elif key == "qualityLink":
            suggest = "quality_link"
        elif key == "routeTag":
            suggest = "route_tag"
        elif key == "slaCompareMethod":
            suggest = "sla_compare_method"
        elif key == "srcNegate":
            suggest = "src_negate"
        elif key == "standaloneAction":
            suggest = "standalone_action"
        elif key == "startPort":
            suggest = "start_port"
        elif key == "tosMask":
            suggest = "tos_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualwanlinkService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualwanlinkService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualwanlinkService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr_mode: Optional[str] = None,
                 bandwidth_weight: Optional[int] = None,
                 default: Optional[str] = None,
                 dscp_forward: Optional[str] = None,
                 dscp_forward_tag: Optional[str] = None,
                 dscp_reverse: Optional[str] = None,
                 dscp_reverse_tag: Optional[str] = None,
                 dst6s: Optional[Sequence['outputs.VirtualwanlinkServiceDst6']] = None,
                 dst_negate: Optional[str] = None,
                 dsts: Optional[Sequence['outputs.VirtualwanlinkServiceDst']] = None,
                 end_port: Optional[int] = None,
                 gateway: Optional[str] = None,
                 groups: Optional[Sequence['outputs.VirtualwanlinkServiceGroup']] = None,
                 health_check: Optional[str] = None,
                 hold_down_time: Optional[int] = None,
                 id: Optional[int] = None,
                 input_device_negate: Optional[str] = None,
                 input_devices: Optional[Sequence['outputs.VirtualwanlinkServiceInputDevice']] = None,
                 internet_service: Optional[str] = None,
                 internet_service_app_ctrl_groups: Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceAppCtrlGroup']] = None,
                 internet_service_app_ctrls: Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceAppCtrl']] = None,
                 internet_service_ctrl_groups: Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceCtrlGroup']] = None,
                 internet_service_ctrls: Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceCtrl']] = None,
                 internet_service_custom_groups: Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceCustomGroup']] = None,
                 internet_service_customs: Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceCustom']] = None,
                 internet_service_groups: Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceGroup']] = None,
                 internet_service_ids: Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceId']] = None,
                 internet_service_names: Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceName']] = None,
                 jitter_weight: Optional[int] = None,
                 latency_weight: Optional[int] = None,
                 link_cost_factor: Optional[str] = None,
                 link_cost_threshold: Optional[int] = None,
                 member: Optional[int] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None,
                 packet_loss_weight: Optional[int] = None,
                 priority_members: Optional[Sequence['outputs.VirtualwanlinkServicePriorityMember']] = None,
                 protocol: Optional[int] = None,
                 quality_link: Optional[int] = None,
                 role: Optional[str] = None,
                 route_tag: Optional[int] = None,
                 sla_compare_method: Optional[str] = None,
                 slas: Optional[Sequence['outputs.VirtualwanlinkServiceSla']] = None,
                 src6s: Optional[Sequence['outputs.VirtualwanlinkServiceSrc6']] = None,
                 src_negate: Optional[str] = None,
                 srcs: Optional[Sequence['outputs.VirtualwanlinkServiceSrc']] = None,
                 standalone_action: Optional[str] = None,
                 start_port: Optional[int] = None,
                 status: Optional[str] = None,
                 tos: Optional[str] = None,
                 tos_mask: Optional[str] = None,
                 users: Optional[Sequence['outputs.VirtualwanlinkServiceUser']] = None):
        """
        :param str addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param int bandwidth_weight: Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
        :param str default: Enable/disable use of SD-WAN as default service. Valid values: `enable`, `disable`.
        :param str dscp_forward: Enable/disable forward traffic DSCP tag. Valid values: `enable`, `disable`.
        :param str dscp_forward_tag: Forward traffic DSCP tag.
        :param str dscp_reverse: Enable/disable reverse traffic DSCP tag. Valid values: `enable`, `disable`.
        :param str dscp_reverse_tag: Reverse traffic DSCP tag.
        :param Sequence['VirtualwanlinkServiceDst6Args'] dst6s: Destination address6 name. The structure of `dst6` block is documented below.
        :param str dst_negate: Enable/disable negation of destination address match. Valid values: `enable`, `disable`.
        :param Sequence['VirtualwanlinkServiceDstArgs'] dsts: Destination address name. The structure of `dst` block is documented below.
        :param int end_port: End destination port number.
        :param str gateway: Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        :param Sequence['VirtualwanlinkServiceGroupArgs'] groups: User groups. The structure of `groups` block is documented below.
        :param str health_check: Health check.
        :param int hold_down_time: Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
        :param int id: Priority rule ID (1 - 4000).
        :param str input_device_negate: Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        :param Sequence['VirtualwanlinkServiceInputDeviceArgs'] input_devices: Source interface name. The structure of `input_device` block is documented below.
        :param str internet_service: Enable/disable use of Internet service for application-based load balancing. Valid values: `enable`, `disable`.
        :param Sequence['VirtualwanlinkServiceInternetServiceAppCtrlGroupArgs'] internet_service_app_ctrl_groups: Application control based Internet Service group list. The structure of `internet_service_app_ctrl_group` block is documented below.
        :param Sequence['VirtualwanlinkServiceInternetServiceAppCtrlArgs'] internet_service_app_ctrls: Application control based Internet Service ID list. The structure of `internet_service_app_ctrl` block is documented below.
        :param Sequence['VirtualwanlinkServiceInternetServiceCtrlGroupArgs'] internet_service_ctrl_groups: Control-based Internet Service group list. The structure of `internet_service_ctrl_group` block is documented below.
        :param Sequence['VirtualwanlinkServiceInternetServiceCtrlArgs'] internet_service_ctrls: Control-based Internet Service ID list. The structure of `internet_service_ctrl` block is documented below.
        :param Sequence['VirtualwanlinkServiceInternetServiceCustomGroupArgs'] internet_service_custom_groups: Custom Internet Service group list. The structure of `internet_service_custom_group` block is documented below.
        :param Sequence['VirtualwanlinkServiceInternetServiceCustomArgs'] internet_service_customs: Custom Internet service name list. The structure of `internet_service_custom` block is documented below.
        :param Sequence['VirtualwanlinkServiceInternetServiceGroupArgs'] internet_service_groups: Internet Service group list. The structure of `internet_service_group` block is documented below.
        :param Sequence['VirtualwanlinkServiceInternetServiceIdArgs'] internet_service_ids: Internet service ID list. The structure of `internet_service_id` block is documented below.
        :param Sequence['VirtualwanlinkServiceInternetServiceNameArgs'] internet_service_names: Internet service name list. The structure of `internet_service_name` block is documented below.
        :param int jitter_weight: Coefficient of jitter in the formula of custom-profile-1.
        :param int latency_weight: Coefficient of latency in the formula of custom-profile-1.
        :param str link_cost_factor: Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        :param int link_cost_threshold: Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
        :param int member: Member sequence number.
        :param str mode: Control how the priority rule sets the priority of interfaces in the SD-WAN. Valid values: `auto`, `manual`, `priority`, `sla`, `load-balance`.
        :param str name: Priority rule name.
        :param int packet_loss_weight: Coefficient of packet-loss in the formula of custom-profile-1.
        :param Sequence['VirtualwanlinkServicePriorityMemberArgs'] priority_members: Member sequence number list. The structure of `priority_members` block is documented below.
        :param int protocol: Protocol number.
        :param int quality_link: Quality grade.
        :param str role: Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        :param int route_tag: IPv4 route map route-tag.
        :param str sla_compare_method: Method to compare SLA value for sla and load balance mode.  Valid values: `order`, `number`.
        :param Sequence['VirtualwanlinkServiceSlaArgs'] slas: Service level agreement (SLA). The structure of `sla` block is documented below.
        :param Sequence['VirtualwanlinkServiceSrc6Args'] src6s: Source address6 name. The structure of `src6` block is documented below.
        :param str src_negate: Enable/disable negation of source address match. Valid values: `enable`, `disable`.
        :param Sequence['VirtualwanlinkServiceSrcArgs'] srcs: Source address name. The structure of `src` block is documented below.
        :param str standalone_action: Enable/disable service when selected neighbor role is standalone while service role is not standalone. Valid values: `enable`, `disable`.
        :param int start_port: Start destination port number.
        :param str status: Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        :param str tos: Type of service bit pattern.
        :param str tos_mask: Type of service evaluated bits.
        :param Sequence['VirtualwanlinkServiceUserArgs'] users: User name. The structure of `users` block is documented below.
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if bandwidth_weight is not None:
            pulumi.set(__self__, "bandwidth_weight", bandwidth_weight)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dscp_forward is not None:
            pulumi.set(__self__, "dscp_forward", dscp_forward)
        if dscp_forward_tag is not None:
            pulumi.set(__self__, "dscp_forward_tag", dscp_forward_tag)
        if dscp_reverse is not None:
            pulumi.set(__self__, "dscp_reverse", dscp_reverse)
        if dscp_reverse_tag is not None:
            pulumi.set(__self__, "dscp_reverse_tag", dscp_reverse_tag)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dst_negate is not None:
            pulumi.set(__self__, "dst_negate", dst_negate)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if hold_down_time is not None:
            pulumi.set(__self__, "hold_down_time", hold_down_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if input_device_negate is not None:
            pulumi.set(__self__, "input_device_negate", input_device_negate)
        if input_devices is not None:
            pulumi.set(__self__, "input_devices", input_devices)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_app_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_app_ctrl_groups", internet_service_app_ctrl_groups)
        if internet_service_app_ctrls is not None:
            pulumi.set(__self__, "internet_service_app_ctrls", internet_service_app_ctrls)
        if internet_service_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_ctrl_groups", internet_service_ctrl_groups)
        if internet_service_ctrls is not None:
            pulumi.set(__self__, "internet_service_ctrls", internet_service_ctrls)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if jitter_weight is not None:
            pulumi.set(__self__, "jitter_weight", jitter_weight)
        if latency_weight is not None:
            pulumi.set(__self__, "latency_weight", latency_weight)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if link_cost_threshold is not None:
            pulumi.set(__self__, "link_cost_threshold", link_cost_threshold)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_loss_weight is not None:
            pulumi.set(__self__, "packet_loss_weight", packet_loss_weight)
        if priority_members is not None:
            pulumi.set(__self__, "priority_members", priority_members)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_link is not None:
            pulumi.set(__self__, "quality_link", quality_link)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if route_tag is not None:
            pulumi.set(__self__, "route_tag", route_tag)
        if sla_compare_method is not None:
            pulumi.set(__self__, "sla_compare_method", sla_compare_method)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if src6s is not None:
            pulumi.set(__self__, "src6s", src6s)
        if src_negate is not None:
            pulumi.set(__self__, "src_negate", src_negate)
        if srcs is not None:
            pulumi.set(__self__, "srcs", srcs)
        if standalone_action is not None:
            pulumi.set(__self__, "standalone_action", standalone_action)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[str]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter(name="bandwidthWeight")
    def bandwidth_weight(self) -> Optional[int]:
        """
        Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
        """
        return pulumi.get(self, "bandwidth_weight")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        Enable/disable use of SD-WAN as default service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="dscpForward")
    def dscp_forward(self) -> Optional[str]:
        """
        Enable/disable forward traffic DSCP tag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_forward")

    @property
    @pulumi.getter(name="dscpForwardTag")
    def dscp_forward_tag(self) -> Optional[str]:
        """
        Forward traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_forward_tag")

    @property
    @pulumi.getter(name="dscpReverse")
    def dscp_reverse(self) -> Optional[str]:
        """
        Enable/disable reverse traffic DSCP tag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_reverse")

    @property
    @pulumi.getter(name="dscpReverseTag")
    def dscp_reverse_tag(self) -> Optional[str]:
        """
        Reverse traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_reverse_tag")

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceDst6']]:
        """
        Destination address6 name. The structure of `dst6` block is documented below.
        """
        return pulumi.get(self, "dst6s")

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> Optional[str]:
        """
        Enable/disable negation of destination address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dst_negate")

    @property
    @pulumi.getter
    def dsts(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceDst']]:
        """
        Destination address name. The structure of `dst` block is documented below.
        """
        return pulumi.get(self, "dsts")

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[int]:
        """
        End destination port number.
        """
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceGroup']]:
        """
        User groups. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[str]:
        """
        Health check.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> Optional[int]:
        """
        Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
        """
        return pulumi.get(self, "hold_down_time")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Priority rule ID (1 - 4000).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> Optional[str]:
        """
        Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "input_device_negate")

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceInputDevice']]:
        """
        Source interface name. The structure of `input_device` block is documented below.
        """
        return pulumi.get(self, "input_devices")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[str]:
        """
        Enable/disable use of Internet service for application-based load balancing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetServiceAppCtrlGroups")
    def internet_service_app_ctrl_groups(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceAppCtrlGroup']]:
        """
        Application control based Internet Service group list. The structure of `internet_service_app_ctrl_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrl_groups")

    @property
    @pulumi.getter(name="internetServiceAppCtrls")
    def internet_service_app_ctrls(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceAppCtrl']]:
        """
        Application control based Internet Service ID list. The structure of `internet_service_app_ctrl` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrls")

    @property
    @pulumi.getter(name="internetServiceCtrlGroups")
    def internet_service_ctrl_groups(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceCtrlGroup']]:
        """
        Control-based Internet Service group list. The structure of `internet_service_ctrl_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_ctrl_groups")

    @property
    @pulumi.getter(name="internetServiceCtrls")
    def internet_service_ctrls(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceCtrl']]:
        """
        Control-based Internet Service ID list. The structure of `internet_service_ctrl` block is documented below.
        """
        return pulumi.get(self, "internet_service_ctrls")

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceCustomGroup']]:
        """
        Custom Internet Service group list. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceCustom']]:
        """
        Custom Internet service name list. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceGroup']]:
        """
        Internet Service group list. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceId']]:
        """
        Internet service ID list. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceInternetServiceName']]:
        """
        Internet service name list. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="jitterWeight")
    def jitter_weight(self) -> Optional[int]:
        """
        Coefficient of jitter in the formula of custom-profile-1.
        """
        return pulumi.get(self, "jitter_weight")

    @property
    @pulumi.getter(name="latencyWeight")
    def latency_weight(self) -> Optional[int]:
        """
        Coefficient of latency in the formula of custom-profile-1.
        """
        return pulumi.get(self, "latency_weight")

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[str]:
        """
        Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        """
        return pulumi.get(self, "link_cost_factor")

    @property
    @pulumi.getter(name="linkCostThreshold")
    def link_cost_threshold(self) -> Optional[int]:
        """
        Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
        """
        return pulumi.get(self, "link_cost_threshold")

    @property
    @pulumi.getter
    def member(self) -> Optional[int]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "member")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Control how the priority rule sets the priority of interfaces in the SD-WAN. Valid values: `auto`, `manual`, `priority`, `sla`, `load-balance`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Priority rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetLossWeight")
    def packet_loss_weight(self) -> Optional[int]:
        """
        Coefficient of packet-loss in the formula of custom-profile-1.
        """
        return pulumi.get(self, "packet_loss_weight")

    @property
    @pulumi.getter(name="priorityMembers")
    def priority_members(self) -> Optional[Sequence['outputs.VirtualwanlinkServicePriorityMember']]:
        """
        Member sequence number list. The structure of `priority_members` block is documented below.
        """
        return pulumi.get(self, "priority_members")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[int]:
        """
        Protocol number.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="qualityLink")
    def quality_link(self) -> Optional[int]:
        """
        Quality grade.
        """
        return pulumi.get(self, "quality_link")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> Optional[int]:
        """
        IPv4 route map route-tag.
        """
        return pulumi.get(self, "route_tag")

    @property
    @pulumi.getter(name="slaCompareMethod")
    def sla_compare_method(self) -> Optional[str]:
        """
        Method to compare SLA value for sla and load balance mode.  Valid values: `order`, `number`.
        """
        return pulumi.get(self, "sla_compare_method")

    @property
    @pulumi.getter
    def slas(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceSla']]:
        """
        Service level agreement (SLA). The structure of `sla` block is documented below.
        """
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter
    def src6s(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceSrc6']]:
        """
        Source address6 name. The structure of `src6` block is documented below.
        """
        return pulumi.get(self, "src6s")

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> Optional[str]:
        """
        Enable/disable negation of source address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "src_negate")

    @property
    @pulumi.getter
    def srcs(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceSrc']]:
        """
        Source address name. The structure of `src` block is documented below.
        """
        return pulumi.get(self, "srcs")

    @property
    @pulumi.getter(name="standaloneAction")
    def standalone_action(self) -> Optional[str]:
        """
        Enable/disable service when selected neighbor role is standalone while service role is not standalone. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "standalone_action")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[int]:
        """
        Start destination port number.
        """
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tos(self) -> Optional[str]:
        """
        Type of service bit pattern.
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[str]:
        """
        Type of service evaluated bits.
        """
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.VirtualwanlinkServiceUser']]:
        """
        User name. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class VirtualwanlinkServiceDst6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkServiceDst(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkServiceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkServiceInputDevice(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkServiceInternetServiceAppCtrl(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Application control based Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Application control based Internet Service ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualwanlinkServiceInternetServiceAppCtrlGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Application control based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Application control based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkServiceInternetServiceCtrl(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Control-based Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Control-based Internet Service ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualwanlinkServiceInternetServiceCtrlGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkServiceInternetServiceCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Custom Internet service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Custom Internet service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkServiceInternetServiceCustomGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Custom Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Custom Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkServiceInternetServiceGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkServiceInternetServiceId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Internet service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Internet service ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualwanlinkServiceInternetServiceName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Internet service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Internet service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkServicePriorityMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "seqNum":
            suggest = "seq_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualwanlinkServicePriorityMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualwanlinkServicePriorityMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualwanlinkServicePriorityMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 seq_num: Optional[int] = None):
        """
        :param int seq_num: Member sequence number.
        """
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[int]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class VirtualwanlinkServiceSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthCheck":
            suggest = "health_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualwanlinkServiceSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualwanlinkServiceSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualwanlinkServiceSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 health_check: Optional[str] = None,
                 id: Optional[int] = None):
        """
        :param str health_check: Virtual WAN Link health-check.
        :param int id: SLA ID.
        """
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[str]:
        """
        Virtual WAN Link health-check.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VirtualwanlinkServiceSrc6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address or address group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address or address group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkServiceSrc(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address6 or address6 group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address6 or address6 group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkServiceUser(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: User name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        User name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwanlinkZone(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Zone name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class VirtualwirepairMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualwirepairMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualwirepairMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualwirepairMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        """
        :param str interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class VxlanRemoteIp6(dict):
    def __init__(__self__, *,
                 ip6: Optional[str] = None):
        """
        :param str ip6: IPv6 address.
        """
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[str]:
        """
        IPv6 address.
        """
        return pulumi.get(self, "ip6")


@pulumi.output_type
class VxlanRemoteIp(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None):
        """
        :param str ip: IPv4 address.
               
               The `remote_ip6` block supports:
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IPv4 address.

        The `remote_ip6` block supports:
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class ZoneInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: Optional[str] = None):
        """
        :param str interface_name: Select interfaces to add to the zone.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[str]:
        """
        Select interfaces to add to the zone.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class ZoneTagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.ZoneTaggingTag']] = None):
        """
        :param str category: Tag category.
        :param str name: Tagging entry name.
        :param Sequence['ZoneTaggingTagArgs'] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Tagging entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.ZoneTaggingTag']]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class ZoneTaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAccprofileFwgrpPermissionResult(dict):
    def __init__(__self__, *,
                 address: str,
                 others: str,
                 policy: str,
                 schedule: str,
                 service: str):
        """
        :param str address: Address Configuration.
        :param str others: Other Firewall Configuration.
        :param str policy: Policy Configuration.
        :param str schedule: Schedule Configuration.
        :param str service: Service Configuration.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "others", others)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        Address Configuration.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def others(self) -> str:
        """
        Other Firewall Configuration.
        """
        return pulumi.get(self, "others")

    @property
    @pulumi.getter
    def policy(self) -> str:
        """
        Policy Configuration.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def schedule(self) -> str:
        """
        Schedule Configuration.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        Service Configuration.
        """
        return pulumi.get(self, "service")


@pulumi.output_type
class GetAccprofileLoggrpPermissionResult(dict):
    def __init__(__self__, *,
                 config: str,
                 data_access: str,
                 report_access: str,
                 threat_weight: str):
        """
        :param str config: Log & Report configuration.
        :param str data_access: Log & Report Data Access.
        :param str report_access: Log & Report Report Access.
        :param str threat_weight: Log & Report Threat Weight.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "data_access", data_access)
        pulumi.set(__self__, "report_access", report_access)
        pulumi.set(__self__, "threat_weight", threat_weight)

    @property
    @pulumi.getter
    def config(self) -> str:
        """
        Log & Report configuration.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="dataAccess")
    def data_access(self) -> str:
        """
        Log & Report Data Access.
        """
        return pulumi.get(self, "data_access")

    @property
    @pulumi.getter(name="reportAccess")
    def report_access(self) -> str:
        """
        Log & Report Report Access.
        """
        return pulumi.get(self, "report_access")

    @property
    @pulumi.getter(name="threatWeight")
    def threat_weight(self) -> str:
        """
        Log & Report Threat Weight.
        """
        return pulumi.get(self, "threat_weight")


@pulumi.output_type
class GetAccprofileNetgrpPermissionResult(dict):
    def __init__(__self__, *,
                 cfg: str,
                 packet_capture: str,
                 route_cfg: str):
        """
        :param str cfg: System Configuration.
        :param str packet_capture: Packet Capture Configuration.
        :param str route_cfg: Router Configuration.
        """
        pulumi.set(__self__, "cfg", cfg)
        pulumi.set(__self__, "packet_capture", packet_capture)
        pulumi.set(__self__, "route_cfg", route_cfg)

    @property
    @pulumi.getter
    def cfg(self) -> str:
        """
        System Configuration.
        """
        return pulumi.get(self, "cfg")

    @property
    @pulumi.getter(name="packetCapture")
    def packet_capture(self) -> str:
        """
        Packet Capture Configuration.
        """
        return pulumi.get(self, "packet_capture")

    @property
    @pulumi.getter(name="routeCfg")
    def route_cfg(self) -> str:
        """
        Router Configuration.
        """
        return pulumi.get(self, "route_cfg")


@pulumi.output_type
class GetAccprofileSysgrpPermissionResult(dict):
    def __init__(__self__, *,
                 admin: str,
                 cfg: str,
                 mnt: str,
                 upd: str):
        """
        :param str admin: Administrator Users.
        :param str cfg: System Configuration.
        :param str mnt: Maintenance.
        :param str upd: FortiGuard Updates.
        """
        pulumi.set(__self__, "admin", admin)
        pulumi.set(__self__, "cfg", cfg)
        pulumi.set(__self__, "mnt", mnt)
        pulumi.set(__self__, "upd", upd)

    @property
    @pulumi.getter
    def admin(self) -> str:
        """
        Administrator Users.
        """
        return pulumi.get(self, "admin")

    @property
    @pulumi.getter
    def cfg(self) -> str:
        """
        System Configuration.
        """
        return pulumi.get(self, "cfg")

    @property
    @pulumi.getter
    def mnt(self) -> str:
        """
        Maintenance.
        """
        return pulumi.get(self, "mnt")

    @property
    @pulumi.getter
    def upd(self) -> str:
        """
        FortiGuard Updates.
        """
        return pulumi.get(self, "upd")


@pulumi.output_type
class GetAccprofileUtmgrpPermissionResult(dict):
    def __init__(__self__, *,
                 antivirus: str,
                 application_control: str,
                 casb: str,
                 data_leak_prevention: str,
                 data_loss_prevention: str,
                 dnsfilter: str,
                 emailfilter: str,
                 endpoint_control: str,
                 file_filter: str,
                 icap: str,
                 ips: str,
                 spamfilter: str,
                 videofilter: str,
                 virtual_patch: str,
                 voip: str,
                 waf: str,
                 webfilter: str):
        """
        :param str antivirus: Antivirus profiles and settings.
        :param str application_control: Application Control profiles and settings.
        :param str casb: Inline CASB filter profile and settings
        :param str data_leak_prevention: DLP profiles and settings.
        :param str data_loss_prevention: DLP profiles and settings.
        :param str dnsfilter: DNS Filter profiles and settings.
        :param str emailfilter: AntiSpam filter and settings.
        :param str endpoint_control: FortiClient Profiles.
        :param str file_filter: File-filter profiles and settings.
        :param str icap: ICAP profiles and settings.
        :param str ips: IPS profiles and settings.
        :param str spamfilter: AntiSpam filter and settings.
        :param str videofilter: Video filter profiles and settings.
        :param str virtual_patch: Virtual patch profiles and settings.
        :param str voip: VoIP profiles and settings.
        :param str waf: Web Application Firewall profiles and settings.
        :param str webfilter: Web Filter profiles and settings.
        """
        pulumi.set(__self__, "antivirus", antivirus)
        pulumi.set(__self__, "application_control", application_control)
        pulumi.set(__self__, "casb", casb)
        pulumi.set(__self__, "data_leak_prevention", data_leak_prevention)
        pulumi.set(__self__, "data_loss_prevention", data_loss_prevention)
        pulumi.set(__self__, "dnsfilter", dnsfilter)
        pulumi.set(__self__, "emailfilter", emailfilter)
        pulumi.set(__self__, "endpoint_control", endpoint_control)
        pulumi.set(__self__, "file_filter", file_filter)
        pulumi.set(__self__, "icap", icap)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "spamfilter", spamfilter)
        pulumi.set(__self__, "videofilter", videofilter)
        pulumi.set(__self__, "virtual_patch", virtual_patch)
        pulumi.set(__self__, "voip", voip)
        pulumi.set(__self__, "waf", waf)
        pulumi.set(__self__, "webfilter", webfilter)

    @property
    @pulumi.getter
    def antivirus(self) -> str:
        """
        Antivirus profiles and settings.
        """
        return pulumi.get(self, "antivirus")

    @property
    @pulumi.getter(name="applicationControl")
    def application_control(self) -> str:
        """
        Application Control profiles and settings.
        """
        return pulumi.get(self, "application_control")

    @property
    @pulumi.getter
    def casb(self) -> str:
        """
        Inline CASB filter profile and settings
        """
        return pulumi.get(self, "casb")

    @property
    @pulumi.getter(name="dataLeakPrevention")
    def data_leak_prevention(self) -> str:
        """
        DLP profiles and settings.
        """
        return pulumi.get(self, "data_leak_prevention")

    @property
    @pulumi.getter(name="dataLossPrevention")
    def data_loss_prevention(self) -> str:
        """
        DLP profiles and settings.
        """
        return pulumi.get(self, "data_loss_prevention")

    @property
    @pulumi.getter
    def dnsfilter(self) -> str:
        """
        DNS Filter profiles and settings.
        """
        return pulumi.get(self, "dnsfilter")

    @property
    @pulumi.getter
    def emailfilter(self) -> str:
        """
        AntiSpam filter and settings.
        """
        return pulumi.get(self, "emailfilter")

    @property
    @pulumi.getter(name="endpointControl")
    def endpoint_control(self) -> str:
        """
        FortiClient Profiles.
        """
        return pulumi.get(self, "endpoint_control")

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> str:
        """
        File-filter profiles and settings.
        """
        return pulumi.get(self, "file_filter")

    @property
    @pulumi.getter
    def icap(self) -> str:
        """
        ICAP profiles and settings.
        """
        return pulumi.get(self, "icap")

    @property
    @pulumi.getter
    def ips(self) -> str:
        """
        IPS profiles and settings.
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def spamfilter(self) -> str:
        """
        AntiSpam filter and settings.
        """
        return pulumi.get(self, "spamfilter")

    @property
    @pulumi.getter
    def videofilter(self) -> str:
        """
        Video filter profiles and settings.
        """
        return pulumi.get(self, "videofilter")

    @property
    @pulumi.getter(name="virtualPatch")
    def virtual_patch(self) -> str:
        """
        Virtual patch profiles and settings.
        """
        return pulumi.get(self, "virtual_patch")

    @property
    @pulumi.getter
    def voip(self) -> str:
        """
        VoIP profiles and settings.
        """
        return pulumi.get(self, "voip")

    @property
    @pulumi.getter
    def waf(self) -> str:
        """
        Web Application Firewall profiles and settings.
        """
        return pulumi.get(self, "waf")

    @property
    @pulumi.getter
    def webfilter(self) -> str:
        """
        Web Filter profiles and settings.
        """
        return pulumi.get(self, "webfilter")


@pulumi.output_type
class GetAdminGuestUsergroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system admin.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system admin.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAdminGuiDashboardResult(dict):
    def __init__(__self__, *,
                 columns: int,
                 id: int,
                 layout_type: str,
                 name: str,
                 scope: str,
                 widgets: Sequence['outputs.GetAdminGuiDashboardWidgetResult']):
        """
        :param int columns: Number of columns.
        :param int id: Select menu ID.
        :param str layout_type: Layout type.
        :param str name: Specify the name of the desired system admin.
        :param str scope: Dashboard scope.
        :param Sequence['GetAdminGuiDashboardWidgetArgs'] widgets: Dashboard widgets. The structure of `widget` block is documented below.
        """
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "layout_type", layout_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "widgets", widgets)

    @property
    @pulumi.getter
    def columns(self) -> int:
        """
        Number of columns.
        """
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="layoutType")
    def layout_type(self) -> str:
        """
        Layout type.
        """
        return pulumi.get(self, "layout_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system admin.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def scope(self) -> str:
        """
        Dashboard scope.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def widgets(self) -> Sequence['outputs.GetAdminGuiDashboardWidgetResult']:
        """
        Dashboard widgets. The structure of `widget` block is documented below.
        """
        return pulumi.get(self, "widgets")


@pulumi.output_type
class GetAdminGuiDashboardWidgetResult(dict):
    def __init__(__self__, *,
                 fabric_device: str,
                 filters: Sequence['outputs.GetAdminGuiDashboardWidgetFilterResult'],
                 height: int,
                 id: int,
                 industry: str,
                 interface: str,
                 region: str,
                 report_by: str,
                 sort_by: str,
                 timeframe: str,
                 title: str,
                 type: str,
                 visualization: str,
                 width: int,
                 x_pos: int,
                 y_pos: int):
        """
        :param str fabric_device: Fabric device to monitor.
        :param Sequence['GetAdminGuiDashboardWidgetFilterArgs'] filters: FortiView filters. The structure of `filters` block is documented below.
        :param int height: Height.
        :param int id: Select menu ID.
        :param str industry: Security Audit Rating industry.
        :param str interface: Interface to monitor.
        :param str region: Security Audit Rating region.
        :param str report_by: Field to aggregate the data by.
        :param str sort_by: Field to sort the data by.
        :param str timeframe: Timeframe period of reported data.
        :param str title: Widget title.
        :param str type: Widget type.
        :param str visualization: Visualization to use.
        :param int width: Width.
        :param int x_pos: X position.
        :param int y_pos: Y position.
        """
        pulumi.set(__self__, "fabric_device", fabric_device)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "industry", industry)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "report_by", report_by)
        pulumi.set(__self__, "sort_by", sort_by)
        pulumi.set(__self__, "timeframe", timeframe)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "visualization", visualization)
        pulumi.set(__self__, "width", width)
        pulumi.set(__self__, "x_pos", x_pos)
        pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="fabricDevice")
    def fabric_device(self) -> str:
        """
        Fabric device to monitor.
        """
        return pulumi.get(self, "fabric_device")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetAdminGuiDashboardWidgetFilterResult']:
        """
        FortiView filters. The structure of `filters` block is documented below.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def height(self) -> int:
        """
        Height.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def industry(self) -> str:
        """
        Security Audit Rating industry.
        """
        return pulumi.get(self, "industry")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface to monitor.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Security Audit Rating region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="reportBy")
    def report_by(self) -> str:
        """
        Field to aggregate the data by.
        """
        return pulumi.get(self, "report_by")

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> str:
        """
        Field to sort the data by.
        """
        return pulumi.get(self, "sort_by")

    @property
    @pulumi.getter
    def timeframe(self) -> str:
        """
        Timeframe period of reported data.
        """
        return pulumi.get(self, "timeframe")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Widget title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Widget type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def visualization(self) -> str:
        """
        Visualization to use.
        """
        return pulumi.get(self, "visualization")

    @property
    @pulumi.getter
    def width(self) -> int:
        """
        Width.
        """
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> int:
        """
        X position.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> int:
        """
        Y position.
        """
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class GetAdminGuiDashboardWidgetFilterResult(dict):
    def __init__(__self__, *,
                 id: int,
                 key: str,
                 value: str):
        """
        :param int id: Select menu ID.
        :param str key: Filter key.
        :param str value: Filter value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Filter key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Filter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAdminGuiGlobalMenuFavoriteResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: Select menu ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetAdminGuiNewFeatureAcknowledgeResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: Select menu ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetAdminGuiVdomMenuFavoriteResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: Select menu ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetAdminLoginTimeResult(dict):
    def __init__(__self__, *,
                 last_failed_login: str,
                 last_login: str,
                 usr_name: str):
        """
        :param str last_failed_login: Last failed login time.
        :param str last_login: Last successful login time.
        :param str usr_name: User name.
        """
        pulumi.set(__self__, "last_failed_login", last_failed_login)
        pulumi.set(__self__, "last_login", last_login)
        pulumi.set(__self__, "usr_name", usr_name)

    @property
    @pulumi.getter(name="lastFailedLogin")
    def last_failed_login(self) -> str:
        """
        Last failed login time.
        """
        return pulumi.get(self, "last_failed_login")

    @property
    @pulumi.getter(name="lastLogin")
    def last_login(self) -> str:
        """
        Last successful login time.
        """
        return pulumi.get(self, "last_login")

    @property
    @pulumi.getter(name="usrName")
    def usr_name(self) -> str:
        """
        User name.
        """
        return pulumi.get(self, "usr_name")


@pulumi.output_type
class GetAdminVdomResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system admin.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system admin.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApiuserTrusthostResult(dict):
    def __init__(__self__, *,
                 id: int,
                 ipv4_trusthost: str,
                 ipv6_trusthost: str,
                 type: str):
        """
        :param int id: Table ID.
        :param str ipv4_trusthost: IPv4 trusted host address.
        :param str ipv6_trusthost: IPv6 trusted host address.
        :param str type: Trusthost type.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipv4_trusthost", ipv4_trusthost)
        pulumi.set(__self__, "ipv6_trusthost", ipv6_trusthost)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Table ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv4Trusthost")
    def ipv4_trusthost(self) -> str:
        """
        IPv4 trusted host address.
        """
        return pulumi.get(self, "ipv4_trusthost")

    @property
    @pulumi.getter(name="ipv6Trusthost")
    def ipv6_trusthost(self) -> str:
        """
        IPv6 trusted host address.
        """
        return pulumi.get(self, "ipv6_trusthost")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Trusthost type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApiuserVdomResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system apiuser.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system apiuser.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAutomationactionEmailToResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system automationaction.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system automationaction.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAutomationactionHeaderResult(dict):
    def __init__(__self__, *,
                 header: str):
        """
        :param str header: Request header.
        """
        pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Request header.
        """
        return pulumi.get(self, "header")


@pulumi.output_type
class GetAutomationactionHttpHeaderResult(dict):
    def __init__(__self__, *,
                 id: int,
                 key: str,
                 value: str):
        """
        :param int id: Entry ID.
        :param str key: Request header key.
        :param str value: Request header value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Request header key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Request header value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutomationactionSdnConnectorResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system automationaction.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system automationaction.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAutomationdestinationDestinationResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system automationdestination.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system automationdestination.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAutomationtriggerFieldResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 value: str):
        """
        :param int id: Entry ID.
        :param str name: Specify the name of the desired system automationtrigger.
        :param str value: Value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system automationtrigger.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutomationtriggerLogidBlockResult(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: Entry ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetAutomationtriggerVdomResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system automationtrigger.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system automationtrigger.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCentralmanagementServerListResult(dict):
    def __init__(__self__, *,
                 addr_type: str,
                 fqdn: str,
                 id: int,
                 server_address: str,
                 server_address6: str,
                 server_type: str):
        """
        :param str addr_type: Indicate whether the FortiGate communicates with the override server using an IPv4 address, an IPv6 address or a FQDN.
        :param str fqdn: FQDN address of override server.
        :param int id: ID.
        :param str server_address: IPv4 address of override server.
        :param str server_address6: IPv6 address of override server.
        :param str server_type: FortiGuard service type.
        """
        pulumi.set(__self__, "addr_type", addr_type)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "server_address", server_address)
        pulumi.set(__self__, "server_address6", server_address6)
        pulumi.set(__self__, "server_type", server_type)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> str:
        """
        Indicate whether the FortiGate communicates with the override server using an IPv4 address, an IPv6 address or a FQDN.
        """
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        FQDN address of override server.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> str:
        """
        IPv4 address of override server.
        """
        return pulumi.get(self, "server_address")

    @property
    @pulumi.getter(name="serverAddress6")
    def server_address6(self) -> str:
        """
        IPv6 address of override server.
        """
        return pulumi.get(self, "server_address6")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> str:
        """
        FortiGuard service type.
        """
        return pulumi.get(self, "server_type")


@pulumi.output_type
class GetClustersyncDownIntfsBeforeSessSyncResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Interface name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClustersyncSessionSyncFilterResult(dict):
    def __init__(__self__, *,
                 custom_services: Sequence['outputs.GetClustersyncSessionSyncFilterCustomServiceResult'],
                 dstaddr: str,
                 dstaddr6: str,
                 dstintf: str,
                 srcaddr: str,
                 srcaddr6: str,
                 srcintf: str):
        """
        :param Sequence['GetClustersyncSessionSyncFilterCustomServiceArgs'] custom_services: Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custome services. The structure of `custom_service` block is documented below.
        :param str dstaddr: Only sessions to this IPv4 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        :param str dstaddr6: Only sessions to this IPv6 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        :param str dstintf: Only sessions to this interface are synchronized. You can only enter one interface name. To synchronize sessions to multiple destination interfaces, add multiple filters.
        :param str srcaddr: Only sessions from this IPv4 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        :param str srcaddr6: Only sessions from this IPv6 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        :param str srcintf: Only sessions from this interface are synchronized. You can only enter one interface name. To synchronize sessions for multiple source interfaces, add multiple filters.
        """
        pulumi.set(__self__, "custom_services", custom_services)
        pulumi.set(__self__, "dstaddr", dstaddr)
        pulumi.set(__self__, "dstaddr6", dstaddr6)
        pulumi.set(__self__, "dstintf", dstintf)
        pulumi.set(__self__, "srcaddr", srcaddr)
        pulumi.set(__self__, "srcaddr6", srcaddr6)
        pulumi.set(__self__, "srcintf", srcintf)

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Sequence['outputs.GetClustersyncSessionSyncFilterCustomServiceResult']:
        """
        Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custome services. The structure of `custom_service` block is documented below.
        """
        return pulumi.get(self, "custom_services")

    @property
    @pulumi.getter
    def dstaddr(self) -> str:
        """
        Only sessions to this IPv4 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        """
        return pulumi.get(self, "dstaddr")

    @property
    @pulumi.getter
    def dstaddr6(self) -> str:
        """
        Only sessions to this IPv6 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        """
        return pulumi.get(self, "dstaddr6")

    @property
    @pulumi.getter
    def dstintf(self) -> str:
        """
        Only sessions to this interface are synchronized. You can only enter one interface name. To synchronize sessions to multiple destination interfaces, add multiple filters.
        """
        return pulumi.get(self, "dstintf")

    @property
    @pulumi.getter
    def srcaddr(self) -> str:
        """
        Only sessions from this IPv4 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        """
        return pulumi.get(self, "srcaddr")

    @property
    @pulumi.getter
    def srcaddr6(self) -> str:
        """
        Only sessions from this IPv6 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        """
        return pulumi.get(self, "srcaddr6")

    @property
    @pulumi.getter
    def srcintf(self) -> str:
        """
        Only sessions from this interface are synchronized. You can only enter one interface name. To synchronize sessions for multiple source interfaces, add multiple filters.
        """
        return pulumi.get(self, "srcintf")


@pulumi.output_type
class GetClustersyncSessionSyncFilterCustomServiceResult(dict):
    def __init__(__self__, *,
                 dst_port_range: str,
                 id: int,
                 src_port_range: str):
        """
        :param str dst_port_range: Custom service destination port range.
        :param int id: Custom service ID.
        :param str src_port_range: Custom service source port range.
        """
        pulumi.set(__self__, "dst_port_range", dst_port_range)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "src_port_range", src_port_range)

    @property
    @pulumi.getter(name="dstPortRange")
    def dst_port_range(self) -> str:
        """
        Custom service destination port range.
        """
        return pulumi.get(self, "dst_port_range")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Custom service ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="srcPortRange")
    def src_port_range(self) -> str:
        """
        Custom service source port range.
        """
        return pulumi.get(self, "src_port_range")


@pulumi.output_type
class GetClustersyncSyncvdResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Interface name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCsfFabricConnectorResult(dict):
    def __init__(__self__, *,
                 accprofile: str,
                 configuration_write_access: str,
                 serial: str,
                 vdoms: Sequence['outputs.GetCsfFabricConnectorVdomResult']):
        """
        :param str accprofile: Override access profile.
        :param str configuration_write_access: Enable/disable downstream device write access to configuration.
        :param str serial: Serial.
        :param Sequence['GetCsfFabricConnectorVdomArgs'] vdoms: Virtual domains that the connector has access to. If none are set, the connector will only have access to the VDOM that it joins the Security Fabric through. The structure of `vdom` block is documented below.
        """
        pulumi.set(__self__, "accprofile", accprofile)
        pulumi.set(__self__, "configuration_write_access", configuration_write_access)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def accprofile(self) -> str:
        """
        Override access profile.
        """
        return pulumi.get(self, "accprofile")

    @property
    @pulumi.getter(name="configurationWriteAccess")
    def configuration_write_access(self) -> str:
        """
        Enable/disable downstream device write access to configuration.
        """
        return pulumi.get(self, "configuration_write_access")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Serial.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def vdoms(self) -> Sequence['outputs.GetCsfFabricConnectorVdomResult']:
        """
        Virtual domains that the connector has access to. If none are set, the connector will only have access to the VDOM that it joins the Security Fabric through. The structure of `vdom` block is documented below.
        """
        return pulumi.get(self, "vdoms")


@pulumi.output_type
class GetCsfFabricConnectorVdomResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Device name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Device name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCsfFabricDeviceResult(dict):
    def __init__(__self__, *,
                 access_token: str,
                 device_ip: str,
                 device_type: str,
                 https_port: int,
                 login: str,
                 name: str,
                 password: str):
        """
        :param str access_token: Device access token.
        :param str device_ip: Device IP.
        :param str device_type: Device type.
        :param int https_port: HTTPS port for fabric device.
        :param str login: Device login name.
        :param str name: Device name.
        :param str password: Device login password.
        """
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "device_ip", device_ip)
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "https_port", https_port)
        pulumi.set(__self__, "login", login)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        """
        Device access token.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="deviceIp")
    def device_ip(self) -> str:
        """
        Device IP.
        """
        return pulumi.get(self, "device_ip")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> str:
        """
        Device type.
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> int:
        """
        HTTPS port for fabric device.
        """
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter
    def login(self) -> str:
        """
        Device login name.
        """
        return pulumi.get(self, "login")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Device login password.
        """
        return pulumi.get(self, "password")


@pulumi.output_type
class GetCsfTrustedListResult(dict):
    def __init__(__self__, *,
                 action: str,
                 authorization_type: str,
                 certificate: str,
                 downstream_authorization: str,
                 ha_members: str,
                 index: int,
                 name: str,
                 serial: str):
        """
        :param str action: Security fabric authorization action.
        :param str authorization_type: Authorization type.
        :param str certificate: Certificate.
        :param str downstream_authorization: Trust authorizations by this node's administrator.
        :param str ha_members: HA members.
        :param int index: Index of the downstream in tree.
        :param str name: Device name.
        :param str serial: Serial.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "authorization_type", authorization_type)
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "downstream_authorization", downstream_authorization)
        pulumi.set(__self__, "ha_members", ha_members)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Security fabric authorization action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="authorizationType")
    def authorization_type(self) -> str:
        """
        Authorization type.
        """
        return pulumi.get(self, "authorization_type")

    @property
    @pulumi.getter
    def certificate(self) -> str:
        """
        Certificate.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="downstreamAuthorization")
    def downstream_authorization(self) -> str:
        """
        Trust authorizations by this node's administrator.
        """
        return pulumi.get(self, "downstream_authorization")

    @property
    @pulumi.getter(name="haMembers")
    def ha_members(self) -> str:
        """
        HA members.
        """
        return pulumi.get(self, "ha_members")

    @property
    @pulumi.getter
    def index(self) -> int:
        """
        Index of the downstream in tree.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        Serial.
        """
        return pulumi.get(self, "serial")


@pulumi.output_type
class GetDdnsDdnsServerAddrResult(dict):
    def __init__(__self__, *,
                 addr: str):
        """
        :param str addr: IP address or FQDN of the server.
        """
        pulumi.set(__self__, "addr", addr)

    @property
    @pulumi.getter
    def addr(self) -> str:
        """
        IP address or FQDN of the server.
        """
        return pulumi.get(self, "addr")


@pulumi.output_type
class GetDdnsMonitorInterfaceResult(dict):
    def __init__(__self__, *,
                 interface_name: str):
        """
        :param str interface_name: Interface name.
        """
        pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class GetDnsDomainResult(dict):
    def __init__(__self__, *,
                 domain: str):
        """
        :param str domain: DNS search domain list separated by space (maximum 8 domains)
        """
        pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        DNS search domain list separated by space (maximum 8 domains)
        """
        return pulumi.get(self, "domain")


@pulumi.output_type
class GetDnsServerHostnameResult(dict):
    def __init__(__self__, *,
                 hostname: str):
        """
        :param str hostname: DNS server host name list separated by space (maximum 4 domains).
        """
        pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        DNS server host name list separated by space (maximum 4 domains).
        """
        return pulumi.get(self, "hostname")


@pulumi.output_type
class GetDnsdatabaseDnsEntryResult(dict):
    def __init__(__self__, *,
                 canonical_name: str,
                 hostname: str,
                 id: int,
                 ip: str,
                 ipv6: str,
                 preference: int,
                 status: str,
                 ttl: int,
                 type: str):
        """
        :param str canonical_name: Canonical name of the host.
        :param str hostname: Name of the host.
        :param int id: DNS entry ID.
        :param str ip: IPv4 address of the host.
        :param str ipv6: IPv6 address of the host.
        :param int preference: DNS entry preference, 0 is the highest preference (0 - 65535, default = 10)
        :param str status: Enable/disable resource record status.
        :param int ttl: Time-to-live for this entry (0 to 2147483647 sec, default = 0).
        :param str type: Resource record type.
        """
        pulumi.set(__self__, "canonical_name", canonical_name)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ipv6", ipv6)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="canonicalName")
    def canonical_name(self) -> str:
        """
        Canonical name of the host.
        """
        return pulumi.get(self, "canonical_name")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        Name of the host.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        DNS entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IPv4 address of the host.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ipv6(self) -> str:
        """
        IPv6 address of the host.
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def preference(self) -> int:
        """
        DNS entry preference, 0 is the highest preference (0 - 65535, default = 10)
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable resource record status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        """
        Time-to-live for this entry (0 to 2147483647 sec, default = 0).
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource record type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGlobalInternetServiceDownloadListResult(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: Internet Service ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetHaHaMgmtInterfaceResult(dict):
    def __init__(__self__, *,
                 dst: str,
                 gateway: str,
                 gateway6: str,
                 id: int,
                 interface: str):
        """
        :param str dst: Default route destination for reserved HA management interface.
        :param str gateway: Default route gateway for reserved HA management interface.
        :param str gateway6: Default IPv6 gateway for reserved HA management interface.
        :param int id: Table ID.
        :param str interface: Interface to reserve for HA management.
        """
        pulumi.set(__self__, "dst", dst)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "gateway6", gateway6)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter
    def dst(self) -> str:
        """
        Default route destination for reserved HA management interface.
        """
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        Default route gateway for reserved HA management interface.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> str:
        """
        Default IPv6 gateway for reserved HA management interface.
        """
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Table ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface to reserve for HA management.
        """
        return pulumi.get(self, "interface")


@pulumi.output_type
class GetHaSecondaryVclusterResult(dict):
    def __init__(__self__, *,
                 monitor: str,
                 override: str,
                 override_wait_time: int,
                 pingserver_failover_threshold: int,
                 pingserver_monitor_interface: str,
                 pingserver_secondary_force_reset: str,
                 pingserver_slave_force_reset: str,
                 priority: int,
                 vcluster_id: int,
                 vdom: str):
        """
        :param str monitor: Interfaces to check for port monitoring (or link failure).
        :param str override: Enable and increase the priority of the unit that should always be primary (master).
        :param int override_wait_time: Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        :param int pingserver_failover_threshold: Remote IP monitoring failover threshold (0 - 50).
        :param str pingserver_monitor_interface: Interfaces to check for remote IP monitoring.
        :param str pingserver_secondary_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover.
        :param str pingserver_slave_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover.
        :param int priority: Increase the priority to select the primary unit (0 - 255).
        :param int vcluster_id: Cluster ID.
        :param str vdom: VDOMs in virtual cluster 2.
        """
        pulumi.set(__self__, "monitor", monitor)
        pulumi.set(__self__, "override", override)
        pulumi.set(__self__, "override_wait_time", override_wait_time)
        pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "vcluster_id", vcluster_id)
        pulumi.set(__self__, "vdom", vdom)

    @property
    @pulumi.getter
    def monitor(self) -> str:
        """
        Interfaces to check for port monitoring (or link failure).
        """
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def override(self) -> str:
        """
        Enable and increase the priority of the unit that should always be primary (master).
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> int:
        """
        Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        """
        return pulumi.get(self, "override_wait_time")

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> int:
        """
        Remote IP monitoring failover threshold (0 - 50).
        """
        return pulumi.get(self, "pingserver_failover_threshold")

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> str:
        """
        Interfaces to check for remote IP monitoring.
        """
        return pulumi.get(self, "pingserver_monitor_interface")

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> str:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover.
        """
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> str:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover.
        """
        return pulumi.get(self, "pingserver_slave_force_reset")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Increase the priority to select the primary unit (0 - 255).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> int:
        """
        Cluster ID.
        """
        return pulumi.get(self, "vcluster_id")

    @property
    @pulumi.getter
    def vdom(self) -> str:
        """
        VDOMs in virtual cluster 2.
        """
        return pulumi.get(self, "vdom")


@pulumi.output_type
class GetHaUnicastPeerResult(dict):
    def __init__(__self__, *,
                 id: int,
                 peer_ip: str):
        """
        :param int id: Table ID.
        :param str peer_ip: Unicast peer IP.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "peer_ip", peer_ip)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Table ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> str:
        """
        Unicast peer IP.
        """
        return pulumi.get(self, "peer_ip")


@pulumi.output_type
class GetHaVclusterResult(dict):
    def __init__(__self__, *,
                 monitor: str,
                 override: str,
                 override_wait_time: int,
                 pingserver_failover_threshold: int,
                 pingserver_flip_timeout: int,
                 pingserver_monitor_interface: str,
                 pingserver_secondary_force_reset: str,
                 pingserver_slave_force_reset: str,
                 priority: int,
                 vcluster_id: int,
                 vdoms: Sequence['outputs.GetHaVclusterVdomResult']):
        """
        :param str monitor: Interfaces to check for port monitoring (or link failure).
        :param str override: Enable and increase the priority of the unit that should always be primary (master).
        :param int override_wait_time: Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        :param int pingserver_failover_threshold: Remote IP monitoring failover threshold (0 - 50).
        :param int pingserver_flip_timeout: Time to wait in minutes before renegotiating after a remote IP monitoring failover.
        :param str pingserver_monitor_interface: Interfaces to check for remote IP monitoring.
        :param str pingserver_secondary_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover.
        :param str pingserver_slave_force_reset: Enable to force the cluster to negotiate after a remote IP monitoring failover.
        :param int priority: Increase the priority to select the primary unit (0 - 255).
        :param int vcluster_id: Cluster ID.
        :param Sequence['GetHaVclusterVdomArgs'] vdoms: VDOMs in virtual cluster 2.
        """
        pulumi.set(__self__, "monitor", monitor)
        pulumi.set(__self__, "override", override)
        pulumi.set(__self__, "override_wait_time", override_wait_time)
        pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        pulumi.set(__self__, "pingserver_flip_timeout", pingserver_flip_timeout)
        pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "vcluster_id", vcluster_id)
        pulumi.set(__self__, "vdoms", vdoms)

    @property
    @pulumi.getter
    def monitor(self) -> str:
        """
        Interfaces to check for port monitoring (or link failure).
        """
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter
    def override(self) -> str:
        """
        Enable and increase the priority of the unit that should always be primary (master).
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> int:
        """
        Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        """
        return pulumi.get(self, "override_wait_time")

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> int:
        """
        Remote IP monitoring failover threshold (0 - 50).
        """
        return pulumi.get(self, "pingserver_failover_threshold")

    @property
    @pulumi.getter(name="pingserverFlipTimeout")
    def pingserver_flip_timeout(self) -> int:
        """
        Time to wait in minutes before renegotiating after a remote IP monitoring failover.
        """
        return pulumi.get(self, "pingserver_flip_timeout")

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> str:
        """
        Interfaces to check for remote IP monitoring.
        """
        return pulumi.get(self, "pingserver_monitor_interface")

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> str:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover.
        """
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> str:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover.
        """
        return pulumi.get(self, "pingserver_slave_force_reset")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Increase the priority to select the primary unit (0 - 255).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> int:
        """
        Cluster ID.
        """
        return pulumi.get(self, "vcluster_id")

    @property
    @pulumi.getter
    def vdoms(self) -> Sequence['outputs.GetHaVclusterVdomResult']:
        """
        VDOMs in virtual cluster 2.
        """
        return pulumi.get(self, "vdoms")


@pulumi.output_type
class GetHaVclusterVdomResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Virtual domain name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInterfaceClientOptionResult(dict):
    def __init__(__self__, *,
                 code: int,
                 id: int,
                 ip: str,
                 type: str,
                 value: str):
        """
        :param int code: DHCP client option code.
        :param int id: ID.
        :param str ip: Secondary IP address of the interface.
        :param str type: DHCP client option type.
        :param str value: DHCP client option value.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> int:
        """
        DHCP client option code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Secondary IP address of the interface.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        DHCP client option type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        DHCP client option value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInterfaceDhcpSnoopingServerListResult(dict):
    def __init__(__self__, *,
                 name: str,
                 server_ip: str):
        """
        :param str name: Specify the name of the desired system interface.
        :param str server_ip: IP address for DHCP server.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_ip", server_ip)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system interface.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> str:
        """
        IP address for DHCP server.
        """
        return pulumi.get(self, "server_ip")


@pulumi.output_type
class GetInterfaceFailAlertInterfaceResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system interface.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system interface.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInterfaceIpv6Result(dict):
    def __init__(__self__, *,
                 autoconf: str,
                 cli_conn6_status: int,
                 dhcp6_client_options: str,
                 dhcp6_iapd_lists: Sequence['outputs.GetInterfaceIpv6Dhcp6IapdListResult'],
                 dhcp6_information_request: str,
                 dhcp6_prefix_delegation: str,
                 dhcp6_prefix_hint: str,
                 dhcp6_prefix_hint_plt: int,
                 dhcp6_prefix_hint_vlt: int,
                 dhcp6_relay_interface_id: str,
                 dhcp6_relay_ip: str,
                 dhcp6_relay_service: str,
                 dhcp6_relay_source_interface: str,
                 dhcp6_relay_source_ip: str,
                 dhcp6_relay_type: str,
                 icmp6_send_redirect: str,
                 interface_identifier: str,
                 ip6_address: str,
                 ip6_allowaccess: str,
                 ip6_default_life: int,
                 ip6_delegated_prefix_iaid: int,
                 ip6_delegated_prefix_lists: Sequence['outputs.GetInterfaceIpv6Ip6DelegatedPrefixListResult'],
                 ip6_dns_server_override: str,
                 ip6_extra_addrs: Sequence['outputs.GetInterfaceIpv6Ip6ExtraAddrResult'],
                 ip6_hop_limit: int,
                 ip6_link_mtu: int,
                 ip6_manage_flag: str,
                 ip6_max_interval: int,
                 ip6_min_interval: int,
                 ip6_mode: str,
                 ip6_other_flag: str,
                 ip6_prefix_lists: Sequence['outputs.GetInterfaceIpv6Ip6PrefixListResult'],
                 ip6_prefix_mode: str,
                 ip6_reachable_time: int,
                 ip6_retrans_time: int,
                 ip6_send_adv: str,
                 ip6_subnet: str,
                 ip6_upstream_interface: str,
                 nd_cert: str,
                 nd_cga_modifier: str,
                 nd_mode: str,
                 nd_security_level: int,
                 nd_timestamp_delta: int,
                 nd_timestamp_fuzz: int,
                 ra_send_mtu: str,
                 unique_autoconf_addr: str,
                 vrip6_link_local: str,
                 vrrp6s: Sequence['outputs.GetInterfaceIpv6Vrrp6Result'],
                 vrrp_virtual_mac6: str):
        """
        :param str autoconf: Enable/disable address auto config.
        :param int cli_conn6_status: CLI IPv6 connection status.
        :param str dhcp6_client_options: DHCPv6 client options.
        :param Sequence['GetInterfaceIpv6Dhcp6IapdListArgs'] dhcp6_iapd_lists: DHCPv6 IA-PD list The structure of `dhcp6_iapd_list` block is documented below.
        :param str dhcp6_information_request: Enable/disable DHCPv6 information request.
        :param str dhcp6_prefix_delegation: Enable/disable DHCPv6 prefix delegation.
        :param str dhcp6_prefix_hint: DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        :param int dhcp6_prefix_hint_plt: DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        :param int dhcp6_prefix_hint_vlt: DHCPv6 prefix hint valid life time (sec).
        :param str dhcp6_relay_interface_id: DHCP6 relay interface ID.
        :param str dhcp6_relay_ip: DHCPv6 relay IP address.
        :param str dhcp6_relay_service: Enable/disable DHCPv6 relay.
        :param str dhcp6_relay_source_interface: Enable/disable use of address on this interface as the source address of the relay message.
        :param str dhcp6_relay_source_ip: IPv6 address used by the DHCP6 relay as its source IP.
        :param str dhcp6_relay_type: DHCPv6 relay type.
        :param str icmp6_send_redirect: Enable/disable sending of ICMPv6 redirects.
        :param str interface_identifier: IPv6 interface identifier.
        :param str ip6_address: Primary IPv6 address prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        :param str ip6_allowaccess: Allow management access to the interface.
        :param int ip6_default_life: Default life (sec).
        :param int ip6_delegated_prefix_iaid: IAID of obtained delegated-prefix from the upstream interface.
        :param Sequence['GetInterfaceIpv6Ip6DelegatedPrefixListArgs'] ip6_delegated_prefix_lists: Advertised IPv6 delegated prefix list. The structure of `ip6_delegated_prefix_list` block is documented below.
        :param str ip6_dns_server_override: Enable/disable using the DNS server acquired by DHCP.
        :param Sequence['GetInterfaceIpv6Ip6ExtraAddrArgs'] ip6_extra_addrs: Extra IPv6 address prefixes of interface. The structure of `ip6_extra_addr` block is documented below.
        :param int ip6_hop_limit: Hop limit (0 means unspecified).
        :param int ip6_link_mtu: IPv6 link MTU.
        :param str ip6_manage_flag: Enable/disable the managed flag.
        :param int ip6_max_interval: IPv6 maximum interval (4 to 1800 sec).
        :param int ip6_min_interval: IPv6 minimum interval (3 to 1350 sec).
        :param str ip6_mode: Addressing mode (static, DHCP, delegated).
        :param str ip6_other_flag: Enable/disable the other IPv6 flag.
        :param Sequence['GetInterfaceIpv6Ip6PrefixListArgs'] ip6_prefix_lists: Advertised prefix list. The structure of `ip6_prefix_list` block is documented below.
        :param str ip6_prefix_mode: Assigning a prefix from DHCP or RA.
        :param int ip6_reachable_time: IPv6 reachable time (milliseconds; 0 means unspecified).
        :param int ip6_retrans_time: IPv6 retransmit time (milliseconds; 0 means unspecified).
        :param str ip6_send_adv: Enable/disable sending advertisements about the interface.
        :param str ip6_subnet: Subnet to routing prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        :param str ip6_upstream_interface: Interface name providing delegated information.
        :param str nd_cert: Neighbor discovery certificate.
        :param str nd_cga_modifier: Neighbor discovery CGA modifier.
        :param str nd_mode: Neighbor discovery mode.
        :param int nd_security_level: Neighbor discovery security level (0 - 7; 0 = least secure, default = 0).
        :param int nd_timestamp_delta: Neighbor discovery timestamp delta value (1 - 3600 sec; default = 300).
        :param int nd_timestamp_fuzz: Neighbor discovery timestamp fuzz factor (1 - 60 sec; default = 1).
        :param str ra_send_mtu: Enable/disable sending link MTU in RA packet.
        :param str unique_autoconf_addr: Enable/disable unique auto config address.
        :param str vrip6_link_local: Link-local IPv6 address of virtual router.
        :param Sequence['GetInterfaceIpv6Vrrp6Args'] vrrp6s: IPv6 VRRP configuration. The structure of `vrrp6` block is documented below.
        :param str vrrp_virtual_mac6: Enable/disable virtual MAC for VRRP.
        """
        pulumi.set(__self__, "autoconf", autoconf)
        pulumi.set(__self__, "cli_conn6_status", cli_conn6_status)
        pulumi.set(__self__, "dhcp6_client_options", dhcp6_client_options)
        pulumi.set(__self__, "dhcp6_iapd_lists", dhcp6_iapd_lists)
        pulumi.set(__self__, "dhcp6_information_request", dhcp6_information_request)
        pulumi.set(__self__, "dhcp6_prefix_delegation", dhcp6_prefix_delegation)
        pulumi.set(__self__, "dhcp6_prefix_hint", dhcp6_prefix_hint)
        pulumi.set(__self__, "dhcp6_prefix_hint_plt", dhcp6_prefix_hint_plt)
        pulumi.set(__self__, "dhcp6_prefix_hint_vlt", dhcp6_prefix_hint_vlt)
        pulumi.set(__self__, "dhcp6_relay_interface_id", dhcp6_relay_interface_id)
        pulumi.set(__self__, "dhcp6_relay_ip", dhcp6_relay_ip)
        pulumi.set(__self__, "dhcp6_relay_service", dhcp6_relay_service)
        pulumi.set(__self__, "dhcp6_relay_source_interface", dhcp6_relay_source_interface)
        pulumi.set(__self__, "dhcp6_relay_source_ip", dhcp6_relay_source_ip)
        pulumi.set(__self__, "dhcp6_relay_type", dhcp6_relay_type)
        pulumi.set(__self__, "icmp6_send_redirect", icmp6_send_redirect)
        pulumi.set(__self__, "interface_identifier", interface_identifier)
        pulumi.set(__self__, "ip6_address", ip6_address)
        pulumi.set(__self__, "ip6_allowaccess", ip6_allowaccess)
        pulumi.set(__self__, "ip6_default_life", ip6_default_life)
        pulumi.set(__self__, "ip6_delegated_prefix_iaid", ip6_delegated_prefix_iaid)
        pulumi.set(__self__, "ip6_delegated_prefix_lists", ip6_delegated_prefix_lists)
        pulumi.set(__self__, "ip6_dns_server_override", ip6_dns_server_override)
        pulumi.set(__self__, "ip6_extra_addrs", ip6_extra_addrs)
        pulumi.set(__self__, "ip6_hop_limit", ip6_hop_limit)
        pulumi.set(__self__, "ip6_link_mtu", ip6_link_mtu)
        pulumi.set(__self__, "ip6_manage_flag", ip6_manage_flag)
        pulumi.set(__self__, "ip6_max_interval", ip6_max_interval)
        pulumi.set(__self__, "ip6_min_interval", ip6_min_interval)
        pulumi.set(__self__, "ip6_mode", ip6_mode)
        pulumi.set(__self__, "ip6_other_flag", ip6_other_flag)
        pulumi.set(__self__, "ip6_prefix_lists", ip6_prefix_lists)
        pulumi.set(__self__, "ip6_prefix_mode", ip6_prefix_mode)
        pulumi.set(__self__, "ip6_reachable_time", ip6_reachable_time)
        pulumi.set(__self__, "ip6_retrans_time", ip6_retrans_time)
        pulumi.set(__self__, "ip6_send_adv", ip6_send_adv)
        pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        pulumi.set(__self__, "ip6_upstream_interface", ip6_upstream_interface)
        pulumi.set(__self__, "nd_cert", nd_cert)
        pulumi.set(__self__, "nd_cga_modifier", nd_cga_modifier)
        pulumi.set(__self__, "nd_mode", nd_mode)
        pulumi.set(__self__, "nd_security_level", nd_security_level)
        pulumi.set(__self__, "nd_timestamp_delta", nd_timestamp_delta)
        pulumi.set(__self__, "nd_timestamp_fuzz", nd_timestamp_fuzz)
        pulumi.set(__self__, "ra_send_mtu", ra_send_mtu)
        pulumi.set(__self__, "unique_autoconf_addr", unique_autoconf_addr)
        pulumi.set(__self__, "vrip6_link_local", vrip6_link_local)
        pulumi.set(__self__, "vrrp6s", vrrp6s)
        pulumi.set(__self__, "vrrp_virtual_mac6", vrrp_virtual_mac6)

    @property
    @pulumi.getter
    def autoconf(self) -> str:
        """
        Enable/disable address auto config.
        """
        return pulumi.get(self, "autoconf")

    @property
    @pulumi.getter(name="cliConn6Status")
    def cli_conn6_status(self) -> int:
        """
        CLI IPv6 connection status.
        """
        return pulumi.get(self, "cli_conn6_status")

    @property
    @pulumi.getter(name="dhcp6ClientOptions")
    def dhcp6_client_options(self) -> str:
        """
        DHCPv6 client options.
        """
        return pulumi.get(self, "dhcp6_client_options")

    @property
    @pulumi.getter(name="dhcp6IapdLists")
    def dhcp6_iapd_lists(self) -> Sequence['outputs.GetInterfaceIpv6Dhcp6IapdListResult']:
        """
        DHCPv6 IA-PD list The structure of `dhcp6_iapd_list` block is documented below.
        """
        return pulumi.get(self, "dhcp6_iapd_lists")

    @property
    @pulumi.getter(name="dhcp6InformationRequest")
    def dhcp6_information_request(self) -> str:
        """
        Enable/disable DHCPv6 information request.
        """
        return pulumi.get(self, "dhcp6_information_request")

    @property
    @pulumi.getter(name="dhcp6PrefixDelegation")
    def dhcp6_prefix_delegation(self) -> str:
        """
        Enable/disable DHCPv6 prefix delegation.
        """
        return pulumi.get(self, "dhcp6_prefix_delegation")

    @property
    @pulumi.getter(name="dhcp6PrefixHint")
    def dhcp6_prefix_hint(self) -> str:
        """
        DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        """
        return pulumi.get(self, "dhcp6_prefix_hint")

    @property
    @pulumi.getter(name="dhcp6PrefixHintPlt")
    def dhcp6_prefix_hint_plt(self) -> int:
        """
        DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        """
        return pulumi.get(self, "dhcp6_prefix_hint_plt")

    @property
    @pulumi.getter(name="dhcp6PrefixHintVlt")
    def dhcp6_prefix_hint_vlt(self) -> int:
        """
        DHCPv6 prefix hint valid life time (sec).
        """
        return pulumi.get(self, "dhcp6_prefix_hint_vlt")

    @property
    @pulumi.getter(name="dhcp6RelayInterfaceId")
    def dhcp6_relay_interface_id(self) -> str:
        """
        DHCP6 relay interface ID.
        """
        return pulumi.get(self, "dhcp6_relay_interface_id")

    @property
    @pulumi.getter(name="dhcp6RelayIp")
    def dhcp6_relay_ip(self) -> str:
        """
        DHCPv6 relay IP address.
        """
        return pulumi.get(self, "dhcp6_relay_ip")

    @property
    @pulumi.getter(name="dhcp6RelayService")
    def dhcp6_relay_service(self) -> str:
        """
        Enable/disable DHCPv6 relay.
        """
        return pulumi.get(self, "dhcp6_relay_service")

    @property
    @pulumi.getter(name="dhcp6RelaySourceInterface")
    def dhcp6_relay_source_interface(self) -> str:
        """
        Enable/disable use of address on this interface as the source address of the relay message.
        """
        return pulumi.get(self, "dhcp6_relay_source_interface")

    @property
    @pulumi.getter(name="dhcp6RelaySourceIp")
    def dhcp6_relay_source_ip(self) -> str:
        """
        IPv6 address used by the DHCP6 relay as its source IP.
        """
        return pulumi.get(self, "dhcp6_relay_source_ip")

    @property
    @pulumi.getter(name="dhcp6RelayType")
    def dhcp6_relay_type(self) -> str:
        """
        DHCPv6 relay type.
        """
        return pulumi.get(self, "dhcp6_relay_type")

    @property
    @pulumi.getter(name="icmp6SendRedirect")
    def icmp6_send_redirect(self) -> str:
        """
        Enable/disable sending of ICMPv6 redirects.
        """
        return pulumi.get(self, "icmp6_send_redirect")

    @property
    @pulumi.getter(name="interfaceIdentifier")
    def interface_identifier(self) -> str:
        """
        IPv6 interface identifier.
        """
        return pulumi.get(self, "interface_identifier")

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> str:
        """
        Primary IPv6 address prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        """
        return pulumi.get(self, "ip6_address")

    @property
    @pulumi.getter(name="ip6Allowaccess")
    def ip6_allowaccess(self) -> str:
        """
        Allow management access to the interface.
        """
        return pulumi.get(self, "ip6_allowaccess")

    @property
    @pulumi.getter(name="ip6DefaultLife")
    def ip6_default_life(self) -> int:
        """
        Default life (sec).
        """
        return pulumi.get(self, "ip6_default_life")

    @property
    @pulumi.getter(name="ip6DelegatedPrefixIaid")
    def ip6_delegated_prefix_iaid(self) -> int:
        """
        IAID of obtained delegated-prefix from the upstream interface.
        """
        return pulumi.get(self, "ip6_delegated_prefix_iaid")

    @property
    @pulumi.getter(name="ip6DelegatedPrefixLists")
    def ip6_delegated_prefix_lists(self) -> Sequence['outputs.GetInterfaceIpv6Ip6DelegatedPrefixListResult']:
        """
        Advertised IPv6 delegated prefix list. The structure of `ip6_delegated_prefix_list` block is documented below.
        """
        return pulumi.get(self, "ip6_delegated_prefix_lists")

    @property
    @pulumi.getter(name="ip6DnsServerOverride")
    def ip6_dns_server_override(self) -> str:
        """
        Enable/disable using the DNS server acquired by DHCP.
        """
        return pulumi.get(self, "ip6_dns_server_override")

    @property
    @pulumi.getter(name="ip6ExtraAddrs")
    def ip6_extra_addrs(self) -> Sequence['outputs.GetInterfaceIpv6Ip6ExtraAddrResult']:
        """
        Extra IPv6 address prefixes of interface. The structure of `ip6_extra_addr` block is documented below.
        """
        return pulumi.get(self, "ip6_extra_addrs")

    @property
    @pulumi.getter(name="ip6HopLimit")
    def ip6_hop_limit(self) -> int:
        """
        Hop limit (0 means unspecified).
        """
        return pulumi.get(self, "ip6_hop_limit")

    @property
    @pulumi.getter(name="ip6LinkMtu")
    def ip6_link_mtu(self) -> int:
        """
        IPv6 link MTU.
        """
        return pulumi.get(self, "ip6_link_mtu")

    @property
    @pulumi.getter(name="ip6ManageFlag")
    def ip6_manage_flag(self) -> str:
        """
        Enable/disable the managed flag.
        """
        return pulumi.get(self, "ip6_manage_flag")

    @property
    @pulumi.getter(name="ip6MaxInterval")
    def ip6_max_interval(self) -> int:
        """
        IPv6 maximum interval (4 to 1800 sec).
        """
        return pulumi.get(self, "ip6_max_interval")

    @property
    @pulumi.getter(name="ip6MinInterval")
    def ip6_min_interval(self) -> int:
        """
        IPv6 minimum interval (3 to 1350 sec).
        """
        return pulumi.get(self, "ip6_min_interval")

    @property
    @pulumi.getter(name="ip6Mode")
    def ip6_mode(self) -> str:
        """
        Addressing mode (static, DHCP, delegated).
        """
        return pulumi.get(self, "ip6_mode")

    @property
    @pulumi.getter(name="ip6OtherFlag")
    def ip6_other_flag(self) -> str:
        """
        Enable/disable the other IPv6 flag.
        """
        return pulumi.get(self, "ip6_other_flag")

    @property
    @pulumi.getter(name="ip6PrefixLists")
    def ip6_prefix_lists(self) -> Sequence['outputs.GetInterfaceIpv6Ip6PrefixListResult']:
        """
        Advertised prefix list. The structure of `ip6_prefix_list` block is documented below.
        """
        return pulumi.get(self, "ip6_prefix_lists")

    @property
    @pulumi.getter(name="ip6PrefixMode")
    def ip6_prefix_mode(self) -> str:
        """
        Assigning a prefix from DHCP or RA.
        """
        return pulumi.get(self, "ip6_prefix_mode")

    @property
    @pulumi.getter(name="ip6ReachableTime")
    def ip6_reachable_time(self) -> int:
        """
        IPv6 reachable time (milliseconds; 0 means unspecified).
        """
        return pulumi.get(self, "ip6_reachable_time")

    @property
    @pulumi.getter(name="ip6RetransTime")
    def ip6_retrans_time(self) -> int:
        """
        IPv6 retransmit time (milliseconds; 0 means unspecified).
        """
        return pulumi.get(self, "ip6_retrans_time")

    @property
    @pulumi.getter(name="ip6SendAdv")
    def ip6_send_adv(self) -> str:
        """
        Enable/disable sending advertisements about the interface.
        """
        return pulumi.get(self, "ip6_send_adv")

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> str:
        """
        Subnet to routing prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        """
        return pulumi.get(self, "ip6_subnet")

    @property
    @pulumi.getter(name="ip6UpstreamInterface")
    def ip6_upstream_interface(self) -> str:
        """
        Interface name providing delegated information.
        """
        return pulumi.get(self, "ip6_upstream_interface")

    @property
    @pulumi.getter(name="ndCert")
    def nd_cert(self) -> str:
        """
        Neighbor discovery certificate.
        """
        return pulumi.get(self, "nd_cert")

    @property
    @pulumi.getter(name="ndCgaModifier")
    def nd_cga_modifier(self) -> str:
        """
        Neighbor discovery CGA modifier.
        """
        return pulumi.get(self, "nd_cga_modifier")

    @property
    @pulumi.getter(name="ndMode")
    def nd_mode(self) -> str:
        """
        Neighbor discovery mode.
        """
        return pulumi.get(self, "nd_mode")

    @property
    @pulumi.getter(name="ndSecurityLevel")
    def nd_security_level(self) -> int:
        """
        Neighbor discovery security level (0 - 7; 0 = least secure, default = 0).
        """
        return pulumi.get(self, "nd_security_level")

    @property
    @pulumi.getter(name="ndTimestampDelta")
    def nd_timestamp_delta(self) -> int:
        """
        Neighbor discovery timestamp delta value (1 - 3600 sec; default = 300).
        """
        return pulumi.get(self, "nd_timestamp_delta")

    @property
    @pulumi.getter(name="ndTimestampFuzz")
    def nd_timestamp_fuzz(self) -> int:
        """
        Neighbor discovery timestamp fuzz factor (1 - 60 sec; default = 1).
        """
        return pulumi.get(self, "nd_timestamp_fuzz")

    @property
    @pulumi.getter(name="raSendMtu")
    def ra_send_mtu(self) -> str:
        """
        Enable/disable sending link MTU in RA packet.
        """
        return pulumi.get(self, "ra_send_mtu")

    @property
    @pulumi.getter(name="uniqueAutoconfAddr")
    def unique_autoconf_addr(self) -> str:
        """
        Enable/disable unique auto config address.
        """
        return pulumi.get(self, "unique_autoconf_addr")

    @property
    @pulumi.getter(name="vrip6LinkLocal")
    def vrip6_link_local(self) -> str:
        """
        Link-local IPv6 address of virtual router.
        """
        return pulumi.get(self, "vrip6_link_local")

    @property
    @pulumi.getter
    def vrrp6s(self) -> Sequence['outputs.GetInterfaceIpv6Vrrp6Result']:
        """
        IPv6 VRRP configuration. The structure of `vrrp6` block is documented below.
        """
        return pulumi.get(self, "vrrp6s")

    @property
    @pulumi.getter(name="vrrpVirtualMac6")
    def vrrp_virtual_mac6(self) -> str:
        """
        Enable/disable virtual MAC for VRRP.
        """
        return pulumi.get(self, "vrrp_virtual_mac6")


@pulumi.output_type
class GetInterfaceIpv6Dhcp6IapdListResult(dict):
    def __init__(__self__, *,
                 iaid: int,
                 prefix_hint: str,
                 prefix_hint_plt: int,
                 prefix_hint_vlt: int):
        """
        :param int iaid: Identity association identifier.
        :param str prefix_hint: DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        :param int prefix_hint_plt: DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        :param int prefix_hint_vlt: DHCPv6 prefix hint valid life time (sec).
        """
        pulumi.set(__self__, "iaid", iaid)
        pulumi.set(__self__, "prefix_hint", prefix_hint)
        pulumi.set(__self__, "prefix_hint_plt", prefix_hint_plt)
        pulumi.set(__self__, "prefix_hint_vlt", prefix_hint_vlt)

    @property
    @pulumi.getter
    def iaid(self) -> int:
        """
        Identity association identifier.
        """
        return pulumi.get(self, "iaid")

    @property
    @pulumi.getter(name="prefixHint")
    def prefix_hint(self) -> str:
        """
        DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        """
        return pulumi.get(self, "prefix_hint")

    @property
    @pulumi.getter(name="prefixHintPlt")
    def prefix_hint_plt(self) -> int:
        """
        DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        """
        return pulumi.get(self, "prefix_hint_plt")

    @property
    @pulumi.getter(name="prefixHintVlt")
    def prefix_hint_vlt(self) -> int:
        """
        DHCPv6 prefix hint valid life time (sec).
        """
        return pulumi.get(self, "prefix_hint_vlt")


@pulumi.output_type
class GetInterfaceIpv6Ip6DelegatedPrefixListResult(dict):
    def __init__(__self__, *,
                 autonomous_flag: str,
                 delegated_prefix_iaid: int,
                 onlink_flag: str,
                 prefix_id: int,
                 rdnss: str,
                 rdnss_service: str,
                 subnet: str,
                 upstream_interface: str):
        """
        :param str autonomous_flag: Enable/disable the autonomous flag.
        :param int delegated_prefix_iaid: IAID of obtained delegated-prefix from the upstream interface.
        :param str onlink_flag: Enable/disable the onlink flag.
        :param int prefix_id: Prefix ID.
        :param str rdnss: Recursive DNS server option.
        :param str rdnss_service: Recursive DNS service option.
        :param str subnet: Add subnet ID to routing prefix.
        :param str upstream_interface: Name of the interface that provides delegated information.
        """
        pulumi.set(__self__, "autonomous_flag", autonomous_flag)
        pulumi.set(__self__, "delegated_prefix_iaid", delegated_prefix_iaid)
        pulumi.set(__self__, "onlink_flag", onlink_flag)
        pulumi.set(__self__, "prefix_id", prefix_id)
        pulumi.set(__self__, "rdnss", rdnss)
        pulumi.set(__self__, "rdnss_service", rdnss_service)
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "upstream_interface", upstream_interface)

    @property
    @pulumi.getter(name="autonomousFlag")
    def autonomous_flag(self) -> str:
        """
        Enable/disable the autonomous flag.
        """
        return pulumi.get(self, "autonomous_flag")

    @property
    @pulumi.getter(name="delegatedPrefixIaid")
    def delegated_prefix_iaid(self) -> int:
        """
        IAID of obtained delegated-prefix from the upstream interface.
        """
        return pulumi.get(self, "delegated_prefix_iaid")

    @property
    @pulumi.getter(name="onlinkFlag")
    def onlink_flag(self) -> str:
        """
        Enable/disable the onlink flag.
        """
        return pulumi.get(self, "onlink_flag")

    @property
    @pulumi.getter(name="prefixId")
    def prefix_id(self) -> int:
        """
        Prefix ID.
        """
        return pulumi.get(self, "prefix_id")

    @property
    @pulumi.getter
    def rdnss(self) -> str:
        """
        Recursive DNS server option.
        """
        return pulumi.get(self, "rdnss")

    @property
    @pulumi.getter(name="rdnssService")
    def rdnss_service(self) -> str:
        """
        Recursive DNS service option.
        """
        return pulumi.get(self, "rdnss_service")

    @property
    @pulumi.getter
    def subnet(self) -> str:
        """
        Add subnet ID to routing prefix.
        """
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="upstreamInterface")
    def upstream_interface(self) -> str:
        """
        Name of the interface that provides delegated information.
        """
        return pulumi.get(self, "upstream_interface")


@pulumi.output_type
class GetInterfaceIpv6Ip6ExtraAddrResult(dict):
    def __init__(__self__, *,
                 prefix: str):
        """
        :param str prefix: IPv6 prefix.
        """
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetInterfaceIpv6Ip6PrefixListResult(dict):
    def __init__(__self__, *,
                 autonomous_flag: str,
                 dnssls: Sequence['outputs.GetInterfaceIpv6Ip6PrefixListDnsslResult'],
                 onlink_flag: str,
                 preferred_life_time: int,
                 prefix: str,
                 rdnss: str,
                 valid_life_time: int):
        """
        :param str autonomous_flag: Enable/disable the autonomous flag.
        :param Sequence['GetInterfaceIpv6Ip6PrefixListDnsslArgs'] dnssls: DNS search list option. The structure of `dnssl` block is documented below.
        :param str onlink_flag: Enable/disable the onlink flag.
        :param int preferred_life_time: Preferred life time (sec).
        :param str prefix: IPv6 prefix.
        :param str rdnss: Recursive DNS server option.
        :param int valid_life_time: Valid life time (sec).
        """
        pulumi.set(__self__, "autonomous_flag", autonomous_flag)
        pulumi.set(__self__, "dnssls", dnssls)
        pulumi.set(__self__, "onlink_flag", onlink_flag)
        pulumi.set(__self__, "preferred_life_time", preferred_life_time)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "rdnss", rdnss)
        pulumi.set(__self__, "valid_life_time", valid_life_time)

    @property
    @pulumi.getter(name="autonomousFlag")
    def autonomous_flag(self) -> str:
        """
        Enable/disable the autonomous flag.
        """
        return pulumi.get(self, "autonomous_flag")

    @property
    @pulumi.getter
    def dnssls(self) -> Sequence['outputs.GetInterfaceIpv6Ip6PrefixListDnsslResult']:
        """
        DNS search list option. The structure of `dnssl` block is documented below.
        """
        return pulumi.get(self, "dnssls")

    @property
    @pulumi.getter(name="onlinkFlag")
    def onlink_flag(self) -> str:
        """
        Enable/disable the onlink flag.
        """
        return pulumi.get(self, "onlink_flag")

    @property
    @pulumi.getter(name="preferredLifeTime")
    def preferred_life_time(self) -> int:
        """
        Preferred life time (sec).
        """
        return pulumi.get(self, "preferred_life_time")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def rdnss(self) -> str:
        """
        Recursive DNS server option.
        """
        return pulumi.get(self, "rdnss")

    @property
    @pulumi.getter(name="validLifeTime")
    def valid_life_time(self) -> int:
        """
        Valid life time (sec).
        """
        return pulumi.get(self, "valid_life_time")


@pulumi.output_type
class GetInterfaceIpv6Ip6PrefixListDnsslResult(dict):
    def __init__(__self__, *,
                 domain: str):
        """
        :param str domain: Domain name.
        """
        pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Domain name.
        """
        return pulumi.get(self, "domain")


@pulumi.output_type
class GetInterfaceIpv6Vrrp6Result(dict):
    def __init__(__self__, *,
                 accept_mode: str,
                 adv_interval: int,
                 ignore_default_route: str,
                 preempt: str,
                 priority: int,
                 start_time: int,
                 status: str,
                 vrdst6: str,
                 vrgrp: int,
                 vrid: int,
                 vrip6: str):
        """
        :param str accept_mode: Enable/disable accept mode.
        :param int adv_interval: Advertisement interval (1 - 255 seconds).
        :param str ignore_default_route: Enable/disable ignoring of default route when checking destination.
        :param str preempt: Enable/disable preempt mode.
        :param int priority: Priority of the virtual router (1 - 255).
        :param int start_time: Startup time (1 - 255 seconds).
        :param str status: Enable/disable VRRP.
        :param str vrdst6: Monitor the route to this destination.
        :param int vrgrp: VRRP group ID (1 - 65535).
        :param int vrid: Virtual router identifier (1 - 255).
        :param str vrip6: IPv6 address of the virtual router.
        """
        pulumi.set(__self__, "accept_mode", accept_mode)
        pulumi.set(__self__, "adv_interval", adv_interval)
        pulumi.set(__self__, "ignore_default_route", ignore_default_route)
        pulumi.set(__self__, "preempt", preempt)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vrdst6", vrdst6)
        pulumi.set(__self__, "vrgrp", vrgrp)
        pulumi.set(__self__, "vrid", vrid)
        pulumi.set(__self__, "vrip6", vrip6)

    @property
    @pulumi.getter(name="acceptMode")
    def accept_mode(self) -> str:
        """
        Enable/disable accept mode.
        """
        return pulumi.get(self, "accept_mode")

    @property
    @pulumi.getter(name="advInterval")
    def adv_interval(self) -> int:
        """
        Advertisement interval (1 - 255 seconds).
        """
        return pulumi.get(self, "adv_interval")

    @property
    @pulumi.getter(name="ignoreDefaultRoute")
    def ignore_default_route(self) -> str:
        """
        Enable/disable ignoring of default route when checking destination.
        """
        return pulumi.get(self, "ignore_default_route")

    @property
    @pulumi.getter
    def preempt(self) -> str:
        """
        Enable/disable preempt mode.
        """
        return pulumi.get(self, "preempt")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority of the virtual router (1 - 255).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        """
        Startup time (1 - 255 seconds).
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable VRRP.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vrdst6(self) -> str:
        """
        Monitor the route to this destination.
        """
        return pulumi.get(self, "vrdst6")

    @property
    @pulumi.getter
    def vrgrp(self) -> int:
        """
        VRRP group ID (1 - 65535).
        """
        return pulumi.get(self, "vrgrp")

    @property
    @pulumi.getter
    def vrid(self) -> int:
        """
        Virtual router identifier (1 - 255).
        """
        return pulumi.get(self, "vrid")

    @property
    @pulumi.getter
    def vrip6(self) -> str:
        """
        IPv6 address of the virtual router.
        """
        return pulumi.get(self, "vrip6")


@pulumi.output_type
class GetInterfaceManagedDeviceResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system interface.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system interface.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInterfaceMemberResult(dict):
    def __init__(__self__, *,
                 interface_name: str):
        """
        :param str interface_name: Physical interface name.
        """
        pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> str:
        """
        Physical interface name.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class GetInterfaceSecondaryipResult(dict):
    def __init__(__self__, *,
                 allowaccess: str,
                 detectprotocol: str,
                 detectserver: str,
                 gwdetect: str,
                 ha_priority: int,
                 id: int,
                 ip: str,
                 ping_serv_status: int,
                 secip_relay_ip: str):
        """
        :param str allowaccess: Management access settings for the secondary IP address.
        :param str detectprotocol: Protocols used to detect the server.
        :param str detectserver: Gateway's ping server for this IP.
        :param str gwdetect: Enable/disable detect gateway alive for first.
        :param int ha_priority: HA election priority for the PING server.
        :param int id: ID.
        :param str ip: Secondary IP address of the interface.
        :param int ping_serv_status: PING server status.
        :param str secip_relay_ip: DHCP relay IP address.
        """
        pulumi.set(__self__, "allowaccess", allowaccess)
        pulumi.set(__self__, "detectprotocol", detectprotocol)
        pulumi.set(__self__, "detectserver", detectserver)
        pulumi.set(__self__, "gwdetect", gwdetect)
        pulumi.set(__self__, "ha_priority", ha_priority)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ping_serv_status", ping_serv_status)
        pulumi.set(__self__, "secip_relay_ip", secip_relay_ip)

    @property
    @pulumi.getter
    def allowaccess(self) -> str:
        """
        Management access settings for the secondary IP address.
        """
        return pulumi.get(self, "allowaccess")

    @property
    @pulumi.getter
    def detectprotocol(self) -> str:
        """
        Protocols used to detect the server.
        """
        return pulumi.get(self, "detectprotocol")

    @property
    @pulumi.getter
    def detectserver(self) -> str:
        """
        Gateway's ping server for this IP.
        """
        return pulumi.get(self, "detectserver")

    @property
    @pulumi.getter
    def gwdetect(self) -> str:
        """
        Enable/disable detect gateway alive for first.
        """
        return pulumi.get(self, "gwdetect")

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> int:
        """
        HA election priority for the PING server.
        """
        return pulumi.get(self, "ha_priority")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Secondary IP address of the interface.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="pingServStatus")
    def ping_serv_status(self) -> int:
        """
        PING server status.
        """
        return pulumi.get(self, "ping_serv_status")

    @property
    @pulumi.getter(name="secipRelayIp")
    def secip_relay_ip(self) -> str:
        """
        DHCP relay IP address.
        """
        return pulumi.get(self, "secip_relay_ip")


@pulumi.output_type
class GetInterfaceSecurityGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system interface.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system interface.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInterfaceTaggingResult(dict):
    def __init__(__self__, *,
                 category: str,
                 name: str,
                 tags: Sequence['outputs.GetInterfaceTaggingTagResult']):
        """
        :param str category: Tag category.
        :param str name: Specify the name of the desired system interface.
        :param Sequence['GetInterfaceTaggingTagArgs'] tags: Tags. The structure of `tags` block is documented below.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system interface.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetInterfaceTaggingTagResult']:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetInterfaceTaggingTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system interface.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system interface.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetInterfaceVrrpResult(dict):
    def __init__(__self__, *,
                 accept_mode: str,
                 adv_interval: int,
                 ignore_default_route: str,
                 preempt: str,
                 priority: int,
                 proxy_arps: Sequence['outputs.GetInterfaceVrrpProxyArpResult'],
                 start_time: int,
                 status: str,
                 version: str,
                 vrdst: str,
                 vrdst_priority: int,
                 vrgrp: int,
                 vrid: int,
                 vrip: str):
        """
        :param str accept_mode: Enable/disable accept mode.
        :param int adv_interval: Advertisement interval (1 - 255 seconds).
        :param str ignore_default_route: Enable/disable ignoring of default route when checking destination.
        :param str preempt: Enable/disable preempt mode.
        :param int priority: Priority of the virtual router (1 - 255).
        :param Sequence['GetInterfaceVrrpProxyArpArgs'] proxy_arps: VRRP Proxy ARP configuration. The structure of `proxy_arp` block is documented below.
        :param int start_time: Startup time (1 - 255 seconds).
        :param str status: Enable/disable VRRP.
        :param str version: VRRP version.
        :param str vrdst: Monitor the route to this destination.
        :param int vrdst_priority: Priority of the virtual router when the virtual router destination becomes unreachable (0 - 254).
        :param int vrgrp: VRRP group ID (1 - 65535).
        :param int vrid: Virtual router identifier (1 - 255).
        :param str vrip: IP address of the virtual router.
        """
        pulumi.set(__self__, "accept_mode", accept_mode)
        pulumi.set(__self__, "adv_interval", adv_interval)
        pulumi.set(__self__, "ignore_default_route", ignore_default_route)
        pulumi.set(__self__, "preempt", preempt)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "proxy_arps", proxy_arps)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vrdst", vrdst)
        pulumi.set(__self__, "vrdst_priority", vrdst_priority)
        pulumi.set(__self__, "vrgrp", vrgrp)
        pulumi.set(__self__, "vrid", vrid)
        pulumi.set(__self__, "vrip", vrip)

    @property
    @pulumi.getter(name="acceptMode")
    def accept_mode(self) -> str:
        """
        Enable/disable accept mode.
        """
        return pulumi.get(self, "accept_mode")

    @property
    @pulumi.getter(name="advInterval")
    def adv_interval(self) -> int:
        """
        Advertisement interval (1 - 255 seconds).
        """
        return pulumi.get(self, "adv_interval")

    @property
    @pulumi.getter(name="ignoreDefaultRoute")
    def ignore_default_route(self) -> str:
        """
        Enable/disable ignoring of default route when checking destination.
        """
        return pulumi.get(self, "ignore_default_route")

    @property
    @pulumi.getter
    def preempt(self) -> str:
        """
        Enable/disable preempt mode.
        """
        return pulumi.get(self, "preempt")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority of the virtual router (1 - 255).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="proxyArps")
    def proxy_arps(self) -> Sequence['outputs.GetInterfaceVrrpProxyArpResult']:
        """
        VRRP Proxy ARP configuration. The structure of `proxy_arp` block is documented below.
        """
        return pulumi.get(self, "proxy_arps")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        """
        Startup time (1 - 255 seconds).
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable VRRP.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        VRRP version.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def vrdst(self) -> str:
        """
        Monitor the route to this destination.
        """
        return pulumi.get(self, "vrdst")

    @property
    @pulumi.getter(name="vrdstPriority")
    def vrdst_priority(self) -> int:
        """
        Priority of the virtual router when the virtual router destination becomes unreachable (0 - 254).
        """
        return pulumi.get(self, "vrdst_priority")

    @property
    @pulumi.getter
    def vrgrp(self) -> int:
        """
        VRRP group ID (1 - 65535).
        """
        return pulumi.get(self, "vrgrp")

    @property
    @pulumi.getter
    def vrid(self) -> int:
        """
        Virtual router identifier (1 - 255).
        """
        return pulumi.get(self, "vrid")

    @property
    @pulumi.getter
    def vrip(self) -> str:
        """
        IP address of the virtual router.
        """
        return pulumi.get(self, "vrip")


@pulumi.output_type
class GetInterfaceVrrpProxyArpResult(dict):
    def __init__(__self__, *,
                 id: int,
                 ip: str):
        """
        :param int id: ID.
        :param str ip: Secondary IP address of the interface.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Secondary IP address of the interface.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetLinkmonitorRouteResult(dict):
    def __init__(__self__, *,
                 subnet: str):
        """
        :param str subnet: IP and netmask (x.x.x.x/y).
        """
        pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> str:
        """
        IP and netmask (x.x.x.x/y).
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class GetLinkmonitorServerResult(dict):
    def __init__(__self__, *,
                 address: str):
        """
        :param str address: Server address.
        """
        pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        Server address.
        """
        return pulumi.get(self, "address")


@pulumi.output_type
class GetLinkmonitorServerListResult(dict):
    def __init__(__self__, *,
                 dst: str,
                 id: int,
                 port: int,
                 protocol: str,
                 weight: int):
        """
        :param str dst: IP address of the server to be monitored.
        :param int id: Server ID.
        :param int port: Port number of the traffic to be used to monitor the server.
        :param str protocol: Protocols used to monitor the server.
        :param int weight: Weight of the monitor to this dst (0 - 255).
        """
        pulumi.set(__self__, "dst", dst)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def dst(self) -> str:
        """
        IP address of the server to be monitored.
        """
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Server ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port number of the traffic to be used to monitor the server.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocols used to monitor the server.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Weight of the monitor to this dst (0 - 255).
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetMobiletunnelNetworkResult(dict):
    def __init__(__self__, *,
                 id: int,
                 interface: str,
                 prefix: str):
        """
        :param int id: Network entry ID.
        :param str interface: Select the associated interface name from available options.
        :param str prefix: Class IP and Netmask with correction (Format:xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx or xxx.xxx.xxx.xxx/x).
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Network entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Select the associated interface name from available options.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Class IP and Netmask with correction (Format:xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx or xxx.xxx.xxx.xxx/x).
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetNat64SecondaryPrefixResult(dict):
    def __init__(__self__, *,
                 name: str,
                 nat64_prefix: str):
        """
        :param str name: NAT64 prefix name.
        :param str nat64_prefix: NAT64 prefix.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nat64_prefix", nat64_prefix)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        NAT64 prefix name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nat64Prefix")
    def nat64_prefix(self) -> str:
        """
        NAT64 prefix.
        """
        return pulumi.get(self, "nat64_prefix")


@pulumi.output_type
class GetNdproxyMemberResult(dict):
    def __init__(__self__, *,
                 interface_name: str):
        """
        :param str interface_name: Interface name.
        """
        pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class GetNetflowCollectorResult(dict):
    def __init__(__self__, *,
                 collector_ip: str,
                 collector_port: int,
                 id: int,
                 interface: str,
                 interface_select_method: str,
                 source_ip: str):
        """
        :param str collector_ip: Collector IP.
        :param int collector_port: NetFlow collector port number.
        :param int id: ID.
        :param str interface: Specify outgoing interface to reach server.
        :param str interface_select_method: Specify how to select outgoing interface to reach server.
        :param str source_ip: Source IP address for communication with the NetFlow agent.
        """
        pulumi.set(__self__, "collector_ip", collector_ip)
        pulumi.set(__self__, "collector_port", collector_port)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "interface_select_method", interface_select_method)
        pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> str:
        """
        Collector IP.
        """
        return pulumi.get(self, "collector_ip")

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> int:
        """
        NetFlow collector port number.
        """
        return pulumi.get(self, "collector_port")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> str:
        """
        Specify how to select outgoing interface to reach server.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> str:
        """
        Source IP address for communication with the NetFlow agent.
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class GetNtpInterfaceResult(dict):
    def __init__(__self__, *,
                 interface_name: str):
        """
        :param str interface_name: Interface name.
        """
        pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class GetNtpNtpserverResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 id: int,
                 interface: str,
                 interface_select_method: str,
                 ip_type: str,
                 key: str,
                 key_id: int,
                 ntpv3: str,
                 server: str):
        """
        :param str authentication: Enable/disable MD5/SHA1 authentication.
        :param int id: NTP server ID.
        :param str interface: Specify outgoing interface to reach server.
        :param str interface_select_method: Specify how to select outgoing interface to reach server.
        :param str ip_type: Choose to connect to IPv4 or/and IPv6 NTP server.
        :param str key: Key for MD5/SHA1 authentication.
        :param int key_id: Key ID for authentication.
        :param str ntpv3: Enable to use NTPv3 instead of NTPv4.
        :param str server: IP address or hostname of the NTP Server.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "interface_select_method", interface_select_method)
        pulumi.set(__self__, "ip_type", ip_type)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "ntpv3", ntpv3)
        pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        """
        Enable/disable MD5/SHA1 authentication.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        NTP server ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> str:
        """
        Specify how to select outgoing interface to reach server.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> str:
        """
        Choose to connect to IPv4 or/and IPv6 NTP server.
        """
        return pulumi.get(self, "ip_type")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key for MD5/SHA1 authentication.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> int:
        """
        Key ID for authentication.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter
    def ntpv3(self) -> str:
        """
        Enable to use NTPv3 instead of NTPv4.
        """
        return pulumi.get(self, "ntpv3")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        IP address or hostname of the NTP Server.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class GetObjecttaggingTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Tag name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Tag name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetReplacemsggroupAdminResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupAlertmailResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupAuthResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupAutomationResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupCustomMessageResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupDeviceDetectionPortalResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupEcResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupFortiguardWfResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupFtpResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupHttpResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupIcapResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupMailResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupNacQuarResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupNntpResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupSpamResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupSslvpnResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupTrafficQuotaResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupUtmResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetReplacemsggroupWebproxyResult(dict):
    def __init__(__self__, *,
                 buffer: str,
                 format: str,
                 header: str,
                 msg_type: str):
        """
        :param str buffer: Message string.
        :param str format: Format flag.
        :param str header: Header flag.
        :param str msg_type: Message type.
        """
        pulumi.set(__self__, "buffer", buffer)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> str:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @property
    @pulumi.getter
    def format(self) -> str:
        """
        Format flag.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def header(self) -> str:
        """
        Header flag.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> str:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")


@pulumi.output_type
class GetSdnconnectorCompartmentListResult(dict):
    def __init__(__self__, *,
                 compartment_id: str):
        """
        :param str compartment_id: OCI compartment ID.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        OCI compartment ID.
        """
        return pulumi.get(self, "compartment_id")


@pulumi.output_type
class GetSdnconnectorExternalAccountListResult(dict):
    def __init__(__self__, *,
                 external_id: str,
                 region_lists: Sequence['outputs.GetSdnconnectorExternalAccountListRegionListResult'],
                 role_arn: str):
        """
        :param str external_id: AWS external ID.
        :param Sequence['GetSdnconnectorExternalAccountListRegionListArgs'] region_lists: AWS region name list. The structure of `region_list` block is documented below.
        :param str role_arn: AWS role ARN to assume.
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "region_lists", region_lists)
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        AWS external ID.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="regionLists")
    def region_lists(self) -> Sequence['outputs.GetSdnconnectorExternalAccountListRegionListResult']:
        """
        AWS region name list. The structure of `region_list` block is documented below.
        """
        return pulumi.get(self, "region_lists")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        AWS role ARN to assume.
        """
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class GetSdnconnectorExternalAccountListRegionListResult(dict):
    def __init__(__self__, *,
                 region: str):
        """
        :param str region: OCI region.
        """
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        OCI region.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSdnconnectorExternalIpResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system sdnconnector.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system sdnconnector.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSdnconnectorForwardingRuleResult(dict):
    def __init__(__self__, *,
                 rule_name: str,
                 target: str):
        """
        :param str rule_name: Forwarding rule name.
        :param str target: Target instance name.
        """
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        """
        Forwarding rule name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        Target instance name.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class GetSdnconnectorGcpProjectListResult(dict):
    def __init__(__self__, *,
                 gcp_zone_lists: Sequence['outputs.GetSdnconnectorGcpProjectListGcpZoneListResult'],
                 id: str):
        """
        :param Sequence['GetSdnconnectorGcpProjectListGcpZoneListArgs'] gcp_zone_lists: Configure GCP zone list. The structure of `gcp_zone_list` block is documented below.
        :param str id: GCP project ID.
        """
        pulumi.set(__self__, "gcp_zone_lists", gcp_zone_lists)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="gcpZoneLists")
    def gcp_zone_lists(self) -> Sequence['outputs.GetSdnconnectorGcpProjectListGcpZoneListResult']:
        """
        Configure GCP zone list. The structure of `gcp_zone_list` block is documented below.
        """
        return pulumi.get(self, "gcp_zone_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        GCP project ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSdnconnectorGcpProjectListGcpZoneListResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system sdnconnector.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system sdnconnector.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSdnconnectorNicResult(dict):
    def __init__(__self__, *,
                 ips: Sequence['outputs.GetSdnconnectorNicIpResult'],
                 name: str):
        """
        :param Sequence['GetSdnconnectorNicIpArgs'] ips: Configure IP configuration. The structure of `ip` block is documented below.
        :param str name: Specify the name of the desired system sdnconnector.
        """
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ips(self) -> Sequence['outputs.GetSdnconnectorNicIpResult']:
        """
        Configure IP configuration. The structure of `ip` block is documented below.
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system sdnconnector.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSdnconnectorNicIpResult(dict):
    def __init__(__self__, *,
                 name: str,
                 public_ip: str,
                 resource_group: str):
        """
        :param str name: Specify the name of the desired system sdnconnector.
        :param str public_ip: Public IP name.
        :param str resource_group: Resource group of Azure route table.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system sdnconnector.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        """
        Public IP name.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        Resource group of Azure route table.
        """
        return pulumi.get(self, "resource_group")


@pulumi.output_type
class GetSdnconnectorOciRegionListResult(dict):
    def __init__(__self__, *,
                 region: str):
        """
        :param str region: OCI region.
        """
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        OCI region.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetSdnconnectorRouteResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system sdnconnector.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system sdnconnector.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSdnconnectorRouteTableResult(dict):
    def __init__(__self__, *,
                 name: str,
                 resource_group: str,
                 routes: Sequence['outputs.GetSdnconnectorRouteTableRouteResult'],
                 subscription_id: str):
        """
        :param str name: Specify the name of the desired system sdnconnector.
        :param str resource_group: Resource group of Azure route table.
        :param Sequence['GetSdnconnectorRouteTableRouteArgs'] routes: Configure Azure route. The structure of `route` block is documented below.
        :param str subscription_id: Subscription ID of Azure route table.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_group", resource_group)
        pulumi.set(__self__, "routes", routes)
        pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system sdnconnector.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> str:
        """
        Resource group of Azure route table.
        """
        return pulumi.get(self, "resource_group")

    @property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetSdnconnectorRouteTableRouteResult']:
        """
        Configure Azure route. The structure of `route` block is documented below.
        """
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        """
        Subscription ID of Azure route table.
        """
        return pulumi.get(self, "subscription_id")


@pulumi.output_type
class GetSdnconnectorRouteTableRouteResult(dict):
    def __init__(__self__, *,
                 name: str,
                 next_hop: str):
        """
        :param str name: Specify the name of the desired system sdnconnector.
        :param str next_hop: Next hop address.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_hop", next_hop)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system sdnconnector.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> str:
        """
        Next hop address.
        """
        return pulumi.get(self, "next_hop")


@pulumi.output_type
class GetSdnconnectorServerListResult(dict):
    def __init__(__self__, *,
                 ip: str):
        """
        :param str ip: Configure IP configuration. The structure of `ip` block is documented below.
        """
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Configure IP configuration. The structure of `ip` block is documented below.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetSessionttlPortResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 id: int,
                 protocol: int,
                 refresh_direction: str,
                 start_port: int,
                 timeout: str):
        """
        :param int end_port: End port number.
        :param int id: Table entry ID.
        :param int protocol: Protocol (0 - 255).
        :param str refresh_direction: Refresh direction: Both, outgoing, incoming
        :param int start_port: Start port number.
        :param str timeout: Session timeout (TTL).
        """
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "refresh_direction", refresh_direction)
        pulumi.set(__self__, "start_port", start_port)
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        """
        End port number.
        """
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Table entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def protocol(self) -> int:
        """
        Protocol (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="refreshDirection")
    def refresh_direction(self) -> str:
        """
        Refresh direction: Both, outgoing, incoming
        """
        return pulumi.get(self, "refresh_direction")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        """
        Start port number.
        """
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        """
        Session timeout (TTL).
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetSflowCollectorResult(dict):
    def __init__(__self__, *,
                 collector_ip: str,
                 collector_port: int,
                 id: int,
                 interface: str,
                 interface_select_method: str,
                 source_ip: str):
        """
        :param str collector_ip: IP addresses of the sFlow collectors that sFlow agents added to interfaces in this VDOM send sFlow datagrams to.
        :param int collector_port: UDP port number used for sending sFlow datagrams (configure only if required by your sFlow collector or your network configuration) (0 - 65535, default = 6343).
        :param int id: ID.
        :param str interface: Specify outgoing interface to reach server.
        :param str interface_select_method: Specify how to select outgoing interface to reach server.
        :param str source_ip: Source IP address for sFlow agent.
        """
        pulumi.set(__self__, "collector_ip", collector_ip)
        pulumi.set(__self__, "collector_port", collector_port)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "interface_select_method", interface_select_method)
        pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> str:
        """
        IP addresses of the sFlow collectors that sFlow agents added to interfaces in this VDOM send sFlow datagrams to.
        """
        return pulumi.get(self, "collector_ip")

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> int:
        """
        UDP port number used for sending sFlow datagrams (configure only if required by your sFlow collector or your network configuration) (0 - 65535, default = 6343).
        """
        return pulumi.get(self, "collector_port")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> str:
        """
        Specify how to select outgoing interface to reach server.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> str:
        """
        Source IP address for sFlow agent.
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class GetVdomexceptionVdomResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: VDOM name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        VDOM name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVdomnetflowCollectorResult(dict):
    def __init__(__self__, *,
                 collector_ip: str,
                 collector_port: int,
                 id: int,
                 interface: str,
                 interface_select_method: str,
                 source_ip: str):
        """
        :param str collector_ip: Collector IP.
        :param int collector_port: NetFlow collector port number.
        :param int id: ID.
        :param str interface: Specify outgoing interface to reach server.
        :param str interface_select_method: Specify how to select outgoing interface to reach server.
        :param str source_ip: Source IP address for communication with the NetFlow agent.
        """
        pulumi.set(__self__, "collector_ip", collector_ip)
        pulumi.set(__self__, "collector_port", collector_port)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "interface_select_method", interface_select_method)
        pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> str:
        """
        Collector IP.
        """
        return pulumi.get(self, "collector_ip")

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> int:
        """
        NetFlow collector port number.
        """
        return pulumi.get(self, "collector_port")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> str:
        """
        Specify how to select outgoing interface to reach server.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> str:
        """
        Source IP address for communication with the NetFlow agent.
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class GetVdomsflowCollectorResult(dict):
    def __init__(__self__, *,
                 collector_ip: str,
                 collector_port: int,
                 id: int,
                 interface: str,
                 interface_select_method: str,
                 source_ip: str):
        """
        :param str collector_ip: IP addresses of the sFlow collectors that sFlow agents added to interfaces in this VDOM send sFlow datagrams to.
        :param int collector_port: UDP port number used for sending sFlow datagrams (configure only if required by your sFlow collector or your network configuration) (0 - 65535, default = 6343).
        :param int id: ID.
        :param str interface: Specify outgoing interface to reach server.
        :param str interface_select_method: Specify how to select outgoing interface to reach server.
        :param str source_ip: Source IP address for sFlow agent.
        """
        pulumi.set(__self__, "collector_ip", collector_ip)
        pulumi.set(__self__, "collector_port", collector_port)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "interface_select_method", interface_select_method)
        pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="collectorIp")
    def collector_ip(self) -> str:
        """
        IP addresses of the sFlow collectors that sFlow agents added to interfaces in this VDOM send sFlow datagrams to.
        """
        return pulumi.get(self, "collector_ip")

    @property
    @pulumi.getter(name="collectorPort")
    def collector_port(self) -> int:
        """
        UDP port number used for sending sFlow datagrams (configure only if required by your sFlow collector or your network configuration) (0 - 65535, default = 6343).
        """
        return pulumi.get(self, "collector_port")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> str:
        """
        Specify how to select outgoing interface to reach server.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> str:
        """
        Source IP address for sFlow agent.
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class GetVirtualwanlinkFailAlertInterfaceResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualwanlinkHealthCheckResult(dict):
    def __init__(__self__, *,
                 addr_mode: str,
                 diffservcode: str,
                 dns_request_domain: str,
                 failtime: int,
                 ha_priority: int,
                 http_agent: str,
                 http_get: str,
                 http_match: str,
                 interval: int,
                 members: Sequence['outputs.GetVirtualwanlinkHealthCheckMemberResult'],
                 name: str,
                 packet_size: int,
                 password: str,
                 port: int,
                 probe_count: int,
                 probe_packets: str,
                 probe_timeout: int,
                 protocol: str,
                 recoverytime: int,
                 security_mode: str,
                 server: str,
                 sla_fail_log_period: int,
                 sla_pass_log_period: int,
                 slas: Sequence['outputs.GetVirtualwanlinkHealthCheckSlaResult'],
                 system_dns: str,
                 threshold_alert_jitter: int,
                 threshold_alert_latency: int,
                 threshold_alert_packetloss: int,
                 threshold_warning_jitter: int,
                 threshold_warning_latency: int,
                 threshold_warning_packetloss: int,
                 update_cascade_interface: str,
                 update_static_route: str):
        """
        :param str addr_mode: Address mode (IPv4 or IPv6).
        :param str diffservcode: Differentiated services code point (DSCP) in the IP header of the probe packet.
        :param str dns_request_domain: Fully qualified domain name to resolve for the DNS probe.
        :param int failtime: Number of failures before server is considered lost (1 - 3600, default = 5).
        :param int ha_priority: HA election priority (1 - 50).
        :param str http_agent: String in the http-agent field in the HTTP header.
        :param str http_get: URL used to communicate with the server if the protocol if the protocol is HTTP.
        :param str http_match: Response string expected from the server if the protocol is HTTP.
        :param int interval: Status check interval, or the time between attempting to connect to the server (1 - 3600 sec, default = 5).
        :param Sequence['GetVirtualwanlinkHealthCheckMemberArgs'] members: Member sequence number list. The structure of `members` block is documented below.
        :param str name: Control-based Internet Service group name.
        :param int packet_size: Packet size of a twamp test session,
        :param str password: Twamp controller password in authentication mode
        :param int port: Port number used to communicate with the server over the selected protocol.
        :param int probe_count: Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        :param str probe_packets: Enable/disable transmission of probe packets.
        :param int probe_timeout: Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        :param str protocol: Protocol number.
        :param int recoverytime: Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
        :param str security_mode: Twamp controller security mode.
        :param str server: IP address or FQDN name of the server.
        :param int sla_fail_log_period: Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
        :param int sla_pass_log_period: Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
        :param Sequence['GetVirtualwanlinkHealthCheckSlaArgs'] slas: Service level agreement (SLA). The structure of `sla` block is documented below.
        :param str system_dns: Enable/disable system DNS as the probe server.
        :param int threshold_alert_jitter: Alert threshold for jitter (ms, default = 0).
        :param int threshold_alert_latency: Alert threshold for latency (ms, default = 0).
        :param int threshold_alert_packetloss: Alert threshold for packet loss (percentage, default = 0).
        :param int threshold_warning_jitter: Warning threshold for jitter (ms, default = 0).
        :param int threshold_warning_latency: Warning threshold for latency (ms, default = 0).
        :param int threshold_warning_packetloss: Warning threshold for packet loss (percentage, default = 0).
        :param str update_cascade_interface: Enable/disable update cascade interface.
        :param str update_static_route: Enable/disable updating the static route.
        """
        pulumi.set(__self__, "addr_mode", addr_mode)
        pulumi.set(__self__, "diffservcode", diffservcode)
        pulumi.set(__self__, "dns_request_domain", dns_request_domain)
        pulumi.set(__self__, "failtime", failtime)
        pulumi.set(__self__, "ha_priority", ha_priority)
        pulumi.set(__self__, "http_agent", http_agent)
        pulumi.set(__self__, "http_get", http_get)
        pulumi.set(__self__, "http_match", http_match)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "packet_size", packet_size)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "probe_count", probe_count)
        pulumi.set(__self__, "probe_packets", probe_packets)
        pulumi.set(__self__, "probe_timeout", probe_timeout)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "recoverytime", recoverytime)
        pulumi.set(__self__, "security_mode", security_mode)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "sla_fail_log_period", sla_fail_log_period)
        pulumi.set(__self__, "sla_pass_log_period", sla_pass_log_period)
        pulumi.set(__self__, "slas", slas)
        pulumi.set(__self__, "system_dns", system_dns)
        pulumi.set(__self__, "threshold_alert_jitter", threshold_alert_jitter)
        pulumi.set(__self__, "threshold_alert_latency", threshold_alert_latency)
        pulumi.set(__self__, "threshold_alert_packetloss", threshold_alert_packetloss)
        pulumi.set(__self__, "threshold_warning_jitter", threshold_warning_jitter)
        pulumi.set(__self__, "threshold_warning_latency", threshold_warning_latency)
        pulumi.set(__self__, "threshold_warning_packetloss", threshold_warning_packetloss)
        pulumi.set(__self__, "update_cascade_interface", update_cascade_interface)
        pulumi.set(__self__, "update_static_route", update_static_route)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> str:
        """
        Address mode (IPv4 or IPv6).
        """
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter
    def diffservcode(self) -> str:
        """
        Differentiated services code point (DSCP) in the IP header of the probe packet.
        """
        return pulumi.get(self, "diffservcode")

    @property
    @pulumi.getter(name="dnsRequestDomain")
    def dns_request_domain(self) -> str:
        """
        Fully qualified domain name to resolve for the DNS probe.
        """
        return pulumi.get(self, "dns_request_domain")

    @property
    @pulumi.getter
    def failtime(self) -> int:
        """
        Number of failures before server is considered lost (1 - 3600, default = 5).
        """
        return pulumi.get(self, "failtime")

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> int:
        """
        HA election priority (1 - 50).
        """
        return pulumi.get(self, "ha_priority")

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> str:
        """
        String in the http-agent field in the HTTP header.
        """
        return pulumi.get(self, "http_agent")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> str:
        """
        URL used to communicate with the server if the protocol if the protocol is HTTP.
        """
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> str:
        """
        Response string expected from the server if the protocol is HTTP.
        """
        return pulumi.get(self, "http_match")

    @property
    @pulumi.getter
    def interval(self) -> int:
        """
        Status check interval, or the time between attempting to connect to the server (1 - 3600 sec, default = 5).
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetVirtualwanlinkHealthCheckMemberResult']:
        """
        Member sequence number list. The structure of `members` block is documented below.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> int:
        """
        Packet size of a twamp test session,
        """
        return pulumi.get(self, "packet_size")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Twamp controller password in authentication mode
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port number used to communicate with the server over the selected protocol.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> int:
        """
        Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        """
        return pulumi.get(self, "probe_count")

    @property
    @pulumi.getter(name="probePackets")
    def probe_packets(self) -> str:
        """
        Enable/disable transmission of probe packets.
        """
        return pulumi.get(self, "probe_packets")

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> int:
        """
        Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        """
        return pulumi.get(self, "probe_timeout")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol number.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def recoverytime(self) -> int:
        """
        Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
        """
        return pulumi.get(self, "recoverytime")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> str:
        """
        Twamp controller security mode.
        """
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        IP address or FQDN name of the server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="slaFailLogPeriod")
    def sla_fail_log_period(self) -> int:
        """
        Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "sla_fail_log_period")

    @property
    @pulumi.getter(name="slaPassLogPeriod")
    def sla_pass_log_period(self) -> int:
        """
        Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "sla_pass_log_period")

    @property
    @pulumi.getter
    def slas(self) -> Sequence['outputs.GetVirtualwanlinkHealthCheckSlaResult']:
        """
        Service level agreement (SLA). The structure of `sla` block is documented below.
        """
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter(name="systemDns")
    def system_dns(self) -> str:
        """
        Enable/disable system DNS as the probe server.
        """
        return pulumi.get(self, "system_dns")

    @property
    @pulumi.getter(name="thresholdAlertJitter")
    def threshold_alert_jitter(self) -> int:
        """
        Alert threshold for jitter (ms, default = 0).
        """
        return pulumi.get(self, "threshold_alert_jitter")

    @property
    @pulumi.getter(name="thresholdAlertLatency")
    def threshold_alert_latency(self) -> int:
        """
        Alert threshold for latency (ms, default = 0).
        """
        return pulumi.get(self, "threshold_alert_latency")

    @property
    @pulumi.getter(name="thresholdAlertPacketloss")
    def threshold_alert_packetloss(self) -> int:
        """
        Alert threshold for packet loss (percentage, default = 0).
        """
        return pulumi.get(self, "threshold_alert_packetloss")

    @property
    @pulumi.getter(name="thresholdWarningJitter")
    def threshold_warning_jitter(self) -> int:
        """
        Warning threshold for jitter (ms, default = 0).
        """
        return pulumi.get(self, "threshold_warning_jitter")

    @property
    @pulumi.getter(name="thresholdWarningLatency")
    def threshold_warning_latency(self) -> int:
        """
        Warning threshold for latency (ms, default = 0).
        """
        return pulumi.get(self, "threshold_warning_latency")

    @property
    @pulumi.getter(name="thresholdWarningPacketloss")
    def threshold_warning_packetloss(self) -> int:
        """
        Warning threshold for packet loss (percentage, default = 0).
        """
        return pulumi.get(self, "threshold_warning_packetloss")

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> str:
        """
        Enable/disable update cascade interface.
        """
        return pulumi.get(self, "update_cascade_interface")

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> str:
        """
        Enable/disable updating the static route.
        """
        return pulumi.get(self, "update_static_route")


@pulumi.output_type
class GetVirtualwanlinkHealthCheckMemberResult(dict):
    def __init__(__self__, *,
                 seq_num: int):
        """
        :param int seq_num: Member sequence number.
        """
        pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> int:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class GetVirtualwanlinkHealthCheckSlaResult(dict):
    def __init__(__self__, *,
                 id: int,
                 jitter_threshold: int,
                 latency_threshold: int,
                 link_cost_factor: str,
                 packetloss_threshold: int):
        """
        :param int id: SLA ID.
        :param int jitter_threshold: Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        :param int latency_threshold: Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        :param str link_cost_factor: Link cost factor.
        :param int packetloss_threshold: Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "jitter_threshold", jitter_threshold)
        pulumi.set(__self__, "latency_threshold", latency_threshold)
        pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        pulumi.set(__self__, "packetloss_threshold", packetloss_threshold)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jitterThreshold")
    def jitter_threshold(self) -> int:
        """
        Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        """
        return pulumi.get(self, "jitter_threshold")

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> int:
        """
        Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        """
        return pulumi.get(self, "latency_threshold")

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> str:
        """
        Link cost factor.
        """
        return pulumi.get(self, "link_cost_factor")

    @property
    @pulumi.getter(name="packetlossThreshold")
    def packetloss_threshold(self) -> int:
        """
        Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
        """
        return pulumi.get(self, "packetloss_threshold")


@pulumi.output_type
class GetVirtualwanlinkMemberResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 cost: int,
                 gateway: str,
                 gateway6: str,
                 ingress_spillover_threshold: int,
                 interface: str,
                 priority: int,
                 seq_num: int,
                 source: str,
                 source6: str,
                 spillover_threshold: int,
                 status: str,
                 volume_ratio: int,
                 weight: int):
        """
        :param str comment: Comments.
        :param int cost: Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
        :param str gateway: Enable/disable SD-WAN service gateway.
        :param str gateway6: IPv6 gateway.
        :param int ingress_spillover_threshold: Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        :param str interface: Interface name.
        :param int priority: Priority of the interface (0 - 4294967295). Used for SD-WAN rules or priority rules.
        :param int seq_num: Member sequence number.
        :param str source: Source IP address used in the health-check packet to the server.
        :param str source6: Source IPv6 address used in the health-check packet to the server.
        :param int spillover_threshold: Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        :param str status: Enable/disable SD-WAN service.
        :param int volume_ratio: Measured volume ratio (this value / sum of all values = percentage of link volume, 0 - 255).
        :param int weight: Weight of this interface for weighted load balancing. (0 - 255) More traffic is directed to interfaces with higher weights.
        """
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "gateway6", gateway6)
        pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "seq_num", seq_num)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "source6", source6)
        pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "volume_ratio", volume_ratio)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Comments.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def cost(self) -> int:
        """
        Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        Enable/disable SD-WAN service gateway.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> str:
        """
        IPv6 gateway.
        """
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> int:
        """
        Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        """
        return pulumi.get(self, "ingress_spillover_threshold")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority of the interface (0 - 4294967295). Used for SD-WAN rules or priority rules.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> int:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        Source IP address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def source6(self) -> str:
        """
        Source IPv6 address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source6")

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> int:
        """
        Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        """
        return pulumi.get(self, "spillover_threshold")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable SD-WAN service.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="volumeRatio")
    def volume_ratio(self) -> int:
        """
        Measured volume ratio (this value / sum of all values = percentage of link volume, 0 - 255).
        """
        return pulumi.get(self, "volume_ratio")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Weight of this interface for weighted load balancing. (0 - 255) More traffic is directed to interfaces with higher weights.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetVirtualwanlinkNeighborResult(dict):
    def __init__(__self__, *,
                 health_check: str,
                 ip: str,
                 member: int,
                 role: str,
                 sla_id: int):
        """
        :param str health_check: Virtual WAN Link health-check.
        :param str ip: IP address of neighbor.
        :param int member: Member sequence number.
        :param str role: Service role to work with neighbor.
        :param int sla_id: SLA ID.
        """
        pulumi.set(__self__, "health_check", health_check)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "member", member)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "sla_id", sla_id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> str:
        """
        Virtual WAN Link health-check.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP address of neighbor.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def member(self) -> int:
        """
        Member sequence number.
        """
        return pulumi.get(self, "member")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Service role to work with neighbor.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> int:
        """
        SLA ID.
        """
        return pulumi.get(self, "sla_id")


@pulumi.output_type
class GetVirtualwanlinkServiceResult(dict):
    def __init__(__self__, *,
                 addr_mode: str,
                 bandwidth_weight: int,
                 default: str,
                 dscp_forward: str,
                 dscp_forward_tag: str,
                 dscp_reverse: str,
                 dscp_reverse_tag: str,
                 dst6s: Sequence['outputs.GetVirtualwanlinkServiceDst6Result'],
                 dst_negate: str,
                 dsts: Sequence['outputs.GetVirtualwanlinkServiceDstResult'],
                 end_port: int,
                 gateway: str,
                 groups: Sequence['outputs.GetVirtualwanlinkServiceGroupResult'],
                 health_check: str,
                 hold_down_time: int,
                 id: int,
                 input_device_negate: str,
                 input_devices: Sequence['outputs.GetVirtualwanlinkServiceInputDeviceResult'],
                 internet_service: str,
                 internet_service_app_ctrl_groups: Sequence['outputs.GetVirtualwanlinkServiceInternetServiceAppCtrlGroupResult'],
                 internet_service_app_ctrls: Sequence['outputs.GetVirtualwanlinkServiceInternetServiceAppCtrlResult'],
                 internet_service_ctrl_groups: Sequence['outputs.GetVirtualwanlinkServiceInternetServiceCtrlGroupResult'],
                 internet_service_ctrls: Sequence['outputs.GetVirtualwanlinkServiceInternetServiceCtrlResult'],
                 internet_service_custom_groups: Sequence['outputs.GetVirtualwanlinkServiceInternetServiceCustomGroupResult'],
                 internet_service_customs: Sequence['outputs.GetVirtualwanlinkServiceInternetServiceCustomResult'],
                 internet_service_groups: Sequence['outputs.GetVirtualwanlinkServiceInternetServiceGroupResult'],
                 internet_service_ids: Sequence['outputs.GetVirtualwanlinkServiceInternetServiceIdResult'],
                 internet_service_names: Sequence['outputs.GetVirtualwanlinkServiceInternetServiceNameResult'],
                 jitter_weight: int,
                 latency_weight: int,
                 link_cost_factor: str,
                 link_cost_threshold: int,
                 member: int,
                 mode: str,
                 name: str,
                 packet_loss_weight: int,
                 priority_members: Sequence['outputs.GetVirtualwanlinkServicePriorityMemberResult'],
                 protocol: int,
                 quality_link: int,
                 role: str,
                 route_tag: int,
                 sla_compare_method: str,
                 slas: Sequence['outputs.GetVirtualwanlinkServiceSlaResult'],
                 src6s: Sequence['outputs.GetVirtualwanlinkServiceSrc6Result'],
                 src_negate: str,
                 srcs: Sequence['outputs.GetVirtualwanlinkServiceSrcResult'],
                 standalone_action: str,
                 start_port: int,
                 status: str,
                 tos: str,
                 tos_mask: str,
                 users: Sequence['outputs.GetVirtualwanlinkServiceUserResult']):
        """
        :param str addr_mode: Address mode (IPv4 or IPv6).
        :param int bandwidth_weight: Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
        :param str default: Enable/disable use of SD-WAN as default service.
        :param str dscp_forward: Enable/disable forward traffic DSCP tag.
        :param str dscp_forward_tag: Forward traffic DSCP tag.
        :param str dscp_reverse: Enable/disable reverse traffic DSCP tag.
        :param str dscp_reverse_tag: Reverse traffic DSCP tag.
        :param Sequence['GetVirtualwanlinkServiceDst6Args'] dst6s: Destination address6 name. The structure of `dst6` block is documented below.
        :param str dst_negate: Enable/disable negation of destination address match.
        :param Sequence['GetVirtualwanlinkServiceDstArgs'] dsts: Destination address name. The structure of `dst` block is documented below.
        :param int end_port: End destination port number.
        :param str gateway: Enable/disable SD-WAN service gateway.
        :param Sequence['GetVirtualwanlinkServiceGroupArgs'] groups: User groups. The structure of `groups` block is documented below.
        :param str health_check: Virtual WAN Link health-check.
        :param int hold_down_time: Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
        :param int id: SLA ID.
        :param str input_device_negate: Enable/disable negation of input device match.
        :param Sequence['GetVirtualwanlinkServiceInputDeviceArgs'] input_devices: Source interface name. The structure of `input_device` block is documented below.
        :param str internet_service: Enable/disable use of Internet service for application-based load balancing.
        :param Sequence['GetVirtualwanlinkServiceInternetServiceAppCtrlGroupArgs'] internet_service_app_ctrl_groups: Application control based Internet Service group list. The structure of `internet_service_app_ctrl_group` block is documented below.
        :param Sequence['GetVirtualwanlinkServiceInternetServiceAppCtrlArgs'] internet_service_app_ctrls: Application control based Internet Service ID list. The structure of `internet_service_app_ctrl` block is documented below.
        :param Sequence['GetVirtualwanlinkServiceInternetServiceCtrlGroupArgs'] internet_service_ctrl_groups: Control-based Internet Service group list. The structure of `internet_service_ctrl_group` block is documented below.
        :param Sequence['GetVirtualwanlinkServiceInternetServiceCtrlArgs'] internet_service_ctrls: Control-based Internet Service ID list. The structure of `internet_service_ctrl` block is documented below.
        :param Sequence['GetVirtualwanlinkServiceInternetServiceCustomGroupArgs'] internet_service_custom_groups: Custom Internet Service group list. The structure of `internet_service_custom_group` block is documented below.
        :param Sequence['GetVirtualwanlinkServiceInternetServiceCustomArgs'] internet_service_customs: Custom Internet service name list. The structure of `internet_service_custom` block is documented below.
        :param Sequence['GetVirtualwanlinkServiceInternetServiceGroupArgs'] internet_service_groups: Internet Service group list. The structure of `internet_service_group` block is documented below.
        :param Sequence['GetVirtualwanlinkServiceInternetServiceIdArgs'] internet_service_ids: Internet service ID list. The structure of `internet_service_id` block is documented below.
        :param Sequence['GetVirtualwanlinkServiceInternetServiceNameArgs'] internet_service_names: Internet service name list. The structure of `internet_service_name` block is documented below.
        :param int jitter_weight: Coefficient of jitter in the formula of custom-profile-1.
        :param int latency_weight: Coefficient of latency in the formula of custom-profile-1.
        :param str link_cost_factor: Link cost factor.
        :param int link_cost_threshold: Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
        :param int member: Member sequence number.
        :param str mode: Control how the priority rule sets the priority of interfaces in the SD-WAN.
        :param str name: Control-based Internet Service group name.
        :param int packet_loss_weight: Coefficient of packet-loss in the formula of custom-profile-1.
        :param Sequence['GetVirtualwanlinkServicePriorityMemberArgs'] priority_members: Member sequence number list. The structure of `priority_members` block is documented below.
        :param int protocol: Protocol number.
        :param int quality_link: Quality grade.
        :param str role: Service role to work with neighbor.
        :param int route_tag: IPv4 route map route-tag.
        :param str sla_compare_method: Method to compare SLA value for sla and load balance mode.
        :param Sequence['GetVirtualwanlinkServiceSlaArgs'] slas: Service level agreement (SLA). The structure of `sla` block is documented below.
        :param Sequence['GetVirtualwanlinkServiceSrc6Args'] src6s: Source address6 name. The structure of `src6` block is documented below.
        :param str src_negate: Enable/disable negation of source address match.
        :param Sequence['GetVirtualwanlinkServiceSrcArgs'] srcs: Source address name. The structure of `src` block is documented below.
        :param str standalone_action: Enable/disable service when selected neighbor role is standalone while service role is not standalone.
        :param int start_port: Start destination port number.
        :param str status: Enable/disable SD-WAN service.
        :param str tos: Type of service bit pattern.
        :param str tos_mask: Type of service evaluated bits.
        :param Sequence['GetVirtualwanlinkServiceUserArgs'] users: User name. The structure of `users` block is documented below.
        """
        pulumi.set(__self__, "addr_mode", addr_mode)
        pulumi.set(__self__, "bandwidth_weight", bandwidth_weight)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "dscp_forward", dscp_forward)
        pulumi.set(__self__, "dscp_forward_tag", dscp_forward_tag)
        pulumi.set(__self__, "dscp_reverse", dscp_reverse)
        pulumi.set(__self__, "dscp_reverse_tag", dscp_reverse_tag)
        pulumi.set(__self__, "dst6s", dst6s)
        pulumi.set(__self__, "dst_negate", dst_negate)
        pulumi.set(__self__, "dsts", dsts)
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "health_check", health_check)
        pulumi.set(__self__, "hold_down_time", hold_down_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "input_device_negate", input_device_negate)
        pulumi.set(__self__, "input_devices", input_devices)
        pulumi.set(__self__, "internet_service", internet_service)
        pulumi.set(__self__, "internet_service_app_ctrl_groups", internet_service_app_ctrl_groups)
        pulumi.set(__self__, "internet_service_app_ctrls", internet_service_app_ctrls)
        pulumi.set(__self__, "internet_service_ctrl_groups", internet_service_ctrl_groups)
        pulumi.set(__self__, "internet_service_ctrls", internet_service_ctrls)
        pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        pulumi.set(__self__, "internet_service_names", internet_service_names)
        pulumi.set(__self__, "jitter_weight", jitter_weight)
        pulumi.set(__self__, "latency_weight", latency_weight)
        pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        pulumi.set(__self__, "link_cost_threshold", link_cost_threshold)
        pulumi.set(__self__, "member", member)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "packet_loss_weight", packet_loss_weight)
        pulumi.set(__self__, "priority_members", priority_members)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "quality_link", quality_link)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "route_tag", route_tag)
        pulumi.set(__self__, "sla_compare_method", sla_compare_method)
        pulumi.set(__self__, "slas", slas)
        pulumi.set(__self__, "src6s", src6s)
        pulumi.set(__self__, "src_negate", src_negate)
        pulumi.set(__self__, "srcs", srcs)
        pulumi.set(__self__, "standalone_action", standalone_action)
        pulumi.set(__self__, "start_port", start_port)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tos", tos)
        pulumi.set(__self__, "tos_mask", tos_mask)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> str:
        """
        Address mode (IPv4 or IPv6).
        """
        return pulumi.get(self, "addr_mode")

    @property
    @pulumi.getter(name="bandwidthWeight")
    def bandwidth_weight(self) -> int:
        """
        Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
        """
        return pulumi.get(self, "bandwidth_weight")

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        Enable/disable use of SD-WAN as default service.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="dscpForward")
    def dscp_forward(self) -> str:
        """
        Enable/disable forward traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_forward")

    @property
    @pulumi.getter(name="dscpForwardTag")
    def dscp_forward_tag(self) -> str:
        """
        Forward traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_forward_tag")

    @property
    @pulumi.getter(name="dscpReverse")
    def dscp_reverse(self) -> str:
        """
        Enable/disable reverse traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_reverse")

    @property
    @pulumi.getter(name="dscpReverseTag")
    def dscp_reverse_tag(self) -> str:
        """
        Reverse traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_reverse_tag")

    @property
    @pulumi.getter
    def dst6s(self) -> Sequence['outputs.GetVirtualwanlinkServiceDst6Result']:
        """
        Destination address6 name. The structure of `dst6` block is documented below.
        """
        return pulumi.get(self, "dst6s")

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> str:
        """
        Enable/disable negation of destination address match.
        """
        return pulumi.get(self, "dst_negate")

    @property
    @pulumi.getter
    def dsts(self) -> Sequence['outputs.GetVirtualwanlinkServiceDstResult']:
        """
        Destination address name. The structure of `dst` block is documented below.
        """
        return pulumi.get(self, "dsts")

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        """
        End destination port number.
        """
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        Enable/disable SD-WAN service gateway.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetVirtualwanlinkServiceGroupResult']:
        """
        User groups. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> str:
        """
        Virtual WAN Link health-check.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> int:
        """
        Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
        """
        return pulumi.get(self, "hold_down_time")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> str:
        """
        Enable/disable negation of input device match.
        """
        return pulumi.get(self, "input_device_negate")

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Sequence['outputs.GetVirtualwanlinkServiceInputDeviceResult']:
        """
        Source interface name. The structure of `input_device` block is documented below.
        """
        return pulumi.get(self, "input_devices")

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> str:
        """
        Enable/disable use of Internet service for application-based load balancing.
        """
        return pulumi.get(self, "internet_service")

    @property
    @pulumi.getter(name="internetServiceAppCtrlGroups")
    def internet_service_app_ctrl_groups(self) -> Sequence['outputs.GetVirtualwanlinkServiceInternetServiceAppCtrlGroupResult']:
        """
        Application control based Internet Service group list. The structure of `internet_service_app_ctrl_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrl_groups")

    @property
    @pulumi.getter(name="internetServiceAppCtrls")
    def internet_service_app_ctrls(self) -> Sequence['outputs.GetVirtualwanlinkServiceInternetServiceAppCtrlResult']:
        """
        Application control based Internet Service ID list. The structure of `internet_service_app_ctrl` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrls")

    @property
    @pulumi.getter(name="internetServiceCtrlGroups")
    def internet_service_ctrl_groups(self) -> Sequence['outputs.GetVirtualwanlinkServiceInternetServiceCtrlGroupResult']:
        """
        Control-based Internet Service group list. The structure of `internet_service_ctrl_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_ctrl_groups")

    @property
    @pulumi.getter(name="internetServiceCtrls")
    def internet_service_ctrls(self) -> Sequence['outputs.GetVirtualwanlinkServiceInternetServiceCtrlResult']:
        """
        Control-based Internet Service ID list. The structure of `internet_service_ctrl` block is documented below.
        """
        return pulumi.get(self, "internet_service_ctrls")

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Sequence['outputs.GetVirtualwanlinkServiceInternetServiceCustomGroupResult']:
        """
        Custom Internet Service group list. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Sequence['outputs.GetVirtualwanlinkServiceInternetServiceCustomResult']:
        """
        Custom Internet service name list. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Sequence['outputs.GetVirtualwanlinkServiceInternetServiceGroupResult']:
        """
        Internet Service group list. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Sequence['outputs.GetVirtualwanlinkServiceInternetServiceIdResult']:
        """
        Internet service ID list. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Sequence['outputs.GetVirtualwanlinkServiceInternetServiceNameResult']:
        """
        Internet service name list. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @property
    @pulumi.getter(name="jitterWeight")
    def jitter_weight(self) -> int:
        """
        Coefficient of jitter in the formula of custom-profile-1.
        """
        return pulumi.get(self, "jitter_weight")

    @property
    @pulumi.getter(name="latencyWeight")
    def latency_weight(self) -> int:
        """
        Coefficient of latency in the formula of custom-profile-1.
        """
        return pulumi.get(self, "latency_weight")

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> str:
        """
        Link cost factor.
        """
        return pulumi.get(self, "link_cost_factor")

    @property
    @pulumi.getter(name="linkCostThreshold")
    def link_cost_threshold(self) -> int:
        """
        Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
        """
        return pulumi.get(self, "link_cost_threshold")

    @property
    @pulumi.getter
    def member(self) -> int:
        """
        Member sequence number.
        """
        return pulumi.get(self, "member")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Control how the priority rule sets the priority of interfaces in the SD-WAN.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="packetLossWeight")
    def packet_loss_weight(self) -> int:
        """
        Coefficient of packet-loss in the formula of custom-profile-1.
        """
        return pulumi.get(self, "packet_loss_weight")

    @property
    @pulumi.getter(name="priorityMembers")
    def priority_members(self) -> Sequence['outputs.GetVirtualwanlinkServicePriorityMemberResult']:
        """
        Member sequence number list. The structure of `priority_members` block is documented below.
        """
        return pulumi.get(self, "priority_members")

    @property
    @pulumi.getter
    def protocol(self) -> int:
        """
        Protocol number.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="qualityLink")
    def quality_link(self) -> int:
        """
        Quality grade.
        """
        return pulumi.get(self, "quality_link")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Service role to work with neighbor.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> int:
        """
        IPv4 route map route-tag.
        """
        return pulumi.get(self, "route_tag")

    @property
    @pulumi.getter(name="slaCompareMethod")
    def sla_compare_method(self) -> str:
        """
        Method to compare SLA value for sla and load balance mode.
        """
        return pulumi.get(self, "sla_compare_method")

    @property
    @pulumi.getter
    def slas(self) -> Sequence['outputs.GetVirtualwanlinkServiceSlaResult']:
        """
        Service level agreement (SLA). The structure of `sla` block is documented below.
        """
        return pulumi.get(self, "slas")

    @property
    @pulumi.getter
    def src6s(self) -> Sequence['outputs.GetVirtualwanlinkServiceSrc6Result']:
        """
        Source address6 name. The structure of `src6` block is documented below.
        """
        return pulumi.get(self, "src6s")

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> str:
        """
        Enable/disable negation of source address match.
        """
        return pulumi.get(self, "src_negate")

    @property
    @pulumi.getter
    def srcs(self) -> Sequence['outputs.GetVirtualwanlinkServiceSrcResult']:
        """
        Source address name. The structure of `src` block is documented below.
        """
        return pulumi.get(self, "srcs")

    @property
    @pulumi.getter(name="standaloneAction")
    def standalone_action(self) -> str:
        """
        Enable/disable service when selected neighbor role is standalone while service role is not standalone.
        """
        return pulumi.get(self, "standalone_action")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        """
        Start destination port number.
        """
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable SD-WAN service.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tos(self) -> str:
        """
        Type of service bit pattern.
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> str:
        """
        Type of service evaluated bits.
        """
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetVirtualwanlinkServiceUserResult']:
        """
        User name. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetVirtualwanlinkServiceDst6Result(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualwanlinkServiceDstResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualwanlinkServiceGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualwanlinkServiceInputDeviceResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualwanlinkServiceInternetServiceAppCtrlResult(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: SLA ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetVirtualwanlinkServiceInternetServiceAppCtrlGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualwanlinkServiceInternetServiceCtrlResult(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: SLA ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetVirtualwanlinkServiceInternetServiceCtrlGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualwanlinkServiceInternetServiceCustomResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualwanlinkServiceInternetServiceCustomGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualwanlinkServiceInternetServiceGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualwanlinkServiceInternetServiceIdResult(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: SLA ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetVirtualwanlinkServiceInternetServiceNameResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualwanlinkServicePriorityMemberResult(dict):
    def __init__(__self__, *,
                 seq_num: int):
        """
        :param int seq_num: Member sequence number.
        """
        pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> int:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")


@pulumi.output_type
class GetVirtualwanlinkServiceSlaResult(dict):
    def __init__(__self__, *,
                 health_check: str,
                 id: int):
        """
        :param str health_check: Virtual WAN Link health-check.
        :param int id: SLA ID.
        """
        pulumi.set(__self__, "health_check", health_check)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> str:
        """
        Virtual WAN Link health-check.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetVirtualwanlinkServiceSrc6Result(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualwanlinkServiceSrcResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualwanlinkServiceUserResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualwanlinkZoneResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Control-based Internet Service group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVxlanRemoteIp6Result(dict):
    def __init__(__self__, *,
                 ip6: str):
        """
        :param str ip6: IPv6 address.
        """
        pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def ip6(self) -> str:
        """
        IPv6 address.
        """
        return pulumi.get(self, "ip6")


@pulumi.output_type
class GetVxlanRemoteIpResult(dict):
    def __init__(__self__, *,
                 ip: str):
        """
        :param str ip: IPv4 address.
        """
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IPv4 address.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetZoneInterfaceResult(dict):
    def __init__(__self__, *,
                 interface_name: str):
        """
        :param str interface_name: Select interfaces to add to the zone.
        """
        pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> str:
        """
        Select interfaces to add to the zone.
        """
        return pulumi.get(self, "interface_name")


@pulumi.output_type
class GetZoneTaggingResult(dict):
    def __init__(__self__, *,
                 category: str,
                 name: str,
                 tags: Sequence['outputs.GetZoneTaggingTagResult']):
        """
        :param str category: Tag category.
        :param str name: Specify the name of the desired system zone.
        :param Sequence['GetZoneTaggingTagArgs'] tags: Tags. The structure of `tags` block is documented below.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system zone.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetZoneTaggingTagResult']:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetZoneTaggingTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Specify the name of the desired system zone.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify the name of the desired system zone.
        """
        return pulumi.get(self, "name")


