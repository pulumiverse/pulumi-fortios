# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetHaResult',
    'AwaitableGetHaResult',
    'get_ha',
    'get_ha_output',
]

@pulumi.output_type
class GetHaResult:
    """
    A collection of values returned by getHa.
    """
    def __init__(__self__, arps=None, arps_interval=None, authentication=None, cpu_threshold=None, encryption=None, evpn_ttl=None, failover_hold_time=None, ftp_proxy_threshold=None, gratuitous_arps=None, group_id=None, group_name=None, ha_direct=None, ha_eth_type=None, ha_mgmt_interfaces=None, ha_mgmt_status=None, ha_uptime_diff_margin=None, hb_interval=None, hb_interval_in_milliseconds=None, hb_lost_threshold=None, hbdev=None, hc_eth_type=None, hello_holddown=None, http_proxy_threshold=None, id=None, imap_proxy_threshold=None, inter_cluster_session_sync=None, ipsec_phase2_proposal=None, key=None, l2ep_eth_type=None, link_failed_signal=None, load_balance_all=None, logical_sn=None, memory_based_failover=None, memory_compatible_mode=None, memory_failover_flip_timeout=None, memory_failover_monitor_period=None, memory_failover_sample_rate=None, memory_failover_threshold=None, memory_threshold=None, mode=None, monitor=None, multicast_ttl=None, nntp_proxy_threshold=None, override=None, override_wait_time=None, password=None, pingserver_failover_threshold=None, pingserver_flip_timeout=None, pingserver_monitor_interface=None, pingserver_secondary_force_reset=None, pingserver_slave_force_reset=None, pop3_proxy_threshold=None, priority=None, route_hold=None, route_ttl=None, route_wait=None, schedule=None, secondary_vclusters=None, session_pickup=None, session_pickup_connectionless=None, session_pickup_delay=None, session_pickup_expectation=None, session_pickup_nat=None, session_sync_dev=None, smtp_proxy_threshold=None, ssd_failover=None, standalone_config_sync=None, standalone_mgmt_vdom=None, sync_config=None, sync_packet_balance=None, unicast_gateway=None, unicast_hb=None, unicast_hb_netmask=None, unicast_hb_peerip=None, unicast_peers=None, unicast_status=None, uninterruptible_primary_wait=None, uninterruptible_upgrade=None, upgrade_mode=None, vcluster2=None, vcluster_id=None, vcluster_status=None, vclusters=None, vdom=None, vdomparam=None, weight=None):
        if arps and not isinstance(arps, int):
            raise TypeError("Expected argument 'arps' to be a int")
        pulumi.set(__self__, "arps", arps)
        if arps_interval and not isinstance(arps_interval, int):
            raise TypeError("Expected argument 'arps_interval' to be a int")
        pulumi.set(__self__, "arps_interval", arps_interval)
        if authentication and not isinstance(authentication, str):
            raise TypeError("Expected argument 'authentication' to be a str")
        pulumi.set(__self__, "authentication", authentication)
        if cpu_threshold and not isinstance(cpu_threshold, str):
            raise TypeError("Expected argument 'cpu_threshold' to be a str")
        pulumi.set(__self__, "cpu_threshold", cpu_threshold)
        if encryption and not isinstance(encryption, str):
            raise TypeError("Expected argument 'encryption' to be a str")
        pulumi.set(__self__, "encryption", encryption)
        if evpn_ttl and not isinstance(evpn_ttl, int):
            raise TypeError("Expected argument 'evpn_ttl' to be a int")
        pulumi.set(__self__, "evpn_ttl", evpn_ttl)
        if failover_hold_time and not isinstance(failover_hold_time, int):
            raise TypeError("Expected argument 'failover_hold_time' to be a int")
        pulumi.set(__self__, "failover_hold_time", failover_hold_time)
        if ftp_proxy_threshold and not isinstance(ftp_proxy_threshold, str):
            raise TypeError("Expected argument 'ftp_proxy_threshold' to be a str")
        pulumi.set(__self__, "ftp_proxy_threshold", ftp_proxy_threshold)
        if gratuitous_arps and not isinstance(gratuitous_arps, str):
            raise TypeError("Expected argument 'gratuitous_arps' to be a str")
        pulumi.set(__self__, "gratuitous_arps", gratuitous_arps)
        if group_id and not isinstance(group_id, int):
            raise TypeError("Expected argument 'group_id' to be a int")
        pulumi.set(__self__, "group_id", group_id)
        if group_name and not isinstance(group_name, str):
            raise TypeError("Expected argument 'group_name' to be a str")
        pulumi.set(__self__, "group_name", group_name)
        if ha_direct and not isinstance(ha_direct, str):
            raise TypeError("Expected argument 'ha_direct' to be a str")
        pulumi.set(__self__, "ha_direct", ha_direct)
        if ha_eth_type and not isinstance(ha_eth_type, str):
            raise TypeError("Expected argument 'ha_eth_type' to be a str")
        pulumi.set(__self__, "ha_eth_type", ha_eth_type)
        if ha_mgmt_interfaces and not isinstance(ha_mgmt_interfaces, list):
            raise TypeError("Expected argument 'ha_mgmt_interfaces' to be a list")
        pulumi.set(__self__, "ha_mgmt_interfaces", ha_mgmt_interfaces)
        if ha_mgmt_status and not isinstance(ha_mgmt_status, str):
            raise TypeError("Expected argument 'ha_mgmt_status' to be a str")
        pulumi.set(__self__, "ha_mgmt_status", ha_mgmt_status)
        if ha_uptime_diff_margin and not isinstance(ha_uptime_diff_margin, int):
            raise TypeError("Expected argument 'ha_uptime_diff_margin' to be a int")
        pulumi.set(__self__, "ha_uptime_diff_margin", ha_uptime_diff_margin)
        if hb_interval and not isinstance(hb_interval, int):
            raise TypeError("Expected argument 'hb_interval' to be a int")
        pulumi.set(__self__, "hb_interval", hb_interval)
        if hb_interval_in_milliseconds and not isinstance(hb_interval_in_milliseconds, str):
            raise TypeError("Expected argument 'hb_interval_in_milliseconds' to be a str")
        pulumi.set(__self__, "hb_interval_in_milliseconds", hb_interval_in_milliseconds)
        if hb_lost_threshold and not isinstance(hb_lost_threshold, int):
            raise TypeError("Expected argument 'hb_lost_threshold' to be a int")
        pulumi.set(__self__, "hb_lost_threshold", hb_lost_threshold)
        if hbdev and not isinstance(hbdev, str):
            raise TypeError("Expected argument 'hbdev' to be a str")
        pulumi.set(__self__, "hbdev", hbdev)
        if hc_eth_type and not isinstance(hc_eth_type, str):
            raise TypeError("Expected argument 'hc_eth_type' to be a str")
        pulumi.set(__self__, "hc_eth_type", hc_eth_type)
        if hello_holddown and not isinstance(hello_holddown, int):
            raise TypeError("Expected argument 'hello_holddown' to be a int")
        pulumi.set(__self__, "hello_holddown", hello_holddown)
        if http_proxy_threshold and not isinstance(http_proxy_threshold, str):
            raise TypeError("Expected argument 'http_proxy_threshold' to be a str")
        pulumi.set(__self__, "http_proxy_threshold", http_proxy_threshold)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if imap_proxy_threshold and not isinstance(imap_proxy_threshold, str):
            raise TypeError("Expected argument 'imap_proxy_threshold' to be a str")
        pulumi.set(__self__, "imap_proxy_threshold", imap_proxy_threshold)
        if inter_cluster_session_sync and not isinstance(inter_cluster_session_sync, str):
            raise TypeError("Expected argument 'inter_cluster_session_sync' to be a str")
        pulumi.set(__self__, "inter_cluster_session_sync", inter_cluster_session_sync)
        if ipsec_phase2_proposal and not isinstance(ipsec_phase2_proposal, str):
            raise TypeError("Expected argument 'ipsec_phase2_proposal' to be a str")
        pulumi.set(__self__, "ipsec_phase2_proposal", ipsec_phase2_proposal)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if l2ep_eth_type and not isinstance(l2ep_eth_type, str):
            raise TypeError("Expected argument 'l2ep_eth_type' to be a str")
        pulumi.set(__self__, "l2ep_eth_type", l2ep_eth_type)
        if link_failed_signal and not isinstance(link_failed_signal, str):
            raise TypeError("Expected argument 'link_failed_signal' to be a str")
        pulumi.set(__self__, "link_failed_signal", link_failed_signal)
        if load_balance_all and not isinstance(load_balance_all, str):
            raise TypeError("Expected argument 'load_balance_all' to be a str")
        pulumi.set(__self__, "load_balance_all", load_balance_all)
        if logical_sn and not isinstance(logical_sn, str):
            raise TypeError("Expected argument 'logical_sn' to be a str")
        pulumi.set(__self__, "logical_sn", logical_sn)
        if memory_based_failover and not isinstance(memory_based_failover, str):
            raise TypeError("Expected argument 'memory_based_failover' to be a str")
        pulumi.set(__self__, "memory_based_failover", memory_based_failover)
        if memory_compatible_mode and not isinstance(memory_compatible_mode, str):
            raise TypeError("Expected argument 'memory_compatible_mode' to be a str")
        pulumi.set(__self__, "memory_compatible_mode", memory_compatible_mode)
        if memory_failover_flip_timeout and not isinstance(memory_failover_flip_timeout, int):
            raise TypeError("Expected argument 'memory_failover_flip_timeout' to be a int")
        pulumi.set(__self__, "memory_failover_flip_timeout", memory_failover_flip_timeout)
        if memory_failover_monitor_period and not isinstance(memory_failover_monitor_period, int):
            raise TypeError("Expected argument 'memory_failover_monitor_period' to be a int")
        pulumi.set(__self__, "memory_failover_monitor_period", memory_failover_monitor_period)
        if memory_failover_sample_rate and not isinstance(memory_failover_sample_rate, int):
            raise TypeError("Expected argument 'memory_failover_sample_rate' to be a int")
        pulumi.set(__self__, "memory_failover_sample_rate", memory_failover_sample_rate)
        if memory_failover_threshold and not isinstance(memory_failover_threshold, int):
            raise TypeError("Expected argument 'memory_failover_threshold' to be a int")
        pulumi.set(__self__, "memory_failover_threshold", memory_failover_threshold)
        if memory_threshold and not isinstance(memory_threshold, str):
            raise TypeError("Expected argument 'memory_threshold' to be a str")
        pulumi.set(__self__, "memory_threshold", memory_threshold)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if monitor and not isinstance(monitor, str):
            raise TypeError("Expected argument 'monitor' to be a str")
        pulumi.set(__self__, "monitor", monitor)
        if multicast_ttl and not isinstance(multicast_ttl, int):
            raise TypeError("Expected argument 'multicast_ttl' to be a int")
        pulumi.set(__self__, "multicast_ttl", multicast_ttl)
        if nntp_proxy_threshold and not isinstance(nntp_proxy_threshold, str):
            raise TypeError("Expected argument 'nntp_proxy_threshold' to be a str")
        pulumi.set(__self__, "nntp_proxy_threshold", nntp_proxy_threshold)
        if override and not isinstance(override, str):
            raise TypeError("Expected argument 'override' to be a str")
        pulumi.set(__self__, "override", override)
        if override_wait_time and not isinstance(override_wait_time, int):
            raise TypeError("Expected argument 'override_wait_time' to be a int")
        pulumi.set(__self__, "override_wait_time", override_wait_time)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if pingserver_failover_threshold and not isinstance(pingserver_failover_threshold, int):
            raise TypeError("Expected argument 'pingserver_failover_threshold' to be a int")
        pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        if pingserver_flip_timeout and not isinstance(pingserver_flip_timeout, int):
            raise TypeError("Expected argument 'pingserver_flip_timeout' to be a int")
        pulumi.set(__self__, "pingserver_flip_timeout", pingserver_flip_timeout)
        if pingserver_monitor_interface and not isinstance(pingserver_monitor_interface, str):
            raise TypeError("Expected argument 'pingserver_monitor_interface' to be a str")
        pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        if pingserver_secondary_force_reset and not isinstance(pingserver_secondary_force_reset, str):
            raise TypeError("Expected argument 'pingserver_secondary_force_reset' to be a str")
        pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        if pingserver_slave_force_reset and not isinstance(pingserver_slave_force_reset, str):
            raise TypeError("Expected argument 'pingserver_slave_force_reset' to be a str")
        pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        if pop3_proxy_threshold and not isinstance(pop3_proxy_threshold, str):
            raise TypeError("Expected argument 'pop3_proxy_threshold' to be a str")
        pulumi.set(__self__, "pop3_proxy_threshold", pop3_proxy_threshold)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if route_hold and not isinstance(route_hold, int):
            raise TypeError("Expected argument 'route_hold' to be a int")
        pulumi.set(__self__, "route_hold", route_hold)
        if route_ttl and not isinstance(route_ttl, int):
            raise TypeError("Expected argument 'route_ttl' to be a int")
        pulumi.set(__self__, "route_ttl", route_ttl)
        if route_wait and not isinstance(route_wait, int):
            raise TypeError("Expected argument 'route_wait' to be a int")
        pulumi.set(__self__, "route_wait", route_wait)
        if schedule and not isinstance(schedule, str):
            raise TypeError("Expected argument 'schedule' to be a str")
        pulumi.set(__self__, "schedule", schedule)
        if secondary_vclusters and not isinstance(secondary_vclusters, list):
            raise TypeError("Expected argument 'secondary_vclusters' to be a list")
        pulumi.set(__self__, "secondary_vclusters", secondary_vclusters)
        if session_pickup and not isinstance(session_pickup, str):
            raise TypeError("Expected argument 'session_pickup' to be a str")
        pulumi.set(__self__, "session_pickup", session_pickup)
        if session_pickup_connectionless and not isinstance(session_pickup_connectionless, str):
            raise TypeError("Expected argument 'session_pickup_connectionless' to be a str")
        pulumi.set(__self__, "session_pickup_connectionless", session_pickup_connectionless)
        if session_pickup_delay and not isinstance(session_pickup_delay, str):
            raise TypeError("Expected argument 'session_pickup_delay' to be a str")
        pulumi.set(__self__, "session_pickup_delay", session_pickup_delay)
        if session_pickup_expectation and not isinstance(session_pickup_expectation, str):
            raise TypeError("Expected argument 'session_pickup_expectation' to be a str")
        pulumi.set(__self__, "session_pickup_expectation", session_pickup_expectation)
        if session_pickup_nat and not isinstance(session_pickup_nat, str):
            raise TypeError("Expected argument 'session_pickup_nat' to be a str")
        pulumi.set(__self__, "session_pickup_nat", session_pickup_nat)
        if session_sync_dev and not isinstance(session_sync_dev, str):
            raise TypeError("Expected argument 'session_sync_dev' to be a str")
        pulumi.set(__self__, "session_sync_dev", session_sync_dev)
        if smtp_proxy_threshold and not isinstance(smtp_proxy_threshold, str):
            raise TypeError("Expected argument 'smtp_proxy_threshold' to be a str")
        pulumi.set(__self__, "smtp_proxy_threshold", smtp_proxy_threshold)
        if ssd_failover and not isinstance(ssd_failover, str):
            raise TypeError("Expected argument 'ssd_failover' to be a str")
        pulumi.set(__self__, "ssd_failover", ssd_failover)
        if standalone_config_sync and not isinstance(standalone_config_sync, str):
            raise TypeError("Expected argument 'standalone_config_sync' to be a str")
        pulumi.set(__self__, "standalone_config_sync", standalone_config_sync)
        if standalone_mgmt_vdom and not isinstance(standalone_mgmt_vdom, str):
            raise TypeError("Expected argument 'standalone_mgmt_vdom' to be a str")
        pulumi.set(__self__, "standalone_mgmt_vdom", standalone_mgmt_vdom)
        if sync_config and not isinstance(sync_config, str):
            raise TypeError("Expected argument 'sync_config' to be a str")
        pulumi.set(__self__, "sync_config", sync_config)
        if sync_packet_balance and not isinstance(sync_packet_balance, str):
            raise TypeError("Expected argument 'sync_packet_balance' to be a str")
        pulumi.set(__self__, "sync_packet_balance", sync_packet_balance)
        if unicast_gateway and not isinstance(unicast_gateway, str):
            raise TypeError("Expected argument 'unicast_gateway' to be a str")
        pulumi.set(__self__, "unicast_gateway", unicast_gateway)
        if unicast_hb and not isinstance(unicast_hb, str):
            raise TypeError("Expected argument 'unicast_hb' to be a str")
        pulumi.set(__self__, "unicast_hb", unicast_hb)
        if unicast_hb_netmask and not isinstance(unicast_hb_netmask, str):
            raise TypeError("Expected argument 'unicast_hb_netmask' to be a str")
        pulumi.set(__self__, "unicast_hb_netmask", unicast_hb_netmask)
        if unicast_hb_peerip and not isinstance(unicast_hb_peerip, str):
            raise TypeError("Expected argument 'unicast_hb_peerip' to be a str")
        pulumi.set(__self__, "unicast_hb_peerip", unicast_hb_peerip)
        if unicast_peers and not isinstance(unicast_peers, list):
            raise TypeError("Expected argument 'unicast_peers' to be a list")
        pulumi.set(__self__, "unicast_peers", unicast_peers)
        if unicast_status and not isinstance(unicast_status, str):
            raise TypeError("Expected argument 'unicast_status' to be a str")
        pulumi.set(__self__, "unicast_status", unicast_status)
        if uninterruptible_primary_wait and not isinstance(uninterruptible_primary_wait, int):
            raise TypeError("Expected argument 'uninterruptible_primary_wait' to be a int")
        pulumi.set(__self__, "uninterruptible_primary_wait", uninterruptible_primary_wait)
        if uninterruptible_upgrade and not isinstance(uninterruptible_upgrade, str):
            raise TypeError("Expected argument 'uninterruptible_upgrade' to be a str")
        pulumi.set(__self__, "uninterruptible_upgrade", uninterruptible_upgrade)
        if upgrade_mode and not isinstance(upgrade_mode, str):
            raise TypeError("Expected argument 'upgrade_mode' to be a str")
        pulumi.set(__self__, "upgrade_mode", upgrade_mode)
        if vcluster2 and not isinstance(vcluster2, str):
            raise TypeError("Expected argument 'vcluster2' to be a str")
        pulumi.set(__self__, "vcluster2", vcluster2)
        if vcluster_id and not isinstance(vcluster_id, int):
            raise TypeError("Expected argument 'vcluster_id' to be a int")
        pulumi.set(__self__, "vcluster_id", vcluster_id)
        if vcluster_status and not isinstance(vcluster_status, str):
            raise TypeError("Expected argument 'vcluster_status' to be a str")
        pulumi.set(__self__, "vcluster_status", vcluster_status)
        if vclusters and not isinstance(vclusters, list):
            raise TypeError("Expected argument 'vclusters' to be a list")
        pulumi.set(__self__, "vclusters", vclusters)
        if vdom and not isinstance(vdom, str):
            raise TypeError("Expected argument 'vdom' to be a str")
        pulumi.set(__self__, "vdom", vdom)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if weight and not isinstance(weight, str):
            raise TypeError("Expected argument 'weight' to be a str")
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def arps(self) -> int:
        """
        Number of gratuitous ARPs (1 - 60). Lower to reduce traffic. Higher to reduce failover time.
        """
        return pulumi.get(self, "arps")

    @property
    @pulumi.getter(name="arpsInterval")
    def arps_interval(self) -> int:
        """
        Time between gratuitous ARPs  (1 - 20 sec). Lower to reduce failover time. Higher to reduce traffic.
        """
        return pulumi.get(self, "arps_interval")

    @property
    @pulumi.getter
    def authentication(self) -> str:
        """
        Enable/disable heartbeat message authentication.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="cpuThreshold")
    def cpu_threshold(self) -> str:
        """
        Dynamic weighted load balancing CPU usage weight and high and low thresholds.
        """
        return pulumi.get(self, "cpu_threshold")

    @property
    @pulumi.getter
    def encryption(self) -> str:
        """
        Enable/disable heartbeat message encryption.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="evpnTtl")
    def evpn_ttl(self) -> int:
        """
        HA EVPN FDB TTL on primary box (5 - 3600 sec).
        """
        return pulumi.get(self, "evpn_ttl")

    @property
    @pulumi.getter(name="failoverHoldTime")
    def failover_hold_time(self) -> int:
        """
        Time to wait before failover (0 - 300 sec, default = 0), to avoid flip.
        """
        return pulumi.get(self, "failover_hold_time")

    @property
    @pulumi.getter(name="ftpProxyThreshold")
    def ftp_proxy_threshold(self) -> str:
        """
        Dynamic weighted load balancing weight and high and low number of FTP proxy sessions.
        """
        return pulumi.get(self, "ftp_proxy_threshold")

    @property
    @pulumi.getter(name="gratuitousArps")
    def gratuitous_arps(self) -> str:
        """
        Enable/disable gratuitous ARPs. Disable if link-failed-signal enabled.
        """
        return pulumi.get(self, "gratuitous_arps")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        """
        Cluster group ID  (0 - 255). Must be the same for all members.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        Cluster group name. Must be the same for all members.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> str:
        """
        Enable/disable using ha-mgmt interface for syslog, SNMP, remote authentication (RADIUS), FortiAnalyzer, and FortiSandbox.
        """
        return pulumi.get(self, "ha_direct")

    @property
    @pulumi.getter(name="haEthType")
    def ha_eth_type(self) -> str:
        """
        HA heartbeat packet Ethertype (4-digit hex).
        """
        return pulumi.get(self, "ha_eth_type")

    @property
    @pulumi.getter(name="haMgmtInterfaces")
    def ha_mgmt_interfaces(self) -> Sequence['outputs.GetHaHaMgmtInterfaceResult']:
        """
        Reserve interfaces to manage individual cluster units. The structure of `ha_mgmt_interfaces` block is documented below.
        """
        return pulumi.get(self, "ha_mgmt_interfaces")

    @property
    @pulumi.getter(name="haMgmtStatus")
    def ha_mgmt_status(self) -> str:
        """
        Enable to reserve interfaces to manage individual cluster units.
        """
        return pulumi.get(self, "ha_mgmt_status")

    @property
    @pulumi.getter(name="haUptimeDiffMargin")
    def ha_uptime_diff_margin(self) -> int:
        """
        Normally you would only reduce this value for failover testing.
        """
        return pulumi.get(self, "ha_uptime_diff_margin")

    @property
    @pulumi.getter(name="hbInterval")
    def hb_interval(self) -> int:
        """
        Time between sending heartbeat packets (1 - 20 (100*ms)). Increase to reduce false positives.
        """
        return pulumi.get(self, "hb_interval")

    @property
    @pulumi.getter(name="hbIntervalInMilliseconds")
    def hb_interval_in_milliseconds(self) -> str:
        """
        Number of milliseconds for each heartbeat interval: 100ms or 10ms.
        """
        return pulumi.get(self, "hb_interval_in_milliseconds")

    @property
    @pulumi.getter(name="hbLostThreshold")
    def hb_lost_threshold(self) -> int:
        """
        Number of lost heartbeats to signal a failure (1 - 60). Increase to reduce false positives.
        """
        return pulumi.get(self, "hb_lost_threshold")

    @property
    @pulumi.getter
    def hbdev(self) -> str:
        """
        Heartbeat interfaces. Must be the same for all members.
        """
        return pulumi.get(self, "hbdev")

    @property
    @pulumi.getter(name="hcEthType")
    def hc_eth_type(self) -> str:
        """
        Transparent mode HA heartbeat packet Ethertype (4-digit hex).
        """
        return pulumi.get(self, "hc_eth_type")

    @property
    @pulumi.getter(name="helloHolddown")
    def hello_holddown(self) -> int:
        """
        Time to wait before changing from hello to work state (5 - 300 sec).
        """
        return pulumi.get(self, "hello_holddown")

    @property
    @pulumi.getter(name="httpProxyThreshold")
    def http_proxy_threshold(self) -> str:
        """
        Dynamic weighted load balancing weight and high and low number of HTTP proxy sessions.
        """
        return pulumi.get(self, "http_proxy_threshold")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imapProxyThreshold")
    def imap_proxy_threshold(self) -> str:
        """
        Dynamic weighted load balancing weight and high and low number of IMAP proxy sessions.
        """
        return pulumi.get(self, "imap_proxy_threshold")

    @property
    @pulumi.getter(name="interClusterSessionSync")
    def inter_cluster_session_sync(self) -> str:
        """
        Enable/disable synchronization of sessions among HA clusters.
        """
        return pulumi.get(self, "inter_cluster_session_sync")

    @property
    @pulumi.getter(name="ipsecPhase2Proposal")
    def ipsec_phase2_proposal(self) -> str:
        """
        IPsec phase2 proposal.
        """
        return pulumi.get(self, "ipsec_phase2_proposal")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="l2epEthType")
    def l2ep_eth_type(self) -> str:
        """
        Telnet session HA heartbeat packet Ethertype (4-digit hex).
        """
        return pulumi.get(self, "l2ep_eth_type")

    @property
    @pulumi.getter(name="linkFailedSignal")
    def link_failed_signal(self) -> str:
        """
        Enable to shut down all interfaces for 1 sec after a failover. Use if gratuitous ARPs do not update network.
        """
        return pulumi.get(self, "link_failed_signal")

    @property
    @pulumi.getter(name="loadBalanceAll")
    def load_balance_all(self) -> str:
        """
        Enable to load balance TCP sessions. Disable to load balance proxy sessions only.
        """
        return pulumi.get(self, "load_balance_all")

    @property
    @pulumi.getter(name="logicalSn")
    def logical_sn(self) -> str:
        """
        Enable/disable usage of the logical serial number.
        """
        return pulumi.get(self, "logical_sn")

    @property
    @pulumi.getter(name="memoryBasedFailover")
    def memory_based_failover(self) -> str:
        """
        Enable/disable memory based failover.
        """
        return pulumi.get(self, "memory_based_failover")

    @property
    @pulumi.getter(name="memoryCompatibleMode")
    def memory_compatible_mode(self) -> str:
        """
        Enable/disable memory compatible mode.
        """
        return pulumi.get(self, "memory_compatible_mode")

    @property
    @pulumi.getter(name="memoryFailoverFlipTimeout")
    def memory_failover_flip_timeout(self) -> int:
        """
        Time to wait between subsequent memory based failovers in minutes (6 - 2147483647, default = 6).
        """
        return pulumi.get(self, "memory_failover_flip_timeout")

    @property
    @pulumi.getter(name="memoryFailoverMonitorPeriod")
    def memory_failover_monitor_period(self) -> int:
        """
        Duration of high memory usage before memory based failover is triggered in seconds (1 - 300, default = 60).
        """
        return pulumi.get(self, "memory_failover_monitor_period")

    @property
    @pulumi.getter(name="memoryFailoverSampleRate")
    def memory_failover_sample_rate(self) -> int:
        """
        Rate at which memory usage is sampled in order to measure memory usage in seconds (1 - 60, default = 1).
        """
        return pulumi.get(self, "memory_failover_sample_rate")

    @property
    @pulumi.getter(name="memoryFailoverThreshold")
    def memory_failover_threshold(self) -> int:
        """
        Memory usage threshold to trigger memory based failover (0 means using conserve mode threshold in system.global).
        """
        return pulumi.get(self, "memory_failover_threshold")

    @property
    @pulumi.getter(name="memoryThreshold")
    def memory_threshold(self) -> str:
        """
        Dynamic weighted load balancing memory usage weight and high and low thresholds.
        """
        return pulumi.get(self, "memory_threshold")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        HA mode. Must be the same for all members. FGSP requires standalone.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def monitor(self) -> str:
        """
        Interfaces to check for port monitoring (or link failure).
        """
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter(name="multicastTtl")
    def multicast_ttl(self) -> int:
        """
        HA multicast TTL on master (5 - 3600 sec).
        """
        return pulumi.get(self, "multicast_ttl")

    @property
    @pulumi.getter(name="nntpProxyThreshold")
    def nntp_proxy_threshold(self) -> str:
        """
        Dynamic weighted load balancing weight and high and low number of NNTP proxy sessions.
        """
        return pulumi.get(self, "nntp_proxy_threshold")

    @property
    @pulumi.getter
    def override(self) -> str:
        """
        Enable and increase the priority of the unit that should always be primary (master).
        """
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> int:
        """
        Delay negotiating if override is enabled (0 - 3600 sec). Reduces how often the cluster negotiates.
        """
        return pulumi.get(self, "override_wait_time")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Cluster password. Must be the same for all members.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> int:
        """
        Remote IP monitoring failover threshold (0 - 50).
        """
        return pulumi.get(self, "pingserver_failover_threshold")

    @property
    @pulumi.getter(name="pingserverFlipTimeout")
    def pingserver_flip_timeout(self) -> int:
        """
        Time to wait in minutes before renegotiating after a remote IP monitoring failover.
        """
        return pulumi.get(self, "pingserver_flip_timeout")

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> str:
        """
        Interfaces to check for remote IP monitoring.
        """
        return pulumi.get(self, "pingserver_monitor_interface")

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> str:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover.
        """
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> str:
        """
        Enable to force the cluster to negotiate after a remote IP monitoring failover.
        """
        return pulumi.get(self, "pingserver_slave_force_reset")

    @property
    @pulumi.getter(name="pop3ProxyThreshold")
    def pop3_proxy_threshold(self) -> str:
        """
        Dynamic weighted load balancing weight and high and low number of POP3 proxy sessions.
        """
        return pulumi.get(self, "pop3_proxy_threshold")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Increase the priority to select the primary unit (0 - 255).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="routeHold")
    def route_hold(self) -> int:
        """
        Time to wait between routing table updates to the cluster (0 - 3600 sec).
        """
        return pulumi.get(self, "route_hold")

    @property
    @pulumi.getter(name="routeTtl")
    def route_ttl(self) -> int:
        """
        TTL for primary unit routes (5 - 3600 sec). Increase to maintain active routes during failover.
        """
        return pulumi.get(self, "route_ttl")

    @property
    @pulumi.getter(name="routeWait")
    def route_wait(self) -> int:
        """
        Time to wait before sending new routes to the cluster (0 - 3600 sec).
        """
        return pulumi.get(self, "route_wait")

    @property
    @pulumi.getter
    def schedule(self) -> str:
        """
        Type of A-A load balancing. Use none if you have external load balancers.
        """
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="secondaryVclusters")
    def secondary_vclusters(self) -> Sequence['outputs.GetHaSecondaryVclusterResult']:
        """
        Configure virtual cluster 2. The structure of `secondary_vcluster` block is documented below.
        """
        return pulumi.get(self, "secondary_vclusters")

    @property
    @pulumi.getter(name="sessionPickup")
    def session_pickup(self) -> str:
        """
        Enable/disable session pickup. Enabling it can reduce session down time when fail over happens.
        """
        return pulumi.get(self, "session_pickup")

    @property
    @pulumi.getter(name="sessionPickupConnectionless")
    def session_pickup_connectionless(self) -> str:
        """
        Enable/disable UDP and ICMP session sync.
        """
        return pulumi.get(self, "session_pickup_connectionless")

    @property
    @pulumi.getter(name="sessionPickupDelay")
    def session_pickup_delay(self) -> str:
        """
        Enable to sync sessions longer than 30 sec. Only longer lived sessions need to be synced.
        """
        return pulumi.get(self, "session_pickup_delay")

    @property
    @pulumi.getter(name="sessionPickupExpectation")
    def session_pickup_expectation(self) -> str:
        """
        Enable/disable session helper expectation session sync for FGSP.
        """
        return pulumi.get(self, "session_pickup_expectation")

    @property
    @pulumi.getter(name="sessionPickupNat")
    def session_pickup_nat(self) -> str:
        """
        Enable/disable NAT session sync for FGSP.
        """
        return pulumi.get(self, "session_pickup_nat")

    @property
    @pulumi.getter(name="sessionSyncDev")
    def session_sync_dev(self) -> str:
        """
        Offload session-sync process to kernel and sync sessions using connected interface(s) directly.
        """
        return pulumi.get(self, "session_sync_dev")

    @property
    @pulumi.getter(name="smtpProxyThreshold")
    def smtp_proxy_threshold(self) -> str:
        """
        Dynamic weighted load balancing weight and high and low number of SMTP proxy sessions.
        """
        return pulumi.get(self, "smtp_proxy_threshold")

    @property
    @pulumi.getter(name="ssdFailover")
    def ssd_failover(self) -> str:
        """
        Enable/disable automatic HA failover on SSD disk failure.
        """
        return pulumi.get(self, "ssd_failover")

    @property
    @pulumi.getter(name="standaloneConfigSync")
    def standalone_config_sync(self) -> str:
        """
        Enable/disable FGSP configuration synchronization.
        """
        return pulumi.get(self, "standalone_config_sync")

    @property
    @pulumi.getter(name="standaloneMgmtVdom")
    def standalone_mgmt_vdom(self) -> str:
        """
        Enable/disable standalone management VDOM.
        """
        return pulumi.get(self, "standalone_mgmt_vdom")

    @property
    @pulumi.getter(name="syncConfig")
    def sync_config(self) -> str:
        """
        Enable/disable configuration synchronization.
        """
        return pulumi.get(self, "sync_config")

    @property
    @pulumi.getter(name="syncPacketBalance")
    def sync_packet_balance(self) -> str:
        """
        Enable/disable HA packet distribution to multiple CPUs.
        """
        return pulumi.get(self, "sync_packet_balance")

    @property
    @pulumi.getter(name="unicastGateway")
    def unicast_gateway(self) -> str:
        """
        Default route gateway for unicast interface.
        """
        return pulumi.get(self, "unicast_gateway")

    @property
    @pulumi.getter(name="unicastHb")
    def unicast_hb(self) -> str:
        """
        Enable/disable unicast heartbeat.
        """
        return pulumi.get(self, "unicast_hb")

    @property
    @pulumi.getter(name="unicastHbNetmask")
    def unicast_hb_netmask(self) -> str:
        """
        Unicast heartbeat netmask.
        """
        return pulumi.get(self, "unicast_hb_netmask")

    @property
    @pulumi.getter(name="unicastHbPeerip")
    def unicast_hb_peerip(self) -> str:
        """
        Unicast heartbeat peer IP.
        """
        return pulumi.get(self, "unicast_hb_peerip")

    @property
    @pulumi.getter(name="unicastPeers")
    def unicast_peers(self) -> Sequence['outputs.GetHaUnicastPeerResult']:
        """
        Number of unicast peers. The structure of `unicast_peers` block is documented below.
        """
        return pulumi.get(self, "unicast_peers")

    @property
    @pulumi.getter(name="unicastStatus")
    def unicast_status(self) -> str:
        """
        Enable/disable unicast connection.
        """
        return pulumi.get(self, "unicast_status")

    @property
    @pulumi.getter(name="uninterruptiblePrimaryWait")
    def uninterruptible_primary_wait(self) -> int:
        """
        Number of minutes the primary HA unit waits before the secondary HA unit is considered upgraded and the system is started before starting its own upgrade (1 - 300, default = 30).
        """
        return pulumi.get(self, "uninterruptible_primary_wait")

    @property
    @pulumi.getter(name="uninterruptibleUpgrade")
    def uninterruptible_upgrade(self) -> str:
        """
        Enable to upgrade a cluster without blocking network traffic.
        """
        return pulumi.get(self, "uninterruptible_upgrade")

    @property
    @pulumi.getter(name="upgradeMode")
    def upgrade_mode(self) -> str:
        """
        The mode to upgrade a cluster.
        """
        return pulumi.get(self, "upgrade_mode")

    @property
    @pulumi.getter
    def vcluster2(self) -> str:
        """
        Enable/disable virtual cluster 2 for virtual clustering.
        """
        return pulumi.get(self, "vcluster2")

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> int:
        """
        Cluster ID.
        """
        return pulumi.get(self, "vcluster_id")

    @property
    @pulumi.getter(name="vclusterStatus")
    def vcluster_status(self) -> str:
        """
        Enable/disable virtual cluster for virtual clustering.
        """
        return pulumi.get(self, "vcluster_status")

    @property
    @pulumi.getter
    def vclusters(self) -> Sequence['outputs.GetHaVclusterResult']:
        """
        Virtual cluster table. The structure of `vcluster` block is documented below.
        """
        return pulumi.get(self, "vclusters")

    @property
    @pulumi.getter
    def vdom(self) -> str:
        """
        VDOMs in virtual cluster 2.
        """
        return pulumi.get(self, "vdom")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def weight(self) -> str:
        """
        Weight-round-robin weight for each cluster unit. Syntax <priority> <weight>.
        """
        return pulumi.get(self, "weight")


class AwaitableGetHaResult(GetHaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHaResult(
            arps=self.arps,
            arps_interval=self.arps_interval,
            authentication=self.authentication,
            cpu_threshold=self.cpu_threshold,
            encryption=self.encryption,
            evpn_ttl=self.evpn_ttl,
            failover_hold_time=self.failover_hold_time,
            ftp_proxy_threshold=self.ftp_proxy_threshold,
            gratuitous_arps=self.gratuitous_arps,
            group_id=self.group_id,
            group_name=self.group_name,
            ha_direct=self.ha_direct,
            ha_eth_type=self.ha_eth_type,
            ha_mgmt_interfaces=self.ha_mgmt_interfaces,
            ha_mgmt_status=self.ha_mgmt_status,
            ha_uptime_diff_margin=self.ha_uptime_diff_margin,
            hb_interval=self.hb_interval,
            hb_interval_in_milliseconds=self.hb_interval_in_milliseconds,
            hb_lost_threshold=self.hb_lost_threshold,
            hbdev=self.hbdev,
            hc_eth_type=self.hc_eth_type,
            hello_holddown=self.hello_holddown,
            http_proxy_threshold=self.http_proxy_threshold,
            id=self.id,
            imap_proxy_threshold=self.imap_proxy_threshold,
            inter_cluster_session_sync=self.inter_cluster_session_sync,
            ipsec_phase2_proposal=self.ipsec_phase2_proposal,
            key=self.key,
            l2ep_eth_type=self.l2ep_eth_type,
            link_failed_signal=self.link_failed_signal,
            load_balance_all=self.load_balance_all,
            logical_sn=self.logical_sn,
            memory_based_failover=self.memory_based_failover,
            memory_compatible_mode=self.memory_compatible_mode,
            memory_failover_flip_timeout=self.memory_failover_flip_timeout,
            memory_failover_monitor_period=self.memory_failover_monitor_period,
            memory_failover_sample_rate=self.memory_failover_sample_rate,
            memory_failover_threshold=self.memory_failover_threshold,
            memory_threshold=self.memory_threshold,
            mode=self.mode,
            monitor=self.monitor,
            multicast_ttl=self.multicast_ttl,
            nntp_proxy_threshold=self.nntp_proxy_threshold,
            override=self.override,
            override_wait_time=self.override_wait_time,
            password=self.password,
            pingserver_failover_threshold=self.pingserver_failover_threshold,
            pingserver_flip_timeout=self.pingserver_flip_timeout,
            pingserver_monitor_interface=self.pingserver_monitor_interface,
            pingserver_secondary_force_reset=self.pingserver_secondary_force_reset,
            pingserver_slave_force_reset=self.pingserver_slave_force_reset,
            pop3_proxy_threshold=self.pop3_proxy_threshold,
            priority=self.priority,
            route_hold=self.route_hold,
            route_ttl=self.route_ttl,
            route_wait=self.route_wait,
            schedule=self.schedule,
            secondary_vclusters=self.secondary_vclusters,
            session_pickup=self.session_pickup,
            session_pickup_connectionless=self.session_pickup_connectionless,
            session_pickup_delay=self.session_pickup_delay,
            session_pickup_expectation=self.session_pickup_expectation,
            session_pickup_nat=self.session_pickup_nat,
            session_sync_dev=self.session_sync_dev,
            smtp_proxy_threshold=self.smtp_proxy_threshold,
            ssd_failover=self.ssd_failover,
            standalone_config_sync=self.standalone_config_sync,
            standalone_mgmt_vdom=self.standalone_mgmt_vdom,
            sync_config=self.sync_config,
            sync_packet_balance=self.sync_packet_balance,
            unicast_gateway=self.unicast_gateway,
            unicast_hb=self.unicast_hb,
            unicast_hb_netmask=self.unicast_hb_netmask,
            unicast_hb_peerip=self.unicast_hb_peerip,
            unicast_peers=self.unicast_peers,
            unicast_status=self.unicast_status,
            uninterruptible_primary_wait=self.uninterruptible_primary_wait,
            uninterruptible_upgrade=self.uninterruptible_upgrade,
            upgrade_mode=self.upgrade_mode,
            vcluster2=self.vcluster2,
            vcluster_id=self.vcluster_id,
            vcluster_status=self.vcluster_status,
            vclusters=self.vclusters,
            vdom=self.vdom,
            vdomparam=self.vdomparam,
            weight=self.weight)


def get_ha(vdomparam: Optional[str] = None,
           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHaResult:
    """
    Use this data source to get information on fortios system ha


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:system/getHa:getHa', __args__, opts=opts, typ=GetHaResult).value

    return AwaitableGetHaResult(
        arps=pulumi.get(__ret__, 'arps'),
        arps_interval=pulumi.get(__ret__, 'arps_interval'),
        authentication=pulumi.get(__ret__, 'authentication'),
        cpu_threshold=pulumi.get(__ret__, 'cpu_threshold'),
        encryption=pulumi.get(__ret__, 'encryption'),
        evpn_ttl=pulumi.get(__ret__, 'evpn_ttl'),
        failover_hold_time=pulumi.get(__ret__, 'failover_hold_time'),
        ftp_proxy_threshold=pulumi.get(__ret__, 'ftp_proxy_threshold'),
        gratuitous_arps=pulumi.get(__ret__, 'gratuitous_arps'),
        group_id=pulumi.get(__ret__, 'group_id'),
        group_name=pulumi.get(__ret__, 'group_name'),
        ha_direct=pulumi.get(__ret__, 'ha_direct'),
        ha_eth_type=pulumi.get(__ret__, 'ha_eth_type'),
        ha_mgmt_interfaces=pulumi.get(__ret__, 'ha_mgmt_interfaces'),
        ha_mgmt_status=pulumi.get(__ret__, 'ha_mgmt_status'),
        ha_uptime_diff_margin=pulumi.get(__ret__, 'ha_uptime_diff_margin'),
        hb_interval=pulumi.get(__ret__, 'hb_interval'),
        hb_interval_in_milliseconds=pulumi.get(__ret__, 'hb_interval_in_milliseconds'),
        hb_lost_threshold=pulumi.get(__ret__, 'hb_lost_threshold'),
        hbdev=pulumi.get(__ret__, 'hbdev'),
        hc_eth_type=pulumi.get(__ret__, 'hc_eth_type'),
        hello_holddown=pulumi.get(__ret__, 'hello_holddown'),
        http_proxy_threshold=pulumi.get(__ret__, 'http_proxy_threshold'),
        id=pulumi.get(__ret__, 'id'),
        imap_proxy_threshold=pulumi.get(__ret__, 'imap_proxy_threshold'),
        inter_cluster_session_sync=pulumi.get(__ret__, 'inter_cluster_session_sync'),
        ipsec_phase2_proposal=pulumi.get(__ret__, 'ipsec_phase2_proposal'),
        key=pulumi.get(__ret__, 'key'),
        l2ep_eth_type=pulumi.get(__ret__, 'l2ep_eth_type'),
        link_failed_signal=pulumi.get(__ret__, 'link_failed_signal'),
        load_balance_all=pulumi.get(__ret__, 'load_balance_all'),
        logical_sn=pulumi.get(__ret__, 'logical_sn'),
        memory_based_failover=pulumi.get(__ret__, 'memory_based_failover'),
        memory_compatible_mode=pulumi.get(__ret__, 'memory_compatible_mode'),
        memory_failover_flip_timeout=pulumi.get(__ret__, 'memory_failover_flip_timeout'),
        memory_failover_monitor_period=pulumi.get(__ret__, 'memory_failover_monitor_period'),
        memory_failover_sample_rate=pulumi.get(__ret__, 'memory_failover_sample_rate'),
        memory_failover_threshold=pulumi.get(__ret__, 'memory_failover_threshold'),
        memory_threshold=pulumi.get(__ret__, 'memory_threshold'),
        mode=pulumi.get(__ret__, 'mode'),
        monitor=pulumi.get(__ret__, 'monitor'),
        multicast_ttl=pulumi.get(__ret__, 'multicast_ttl'),
        nntp_proxy_threshold=pulumi.get(__ret__, 'nntp_proxy_threshold'),
        override=pulumi.get(__ret__, 'override'),
        override_wait_time=pulumi.get(__ret__, 'override_wait_time'),
        password=pulumi.get(__ret__, 'password'),
        pingserver_failover_threshold=pulumi.get(__ret__, 'pingserver_failover_threshold'),
        pingserver_flip_timeout=pulumi.get(__ret__, 'pingserver_flip_timeout'),
        pingserver_monitor_interface=pulumi.get(__ret__, 'pingserver_monitor_interface'),
        pingserver_secondary_force_reset=pulumi.get(__ret__, 'pingserver_secondary_force_reset'),
        pingserver_slave_force_reset=pulumi.get(__ret__, 'pingserver_slave_force_reset'),
        pop3_proxy_threshold=pulumi.get(__ret__, 'pop3_proxy_threshold'),
        priority=pulumi.get(__ret__, 'priority'),
        route_hold=pulumi.get(__ret__, 'route_hold'),
        route_ttl=pulumi.get(__ret__, 'route_ttl'),
        route_wait=pulumi.get(__ret__, 'route_wait'),
        schedule=pulumi.get(__ret__, 'schedule'),
        secondary_vclusters=pulumi.get(__ret__, 'secondary_vclusters'),
        session_pickup=pulumi.get(__ret__, 'session_pickup'),
        session_pickup_connectionless=pulumi.get(__ret__, 'session_pickup_connectionless'),
        session_pickup_delay=pulumi.get(__ret__, 'session_pickup_delay'),
        session_pickup_expectation=pulumi.get(__ret__, 'session_pickup_expectation'),
        session_pickup_nat=pulumi.get(__ret__, 'session_pickup_nat'),
        session_sync_dev=pulumi.get(__ret__, 'session_sync_dev'),
        smtp_proxy_threshold=pulumi.get(__ret__, 'smtp_proxy_threshold'),
        ssd_failover=pulumi.get(__ret__, 'ssd_failover'),
        standalone_config_sync=pulumi.get(__ret__, 'standalone_config_sync'),
        standalone_mgmt_vdom=pulumi.get(__ret__, 'standalone_mgmt_vdom'),
        sync_config=pulumi.get(__ret__, 'sync_config'),
        sync_packet_balance=pulumi.get(__ret__, 'sync_packet_balance'),
        unicast_gateway=pulumi.get(__ret__, 'unicast_gateway'),
        unicast_hb=pulumi.get(__ret__, 'unicast_hb'),
        unicast_hb_netmask=pulumi.get(__ret__, 'unicast_hb_netmask'),
        unicast_hb_peerip=pulumi.get(__ret__, 'unicast_hb_peerip'),
        unicast_peers=pulumi.get(__ret__, 'unicast_peers'),
        unicast_status=pulumi.get(__ret__, 'unicast_status'),
        uninterruptible_primary_wait=pulumi.get(__ret__, 'uninterruptible_primary_wait'),
        uninterruptible_upgrade=pulumi.get(__ret__, 'uninterruptible_upgrade'),
        upgrade_mode=pulumi.get(__ret__, 'upgrade_mode'),
        vcluster2=pulumi.get(__ret__, 'vcluster2'),
        vcluster_id=pulumi.get(__ret__, 'vcluster_id'),
        vcluster_status=pulumi.get(__ret__, 'vcluster_status'),
        vclusters=pulumi.get(__ret__, 'vclusters'),
        vdom=pulumi.get(__ret__, 'vdom'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        weight=pulumi.get(__ret__, 'weight'))


@_utilities.lift_output_func(get_ha)
def get_ha_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetHaResult]:
    """
    Use this data source to get information on fortios system ha


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
