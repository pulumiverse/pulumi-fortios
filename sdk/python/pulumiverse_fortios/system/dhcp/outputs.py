# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'ServerExcludeRange',
    'ServerExcludeRangeUciString',
    'ServerExcludeRangeVciString',
    'ServerIpRange',
    'ServerIpRangeUciString',
    'ServerIpRangeVciString',
    'ServerOption',
    'ServerOptionUciString',
    'ServerOptionVciString',
    'ServerReservedAddress',
    'ServerTftpServer',
    'ServerVciString',
    'GetServerExcludeRangeResult',
    'GetServerExcludeRangeUciStringResult',
    'GetServerExcludeRangeVciStringResult',
    'GetServerIpRangeResult',
    'GetServerIpRangeUciStringResult',
    'GetServerIpRangeVciStringResult',
    'GetServerOptionResult',
    'GetServerOptionUciStringResult',
    'GetServerOptionVciStringResult',
    'GetServerReservedAddressResult',
    'GetServerTftpServerResult',
    'GetServerVciStringResult',
]

@pulumi.output_type
class ServerExcludeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "leaseTime":
            suggest = "lease_time"
        elif key == "startIp":
            suggest = "start_ip"
        elif key == "uciMatch":
            suggest = "uci_match"
        elif key == "uciStrings":
            suggest = "uci_strings"
        elif key == "vciMatch":
            suggest = "vci_match"
        elif key == "vciStrings":
            suggest = "vci_strings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerExcludeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerExcludeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerExcludeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 lease_time: Optional[int] = None,
                 start_ip: Optional[str] = None,
                 uci_match: Optional[str] = None,
                 uci_strings: Optional[Sequence['outputs.ServerExcludeRangeUciString']] = None,
                 vci_match: Optional[str] = None,
                 vci_strings: Optional[Sequence['outputs.ServerExcludeRangeVciString']] = None):
        """
        :param str end_ip: End of IP range.
        :param int id: ID.
        :param int lease_time: Lease time in seconds, 0 means default lease time.
        :param str start_ip: Start of IP range.
        :param str uci_match: Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range. Valid values: `disable`, `enable`.
        :param Sequence['ServerExcludeRangeUciStringArgs'] uci_strings: One or more UCI strings in quotes separated by spaces. The structure of `uci_string` block is documented below.
        :param str vci_match: Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range. Valid values: `disable`, `enable`.
        :param Sequence['ServerExcludeRangeVciStringArgs'] vci_strings: One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)
        if uci_match is not None:
            pulumi.set(__self__, "uci_match", uci_match)
        if uci_strings is not None:
            pulumi.set(__self__, "uci_strings", uci_strings)
        if vci_match is not None:
            pulumi.set(__self__, "vci_match", vci_match)
        if vci_strings is not None:
            pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        """
        End of IP range.
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[int]:
        """
        Lease time in seconds, 0 means default lease time.
        """
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        """
        Start of IP range.
        """
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> Optional[str]:
        """
        Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "uci_match")

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Optional[Sequence['outputs.ServerExcludeRangeUciString']]:
        """
        One or more UCI strings in quotes separated by spaces. The structure of `uci_string` block is documented below.
        """
        return pulumi.get(self, "uci_strings")

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> Optional[str]:
        """
        Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "vci_match")

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Optional[Sequence['outputs.ServerExcludeRangeVciString']]:
        """
        One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        """
        return pulumi.get(self, "vci_strings")


@pulumi.output_type
class ServerExcludeRangeUciString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uciString":
            suggest = "uci_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerExcludeRangeUciString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerExcludeRangeUciString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerExcludeRangeUciString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uci_string: Optional[str] = None):
        """
        :param str uci_string: UCI strings.
        """
        if uci_string is not None:
            pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> Optional[str]:
        """
        UCI strings.
        """
        return pulumi.get(self, "uci_string")


@pulumi.output_type
class ServerExcludeRangeVciString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vciString":
            suggest = "vci_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerExcludeRangeVciString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerExcludeRangeVciString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerExcludeRangeVciString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vci_string: Optional[str] = None):
        """
        :param str vci_string: VCI strings.
        """
        if vci_string is not None:
            pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> Optional[str]:
        """
        VCI strings.
        """
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class ServerIpRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "leaseTime":
            suggest = "lease_time"
        elif key == "startIp":
            suggest = "start_ip"
        elif key == "uciMatch":
            suggest = "uci_match"
        elif key == "uciStrings":
            suggest = "uci_strings"
        elif key == "vciMatch":
            suggest = "vci_match"
        elif key == "vciStrings":
            suggest = "vci_strings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerIpRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerIpRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerIpRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 lease_time: Optional[int] = None,
                 start_ip: Optional[str] = None,
                 uci_match: Optional[str] = None,
                 uci_strings: Optional[Sequence['outputs.ServerIpRangeUciString']] = None,
                 vci_match: Optional[str] = None,
                 vci_strings: Optional[Sequence['outputs.ServerIpRangeVciString']] = None):
        """
        :param str end_ip: End of IP range.
        :param int id: ID.
        :param int lease_time: Lease time in seconds, 0 means default lease time.
        :param str start_ip: Start of IP range.
        :param str uci_match: Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range. Valid values: `disable`, `enable`.
        :param Sequence['ServerIpRangeUciStringArgs'] uci_strings: One or more UCI strings in quotes separated by spaces. The structure of `uci_string` block is documented below.
        :param str vci_match: Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range. Valid values: `disable`, `enable`.
        :param Sequence['ServerIpRangeVciStringArgs'] vci_strings: One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)
        if uci_match is not None:
            pulumi.set(__self__, "uci_match", uci_match)
        if uci_strings is not None:
            pulumi.set(__self__, "uci_strings", uci_strings)
        if vci_match is not None:
            pulumi.set(__self__, "vci_match", vci_match)
        if vci_strings is not None:
            pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        """
        End of IP range.
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[int]:
        """
        Lease time in seconds, 0 means default lease time.
        """
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        """
        Start of IP range.
        """
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> Optional[str]:
        """
        Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "uci_match")

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Optional[Sequence['outputs.ServerIpRangeUciString']]:
        """
        One or more UCI strings in quotes separated by spaces. The structure of `uci_string` block is documented below.
        """
        return pulumi.get(self, "uci_strings")

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> Optional[str]:
        """
        Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "vci_match")

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Optional[Sequence['outputs.ServerIpRangeVciString']]:
        """
        One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        """
        return pulumi.get(self, "vci_strings")


@pulumi.output_type
class ServerIpRangeUciString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uciString":
            suggest = "uci_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerIpRangeUciString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerIpRangeUciString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerIpRangeUciString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uci_string: Optional[str] = None):
        """
        :param str uci_string: UCI strings.
        """
        if uci_string is not None:
            pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> Optional[str]:
        """
        UCI strings.
        """
        return pulumi.get(self, "uci_string")


@pulumi.output_type
class ServerIpRangeVciString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vciString":
            suggest = "vci_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerIpRangeVciString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerIpRangeVciString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerIpRangeVciString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vci_string: Optional[str] = None):
        """
        :param str vci_string: VCI strings.
        """
        if vci_string is not None:
            pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> Optional[str]:
        """
        VCI strings.
        """
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class ServerOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uciMatch":
            suggest = "uci_match"
        elif key == "uciStrings":
            suggest = "uci_strings"
        elif key == "vciMatch":
            suggest = "vci_match"
        elif key == "vciStrings":
            suggest = "vci_strings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[int] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 type: Optional[str] = None,
                 uci_match: Optional[str] = None,
                 uci_strings: Optional[Sequence['outputs.ServerOptionUciString']] = None,
                 value: Optional[str] = None,
                 vci_match: Optional[str] = None,
                 vci_strings: Optional[Sequence['outputs.ServerOptionVciString']] = None):
        """
        :param int code: DHCP option code.
        :param int id: ID.
        :param str ip: DHCP option IPs.
        :param str type: DHCP option type. Valid values: `hex`, `string`, `ip`, `fqdn`.
        :param str uci_match: Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this option. Valid values: `disable`, `enable`.
        :param Sequence['ServerOptionUciStringArgs'] uci_strings: One or more UCI strings in quotes separated by spaces. The structure of `uci_string` block is documented below.
        :param str value: DHCP option value.
        :param str vci_match: Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this option. Valid values: `disable`, `enable`.
        :param Sequence['ServerOptionVciStringArgs'] vci_strings: One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uci_match is not None:
            pulumi.set(__self__, "uci_match", uci_match)
        if uci_strings is not None:
            pulumi.set(__self__, "uci_strings", uci_strings)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if vci_match is not None:
            pulumi.set(__self__, "vci_match", vci_match)
        if vci_strings is not None:
            pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter
    def code(self) -> Optional[int]:
        """
        DHCP option code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        DHCP option IPs.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        DHCP option type. Valid values: `hex`, `string`, `ip`, `fqdn`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> Optional[str]:
        """
        Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this option. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "uci_match")

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Optional[Sequence['outputs.ServerOptionUciString']]:
        """
        One or more UCI strings in quotes separated by spaces. The structure of `uci_string` block is documented below.
        """
        return pulumi.get(self, "uci_strings")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        DHCP option value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> Optional[str]:
        """
        Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this option. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "vci_match")

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Optional[Sequence['outputs.ServerOptionVciString']]:
        """
        One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        """
        return pulumi.get(self, "vci_strings")


@pulumi.output_type
class ServerOptionUciString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uciString":
            suggest = "uci_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerOptionUciString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerOptionUciString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerOptionUciString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uci_string: Optional[str] = None):
        """
        :param str uci_string: UCI strings.
        """
        if uci_string is not None:
            pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> Optional[str]:
        """
        UCI strings.
        """
        return pulumi.get(self, "uci_string")


@pulumi.output_type
class ServerOptionVciString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vciString":
            suggest = "vci_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerOptionVciString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerOptionVciString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerOptionVciString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vci_string: Optional[str] = None):
        """
        :param str vci_string: VCI strings.
        """
        if vci_string is not None:
            pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> Optional[str]:
        """
        VCI strings.
        """
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class ServerReservedAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "circuitId":
            suggest = "circuit_id"
        elif key == "circuitIdType":
            suggest = "circuit_id_type"
        elif key == "remoteId":
            suggest = "remote_id"
        elif key == "remoteIdType":
            suggest = "remote_id_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerReservedAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerReservedAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerReservedAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 circuit_id: Optional[str] = None,
                 circuit_id_type: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 mac: Optional[str] = None,
                 remote_id: Optional[str] = None,
                 remote_id_type: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str action: Options for the DHCP server to configure the client with the reserved MAC address. Valid values: `assign`, `block`, `reserved`.
        :param str circuit_id: Option 82 circuit-ID of the client that will get the reserved IP address.
        :param str circuit_id_type: DHCP option type. Valid values: `hex`, `string`.
        :param str description: Description.
        :param int id: ID.
        :param str ip: IP address to be reserved for the MAC address.
        :param str mac: MAC address of the client that will get the reserved IP address.
        :param str remote_id: Option 82 remote-ID of the client that will get the reserved IP address.
        :param str remote_id_type: DHCP option type. Valid values: `hex`, `string`.
        :param str type: DHCP reserved-address type. Valid values: `mac`, `option82`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if circuit_id is not None:
            pulumi.set(__self__, "circuit_id", circuit_id)
        if circuit_id_type is not None:
            pulumi.set(__self__, "circuit_id_type", circuit_id_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if remote_id is not None:
            pulumi.set(__self__, "remote_id", remote_id)
        if remote_id_type is not None:
            pulumi.set(__self__, "remote_id_type", remote_id_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Options for the DHCP server to configure the client with the reserved MAC address. Valid values: `assign`, `block`, `reserved`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> Optional[str]:
        """
        Option 82 circuit-ID of the client that will get the reserved IP address.
        """
        return pulumi.get(self, "circuit_id")

    @property
    @pulumi.getter(name="circuitIdType")
    def circuit_id_type(self) -> Optional[str]:
        """
        DHCP option type. Valid values: `hex`, `string`.
        """
        return pulumi.get(self, "circuit_id_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IP address to be reserved for the MAC address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        """
        MAC address of the client that will get the reserved IP address.
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> Optional[str]:
        """
        Option 82 remote-ID of the client that will get the reserved IP address.
        """
        return pulumi.get(self, "remote_id")

    @property
    @pulumi.getter(name="remoteIdType")
    def remote_id_type(self) -> Optional[str]:
        """
        DHCP option type. Valid values: `hex`, `string`.
        """
        return pulumi.get(self, "remote_id_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        DHCP reserved-address type. Valid values: `mac`, `option82`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServerTftpServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tftpServer":
            suggest = "tftp_server"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerTftpServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerTftpServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerTftpServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tftp_server: Optional[str] = None):
        """
        :param str tftp_server: TFTP server.
        """
        if tftp_server is not None:
            pulumi.set(__self__, "tftp_server", tftp_server)

    @property
    @pulumi.getter(name="tftpServer")
    def tftp_server(self) -> Optional[str]:
        """
        TFTP server.
        """
        return pulumi.get(self, "tftp_server")


@pulumi.output_type
class ServerVciString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vciString":
            suggest = "vci_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerVciString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerVciString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerVciString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vci_string: Optional[str] = None):
        """
        :param str vci_string: VCI strings.
        """
        if vci_string is not None:
            pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> Optional[str]:
        """
        VCI strings.
        """
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class GetServerExcludeRangeResult(dict):
    def __init__(__self__, *,
                 end_ip: str,
                 id: int,
                 lease_time: int,
                 start_ip: str,
                 uci_match: str,
                 uci_strings: Sequence['outputs.GetServerExcludeRangeUciStringResult'],
                 vci_match: str,
                 vci_strings: Sequence['outputs.GetServerExcludeRangeVciStringResult']):
        """
        :param str end_ip: End of IP range.
        :param int id: ID.
        :param int lease_time: Lease time in seconds, 0 means default lease time.
        :param str start_ip: Start of IP range.
        :param str uci_match: Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
        :param Sequence['GetServerExcludeRangeUciStringArgs'] uci_strings: UCI strings.
        :param str vci_match: Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
        :param Sequence['GetServerExcludeRangeVciStringArgs'] vci_strings: VCI strings.
        """
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lease_time", lease_time)
        pulumi.set(__self__, "start_ip", start_ip)
        pulumi.set(__self__, "uci_match", uci_match)
        pulumi.set(__self__, "uci_strings", uci_strings)
        pulumi.set(__self__, "vci_match", vci_match)
        pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> str:
        """
        End of IP range.
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> int:
        """
        Lease time in seconds, 0 means default lease time.
        """
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> str:
        """
        Start of IP range.
        """
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> str:
        """
        Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
        """
        return pulumi.get(self, "uci_match")

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Sequence['outputs.GetServerExcludeRangeUciStringResult']:
        """
        UCI strings.
        """
        return pulumi.get(self, "uci_strings")

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> str:
        """
        Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
        """
        return pulumi.get(self, "vci_match")

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Sequence['outputs.GetServerExcludeRangeVciStringResult']:
        """
        VCI strings.
        """
        return pulumi.get(self, "vci_strings")


@pulumi.output_type
class GetServerExcludeRangeUciStringResult(dict):
    def __init__(__self__, *,
                 uci_string: str):
        """
        :param str uci_string: UCI strings.
        """
        pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> str:
        """
        UCI strings.
        """
        return pulumi.get(self, "uci_string")


@pulumi.output_type
class GetServerExcludeRangeVciStringResult(dict):
    def __init__(__self__, *,
                 vci_string: str):
        """
        :param str vci_string: VCI strings.
        """
        pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> str:
        """
        VCI strings.
        """
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class GetServerIpRangeResult(dict):
    def __init__(__self__, *,
                 end_ip: str,
                 id: int,
                 lease_time: int,
                 start_ip: str,
                 uci_match: str,
                 uci_strings: Sequence['outputs.GetServerIpRangeUciStringResult'],
                 vci_match: str,
                 vci_strings: Sequence['outputs.GetServerIpRangeVciStringResult']):
        """
        :param str end_ip: End of IP range.
        :param int id: ID.
        :param int lease_time: Lease time in seconds, 0 means default lease time.
        :param str start_ip: Start of IP range.
        :param str uci_match: Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
        :param Sequence['GetServerIpRangeUciStringArgs'] uci_strings: UCI strings.
        :param str vci_match: Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
        :param Sequence['GetServerIpRangeVciStringArgs'] vci_strings: VCI strings.
        """
        pulumi.set(__self__, "end_ip", end_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lease_time", lease_time)
        pulumi.set(__self__, "start_ip", start_ip)
        pulumi.set(__self__, "uci_match", uci_match)
        pulumi.set(__self__, "uci_strings", uci_strings)
        pulumi.set(__self__, "vci_match", vci_match)
        pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> str:
        """
        End of IP range.
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> int:
        """
        Lease time in seconds, 0 means default lease time.
        """
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> str:
        """
        Start of IP range.
        """
        return pulumi.get(self, "start_ip")

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> str:
        """
        Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
        """
        return pulumi.get(self, "uci_match")

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Sequence['outputs.GetServerIpRangeUciStringResult']:
        """
        UCI strings.
        """
        return pulumi.get(self, "uci_strings")

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> str:
        """
        Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
        """
        return pulumi.get(self, "vci_match")

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Sequence['outputs.GetServerIpRangeVciStringResult']:
        """
        VCI strings.
        """
        return pulumi.get(self, "vci_strings")


@pulumi.output_type
class GetServerIpRangeUciStringResult(dict):
    def __init__(__self__, *,
                 uci_string: str):
        """
        :param str uci_string: UCI strings.
        """
        pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> str:
        """
        UCI strings.
        """
        return pulumi.get(self, "uci_string")


@pulumi.output_type
class GetServerIpRangeVciStringResult(dict):
    def __init__(__self__, *,
                 vci_string: str):
        """
        :param str vci_string: VCI strings.
        """
        pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> str:
        """
        VCI strings.
        """
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class GetServerOptionResult(dict):
    def __init__(__self__, *,
                 code: int,
                 id: int,
                 ip: str,
                 type: str,
                 uci_match: str,
                 uci_strings: Sequence['outputs.GetServerOptionUciStringResult'],
                 value: str,
                 vci_match: str,
                 vci_strings: Sequence['outputs.GetServerOptionVciStringResult']):
        """
        :param int code: DHCP option code.
        :param int id: ID.
        :param str ip: IP address to be reserved for the MAC address.
        :param str type: DHCP reserved-address type.
        :param str uci_match: Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
        :param Sequence['GetServerOptionUciStringArgs'] uci_strings: UCI strings.
        :param str value: DHCP option value.
        :param str vci_match: Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
        :param Sequence['GetServerOptionVciStringArgs'] vci_strings: VCI strings.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uci_match", uci_match)
        pulumi.set(__self__, "uci_strings", uci_strings)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "vci_match", vci_match)
        pulumi.set(__self__, "vci_strings", vci_strings)

    @property
    @pulumi.getter
    def code(self) -> int:
        """
        DHCP option code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP address to be reserved for the MAC address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        DHCP reserved-address type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="uciMatch")
    def uci_match(self) -> str:
        """
        Enable/disable user class identifier (UCI) matching. When enabled only DHCP requests with a matching UCI are served with this range.
        """
        return pulumi.get(self, "uci_match")

    @property
    @pulumi.getter(name="uciStrings")
    def uci_strings(self) -> Sequence['outputs.GetServerOptionUciStringResult']:
        """
        UCI strings.
        """
        return pulumi.get(self, "uci_strings")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        DHCP option value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> str:
        """
        Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served with this range.
        """
        return pulumi.get(self, "vci_match")

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Sequence['outputs.GetServerOptionVciStringResult']:
        """
        VCI strings.
        """
        return pulumi.get(self, "vci_strings")


@pulumi.output_type
class GetServerOptionUciStringResult(dict):
    def __init__(__self__, *,
                 uci_string: str):
        """
        :param str uci_string: UCI strings.
        """
        pulumi.set(__self__, "uci_string", uci_string)

    @property
    @pulumi.getter(name="uciString")
    def uci_string(self) -> str:
        """
        UCI strings.
        """
        return pulumi.get(self, "uci_string")


@pulumi.output_type
class GetServerOptionVciStringResult(dict):
    def __init__(__self__, *,
                 vci_string: str):
        """
        :param str vci_string: VCI strings.
        """
        pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> str:
        """
        VCI strings.
        """
        return pulumi.get(self, "vci_string")


@pulumi.output_type
class GetServerReservedAddressResult(dict):
    def __init__(__self__, *,
                 action: str,
                 circuit_id: str,
                 circuit_id_type: str,
                 description: str,
                 id: int,
                 ip: str,
                 mac: str,
                 remote_id: str,
                 remote_id_type: str,
                 type: str):
        """
        :param str action: Options for the DHCP server to configure the client with the reserved MAC address.
        :param str circuit_id: Option 82 circuit-ID of the client that will get the reserved IP address.
        :param str circuit_id_type: DHCP option type.
        :param str description: Description.
        :param int id: ID.
        :param str ip: IP address to be reserved for the MAC address.
        :param str mac: MAC address of the client that will get the reserved IP address.
        :param str remote_id: Option 82 remote-ID of the client that will get the reserved IP address.
        :param str remote_id_type: DHCP option type.
        :param str type: DHCP reserved-address type.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "circuit_id", circuit_id)
        pulumi.set(__self__, "circuit_id_type", circuit_id_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "remote_id", remote_id)
        pulumi.set(__self__, "remote_id_type", remote_id_type)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Options for the DHCP server to configure the client with the reserved MAC address.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> str:
        """
        Option 82 circuit-ID of the client that will get the reserved IP address.
        """
        return pulumi.get(self, "circuit_id")

    @property
    @pulumi.getter(name="circuitIdType")
    def circuit_id_type(self) -> str:
        """
        DHCP option type.
        """
        return pulumi.get(self, "circuit_id_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP address to be reserved for the MAC address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        MAC address of the client that will get the reserved IP address.
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> str:
        """
        Option 82 remote-ID of the client that will get the reserved IP address.
        """
        return pulumi.get(self, "remote_id")

    @property
    @pulumi.getter(name="remoteIdType")
    def remote_id_type(self) -> str:
        """
        DHCP option type.
        """
        return pulumi.get(self, "remote_id_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        DHCP reserved-address type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServerTftpServerResult(dict):
    def __init__(__self__, *,
                 tftp_server: str):
        """
        :param str tftp_server: TFTP server.
        """
        pulumi.set(__self__, "tftp_server", tftp_server)

    @property
    @pulumi.getter(name="tftpServer")
    def tftp_server(self) -> str:
        """
        TFTP server.
        """
        return pulumi.get(self, "tftp_server")


@pulumi.output_type
class GetServerVciStringResult(dict):
    def __init__(__self__, *,
                 vci_string: str):
        """
        :param str vci_string: VCI strings.
        """
        pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> str:
        """
        VCI strings.
        """
        return pulumi.get(self, "vci_string")


