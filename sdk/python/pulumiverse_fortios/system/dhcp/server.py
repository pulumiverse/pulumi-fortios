# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServerArgs', 'Server']

@pulumi.input_type
class ServerArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str],
                 netmask: pulumi.Input[str],
                 auto_configuration: Optional[pulumi.Input[str]] = None,
                 auto_managed_status: Optional[pulumi.Input[str]] = None,
                 conflicted_ip_timeout: Optional[pulumi.Input[int]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_update: Optional[pulumi.Input[str]] = None,
                 ddns_update_override: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 default_gateway: Optional[pulumi.Input[str]] = None,
                 dhcp_settings_from_fortiipam: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_server3: Optional[pulumi.Input[str]] = None,
                 dns_server4: Optional[pulumi.Input[str]] = None,
                 dns_service: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['ServerExcludeRangeArgs']]]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 forticlient_on_net_status: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['ServerIpRangeArgs']]]] = None,
                 ipsec_lease_hold: Optional[pulumi.Input[int]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 mac_acl_default_action: Optional[pulumi.Input[str]] = None,
                 next_server: Optional[pulumi.Input[str]] = None,
                 ntp_server1: Optional[pulumi.Input[str]] = None,
                 ntp_server2: Optional[pulumi.Input[str]] = None,
                 ntp_server3: Optional[pulumi.Input[str]] = None,
                 ntp_service: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['ServerOptionArgs']]]] = None,
                 relay_agent: Optional[pulumi.Input[str]] = None,
                 reserved_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServerReservedAddressArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 shared_subnet: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tftp_servers: Optional[pulumi.Input[Sequence[pulumi.Input['ServerTftpServerArgs']]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 timezone_option: Optional[pulumi.Input[str]] = None,
                 vci_match: Optional[pulumi.Input[str]] = None,
                 vci_strings: Optional[pulumi.Input[Sequence[pulumi.Input['ServerVciStringArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wifi_ac1: Optional[pulumi.Input[str]] = None,
                 wifi_ac2: Optional[pulumi.Input[str]] = None,
                 wifi_ac3: Optional[pulumi.Input[str]] = None,
                 wifi_ac_service: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Server resource.
        :param pulumi.Input[str] interface: DHCP server can assign IP configurations to clients connected to this interface.
        :param pulumi.Input[str] netmask: Netmask assigned by the DHCP server.
        :param pulumi.Input[str] auto_configuration: Enable/disable auto configuration. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] auto_managed_status: Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] conflicted_ip_timeout: Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
        :param pulumi.Input[str] ddns_auth: DDNS authentication mode. Valid values: `disable`, `tsig`.
        :param pulumi.Input[str] ddns_key: DDNS update key (base 64 encoding).
        :param pulumi.Input[str] ddns_keyname: DDNS update key name.
        :param pulumi.Input[str] ddns_server_ip: DDNS server IP.
        :param pulumi.Input[int] ddns_ttl: TTL.
        :param pulumi.Input[str] ddns_update: Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ddns_update_override: Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ddns_zone: Zone of your domain name (ex. DDNS.com).
        :param pulumi.Input[str] default_gateway: Default gateway IP address assigned by the DHCP server.
        :param pulumi.Input[str] dhcp_settings_from_fortiipam: Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dns_server1: DNS server 1.
        :param pulumi.Input[str] dns_server2: DNS server 2.
        :param pulumi.Input[str] dns_server3: DNS server 3.
        :param pulumi.Input[str] dns_server4: DNS server 4.
        :param pulumi.Input[str] dns_service: Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        :param pulumi.Input[str] domain: Domain name suffix for the IP addresses that the DHCP server assigns to clients.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input['ServerExcludeRangeArgs']]] exclude_ranges: Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `exclude_range` block is documented below.
        :param pulumi.Input[str] filename: Name of the boot file on the TFTP server.
        :param pulumi.Input[str] forticlient_on_net_status: Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] fosid: ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ip_mode: Method used to assign client IP. Valid values: `range`, `usrgrp`.
        :param pulumi.Input[Sequence[pulumi.Input['ServerIpRangeArgs']]] ip_ranges: DHCP IP range configuration. The structure of `ip_range` block is documented below.
        :param pulumi.Input[int] ipsec_lease_hold: DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
        :param pulumi.Input[int] lease_time: Lease time in seconds, 0 means unlimited.
        :param pulumi.Input[str] mac_acl_default_action: MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
        :param pulumi.Input[str] next_server: IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
        :param pulumi.Input[str] ntp_server1: NTP server 1.
        :param pulumi.Input[str] ntp_server2: NTP server 2.
        :param pulumi.Input[str] ntp_server3: NTP server 3.
        :param pulumi.Input[str] ntp_service: Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        :param pulumi.Input[Sequence[pulumi.Input['ServerOptionArgs']]] options: DHCP options. The structure of `options` block is documented below.
        :param pulumi.Input[str] relay_agent: Relay agent IP.
        :param pulumi.Input[Sequence[pulumi.Input['ServerReservedAddressArgs']]] reserved_addresses: Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reserved_address` block is documented below.
        :param pulumi.Input[str] server_type: DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
        :param pulumi.Input[str] shared_subnet: Enable/disable shared subnet. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ServerTftpServerArgs']]] tftp_servers: One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftp_server` block is documented below.
        :param pulumi.Input[str] timezone: Select the time zone to be assigned to DHCP clients.
        :param pulumi.Input[str] timezone_option: Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
        :param pulumi.Input[str] vci_match: Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ServerVciStringArgs']]] vci_strings: One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wifi_ac1: WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
        :param pulumi.Input[str] wifi_ac2: WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
        :param pulumi.Input[str] wifi_ac3: WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
        :param pulumi.Input[str] wifi_ac_service: Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
        :param pulumi.Input[str] wins_server1: WINS server 1.
        :param pulumi.Input[str] wins_server2: WINS server 2.
        """
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "netmask", netmask)
        if auto_configuration is not None:
            pulumi.set(__self__, "auto_configuration", auto_configuration)
        if auto_managed_status is not None:
            pulumi.set(__self__, "auto_managed_status", auto_managed_status)
        if conflicted_ip_timeout is not None:
            pulumi.set(__self__, "conflicted_ip_timeout", conflicted_ip_timeout)
        if ddns_auth is not None:
            pulumi.set(__self__, "ddns_auth", ddns_auth)
        if ddns_key is not None:
            pulumi.set(__self__, "ddns_key", ddns_key)
        if ddns_keyname is not None:
            pulumi.set(__self__, "ddns_keyname", ddns_keyname)
        if ddns_server_ip is not None:
            pulumi.set(__self__, "ddns_server_ip", ddns_server_ip)
        if ddns_ttl is not None:
            pulumi.set(__self__, "ddns_ttl", ddns_ttl)
        if ddns_update is not None:
            pulumi.set(__self__, "ddns_update", ddns_update)
        if ddns_update_override is not None:
            pulumi.set(__self__, "ddns_update_override", ddns_update_override)
        if ddns_zone is not None:
            pulumi.set(__self__, "ddns_zone", ddns_zone)
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if dhcp_settings_from_fortiipam is not None:
            pulumi.set(__self__, "dhcp_settings_from_fortiipam", dhcp_settings_from_fortiipam)
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if dns_server3 is not None:
            pulumi.set(__self__, "dns_server3", dns_server3)
        if dns_server4 is not None:
            pulumi.set(__self__, "dns_server4", dns_server4)
        if dns_service is not None:
            pulumi.set(__self__, "dns_service", dns_service)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if exclude_ranges is not None:
            pulumi.set(__self__, "exclude_ranges", exclude_ranges)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if forticlient_on_net_status is not None:
            pulumi.set(__self__, "forticlient_on_net_status", forticlient_on_net_status)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ip_mode is not None:
            pulumi.set(__self__, "ip_mode", ip_mode)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if ipsec_lease_hold is not None:
            pulumi.set(__self__, "ipsec_lease_hold", ipsec_lease_hold)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if mac_acl_default_action is not None:
            pulumi.set(__self__, "mac_acl_default_action", mac_acl_default_action)
        if next_server is not None:
            pulumi.set(__self__, "next_server", next_server)
        if ntp_server1 is not None:
            pulumi.set(__self__, "ntp_server1", ntp_server1)
        if ntp_server2 is not None:
            pulumi.set(__self__, "ntp_server2", ntp_server2)
        if ntp_server3 is not None:
            pulumi.set(__self__, "ntp_server3", ntp_server3)
        if ntp_service is not None:
            pulumi.set(__self__, "ntp_service", ntp_service)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if relay_agent is not None:
            pulumi.set(__self__, "relay_agent", relay_agent)
        if reserved_addresses is not None:
            pulumi.set(__self__, "reserved_addresses", reserved_addresses)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if shared_subnet is not None:
            pulumi.set(__self__, "shared_subnet", shared_subnet)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tftp_servers is not None:
            pulumi.set(__self__, "tftp_servers", tftp_servers)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if timezone_option is not None:
            pulumi.set(__self__, "timezone_option", timezone_option)
        if vci_match is not None:
            pulumi.set(__self__, "vci_match", vci_match)
        if vci_strings is not None:
            pulumi.set(__self__, "vci_strings", vci_strings)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wifi_ac1 is not None:
            pulumi.set(__self__, "wifi_ac1", wifi_ac1)
        if wifi_ac2 is not None:
            pulumi.set(__self__, "wifi_ac2", wifi_ac2)
        if wifi_ac3 is not None:
            pulumi.set(__self__, "wifi_ac3", wifi_ac3)
        if wifi_ac_service is not None:
            pulumi.set(__self__, "wifi_ac_service", wifi_ac_service)
        if wins_server1 is not None:
            pulumi.set(__self__, "wins_server1", wins_server1)
        if wins_server2 is not None:
            pulumi.set(__self__, "wins_server2", wins_server2)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        """
        DHCP server can assign IP configurations to clients connected to this interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def netmask(self) -> pulumi.Input[str]:
        """
        Netmask assigned by the DHCP server.
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: pulumi.Input[str]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter(name="autoConfiguration")
    def auto_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable auto configuration. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "auto_configuration")

    @auto_configuration.setter
    def auto_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_configuration", value)

    @property
    @pulumi.getter(name="autoManagedStatus")
    def auto_managed_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "auto_managed_status")

    @auto_managed_status.setter
    def auto_managed_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_managed_status", value)

    @property
    @pulumi.getter(name="conflictedIpTimeout")
    def conflicted_ip_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
        """
        return pulumi.get(self, "conflicted_ip_timeout")

    @conflicted_ip_timeout.setter
    def conflicted_ip_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conflicted_ip_timeout", value)

    @property
    @pulumi.getter(name="ddnsAuth")
    def ddns_auth(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS authentication mode. Valid values: `disable`, `tsig`.
        """
        return pulumi.get(self, "ddns_auth")

    @ddns_auth.setter
    def ddns_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_auth", value)

    @property
    @pulumi.getter(name="ddnsKey")
    def ddns_key(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS update key (base 64 encoding).
        """
        return pulumi.get(self, "ddns_key")

    @ddns_key.setter
    def ddns_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_key", value)

    @property
    @pulumi.getter(name="ddnsKeyname")
    def ddns_keyname(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS update key name.
        """
        return pulumi.get(self, "ddns_keyname")

    @ddns_keyname.setter
    def ddns_keyname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_keyname", value)

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS server IP.
        """
        return pulumi.get(self, "ddns_server_ip")

    @ddns_server_ip.setter
    def ddns_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_server_ip", value)

    @property
    @pulumi.getter(name="ddnsTtl")
    def ddns_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL.
        """
        return pulumi.get(self, "ddns_ttl")

    @ddns_ttl.setter
    def ddns_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ddns_ttl", value)

    @property
    @pulumi.getter(name="ddnsUpdate")
    def ddns_update(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ddns_update")

    @ddns_update.setter
    def ddns_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_update", value)

    @property
    @pulumi.getter(name="ddnsUpdateOverride")
    def ddns_update_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ddns_update_override")

    @ddns_update_override.setter
    def ddns_update_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_update_override", value)

    @property
    @pulumi.getter(name="ddnsZone")
    def ddns_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone of your domain name (ex. DDNS.com).
        """
        return pulumi.get(self, "ddns_zone")

    @ddns_zone.setter
    def ddns_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_zone", value)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Default gateway IP address assigned by the DHCP server.
        """
        return pulumi.get(self, "default_gateway")

    @default_gateway.setter
    def default_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_gateway", value)

    @property
    @pulumi.getter(name="dhcpSettingsFromFortiipam")
    def dhcp_settings_from_fortiipam(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_settings_from_fortiipam")

    @dhcp_settings_from_fortiipam.setter
    def dhcp_settings_from_fortiipam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_settings_from_fortiipam", value)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 1.
        """
        return pulumi.get(self, "dns_server1")

    @dns_server1.setter
    def dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server1", value)

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 2.
        """
        return pulumi.get(self, "dns_server2")

    @dns_server2.setter
    def dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server2", value)

    @property
    @pulumi.getter(name="dnsServer3")
    def dns_server3(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 3.
        """
        return pulumi.get(self, "dns_server3")

    @dns_server3.setter
    def dns_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server3", value)

    @property
    @pulumi.getter(name="dnsServer4")
    def dns_server4(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 4.
        """
        return pulumi.get(self, "dns_server4")

    @dns_server4.setter
    def dns_server4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server4", value)

    @property
    @pulumi.getter(name="dnsService")
    def dns_service(self) -> Optional[pulumi.Input[str]]:
        """
        Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        """
        return pulumi.get(self, "dns_service")

    @dns_service.setter
    def dns_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_service", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name suffix for the IP addresses that the DHCP server assigns to clients.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="excludeRanges")
    def exclude_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerExcludeRangeArgs']]]]:
        """
        Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `exclude_range` block is documented below.
        """
        return pulumi.get(self, "exclude_ranges")

    @exclude_ranges.setter
    def exclude_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerExcludeRangeArgs']]]]):
        pulumi.set(self, "exclude_ranges", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the boot file on the TFTP server.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter(name="forticlientOnNetStatus")
    def forticlient_on_net_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "forticlient_on_net_status")

    @forticlient_on_net_status.setter
    def forticlient_on_net_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_on_net_status", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ipMode")
    def ip_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to assign client IP. Valid values: `range`, `usrgrp`.
        """
        return pulumi.get(self, "ip_mode")

    @ip_mode.setter
    def ip_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_mode", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerIpRangeArgs']]]]:
        """
        DHCP IP range configuration. The structure of `ip_range` block is documented below.
        """
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerIpRangeArgs']]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="ipsecLeaseHold")
    def ipsec_lease_hold(self) -> Optional[pulumi.Input[int]]:
        """
        DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
        """
        return pulumi.get(self, "ipsec_lease_hold")

    @ipsec_lease_hold.setter
    def ipsec_lease_hold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_lease_hold", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[int]]:
        """
        Lease time in seconds, 0 means unlimited.
        """
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter(name="macAclDefaultAction")
    def mac_acl_default_action(self) -> Optional[pulumi.Input[str]]:
        """
        MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
        """
        return pulumi.get(self, "mac_acl_default_action")

    @mac_acl_default_action.setter
    def mac_acl_default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_acl_default_action", value)

    @property
    @pulumi.getter(name="nextServer")
    def next_server(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
        """
        return pulumi.get(self, "next_server")

    @next_server.setter
    def next_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_server", value)

    @property
    @pulumi.getter(name="ntpServer1")
    def ntp_server1(self) -> Optional[pulumi.Input[str]]:
        """
        NTP server 1.
        """
        return pulumi.get(self, "ntp_server1")

    @ntp_server1.setter
    def ntp_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server1", value)

    @property
    @pulumi.getter(name="ntpServer2")
    def ntp_server2(self) -> Optional[pulumi.Input[str]]:
        """
        NTP server 2.
        """
        return pulumi.get(self, "ntp_server2")

    @ntp_server2.setter
    def ntp_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server2", value)

    @property
    @pulumi.getter(name="ntpServer3")
    def ntp_server3(self) -> Optional[pulumi.Input[str]]:
        """
        NTP server 3.
        """
        return pulumi.get(self, "ntp_server3")

    @ntp_server3.setter
    def ntp_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server3", value)

    @property
    @pulumi.getter(name="ntpService")
    def ntp_service(self) -> Optional[pulumi.Input[str]]:
        """
        Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        """
        return pulumi.get(self, "ntp_service")

    @ntp_service.setter
    def ntp_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_service", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerOptionArgs']]]]:
        """
        DHCP options. The structure of `options` block is documented below.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerOptionArgs']]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="relayAgent")
    def relay_agent(self) -> Optional[pulumi.Input[str]]:
        """
        Relay agent IP.
        """
        return pulumi.get(self, "relay_agent")

    @relay_agent.setter
    def relay_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relay_agent", value)

    @property
    @pulumi.getter(name="reservedAddresses")
    def reserved_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerReservedAddressArgs']]]]:
        """
        Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reserved_address` block is documented below.
        """
        return pulumi.get(self, "reserved_addresses")

    @reserved_addresses.setter
    def reserved_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerReservedAddressArgs']]]]):
        pulumi.set(self, "reserved_addresses", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="sharedSubnet")
    def shared_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable shared subnet. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "shared_subnet")

    @shared_subnet.setter
    def shared_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_subnet", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tftpServers")
    def tftp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerTftpServerArgs']]]]:
        """
        One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftp_server` block is documented below.
        """
        return pulumi.get(self, "tftp_servers")

    @tftp_servers.setter
    def tftp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerTftpServerArgs']]]]):
        pulumi.set(self, "tftp_servers", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        Select the time zone to be assigned to DHCP clients.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="timezoneOption")
    def timezone_option(self) -> Optional[pulumi.Input[str]]:
        """
        Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
        """
        return pulumi.get(self, "timezone_option")

    @timezone_option.setter
    def timezone_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone_option", value)

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "vci_match")

    @vci_match.setter
    def vci_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vci_match", value)

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerVciStringArgs']]]]:
        """
        One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        """
        return pulumi.get(self, "vci_strings")

    @vci_strings.setter
    def vci_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerVciStringArgs']]]]):
        pulumi.set(self, "vci_strings", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wifiAc1")
    def wifi_ac1(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
        """
        return pulumi.get(self, "wifi_ac1")

    @wifi_ac1.setter
    def wifi_ac1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac1", value)

    @property
    @pulumi.getter(name="wifiAc2")
    def wifi_ac2(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
        """
        return pulumi.get(self, "wifi_ac2")

    @wifi_ac2.setter
    def wifi_ac2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac2", value)

    @property
    @pulumi.getter(name="wifiAc3")
    def wifi_ac3(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
        """
        return pulumi.get(self, "wifi_ac3")

    @wifi_ac3.setter
    def wifi_ac3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac3", value)

    @property
    @pulumi.getter(name="wifiAcService")
    def wifi_ac_service(self) -> Optional[pulumi.Input[str]]:
        """
        Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
        """
        return pulumi.get(self, "wifi_ac_service")

    @wifi_ac_service.setter
    def wifi_ac_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac_service", value)

    @property
    @pulumi.getter(name="winsServer1")
    def wins_server1(self) -> Optional[pulumi.Input[str]]:
        """
        WINS server 1.
        """
        return pulumi.get(self, "wins_server1")

    @wins_server1.setter
    def wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server1", value)

    @property
    @pulumi.getter(name="winsServer2")
    def wins_server2(self) -> Optional[pulumi.Input[str]]:
        """
        WINS server 2.
        """
        return pulumi.get(self, "wins_server2")

    @wins_server2.setter
    def wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server2", value)


@pulumi.input_type
class _ServerState:
    def __init__(__self__, *,
                 auto_configuration: Optional[pulumi.Input[str]] = None,
                 auto_managed_status: Optional[pulumi.Input[str]] = None,
                 conflicted_ip_timeout: Optional[pulumi.Input[int]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_update: Optional[pulumi.Input[str]] = None,
                 ddns_update_override: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 default_gateway: Optional[pulumi.Input[str]] = None,
                 dhcp_settings_from_fortiipam: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_server3: Optional[pulumi.Input[str]] = None,
                 dns_server4: Optional[pulumi.Input[str]] = None,
                 dns_service: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['ServerExcludeRangeArgs']]]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 forticlient_on_net_status: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['ServerIpRangeArgs']]]] = None,
                 ipsec_lease_hold: Optional[pulumi.Input[int]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 mac_acl_default_action: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 next_server: Optional[pulumi.Input[str]] = None,
                 ntp_server1: Optional[pulumi.Input[str]] = None,
                 ntp_server2: Optional[pulumi.Input[str]] = None,
                 ntp_server3: Optional[pulumi.Input[str]] = None,
                 ntp_service: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['ServerOptionArgs']]]] = None,
                 relay_agent: Optional[pulumi.Input[str]] = None,
                 reserved_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServerReservedAddressArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 shared_subnet: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tftp_servers: Optional[pulumi.Input[Sequence[pulumi.Input['ServerTftpServerArgs']]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 timezone_option: Optional[pulumi.Input[str]] = None,
                 vci_match: Optional[pulumi.Input[str]] = None,
                 vci_strings: Optional[pulumi.Input[Sequence[pulumi.Input['ServerVciStringArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wifi_ac1: Optional[pulumi.Input[str]] = None,
                 wifi_ac2: Optional[pulumi.Input[str]] = None,
                 wifi_ac3: Optional[pulumi.Input[str]] = None,
                 wifi_ac_service: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Server resources.
        :param pulumi.Input[str] auto_configuration: Enable/disable auto configuration. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] auto_managed_status: Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] conflicted_ip_timeout: Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
        :param pulumi.Input[str] ddns_auth: DDNS authentication mode. Valid values: `disable`, `tsig`.
        :param pulumi.Input[str] ddns_key: DDNS update key (base 64 encoding).
        :param pulumi.Input[str] ddns_keyname: DDNS update key name.
        :param pulumi.Input[str] ddns_server_ip: DDNS server IP.
        :param pulumi.Input[int] ddns_ttl: TTL.
        :param pulumi.Input[str] ddns_update: Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ddns_update_override: Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ddns_zone: Zone of your domain name (ex. DDNS.com).
        :param pulumi.Input[str] default_gateway: Default gateway IP address assigned by the DHCP server.
        :param pulumi.Input[str] dhcp_settings_from_fortiipam: Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dns_server1: DNS server 1.
        :param pulumi.Input[str] dns_server2: DNS server 2.
        :param pulumi.Input[str] dns_server3: DNS server 3.
        :param pulumi.Input[str] dns_server4: DNS server 4.
        :param pulumi.Input[str] dns_service: Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        :param pulumi.Input[str] domain: Domain name suffix for the IP addresses that the DHCP server assigns to clients.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input['ServerExcludeRangeArgs']]] exclude_ranges: Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `exclude_range` block is documented below.
        :param pulumi.Input[str] filename: Name of the boot file on the TFTP server.
        :param pulumi.Input[str] forticlient_on_net_status: Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] fosid: ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: DHCP server can assign IP configurations to clients connected to this interface.
        :param pulumi.Input[str] ip_mode: Method used to assign client IP. Valid values: `range`, `usrgrp`.
        :param pulumi.Input[Sequence[pulumi.Input['ServerIpRangeArgs']]] ip_ranges: DHCP IP range configuration. The structure of `ip_range` block is documented below.
        :param pulumi.Input[int] ipsec_lease_hold: DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
        :param pulumi.Input[int] lease_time: Lease time in seconds, 0 means unlimited.
        :param pulumi.Input[str] mac_acl_default_action: MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
        :param pulumi.Input[str] netmask: Netmask assigned by the DHCP server.
        :param pulumi.Input[str] next_server: IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
        :param pulumi.Input[str] ntp_server1: NTP server 1.
        :param pulumi.Input[str] ntp_server2: NTP server 2.
        :param pulumi.Input[str] ntp_server3: NTP server 3.
        :param pulumi.Input[str] ntp_service: Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        :param pulumi.Input[Sequence[pulumi.Input['ServerOptionArgs']]] options: DHCP options. The structure of `options` block is documented below.
        :param pulumi.Input[str] relay_agent: Relay agent IP.
        :param pulumi.Input[Sequence[pulumi.Input['ServerReservedAddressArgs']]] reserved_addresses: Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reserved_address` block is documented below.
        :param pulumi.Input[str] server_type: DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
        :param pulumi.Input[str] shared_subnet: Enable/disable shared subnet. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ServerTftpServerArgs']]] tftp_servers: One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftp_server` block is documented below.
        :param pulumi.Input[str] timezone: Select the time zone to be assigned to DHCP clients.
        :param pulumi.Input[str] timezone_option: Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
        :param pulumi.Input[str] vci_match: Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ServerVciStringArgs']]] vci_strings: One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wifi_ac1: WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
        :param pulumi.Input[str] wifi_ac2: WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
        :param pulumi.Input[str] wifi_ac3: WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
        :param pulumi.Input[str] wifi_ac_service: Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
        :param pulumi.Input[str] wins_server1: WINS server 1.
        :param pulumi.Input[str] wins_server2: WINS server 2.
        """
        if auto_configuration is not None:
            pulumi.set(__self__, "auto_configuration", auto_configuration)
        if auto_managed_status is not None:
            pulumi.set(__self__, "auto_managed_status", auto_managed_status)
        if conflicted_ip_timeout is not None:
            pulumi.set(__self__, "conflicted_ip_timeout", conflicted_ip_timeout)
        if ddns_auth is not None:
            pulumi.set(__self__, "ddns_auth", ddns_auth)
        if ddns_key is not None:
            pulumi.set(__self__, "ddns_key", ddns_key)
        if ddns_keyname is not None:
            pulumi.set(__self__, "ddns_keyname", ddns_keyname)
        if ddns_server_ip is not None:
            pulumi.set(__self__, "ddns_server_ip", ddns_server_ip)
        if ddns_ttl is not None:
            pulumi.set(__self__, "ddns_ttl", ddns_ttl)
        if ddns_update is not None:
            pulumi.set(__self__, "ddns_update", ddns_update)
        if ddns_update_override is not None:
            pulumi.set(__self__, "ddns_update_override", ddns_update_override)
        if ddns_zone is not None:
            pulumi.set(__self__, "ddns_zone", ddns_zone)
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if dhcp_settings_from_fortiipam is not None:
            pulumi.set(__self__, "dhcp_settings_from_fortiipam", dhcp_settings_from_fortiipam)
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if dns_server3 is not None:
            pulumi.set(__self__, "dns_server3", dns_server3)
        if dns_server4 is not None:
            pulumi.set(__self__, "dns_server4", dns_server4)
        if dns_service is not None:
            pulumi.set(__self__, "dns_service", dns_service)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if exclude_ranges is not None:
            pulumi.set(__self__, "exclude_ranges", exclude_ranges)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if forticlient_on_net_status is not None:
            pulumi.set(__self__, "forticlient_on_net_status", forticlient_on_net_status)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip_mode is not None:
            pulumi.set(__self__, "ip_mode", ip_mode)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if ipsec_lease_hold is not None:
            pulumi.set(__self__, "ipsec_lease_hold", ipsec_lease_hold)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if mac_acl_default_action is not None:
            pulumi.set(__self__, "mac_acl_default_action", mac_acl_default_action)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if next_server is not None:
            pulumi.set(__self__, "next_server", next_server)
        if ntp_server1 is not None:
            pulumi.set(__self__, "ntp_server1", ntp_server1)
        if ntp_server2 is not None:
            pulumi.set(__self__, "ntp_server2", ntp_server2)
        if ntp_server3 is not None:
            pulumi.set(__self__, "ntp_server3", ntp_server3)
        if ntp_service is not None:
            pulumi.set(__self__, "ntp_service", ntp_service)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if relay_agent is not None:
            pulumi.set(__self__, "relay_agent", relay_agent)
        if reserved_addresses is not None:
            pulumi.set(__self__, "reserved_addresses", reserved_addresses)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if shared_subnet is not None:
            pulumi.set(__self__, "shared_subnet", shared_subnet)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tftp_servers is not None:
            pulumi.set(__self__, "tftp_servers", tftp_servers)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if timezone_option is not None:
            pulumi.set(__self__, "timezone_option", timezone_option)
        if vci_match is not None:
            pulumi.set(__self__, "vci_match", vci_match)
        if vci_strings is not None:
            pulumi.set(__self__, "vci_strings", vci_strings)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if wifi_ac1 is not None:
            pulumi.set(__self__, "wifi_ac1", wifi_ac1)
        if wifi_ac2 is not None:
            pulumi.set(__self__, "wifi_ac2", wifi_ac2)
        if wifi_ac3 is not None:
            pulumi.set(__self__, "wifi_ac3", wifi_ac3)
        if wifi_ac_service is not None:
            pulumi.set(__self__, "wifi_ac_service", wifi_ac_service)
        if wins_server1 is not None:
            pulumi.set(__self__, "wins_server1", wins_server1)
        if wins_server2 is not None:
            pulumi.set(__self__, "wins_server2", wins_server2)

    @property
    @pulumi.getter(name="autoConfiguration")
    def auto_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable auto configuration. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "auto_configuration")

    @auto_configuration.setter
    def auto_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_configuration", value)

    @property
    @pulumi.getter(name="autoManagedStatus")
    def auto_managed_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "auto_managed_status")

    @auto_managed_status.setter
    def auto_managed_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_managed_status", value)

    @property
    @pulumi.getter(name="conflictedIpTimeout")
    def conflicted_ip_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
        """
        return pulumi.get(self, "conflicted_ip_timeout")

    @conflicted_ip_timeout.setter
    def conflicted_ip_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conflicted_ip_timeout", value)

    @property
    @pulumi.getter(name="ddnsAuth")
    def ddns_auth(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS authentication mode. Valid values: `disable`, `tsig`.
        """
        return pulumi.get(self, "ddns_auth")

    @ddns_auth.setter
    def ddns_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_auth", value)

    @property
    @pulumi.getter(name="ddnsKey")
    def ddns_key(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS update key (base 64 encoding).
        """
        return pulumi.get(self, "ddns_key")

    @ddns_key.setter
    def ddns_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_key", value)

    @property
    @pulumi.getter(name="ddnsKeyname")
    def ddns_keyname(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS update key name.
        """
        return pulumi.get(self, "ddns_keyname")

    @ddns_keyname.setter
    def ddns_keyname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_keyname", value)

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        DDNS server IP.
        """
        return pulumi.get(self, "ddns_server_ip")

    @ddns_server_ip.setter
    def ddns_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_server_ip", value)

    @property
    @pulumi.getter(name="ddnsTtl")
    def ddns_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL.
        """
        return pulumi.get(self, "ddns_ttl")

    @ddns_ttl.setter
    def ddns_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ddns_ttl", value)

    @property
    @pulumi.getter(name="ddnsUpdate")
    def ddns_update(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ddns_update")

    @ddns_update.setter
    def ddns_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_update", value)

    @property
    @pulumi.getter(name="ddnsUpdateOverride")
    def ddns_update_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ddns_update_override")

    @ddns_update_override.setter
    def ddns_update_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_update_override", value)

    @property
    @pulumi.getter(name="ddnsZone")
    def ddns_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone of your domain name (ex. DDNS.com).
        """
        return pulumi.get(self, "ddns_zone")

    @ddns_zone.setter
    def ddns_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddns_zone", value)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Default gateway IP address assigned by the DHCP server.
        """
        return pulumi.get(self, "default_gateway")

    @default_gateway.setter
    def default_gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_gateway", value)

    @property
    @pulumi.getter(name="dhcpSettingsFromFortiipam")
    def dhcp_settings_from_fortiipam(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_settings_from_fortiipam")

    @dhcp_settings_from_fortiipam.setter
    def dhcp_settings_from_fortiipam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_settings_from_fortiipam", value)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 1.
        """
        return pulumi.get(self, "dns_server1")

    @dns_server1.setter
    def dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server1", value)

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 2.
        """
        return pulumi.get(self, "dns_server2")

    @dns_server2.setter
    def dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server2", value)

    @property
    @pulumi.getter(name="dnsServer3")
    def dns_server3(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 3.
        """
        return pulumi.get(self, "dns_server3")

    @dns_server3.setter
    def dns_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server3", value)

    @property
    @pulumi.getter(name="dnsServer4")
    def dns_server4(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 4.
        """
        return pulumi.get(self, "dns_server4")

    @dns_server4.setter
    def dns_server4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server4", value)

    @property
    @pulumi.getter(name="dnsService")
    def dns_service(self) -> Optional[pulumi.Input[str]]:
        """
        Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        """
        return pulumi.get(self, "dns_service")

    @dns_service.setter
    def dns_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_service", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name suffix for the IP addresses that the DHCP server assigns to clients.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="excludeRanges")
    def exclude_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerExcludeRangeArgs']]]]:
        """
        Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `exclude_range` block is documented below.
        """
        return pulumi.get(self, "exclude_ranges")

    @exclude_ranges.setter
    def exclude_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerExcludeRangeArgs']]]]):
        pulumi.set(self, "exclude_ranges", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the boot file on the TFTP server.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter(name="forticlientOnNetStatus")
    def forticlient_on_net_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "forticlient_on_net_status")

    @forticlient_on_net_status.setter
    def forticlient_on_net_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_on_net_status", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP server can assign IP configurations to clients connected to this interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipMode")
    def ip_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to assign client IP. Valid values: `range`, `usrgrp`.
        """
        return pulumi.get(self, "ip_mode")

    @ip_mode.setter
    def ip_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_mode", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerIpRangeArgs']]]]:
        """
        DHCP IP range configuration. The structure of `ip_range` block is documented below.
        """
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerIpRangeArgs']]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="ipsecLeaseHold")
    def ipsec_lease_hold(self) -> Optional[pulumi.Input[int]]:
        """
        DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
        """
        return pulumi.get(self, "ipsec_lease_hold")

    @ipsec_lease_hold.setter
    def ipsec_lease_hold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_lease_hold", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[int]]:
        """
        Lease time in seconds, 0 means unlimited.
        """
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter(name="macAclDefaultAction")
    def mac_acl_default_action(self) -> Optional[pulumi.Input[str]]:
        """
        MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
        """
        return pulumi.get(self, "mac_acl_default_action")

    @mac_acl_default_action.setter
    def mac_acl_default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_acl_default_action", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[str]]:
        """
        Netmask assigned by the DHCP server.
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter(name="nextServer")
    def next_server(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
        """
        return pulumi.get(self, "next_server")

    @next_server.setter
    def next_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_server", value)

    @property
    @pulumi.getter(name="ntpServer1")
    def ntp_server1(self) -> Optional[pulumi.Input[str]]:
        """
        NTP server 1.
        """
        return pulumi.get(self, "ntp_server1")

    @ntp_server1.setter
    def ntp_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server1", value)

    @property
    @pulumi.getter(name="ntpServer2")
    def ntp_server2(self) -> Optional[pulumi.Input[str]]:
        """
        NTP server 2.
        """
        return pulumi.get(self, "ntp_server2")

    @ntp_server2.setter
    def ntp_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server2", value)

    @property
    @pulumi.getter(name="ntpServer3")
    def ntp_server3(self) -> Optional[pulumi.Input[str]]:
        """
        NTP server 3.
        """
        return pulumi.get(self, "ntp_server3")

    @ntp_server3.setter
    def ntp_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_server3", value)

    @property
    @pulumi.getter(name="ntpService")
    def ntp_service(self) -> Optional[pulumi.Input[str]]:
        """
        Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        """
        return pulumi.get(self, "ntp_service")

    @ntp_service.setter
    def ntp_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntp_service", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerOptionArgs']]]]:
        """
        DHCP options. The structure of `options` block is documented below.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerOptionArgs']]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="relayAgent")
    def relay_agent(self) -> Optional[pulumi.Input[str]]:
        """
        Relay agent IP.
        """
        return pulumi.get(self, "relay_agent")

    @relay_agent.setter
    def relay_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relay_agent", value)

    @property
    @pulumi.getter(name="reservedAddresses")
    def reserved_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerReservedAddressArgs']]]]:
        """
        Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reserved_address` block is documented below.
        """
        return pulumi.get(self, "reserved_addresses")

    @reserved_addresses.setter
    def reserved_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerReservedAddressArgs']]]]):
        pulumi.set(self, "reserved_addresses", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="sharedSubnet")
    def shared_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable shared subnet. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "shared_subnet")

    @shared_subnet.setter
    def shared_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_subnet", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tftpServers")
    def tftp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerTftpServerArgs']]]]:
        """
        One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftp_server` block is documented below.
        """
        return pulumi.get(self, "tftp_servers")

    @tftp_servers.setter
    def tftp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerTftpServerArgs']]]]):
        pulumi.set(self, "tftp_servers", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        Select the time zone to be assigned to DHCP clients.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="timezoneOption")
    def timezone_option(self) -> Optional[pulumi.Input[str]]:
        """
        Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
        """
        return pulumi.get(self, "timezone_option")

    @timezone_option.setter
    def timezone_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone_option", value)

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "vci_match")

    @vci_match.setter
    def vci_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vci_match", value)

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerVciStringArgs']]]]:
        """
        One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        """
        return pulumi.get(self, "vci_strings")

    @vci_strings.setter
    def vci_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerVciStringArgs']]]]):
        pulumi.set(self, "vci_strings", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="wifiAc1")
    def wifi_ac1(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
        """
        return pulumi.get(self, "wifi_ac1")

    @wifi_ac1.setter
    def wifi_ac1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac1", value)

    @property
    @pulumi.getter(name="wifiAc2")
    def wifi_ac2(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
        """
        return pulumi.get(self, "wifi_ac2")

    @wifi_ac2.setter
    def wifi_ac2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac2", value)

    @property
    @pulumi.getter(name="wifiAc3")
    def wifi_ac3(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
        """
        return pulumi.get(self, "wifi_ac3")

    @wifi_ac3.setter
    def wifi_ac3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac3", value)

    @property
    @pulumi.getter(name="wifiAcService")
    def wifi_ac_service(self) -> Optional[pulumi.Input[str]]:
        """
        Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
        """
        return pulumi.get(self, "wifi_ac_service")

    @wifi_ac_service.setter
    def wifi_ac_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wifi_ac_service", value)

    @property
    @pulumi.getter(name="winsServer1")
    def wins_server1(self) -> Optional[pulumi.Input[str]]:
        """
        WINS server 1.
        """
        return pulumi.get(self, "wins_server1")

    @wins_server1.setter
    def wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server1", value)

    @property
    @pulumi.getter(name="winsServer2")
    def wins_server2(self) -> Optional[pulumi.Input[str]]:
        """
        WINS server 2.
        """
        return pulumi.get(self, "wins_server2")

    @wins_server2.setter
    def wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server2", value)


class Server(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_configuration: Optional[pulumi.Input[str]] = None,
                 auto_managed_status: Optional[pulumi.Input[str]] = None,
                 conflicted_ip_timeout: Optional[pulumi.Input[int]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_update: Optional[pulumi.Input[str]] = None,
                 ddns_update_override: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 default_gateway: Optional[pulumi.Input[str]] = None,
                 dhcp_settings_from_fortiipam: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_server3: Optional[pulumi.Input[str]] = None,
                 dns_server4: Optional[pulumi.Input[str]] = None,
                 dns_service: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerExcludeRangeArgs']]]]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 forticlient_on_net_status: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerIpRangeArgs']]]]] = None,
                 ipsec_lease_hold: Optional[pulumi.Input[int]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 mac_acl_default_action: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 next_server: Optional[pulumi.Input[str]] = None,
                 ntp_server1: Optional[pulumi.Input[str]] = None,
                 ntp_server2: Optional[pulumi.Input[str]] = None,
                 ntp_server3: Optional[pulumi.Input[str]] = None,
                 ntp_service: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerOptionArgs']]]]] = None,
                 relay_agent: Optional[pulumi.Input[str]] = None,
                 reserved_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerReservedAddressArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 shared_subnet: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tftp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerTftpServerArgs']]]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 timezone_option: Optional[pulumi.Input[str]] = None,
                 vci_match: Optional[pulumi.Input[str]] = None,
                 vci_strings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerVciStringArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wifi_ac1: Optional[pulumi.Input[str]] = None,
                 wifi_ac2: Optional[pulumi.Input[str]] = None,
                 wifi_ac3: Optional[pulumi.Input[str]] = None,
                 wifi_ac_service: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure DHCP servers.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.dhcp.Server("trname",
            dns_service="default",
            fosid=1,
            interface="port2",
            ip_ranges=[fortios.system.dhcp.ServerIpRangeArgs(
                end_ip="1.1.1.22",
                id=1,
                start_ip="1.1.1.1",
            )],
            netmask="255.255.255.0",
            ntp_server1="192.168.52.22",
            status="disable",
            timezone="00")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SystemDhcp Server can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/dhcp/server:Server labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/dhcp/server:Server labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_configuration: Enable/disable auto configuration. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] auto_managed_status: Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] conflicted_ip_timeout: Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
        :param pulumi.Input[str] ddns_auth: DDNS authentication mode. Valid values: `disable`, `tsig`.
        :param pulumi.Input[str] ddns_key: DDNS update key (base 64 encoding).
        :param pulumi.Input[str] ddns_keyname: DDNS update key name.
        :param pulumi.Input[str] ddns_server_ip: DDNS server IP.
        :param pulumi.Input[int] ddns_ttl: TTL.
        :param pulumi.Input[str] ddns_update: Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ddns_update_override: Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ddns_zone: Zone of your domain name (ex. DDNS.com).
        :param pulumi.Input[str] default_gateway: Default gateway IP address assigned by the DHCP server.
        :param pulumi.Input[str] dhcp_settings_from_fortiipam: Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dns_server1: DNS server 1.
        :param pulumi.Input[str] dns_server2: DNS server 2.
        :param pulumi.Input[str] dns_server3: DNS server 3.
        :param pulumi.Input[str] dns_server4: DNS server 4.
        :param pulumi.Input[str] dns_service: Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        :param pulumi.Input[str] domain: Domain name suffix for the IP addresses that the DHCP server assigns to clients.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerExcludeRangeArgs']]]] exclude_ranges: Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `exclude_range` block is documented below.
        :param pulumi.Input[str] filename: Name of the boot file on the TFTP server.
        :param pulumi.Input[str] forticlient_on_net_status: Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] fosid: ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: DHCP server can assign IP configurations to clients connected to this interface.
        :param pulumi.Input[str] ip_mode: Method used to assign client IP. Valid values: `range`, `usrgrp`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerIpRangeArgs']]]] ip_ranges: DHCP IP range configuration. The structure of `ip_range` block is documented below.
        :param pulumi.Input[int] ipsec_lease_hold: DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
        :param pulumi.Input[int] lease_time: Lease time in seconds, 0 means unlimited.
        :param pulumi.Input[str] mac_acl_default_action: MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
        :param pulumi.Input[str] netmask: Netmask assigned by the DHCP server.
        :param pulumi.Input[str] next_server: IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
        :param pulumi.Input[str] ntp_server1: NTP server 1.
        :param pulumi.Input[str] ntp_server2: NTP server 2.
        :param pulumi.Input[str] ntp_server3: NTP server 3.
        :param pulumi.Input[str] ntp_service: Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerOptionArgs']]]] options: DHCP options. The structure of `options` block is documented below.
        :param pulumi.Input[str] relay_agent: Relay agent IP.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerReservedAddressArgs']]]] reserved_addresses: Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reserved_address` block is documented below.
        :param pulumi.Input[str] server_type: DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
        :param pulumi.Input[str] shared_subnet: Enable/disable shared subnet. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerTftpServerArgs']]]] tftp_servers: One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftp_server` block is documented below.
        :param pulumi.Input[str] timezone: Select the time zone to be assigned to DHCP clients.
        :param pulumi.Input[str] timezone_option: Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
        :param pulumi.Input[str] vci_match: Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerVciStringArgs']]]] vci_strings: One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wifi_ac1: WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
        :param pulumi.Input[str] wifi_ac2: WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
        :param pulumi.Input[str] wifi_ac3: WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
        :param pulumi.Input[str] wifi_ac_service: Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
        :param pulumi.Input[str] wins_server1: WINS server 1.
        :param pulumi.Input[str] wins_server2: WINS server 2.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure DHCP servers.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.dhcp.Server("trname",
            dns_service="default",
            fosid=1,
            interface="port2",
            ip_ranges=[fortios.system.dhcp.ServerIpRangeArgs(
                end_ip="1.1.1.22",
                id=1,
                start_ip="1.1.1.1",
            )],
            netmask="255.255.255.0",
            ntp_server1="192.168.52.22",
            status="disable",
            timezone="00")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SystemDhcp Server can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/dhcp/server:Server labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/dhcp/server:Server labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_configuration: Optional[pulumi.Input[str]] = None,
                 auto_managed_status: Optional[pulumi.Input[str]] = None,
                 conflicted_ip_timeout: Optional[pulumi.Input[int]] = None,
                 ddns_auth: Optional[pulumi.Input[str]] = None,
                 ddns_key: Optional[pulumi.Input[str]] = None,
                 ddns_keyname: Optional[pulumi.Input[str]] = None,
                 ddns_server_ip: Optional[pulumi.Input[str]] = None,
                 ddns_ttl: Optional[pulumi.Input[int]] = None,
                 ddns_update: Optional[pulumi.Input[str]] = None,
                 ddns_update_override: Optional[pulumi.Input[str]] = None,
                 ddns_zone: Optional[pulumi.Input[str]] = None,
                 default_gateway: Optional[pulumi.Input[str]] = None,
                 dhcp_settings_from_fortiipam: Optional[pulumi.Input[str]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_server3: Optional[pulumi.Input[str]] = None,
                 dns_server4: Optional[pulumi.Input[str]] = None,
                 dns_service: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerExcludeRangeArgs']]]]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 forticlient_on_net_status: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_mode: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerIpRangeArgs']]]]] = None,
                 ipsec_lease_hold: Optional[pulumi.Input[int]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 mac_acl_default_action: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 next_server: Optional[pulumi.Input[str]] = None,
                 ntp_server1: Optional[pulumi.Input[str]] = None,
                 ntp_server2: Optional[pulumi.Input[str]] = None,
                 ntp_server3: Optional[pulumi.Input[str]] = None,
                 ntp_service: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerOptionArgs']]]]] = None,
                 relay_agent: Optional[pulumi.Input[str]] = None,
                 reserved_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerReservedAddressArgs']]]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 shared_subnet: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tftp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerTftpServerArgs']]]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 timezone_option: Optional[pulumi.Input[str]] = None,
                 vci_match: Optional[pulumi.Input[str]] = None,
                 vci_strings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerVciStringArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 wifi_ac1: Optional[pulumi.Input[str]] = None,
                 wifi_ac2: Optional[pulumi.Input[str]] = None,
                 wifi_ac3: Optional[pulumi.Input[str]] = None,
                 wifi_ac_service: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServerArgs.__new__(ServerArgs)

            __props__.__dict__["auto_configuration"] = auto_configuration
            __props__.__dict__["auto_managed_status"] = auto_managed_status
            __props__.__dict__["conflicted_ip_timeout"] = conflicted_ip_timeout
            __props__.__dict__["ddns_auth"] = ddns_auth
            __props__.__dict__["ddns_key"] = None if ddns_key is None else pulumi.Output.secret(ddns_key)
            __props__.__dict__["ddns_keyname"] = ddns_keyname
            __props__.__dict__["ddns_server_ip"] = ddns_server_ip
            __props__.__dict__["ddns_ttl"] = ddns_ttl
            __props__.__dict__["ddns_update"] = ddns_update
            __props__.__dict__["ddns_update_override"] = ddns_update_override
            __props__.__dict__["ddns_zone"] = ddns_zone
            __props__.__dict__["default_gateway"] = default_gateway
            __props__.__dict__["dhcp_settings_from_fortiipam"] = dhcp_settings_from_fortiipam
            __props__.__dict__["dns_server1"] = dns_server1
            __props__.__dict__["dns_server2"] = dns_server2
            __props__.__dict__["dns_server3"] = dns_server3
            __props__.__dict__["dns_server4"] = dns_server4
            __props__.__dict__["dns_service"] = dns_service
            __props__.__dict__["domain"] = domain
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["exclude_ranges"] = exclude_ranges
            __props__.__dict__["filename"] = filename
            __props__.__dict__["forticlient_on_net_status"] = forticlient_on_net_status
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ip_mode"] = ip_mode
            __props__.__dict__["ip_ranges"] = ip_ranges
            __props__.__dict__["ipsec_lease_hold"] = ipsec_lease_hold
            __props__.__dict__["lease_time"] = lease_time
            __props__.__dict__["mac_acl_default_action"] = mac_acl_default_action
            if netmask is None and not opts.urn:
                raise TypeError("Missing required property 'netmask'")
            __props__.__dict__["netmask"] = netmask
            __props__.__dict__["next_server"] = next_server
            __props__.__dict__["ntp_server1"] = ntp_server1
            __props__.__dict__["ntp_server2"] = ntp_server2
            __props__.__dict__["ntp_server3"] = ntp_server3
            __props__.__dict__["ntp_service"] = ntp_service
            __props__.__dict__["options"] = options
            __props__.__dict__["relay_agent"] = relay_agent
            __props__.__dict__["reserved_addresses"] = reserved_addresses
            __props__.__dict__["server_type"] = server_type
            __props__.__dict__["shared_subnet"] = shared_subnet
            __props__.__dict__["status"] = status
            __props__.__dict__["tftp_servers"] = tftp_servers
            __props__.__dict__["timezone"] = timezone
            __props__.__dict__["timezone_option"] = timezone_option
            __props__.__dict__["vci_match"] = vci_match
            __props__.__dict__["vci_strings"] = vci_strings
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["wifi_ac1"] = wifi_ac1
            __props__.__dict__["wifi_ac2"] = wifi_ac2
            __props__.__dict__["wifi_ac3"] = wifi_ac3
            __props__.__dict__["wifi_ac_service"] = wifi_ac_service
            __props__.__dict__["wins_server1"] = wins_server1
            __props__.__dict__["wins_server2"] = wins_server2
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["ddnsKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Server, __self__).__init__(
            'fortios:system/dhcp/server:Server',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_configuration: Optional[pulumi.Input[str]] = None,
            auto_managed_status: Optional[pulumi.Input[str]] = None,
            conflicted_ip_timeout: Optional[pulumi.Input[int]] = None,
            ddns_auth: Optional[pulumi.Input[str]] = None,
            ddns_key: Optional[pulumi.Input[str]] = None,
            ddns_keyname: Optional[pulumi.Input[str]] = None,
            ddns_server_ip: Optional[pulumi.Input[str]] = None,
            ddns_ttl: Optional[pulumi.Input[int]] = None,
            ddns_update: Optional[pulumi.Input[str]] = None,
            ddns_update_override: Optional[pulumi.Input[str]] = None,
            ddns_zone: Optional[pulumi.Input[str]] = None,
            default_gateway: Optional[pulumi.Input[str]] = None,
            dhcp_settings_from_fortiipam: Optional[pulumi.Input[str]] = None,
            dns_server1: Optional[pulumi.Input[str]] = None,
            dns_server2: Optional[pulumi.Input[str]] = None,
            dns_server3: Optional[pulumi.Input[str]] = None,
            dns_server4: Optional[pulumi.Input[str]] = None,
            dns_service: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerExcludeRangeArgs']]]]] = None,
            filename: Optional[pulumi.Input[str]] = None,
            forticlient_on_net_status: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ip_mode: Optional[pulumi.Input[str]] = None,
            ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerIpRangeArgs']]]]] = None,
            ipsec_lease_hold: Optional[pulumi.Input[int]] = None,
            lease_time: Optional[pulumi.Input[int]] = None,
            mac_acl_default_action: Optional[pulumi.Input[str]] = None,
            netmask: Optional[pulumi.Input[str]] = None,
            next_server: Optional[pulumi.Input[str]] = None,
            ntp_server1: Optional[pulumi.Input[str]] = None,
            ntp_server2: Optional[pulumi.Input[str]] = None,
            ntp_server3: Optional[pulumi.Input[str]] = None,
            ntp_service: Optional[pulumi.Input[str]] = None,
            options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerOptionArgs']]]]] = None,
            relay_agent: Optional[pulumi.Input[str]] = None,
            reserved_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerReservedAddressArgs']]]]] = None,
            server_type: Optional[pulumi.Input[str]] = None,
            shared_subnet: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tftp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerTftpServerArgs']]]]] = None,
            timezone: Optional[pulumi.Input[str]] = None,
            timezone_option: Optional[pulumi.Input[str]] = None,
            vci_match: Optional[pulumi.Input[str]] = None,
            vci_strings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerVciStringArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            wifi_ac1: Optional[pulumi.Input[str]] = None,
            wifi_ac2: Optional[pulumi.Input[str]] = None,
            wifi_ac3: Optional[pulumi.Input[str]] = None,
            wifi_ac_service: Optional[pulumi.Input[str]] = None,
            wins_server1: Optional[pulumi.Input[str]] = None,
            wins_server2: Optional[pulumi.Input[str]] = None) -> 'Server':
        """
        Get an existing Server resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_configuration: Enable/disable auto configuration. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] auto_managed_status: Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] conflicted_ip_timeout: Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
        :param pulumi.Input[str] ddns_auth: DDNS authentication mode. Valid values: `disable`, `tsig`.
        :param pulumi.Input[str] ddns_key: DDNS update key (base 64 encoding).
        :param pulumi.Input[str] ddns_keyname: DDNS update key name.
        :param pulumi.Input[str] ddns_server_ip: DDNS server IP.
        :param pulumi.Input[int] ddns_ttl: TTL.
        :param pulumi.Input[str] ddns_update: Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ddns_update_override: Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ddns_zone: Zone of your domain name (ex. DDNS.com).
        :param pulumi.Input[str] default_gateway: Default gateway IP address assigned by the DHCP server.
        :param pulumi.Input[str] dhcp_settings_from_fortiipam: Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dns_server1: DNS server 1.
        :param pulumi.Input[str] dns_server2: DNS server 2.
        :param pulumi.Input[str] dns_server3: DNS server 3.
        :param pulumi.Input[str] dns_server4: DNS server 4.
        :param pulumi.Input[str] dns_service: Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        :param pulumi.Input[str] domain: Domain name suffix for the IP addresses that the DHCP server assigns to clients.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerExcludeRangeArgs']]]] exclude_ranges: Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `exclude_range` block is documented below.
        :param pulumi.Input[str] filename: Name of the boot file on the TFTP server.
        :param pulumi.Input[str] forticlient_on_net_status: Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] fosid: ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: DHCP server can assign IP configurations to clients connected to this interface.
        :param pulumi.Input[str] ip_mode: Method used to assign client IP. Valid values: `range`, `usrgrp`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerIpRangeArgs']]]] ip_ranges: DHCP IP range configuration. The structure of `ip_range` block is documented below.
        :param pulumi.Input[int] ipsec_lease_hold: DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
        :param pulumi.Input[int] lease_time: Lease time in seconds, 0 means unlimited.
        :param pulumi.Input[str] mac_acl_default_action: MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
        :param pulumi.Input[str] netmask: Netmask assigned by the DHCP server.
        :param pulumi.Input[str] next_server: IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
        :param pulumi.Input[str] ntp_server1: NTP server 1.
        :param pulumi.Input[str] ntp_server2: NTP server 2.
        :param pulumi.Input[str] ntp_server3: NTP server 3.
        :param pulumi.Input[str] ntp_service: Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerOptionArgs']]]] options: DHCP options. The structure of `options` block is documented below.
        :param pulumi.Input[str] relay_agent: Relay agent IP.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerReservedAddressArgs']]]] reserved_addresses: Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reserved_address` block is documented below.
        :param pulumi.Input[str] server_type: DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
        :param pulumi.Input[str] shared_subnet: Enable/disable shared subnet. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerTftpServerArgs']]]] tftp_servers: One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftp_server` block is documented below.
        :param pulumi.Input[str] timezone: Select the time zone to be assigned to DHCP clients.
        :param pulumi.Input[str] timezone_option: Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
        :param pulumi.Input[str] vci_match: Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerVciStringArgs']]]] vci_strings: One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] wifi_ac1: WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
        :param pulumi.Input[str] wifi_ac2: WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
        :param pulumi.Input[str] wifi_ac3: WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
        :param pulumi.Input[str] wifi_ac_service: Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
        :param pulumi.Input[str] wins_server1: WINS server 1.
        :param pulumi.Input[str] wins_server2: WINS server 2.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServerState.__new__(_ServerState)

        __props__.__dict__["auto_configuration"] = auto_configuration
        __props__.__dict__["auto_managed_status"] = auto_managed_status
        __props__.__dict__["conflicted_ip_timeout"] = conflicted_ip_timeout
        __props__.__dict__["ddns_auth"] = ddns_auth
        __props__.__dict__["ddns_key"] = ddns_key
        __props__.__dict__["ddns_keyname"] = ddns_keyname
        __props__.__dict__["ddns_server_ip"] = ddns_server_ip
        __props__.__dict__["ddns_ttl"] = ddns_ttl
        __props__.__dict__["ddns_update"] = ddns_update
        __props__.__dict__["ddns_update_override"] = ddns_update_override
        __props__.__dict__["ddns_zone"] = ddns_zone
        __props__.__dict__["default_gateway"] = default_gateway
        __props__.__dict__["dhcp_settings_from_fortiipam"] = dhcp_settings_from_fortiipam
        __props__.__dict__["dns_server1"] = dns_server1
        __props__.__dict__["dns_server2"] = dns_server2
        __props__.__dict__["dns_server3"] = dns_server3
        __props__.__dict__["dns_server4"] = dns_server4
        __props__.__dict__["dns_service"] = dns_service
        __props__.__dict__["domain"] = domain
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["exclude_ranges"] = exclude_ranges
        __props__.__dict__["filename"] = filename
        __props__.__dict__["forticlient_on_net_status"] = forticlient_on_net_status
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ip_mode"] = ip_mode
        __props__.__dict__["ip_ranges"] = ip_ranges
        __props__.__dict__["ipsec_lease_hold"] = ipsec_lease_hold
        __props__.__dict__["lease_time"] = lease_time
        __props__.__dict__["mac_acl_default_action"] = mac_acl_default_action
        __props__.__dict__["netmask"] = netmask
        __props__.__dict__["next_server"] = next_server
        __props__.__dict__["ntp_server1"] = ntp_server1
        __props__.__dict__["ntp_server2"] = ntp_server2
        __props__.__dict__["ntp_server3"] = ntp_server3
        __props__.__dict__["ntp_service"] = ntp_service
        __props__.__dict__["options"] = options
        __props__.__dict__["relay_agent"] = relay_agent
        __props__.__dict__["reserved_addresses"] = reserved_addresses
        __props__.__dict__["server_type"] = server_type
        __props__.__dict__["shared_subnet"] = shared_subnet
        __props__.__dict__["status"] = status
        __props__.__dict__["tftp_servers"] = tftp_servers
        __props__.__dict__["timezone"] = timezone
        __props__.__dict__["timezone_option"] = timezone_option
        __props__.__dict__["vci_match"] = vci_match
        __props__.__dict__["vci_strings"] = vci_strings
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["wifi_ac1"] = wifi_ac1
        __props__.__dict__["wifi_ac2"] = wifi_ac2
        __props__.__dict__["wifi_ac3"] = wifi_ac3
        __props__.__dict__["wifi_ac_service"] = wifi_ac_service
        __props__.__dict__["wins_server1"] = wins_server1
        __props__.__dict__["wins_server2"] = wins_server2
        return Server(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoConfiguration")
    def auto_configuration(self) -> pulumi.Output[str]:
        """
        Enable/disable auto configuration. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "auto_configuration")

    @property
    @pulumi.getter(name="autoManagedStatus")
    def auto_managed_status(self) -> pulumi.Output[str]:
        """
        Enable/disable use of this DHCP server once this interface has been assigned an IP address from FortiIPAM. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "auto_managed_status")

    @property
    @pulumi.getter(name="conflictedIpTimeout")
    def conflicted_ip_timeout(self) -> pulumi.Output[int]:
        """
        Time in seconds to wait after a conflicted IP address is removed from the DHCP range before it can be reused.
        """
        return pulumi.get(self, "conflicted_ip_timeout")

    @property
    @pulumi.getter(name="ddnsAuth")
    def ddns_auth(self) -> pulumi.Output[str]:
        """
        DDNS authentication mode. Valid values: `disable`, `tsig`.
        """
        return pulumi.get(self, "ddns_auth")

    @property
    @pulumi.getter(name="ddnsKey")
    def ddns_key(self) -> pulumi.Output[str]:
        """
        DDNS update key (base 64 encoding).
        """
        return pulumi.get(self, "ddns_key")

    @property
    @pulumi.getter(name="ddnsKeyname")
    def ddns_keyname(self) -> pulumi.Output[str]:
        """
        DDNS update key name.
        """
        return pulumi.get(self, "ddns_keyname")

    @property
    @pulumi.getter(name="ddnsServerIp")
    def ddns_server_ip(self) -> pulumi.Output[str]:
        """
        DDNS server IP.
        """
        return pulumi.get(self, "ddns_server_ip")

    @property
    @pulumi.getter(name="ddnsTtl")
    def ddns_ttl(self) -> pulumi.Output[int]:
        """
        TTL.
        """
        return pulumi.get(self, "ddns_ttl")

    @property
    @pulumi.getter(name="ddnsUpdate")
    def ddns_update(self) -> pulumi.Output[str]:
        """
        Enable/disable DDNS update for DHCP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ddns_update")

    @property
    @pulumi.getter(name="ddnsUpdateOverride")
    def ddns_update_override(self) -> pulumi.Output[str]:
        """
        Enable/disable DDNS update override for DHCP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ddns_update_override")

    @property
    @pulumi.getter(name="ddnsZone")
    def ddns_zone(self) -> pulumi.Output[str]:
        """
        Zone of your domain name (ex. DDNS.com).
        """
        return pulumi.get(self, "ddns_zone")

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> pulumi.Output[str]:
        """
        Default gateway IP address assigned by the DHCP server.
        """
        return pulumi.get(self, "default_gateway")

    @property
    @pulumi.getter(name="dhcpSettingsFromFortiipam")
    def dhcp_settings_from_fortiipam(self) -> pulumi.Output[str]:
        """
        Enable/disable populating of DHCP server settings from FortiIPAM. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp_settings_from_fortiipam")

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> pulumi.Output[str]:
        """
        DNS server 1.
        """
        return pulumi.get(self, "dns_server1")

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> pulumi.Output[str]:
        """
        DNS server 2.
        """
        return pulumi.get(self, "dns_server2")

    @property
    @pulumi.getter(name="dnsServer3")
    def dns_server3(self) -> pulumi.Output[str]:
        """
        DNS server 3.
        """
        return pulumi.get(self, "dns_server3")

    @property
    @pulumi.getter(name="dnsServer4")
    def dns_server4(self) -> pulumi.Output[str]:
        """
        DNS server 4.
        """
        return pulumi.get(self, "dns_server4")

    @property
    @pulumi.getter(name="dnsService")
    def dns_service(self) -> pulumi.Output[str]:
        """
        Options for assigning DNS servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        """
        return pulumi.get(self, "dns_service")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain name suffix for the IP addresses that the DHCP server assigns to clients.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="excludeRanges")
    def exclude_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.ServerExcludeRange']]]:
        """
        Exclude one or more ranges of IP addresses from being assigned to clients. The structure of `exclude_range` block is documented below.
        """
        return pulumi.get(self, "exclude_ranges")

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Output[str]:
        """
        Name of the boot file on the TFTP server.
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter(name="forticlientOnNetStatus")
    def forticlient_on_net_status(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiClient-On-Net service for this DHCP server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "forticlient_on_net_status")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        ID.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        DHCP server can assign IP configurations to clients connected to this interface.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipMode")
    def ip_mode(self) -> pulumi.Output[str]:
        """
        Method used to assign client IP. Valid values: `range`, `usrgrp`.
        """
        return pulumi.get(self, "ip_mode")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.ServerIpRange']]]:
        """
        DHCP IP range configuration. The structure of `ip_range` block is documented below.
        """
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="ipsecLeaseHold")
    def ipsec_lease_hold(self) -> pulumi.Output[int]:
        """
        DHCP over IPsec leases expire this many seconds after tunnel down (0 to disable forced-expiry).
        """
        return pulumi.get(self, "ipsec_lease_hold")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> pulumi.Output[int]:
        """
        Lease time in seconds, 0 means unlimited.
        """
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter(name="macAclDefaultAction")
    def mac_acl_default_action(self) -> pulumi.Output[str]:
        """
        MAC access control default action (allow or block assigning IP settings). Valid values: `assign`, `block`.
        """
        return pulumi.get(self, "mac_acl_default_action")

    @property
    @pulumi.getter
    def netmask(self) -> pulumi.Output[str]:
        """
        Netmask assigned by the DHCP server.
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter(name="nextServer")
    def next_server(self) -> pulumi.Output[str]:
        """
        IP address of a server (for example, a TFTP sever) that DHCP clients can download a boot file from.
        """
        return pulumi.get(self, "next_server")

    @property
    @pulumi.getter(name="ntpServer1")
    def ntp_server1(self) -> pulumi.Output[str]:
        """
        NTP server 1.
        """
        return pulumi.get(self, "ntp_server1")

    @property
    @pulumi.getter(name="ntpServer2")
    def ntp_server2(self) -> pulumi.Output[str]:
        """
        NTP server 2.
        """
        return pulumi.get(self, "ntp_server2")

    @property
    @pulumi.getter(name="ntpServer3")
    def ntp_server3(self) -> pulumi.Output[str]:
        """
        NTP server 3.
        """
        return pulumi.get(self, "ntp_server3")

    @property
    @pulumi.getter(name="ntpService")
    def ntp_service(self) -> pulumi.Output[str]:
        """
        Options for assigning Network Time Protocol (NTP) servers to DHCP clients. Valid values: `local`, `default`, `specify`.
        """
        return pulumi.get(self, "ntp_service")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[Optional[Sequence['outputs.ServerOption']]]:
        """
        DHCP options. The structure of `options` block is documented below.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="relayAgent")
    def relay_agent(self) -> pulumi.Output[str]:
        """
        Relay agent IP.
        """
        return pulumi.get(self, "relay_agent")

    @property
    @pulumi.getter(name="reservedAddresses")
    def reserved_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.ServerReservedAddress']]]:
        """
        Options for the DHCP server to assign IP settings to specific MAC addresses. The structure of `reserved_address` block is documented below.
        """
        return pulumi.get(self, "reserved_addresses")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Output[str]:
        """
        DHCP server can be a normal DHCP server or an IPsec DHCP server. Valid values: `regular`, `ipsec`.
        """
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter(name="sharedSubnet")
    def shared_subnet(self) -> pulumi.Output[str]:
        """
        Enable/disable shared subnet. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "shared_subnet")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable this DHCP configuration. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tftpServers")
    def tftp_servers(self) -> pulumi.Output[Optional[Sequence['outputs.ServerTftpServer']]]:
        """
        One or more hostnames or IP addresses of the TFTP servers in quotes separated by spaces. The structure of `tftp_server` block is documented below.
        """
        return pulumi.get(self, "tftp_servers")

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[str]:
        """
        Select the time zone to be assigned to DHCP clients.
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="timezoneOption")
    def timezone_option(self) -> pulumi.Output[str]:
        """
        Options for the DHCP server to set the client's time zone. Valid values: `disable`, `default`, `specify`.
        """
        return pulumi.get(self, "timezone_option")

    @property
    @pulumi.getter(name="vciMatch")
    def vci_match(self) -> pulumi.Output[str]:
        """
        Enable/disable vendor class identifier (VCI) matching. When enabled only DHCP requests with a matching VCI are served. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "vci_match")

    @property
    @pulumi.getter(name="vciStrings")
    def vci_strings(self) -> pulumi.Output[Optional[Sequence['outputs.ServerVciString']]]:
        """
        One or more VCI strings in quotes separated by spaces. The structure of `vci_string` block is documented below.
        """
        return pulumi.get(self, "vci_strings")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="wifiAc1")
    def wifi_ac1(self) -> pulumi.Output[str]:
        """
        WiFi Access Controller 1 IP address (DHCP option 138, RFC 5417).
        """
        return pulumi.get(self, "wifi_ac1")

    @property
    @pulumi.getter(name="wifiAc2")
    def wifi_ac2(self) -> pulumi.Output[str]:
        """
        WiFi Access Controller 2 IP address (DHCP option 138, RFC 5417).
        """
        return pulumi.get(self, "wifi_ac2")

    @property
    @pulumi.getter(name="wifiAc3")
    def wifi_ac3(self) -> pulumi.Output[str]:
        """
        WiFi Access Controller 3 IP address (DHCP option 138, RFC 5417).
        """
        return pulumi.get(self, "wifi_ac3")

    @property
    @pulumi.getter(name="wifiAcService")
    def wifi_ac_service(self) -> pulumi.Output[str]:
        """
        Options for assigning WiFi Access Controllers to DHCP clients Valid values: `specify`, `local`.
        """
        return pulumi.get(self, "wifi_ac_service")

    @property
    @pulumi.getter(name="winsServer1")
    def wins_server1(self) -> pulumi.Output[str]:
        """
        WINS server 1.
        """
        return pulumi.get(self, "wins_server1")

    @property
    @pulumi.getter(name="winsServer2")
    def wins_server2(self) -> pulumi.Output[str]:
        """
        WINS server 2.
        """
        return pulumi.get(self, "wins_server2")

