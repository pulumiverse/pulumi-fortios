# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClustersyncArgs', 'Clustersync']

@pulumi.input_type
class ClustersyncArgs:
    def __init__(__self__, *,
                 down_intfs_before_sess_syncs: Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncDownIntfsBeforeSessSyncArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hb_interval: Optional[pulumi.Input[int]] = None,
                 hb_lost_threshold: Optional[pulumi.Input[int]] = None,
                 ike_heartbeat_interval: Optional[pulumi.Input[int]] = None,
                 ike_monitor: Optional[pulumi.Input[str]] = None,
                 ike_monitor_interval: Optional[pulumi.Input[int]] = None,
                 ipsec_tunnel_sync: Optional[pulumi.Input[str]] = None,
                 peerip: Optional[pulumi.Input[str]] = None,
                 peervd: Optional[pulumi.Input[str]] = None,
                 secondary_add_ipsec_routes: Optional[pulumi.Input[str]] = None,
                 session_sync_filter: Optional[pulumi.Input['ClustersyncSessionSyncFilterArgs']] = None,
                 slave_add_ike_routes: Optional[pulumi.Input[str]] = None,
                 sync_id: Optional[pulumi.Input[int]] = None,
                 syncvds: Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncSyncvdArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Clustersync resource.
        :param pulumi.Input[Sequence[pulumi.Input['ClustersyncDownIntfsBeforeSessSyncArgs']]] down_intfs_before_sess_syncs: List of interfaces to be turned down before session synchronization is complete. The structure of `down_intfs_before_sess_sync` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] hb_interval: Heartbeat interval (1 - 10 sec).
        :param pulumi.Input[int] hb_lost_threshold: Lost heartbeat threshold (1 - 10).
        :param pulumi.Input[int] ike_heartbeat_interval: IKE heartbeat interval (1 - 60 secs).
        :param pulumi.Input[str] ike_monitor: Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ike_monitor_interval: IKE HA monitor interval (10 - 300 secs).
        :param pulumi.Input[str] ipsec_tunnel_sync: Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] peerip: IP address of the interface on the peer unit that is used for the session synchronization link.
        :param pulumi.Input[str] peervd: VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
        :param pulumi.Input[str] secondary_add_ipsec_routes: Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        :param pulumi.Input['ClustersyncSessionSyncFilterArgs'] session_sync_filter: Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `session_sync_filter` block is documented below.
        :param pulumi.Input[str] slave_add_ike_routes: Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] sync_id: Sync ID.
        :param pulumi.Input[Sequence[pulumi.Input['ClustersyncSyncvdArgs']]] syncvds: Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if down_intfs_before_sess_syncs is not None:
            pulumi.set(__self__, "down_intfs_before_sess_syncs", down_intfs_before_sess_syncs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hb_interval is not None:
            pulumi.set(__self__, "hb_interval", hb_interval)
        if hb_lost_threshold is not None:
            pulumi.set(__self__, "hb_lost_threshold", hb_lost_threshold)
        if ike_heartbeat_interval is not None:
            pulumi.set(__self__, "ike_heartbeat_interval", ike_heartbeat_interval)
        if ike_monitor is not None:
            pulumi.set(__self__, "ike_monitor", ike_monitor)
        if ike_monitor_interval is not None:
            pulumi.set(__self__, "ike_monitor_interval", ike_monitor_interval)
        if ipsec_tunnel_sync is not None:
            pulumi.set(__self__, "ipsec_tunnel_sync", ipsec_tunnel_sync)
        if peerip is not None:
            pulumi.set(__self__, "peerip", peerip)
        if peervd is not None:
            pulumi.set(__self__, "peervd", peervd)
        if secondary_add_ipsec_routes is not None:
            pulumi.set(__self__, "secondary_add_ipsec_routes", secondary_add_ipsec_routes)
        if session_sync_filter is not None:
            pulumi.set(__self__, "session_sync_filter", session_sync_filter)
        if slave_add_ike_routes is not None:
            pulumi.set(__self__, "slave_add_ike_routes", slave_add_ike_routes)
        if sync_id is not None:
            pulumi.set(__self__, "sync_id", sync_id)
        if syncvds is not None:
            pulumi.set(__self__, "syncvds", syncvds)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="downIntfsBeforeSessSyncs")
    def down_intfs_before_sess_syncs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncDownIntfsBeforeSessSyncArgs']]]]:
        """
        List of interfaces to be turned down before session synchronization is complete. The structure of `down_intfs_before_sess_sync` block is documented below.
        """
        return pulumi.get(self, "down_intfs_before_sess_syncs")

    @down_intfs_before_sess_syncs.setter
    def down_intfs_before_sess_syncs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncDownIntfsBeforeSessSyncArgs']]]]):
        pulumi.set(self, "down_intfs_before_sess_syncs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="hbInterval")
    def hb_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Heartbeat interval (1 - 10 sec).
        """
        return pulumi.get(self, "hb_interval")

    @hb_interval.setter
    def hb_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hb_interval", value)

    @property
    @pulumi.getter(name="hbLostThreshold")
    def hb_lost_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Lost heartbeat threshold (1 - 10).
        """
        return pulumi.get(self, "hb_lost_threshold")

    @hb_lost_threshold.setter
    def hb_lost_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hb_lost_threshold", value)

    @property
    @pulumi.getter(name="ikeHeartbeatInterval")
    def ike_heartbeat_interval(self) -> Optional[pulumi.Input[int]]:
        """
        IKE heartbeat interval (1 - 60 secs).
        """
        return pulumi.get(self, "ike_heartbeat_interval")

    @ike_heartbeat_interval.setter
    def ike_heartbeat_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_heartbeat_interval", value)

    @property
    @pulumi.getter(name="ikeMonitor")
    def ike_monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ike_monitor")

    @ike_monitor.setter
    def ike_monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_monitor", value)

    @property
    @pulumi.getter(name="ikeMonitorInterval")
    def ike_monitor_interval(self) -> Optional[pulumi.Input[int]]:
        """
        IKE HA monitor interval (10 - 300 secs).
        """
        return pulumi.get(self, "ike_monitor_interval")

    @ike_monitor_interval.setter
    def ike_monitor_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_monitor_interval", value)

    @property
    @pulumi.getter(name="ipsecTunnelSync")
    def ipsec_tunnel_sync(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipsec_tunnel_sync")

    @ipsec_tunnel_sync.setter
    def ipsec_tunnel_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_tunnel_sync", value)

    @property
    @pulumi.getter
    def peerip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the interface on the peer unit that is used for the session synchronization link.
        """
        return pulumi.get(self, "peerip")

    @peerip.setter
    def peerip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peerip", value)

    @property
    @pulumi.getter
    def peervd(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
        """
        return pulumi.get(self, "peervd")

    @peervd.setter
    def peervd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peervd", value)

    @property
    @pulumi.getter(name="secondaryAddIpsecRoutes")
    def secondary_add_ipsec_routes(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "secondary_add_ipsec_routes")

    @secondary_add_ipsec_routes.setter
    def secondary_add_ipsec_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_add_ipsec_routes", value)

    @property
    @pulumi.getter(name="sessionSyncFilter")
    def session_sync_filter(self) -> Optional[pulumi.Input['ClustersyncSessionSyncFilterArgs']]:
        """
        Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `session_sync_filter` block is documented below.
        """
        return pulumi.get(self, "session_sync_filter")

    @session_sync_filter.setter
    def session_sync_filter(self, value: Optional[pulumi.Input['ClustersyncSessionSyncFilterArgs']]):
        pulumi.set(self, "session_sync_filter", value)

    @property
    @pulumi.getter(name="slaveAddIkeRoutes")
    def slave_add_ike_routes(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "slave_add_ike_routes")

    @slave_add_ike_routes.setter
    def slave_add_ike_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slave_add_ike_routes", value)

    @property
    @pulumi.getter(name="syncId")
    def sync_id(self) -> Optional[pulumi.Input[int]]:
        """
        Sync ID.
        """
        return pulumi.get(self, "sync_id")

    @sync_id.setter
    def sync_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sync_id", value)

    @property
    @pulumi.getter
    def syncvds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncSyncvdArgs']]]]:
        """
        Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
        """
        return pulumi.get(self, "syncvds")

    @syncvds.setter
    def syncvds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncSyncvdArgs']]]]):
        pulumi.set(self, "syncvds", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ClustersyncState:
    def __init__(__self__, *,
                 down_intfs_before_sess_syncs: Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncDownIntfsBeforeSessSyncArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hb_interval: Optional[pulumi.Input[int]] = None,
                 hb_lost_threshold: Optional[pulumi.Input[int]] = None,
                 ike_heartbeat_interval: Optional[pulumi.Input[int]] = None,
                 ike_monitor: Optional[pulumi.Input[str]] = None,
                 ike_monitor_interval: Optional[pulumi.Input[int]] = None,
                 ipsec_tunnel_sync: Optional[pulumi.Input[str]] = None,
                 peerip: Optional[pulumi.Input[str]] = None,
                 peervd: Optional[pulumi.Input[str]] = None,
                 secondary_add_ipsec_routes: Optional[pulumi.Input[str]] = None,
                 session_sync_filter: Optional[pulumi.Input['ClustersyncSessionSyncFilterArgs']] = None,
                 slave_add_ike_routes: Optional[pulumi.Input[str]] = None,
                 sync_id: Optional[pulumi.Input[int]] = None,
                 syncvds: Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncSyncvdArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Clustersync resources.
        :param pulumi.Input[Sequence[pulumi.Input['ClustersyncDownIntfsBeforeSessSyncArgs']]] down_intfs_before_sess_syncs: List of interfaces to be turned down before session synchronization is complete. The structure of `down_intfs_before_sess_sync` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] hb_interval: Heartbeat interval (1 - 10 sec).
        :param pulumi.Input[int] hb_lost_threshold: Lost heartbeat threshold (1 - 10).
        :param pulumi.Input[int] ike_heartbeat_interval: IKE heartbeat interval (1 - 60 secs).
        :param pulumi.Input[str] ike_monitor: Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ike_monitor_interval: IKE HA monitor interval (10 - 300 secs).
        :param pulumi.Input[str] ipsec_tunnel_sync: Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] peerip: IP address of the interface on the peer unit that is used for the session synchronization link.
        :param pulumi.Input[str] peervd: VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
        :param pulumi.Input[str] secondary_add_ipsec_routes: Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        :param pulumi.Input['ClustersyncSessionSyncFilterArgs'] session_sync_filter: Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `session_sync_filter` block is documented below.
        :param pulumi.Input[str] slave_add_ike_routes: Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] sync_id: Sync ID.
        :param pulumi.Input[Sequence[pulumi.Input['ClustersyncSyncvdArgs']]] syncvds: Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if down_intfs_before_sess_syncs is not None:
            pulumi.set(__self__, "down_intfs_before_sess_syncs", down_intfs_before_sess_syncs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hb_interval is not None:
            pulumi.set(__self__, "hb_interval", hb_interval)
        if hb_lost_threshold is not None:
            pulumi.set(__self__, "hb_lost_threshold", hb_lost_threshold)
        if ike_heartbeat_interval is not None:
            pulumi.set(__self__, "ike_heartbeat_interval", ike_heartbeat_interval)
        if ike_monitor is not None:
            pulumi.set(__self__, "ike_monitor", ike_monitor)
        if ike_monitor_interval is not None:
            pulumi.set(__self__, "ike_monitor_interval", ike_monitor_interval)
        if ipsec_tunnel_sync is not None:
            pulumi.set(__self__, "ipsec_tunnel_sync", ipsec_tunnel_sync)
        if peerip is not None:
            pulumi.set(__self__, "peerip", peerip)
        if peervd is not None:
            pulumi.set(__self__, "peervd", peervd)
        if secondary_add_ipsec_routes is not None:
            pulumi.set(__self__, "secondary_add_ipsec_routes", secondary_add_ipsec_routes)
        if session_sync_filter is not None:
            pulumi.set(__self__, "session_sync_filter", session_sync_filter)
        if slave_add_ike_routes is not None:
            pulumi.set(__self__, "slave_add_ike_routes", slave_add_ike_routes)
        if sync_id is not None:
            pulumi.set(__self__, "sync_id", sync_id)
        if syncvds is not None:
            pulumi.set(__self__, "syncvds", syncvds)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="downIntfsBeforeSessSyncs")
    def down_intfs_before_sess_syncs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncDownIntfsBeforeSessSyncArgs']]]]:
        """
        List of interfaces to be turned down before session synchronization is complete. The structure of `down_intfs_before_sess_sync` block is documented below.
        """
        return pulumi.get(self, "down_intfs_before_sess_syncs")

    @down_intfs_before_sess_syncs.setter
    def down_intfs_before_sess_syncs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncDownIntfsBeforeSessSyncArgs']]]]):
        pulumi.set(self, "down_intfs_before_sess_syncs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="hbInterval")
    def hb_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Heartbeat interval (1 - 10 sec).
        """
        return pulumi.get(self, "hb_interval")

    @hb_interval.setter
    def hb_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hb_interval", value)

    @property
    @pulumi.getter(name="hbLostThreshold")
    def hb_lost_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Lost heartbeat threshold (1 - 10).
        """
        return pulumi.get(self, "hb_lost_threshold")

    @hb_lost_threshold.setter
    def hb_lost_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hb_lost_threshold", value)

    @property
    @pulumi.getter(name="ikeHeartbeatInterval")
    def ike_heartbeat_interval(self) -> Optional[pulumi.Input[int]]:
        """
        IKE heartbeat interval (1 - 60 secs).
        """
        return pulumi.get(self, "ike_heartbeat_interval")

    @ike_heartbeat_interval.setter
    def ike_heartbeat_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_heartbeat_interval", value)

    @property
    @pulumi.getter(name="ikeMonitor")
    def ike_monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ike_monitor")

    @ike_monitor.setter
    def ike_monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_monitor", value)

    @property
    @pulumi.getter(name="ikeMonitorInterval")
    def ike_monitor_interval(self) -> Optional[pulumi.Input[int]]:
        """
        IKE HA monitor interval (10 - 300 secs).
        """
        return pulumi.get(self, "ike_monitor_interval")

    @ike_monitor_interval.setter
    def ike_monitor_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_monitor_interval", value)

    @property
    @pulumi.getter(name="ipsecTunnelSync")
    def ipsec_tunnel_sync(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipsec_tunnel_sync")

    @ipsec_tunnel_sync.setter
    def ipsec_tunnel_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_tunnel_sync", value)

    @property
    @pulumi.getter
    def peerip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the interface on the peer unit that is used for the session synchronization link.
        """
        return pulumi.get(self, "peerip")

    @peerip.setter
    def peerip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peerip", value)

    @property
    @pulumi.getter
    def peervd(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
        """
        return pulumi.get(self, "peervd")

    @peervd.setter
    def peervd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peervd", value)

    @property
    @pulumi.getter(name="secondaryAddIpsecRoutes")
    def secondary_add_ipsec_routes(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "secondary_add_ipsec_routes")

    @secondary_add_ipsec_routes.setter
    def secondary_add_ipsec_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_add_ipsec_routes", value)

    @property
    @pulumi.getter(name="sessionSyncFilter")
    def session_sync_filter(self) -> Optional[pulumi.Input['ClustersyncSessionSyncFilterArgs']]:
        """
        Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `session_sync_filter` block is documented below.
        """
        return pulumi.get(self, "session_sync_filter")

    @session_sync_filter.setter
    def session_sync_filter(self, value: Optional[pulumi.Input['ClustersyncSessionSyncFilterArgs']]):
        pulumi.set(self, "session_sync_filter", value)

    @property
    @pulumi.getter(name="slaveAddIkeRoutes")
    def slave_add_ike_routes(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "slave_add_ike_routes")

    @slave_add_ike_routes.setter
    def slave_add_ike_routes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slave_add_ike_routes", value)

    @property
    @pulumi.getter(name="syncId")
    def sync_id(self) -> Optional[pulumi.Input[int]]:
        """
        Sync ID.
        """
        return pulumi.get(self, "sync_id")

    @sync_id.setter
    def sync_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sync_id", value)

    @property
    @pulumi.getter
    def syncvds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncSyncvdArgs']]]]:
        """
        Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
        """
        return pulumi.get(self, "syncvds")

    @syncvds.setter
    def syncvds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClustersyncSyncvdArgs']]]]):
        pulumi.set(self, "syncvds", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Clustersync(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 down_intfs_before_sess_syncs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClustersyncDownIntfsBeforeSessSyncArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hb_interval: Optional[pulumi.Input[int]] = None,
                 hb_lost_threshold: Optional[pulumi.Input[int]] = None,
                 ike_heartbeat_interval: Optional[pulumi.Input[int]] = None,
                 ike_monitor: Optional[pulumi.Input[str]] = None,
                 ike_monitor_interval: Optional[pulumi.Input[int]] = None,
                 ipsec_tunnel_sync: Optional[pulumi.Input[str]] = None,
                 peerip: Optional[pulumi.Input[str]] = None,
                 peervd: Optional[pulumi.Input[str]] = None,
                 secondary_add_ipsec_routes: Optional[pulumi.Input[str]] = None,
                 session_sync_filter: Optional[pulumi.Input[pulumi.InputType['ClustersyncSessionSyncFilterArgs']]] = None,
                 slave_add_ike_routes: Optional[pulumi.Input[str]] = None,
                 sync_id: Optional[pulumi.Input[int]] = None,
                 syncvds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClustersyncSyncvdArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure FortiGate Session Life Support Protocol (FGSP) session synchronization. Applies to FortiOS Version `<= 7.2.0`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Clustersync("trname",
            hb_interval=3,
            hb_lost_threshold=3,
            peerip="1.1.1.1",
            peervd="root",
            slave_add_ike_routes="enable",
            sync_id=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System ClusterSync can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/clustersync:Clustersync labelname {{sync_id}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/clustersync:Clustersync labelname {{sync_id}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClustersyncDownIntfsBeforeSessSyncArgs']]]] down_intfs_before_sess_syncs: List of interfaces to be turned down before session synchronization is complete. The structure of `down_intfs_before_sess_sync` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] hb_interval: Heartbeat interval (1 - 10 sec).
        :param pulumi.Input[int] hb_lost_threshold: Lost heartbeat threshold (1 - 10).
        :param pulumi.Input[int] ike_heartbeat_interval: IKE heartbeat interval (1 - 60 secs).
        :param pulumi.Input[str] ike_monitor: Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ike_monitor_interval: IKE HA monitor interval (10 - 300 secs).
        :param pulumi.Input[str] ipsec_tunnel_sync: Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] peerip: IP address of the interface on the peer unit that is used for the session synchronization link.
        :param pulumi.Input[str] peervd: VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
        :param pulumi.Input[str] secondary_add_ipsec_routes: Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        :param pulumi.Input[pulumi.InputType['ClustersyncSessionSyncFilterArgs']] session_sync_filter: Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `session_sync_filter` block is documented below.
        :param pulumi.Input[str] slave_add_ike_routes: Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] sync_id: Sync ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClustersyncSyncvdArgs']]]] syncvds: Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ClustersyncArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure FortiGate Session Life Support Protocol (FGSP) session synchronization. Applies to FortiOS Version `<= 7.2.0`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Clustersync("trname",
            hb_interval=3,
            hb_lost_threshold=3,
            peerip="1.1.1.1",
            peervd="root",
            slave_add_ike_routes="enable",
            sync_id=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System ClusterSync can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/clustersync:Clustersync labelname {{sync_id}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/clustersync:Clustersync labelname {{sync_id}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ClustersyncArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClustersyncArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 down_intfs_before_sess_syncs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClustersyncDownIntfsBeforeSessSyncArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hb_interval: Optional[pulumi.Input[int]] = None,
                 hb_lost_threshold: Optional[pulumi.Input[int]] = None,
                 ike_heartbeat_interval: Optional[pulumi.Input[int]] = None,
                 ike_monitor: Optional[pulumi.Input[str]] = None,
                 ike_monitor_interval: Optional[pulumi.Input[int]] = None,
                 ipsec_tunnel_sync: Optional[pulumi.Input[str]] = None,
                 peerip: Optional[pulumi.Input[str]] = None,
                 peervd: Optional[pulumi.Input[str]] = None,
                 secondary_add_ipsec_routes: Optional[pulumi.Input[str]] = None,
                 session_sync_filter: Optional[pulumi.Input[pulumi.InputType['ClustersyncSessionSyncFilterArgs']]] = None,
                 slave_add_ike_routes: Optional[pulumi.Input[str]] = None,
                 sync_id: Optional[pulumi.Input[int]] = None,
                 syncvds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClustersyncSyncvdArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClustersyncArgs.__new__(ClustersyncArgs)

            __props__.__dict__["down_intfs_before_sess_syncs"] = down_intfs_before_sess_syncs
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["hb_interval"] = hb_interval
            __props__.__dict__["hb_lost_threshold"] = hb_lost_threshold
            __props__.__dict__["ike_heartbeat_interval"] = ike_heartbeat_interval
            __props__.__dict__["ike_monitor"] = ike_monitor
            __props__.__dict__["ike_monitor_interval"] = ike_monitor_interval
            __props__.__dict__["ipsec_tunnel_sync"] = ipsec_tunnel_sync
            __props__.__dict__["peerip"] = peerip
            __props__.__dict__["peervd"] = peervd
            __props__.__dict__["secondary_add_ipsec_routes"] = secondary_add_ipsec_routes
            __props__.__dict__["session_sync_filter"] = session_sync_filter
            __props__.__dict__["slave_add_ike_routes"] = slave_add_ike_routes
            __props__.__dict__["sync_id"] = sync_id
            __props__.__dict__["syncvds"] = syncvds
            __props__.__dict__["vdomparam"] = vdomparam
        super(Clustersync, __self__).__init__(
            'fortios:system/clustersync:Clustersync',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            down_intfs_before_sess_syncs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClustersyncDownIntfsBeforeSessSyncArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            hb_interval: Optional[pulumi.Input[int]] = None,
            hb_lost_threshold: Optional[pulumi.Input[int]] = None,
            ike_heartbeat_interval: Optional[pulumi.Input[int]] = None,
            ike_monitor: Optional[pulumi.Input[str]] = None,
            ike_monitor_interval: Optional[pulumi.Input[int]] = None,
            ipsec_tunnel_sync: Optional[pulumi.Input[str]] = None,
            peerip: Optional[pulumi.Input[str]] = None,
            peervd: Optional[pulumi.Input[str]] = None,
            secondary_add_ipsec_routes: Optional[pulumi.Input[str]] = None,
            session_sync_filter: Optional[pulumi.Input[pulumi.InputType['ClustersyncSessionSyncFilterArgs']]] = None,
            slave_add_ike_routes: Optional[pulumi.Input[str]] = None,
            sync_id: Optional[pulumi.Input[int]] = None,
            syncvds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClustersyncSyncvdArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Clustersync':
        """
        Get an existing Clustersync resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClustersyncDownIntfsBeforeSessSyncArgs']]]] down_intfs_before_sess_syncs: List of interfaces to be turned down before session synchronization is complete. The structure of `down_intfs_before_sess_sync` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] hb_interval: Heartbeat interval (1 - 10 sec).
        :param pulumi.Input[int] hb_lost_threshold: Lost heartbeat threshold (1 - 10).
        :param pulumi.Input[int] ike_heartbeat_interval: IKE heartbeat interval (1 - 60 secs).
        :param pulumi.Input[str] ike_monitor: Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ike_monitor_interval: IKE HA monitor interval (10 - 300 secs).
        :param pulumi.Input[str] ipsec_tunnel_sync: Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] peerip: IP address of the interface on the peer unit that is used for the session synchronization link.
        :param pulumi.Input[str] peervd: VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
        :param pulumi.Input[str] secondary_add_ipsec_routes: Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        :param pulumi.Input[pulumi.InputType['ClustersyncSessionSyncFilterArgs']] session_sync_filter: Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `session_sync_filter` block is documented below.
        :param pulumi.Input[str] slave_add_ike_routes: Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] sync_id: Sync ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClustersyncSyncvdArgs']]]] syncvds: Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClustersyncState.__new__(_ClustersyncState)

        __props__.__dict__["down_intfs_before_sess_syncs"] = down_intfs_before_sess_syncs
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["hb_interval"] = hb_interval
        __props__.__dict__["hb_lost_threshold"] = hb_lost_threshold
        __props__.__dict__["ike_heartbeat_interval"] = ike_heartbeat_interval
        __props__.__dict__["ike_monitor"] = ike_monitor
        __props__.__dict__["ike_monitor_interval"] = ike_monitor_interval
        __props__.__dict__["ipsec_tunnel_sync"] = ipsec_tunnel_sync
        __props__.__dict__["peerip"] = peerip
        __props__.__dict__["peervd"] = peervd
        __props__.__dict__["secondary_add_ipsec_routes"] = secondary_add_ipsec_routes
        __props__.__dict__["session_sync_filter"] = session_sync_filter
        __props__.__dict__["slave_add_ike_routes"] = slave_add_ike_routes
        __props__.__dict__["sync_id"] = sync_id
        __props__.__dict__["syncvds"] = syncvds
        __props__.__dict__["vdomparam"] = vdomparam
        return Clustersync(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="downIntfsBeforeSessSyncs")
    def down_intfs_before_sess_syncs(self) -> pulumi.Output[Optional[Sequence['outputs.ClustersyncDownIntfsBeforeSessSync']]]:
        """
        List of interfaces to be turned down before session synchronization is complete. The structure of `down_intfs_before_sess_sync` block is documented below.
        """
        return pulumi.get(self, "down_intfs_before_sess_syncs")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="hbInterval")
    def hb_interval(self) -> pulumi.Output[int]:
        """
        Heartbeat interval (1 - 10 sec).
        """
        return pulumi.get(self, "hb_interval")

    @property
    @pulumi.getter(name="hbLostThreshold")
    def hb_lost_threshold(self) -> pulumi.Output[int]:
        """
        Lost heartbeat threshold (1 - 10).
        """
        return pulumi.get(self, "hb_lost_threshold")

    @property
    @pulumi.getter(name="ikeHeartbeatInterval")
    def ike_heartbeat_interval(self) -> pulumi.Output[int]:
        """
        IKE heartbeat interval (1 - 60 secs).
        """
        return pulumi.get(self, "ike_heartbeat_interval")

    @property
    @pulumi.getter(name="ikeMonitor")
    def ike_monitor(self) -> pulumi.Output[str]:
        """
        Enable/disable IKE HA monitor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ike_monitor")

    @property
    @pulumi.getter(name="ikeMonitorInterval")
    def ike_monitor_interval(self) -> pulumi.Output[int]:
        """
        IKE HA monitor interval (10 - 300 secs).
        """
        return pulumi.get(self, "ike_monitor_interval")

    @property
    @pulumi.getter(name="ipsecTunnelSync")
    def ipsec_tunnel_sync(self) -> pulumi.Output[str]:
        """
        Enable/disable IPsec tunnel synchronization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipsec_tunnel_sync")

    @property
    @pulumi.getter
    def peerip(self) -> pulumi.Output[str]:
        """
        IP address of the interface on the peer unit that is used for the session synchronization link.
        """
        return pulumi.get(self, "peerip")

    @property
    @pulumi.getter
    def peervd(self) -> pulumi.Output[str]:
        """
        VDOM that contains the session synchronization link interface on the peer unit. Usually both peers would have the same peervd.
        """
        return pulumi.get(self, "peervd")

    @property
    @pulumi.getter(name="secondaryAddIpsecRoutes")
    def secondary_add_ipsec_routes(self) -> pulumi.Output[str]:
        """
        Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "secondary_add_ipsec_routes")

    @property
    @pulumi.getter(name="sessionSyncFilter")
    def session_sync_filter(self) -> pulumi.Output['outputs.ClustersyncSessionSyncFilter']:
        """
        Add one or more filters if you only want to synchronize some sessions. Use the filter to configure the types of sessions to synchronize. The structure of `session_sync_filter` block is documented below.
        """
        return pulumi.get(self, "session_sync_filter")

    @property
    @pulumi.getter(name="slaveAddIkeRoutes")
    def slave_add_ike_routes(self) -> pulumi.Output[str]:
        """
        Enable/disable IKE route announcement on the backup unit. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "slave_add_ike_routes")

    @property
    @pulumi.getter(name="syncId")
    def sync_id(self) -> pulumi.Output[int]:
        """
        Sync ID.
        """
        return pulumi.get(self, "sync_id")

    @property
    @pulumi.getter
    def syncvds(self) -> pulumi.Output[Optional[Sequence['outputs.ClustersyncSyncvd']]]:
        """
        Sessions from these VDOMs are synchronized using this session synchronization configuration. The structure of `syncvd` block is documented below.
        """
        return pulumi.get(self, "syncvds")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

