# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['FtmpushArgs', 'Ftmpush']

@pulumi.input_type
class FtmpushArgs:
    def __init__(__self__, *,
                 proxy: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_cert: Optional[pulumi.Input[str]] = None,
                 server_ip: Optional[pulumi.Input[str]] = None,
                 server_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ftmpush resource.
        :param pulumi.Input[str] proxy: Enable/disable communication to the proxy server in FortiGuard configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server: IPv4 address or domain name of FortiToken Mobile push services server.
        :param pulumi.Input[str] server_cert: Name of the server certificate to be used for SSL (default = Fortinet_Factory).
        :param pulumi.Input[str] server_ip: IPv4 address of FortiToken Mobile push services server (format: xxx.xxx.xxx.xxx).
        :param pulumi.Input[int] server_port: Port to communicate with FortiToken Mobile push services server (1 - 65535, default = 4433).
        :param pulumi.Input[str] status: Enable/disable the use of FortiToken Mobile push services. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if server_cert is not None:
            pulumi.set(__self__, "server_cert", server_cert)
        if server_ip is not None:
            pulumi.set(__self__, "server_ip", server_ip)
        if server_port is not None:
            pulumi.set(__self__, "server_port", server_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable communication to the proxy server in FortiGuard configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address or domain name of FortiToken Mobile push services server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="serverCert")
    def server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the server certificate to be used for SSL (default = Fortinet_Factory).
        """
        return pulumi.get(self, "server_cert")

    @server_cert.setter
    def server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_cert", value)

    @property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of FortiToken Mobile push services server (format: xxx.xxx.xxx.xxx).
        """
        return pulumi.get(self, "server_ip")

    @server_ip.setter
    def server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_ip", value)

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port to communicate with FortiToken Mobile push services server (1 - 65535, default = 4433).
        """
        return pulumi.get(self, "server_port")

    @server_port.setter
    def server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "server_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the use of FortiToken Mobile push services. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _FtmpushState:
    def __init__(__self__, *,
                 proxy: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_cert: Optional[pulumi.Input[str]] = None,
                 server_ip: Optional[pulumi.Input[str]] = None,
                 server_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ftmpush resources.
        :param pulumi.Input[str] proxy: Enable/disable communication to the proxy server in FortiGuard configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server: IPv4 address or domain name of FortiToken Mobile push services server.
        :param pulumi.Input[str] server_cert: Name of the server certificate to be used for SSL (default = Fortinet_Factory).
        :param pulumi.Input[str] server_ip: IPv4 address of FortiToken Mobile push services server (format: xxx.xxx.xxx.xxx).
        :param pulumi.Input[int] server_port: Port to communicate with FortiToken Mobile push services server (1 - 65535, default = 4433).
        :param pulumi.Input[str] status: Enable/disable the use of FortiToken Mobile push services. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if server_cert is not None:
            pulumi.set(__self__, "server_cert", server_cert)
        if server_ip is not None:
            pulumi.set(__self__, "server_ip", server_ip)
        if server_port is not None:
            pulumi.set(__self__, "server_port", server_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable communication to the proxy server in FortiGuard configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address or domain name of FortiToken Mobile push services server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="serverCert")
    def server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the server certificate to be used for SSL (default = Fortinet_Factory).
        """
        return pulumi.get(self, "server_cert")

    @server_cert.setter
    def server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_cert", value)

    @property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of FortiToken Mobile push services server (format: xxx.xxx.xxx.xxx).
        """
        return pulumi.get(self, "server_ip")

    @server_ip.setter
    def server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_ip", value)

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port to communicate with FortiToken Mobile push services server (1 - 65535, default = 4433).
        """
        return pulumi.get(self, "server_port")

    @server_port.setter
    def server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "server_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the use of FortiToken Mobile push services. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Ftmpush(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_cert: Optional[pulumi.Input[str]] = None,
                 server_ip: Optional[pulumi.Input[str]] = None,
                 server_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure FortiToken Mobile push services.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Ftmpush("trname",
            server_ip="0.0.0.0",
            server_port=4433,
            status="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System FtmPush can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/ftmpush:Ftmpush labelname SystemFtmPush
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/ftmpush:Ftmpush labelname SystemFtmPush
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] proxy: Enable/disable communication to the proxy server in FortiGuard configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server: IPv4 address or domain name of FortiToken Mobile push services server.
        :param pulumi.Input[str] server_cert: Name of the server certificate to be used for SSL (default = Fortinet_Factory).
        :param pulumi.Input[str] server_ip: IPv4 address of FortiToken Mobile push services server (format: xxx.xxx.xxx.xxx).
        :param pulumi.Input[int] server_port: Port to communicate with FortiToken Mobile push services server (1 - 65535, default = 4433).
        :param pulumi.Input[str] status: Enable/disable the use of FortiToken Mobile push services. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FtmpushArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure FortiToken Mobile push services.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Ftmpush("trname",
            server_ip="0.0.0.0",
            server_port=4433,
            status="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System FtmPush can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/ftmpush:Ftmpush labelname SystemFtmPush
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/ftmpush:Ftmpush labelname SystemFtmPush
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param FtmpushArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FtmpushArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server_cert: Optional[pulumi.Input[str]] = None,
                 server_ip: Optional[pulumi.Input[str]] = None,
                 server_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FtmpushArgs.__new__(FtmpushArgs)

            __props__.__dict__["proxy"] = proxy
            __props__.__dict__["server"] = server
            __props__.__dict__["server_cert"] = server_cert
            __props__.__dict__["server_ip"] = server_ip
            __props__.__dict__["server_port"] = server_port
            __props__.__dict__["status"] = status
            __props__.__dict__["vdomparam"] = vdomparam
        super(Ftmpush, __self__).__init__(
            'fortios:system/ftmpush:Ftmpush',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            proxy: Optional[pulumi.Input[str]] = None,
            server: Optional[pulumi.Input[str]] = None,
            server_cert: Optional[pulumi.Input[str]] = None,
            server_ip: Optional[pulumi.Input[str]] = None,
            server_port: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Ftmpush':
        """
        Get an existing Ftmpush resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] proxy: Enable/disable communication to the proxy server in FortiGuard configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server: IPv4 address or domain name of FortiToken Mobile push services server.
        :param pulumi.Input[str] server_cert: Name of the server certificate to be used for SSL (default = Fortinet_Factory).
        :param pulumi.Input[str] server_ip: IPv4 address of FortiToken Mobile push services server (format: xxx.xxx.xxx.xxx).
        :param pulumi.Input[int] server_port: Port to communicate with FortiToken Mobile push services server (1 - 65535, default = 4433).
        :param pulumi.Input[str] status: Enable/disable the use of FortiToken Mobile push services. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FtmpushState.__new__(_FtmpushState)

        __props__.__dict__["proxy"] = proxy
        __props__.__dict__["server"] = server
        __props__.__dict__["server_cert"] = server_cert
        __props__.__dict__["server_ip"] = server_ip
        __props__.__dict__["server_port"] = server_port
        __props__.__dict__["status"] = status
        __props__.__dict__["vdomparam"] = vdomparam
        return Ftmpush(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Output[str]:
        """
        Enable/disable communication to the proxy server in FortiGuard configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        IPv4 address or domain name of FortiToken Mobile push services server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="serverCert")
    def server_cert(self) -> pulumi.Output[str]:
        """
        Name of the server certificate to be used for SSL (default = Fortinet_Factory).
        """
        return pulumi.get(self, "server_cert")

    @property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> pulumi.Output[str]:
        """
        IPv4 address of FortiToken Mobile push services server (format: xxx.xxx.xxx.xxx).
        """
        return pulumi.get(self, "server_ip")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> pulumi.Output[int]:
        """
        Port to communicate with FortiToken Mobile push services server (1 - 65535, default = 4433).
        """
        return pulumi.get(self, "server_port")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable the use of FortiToken Mobile push services. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

