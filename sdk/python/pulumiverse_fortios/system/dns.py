# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DnsArgs', 'Dns']

@pulumi.input_type
class DnsArgs:
    def __init__(__self__, *,
                 primary: pulumi.Input[str],
                 alt_primary: Optional[pulumi.Input[str]] = None,
                 alt_secondary: Optional[pulumi.Input[str]] = None,
                 cache_notfound_responses: Optional[pulumi.Input[str]] = None,
                 dns_cache_limit: Optional[pulumi.Input[int]] = None,
                 dns_cache_ttl: Optional[pulumi.Input[int]] = None,
                 dns_over_tls: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input['DnsDomainArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fqdn_cache_ttl: Optional[pulumi.Input[int]] = None,
                 fqdn_max_refresh: Optional[pulumi.Input[int]] = None,
                 fqdn_min_refresh: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6_primary: Optional[pulumi.Input[str]] = None,
                 ip6_secondary: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 retry: Optional[pulumi.Input[int]] = None,
                 secondary: Optional[pulumi.Input[str]] = None,
                 server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input['DnsServerHostnameArgs']]]] = None,
                 server_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Dns resource.
        :param pulumi.Input[str] primary: Primary DNS server IP address.
        :param pulumi.Input[str] alt_primary: Alternate primary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] alt_secondary: Alternate secondary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] cache_notfound_responses: Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] dns_cache_limit: Maximum number of records in the DNS cache.
        :param pulumi.Input[int] dns_cache_ttl: Duration in seconds that the DNS cache retains information.
        :param pulumi.Input[str] dns_over_tls: Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
        :param pulumi.Input[Sequence[pulumi.Input['DnsDomainArgs']]] domains: Search suffix list for hostname lookup. The structure of `domain` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fqdn_cache_ttl: FQDN cache time to live in seconds (0 - 86400, default = 0).
        :param pulumi.Input[int] fqdn_max_refresh: FQDN cache maximum refresh time in seconds (3600 - 86400, default = 3600).
        :param pulumi.Input[int] fqdn_min_refresh: FQDN cache minimum refresh time in seconds (10 - 3600, default = 60).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ip6_primary: Primary DNS server IPv6 address.
        :param pulumi.Input[str] ip6_secondary: Secondary DNS server IPv6 address.
        :param pulumi.Input[str] log: Local DNS log setting. Valid values: `disable`, `error`, `all`.
        :param pulumi.Input[str] protocol: DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
        :param pulumi.Input[int] retry: Number of times to retry (0 - 5).
        :param pulumi.Input[str] secondary: Secondary DNS server IP address.
        :param pulumi.Input[Sequence[pulumi.Input['DnsServerHostnameArgs']]] server_hostnames: DNS server host name list. The structure of `server_hostname` block is documented below.
        :param pulumi.Input[str] server_select_method: Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
        :param pulumi.Input[str] source_ip: IP address used by the DNS server as its source IP.
        :param pulumi.Input[str] ssl_certificate: Name of local certificate for SSL connections.
        :param pulumi.Input[int] timeout: DNS query timeout interval in seconds (1 - 10).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "primary", primary)
        if alt_primary is not None:
            pulumi.set(__self__, "alt_primary", alt_primary)
        if alt_secondary is not None:
            pulumi.set(__self__, "alt_secondary", alt_secondary)
        if cache_notfound_responses is not None:
            pulumi.set(__self__, "cache_notfound_responses", cache_notfound_responses)
        if dns_cache_limit is not None:
            pulumi.set(__self__, "dns_cache_limit", dns_cache_limit)
        if dns_cache_ttl is not None:
            pulumi.set(__self__, "dns_cache_ttl", dns_cache_ttl)
        if dns_over_tls is not None:
            pulumi.set(__self__, "dns_over_tls", dns_over_tls)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fqdn_cache_ttl is not None:
            pulumi.set(__self__, "fqdn_cache_ttl", fqdn_cache_ttl)
        if fqdn_max_refresh is not None:
            pulumi.set(__self__, "fqdn_max_refresh", fqdn_max_refresh)
        if fqdn_min_refresh is not None:
            pulumi.set(__self__, "fqdn_min_refresh", fqdn_min_refresh)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ip6_primary is not None:
            pulumi.set(__self__, "ip6_primary", ip6_primary)
        if ip6_secondary is not None:
            pulumi.set(__self__, "ip6_secondary", ip6_secondary)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if server_hostnames is not None:
            pulumi.set(__self__, "server_hostnames", server_hostnames)
        if server_select_method is not None:
            pulumi.set(__self__, "server_select_method", server_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def primary(self) -> pulumi.Input[str]:
        """
        Primary DNS server IP address.
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter(name="altPrimary")
    def alt_primary(self) -> Optional[pulumi.Input[str]]:
        """
        Alternate primary DNS server. (This is not used as a failover DNS server.)
        """
        return pulumi.get(self, "alt_primary")

    @alt_primary.setter
    def alt_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_primary", value)

    @property
    @pulumi.getter(name="altSecondary")
    def alt_secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Alternate secondary DNS server. (This is not used as a failover DNS server.)
        """
        return pulumi.get(self, "alt_secondary")

    @alt_secondary.setter
    def alt_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_secondary", value)

    @property
    @pulumi.getter(name="cacheNotfoundResponses")
    def cache_notfound_responses(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "cache_notfound_responses")

    @cache_notfound_responses.setter
    def cache_notfound_responses(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_notfound_responses", value)

    @property
    @pulumi.getter(name="dnsCacheLimit")
    def dns_cache_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of records in the DNS cache.
        """
        return pulumi.get(self, "dns_cache_limit")

    @dns_cache_limit.setter
    def dns_cache_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_cache_limit", value)

    @property
    @pulumi.getter(name="dnsCacheTtl")
    def dns_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Duration in seconds that the DNS cache retains information.
        """
        return pulumi.get(self, "dns_cache_ttl")

    @dns_cache_ttl.setter
    def dns_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_cache_ttl", value)

    @property
    @pulumi.getter(name="dnsOverTls")
    def dns_over_tls(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
        """
        return pulumi.get(self, "dns_over_tls")

    @dns_over_tls.setter
    def dns_over_tls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_over_tls", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsDomainArgs']]]]:
        """
        Search suffix list for hostname lookup. The structure of `domain` block is documented below.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsDomainArgs']]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fqdnCacheTtl")
    def fqdn_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        FQDN cache time to live in seconds (0 - 86400, default = 0).
        """
        return pulumi.get(self, "fqdn_cache_ttl")

    @fqdn_cache_ttl.setter
    def fqdn_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fqdn_cache_ttl", value)

    @property
    @pulumi.getter(name="fqdnMaxRefresh")
    def fqdn_max_refresh(self) -> Optional[pulumi.Input[int]]:
        """
        FQDN cache maximum refresh time in seconds (3600 - 86400, default = 3600).
        """
        return pulumi.get(self, "fqdn_max_refresh")

    @fqdn_max_refresh.setter
    def fqdn_max_refresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fqdn_max_refresh", value)

    @property
    @pulumi.getter(name="fqdnMinRefresh")
    def fqdn_min_refresh(self) -> Optional[pulumi.Input[int]]:
        """
        FQDN cache minimum refresh time in seconds (10 - 3600, default = 60).
        """
        return pulumi.get(self, "fqdn_min_refresh")

    @fqdn_min_refresh.setter
    def fqdn_min_refresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fqdn_min_refresh", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ip6Primary")
    def ip6_primary(self) -> Optional[pulumi.Input[str]]:
        """
        Primary DNS server IPv6 address.
        """
        return pulumi.get(self, "ip6_primary")

    @ip6_primary.setter
    def ip6_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_primary", value)

    @property
    @pulumi.getter(name="ip6Secondary")
    def ip6_secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary DNS server IPv6 address.
        """
        return pulumi.get(self, "ip6_secondary")

    @ip6_secondary.setter
    def ip6_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_secondary", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Local DNS log setting. Valid values: `disable`, `error`, `all`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input[int]]:
        """
        Number of times to retry (0 - 5).
        """
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry", value)

    @property
    @pulumi.getter
    def secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary DNS server IP address.
        """
        return pulumi.get(self, "secondary")

    @secondary.setter
    def secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary", value)

    @property
    @pulumi.getter(name="serverHostnames")
    def server_hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsServerHostnameArgs']]]]:
        """
        DNS server host name list. The structure of `server_hostname` block is documented below.
        """
        return pulumi.get(self, "server_hostnames")

    @server_hostnames.setter
    def server_hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsServerHostnameArgs']]]]):
        pulumi.set(self, "server_hostnames", value)

    @property
    @pulumi.getter(name="serverSelectMethod")
    def server_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
        """
        return pulumi.get(self, "server_select_method")

    @server_select_method.setter
    def server_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_select_method", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address used by the DNS server as its source IP.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Name of local certificate for SSL connections.
        """
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        DNS query timeout interval in seconds (1 - 10).
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _DnsState:
    def __init__(__self__, *,
                 alt_primary: Optional[pulumi.Input[str]] = None,
                 alt_secondary: Optional[pulumi.Input[str]] = None,
                 cache_notfound_responses: Optional[pulumi.Input[str]] = None,
                 dns_cache_limit: Optional[pulumi.Input[int]] = None,
                 dns_cache_ttl: Optional[pulumi.Input[int]] = None,
                 dns_over_tls: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input['DnsDomainArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fqdn_cache_ttl: Optional[pulumi.Input[int]] = None,
                 fqdn_max_refresh: Optional[pulumi.Input[int]] = None,
                 fqdn_min_refresh: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6_primary: Optional[pulumi.Input[str]] = None,
                 ip6_secondary: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 retry: Optional[pulumi.Input[int]] = None,
                 secondary: Optional[pulumi.Input[str]] = None,
                 server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input['DnsServerHostnameArgs']]]] = None,
                 server_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Dns resources.
        :param pulumi.Input[str] alt_primary: Alternate primary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] alt_secondary: Alternate secondary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] cache_notfound_responses: Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] dns_cache_limit: Maximum number of records in the DNS cache.
        :param pulumi.Input[int] dns_cache_ttl: Duration in seconds that the DNS cache retains information.
        :param pulumi.Input[str] dns_over_tls: Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
        :param pulumi.Input[Sequence[pulumi.Input['DnsDomainArgs']]] domains: Search suffix list for hostname lookup. The structure of `domain` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fqdn_cache_ttl: FQDN cache time to live in seconds (0 - 86400, default = 0).
        :param pulumi.Input[int] fqdn_max_refresh: FQDN cache maximum refresh time in seconds (3600 - 86400, default = 3600).
        :param pulumi.Input[int] fqdn_min_refresh: FQDN cache minimum refresh time in seconds (10 - 3600, default = 60).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ip6_primary: Primary DNS server IPv6 address.
        :param pulumi.Input[str] ip6_secondary: Secondary DNS server IPv6 address.
        :param pulumi.Input[str] log: Local DNS log setting. Valid values: `disable`, `error`, `all`.
        :param pulumi.Input[str] primary: Primary DNS server IP address.
        :param pulumi.Input[str] protocol: DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
        :param pulumi.Input[int] retry: Number of times to retry (0 - 5).
        :param pulumi.Input[str] secondary: Secondary DNS server IP address.
        :param pulumi.Input[Sequence[pulumi.Input['DnsServerHostnameArgs']]] server_hostnames: DNS server host name list. The structure of `server_hostname` block is documented below.
        :param pulumi.Input[str] server_select_method: Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
        :param pulumi.Input[str] source_ip: IP address used by the DNS server as its source IP.
        :param pulumi.Input[str] ssl_certificate: Name of local certificate for SSL connections.
        :param pulumi.Input[int] timeout: DNS query timeout interval in seconds (1 - 10).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if alt_primary is not None:
            pulumi.set(__self__, "alt_primary", alt_primary)
        if alt_secondary is not None:
            pulumi.set(__self__, "alt_secondary", alt_secondary)
        if cache_notfound_responses is not None:
            pulumi.set(__self__, "cache_notfound_responses", cache_notfound_responses)
        if dns_cache_limit is not None:
            pulumi.set(__self__, "dns_cache_limit", dns_cache_limit)
        if dns_cache_ttl is not None:
            pulumi.set(__self__, "dns_cache_ttl", dns_cache_ttl)
        if dns_over_tls is not None:
            pulumi.set(__self__, "dns_over_tls", dns_over_tls)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fqdn_cache_ttl is not None:
            pulumi.set(__self__, "fqdn_cache_ttl", fqdn_cache_ttl)
        if fqdn_max_refresh is not None:
            pulumi.set(__self__, "fqdn_max_refresh", fqdn_max_refresh)
        if fqdn_min_refresh is not None:
            pulumi.set(__self__, "fqdn_min_refresh", fqdn_min_refresh)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ip6_primary is not None:
            pulumi.set(__self__, "ip6_primary", ip6_primary)
        if ip6_secondary is not None:
            pulumi.set(__self__, "ip6_secondary", ip6_secondary)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if server_hostnames is not None:
            pulumi.set(__self__, "server_hostnames", server_hostnames)
        if server_select_method is not None:
            pulumi.set(__self__, "server_select_method", server_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if ssl_certificate is not None:
            pulumi.set(__self__, "ssl_certificate", ssl_certificate)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="altPrimary")
    def alt_primary(self) -> Optional[pulumi.Input[str]]:
        """
        Alternate primary DNS server. (This is not used as a failover DNS server.)
        """
        return pulumi.get(self, "alt_primary")

    @alt_primary.setter
    def alt_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_primary", value)

    @property
    @pulumi.getter(name="altSecondary")
    def alt_secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Alternate secondary DNS server. (This is not used as a failover DNS server.)
        """
        return pulumi.get(self, "alt_secondary")

    @alt_secondary.setter
    def alt_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_secondary", value)

    @property
    @pulumi.getter(name="cacheNotfoundResponses")
    def cache_notfound_responses(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "cache_notfound_responses")

    @cache_notfound_responses.setter
    def cache_notfound_responses(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_notfound_responses", value)

    @property
    @pulumi.getter(name="dnsCacheLimit")
    def dns_cache_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of records in the DNS cache.
        """
        return pulumi.get(self, "dns_cache_limit")

    @dns_cache_limit.setter
    def dns_cache_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_cache_limit", value)

    @property
    @pulumi.getter(name="dnsCacheTtl")
    def dns_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Duration in seconds that the DNS cache retains information.
        """
        return pulumi.get(self, "dns_cache_ttl")

    @dns_cache_ttl.setter
    def dns_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_cache_ttl", value)

    @property
    @pulumi.getter(name="dnsOverTls")
    def dns_over_tls(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
        """
        return pulumi.get(self, "dns_over_tls")

    @dns_over_tls.setter
    def dns_over_tls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_over_tls", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsDomainArgs']]]]:
        """
        Search suffix list for hostname lookup. The structure of `domain` block is documented below.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsDomainArgs']]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fqdnCacheTtl")
    def fqdn_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        FQDN cache time to live in seconds (0 - 86400, default = 0).
        """
        return pulumi.get(self, "fqdn_cache_ttl")

    @fqdn_cache_ttl.setter
    def fqdn_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fqdn_cache_ttl", value)

    @property
    @pulumi.getter(name="fqdnMaxRefresh")
    def fqdn_max_refresh(self) -> Optional[pulumi.Input[int]]:
        """
        FQDN cache maximum refresh time in seconds (3600 - 86400, default = 3600).
        """
        return pulumi.get(self, "fqdn_max_refresh")

    @fqdn_max_refresh.setter
    def fqdn_max_refresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fqdn_max_refresh", value)

    @property
    @pulumi.getter(name="fqdnMinRefresh")
    def fqdn_min_refresh(self) -> Optional[pulumi.Input[int]]:
        """
        FQDN cache minimum refresh time in seconds (10 - 3600, default = 60).
        """
        return pulumi.get(self, "fqdn_min_refresh")

    @fqdn_min_refresh.setter
    def fqdn_min_refresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fqdn_min_refresh", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ip6Primary")
    def ip6_primary(self) -> Optional[pulumi.Input[str]]:
        """
        Primary DNS server IPv6 address.
        """
        return pulumi.get(self, "ip6_primary")

    @ip6_primary.setter
    def ip6_primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_primary", value)

    @property
    @pulumi.getter(name="ip6Secondary")
    def ip6_secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary DNS server IPv6 address.
        """
        return pulumi.get(self, "ip6_secondary")

    @ip6_secondary.setter
    def ip6_secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_secondary", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Local DNS log setting. Valid values: `disable`, `error`, `all`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[str]]:
        """
        Primary DNS server IP address.
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input[int]]:
        """
        Number of times to retry (0 - 5).
        """
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry", value)

    @property
    @pulumi.getter
    def secondary(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary DNS server IP address.
        """
        return pulumi.get(self, "secondary")

    @secondary.setter
    def secondary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary", value)

    @property
    @pulumi.getter(name="serverHostnames")
    def server_hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsServerHostnameArgs']]]]:
        """
        DNS server host name list. The structure of `server_hostname` block is documented below.
        """
        return pulumi.get(self, "server_hostnames")

    @server_hostnames.setter
    def server_hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsServerHostnameArgs']]]]):
        pulumi.set(self, "server_hostnames", value)

    @property
    @pulumi.getter(name="serverSelectMethod")
    def server_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
        """
        return pulumi.get(self, "server_select_method")

    @server_select_method.setter
    def server_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_select_method", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address used by the DNS server as its source IP.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Name of local certificate for SSL connections.
        """
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        DNS query timeout interval in seconds (1 - 10).
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Dns(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alt_primary: Optional[pulumi.Input[str]] = None,
                 alt_secondary: Optional[pulumi.Input[str]] = None,
                 cache_notfound_responses: Optional[pulumi.Input[str]] = None,
                 dns_cache_limit: Optional[pulumi.Input[int]] = None,
                 dns_cache_ttl: Optional[pulumi.Input[int]] = None,
                 dns_over_tls: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsDomainArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fqdn_cache_ttl: Optional[pulumi.Input[int]] = None,
                 fqdn_max_refresh: Optional[pulumi.Input[int]] = None,
                 fqdn_min_refresh: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6_primary: Optional[pulumi.Input[str]] = None,
                 ip6_secondary: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 retry: Optional[pulumi.Input[int]] = None,
                 secondary: Optional[pulumi.Input[str]] = None,
                 server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsServerHostnameArgs']]]]] = None,
                 server_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure DNS.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Dns("trname",
            cache_notfound_responses="disable",
            dns_cache_limit=5000,
            dns_cache_ttl=1800,
            ip6_primary="::",
            ip6_secondary="::",
            primary="208.91.112.53",
            retry=2,
            secondary="208.91.112.51",
            source_ip="0.0.0.0",
            timeout=5)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Dns can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/dns:Dns labelname SystemDns
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/dns:Dns labelname SystemDns
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alt_primary: Alternate primary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] alt_secondary: Alternate secondary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] cache_notfound_responses: Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] dns_cache_limit: Maximum number of records in the DNS cache.
        :param pulumi.Input[int] dns_cache_ttl: Duration in seconds that the DNS cache retains information.
        :param pulumi.Input[str] dns_over_tls: Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsDomainArgs']]]] domains: Search suffix list for hostname lookup. The structure of `domain` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fqdn_cache_ttl: FQDN cache time to live in seconds (0 - 86400, default = 0).
        :param pulumi.Input[int] fqdn_max_refresh: FQDN cache maximum refresh time in seconds (3600 - 86400, default = 3600).
        :param pulumi.Input[int] fqdn_min_refresh: FQDN cache minimum refresh time in seconds (10 - 3600, default = 60).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ip6_primary: Primary DNS server IPv6 address.
        :param pulumi.Input[str] ip6_secondary: Secondary DNS server IPv6 address.
        :param pulumi.Input[str] log: Local DNS log setting. Valid values: `disable`, `error`, `all`.
        :param pulumi.Input[str] primary: Primary DNS server IP address.
        :param pulumi.Input[str] protocol: DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
        :param pulumi.Input[int] retry: Number of times to retry (0 - 5).
        :param pulumi.Input[str] secondary: Secondary DNS server IP address.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsServerHostnameArgs']]]] server_hostnames: DNS server host name list. The structure of `server_hostname` block is documented below.
        :param pulumi.Input[str] server_select_method: Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
        :param pulumi.Input[str] source_ip: IP address used by the DNS server as its source IP.
        :param pulumi.Input[str] ssl_certificate: Name of local certificate for SSL connections.
        :param pulumi.Input[int] timeout: DNS query timeout interval in seconds (1 - 10).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure DNS.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.system.Dns("trname",
            cache_notfound_responses="disable",
            dns_cache_limit=5000,
            dns_cache_ttl=1800,
            ip6_primary="::",
            ip6_secondary="::",
            primary="208.91.112.53",
            retry=2,
            secondary="208.91.112.51",
            source_ip="0.0.0.0",
            timeout=5)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        System Dns can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/dns:Dns labelname SystemDns
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/dns:Dns labelname SystemDns
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param DnsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alt_primary: Optional[pulumi.Input[str]] = None,
                 alt_secondary: Optional[pulumi.Input[str]] = None,
                 cache_notfound_responses: Optional[pulumi.Input[str]] = None,
                 dns_cache_limit: Optional[pulumi.Input[int]] = None,
                 dns_cache_ttl: Optional[pulumi.Input[int]] = None,
                 dns_over_tls: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsDomainArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fqdn_cache_ttl: Optional[pulumi.Input[int]] = None,
                 fqdn_max_refresh: Optional[pulumi.Input[int]] = None,
                 fqdn_min_refresh: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ip6_primary: Optional[pulumi.Input[str]] = None,
                 ip6_secondary: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 retry: Optional[pulumi.Input[int]] = None,
                 secondary: Optional[pulumi.Input[str]] = None,
                 server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsServerHostnameArgs']]]]] = None,
                 server_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_certificate: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsArgs.__new__(DnsArgs)

            __props__.__dict__["alt_primary"] = alt_primary
            __props__.__dict__["alt_secondary"] = alt_secondary
            __props__.__dict__["cache_notfound_responses"] = cache_notfound_responses
            __props__.__dict__["dns_cache_limit"] = dns_cache_limit
            __props__.__dict__["dns_cache_ttl"] = dns_cache_ttl
            __props__.__dict__["dns_over_tls"] = dns_over_tls
            __props__.__dict__["domains"] = domains
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fqdn_cache_ttl"] = fqdn_cache_ttl
            __props__.__dict__["fqdn_max_refresh"] = fqdn_max_refresh
            __props__.__dict__["fqdn_min_refresh"] = fqdn_min_refresh
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interface_select_method"] = interface_select_method
            __props__.__dict__["ip6_primary"] = ip6_primary
            __props__.__dict__["ip6_secondary"] = ip6_secondary
            __props__.__dict__["log"] = log
            if primary is None and not opts.urn:
                raise TypeError("Missing required property 'primary'")
            __props__.__dict__["primary"] = primary
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["retry"] = retry
            __props__.__dict__["secondary"] = secondary
            __props__.__dict__["server_hostnames"] = server_hostnames
            __props__.__dict__["server_select_method"] = server_select_method
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["ssl_certificate"] = ssl_certificate
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["vdomparam"] = vdomparam
        super(Dns, __self__).__init__(
            'fortios:system/dns:Dns',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alt_primary: Optional[pulumi.Input[str]] = None,
            alt_secondary: Optional[pulumi.Input[str]] = None,
            cache_notfound_responses: Optional[pulumi.Input[str]] = None,
            dns_cache_limit: Optional[pulumi.Input[int]] = None,
            dns_cache_ttl: Optional[pulumi.Input[int]] = None,
            dns_over_tls: Optional[pulumi.Input[str]] = None,
            domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsDomainArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fqdn_cache_ttl: Optional[pulumi.Input[int]] = None,
            fqdn_max_refresh: Optional[pulumi.Input[int]] = None,
            fqdn_min_refresh: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interface_select_method: Optional[pulumi.Input[str]] = None,
            ip6_primary: Optional[pulumi.Input[str]] = None,
            ip6_secondary: Optional[pulumi.Input[str]] = None,
            log: Optional[pulumi.Input[str]] = None,
            primary: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            retry: Optional[pulumi.Input[int]] = None,
            secondary: Optional[pulumi.Input[str]] = None,
            server_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsServerHostnameArgs']]]]] = None,
            server_select_method: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            ssl_certificate: Optional[pulumi.Input[str]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Dns':
        """
        Get an existing Dns resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alt_primary: Alternate primary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] alt_secondary: Alternate secondary DNS server. (This is not used as a failover DNS server.)
        :param pulumi.Input[str] cache_notfound_responses: Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] dns_cache_limit: Maximum number of records in the DNS cache.
        :param pulumi.Input[int] dns_cache_ttl: Duration in seconds that the DNS cache retains information.
        :param pulumi.Input[str] dns_over_tls: Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsDomainArgs']]]] domains: Search suffix list for hostname lookup. The structure of `domain` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fqdn_cache_ttl: FQDN cache time to live in seconds (0 - 86400, default = 0).
        :param pulumi.Input[int] fqdn_max_refresh: FQDN cache maximum refresh time in seconds (3600 - 86400, default = 3600).
        :param pulumi.Input[int] fqdn_min_refresh: FQDN cache minimum refresh time in seconds (10 - 3600, default = 60).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ip6_primary: Primary DNS server IPv6 address.
        :param pulumi.Input[str] ip6_secondary: Secondary DNS server IPv6 address.
        :param pulumi.Input[str] log: Local DNS log setting. Valid values: `disable`, `error`, `all`.
        :param pulumi.Input[str] primary: Primary DNS server IP address.
        :param pulumi.Input[str] protocol: DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
        :param pulumi.Input[int] retry: Number of times to retry (0 - 5).
        :param pulumi.Input[str] secondary: Secondary DNS server IP address.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DnsServerHostnameArgs']]]] server_hostnames: DNS server host name list. The structure of `server_hostname` block is documented below.
        :param pulumi.Input[str] server_select_method: Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
        :param pulumi.Input[str] source_ip: IP address used by the DNS server as its source IP.
        :param pulumi.Input[str] ssl_certificate: Name of local certificate for SSL connections.
        :param pulumi.Input[int] timeout: DNS query timeout interval in seconds (1 - 10).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsState.__new__(_DnsState)

        __props__.__dict__["alt_primary"] = alt_primary
        __props__.__dict__["alt_secondary"] = alt_secondary
        __props__.__dict__["cache_notfound_responses"] = cache_notfound_responses
        __props__.__dict__["dns_cache_limit"] = dns_cache_limit
        __props__.__dict__["dns_cache_ttl"] = dns_cache_ttl
        __props__.__dict__["dns_over_tls"] = dns_over_tls
        __props__.__dict__["domains"] = domains
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fqdn_cache_ttl"] = fqdn_cache_ttl
        __props__.__dict__["fqdn_max_refresh"] = fqdn_max_refresh
        __props__.__dict__["fqdn_min_refresh"] = fqdn_min_refresh
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interface_select_method"] = interface_select_method
        __props__.__dict__["ip6_primary"] = ip6_primary
        __props__.__dict__["ip6_secondary"] = ip6_secondary
        __props__.__dict__["log"] = log
        __props__.__dict__["primary"] = primary
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["retry"] = retry
        __props__.__dict__["secondary"] = secondary
        __props__.__dict__["server_hostnames"] = server_hostnames
        __props__.__dict__["server_select_method"] = server_select_method
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["ssl_certificate"] = ssl_certificate
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["vdomparam"] = vdomparam
        return Dns(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="altPrimary")
    def alt_primary(self) -> pulumi.Output[str]:
        """
        Alternate primary DNS server. (This is not used as a failover DNS server.)
        """
        return pulumi.get(self, "alt_primary")

    @property
    @pulumi.getter(name="altSecondary")
    def alt_secondary(self) -> pulumi.Output[str]:
        """
        Alternate secondary DNS server. (This is not used as a failover DNS server.)
        """
        return pulumi.get(self, "alt_secondary")

    @property
    @pulumi.getter(name="cacheNotfoundResponses")
    def cache_notfound_responses(self) -> pulumi.Output[str]:
        """
        Enable/disable response from the DNS server when a record is not in cache. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "cache_notfound_responses")

    @property
    @pulumi.getter(name="dnsCacheLimit")
    def dns_cache_limit(self) -> pulumi.Output[int]:
        """
        Maximum number of records in the DNS cache.
        """
        return pulumi.get(self, "dns_cache_limit")

    @property
    @pulumi.getter(name="dnsCacheTtl")
    def dns_cache_ttl(self) -> pulumi.Output[int]:
        """
        Duration in seconds that the DNS cache retains information.
        """
        return pulumi.get(self, "dns_cache_ttl")

    @property
    @pulumi.getter(name="dnsOverTls")
    def dns_over_tls(self) -> pulumi.Output[str]:
        """
        Enable/disable/enforce DNS over TLS. Valid values: `disable`, `enable`, `enforce`.
        """
        return pulumi.get(self, "dns_over_tls")

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Output[Optional[Sequence['outputs.DnsDomain']]]:
        """
        Search suffix list for hostname lookup. The structure of `domain` block is documented below.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="fqdnCacheTtl")
    def fqdn_cache_ttl(self) -> pulumi.Output[int]:
        """
        FQDN cache time to live in seconds (0 - 86400, default = 0).
        """
        return pulumi.get(self, "fqdn_cache_ttl")

    @property
    @pulumi.getter(name="fqdnMaxRefresh")
    def fqdn_max_refresh(self) -> pulumi.Output[int]:
        """
        FQDN cache maximum refresh time in seconds (3600 - 86400, default = 3600).
        """
        return pulumi.get(self, "fqdn_max_refresh")

    @property
    @pulumi.getter(name="fqdnMinRefresh")
    def fqdn_min_refresh(self) -> pulumi.Output[int]:
        """
        FQDN cache minimum refresh time in seconds (10 - 3600, default = 60).
        """
        return pulumi.get(self, "fqdn_min_refresh")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> pulumi.Output[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="ip6Primary")
    def ip6_primary(self) -> pulumi.Output[str]:
        """
        Primary DNS server IPv6 address.
        """
        return pulumi.get(self, "ip6_primary")

    @property
    @pulumi.getter(name="ip6Secondary")
    def ip6_secondary(self) -> pulumi.Output[str]:
        """
        Secondary DNS server IPv6 address.
        """
        return pulumi.get(self, "ip6_secondary")

    @property
    @pulumi.getter
    def log(self) -> pulumi.Output[str]:
        """
        Local DNS log setting. Valid values: `disable`, `error`, `all`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def primary(self) -> pulumi.Output[str]:
        """
        Primary DNS server IP address.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        DNS protocols. Valid values: `cleartext`, `dot`, `doh`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def retry(self) -> pulumi.Output[int]:
        """
        Number of times to retry (0 - 5).
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter
    def secondary(self) -> pulumi.Output[str]:
        """
        Secondary DNS server IP address.
        """
        return pulumi.get(self, "secondary")

    @property
    @pulumi.getter(name="serverHostnames")
    def server_hostnames(self) -> pulumi.Output[Optional[Sequence['outputs.DnsServerHostname']]]:
        """
        DNS server host name list. The structure of `server_hostname` block is documented below.
        """
        return pulumi.get(self, "server_hostnames")

    @property
    @pulumi.getter(name="serverSelectMethod")
    def server_select_method(self) -> pulumi.Output[str]:
        """
        Specify how configured servers are prioritized. Valid values: `least-rtt`, `failover`.
        """
        return pulumi.get(self, "server_select_method")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        """
        IP address used by the DNS server as its source IP.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> pulumi.Output[str]:
        """
        Name of local certificate for SSL connections.
        """
        return pulumi.get(self, "ssl_certificate")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[int]:
        """
        DNS query timeout interval in seconds (1 - 10).
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

