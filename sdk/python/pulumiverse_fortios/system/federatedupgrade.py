# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FederatedupgradeArgs', 'Federatedupgrade']

@pulumi.input_type
class FederatedupgradeArgs:
    def __init__(__self__, *,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failure_device: Optional[pulumi.Input[str]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_reboot_controller: Optional[pulumi.Input[str]] = None,
                 known_ha_members: Optional[pulumi.Input[Sequence[pulumi.Input['FederatedupgradeKnownHaMemberArgs']]]] = None,
                 next_path_index: Optional[pulumi.Input[int]] = None,
                 node_lists: Optional[pulumi.Input[Sequence[pulumi.Input['FederatedupgradeNodeListArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upgrade_id: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Federatedupgrade resource.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] failure_device: Serial number of the node to include.
        :param pulumi.Input[str] failure_reason: Reason for upgrade failure.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_reboot_controller: Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        :param pulumi.Input[Sequence[pulumi.Input['FederatedupgradeKnownHaMemberArgs']]] known_ha_members: Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        :param pulumi.Input[int] next_path_index: The index of the next image to upgrade to.
        :param pulumi.Input[Sequence[pulumi.Input['FederatedupgradeNodeListArgs']]] node_lists: Nodes which will be included in the upgrade. The structure of `node_list` block is documented below.
        :param pulumi.Input[str] status: Current status of the upgrade.
        :param pulumi.Input[int] upgrade_id: Unique identifier for this upgrade.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if failure_device is not None:
            pulumi.set(__self__, "failure_device", failure_device)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ha_reboot_controller is not None:
            pulumi.set(__self__, "ha_reboot_controller", ha_reboot_controller)
        if known_ha_members is not None:
            pulumi.set(__self__, "known_ha_members", known_ha_members)
        if next_path_index is not None:
            pulumi.set(__self__, "next_path_index", next_path_index)
        if node_lists is not None:
            pulumi.set(__self__, "node_lists", node_lists)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if upgrade_id is not None:
            pulumi.set(__self__, "upgrade_id", upgrade_id)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="failureDevice")
    def failure_device(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number of the node to include.
        """
        return pulumi.get(self, "failure_device")

    @failure_device.setter
    def failure_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_device", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason for upgrade failure.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="haRebootController")
    def ha_reboot_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        """
        return pulumi.get(self, "ha_reboot_controller")

    @ha_reboot_controller.setter
    def ha_reboot_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_reboot_controller", value)

    @property
    @pulumi.getter(name="knownHaMembers")
    def known_ha_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FederatedupgradeKnownHaMemberArgs']]]]:
        """
        Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        """
        return pulumi.get(self, "known_ha_members")

    @known_ha_members.setter
    def known_ha_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FederatedupgradeKnownHaMemberArgs']]]]):
        pulumi.set(self, "known_ha_members", value)

    @property
    @pulumi.getter(name="nextPathIndex")
    def next_path_index(self) -> Optional[pulumi.Input[int]]:
        """
        The index of the next image to upgrade to.
        """
        return pulumi.get(self, "next_path_index")

    @next_path_index.setter
    def next_path_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "next_path_index", value)

    @property
    @pulumi.getter(name="nodeLists")
    def node_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FederatedupgradeNodeListArgs']]]]:
        """
        Nodes which will be included in the upgrade. The structure of `node_list` block is documented below.
        """
        return pulumi.get(self, "node_lists")

    @node_lists.setter
    def node_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FederatedupgradeNodeListArgs']]]]):
        pulumi.set(self, "node_lists", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Current status of the upgrade.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="upgradeId")
    def upgrade_id(self) -> Optional[pulumi.Input[int]]:
        """
        Unique identifier for this upgrade.
        """
        return pulumi.get(self, "upgrade_id")

    @upgrade_id.setter
    def upgrade_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upgrade_id", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _FederatedupgradeState:
    def __init__(__self__, *,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failure_device: Optional[pulumi.Input[str]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_reboot_controller: Optional[pulumi.Input[str]] = None,
                 known_ha_members: Optional[pulumi.Input[Sequence[pulumi.Input['FederatedupgradeKnownHaMemberArgs']]]] = None,
                 next_path_index: Optional[pulumi.Input[int]] = None,
                 node_lists: Optional[pulumi.Input[Sequence[pulumi.Input['FederatedupgradeNodeListArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upgrade_id: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Federatedupgrade resources.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] failure_device: Serial number of the node to include.
        :param pulumi.Input[str] failure_reason: Reason for upgrade failure.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_reboot_controller: Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        :param pulumi.Input[Sequence[pulumi.Input['FederatedupgradeKnownHaMemberArgs']]] known_ha_members: Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        :param pulumi.Input[int] next_path_index: The index of the next image to upgrade to.
        :param pulumi.Input[Sequence[pulumi.Input['FederatedupgradeNodeListArgs']]] node_lists: Nodes which will be included in the upgrade. The structure of `node_list` block is documented below.
        :param pulumi.Input[str] status: Current status of the upgrade.
        :param pulumi.Input[int] upgrade_id: Unique identifier for this upgrade.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if failure_device is not None:
            pulumi.set(__self__, "failure_device", failure_device)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ha_reboot_controller is not None:
            pulumi.set(__self__, "ha_reboot_controller", ha_reboot_controller)
        if known_ha_members is not None:
            pulumi.set(__self__, "known_ha_members", known_ha_members)
        if next_path_index is not None:
            pulumi.set(__self__, "next_path_index", next_path_index)
        if node_lists is not None:
            pulumi.set(__self__, "node_lists", node_lists)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if upgrade_id is not None:
            pulumi.set(__self__, "upgrade_id", upgrade_id)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="failureDevice")
    def failure_device(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number of the node to include.
        """
        return pulumi.get(self, "failure_device")

    @failure_device.setter
    def failure_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_device", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason for upgrade failure.
        """
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="haRebootController")
    def ha_reboot_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        """
        return pulumi.get(self, "ha_reboot_controller")

    @ha_reboot_controller.setter
    def ha_reboot_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_reboot_controller", value)

    @property
    @pulumi.getter(name="knownHaMembers")
    def known_ha_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FederatedupgradeKnownHaMemberArgs']]]]:
        """
        Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        """
        return pulumi.get(self, "known_ha_members")

    @known_ha_members.setter
    def known_ha_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FederatedupgradeKnownHaMemberArgs']]]]):
        pulumi.set(self, "known_ha_members", value)

    @property
    @pulumi.getter(name="nextPathIndex")
    def next_path_index(self) -> Optional[pulumi.Input[int]]:
        """
        The index of the next image to upgrade to.
        """
        return pulumi.get(self, "next_path_index")

    @next_path_index.setter
    def next_path_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "next_path_index", value)

    @property
    @pulumi.getter(name="nodeLists")
    def node_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FederatedupgradeNodeListArgs']]]]:
        """
        Nodes which will be included in the upgrade. The structure of `node_list` block is documented below.
        """
        return pulumi.get(self, "node_lists")

    @node_lists.setter
    def node_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FederatedupgradeNodeListArgs']]]]):
        pulumi.set(self, "node_lists", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Current status of the upgrade.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="upgradeId")
    def upgrade_id(self) -> Optional[pulumi.Input[int]]:
        """
        Unique identifier for this upgrade.
        """
        return pulumi.get(self, "upgrade_id")

    @upgrade_id.setter
    def upgrade_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upgrade_id", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Federatedupgrade(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failure_device: Optional[pulumi.Input[str]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_reboot_controller: Optional[pulumi.Input[str]] = None,
                 known_ha_members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FederatedupgradeKnownHaMemberArgs']]]]] = None,
                 next_path_index: Optional[pulumi.Input[int]] = None,
                 node_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FederatedupgradeNodeListArgs']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upgrade_id: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Coordinate federated upgrades within the Security Fabric. Applies to FortiOS Version `>= 7.0.0`.

        ## Import

        System FederatedUpgrade can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/federatedupgrade:Federatedupgrade labelname SystemFederatedUpgrade
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/federatedupgrade:Federatedupgrade labelname SystemFederatedUpgrade
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] failure_device: Serial number of the node to include.
        :param pulumi.Input[str] failure_reason: Reason for upgrade failure.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_reboot_controller: Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FederatedupgradeKnownHaMemberArgs']]]] known_ha_members: Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        :param pulumi.Input[int] next_path_index: The index of the next image to upgrade to.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FederatedupgradeNodeListArgs']]]] node_lists: Nodes which will be included in the upgrade. The structure of `node_list` block is documented below.
        :param pulumi.Input[str] status: Current status of the upgrade.
        :param pulumi.Input[int] upgrade_id: Unique identifier for this upgrade.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FederatedupgradeArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Coordinate federated upgrades within the Security Fabric. Applies to FortiOS Version `>= 7.0.0`.

        ## Import

        System FederatedUpgrade can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:system/federatedupgrade:Federatedupgrade labelname SystemFederatedUpgrade
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:system/federatedupgrade:Federatedupgrade labelname SystemFederatedUpgrade
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param FederatedupgradeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FederatedupgradeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 failure_device: Optional[pulumi.Input[str]] = None,
                 failure_reason: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ha_reboot_controller: Optional[pulumi.Input[str]] = None,
                 known_ha_members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FederatedupgradeKnownHaMemberArgs']]]]] = None,
                 next_path_index: Optional[pulumi.Input[int]] = None,
                 node_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FederatedupgradeNodeListArgs']]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upgrade_id: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FederatedupgradeArgs.__new__(FederatedupgradeArgs)

            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["failure_device"] = failure_device
            __props__.__dict__["failure_reason"] = failure_reason
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ha_reboot_controller"] = ha_reboot_controller
            __props__.__dict__["known_ha_members"] = known_ha_members
            __props__.__dict__["next_path_index"] = next_path_index
            __props__.__dict__["node_lists"] = node_lists
            __props__.__dict__["status"] = status
            __props__.__dict__["upgrade_id"] = upgrade_id
            __props__.__dict__["vdomparam"] = vdomparam
        super(Federatedupgrade, __self__).__init__(
            'fortios:system/federatedupgrade:Federatedupgrade',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            failure_device: Optional[pulumi.Input[str]] = None,
            failure_reason: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ha_reboot_controller: Optional[pulumi.Input[str]] = None,
            known_ha_members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FederatedupgradeKnownHaMemberArgs']]]]] = None,
            next_path_index: Optional[pulumi.Input[int]] = None,
            node_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FederatedupgradeNodeListArgs']]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            upgrade_id: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Federatedupgrade':
        """
        Get an existing Federatedupgrade resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] failure_device: Serial number of the node to include.
        :param pulumi.Input[str] failure_reason: Reason for upgrade failure.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ha_reboot_controller: Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FederatedupgradeKnownHaMemberArgs']]]] known_ha_members: Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        :param pulumi.Input[int] next_path_index: The index of the next image to upgrade to.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FederatedupgradeNodeListArgs']]]] node_lists: Nodes which will be included in the upgrade. The structure of `node_list` block is documented below.
        :param pulumi.Input[str] status: Current status of the upgrade.
        :param pulumi.Input[int] upgrade_id: Unique identifier for this upgrade.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FederatedupgradeState.__new__(_FederatedupgradeState)

        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["failure_device"] = failure_device
        __props__.__dict__["failure_reason"] = failure_reason
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ha_reboot_controller"] = ha_reboot_controller
        __props__.__dict__["known_ha_members"] = known_ha_members
        __props__.__dict__["next_path_index"] = next_path_index
        __props__.__dict__["node_lists"] = node_lists
        __props__.__dict__["status"] = status
        __props__.__dict__["upgrade_id"] = upgrade_id
        __props__.__dict__["vdomparam"] = vdomparam
        return Federatedupgrade(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="failureDevice")
    def failure_device(self) -> pulumi.Output[str]:
        """
        Serial number of the node to include.
        """
        return pulumi.get(self, "failure_device")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> pulumi.Output[str]:
        """
        Reason for upgrade failure.
        """
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="haRebootController")
    def ha_reboot_controller(self) -> pulumi.Output[str]:
        """
        Serial number of the FortiGate unit that will control the reboot process for the federated upgrade of the HA cluster.
        """
        return pulumi.get(self, "ha_reboot_controller")

    @property
    @pulumi.getter(name="knownHaMembers")
    def known_ha_members(self) -> pulumi.Output[Optional[Sequence['outputs.FederatedupgradeKnownHaMember']]]:
        """
        Known members of the HA cluster. If a member is missing at upgrade time, the upgrade will be cancelled. The structure of `known_ha_members` block is documented below.
        """
        return pulumi.get(self, "known_ha_members")

    @property
    @pulumi.getter(name="nextPathIndex")
    def next_path_index(self) -> pulumi.Output[int]:
        """
        The index of the next image to upgrade to.
        """
        return pulumi.get(self, "next_path_index")

    @property
    @pulumi.getter(name="nodeLists")
    def node_lists(self) -> pulumi.Output[Optional[Sequence['outputs.FederatedupgradeNodeList']]]:
        """
        Nodes which will be included in the upgrade. The structure of `node_list` block is documented below.
        """
        return pulumi.get(self, "node_lists")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Current status of the upgrade.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="upgradeId")
    def upgrade_id(self) -> pulumi.Output[int]:
        """
        Unique identifier for this upgrade.
        """
        return pulumi.get(self, "upgrade_id")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

