# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'Accesslist6Rule',
    'AccesslistRule',
    'AspathlistRule',
    'Bfd6MultihopTemplate',
    'Bfd6Neighbor',
    'BfdMultihopTemplate',
    'BfdNeighbor',
    'BgpAdminDistance',
    'BgpAggregateAddress6',
    'BgpAggregateAddress',
    'BgpConfederationPeer',
    'BgpNeighbor',
    'BgpNeighborConditionalAdvertise6',
    'BgpNeighborConditionalAdvertise',
    'BgpNeighborGroup',
    'BgpNeighborRange6',
    'BgpNeighborRange',
    'BgpNetwork6',
    'BgpNetwork',
    'BgpRedistribute6',
    'BgpRedistribute',
    'BgpVrf6',
    'BgpVrf6ExportRt',
    'BgpVrf6ImportRt',
    'BgpVrf6LeakTarget',
    'BgpVrf',
    'BgpVrfExportRt',
    'BgpVrfImportRt',
    'BgpVrfLeak6',
    'BgpVrfLeak6Target',
    'BgpVrfLeak',
    'BgpVrfLeakTarget',
    'CommunitylistRule',
    'ExtcommunitylistRule',
    'IsisIsisInterface',
    'IsisIsisNet',
    'IsisRedistribute6',
    'IsisRedistribute',
    'IsisSummaryAddress6',
    'IsisSummaryAddress',
    'KeychainKey',
    'Multicast6Interface',
    'Multicast6PimSmGlobal',
    'Multicast6PimSmGlobalRpAddress',
    'MulticastInterface',
    'MulticastInterfaceIgmp',
    'MulticastInterfaceJoinGroup',
    'MulticastPimSmGlobal',
    'MulticastPimSmGlobalRpAddress',
    'MulticastflowFlow',
    'Ospf6Area',
    'Ospf6AreaIpsecKey',
    'Ospf6AreaRange',
    'Ospf6AreaVirtualLink',
    'Ospf6AreaVirtualLinkIpsecKey',
    'Ospf6Ospf6Interface',
    'Ospf6Ospf6InterfaceIpsecKey',
    'Ospf6Ospf6InterfaceNeighbor',
    'Ospf6PassiveInterface',
    'Ospf6Redistribute',
    'Ospf6SummaryAddress',
    'OspfArea',
    'OspfAreaFilterList',
    'OspfAreaRange',
    'OspfAreaVirtualLink',
    'OspfAreaVirtualLinkMd5Key',
    'OspfDistributeList',
    'OspfNeighbor',
    'OspfNetwork',
    'OspfOspfInterface',
    'OspfOspfInterfaceMd5Key',
    'OspfPassiveInterface',
    'OspfRedistribute',
    'OspfSummaryAddress',
    'Policy6Dstaddr',
    'Policy6InternetServiceCustom',
    'Policy6InternetServiceId',
    'Policy6Srcaddr',
    'PolicyDst',
    'PolicyDstaddr',
    'PolicyInputDevice',
    'PolicyInternetServiceCustom',
    'PolicyInternetServiceId',
    'PolicySrc',
    'PolicySrcaddr',
    'Prefixlist6Rule',
    'PrefixlistRule',
    'RipDistance',
    'RipDistributeList',
    'RipInterface',
    'RipNeighbor',
    'RipNetwork',
    'RipOffsetList',
    'RipPassiveInterface',
    'RipRedistribute',
    'RipngAggregateAddress',
    'RipngDistance',
    'RipngDistributeList',
    'RipngInterface',
    'RipngNeighbor',
    'RipngNetwork',
    'RipngOffsetList',
    'RipngPassiveInterface',
    'RipngRedistribute',
    'RoutemapRule',
    'RoutemapRuleSetAspath',
    'RoutemapRuleSetCommunity',
    'RoutemapRuleSetExtcommunityRt',
    'RoutemapRuleSetExtcommunitySoo',
    'Static6SdwanZone',
    'StaticSdwanZone',
    'GetAccesslist6RuleResult',
    'GetAccesslistRuleResult',
    'GetAspathlistRuleResult',
    'GetBfd6MultihopTemplateResult',
    'GetBfd6NeighborResult',
    'GetBfdMultihopTemplateResult',
    'GetBfdNeighborResult',
    'GetBgpAdminDistanceResult',
    'GetBgpAggregateAddress6Result',
    'GetBgpAggregateAddressResult',
    'GetBgpConfederationPeerResult',
    'GetBgpNeighborResult',
    'GetBgpNeighborConditionalAdvertise6Result',
    'GetBgpNeighborConditionalAdvertiseResult',
    'GetBgpNeighborGroupResult',
    'GetBgpNeighborRange6Result',
    'GetBgpNeighborRangeResult',
    'GetBgpNetwork6Result',
    'GetBgpNetworkResult',
    'GetBgpRedistribute6Result',
    'GetBgpRedistributeResult',
    'GetBgpVrf6Result',
    'GetBgpVrf6ExportRtResult',
    'GetBgpVrf6ImportRtResult',
    'GetBgpVrf6LeakTargetResult',
    'GetBgpVrfResult',
    'GetBgpVrfExportRtResult',
    'GetBgpVrfImportRtResult',
    'GetBgpVrfLeak6Result',
    'GetBgpVrfLeak6TargetResult',
    'GetBgpVrfLeakResult',
    'GetBgpVrfLeakTargetResult',
    'GetCommunitylistRuleResult',
    'GetIsisIsisInterfaceResult',
    'GetIsisIsisNetResult',
    'GetIsisRedistribute6Result',
    'GetIsisRedistributeResult',
    'GetIsisSummaryAddress6Result',
    'GetIsisSummaryAddressResult',
    'GetKeychainKeyResult',
    'GetMulticast6InterfaceResult',
    'GetMulticast6PimSmGlobalResult',
    'GetMulticast6PimSmGlobalRpAddressResult',
    'GetMulticastInterfaceResult',
    'GetMulticastInterfaceIgmpResult',
    'GetMulticastInterfaceJoinGroupResult',
    'GetMulticastPimSmGlobalResult',
    'GetMulticastPimSmGlobalRpAddressResult',
    'GetMulticastflowFlowResult',
    'GetOspf6AreaResult',
    'GetOspf6AreaIpsecKeyResult',
    'GetOspf6AreaRangeResult',
    'GetOspf6AreaVirtualLinkResult',
    'GetOspf6AreaVirtualLinkIpsecKeyResult',
    'GetOspf6Ospf6InterfaceResult',
    'GetOspf6Ospf6InterfaceIpsecKeyResult',
    'GetOspf6Ospf6InterfaceNeighborResult',
    'GetOspf6PassiveInterfaceResult',
    'GetOspf6RedistributeResult',
    'GetOspf6SummaryAddressResult',
    'GetOspfAreaResult',
    'GetOspfAreaFilterListResult',
    'GetOspfAreaRangeResult',
    'GetOspfAreaVirtualLinkResult',
    'GetOspfAreaVirtualLinkMd5KeyResult',
    'GetOspfDistributeListResult',
    'GetOspfNeighborResult',
    'GetOspfNetworkResult',
    'GetOspfOspfInterfaceResult',
    'GetOspfOspfInterfaceMd5KeyResult',
    'GetOspfPassiveInterfaceResult',
    'GetOspfRedistributeResult',
    'GetOspfSummaryAddressResult',
    'GetPolicy6DstaddrResult',
    'GetPolicy6InternetServiceCustomResult',
    'GetPolicy6InternetServiceIdResult',
    'GetPolicy6SrcaddrResult',
    'GetPolicyDstResult',
    'GetPolicyDstaddrResult',
    'GetPolicyInputDeviceResult',
    'GetPolicyInternetServiceCustomResult',
    'GetPolicyInternetServiceIdResult',
    'GetPolicySrcResult',
    'GetPolicySrcaddrResult',
    'GetPrefixlist6RuleResult',
    'GetPrefixlistRuleResult',
    'GetRipDistanceResult',
    'GetRipDistributeListResult',
    'GetRipInterfaceResult',
    'GetRipNeighborResult',
    'GetRipNetworkResult',
    'GetRipOffsetListResult',
    'GetRipPassiveInterfaceResult',
    'GetRipRedistributeResult',
    'GetRipngAggregateAddressResult',
    'GetRipngDistanceResult',
    'GetRipngDistributeListResult',
    'GetRipngInterfaceResult',
    'GetRipngNeighborResult',
    'GetRipngNetworkResult',
    'GetRipngOffsetListResult',
    'GetRipngPassiveInterfaceResult',
    'GetRipngRedistributeResult',
    'GetRoutemapRuleResult',
    'GetRoutemapRuleSetAspathResult',
    'GetRoutemapRuleSetCommunityResult',
    'GetRoutemapRuleSetExtcommunityRtResult',
    'GetRoutemapRuleSetExtcommunitySooResult',
    'GetStatic6SdwanZoneResult',
    'GetStaticSdwanZoneResult',
]

@pulumi.output_type
class Accesslist6Rule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Accesslist6Rule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Accesslist6Rule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Accesslist6Rule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 exact_match: Optional[str] = None,
                 flags: Optional[int] = None,
                 id: Optional[int] = None,
                 prefix6: Optional[str] = None):
        """
        :param str action: Permit or deny this IP address and netmask prefix. Valid values: `permit`, `deny`.
        :param str exact_match: Enable/disable exact prefix match. Valid values: `enable`, `disable`.
        :param int flags: Flags.
        :param int id: Rule ID.
        :param str prefix6: IPv6 prefix to define regular filter criteria, such as "any" or subnets.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Permit or deny this IP address and netmask prefix. Valid values: `permit`, `deny`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        """
        Enable/disable exact prefix match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        """
        IPv6 prefix to define regular filter criteria, such as "any" or subnets.
        """
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class AccesslistRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccesslistRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccesslistRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccesslistRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 exact_match: Optional[str] = None,
                 flags: Optional[int] = None,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None,
                 wildcard: Optional[str] = None):
        """
        :param str action: Permit or deny this IP address and netmask prefix.
        :param str exact_match: Enable/disable exact match.
        :param int flags: Flags.
        :param int id: Rule ID.
        :param str prefix: IPv4 prefix to define regular filter criteria, such as "any" or subnets.
        :param str wildcard: Wildcard to define Cisco-style wildcard filter criteria.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Permit or deny this IP address and netmask prefix.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        """
        Enable/disable exact match.
        """
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        IPv4 prefix to define regular filter criteria, such as "any" or subnets.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[str]:
        """
        Wildcard to define Cisco-style wildcard filter criteria.
        """
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class AspathlistRule(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 regexp: Optional[str] = None):
        """
        :param str action: Permit or deny route-based operations, based on the route's AS_PATH attribute. Valid values: `deny`, `permit`.
        :param int id: ID.
        :param str regexp: Regular-expression to match the Border Gateway Protocol (BGP) AS paths.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Permit or deny route-based operations, based on the route's AS_PATH attribute. Valid values: `deny`, `permit`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def regexp(self) -> Optional[str]:
        """
        Regular-expression to match the Border Gateway Protocol (BGP) AS paths.
        """
        return pulumi.get(self, "regexp")


@pulumi.output_type
class Bfd6MultihopTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMode":
            suggest = "auth_mode"
        elif key == "bfdDesiredMinTx":
            suggest = "bfd_desired_min_tx"
        elif key == "bfdDetectMult":
            suggest = "bfd_detect_mult"
        elif key == "bfdRequiredMinRx":
            suggest = "bfd_required_min_rx"
        elif key == "md5Key":
            suggest = "md5_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Bfd6MultihopTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Bfd6MultihopTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Bfd6MultihopTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_mode: Optional[str] = None,
                 bfd_desired_min_tx: Optional[int] = None,
                 bfd_detect_mult: Optional[int] = None,
                 bfd_required_min_rx: Optional[int] = None,
                 dst: Optional[str] = None,
                 id: Optional[int] = None,
                 md5_key: Optional[str] = None,
                 src: Optional[str] = None):
        """
        :param str auth_mode: Authentication mode. Valid values: `none`, `md5`.
        :param int bfd_desired_min_tx: BFD desired minimal transmit interval (milliseconds).
        :param int bfd_detect_mult: BFD detection multiplier.
        :param int bfd_required_min_rx: BFD required minimal receive interval (milliseconds).
        :param str dst: Destination prefix.
        :param int id: ID.
        :param str md5_key: MD5 key of key ID 1.
        :param str src: Source prefix.
        """
        if auth_mode is not None:
            pulumi.set(__self__, "auth_mode", auth_mode)
        if bfd_desired_min_tx is not None:
            pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        if bfd_detect_mult is not None:
            pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        if bfd_required_min_rx is not None:
            pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if src is not None:
            pulumi.set(__self__, "src", src)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> Optional[str]:
        """
        Authentication mode. Valid values: `none`, `md5`.
        """
        return pulumi.get(self, "auth_mode")

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> Optional[int]:
        """
        BFD desired minimal transmit interval (milliseconds).
        """
        return pulumi.get(self, "bfd_desired_min_tx")

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> Optional[int]:
        """
        BFD detection multiplier.
        """
        return pulumi.get(self, "bfd_detect_mult")

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> Optional[int]:
        """
        BFD required minimal receive interval (milliseconds).
        """
        return pulumi.get(self, "bfd_required_min_rx")

    @property
    @pulumi.getter
    def dst(self) -> Optional[str]:
        """
        Destination prefix.
        """
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[str]:
        """
        MD5 key of key ID 1.
        """
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter
    def src(self) -> Optional[str]:
        """
        Source prefix.
        """
        return pulumi.get(self, "src")


@pulumi.output_type
class Bfd6Neighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ip6Address":
            suggest = "ip6_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Bfd6Neighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Bfd6Neighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Bfd6Neighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface: Optional[str] = None,
                 ip6_address: Optional[str] = None):
        """
        :param str interface: Interface to the BFD neighbor.
        :param str ip6_address: IPv6 address of the BFD neighbor.
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip6_address is not None:
            pulumi.set(__self__, "ip6_address", ip6_address)

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Interface to the BFD neighbor.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> Optional[str]:
        """
        IPv6 address of the BFD neighbor.
        """
        return pulumi.get(self, "ip6_address")


@pulumi.output_type
class BfdMultihopTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMode":
            suggest = "auth_mode"
        elif key == "bfdDesiredMinTx":
            suggest = "bfd_desired_min_tx"
        elif key == "bfdDetectMult":
            suggest = "bfd_detect_mult"
        elif key == "bfdRequiredMinRx":
            suggest = "bfd_required_min_rx"
        elif key == "md5Key":
            suggest = "md5_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BfdMultihopTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BfdMultihopTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BfdMultihopTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_mode: Optional[str] = None,
                 bfd_desired_min_tx: Optional[int] = None,
                 bfd_detect_mult: Optional[int] = None,
                 bfd_required_min_rx: Optional[int] = None,
                 dst: Optional[str] = None,
                 id: Optional[int] = None,
                 md5_key: Optional[str] = None,
                 src: Optional[str] = None):
        """
        :param str auth_mode: Authentication mode. Valid values: `none`, `md5`.
        :param int bfd_desired_min_tx: BFD desired minimal transmit interval (milliseconds).
        :param int bfd_detect_mult: BFD detection multiplier.
        :param int bfd_required_min_rx: BFD required minimal receive interval (milliseconds).
        :param str dst: Destination prefix.
        :param int id: ID.
        :param str md5_key: MD5 key of key ID 1.
        :param str src: Source prefix.
        """
        if auth_mode is not None:
            pulumi.set(__self__, "auth_mode", auth_mode)
        if bfd_desired_min_tx is not None:
            pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        if bfd_detect_mult is not None:
            pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        if bfd_required_min_rx is not None:
            pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if src is not None:
            pulumi.set(__self__, "src", src)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> Optional[str]:
        """
        Authentication mode. Valid values: `none`, `md5`.
        """
        return pulumi.get(self, "auth_mode")

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> Optional[int]:
        """
        BFD desired minimal transmit interval (milliseconds).
        """
        return pulumi.get(self, "bfd_desired_min_tx")

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> Optional[int]:
        """
        BFD detection multiplier.
        """
        return pulumi.get(self, "bfd_detect_mult")

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> Optional[int]:
        """
        BFD required minimal receive interval (milliseconds).
        """
        return pulumi.get(self, "bfd_required_min_rx")

    @property
    @pulumi.getter
    def dst(self) -> Optional[str]:
        """
        Destination prefix.
        """
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[str]:
        """
        MD5 key of key ID 1.
        """
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter
    def src(self) -> Optional[str]:
        """
        Source prefix.
        """
        return pulumi.get(self, "src")


@pulumi.output_type
class BfdNeighbor(dict):
    def __init__(__self__, *,
                 interface: Optional[str] = None,
                 ip: Optional[str] = None):
        """
        :param str interface: Interface name.
        :param str ip: IPv4 address of the BFD neighbor.
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IPv4 address of the BFD neighbor.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class BgpAdminDistance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "neighbourPrefix":
            suggest = "neighbour_prefix"
        elif key == "routeList":
            suggest = "route_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpAdminDistance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpAdminDistance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpAdminDistance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 distance: Optional[int] = None,
                 id: Optional[int] = None,
                 neighbour_prefix: Optional[str] = None,
                 route_list: Optional[str] = None):
        """
        :param int distance: Administrative distance to apply (1 - 255).
        :param int id: ID.
        :param str neighbour_prefix: Neighbor address prefix.
        :param str route_list: Access list of routes to apply new distance to.
        """
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if neighbour_prefix is not None:
            pulumi.set(__self__, "neighbour_prefix", neighbour_prefix)
        if route_list is not None:
            pulumi.set(__self__, "route_list", route_list)

    @property
    @pulumi.getter
    def distance(self) -> Optional[int]:
        """
        Administrative distance to apply (1 - 255).
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="neighbourPrefix")
    def neighbour_prefix(self) -> Optional[str]:
        """
        Neighbor address prefix.
        """
        return pulumi.get(self, "neighbour_prefix")

    @property
    @pulumi.getter(name="routeList")
    def route_list(self) -> Optional[str]:
        """
        Access list of routes to apply new distance to.
        """
        return pulumi.get(self, "route_list")


@pulumi.output_type
class BgpAggregateAddress6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asSet":
            suggest = "as_set"
        elif key == "summaryOnly":
            suggest = "summary_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpAggregateAddress6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpAggregateAddress6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpAggregateAddress6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_set: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix6: Optional[str] = None,
                 summary_only: Optional[str] = None):
        """
        :param str as_set: Enable/disable generate AS set path information. Valid values: `enable`, `disable`.
        :param int id: ID.
        :param str prefix6: Aggregate IPv6 prefix.
        :param str summary_only: Enable/disable filter more specific routes from updates. Valid values: `enable`, `disable`.
        """
        if as_set is not None:
            pulumi.set(__self__, "as_set", as_set)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)

    @property
    @pulumi.getter(name="asSet")
    def as_set(self) -> Optional[str]:
        """
        Enable/disable generate AS set path information. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_set")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        """
        Aggregate IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")

    @property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[str]:
        """
        Enable/disable filter more specific routes from updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "summary_only")


@pulumi.output_type
class BgpAggregateAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asSet":
            suggest = "as_set"
        elif key == "summaryOnly":
            suggest = "summary_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpAggregateAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpAggregateAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpAggregateAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_set: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None,
                 summary_only: Optional[str] = None):
        """
        :param str as_set: Enable/disable generate AS set path information. Valid values: `enable`, `disable`.
        :param int id: ID.
        :param str prefix: Aggregate prefix.
        :param str summary_only: Enable/disable filter more specific routes from updates. Valid values: `enable`, `disable`.
        """
        if as_set is not None:
            pulumi.set(__self__, "as_set", as_set)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)

    @property
    @pulumi.getter(name="asSet")
    def as_set(self) -> Optional[str]:
        """
        Enable/disable generate AS set path information. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_set")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Aggregate prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[str]:
        """
        Enable/disable filter more specific routes from updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "summary_only")


@pulumi.output_type
class BgpConfederationPeer(dict):
    def __init__(__self__, *,
                 peer: Optional[str] = None):
        """
        :param str peer: Peer ID.
        """
        if peer is not None:
            pulumi.set(__self__, "peer", peer)

    @property
    @pulumi.getter
    def peer(self) -> Optional[str]:
        """
        Peer ID.
        """
        return pulumi.get(self, "peer")


@pulumi.output_type
class BgpNeighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activateEvpn":
            suggest = "activate_evpn"
        elif key == "activateVpnv4":
            suggest = "activate_vpnv4"
        elif key == "activateVpnv6":
            suggest = "activate_vpnv6"
        elif key == "additionalPath":
            suggest = "additional_path"
        elif key == "additionalPath6":
            suggest = "additional_path6"
        elif key == "additionalPathVpnv4":
            suggest = "additional_path_vpnv4"
        elif key == "additionalPathVpnv6":
            suggest = "additional_path_vpnv6"
        elif key == "advAdditionalPath":
            suggest = "adv_additional_path"
        elif key == "advAdditionalPath6":
            suggest = "adv_additional_path6"
        elif key == "advAdditionalPathVpnv4":
            suggest = "adv_additional_path_vpnv4"
        elif key == "advAdditionalPathVpnv6":
            suggest = "adv_additional_path_vpnv6"
        elif key == "advertisementInterval":
            suggest = "advertisement_interval"
        elif key == "allowasIn":
            suggest = "allowas_in"
        elif key == "allowasIn6":
            suggest = "allowas_in6"
        elif key == "allowasInEnable":
            suggest = "allowas_in_enable"
        elif key == "allowasInEnable6":
            suggest = "allowas_in_enable6"
        elif key == "allowasInEnableEvpn":
            suggest = "allowas_in_enable_evpn"
        elif key == "allowasInEnableVpnv4":
            suggest = "allowas_in_enable_vpnv4"
        elif key == "allowasInEnableVpnv6":
            suggest = "allowas_in_enable_vpnv6"
        elif key == "allowasInEvpn":
            suggest = "allowas_in_evpn"
        elif key == "allowasInVpnv4":
            suggest = "allowas_in_vpnv4"
        elif key == "allowasInVpnv6":
            suggest = "allowas_in_vpnv6"
        elif key == "asOverride":
            suggest = "as_override"
        elif key == "asOverride6":
            suggest = "as_override6"
        elif key == "attributeUnchanged":
            suggest = "attribute_unchanged"
        elif key == "attributeUnchanged6":
            suggest = "attribute_unchanged6"
        elif key == "attributeUnchangedVpnv4":
            suggest = "attribute_unchanged_vpnv4"
        elif key == "attributeUnchangedVpnv6":
            suggest = "attribute_unchanged_vpnv6"
        elif key == "authOptions":
            suggest = "auth_options"
        elif key == "capabilityDefaultOriginate":
            suggest = "capability_default_originate"
        elif key == "capabilityDefaultOriginate6":
            suggest = "capability_default_originate6"
        elif key == "capabilityDynamic":
            suggest = "capability_dynamic"
        elif key == "capabilityGracefulRestart":
            suggest = "capability_graceful_restart"
        elif key == "capabilityGracefulRestart6":
            suggest = "capability_graceful_restart6"
        elif key == "capabilityGracefulRestartEvpn":
            suggest = "capability_graceful_restart_evpn"
        elif key == "capabilityGracefulRestartVpnv4":
            suggest = "capability_graceful_restart_vpnv4"
        elif key == "capabilityGracefulRestartVpnv6":
            suggest = "capability_graceful_restart_vpnv6"
        elif key == "capabilityOrf":
            suggest = "capability_orf"
        elif key == "capabilityOrf6":
            suggest = "capability_orf6"
        elif key == "capabilityRouteRefresh":
            suggest = "capability_route_refresh"
        elif key == "conditionalAdvertise6s":
            suggest = "conditional_advertise6s"
        elif key == "conditionalAdvertises":
            suggest = "conditional_advertises"
        elif key == "connectTimer":
            suggest = "connect_timer"
        elif key == "defaultOriginateRoutemap":
            suggest = "default_originate_routemap"
        elif key == "defaultOriginateRoutemap6":
            suggest = "default_originate_routemap6"
        elif key == "distributeListIn":
            suggest = "distribute_list_in"
        elif key == "distributeListIn6":
            suggest = "distribute_list_in6"
        elif key == "distributeListInVpnv4":
            suggest = "distribute_list_in_vpnv4"
        elif key == "distributeListInVpnv6":
            suggest = "distribute_list_in_vpnv6"
        elif key == "distributeListOut":
            suggest = "distribute_list_out"
        elif key == "distributeListOut6":
            suggest = "distribute_list_out6"
        elif key == "distributeListOutVpnv4":
            suggest = "distribute_list_out_vpnv4"
        elif key == "distributeListOutVpnv6":
            suggest = "distribute_list_out_vpnv6"
        elif key == "dontCapabilityNegotiate":
            suggest = "dont_capability_negotiate"
        elif key == "ebgpEnforceMultihop":
            suggest = "ebgp_enforce_multihop"
        elif key == "ebgpMultihopTtl":
            suggest = "ebgp_multihop_ttl"
        elif key == "filterListIn":
            suggest = "filter_list_in"
        elif key == "filterListIn6":
            suggest = "filter_list_in6"
        elif key == "filterListInVpnv4":
            suggest = "filter_list_in_vpnv4"
        elif key == "filterListInVpnv6":
            suggest = "filter_list_in_vpnv6"
        elif key == "filterListOut":
            suggest = "filter_list_out"
        elif key == "filterListOut6":
            suggest = "filter_list_out6"
        elif key == "filterListOutVpnv4":
            suggest = "filter_list_out_vpnv4"
        elif key == "filterListOutVpnv6":
            suggest = "filter_list_out_vpnv6"
        elif key == "holdtimeTimer":
            suggest = "holdtime_timer"
        elif key == "keepAliveTimer":
            suggest = "keep_alive_timer"
        elif key == "linkDownFailover":
            suggest = "link_down_failover"
        elif key == "localAs":
            suggest = "local_as"
        elif key == "localAsNoPrepend":
            suggest = "local_as_no_prepend"
        elif key == "localAsReplaceAs":
            suggest = "local_as_replace_as"
        elif key == "maximumPrefix":
            suggest = "maximum_prefix"
        elif key == "maximumPrefix6":
            suggest = "maximum_prefix6"
        elif key == "maximumPrefixEvpn":
            suggest = "maximum_prefix_evpn"
        elif key == "maximumPrefixThreshold":
            suggest = "maximum_prefix_threshold"
        elif key == "maximumPrefixThreshold6":
            suggest = "maximum_prefix_threshold6"
        elif key == "maximumPrefixThresholdEvpn":
            suggest = "maximum_prefix_threshold_evpn"
        elif key == "maximumPrefixThresholdVpnv4":
            suggest = "maximum_prefix_threshold_vpnv4"
        elif key == "maximumPrefixThresholdVpnv6":
            suggest = "maximum_prefix_threshold_vpnv6"
        elif key == "maximumPrefixVpnv4":
            suggest = "maximum_prefix_vpnv4"
        elif key == "maximumPrefixVpnv6":
            suggest = "maximum_prefix_vpnv6"
        elif key == "maximumPrefixWarningOnly":
            suggest = "maximum_prefix_warning_only"
        elif key == "maximumPrefixWarningOnly6":
            suggest = "maximum_prefix_warning_only6"
        elif key == "maximumPrefixWarningOnlyEvpn":
            suggest = "maximum_prefix_warning_only_evpn"
        elif key == "maximumPrefixWarningOnlyVpnv4":
            suggest = "maximum_prefix_warning_only_vpnv4"
        elif key == "maximumPrefixWarningOnlyVpnv6":
            suggest = "maximum_prefix_warning_only_vpnv6"
        elif key == "nextHopSelf":
            suggest = "next_hop_self"
        elif key == "nextHopSelf6":
            suggest = "next_hop_self6"
        elif key == "nextHopSelfRr":
            suggest = "next_hop_self_rr"
        elif key == "nextHopSelfRr6":
            suggest = "next_hop_self_rr6"
        elif key == "nextHopSelfVpnv4":
            suggest = "next_hop_self_vpnv4"
        elif key == "nextHopSelfVpnv6":
            suggest = "next_hop_self_vpnv6"
        elif key == "overrideCapability":
            suggest = "override_capability"
        elif key == "prefixListIn":
            suggest = "prefix_list_in"
        elif key == "prefixListIn6":
            suggest = "prefix_list_in6"
        elif key == "prefixListInVpnv4":
            suggest = "prefix_list_in_vpnv4"
        elif key == "prefixListInVpnv6":
            suggest = "prefix_list_in_vpnv6"
        elif key == "prefixListOut":
            suggest = "prefix_list_out"
        elif key == "prefixListOut6":
            suggest = "prefix_list_out6"
        elif key == "prefixListOutVpnv4":
            suggest = "prefix_list_out_vpnv4"
        elif key == "prefixListOutVpnv6":
            suggest = "prefix_list_out_vpnv6"
        elif key == "remoteAs":
            suggest = "remote_as"
        elif key == "removePrivateAs":
            suggest = "remove_private_as"
        elif key == "removePrivateAs6":
            suggest = "remove_private_as6"
        elif key == "removePrivateAsEvpn":
            suggest = "remove_private_as_evpn"
        elif key == "removePrivateAsVpnv4":
            suggest = "remove_private_as_vpnv4"
        elif key == "removePrivateAsVpnv6":
            suggest = "remove_private_as_vpnv6"
        elif key == "restartTime":
            suggest = "restart_time"
        elif key == "retainStaleTime":
            suggest = "retain_stale_time"
        elif key == "routeMapIn":
            suggest = "route_map_in"
        elif key == "routeMapIn6":
            suggest = "route_map_in6"
        elif key == "routeMapInEvpn":
            suggest = "route_map_in_evpn"
        elif key == "routeMapInVpnv4":
            suggest = "route_map_in_vpnv4"
        elif key == "routeMapInVpnv6":
            suggest = "route_map_in_vpnv6"
        elif key == "routeMapOut":
            suggest = "route_map_out"
        elif key == "routeMapOut6":
            suggest = "route_map_out6"
        elif key == "routeMapOut6Preferable":
            suggest = "route_map_out6_preferable"
        elif key == "routeMapOutEvpn":
            suggest = "route_map_out_evpn"
        elif key == "routeMapOutPreferable":
            suggest = "route_map_out_preferable"
        elif key == "routeMapOutVpnv4":
            suggest = "route_map_out_vpnv4"
        elif key == "routeMapOutVpnv4Preferable":
            suggest = "route_map_out_vpnv4_preferable"
        elif key == "routeMapOutVpnv6":
            suggest = "route_map_out_vpnv6"
        elif key == "routeMapOutVpnv6Preferable":
            suggest = "route_map_out_vpnv6_preferable"
        elif key == "routeReflectorClient":
            suggest = "route_reflector_client"
        elif key == "routeReflectorClient6":
            suggest = "route_reflector_client6"
        elif key == "routeReflectorClientEvpn":
            suggest = "route_reflector_client_evpn"
        elif key == "routeReflectorClientVpnv4":
            suggest = "route_reflector_client_vpnv4"
        elif key == "routeReflectorClientVpnv6":
            suggest = "route_reflector_client_vpnv6"
        elif key == "routeServerClient":
            suggest = "route_server_client"
        elif key == "routeServerClient6":
            suggest = "route_server_client6"
        elif key == "routeServerClientEvpn":
            suggest = "route_server_client_evpn"
        elif key == "routeServerClientVpnv4":
            suggest = "route_server_client_vpnv4"
        elif key == "routeServerClientVpnv6":
            suggest = "route_server_client_vpnv6"
        elif key == "sendCommunity":
            suggest = "send_community"
        elif key == "sendCommunity6":
            suggest = "send_community6"
        elif key == "sendCommunityEvpn":
            suggest = "send_community_evpn"
        elif key == "sendCommunityVpnv4":
            suggest = "send_community_vpnv4"
        elif key == "sendCommunityVpnv6":
            suggest = "send_community_vpnv6"
        elif key == "softReconfiguration":
            suggest = "soft_reconfiguration"
        elif key == "softReconfiguration6":
            suggest = "soft_reconfiguration6"
        elif key == "softReconfigurationEvpn":
            suggest = "soft_reconfiguration_evpn"
        elif key == "softReconfigurationVpnv4":
            suggest = "soft_reconfiguration_vpnv4"
        elif key == "softReconfigurationVpnv6":
            suggest = "soft_reconfiguration_vpnv6"
        elif key == "staleRoute":
            suggest = "stale_route"
        elif key == "strictCapabilityMatch":
            suggest = "strict_capability_match"
        elif key == "unsuppressMap":
            suggest = "unsuppress_map"
        elif key == "unsuppressMap6":
            suggest = "unsuppress_map6"
        elif key == "updateSource":
            suggest = "update_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpNeighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpNeighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpNeighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activate: Optional[str] = None,
                 activate6: Optional[str] = None,
                 activate_evpn: Optional[str] = None,
                 activate_vpnv4: Optional[str] = None,
                 activate_vpnv6: Optional[str] = None,
                 additional_path: Optional[str] = None,
                 additional_path6: Optional[str] = None,
                 additional_path_vpnv4: Optional[str] = None,
                 additional_path_vpnv6: Optional[str] = None,
                 adv_additional_path: Optional[int] = None,
                 adv_additional_path6: Optional[int] = None,
                 adv_additional_path_vpnv4: Optional[int] = None,
                 adv_additional_path_vpnv6: Optional[int] = None,
                 advertisement_interval: Optional[int] = None,
                 allowas_in: Optional[int] = None,
                 allowas_in6: Optional[int] = None,
                 allowas_in_enable: Optional[str] = None,
                 allowas_in_enable6: Optional[str] = None,
                 allowas_in_enable_evpn: Optional[str] = None,
                 allowas_in_enable_vpnv4: Optional[str] = None,
                 allowas_in_enable_vpnv6: Optional[str] = None,
                 allowas_in_evpn: Optional[int] = None,
                 allowas_in_vpnv4: Optional[int] = None,
                 allowas_in_vpnv6: Optional[int] = None,
                 as_override: Optional[str] = None,
                 as_override6: Optional[str] = None,
                 attribute_unchanged: Optional[str] = None,
                 attribute_unchanged6: Optional[str] = None,
                 attribute_unchanged_vpnv4: Optional[str] = None,
                 attribute_unchanged_vpnv6: Optional[str] = None,
                 auth_options: Optional[str] = None,
                 bfd: Optional[str] = None,
                 capability_default_originate: Optional[str] = None,
                 capability_default_originate6: Optional[str] = None,
                 capability_dynamic: Optional[str] = None,
                 capability_graceful_restart: Optional[str] = None,
                 capability_graceful_restart6: Optional[str] = None,
                 capability_graceful_restart_evpn: Optional[str] = None,
                 capability_graceful_restart_vpnv4: Optional[str] = None,
                 capability_graceful_restart_vpnv6: Optional[str] = None,
                 capability_orf: Optional[str] = None,
                 capability_orf6: Optional[str] = None,
                 capability_route_refresh: Optional[str] = None,
                 conditional_advertise6s: Optional[Sequence['outputs.BgpNeighborConditionalAdvertise6']] = None,
                 conditional_advertises: Optional[Sequence['outputs.BgpNeighborConditionalAdvertise']] = None,
                 connect_timer: Optional[int] = None,
                 default_originate_routemap: Optional[str] = None,
                 default_originate_routemap6: Optional[str] = None,
                 description: Optional[str] = None,
                 distribute_list_in: Optional[str] = None,
                 distribute_list_in6: Optional[str] = None,
                 distribute_list_in_vpnv4: Optional[str] = None,
                 distribute_list_in_vpnv6: Optional[str] = None,
                 distribute_list_out: Optional[str] = None,
                 distribute_list_out6: Optional[str] = None,
                 distribute_list_out_vpnv4: Optional[str] = None,
                 distribute_list_out_vpnv6: Optional[str] = None,
                 dont_capability_negotiate: Optional[str] = None,
                 ebgp_enforce_multihop: Optional[str] = None,
                 ebgp_multihop_ttl: Optional[int] = None,
                 filter_list_in: Optional[str] = None,
                 filter_list_in6: Optional[str] = None,
                 filter_list_in_vpnv4: Optional[str] = None,
                 filter_list_in_vpnv6: Optional[str] = None,
                 filter_list_out: Optional[str] = None,
                 filter_list_out6: Optional[str] = None,
                 filter_list_out_vpnv4: Optional[str] = None,
                 filter_list_out_vpnv6: Optional[str] = None,
                 holdtime_timer: Optional[int] = None,
                 interface: Optional[str] = None,
                 ip: Optional[str] = None,
                 keep_alive_timer: Optional[int] = None,
                 link_down_failover: Optional[str] = None,
                 local_as: Optional[int] = None,
                 local_as_no_prepend: Optional[str] = None,
                 local_as_replace_as: Optional[str] = None,
                 maximum_prefix: Optional[int] = None,
                 maximum_prefix6: Optional[int] = None,
                 maximum_prefix_evpn: Optional[int] = None,
                 maximum_prefix_threshold: Optional[int] = None,
                 maximum_prefix_threshold6: Optional[int] = None,
                 maximum_prefix_threshold_evpn: Optional[int] = None,
                 maximum_prefix_threshold_vpnv4: Optional[int] = None,
                 maximum_prefix_threshold_vpnv6: Optional[int] = None,
                 maximum_prefix_vpnv4: Optional[int] = None,
                 maximum_prefix_vpnv6: Optional[int] = None,
                 maximum_prefix_warning_only: Optional[str] = None,
                 maximum_prefix_warning_only6: Optional[str] = None,
                 maximum_prefix_warning_only_evpn: Optional[str] = None,
                 maximum_prefix_warning_only_vpnv4: Optional[str] = None,
                 maximum_prefix_warning_only_vpnv6: Optional[str] = None,
                 next_hop_self: Optional[str] = None,
                 next_hop_self6: Optional[str] = None,
                 next_hop_self_rr: Optional[str] = None,
                 next_hop_self_rr6: Optional[str] = None,
                 next_hop_self_vpnv4: Optional[str] = None,
                 next_hop_self_vpnv6: Optional[str] = None,
                 override_capability: Optional[str] = None,
                 passive: Optional[str] = None,
                 password: Optional[str] = None,
                 prefix_list_in: Optional[str] = None,
                 prefix_list_in6: Optional[str] = None,
                 prefix_list_in_vpnv4: Optional[str] = None,
                 prefix_list_in_vpnv6: Optional[str] = None,
                 prefix_list_out: Optional[str] = None,
                 prefix_list_out6: Optional[str] = None,
                 prefix_list_out_vpnv4: Optional[str] = None,
                 prefix_list_out_vpnv6: Optional[str] = None,
                 remote_as: Optional[int] = None,
                 remove_private_as: Optional[str] = None,
                 remove_private_as6: Optional[str] = None,
                 remove_private_as_evpn: Optional[str] = None,
                 remove_private_as_vpnv4: Optional[str] = None,
                 remove_private_as_vpnv6: Optional[str] = None,
                 restart_time: Optional[int] = None,
                 retain_stale_time: Optional[int] = None,
                 route_map_in: Optional[str] = None,
                 route_map_in6: Optional[str] = None,
                 route_map_in_evpn: Optional[str] = None,
                 route_map_in_vpnv4: Optional[str] = None,
                 route_map_in_vpnv6: Optional[str] = None,
                 route_map_out: Optional[str] = None,
                 route_map_out6: Optional[str] = None,
                 route_map_out6_preferable: Optional[str] = None,
                 route_map_out_evpn: Optional[str] = None,
                 route_map_out_preferable: Optional[str] = None,
                 route_map_out_vpnv4: Optional[str] = None,
                 route_map_out_vpnv4_preferable: Optional[str] = None,
                 route_map_out_vpnv6: Optional[str] = None,
                 route_map_out_vpnv6_preferable: Optional[str] = None,
                 route_reflector_client: Optional[str] = None,
                 route_reflector_client6: Optional[str] = None,
                 route_reflector_client_evpn: Optional[str] = None,
                 route_reflector_client_vpnv4: Optional[str] = None,
                 route_reflector_client_vpnv6: Optional[str] = None,
                 route_server_client: Optional[str] = None,
                 route_server_client6: Optional[str] = None,
                 route_server_client_evpn: Optional[str] = None,
                 route_server_client_vpnv4: Optional[str] = None,
                 route_server_client_vpnv6: Optional[str] = None,
                 send_community: Optional[str] = None,
                 send_community6: Optional[str] = None,
                 send_community_evpn: Optional[str] = None,
                 send_community_vpnv4: Optional[str] = None,
                 send_community_vpnv6: Optional[str] = None,
                 shutdown: Optional[str] = None,
                 soft_reconfiguration: Optional[str] = None,
                 soft_reconfiguration6: Optional[str] = None,
                 soft_reconfiguration_evpn: Optional[str] = None,
                 soft_reconfiguration_vpnv4: Optional[str] = None,
                 soft_reconfiguration_vpnv6: Optional[str] = None,
                 stale_route: Optional[str] = None,
                 strict_capability_match: Optional[str] = None,
                 unsuppress_map: Optional[str] = None,
                 unsuppress_map6: Optional[str] = None,
                 update_source: Optional[str] = None,
                 weight: Optional[int] = None):
        """
        :param str activate: Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        :param str activate6: Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        :param str activate_evpn: Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
        :param str activate_vpnv4: Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
        :param str activate_vpnv6: Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
        :param str additional_path: Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param str additional_path6: Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param str additional_path_vpnv4: Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param str additional_path_vpnv6: Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param int adv_additional_path: Number of IPv4 additional paths that can be advertised to this neighbor.
        :param int adv_additional_path6: Number of IPv6 additional paths that can be advertised to this neighbor.
        :param int adv_additional_path_vpnv4: Number of VPNv4 additional paths that can be advertised to this neighbor.
        :param int adv_additional_path_vpnv6: Number of VPNv6 additional paths that can be advertised to this neighbor.
        :param int advertisement_interval: Minimum interval (sec) between sending updates.
        :param int allowas_in: IPv4 The maximum number of occurrence of my AS number allowed.
        :param int allowas_in6: IPv6 The maximum number of occurrence of my AS number allowed.
        :param str allowas_in_enable: Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param str allowas_in_enable6: Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param str allowas_in_enable_evpn: Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
        :param str allowas_in_enable_vpnv4: Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
        :param str allowas_in_enable_vpnv6: Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
        :param int allowas_in_evpn: The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        :param int allowas_in_vpnv4: The maximum number of occurrence of my AS number allowed for VPNv4 route.
        :param int allowas_in_vpnv6: The maximum number of occurrence of my AS number allowed for VPNv6 route.
        :param str as_override: Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        :param str as_override6: Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        :param str attribute_unchanged: IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param str attribute_unchanged6: IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param str attribute_unchanged_vpnv4: List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
        :param str attribute_unchanged_vpnv6: List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
        :param str auth_options: Key-chain name for TCP authentication options.
        :param str bfd: Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        :param str capability_default_originate: Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_default_originate6: Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_dynamic: Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_graceful_restart: Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_graceful_restart6: Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_graceful_restart_evpn: Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_graceful_restart_vpnv4: Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_graceful_restart_vpnv6: Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_orf: Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param str capability_orf6: Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param str capability_route_refresh: Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        :param Sequence['BgpNeighborConditionalAdvertise6Args'] conditional_advertise6s: IPv6 conditional advertisement. The structure of `conditional_advertise6` block is documented below.
        :param Sequence['BgpNeighborConditionalAdvertiseArgs'] conditional_advertises: Conditional advertisement. The structure of `conditional_advertise` block is documented below.
        :param int connect_timer: Interval (sec) for connect timer.
        :param str default_originate_routemap: Route map to specify criteria to originate IPv4 default.
        :param str default_originate_routemap6: Route map to specify criteria to originate IPv6 default.
        :param str description: Description.
        :param str distribute_list_in: Filter for IPv4 updates from this neighbor.
        :param str distribute_list_in6: Filter for IPv6 updates from this neighbor.
        :param str distribute_list_in_vpnv4: Filter for VPNv4 updates from this neighbor.
        :param str distribute_list_in_vpnv6: Filter for VPNv6 updates from this neighbor.
        :param str distribute_list_out: Filter for IPv4 updates to this neighbor.
        :param str distribute_list_out6: Filter for IPv6 updates to this neighbor.
        :param str distribute_list_out_vpnv4: Filter for VPNv4 updates to this neighbor.
        :param str distribute_list_out_vpnv6: Filter for VPNv6 updates to this neighbor.
        :param str dont_capability_negotiate: Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        :param str ebgp_enforce_multihop: Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        :param int ebgp_multihop_ttl: EBGP multihop TTL for this peer.
        :param str filter_list_in: BGP filter for IPv4 inbound routes.
        :param str filter_list_in6: BGP filter for IPv6 inbound routes.
        :param str filter_list_in_vpnv4: BGP filter for VPNv4 inbound routes.
        :param str filter_list_in_vpnv6: BGP filter for VPNv6 inbound routes.
        :param str filter_list_out: BGP filter for IPv4 outbound routes.
        :param str filter_list_out6: BGP filter for IPv6 outbound routes.
        :param str filter_list_out_vpnv4: BGP filter for VPNv4 outbound routes.
        :param str filter_list_out_vpnv6: BGP filter for VPNv6 outbound routes.
        :param int holdtime_timer: Interval (sec) before peer considered dead.
        :param str interface: Interface
        :param str ip: IP/IPv6 address of neighbor.
        :param int keep_alive_timer: Keep alive timer interval (sec).
        :param str link_down_failover: Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        :param int local_as: Local AS number of neighbor.
        :param str local_as_no_prepend: Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        :param str local_as_replace_as: Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        :param int maximum_prefix: Maximum number of IPv4 prefixes to accept from this peer.
        :param int maximum_prefix6: Maximum number of IPv6 prefixes to accept from this peer.
        :param int maximum_prefix_evpn: Maximum number of L2VPN EVPN prefixes to accept from this peer.
        :param int maximum_prefix_threshold: Maximum IPv4 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold6: Maximum IPv6 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold_evpn: Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold_vpnv4: Maximum VPNv4 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold_vpnv6: Maximum VPNv6 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_vpnv4: Maximum number of VPNv4 prefixes to accept from this peer.
        :param int maximum_prefix_vpnv6: Maximum number of VPNv6 prefixes to accept from this peer.
        :param str maximum_prefix_warning_only: Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param str maximum_prefix_warning_only6: Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param str maximum_prefix_warning_only_evpn: Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
        :param str maximum_prefix_warning_only_vpnv4: Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
        :param str maximum_prefix_warning_only_vpnv6: Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
        :param str next_hop_self: Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param str next_hop_self6: Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param str next_hop_self_rr: Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param str next_hop_self_rr6: Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param str next_hop_self_vpnv4: Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
        :param str next_hop_self_vpnv6: Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
        :param str override_capability: Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        :param str passive: Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        :param str password: Password used in MD5 authentication.
        :param str prefix_list_in: IPv4 Inbound filter for updates from this neighbor.
        :param str prefix_list_in6: IPv6 Inbound filter for updates from this neighbor.
        :param str prefix_list_in_vpnv4: Inbound filter for VPNv4 updates from this neighbor.
        :param str prefix_list_in_vpnv6: Inbound filter for VPNv6 updates from this neighbor.
        :param str prefix_list_out: IPv4 Outbound filter for updates to this neighbor.
        :param str prefix_list_out6: IPv6 Outbound filter for updates to this neighbor.
        :param str prefix_list_out_vpnv4: Outbound filter for VPNv4 updates to this neighbor.
        :param str prefix_list_out_vpnv6: Outbound filter for VPNv6 updates to this neighbor.
        :param int remote_as: AS number of neighbor.
        :param str remove_private_as: Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        :param str remove_private_as6: Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        :param str remove_private_as_evpn: Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
        :param str remove_private_as_vpnv4: Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
        :param str remove_private_as_vpnv6: Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
        :param int restart_time: Graceful restart delay time (sec, 0 = global default).
        :param int retain_stale_time: Time to retain stale routes.
        :param str route_map_in: IPv4 Inbound route map filter.
        :param str route_map_in6: IPv6 Inbound route map filter.
        :param str route_map_in_evpn: L2VPN EVPN inbound route map filter.
        :param str route_map_in_vpnv4: VPNv4 inbound route map filter.
        :param str route_map_in_vpnv6: VPNv6 inbound route map filter.
        :param str route_map_out: IPv4 Outbound route map filter.
        :param str route_map_out6: IPv6 Outbound route map filter.
        :param str route_map_out6_preferable: IPv6 outbound route map filter if the peer is preferred.
        :param str route_map_out_evpn: L2VPN EVPN outbound route map filter.
        :param str route_map_out_preferable: IPv4 outbound route map filter if the peer is preferred.
        :param str route_map_out_vpnv4: VPNv4 outbound route map filter.
        :param str route_map_out_vpnv4_preferable: VPNv4 outbound route map filter if the peer is preferred.
        :param str route_map_out_vpnv6: VPNv6 outbound route map filter.
        :param str route_map_out_vpnv6_preferable: VPNv6 outbound route map filter if this neighbor is preferred.
        :param str route_reflector_client: Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        :param str route_reflector_client6: Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        :param str route_reflector_client_evpn: Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param str route_reflector_client_vpnv4: Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param str route_reflector_client_vpnv6: Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param str route_server_client: Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        :param str route_server_client6: Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        :param str route_server_client_evpn: Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param str route_server_client_vpnv4: Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param str route_server_client_vpnv6: Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param str send_community: IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param str send_community6: IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param str send_community_evpn: Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param str send_community_vpnv4: Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param str send_community_vpnv6: Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param str shutdown: Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        :param str soft_reconfiguration: Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param str soft_reconfiguration6: Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param str soft_reconfiguration_evpn: Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param str soft_reconfiguration_vpnv4: Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param str soft_reconfiguration_vpnv6: Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param str stale_route: Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        :param str strict_capability_match: Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        :param str unsuppress_map: IPv4 Route map to selectively unsuppress suppressed routes.
        :param str unsuppress_map6: IPv6 Route map to selectively unsuppress suppressed routes.
        :param str update_source: Interface to use as source IP/IPv6 address of TCP connections.
        :param int weight: Neighbor weight.
        """
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if activate6 is not None:
            pulumi.set(__self__, "activate6", activate6)
        if activate_evpn is not None:
            pulumi.set(__self__, "activate_evpn", activate_evpn)
        if activate_vpnv4 is not None:
            pulumi.set(__self__, "activate_vpnv4", activate_vpnv4)
        if activate_vpnv6 is not None:
            pulumi.set(__self__, "activate_vpnv6", activate_vpnv6)
        if additional_path is not None:
            pulumi.set(__self__, "additional_path", additional_path)
        if additional_path6 is not None:
            pulumi.set(__self__, "additional_path6", additional_path6)
        if additional_path_vpnv4 is not None:
            pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        if additional_path_vpnv6 is not None:
            pulumi.set(__self__, "additional_path_vpnv6", additional_path_vpnv6)
        if adv_additional_path is not None:
            pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        if adv_additional_path6 is not None:
            pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        if adv_additional_path_vpnv4 is not None:
            pulumi.set(__self__, "adv_additional_path_vpnv4", adv_additional_path_vpnv4)
        if adv_additional_path_vpnv6 is not None:
            pulumi.set(__self__, "adv_additional_path_vpnv6", adv_additional_path_vpnv6)
        if advertisement_interval is not None:
            pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        if allowas_in is not None:
            pulumi.set(__self__, "allowas_in", allowas_in)
        if allowas_in6 is not None:
            pulumi.set(__self__, "allowas_in6", allowas_in6)
        if allowas_in_enable is not None:
            pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        if allowas_in_enable6 is not None:
            pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        if allowas_in_enable_evpn is not None:
            pulumi.set(__self__, "allowas_in_enable_evpn", allowas_in_enable_evpn)
        if allowas_in_enable_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_enable_vpnv4", allowas_in_enable_vpnv4)
        if allowas_in_enable_vpnv6 is not None:
            pulumi.set(__self__, "allowas_in_enable_vpnv6", allowas_in_enable_vpnv6)
        if allowas_in_evpn is not None:
            pulumi.set(__self__, "allowas_in_evpn", allowas_in_evpn)
        if allowas_in_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_vpnv4", allowas_in_vpnv4)
        if allowas_in_vpnv6 is not None:
            pulumi.set(__self__, "allowas_in_vpnv6", allowas_in_vpnv6)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override6 is not None:
            pulumi.set(__self__, "as_override6", as_override6)
        if attribute_unchanged is not None:
            pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        if attribute_unchanged6 is not None:
            pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        if attribute_unchanged_vpnv4 is not None:
            pulumi.set(__self__, "attribute_unchanged_vpnv4", attribute_unchanged_vpnv4)
        if attribute_unchanged_vpnv6 is not None:
            pulumi.set(__self__, "attribute_unchanged_vpnv6", attribute_unchanged_vpnv6)
        if auth_options is not None:
            pulumi.set(__self__, "auth_options", auth_options)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if capability_default_originate is not None:
            pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        if capability_default_originate6 is not None:
            pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        if capability_dynamic is not None:
            pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        if capability_graceful_restart is not None:
            pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        if capability_graceful_restart6 is not None:
            pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        if capability_graceful_restart_evpn is not None:
            pulumi.set(__self__, "capability_graceful_restart_evpn", capability_graceful_restart_evpn)
        if capability_graceful_restart_vpnv4 is not None:
            pulumi.set(__self__, "capability_graceful_restart_vpnv4", capability_graceful_restart_vpnv4)
        if capability_graceful_restart_vpnv6 is not None:
            pulumi.set(__self__, "capability_graceful_restart_vpnv6", capability_graceful_restart_vpnv6)
        if capability_orf is not None:
            pulumi.set(__self__, "capability_orf", capability_orf)
        if capability_orf6 is not None:
            pulumi.set(__self__, "capability_orf6", capability_orf6)
        if capability_route_refresh is not None:
            pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        if conditional_advertise6s is not None:
            pulumi.set(__self__, "conditional_advertise6s", conditional_advertise6s)
        if conditional_advertises is not None:
            pulumi.set(__self__, "conditional_advertises", conditional_advertises)
        if connect_timer is not None:
            pulumi.set(__self__, "connect_timer", connect_timer)
        if default_originate_routemap is not None:
            pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        if default_originate_routemap6 is not None:
            pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distribute_list_in is not None:
            pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        if distribute_list_in6 is not None:
            pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        if distribute_list_in_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_in_vpnv4", distribute_list_in_vpnv4)
        if distribute_list_in_vpnv6 is not None:
            pulumi.set(__self__, "distribute_list_in_vpnv6", distribute_list_in_vpnv6)
        if distribute_list_out is not None:
            pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        if distribute_list_out6 is not None:
            pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        if distribute_list_out_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_out_vpnv4", distribute_list_out_vpnv4)
        if distribute_list_out_vpnv6 is not None:
            pulumi.set(__self__, "distribute_list_out_vpnv6", distribute_list_out_vpnv6)
        if dont_capability_negotiate is not None:
            pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        if ebgp_enforce_multihop is not None:
            pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        if ebgp_multihop_ttl is not None:
            pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        if filter_list_in is not None:
            pulumi.set(__self__, "filter_list_in", filter_list_in)
        if filter_list_in6 is not None:
            pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        if filter_list_in_vpnv4 is not None:
            pulumi.set(__self__, "filter_list_in_vpnv4", filter_list_in_vpnv4)
        if filter_list_in_vpnv6 is not None:
            pulumi.set(__self__, "filter_list_in_vpnv6", filter_list_in_vpnv6)
        if filter_list_out is not None:
            pulumi.set(__self__, "filter_list_out", filter_list_out)
        if filter_list_out6 is not None:
            pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        if filter_list_out_vpnv4 is not None:
            pulumi.set(__self__, "filter_list_out_vpnv4", filter_list_out_vpnv4)
        if filter_list_out_vpnv6 is not None:
            pulumi.set(__self__, "filter_list_out_vpnv6", filter_list_out_vpnv6)
        if holdtime_timer is not None:
            pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if keep_alive_timer is not None:
            pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        if link_down_failover is not None:
            pulumi.set(__self__, "link_down_failover", link_down_failover)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_no_prepend is not None:
            pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        if local_as_replace_as is not None:
            pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        if maximum_prefix is not None:
            pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        if maximum_prefix6 is not None:
            pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        if maximum_prefix_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_evpn", maximum_prefix_evpn)
        if maximum_prefix_threshold is not None:
            pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        if maximum_prefix_threshold6 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        if maximum_prefix_threshold_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_evpn", maximum_prefix_threshold_evpn)
        if maximum_prefix_threshold_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_vpnv4", maximum_prefix_threshold_vpnv4)
        if maximum_prefix_threshold_vpnv6 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_vpnv6", maximum_prefix_threshold_vpnv6)
        if maximum_prefix_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_vpnv4", maximum_prefix_vpnv4)
        if maximum_prefix_vpnv6 is not None:
            pulumi.set(__self__, "maximum_prefix_vpnv6", maximum_prefix_vpnv6)
        if maximum_prefix_warning_only is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        if maximum_prefix_warning_only6 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        if maximum_prefix_warning_only_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_evpn", maximum_prefix_warning_only_evpn)
        if maximum_prefix_warning_only_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_vpnv4", maximum_prefix_warning_only_vpnv4)
        if maximum_prefix_warning_only_vpnv6 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_vpnv6", maximum_prefix_warning_only_vpnv6)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self6 is not None:
            pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        if next_hop_self_rr is not None:
            pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        if next_hop_self_rr6 is not None:
            pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        if next_hop_self_vpnv4 is not None:
            pulumi.set(__self__, "next_hop_self_vpnv4", next_hop_self_vpnv4)
        if next_hop_self_vpnv6 is not None:
            pulumi.set(__self__, "next_hop_self_vpnv6", next_hop_self_vpnv6)
        if override_capability is not None:
            pulumi.set(__self__, "override_capability", override_capability)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if prefix_list_in is not None:
            pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        if prefix_list_in6 is not None:
            pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        if prefix_list_in_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_in_vpnv4", prefix_list_in_vpnv4)
        if prefix_list_in_vpnv6 is not None:
            pulumi.set(__self__, "prefix_list_in_vpnv6", prefix_list_in_vpnv6)
        if prefix_list_out is not None:
            pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        if prefix_list_out6 is not None:
            pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        if prefix_list_out_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_out_vpnv4", prefix_list_out_vpnv4)
        if prefix_list_out_vpnv6 is not None:
            pulumi.set(__self__, "prefix_list_out_vpnv6", prefix_list_out_vpnv6)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remove_private_as is not None:
            pulumi.set(__self__, "remove_private_as", remove_private_as)
        if remove_private_as6 is not None:
            pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        if remove_private_as_evpn is not None:
            pulumi.set(__self__, "remove_private_as_evpn", remove_private_as_evpn)
        if remove_private_as_vpnv4 is not None:
            pulumi.set(__self__, "remove_private_as_vpnv4", remove_private_as_vpnv4)
        if remove_private_as_vpnv6 is not None:
            pulumi.set(__self__, "remove_private_as_vpnv6", remove_private_as_vpnv6)
        if restart_time is not None:
            pulumi.set(__self__, "restart_time", restart_time)
        if retain_stale_time is not None:
            pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        if route_map_in is not None:
            pulumi.set(__self__, "route_map_in", route_map_in)
        if route_map_in6 is not None:
            pulumi.set(__self__, "route_map_in6", route_map_in6)
        if route_map_in_evpn is not None:
            pulumi.set(__self__, "route_map_in_evpn", route_map_in_evpn)
        if route_map_in_vpnv4 is not None:
            pulumi.set(__self__, "route_map_in_vpnv4", route_map_in_vpnv4)
        if route_map_in_vpnv6 is not None:
            pulumi.set(__self__, "route_map_in_vpnv6", route_map_in_vpnv6)
        if route_map_out is not None:
            pulumi.set(__self__, "route_map_out", route_map_out)
        if route_map_out6 is not None:
            pulumi.set(__self__, "route_map_out6", route_map_out6)
        if route_map_out6_preferable is not None:
            pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        if route_map_out_evpn is not None:
            pulumi.set(__self__, "route_map_out_evpn", route_map_out_evpn)
        if route_map_out_preferable is not None:
            pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        if route_map_out_vpnv4 is not None:
            pulumi.set(__self__, "route_map_out_vpnv4", route_map_out_vpnv4)
        if route_map_out_vpnv4_preferable is not None:
            pulumi.set(__self__, "route_map_out_vpnv4_preferable", route_map_out_vpnv4_preferable)
        if route_map_out_vpnv6 is not None:
            pulumi.set(__self__, "route_map_out_vpnv6", route_map_out_vpnv6)
        if route_map_out_vpnv6_preferable is not None:
            pulumi.set(__self__, "route_map_out_vpnv6_preferable", route_map_out_vpnv6_preferable)
        if route_reflector_client is not None:
            pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        if route_reflector_client6 is not None:
            pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        if route_reflector_client_evpn is not None:
            pulumi.set(__self__, "route_reflector_client_evpn", route_reflector_client_evpn)
        if route_reflector_client_vpnv4 is not None:
            pulumi.set(__self__, "route_reflector_client_vpnv4", route_reflector_client_vpnv4)
        if route_reflector_client_vpnv6 is not None:
            pulumi.set(__self__, "route_reflector_client_vpnv6", route_reflector_client_vpnv6)
        if route_server_client is not None:
            pulumi.set(__self__, "route_server_client", route_server_client)
        if route_server_client6 is not None:
            pulumi.set(__self__, "route_server_client6", route_server_client6)
        if route_server_client_evpn is not None:
            pulumi.set(__self__, "route_server_client_evpn", route_server_client_evpn)
        if route_server_client_vpnv4 is not None:
            pulumi.set(__self__, "route_server_client_vpnv4", route_server_client_vpnv4)
        if route_server_client_vpnv6 is not None:
            pulumi.set(__self__, "route_server_client_vpnv6", route_server_client_vpnv6)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community6 is not None:
            pulumi.set(__self__, "send_community6", send_community6)
        if send_community_evpn is not None:
            pulumi.set(__self__, "send_community_evpn", send_community_evpn)
        if send_community_vpnv4 is not None:
            pulumi.set(__self__, "send_community_vpnv4", send_community_vpnv4)
        if send_community_vpnv6 is not None:
            pulumi.set(__self__, "send_community_vpnv6", send_community_vpnv6)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if soft_reconfiguration is not None:
            pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        if soft_reconfiguration6 is not None:
            pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        if soft_reconfiguration_evpn is not None:
            pulumi.set(__self__, "soft_reconfiguration_evpn", soft_reconfiguration_evpn)
        if soft_reconfiguration_vpnv4 is not None:
            pulumi.set(__self__, "soft_reconfiguration_vpnv4", soft_reconfiguration_vpnv4)
        if soft_reconfiguration_vpnv6 is not None:
            pulumi.set(__self__, "soft_reconfiguration_vpnv6", soft_reconfiguration_vpnv6)
        if stale_route is not None:
            pulumi.set(__self__, "stale_route", stale_route)
        if strict_capability_match is not None:
            pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        if unsuppress_map is not None:
            pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        if unsuppress_map6 is not None:
            pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        if update_source is not None:
            pulumi.set(__self__, "update_source", update_source)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activate(self) -> Optional[str]:
        """
        Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter
    def activate6(self) -> Optional[str]:
        """
        Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate6")

    @property
    @pulumi.getter(name="activateEvpn")
    def activate_evpn(self) -> Optional[str]:
        """
        Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_evpn")

    @property
    @pulumi.getter(name="activateVpnv4")
    def activate_vpnv4(self) -> Optional[str]:
        """
        Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_vpnv4")

    @property
    @pulumi.getter(name="activateVpnv6")
    def activate_vpnv6(self) -> Optional[str]:
        """
        Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_vpnv6")

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> Optional[str]:
        """
        Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path")

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> Optional[str]:
        """
        Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path6")

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> Optional[str]:
        """
        Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv4")

    @property
    @pulumi.getter(name="additionalPathVpnv6")
    def additional_path_vpnv6(self) -> Optional[str]:
        """
        Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv6")

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> Optional[int]:
        """
        Number of IPv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path")

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> Optional[int]:
        """
        Number of IPv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path6")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv4")
    def adv_additional_path_vpnv4(self) -> Optional[int]:
        """
        Number of VPNv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv4")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv6")
    def adv_additional_path_vpnv6(self) -> Optional[int]:
        """
        Number of VPNv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv6")

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> Optional[int]:
        """
        Minimum interval (sec) between sending updates.
        """
        return pulumi.get(self, "advertisement_interval")

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> Optional[int]:
        """
        IPv4 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in")

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> Optional[int]:
        """
        IPv6 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in6")

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> Optional[str]:
        """
        Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable")

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> Optional[str]:
        """
        Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable6")

    @property
    @pulumi.getter(name="allowasInEnableEvpn")
    def allowas_in_enable_evpn(self) -> Optional[str]:
        """
        Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_evpn")

    @property
    @pulumi.getter(name="allowasInEnableVpnv4")
    def allowas_in_enable_vpnv4(self) -> Optional[str]:
        """
        Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv4")

    @property
    @pulumi.getter(name="allowasInEnableVpnv6")
    def allowas_in_enable_vpnv6(self) -> Optional[str]:
        """
        Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv6")

    @property
    @pulumi.getter(name="allowasInEvpn")
    def allowas_in_evpn(self) -> Optional[int]:
        """
        The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        """
        return pulumi.get(self, "allowas_in_evpn")

    @property
    @pulumi.getter(name="allowasInVpnv4")
    def allowas_in_vpnv4(self) -> Optional[int]:
        """
        The maximum number of occurrence of my AS number allowed for VPNv4 route.
        """
        return pulumi.get(self, "allowas_in_vpnv4")

    @property
    @pulumi.getter(name="allowasInVpnv6")
    def allowas_in_vpnv6(self) -> Optional[int]:
        """
        The maximum number of occurrence of my AS number allowed for VPNv6 route.
        """
        return pulumi.get(self, "allowas_in_vpnv6")

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[str]:
        """
        Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_override")

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> Optional[str]:
        """
        Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_override6")

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> Optional[str]:
        """
        IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged")

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> Optional[str]:
        """
        IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged6")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv4")
    def attribute_unchanged_vpnv4(self) -> Optional[str]:
        """
        List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv4")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv6")
    def attribute_unchanged_vpnv6(self) -> Optional[str]:
        """
        List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv6")

    @property
    @pulumi.getter(name="authOptions")
    def auth_options(self) -> Optional[str]:
        """
        Key-chain name for TCP authentication options.
        """
        return pulumi.get(self, "auth_options")

    @property
    @pulumi.getter
    def bfd(self) -> Optional[str]:
        """
        Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> Optional[str]:
        """
        Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_default_originate")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> Optional[str]:
        """
        Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_default_originate6")

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> Optional[str]:
        """
        Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_dynamic")

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> Optional[str]:
        """
        Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart")

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> Optional[str]:
        """
        Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart6")

    @property
    @pulumi.getter(name="capabilityGracefulRestartEvpn")
    def capability_graceful_restart_evpn(self) -> Optional[str]:
        """
        Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_evpn")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv4")
    def capability_graceful_restart_vpnv4(self) -> Optional[str]:
        """
        Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv4")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv6")
    def capability_graceful_restart_vpnv6(self) -> Optional[str]:
        """
        Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv6")

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> Optional[str]:
        """
        Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        """
        return pulumi.get(self, "capability_orf")

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> Optional[str]:
        """
        Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        """
        return pulumi.get(self, "capability_orf6")

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> Optional[str]:
        """
        Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_route_refresh")

    @property
    @pulumi.getter(name="conditionalAdvertise6s")
    def conditional_advertise6s(self) -> Optional[Sequence['outputs.BgpNeighborConditionalAdvertise6']]:
        """
        IPv6 conditional advertisement. The structure of `conditional_advertise6` block is documented below.
        """
        return pulumi.get(self, "conditional_advertise6s")

    @property
    @pulumi.getter(name="conditionalAdvertises")
    def conditional_advertises(self) -> Optional[Sequence['outputs.BgpNeighborConditionalAdvertise']]:
        """
        Conditional advertisement. The structure of `conditional_advertise` block is documented below.
        """
        return pulumi.get(self, "conditional_advertises")

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> Optional[int]:
        """
        Interval (sec) for connect timer.
        """
        return pulumi.get(self, "connect_timer")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> Optional[str]:
        """
        Route map to specify criteria to originate IPv4 default.
        """
        return pulumi.get(self, "default_originate_routemap")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> Optional[str]:
        """
        Route map to specify criteria to originate IPv6 default.
        """
        return pulumi.get(self, "default_originate_routemap6")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> Optional[str]:
        """
        Filter for IPv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in")

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> Optional[str]:
        """
        Filter for IPv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in6")

    @property
    @pulumi.getter(name="distributeListInVpnv4")
    def distribute_list_in_vpnv4(self) -> Optional[str]:
        """
        Filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv4")

    @property
    @pulumi.getter(name="distributeListInVpnv6")
    def distribute_list_in_vpnv6(self) -> Optional[str]:
        """
        Filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv6")

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> Optional[str]:
        """
        Filter for IPv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out")

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> Optional[str]:
        """
        Filter for IPv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out6")

    @property
    @pulumi.getter(name="distributeListOutVpnv4")
    def distribute_list_out_vpnv4(self) -> Optional[str]:
        """
        Filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv4")

    @property
    @pulumi.getter(name="distributeListOutVpnv6")
    def distribute_list_out_vpnv6(self) -> Optional[str]:
        """
        Filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv6")

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> Optional[str]:
        """
        Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_capability_negotiate")

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> Optional[str]:
        """
        Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ebgp_enforce_multihop")

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> Optional[int]:
        """
        EBGP multihop TTL for this peer.
        """
        return pulumi.get(self, "ebgp_multihop_ttl")

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> Optional[str]:
        """
        BGP filter for IPv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in")

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> Optional[str]:
        """
        BGP filter for IPv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in6")

    @property
    @pulumi.getter(name="filterListInVpnv4")
    def filter_list_in_vpnv4(self) -> Optional[str]:
        """
        BGP filter for VPNv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv4")

    @property
    @pulumi.getter(name="filterListInVpnv6")
    def filter_list_in_vpnv6(self) -> Optional[str]:
        """
        BGP filter for VPNv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv6")

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> Optional[str]:
        """
        BGP filter for IPv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out")

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> Optional[str]:
        """
        BGP filter for IPv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out6")

    @property
    @pulumi.getter(name="filterListOutVpnv4")
    def filter_list_out_vpnv4(self) -> Optional[str]:
        """
        BGP filter for VPNv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv4")

    @property
    @pulumi.getter(name="filterListOutVpnv6")
    def filter_list_out_vpnv6(self) -> Optional[str]:
        """
        BGP filter for VPNv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv6")

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> Optional[int]:
        """
        Interval (sec) before peer considered dead.
        """
        return pulumi.get(self, "holdtime_timer")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Interface
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IP/IPv6 address of neighbor.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> Optional[int]:
        """
        Keep alive timer interval (sec).
        """
        return pulumi.get(self, "keep_alive_timer")

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> Optional[str]:
        """
        Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_down_failover")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[int]:
        """
        Local AS number of neighbor.
        """
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> Optional[str]:
        """
        Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_as_no_prepend")

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> Optional[str]:
        """
        Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_as_replace_as")

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> Optional[int]:
        """
        Maximum number of IPv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix")

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> Optional[int]:
        """
        Maximum number of IPv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix6")

    @property
    @pulumi.getter(name="maximumPrefixEvpn")
    def maximum_prefix_evpn(self) -> Optional[int]:
        """
        Maximum number of L2VPN EVPN prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> Optional[int]:
        """
        Maximum IPv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold")

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> Optional[int]:
        """
        Maximum IPv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold6")

    @property
    @pulumi.getter(name="maximumPrefixThresholdEvpn")
    def maximum_prefix_threshold_evpn(self) -> Optional[int]:
        """
        Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv4")
    def maximum_prefix_threshold_vpnv4(self) -> Optional[int]:
        """
        Maximum VPNv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv6")
    def maximum_prefix_threshold_vpnv6(self) -> Optional[int]:
        """
        Maximum VPNv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv6")

    @property
    @pulumi.getter(name="maximumPrefixVpnv4")
    def maximum_prefix_vpnv4(self) -> Optional[int]:
        """
        Maximum number of VPNv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixVpnv6")
    def maximum_prefix_vpnv6(self) -> Optional[int]:
        """
        Maximum number of VPNv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> Optional[str]:
        """
        Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> Optional[str]:
        """
        Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyEvpn")
    def maximum_prefix_warning_only_evpn(self) -> Optional[str]:
        """
        Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_evpn")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv4")
    def maximum_prefix_warning_only_vpnv4(self) -> Optional[str]:
        """
        Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv6")
    def maximum_prefix_warning_only_vpnv6(self) -> Optional[str]:
        """
        Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv6")

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[str]:
        """
        Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self")

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> Optional[str]:
        """
        Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self6")

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> Optional[str]:
        """
        Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_rr")

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> Optional[str]:
        """
        Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_rr6")

    @property
    @pulumi.getter(name="nextHopSelfVpnv4")
    def next_hop_self_vpnv4(self) -> Optional[str]:
        """
        Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_vpnv4")

    @property
    @pulumi.getter(name="nextHopSelfVpnv6")
    def next_hop_self_vpnv6(self) -> Optional[str]:
        """
        Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_vpnv6")

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> Optional[str]:
        """
        Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_capability")

    @property
    @pulumi.getter
    def passive(self) -> Optional[str]:
        """
        Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password used in MD5 authentication.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> Optional[str]:
        """
        IPv4 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in")

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> Optional[str]:
        """
        IPv6 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in6")

    @property
    @pulumi.getter(name="prefixListInVpnv4")
    def prefix_list_in_vpnv4(self) -> Optional[str]:
        """
        Inbound filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv4")

    @property
    @pulumi.getter(name="prefixListInVpnv6")
    def prefix_list_in_vpnv6(self) -> Optional[str]:
        """
        Inbound filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv6")

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> Optional[str]:
        """
        IPv4 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out")

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> Optional[str]:
        """
        IPv6 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out6")

    @property
    @pulumi.getter(name="prefixListOutVpnv4")
    def prefix_list_out_vpnv4(self) -> Optional[str]:
        """
        Outbound filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv4")

    @property
    @pulumi.getter(name="prefixListOutVpnv6")
    def prefix_list_out_vpnv6(self) -> Optional[str]:
        """
        Outbound filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv6")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[int]:
        """
        AS number of neighbor.
        """
        return pulumi.get(self, "remote_as")

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> Optional[str]:
        """
        Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as")

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> Optional[str]:
        """
        Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as6")

    @property
    @pulumi.getter(name="removePrivateAsEvpn")
    def remove_private_as_evpn(self) -> Optional[str]:
        """
        Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_evpn")

    @property
    @pulumi.getter(name="removePrivateAsVpnv4")
    def remove_private_as_vpnv4(self) -> Optional[str]:
        """
        Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_vpnv4")

    @property
    @pulumi.getter(name="removePrivateAsVpnv6")
    def remove_private_as_vpnv6(self) -> Optional[str]:
        """
        Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_vpnv6")

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> Optional[int]:
        """
        Graceful restart delay time (sec, 0 = global default).
        """
        return pulumi.get(self, "restart_time")

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> Optional[int]:
        """
        Time to retain stale routes.
        """
        return pulumi.get(self, "retain_stale_time")

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> Optional[str]:
        """
        IPv4 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in")

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> Optional[str]:
        """
        IPv6 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in6")

    @property
    @pulumi.getter(name="routeMapInEvpn")
    def route_map_in_evpn(self) -> Optional[str]:
        """
        L2VPN EVPN inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_evpn")

    @property
    @pulumi.getter(name="routeMapInVpnv4")
    def route_map_in_vpnv4(self) -> Optional[str]:
        """
        VPNv4 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv4")

    @property
    @pulumi.getter(name="routeMapInVpnv6")
    def route_map_in_vpnv6(self) -> Optional[str]:
        """
        VPNv6 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv6")

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> Optional[str]:
        """
        IPv4 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out")

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> Optional[str]:
        """
        IPv6 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out6")

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> Optional[str]:
        """
        IPv6 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out6_preferable")

    @property
    @pulumi.getter(name="routeMapOutEvpn")
    def route_map_out_evpn(self) -> Optional[str]:
        """
        L2VPN EVPN outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_evpn")

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> Optional[str]:
        """
        IPv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv4")
    def route_map_out_vpnv4(self) -> Optional[str]:
        """
        VPNv4 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv4")

    @property
    @pulumi.getter(name="routeMapOutVpnv4Preferable")
    def route_map_out_vpnv4_preferable(self) -> Optional[str]:
        """
        VPNv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv4_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv6")
    def route_map_out_vpnv6(self) -> Optional[str]:
        """
        VPNv6 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv6")

    @property
    @pulumi.getter(name="routeMapOutVpnv6Preferable")
    def route_map_out_vpnv6_preferable(self) -> Optional[str]:
        """
        VPNv6 outbound route map filter if this neighbor is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv6_preferable")

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> Optional[str]:
        """
        Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client")

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> Optional[str]:
        """
        Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client6")

    @property
    @pulumi.getter(name="routeReflectorClientEvpn")
    def route_reflector_client_evpn(self) -> Optional[str]:
        """
        Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_evpn")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv4")
    def route_reflector_client_vpnv4(self) -> Optional[str]:
        """
        Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_vpnv4")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv6")
    def route_reflector_client_vpnv6(self) -> Optional[str]:
        """
        Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_vpnv6")

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> Optional[str]:
        """
        Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client")

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> Optional[str]:
        """
        Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client6")

    @property
    @pulumi.getter(name="routeServerClientEvpn")
    def route_server_client_evpn(self) -> Optional[str]:
        """
        Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_evpn")

    @property
    @pulumi.getter(name="routeServerClientVpnv4")
    def route_server_client_vpnv4(self) -> Optional[str]:
        """
        Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_vpnv4")

    @property
    @pulumi.getter(name="routeServerClientVpnv6")
    def route_server_client_vpnv6(self) -> Optional[str]:
        """
        Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_vpnv6")

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[str]:
        """
        IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community")

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> Optional[str]:
        """
        IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community6")

    @property
    @pulumi.getter(name="sendCommunityEvpn")
    def send_community_evpn(self) -> Optional[str]:
        """
        Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_evpn")

    @property
    @pulumi.getter(name="sendCommunityVpnv4")
    def send_community_vpnv4(self) -> Optional[str]:
        """
        Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_vpnv4")

    @property
    @pulumi.getter(name="sendCommunityVpnv6")
    def send_community_vpnv6(self) -> Optional[str]:
        """
        Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_vpnv6")

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[str]:
        """
        Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> Optional[str]:
        """
        Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration")

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> Optional[str]:
        """
        Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration6")

    @property
    @pulumi.getter(name="softReconfigurationEvpn")
    def soft_reconfiguration_evpn(self) -> Optional[str]:
        """
        Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_evpn")

    @property
    @pulumi.getter(name="softReconfigurationVpnv4")
    def soft_reconfiguration_vpnv4(self) -> Optional[str]:
        """
        Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv4")

    @property
    @pulumi.getter(name="softReconfigurationVpnv6")
    def soft_reconfiguration_vpnv6(self) -> Optional[str]:
        """
        Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv6")

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> Optional[str]:
        """
        Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "stale_route")

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> Optional[str]:
        """
        Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_capability_match")

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> Optional[str]:
        """
        IPv4 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map")

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> Optional[str]:
        """
        IPv6 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map6")

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> Optional[str]:
        """
        Interface to use as source IP/IPv6 address of TCP connections.
        """
        return pulumi.get(self, "update_source")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Neighbor weight.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class BgpNeighborConditionalAdvertise6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertiseRoutemap":
            suggest = "advertise_routemap"
        elif key == "conditionRoutemap":
            suggest = "condition_routemap"
        elif key == "conditionType":
            suggest = "condition_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpNeighborConditionalAdvertise6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpNeighborConditionalAdvertise6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpNeighborConditionalAdvertise6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertise_routemap: Optional[str] = None,
                 condition_routemap: Optional[str] = None,
                 condition_type: Optional[str] = None):
        """
        :param str advertise_routemap: Name of advertising route map.
        :param str condition_routemap: Name of condition route map.
        :param str condition_type: Type of condition. Valid values: `exist`, `non-exist`.
        """
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[str]:
        """
        Name of advertising route map.
        """
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[str]:
        """
        Name of condition route map.
        """
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[str]:
        """
        Type of condition. Valid values: `exist`, `non-exist`.
        """
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class BgpNeighborConditionalAdvertise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertiseRoutemap":
            suggest = "advertise_routemap"
        elif key == "conditionRoutemap":
            suggest = "condition_routemap"
        elif key == "conditionType":
            suggest = "condition_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpNeighborConditionalAdvertise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpNeighborConditionalAdvertise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpNeighborConditionalAdvertise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertise_routemap: Optional[str] = None,
                 condition_routemap: Optional[str] = None,
                 condition_type: Optional[str] = None):
        """
        :param str advertise_routemap: Name of advertising route map.
        :param str condition_routemap: Name of condition route map.
        :param str condition_type: Type of condition. Valid values: `exist`, `non-exist`.
        """
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[str]:
        """
        Name of advertising route map.
        """
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[str]:
        """
        Name of condition route map.
        """
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[str]:
        """
        Type of condition. Valid values: `exist`, `non-exist`.
        """
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class BgpNeighborGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activateEvpn":
            suggest = "activate_evpn"
        elif key == "activateVpnv4":
            suggest = "activate_vpnv4"
        elif key == "activateVpnv6":
            suggest = "activate_vpnv6"
        elif key == "additionalPath":
            suggest = "additional_path"
        elif key == "additionalPath6":
            suggest = "additional_path6"
        elif key == "additionalPathVpnv4":
            suggest = "additional_path_vpnv4"
        elif key == "additionalPathVpnv6":
            suggest = "additional_path_vpnv6"
        elif key == "advAdditionalPath":
            suggest = "adv_additional_path"
        elif key == "advAdditionalPath6":
            suggest = "adv_additional_path6"
        elif key == "advAdditionalPathVpnv4":
            suggest = "adv_additional_path_vpnv4"
        elif key == "advAdditionalPathVpnv6":
            suggest = "adv_additional_path_vpnv6"
        elif key == "advertisementInterval":
            suggest = "advertisement_interval"
        elif key == "allowasIn":
            suggest = "allowas_in"
        elif key == "allowasIn6":
            suggest = "allowas_in6"
        elif key == "allowasInEnable":
            suggest = "allowas_in_enable"
        elif key == "allowasInEnable6":
            suggest = "allowas_in_enable6"
        elif key == "allowasInEnableEvpn":
            suggest = "allowas_in_enable_evpn"
        elif key == "allowasInEnableVpnv4":
            suggest = "allowas_in_enable_vpnv4"
        elif key == "allowasInEnableVpnv6":
            suggest = "allowas_in_enable_vpnv6"
        elif key == "allowasInEvpn":
            suggest = "allowas_in_evpn"
        elif key == "allowasInVpnv4":
            suggest = "allowas_in_vpnv4"
        elif key == "allowasInVpnv6":
            suggest = "allowas_in_vpnv6"
        elif key == "asOverride":
            suggest = "as_override"
        elif key == "asOverride6":
            suggest = "as_override6"
        elif key == "attributeUnchanged":
            suggest = "attribute_unchanged"
        elif key == "attributeUnchanged6":
            suggest = "attribute_unchanged6"
        elif key == "attributeUnchangedVpnv4":
            suggest = "attribute_unchanged_vpnv4"
        elif key == "attributeUnchangedVpnv6":
            suggest = "attribute_unchanged_vpnv6"
        elif key == "authOptions":
            suggest = "auth_options"
        elif key == "capabilityDefaultOriginate":
            suggest = "capability_default_originate"
        elif key == "capabilityDefaultOriginate6":
            suggest = "capability_default_originate6"
        elif key == "capabilityDynamic":
            suggest = "capability_dynamic"
        elif key == "capabilityGracefulRestart":
            suggest = "capability_graceful_restart"
        elif key == "capabilityGracefulRestart6":
            suggest = "capability_graceful_restart6"
        elif key == "capabilityGracefulRestartEvpn":
            suggest = "capability_graceful_restart_evpn"
        elif key == "capabilityGracefulRestartVpnv4":
            suggest = "capability_graceful_restart_vpnv4"
        elif key == "capabilityGracefulRestartVpnv6":
            suggest = "capability_graceful_restart_vpnv6"
        elif key == "capabilityOrf":
            suggest = "capability_orf"
        elif key == "capabilityOrf6":
            suggest = "capability_orf6"
        elif key == "capabilityRouteRefresh":
            suggest = "capability_route_refresh"
        elif key == "connectTimer":
            suggest = "connect_timer"
        elif key == "defaultOriginateRoutemap":
            suggest = "default_originate_routemap"
        elif key == "defaultOriginateRoutemap6":
            suggest = "default_originate_routemap6"
        elif key == "distributeListIn":
            suggest = "distribute_list_in"
        elif key == "distributeListIn6":
            suggest = "distribute_list_in6"
        elif key == "distributeListInVpnv4":
            suggest = "distribute_list_in_vpnv4"
        elif key == "distributeListInVpnv6":
            suggest = "distribute_list_in_vpnv6"
        elif key == "distributeListOut":
            suggest = "distribute_list_out"
        elif key == "distributeListOut6":
            suggest = "distribute_list_out6"
        elif key == "distributeListOutVpnv4":
            suggest = "distribute_list_out_vpnv4"
        elif key == "distributeListOutVpnv6":
            suggest = "distribute_list_out_vpnv6"
        elif key == "dontCapabilityNegotiate":
            suggest = "dont_capability_negotiate"
        elif key == "ebgpEnforceMultihop":
            suggest = "ebgp_enforce_multihop"
        elif key == "ebgpMultihopTtl":
            suggest = "ebgp_multihop_ttl"
        elif key == "filterListIn":
            suggest = "filter_list_in"
        elif key == "filterListIn6":
            suggest = "filter_list_in6"
        elif key == "filterListInVpnv4":
            suggest = "filter_list_in_vpnv4"
        elif key == "filterListInVpnv6":
            suggest = "filter_list_in_vpnv6"
        elif key == "filterListOut":
            suggest = "filter_list_out"
        elif key == "filterListOut6":
            suggest = "filter_list_out6"
        elif key == "filterListOutVpnv4":
            suggest = "filter_list_out_vpnv4"
        elif key == "filterListOutVpnv6":
            suggest = "filter_list_out_vpnv6"
        elif key == "holdtimeTimer":
            suggest = "holdtime_timer"
        elif key == "keepAliveTimer":
            suggest = "keep_alive_timer"
        elif key == "linkDownFailover":
            suggest = "link_down_failover"
        elif key == "localAs":
            suggest = "local_as"
        elif key == "localAsNoPrepend":
            suggest = "local_as_no_prepend"
        elif key == "localAsReplaceAs":
            suggest = "local_as_replace_as"
        elif key == "maximumPrefix":
            suggest = "maximum_prefix"
        elif key == "maximumPrefix6":
            suggest = "maximum_prefix6"
        elif key == "maximumPrefixEvpn":
            suggest = "maximum_prefix_evpn"
        elif key == "maximumPrefixThreshold":
            suggest = "maximum_prefix_threshold"
        elif key == "maximumPrefixThreshold6":
            suggest = "maximum_prefix_threshold6"
        elif key == "maximumPrefixThresholdEvpn":
            suggest = "maximum_prefix_threshold_evpn"
        elif key == "maximumPrefixThresholdVpnv4":
            suggest = "maximum_prefix_threshold_vpnv4"
        elif key == "maximumPrefixThresholdVpnv6":
            suggest = "maximum_prefix_threshold_vpnv6"
        elif key == "maximumPrefixVpnv4":
            suggest = "maximum_prefix_vpnv4"
        elif key == "maximumPrefixVpnv6":
            suggest = "maximum_prefix_vpnv6"
        elif key == "maximumPrefixWarningOnly":
            suggest = "maximum_prefix_warning_only"
        elif key == "maximumPrefixWarningOnly6":
            suggest = "maximum_prefix_warning_only6"
        elif key == "maximumPrefixWarningOnlyEvpn":
            suggest = "maximum_prefix_warning_only_evpn"
        elif key == "maximumPrefixWarningOnlyVpnv4":
            suggest = "maximum_prefix_warning_only_vpnv4"
        elif key == "maximumPrefixWarningOnlyVpnv6":
            suggest = "maximum_prefix_warning_only_vpnv6"
        elif key == "nextHopSelf":
            suggest = "next_hop_self"
        elif key == "nextHopSelf6":
            suggest = "next_hop_self6"
        elif key == "nextHopSelfRr":
            suggest = "next_hop_self_rr"
        elif key == "nextHopSelfRr6":
            suggest = "next_hop_self_rr6"
        elif key == "nextHopSelfVpnv4":
            suggest = "next_hop_self_vpnv4"
        elif key == "nextHopSelfVpnv6":
            suggest = "next_hop_self_vpnv6"
        elif key == "overrideCapability":
            suggest = "override_capability"
        elif key == "prefixListIn":
            suggest = "prefix_list_in"
        elif key == "prefixListIn6":
            suggest = "prefix_list_in6"
        elif key == "prefixListInVpnv4":
            suggest = "prefix_list_in_vpnv4"
        elif key == "prefixListInVpnv6":
            suggest = "prefix_list_in_vpnv6"
        elif key == "prefixListOut":
            suggest = "prefix_list_out"
        elif key == "prefixListOut6":
            suggest = "prefix_list_out6"
        elif key == "prefixListOutVpnv4":
            suggest = "prefix_list_out_vpnv4"
        elif key == "prefixListOutVpnv6":
            suggest = "prefix_list_out_vpnv6"
        elif key == "remoteAs":
            suggest = "remote_as"
        elif key == "removePrivateAs":
            suggest = "remove_private_as"
        elif key == "removePrivateAs6":
            suggest = "remove_private_as6"
        elif key == "removePrivateAsEvpn":
            suggest = "remove_private_as_evpn"
        elif key == "removePrivateAsVpnv4":
            suggest = "remove_private_as_vpnv4"
        elif key == "removePrivateAsVpnv6":
            suggest = "remove_private_as_vpnv6"
        elif key == "restartTime":
            suggest = "restart_time"
        elif key == "retainStaleTime":
            suggest = "retain_stale_time"
        elif key == "routeMapIn":
            suggest = "route_map_in"
        elif key == "routeMapIn6":
            suggest = "route_map_in6"
        elif key == "routeMapInEvpn":
            suggest = "route_map_in_evpn"
        elif key == "routeMapInVpnv4":
            suggest = "route_map_in_vpnv4"
        elif key == "routeMapInVpnv6":
            suggest = "route_map_in_vpnv6"
        elif key == "routeMapOut":
            suggest = "route_map_out"
        elif key == "routeMapOut6":
            suggest = "route_map_out6"
        elif key == "routeMapOut6Preferable":
            suggest = "route_map_out6_preferable"
        elif key == "routeMapOutEvpn":
            suggest = "route_map_out_evpn"
        elif key == "routeMapOutPreferable":
            suggest = "route_map_out_preferable"
        elif key == "routeMapOutVpnv4":
            suggest = "route_map_out_vpnv4"
        elif key == "routeMapOutVpnv4Preferable":
            suggest = "route_map_out_vpnv4_preferable"
        elif key == "routeMapOutVpnv6":
            suggest = "route_map_out_vpnv6"
        elif key == "routeMapOutVpnv6Preferable":
            suggest = "route_map_out_vpnv6_preferable"
        elif key == "routeReflectorClient":
            suggest = "route_reflector_client"
        elif key == "routeReflectorClient6":
            suggest = "route_reflector_client6"
        elif key == "routeReflectorClientEvpn":
            suggest = "route_reflector_client_evpn"
        elif key == "routeReflectorClientVpnv4":
            suggest = "route_reflector_client_vpnv4"
        elif key == "routeReflectorClientVpnv6":
            suggest = "route_reflector_client_vpnv6"
        elif key == "routeServerClient":
            suggest = "route_server_client"
        elif key == "routeServerClient6":
            suggest = "route_server_client6"
        elif key == "routeServerClientEvpn":
            suggest = "route_server_client_evpn"
        elif key == "routeServerClientVpnv4":
            suggest = "route_server_client_vpnv4"
        elif key == "routeServerClientVpnv6":
            suggest = "route_server_client_vpnv6"
        elif key == "sendCommunity":
            suggest = "send_community"
        elif key == "sendCommunity6":
            suggest = "send_community6"
        elif key == "sendCommunityEvpn":
            suggest = "send_community_evpn"
        elif key == "sendCommunityVpnv4":
            suggest = "send_community_vpnv4"
        elif key == "sendCommunityVpnv6":
            suggest = "send_community_vpnv6"
        elif key == "softReconfiguration":
            suggest = "soft_reconfiguration"
        elif key == "softReconfiguration6":
            suggest = "soft_reconfiguration6"
        elif key == "softReconfigurationEvpn":
            suggest = "soft_reconfiguration_evpn"
        elif key == "softReconfigurationVpnv4":
            suggest = "soft_reconfiguration_vpnv4"
        elif key == "softReconfigurationVpnv6":
            suggest = "soft_reconfiguration_vpnv6"
        elif key == "staleRoute":
            suggest = "stale_route"
        elif key == "strictCapabilityMatch":
            suggest = "strict_capability_match"
        elif key == "unsuppressMap":
            suggest = "unsuppress_map"
        elif key == "unsuppressMap6":
            suggest = "unsuppress_map6"
        elif key == "updateSource":
            suggest = "update_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpNeighborGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpNeighborGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpNeighborGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activate: Optional[str] = None,
                 activate6: Optional[str] = None,
                 activate_evpn: Optional[str] = None,
                 activate_vpnv4: Optional[str] = None,
                 activate_vpnv6: Optional[str] = None,
                 additional_path: Optional[str] = None,
                 additional_path6: Optional[str] = None,
                 additional_path_vpnv4: Optional[str] = None,
                 additional_path_vpnv6: Optional[str] = None,
                 adv_additional_path: Optional[int] = None,
                 adv_additional_path6: Optional[int] = None,
                 adv_additional_path_vpnv4: Optional[int] = None,
                 adv_additional_path_vpnv6: Optional[int] = None,
                 advertisement_interval: Optional[int] = None,
                 allowas_in: Optional[int] = None,
                 allowas_in6: Optional[int] = None,
                 allowas_in_enable: Optional[str] = None,
                 allowas_in_enable6: Optional[str] = None,
                 allowas_in_enable_evpn: Optional[str] = None,
                 allowas_in_enable_vpnv4: Optional[str] = None,
                 allowas_in_enable_vpnv6: Optional[str] = None,
                 allowas_in_evpn: Optional[int] = None,
                 allowas_in_vpnv4: Optional[int] = None,
                 allowas_in_vpnv6: Optional[int] = None,
                 as_override: Optional[str] = None,
                 as_override6: Optional[str] = None,
                 attribute_unchanged: Optional[str] = None,
                 attribute_unchanged6: Optional[str] = None,
                 attribute_unchanged_vpnv4: Optional[str] = None,
                 attribute_unchanged_vpnv6: Optional[str] = None,
                 auth_options: Optional[str] = None,
                 bfd: Optional[str] = None,
                 capability_default_originate: Optional[str] = None,
                 capability_default_originate6: Optional[str] = None,
                 capability_dynamic: Optional[str] = None,
                 capability_graceful_restart: Optional[str] = None,
                 capability_graceful_restart6: Optional[str] = None,
                 capability_graceful_restart_evpn: Optional[str] = None,
                 capability_graceful_restart_vpnv4: Optional[str] = None,
                 capability_graceful_restart_vpnv6: Optional[str] = None,
                 capability_orf: Optional[str] = None,
                 capability_orf6: Optional[str] = None,
                 capability_route_refresh: Optional[str] = None,
                 connect_timer: Optional[int] = None,
                 default_originate_routemap: Optional[str] = None,
                 default_originate_routemap6: Optional[str] = None,
                 description: Optional[str] = None,
                 distribute_list_in: Optional[str] = None,
                 distribute_list_in6: Optional[str] = None,
                 distribute_list_in_vpnv4: Optional[str] = None,
                 distribute_list_in_vpnv6: Optional[str] = None,
                 distribute_list_out: Optional[str] = None,
                 distribute_list_out6: Optional[str] = None,
                 distribute_list_out_vpnv4: Optional[str] = None,
                 distribute_list_out_vpnv6: Optional[str] = None,
                 dont_capability_negotiate: Optional[str] = None,
                 ebgp_enforce_multihop: Optional[str] = None,
                 ebgp_multihop_ttl: Optional[int] = None,
                 filter_list_in: Optional[str] = None,
                 filter_list_in6: Optional[str] = None,
                 filter_list_in_vpnv4: Optional[str] = None,
                 filter_list_in_vpnv6: Optional[str] = None,
                 filter_list_out: Optional[str] = None,
                 filter_list_out6: Optional[str] = None,
                 filter_list_out_vpnv4: Optional[str] = None,
                 filter_list_out_vpnv6: Optional[str] = None,
                 holdtime_timer: Optional[int] = None,
                 interface: Optional[str] = None,
                 keep_alive_timer: Optional[int] = None,
                 link_down_failover: Optional[str] = None,
                 local_as: Optional[int] = None,
                 local_as_no_prepend: Optional[str] = None,
                 local_as_replace_as: Optional[str] = None,
                 maximum_prefix: Optional[int] = None,
                 maximum_prefix6: Optional[int] = None,
                 maximum_prefix_evpn: Optional[int] = None,
                 maximum_prefix_threshold: Optional[int] = None,
                 maximum_prefix_threshold6: Optional[int] = None,
                 maximum_prefix_threshold_evpn: Optional[int] = None,
                 maximum_prefix_threshold_vpnv4: Optional[int] = None,
                 maximum_prefix_threshold_vpnv6: Optional[int] = None,
                 maximum_prefix_vpnv4: Optional[int] = None,
                 maximum_prefix_vpnv6: Optional[int] = None,
                 maximum_prefix_warning_only: Optional[str] = None,
                 maximum_prefix_warning_only6: Optional[str] = None,
                 maximum_prefix_warning_only_evpn: Optional[str] = None,
                 maximum_prefix_warning_only_vpnv4: Optional[str] = None,
                 maximum_prefix_warning_only_vpnv6: Optional[str] = None,
                 name: Optional[str] = None,
                 next_hop_self: Optional[str] = None,
                 next_hop_self6: Optional[str] = None,
                 next_hop_self_rr: Optional[str] = None,
                 next_hop_self_rr6: Optional[str] = None,
                 next_hop_self_vpnv4: Optional[str] = None,
                 next_hop_self_vpnv6: Optional[str] = None,
                 override_capability: Optional[str] = None,
                 passive: Optional[str] = None,
                 password: Optional[str] = None,
                 prefix_list_in: Optional[str] = None,
                 prefix_list_in6: Optional[str] = None,
                 prefix_list_in_vpnv4: Optional[str] = None,
                 prefix_list_in_vpnv6: Optional[str] = None,
                 prefix_list_out: Optional[str] = None,
                 prefix_list_out6: Optional[str] = None,
                 prefix_list_out_vpnv4: Optional[str] = None,
                 prefix_list_out_vpnv6: Optional[str] = None,
                 remote_as: Optional[int] = None,
                 remove_private_as: Optional[str] = None,
                 remove_private_as6: Optional[str] = None,
                 remove_private_as_evpn: Optional[str] = None,
                 remove_private_as_vpnv4: Optional[str] = None,
                 remove_private_as_vpnv6: Optional[str] = None,
                 restart_time: Optional[int] = None,
                 retain_stale_time: Optional[int] = None,
                 route_map_in: Optional[str] = None,
                 route_map_in6: Optional[str] = None,
                 route_map_in_evpn: Optional[str] = None,
                 route_map_in_vpnv4: Optional[str] = None,
                 route_map_in_vpnv6: Optional[str] = None,
                 route_map_out: Optional[str] = None,
                 route_map_out6: Optional[str] = None,
                 route_map_out6_preferable: Optional[str] = None,
                 route_map_out_evpn: Optional[str] = None,
                 route_map_out_preferable: Optional[str] = None,
                 route_map_out_vpnv4: Optional[str] = None,
                 route_map_out_vpnv4_preferable: Optional[str] = None,
                 route_map_out_vpnv6: Optional[str] = None,
                 route_map_out_vpnv6_preferable: Optional[str] = None,
                 route_reflector_client: Optional[str] = None,
                 route_reflector_client6: Optional[str] = None,
                 route_reflector_client_evpn: Optional[str] = None,
                 route_reflector_client_vpnv4: Optional[str] = None,
                 route_reflector_client_vpnv6: Optional[str] = None,
                 route_server_client: Optional[str] = None,
                 route_server_client6: Optional[str] = None,
                 route_server_client_evpn: Optional[str] = None,
                 route_server_client_vpnv4: Optional[str] = None,
                 route_server_client_vpnv6: Optional[str] = None,
                 send_community: Optional[str] = None,
                 send_community6: Optional[str] = None,
                 send_community_evpn: Optional[str] = None,
                 send_community_vpnv4: Optional[str] = None,
                 send_community_vpnv6: Optional[str] = None,
                 shutdown: Optional[str] = None,
                 soft_reconfiguration: Optional[str] = None,
                 soft_reconfiguration6: Optional[str] = None,
                 soft_reconfiguration_evpn: Optional[str] = None,
                 soft_reconfiguration_vpnv4: Optional[str] = None,
                 soft_reconfiguration_vpnv6: Optional[str] = None,
                 stale_route: Optional[str] = None,
                 strict_capability_match: Optional[str] = None,
                 unsuppress_map: Optional[str] = None,
                 unsuppress_map6: Optional[str] = None,
                 update_source: Optional[str] = None,
                 weight: Optional[int] = None):
        """
        :param str activate: Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        :param str activate6: Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        :param str activate_evpn: Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
        :param str activate_vpnv4: Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
        :param str activate_vpnv6: Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
        :param str additional_path: Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param str additional_path6: Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param str additional_path_vpnv4: Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param str additional_path_vpnv6: Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param int adv_additional_path: Number of IPv4 additional paths that can be advertised to this neighbor.
        :param int adv_additional_path6: Number of IPv6 additional paths that can be advertised to this neighbor.
        :param int adv_additional_path_vpnv4: Number of VPNv4 additional paths that can be advertised to this neighbor.
        :param int adv_additional_path_vpnv6: Number of VPNv6 additional paths that can be advertised to this neighbor.
        :param int advertisement_interval: Minimum interval (sec) between sending updates.
        :param int allowas_in: IPv4 The maximum number of occurrence of my AS number allowed.
        :param int allowas_in6: IPv6 The maximum number of occurrence of my AS number allowed.
        :param str allowas_in_enable: Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param str allowas_in_enable6: Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param str allowas_in_enable_evpn: Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
        :param str allowas_in_enable_vpnv4: Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
        :param str allowas_in_enable_vpnv6: Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
        :param int allowas_in_evpn: The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        :param int allowas_in_vpnv4: The maximum number of occurrence of my AS number allowed for VPNv4 route.
        :param int allowas_in_vpnv6: The maximum number of occurrence of my AS number allowed for VPNv6 route.
        :param str as_override: Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        :param str as_override6: Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        :param str attribute_unchanged: IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param str attribute_unchanged6: IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param str attribute_unchanged_vpnv4: List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
        :param str attribute_unchanged_vpnv6: List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
        :param str auth_options: Key-chain name for TCP authentication options.
        :param str bfd: Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        :param str capability_default_originate: Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_default_originate6: Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_dynamic: Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_graceful_restart: Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_graceful_restart6: Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_graceful_restart_evpn: Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_graceful_restart_vpnv4: Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_graceful_restart_vpnv6: Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param str capability_orf: Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param str capability_orf6: Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param str capability_route_refresh: Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        :param int connect_timer: Interval (sec) for connect timer.
        :param str default_originate_routemap: Route map to specify criteria to originate IPv4 default.
        :param str default_originate_routemap6: Route map to specify criteria to originate IPv6 default.
        :param str description: Description.
        :param str distribute_list_in: Filter for IPv4 updates from this neighbor.
        :param str distribute_list_in6: Filter for IPv6 updates from this neighbor.
        :param str distribute_list_in_vpnv4: Filter for VPNv4 updates from this neighbor.
        :param str distribute_list_in_vpnv6: Filter for VPNv6 updates from this neighbor.
        :param str distribute_list_out: Filter for IPv4 updates to this neighbor.
        :param str distribute_list_out6: Filter for IPv6 updates to this neighbor.
        :param str distribute_list_out_vpnv4: Filter for VPNv4 updates to this neighbor.
        :param str distribute_list_out_vpnv6: Filter for VPNv6 updates to this neighbor.
        :param str dont_capability_negotiate: Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        :param str ebgp_enforce_multihop: Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        :param int ebgp_multihop_ttl: EBGP multihop TTL for this peer.
        :param str filter_list_in: BGP filter for IPv4 inbound routes.
        :param str filter_list_in6: BGP filter for IPv6 inbound routes.
        :param str filter_list_in_vpnv4: BGP filter for VPNv4 inbound routes.
        :param str filter_list_in_vpnv6: BGP filter for VPNv6 inbound routes.
        :param str filter_list_out: BGP filter for IPv4 outbound routes.
        :param str filter_list_out6: BGP filter for IPv6 outbound routes.
        :param str filter_list_out_vpnv4: BGP filter for VPNv4 outbound routes.
        :param str filter_list_out_vpnv6: BGP filter for VPNv6 outbound routes.
        :param int holdtime_timer: Interval (sec) before peer considered dead.
        :param str interface: Interface
        :param int keep_alive_timer: Keep alive timer interval (sec).
        :param str link_down_failover: Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        :param int local_as: Local AS number of neighbor.
        :param str local_as_no_prepend: Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        :param str local_as_replace_as: Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        :param int maximum_prefix: Maximum number of IPv4 prefixes to accept from this peer.
        :param int maximum_prefix6: Maximum number of IPv6 prefixes to accept from this peer.
        :param int maximum_prefix_evpn: Maximum number of L2VPN EVPN prefixes to accept from this peer.
        :param int maximum_prefix_threshold: Maximum IPv4 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold6: Maximum IPv6 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold_evpn: Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold_vpnv4: Maximum VPNv4 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold_vpnv6: Maximum VPNv6 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_vpnv4: Maximum number of VPNv4 prefixes to accept from this peer.
        :param int maximum_prefix_vpnv6: Maximum number of VPNv6 prefixes to accept from this peer.
        :param str maximum_prefix_warning_only: Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param str maximum_prefix_warning_only6: Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param str maximum_prefix_warning_only_evpn: Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
        :param str maximum_prefix_warning_only_vpnv4: Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
        :param str maximum_prefix_warning_only_vpnv6: Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
        :param str name: Neighbor group name.
        :param str next_hop_self: Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param str next_hop_self6: Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param str next_hop_self_rr: Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param str next_hop_self_rr6: Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param str next_hop_self_vpnv4: Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
        :param str next_hop_self_vpnv6: Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
        :param str override_capability: Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        :param str passive: Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        :param str password: Password used in MD5 authentication.
        :param str prefix_list_in: IPv4 Inbound filter for updates from this neighbor.
        :param str prefix_list_in6: IPv6 Inbound filter for updates from this neighbor.
        :param str prefix_list_in_vpnv4: Inbound filter for VPNv4 updates from this neighbor.
        :param str prefix_list_in_vpnv6: Inbound filter for VPNv6 updates from this neighbor.
        :param str prefix_list_out: IPv4 Outbound filter for updates to this neighbor.
        :param str prefix_list_out6: IPv6 Outbound filter for updates to this neighbor.
        :param str prefix_list_out_vpnv4: Outbound filter for VPNv4 updates to this neighbor.
        :param str prefix_list_out_vpnv6: Outbound filter for VPNv6 updates to this neighbor.
        :param int remote_as: AS number of neighbor.
        :param str remove_private_as: Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        :param str remove_private_as6: Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        :param str remove_private_as_evpn: Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
        :param str remove_private_as_vpnv4: Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
        :param str remove_private_as_vpnv6: Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
        :param int restart_time: Graceful restart delay time (sec, 0 = global default).
        :param int retain_stale_time: Time to retain stale routes.
        :param str route_map_in: IPv4 Inbound route map filter.
        :param str route_map_in6: IPv6 Inbound route map filter.
        :param str route_map_in_evpn: L2VPN EVPN inbound route map filter.
        :param str route_map_in_vpnv4: VPNv4 inbound route map filter.
        :param str route_map_in_vpnv6: VPNv6 inbound route map filter.
        :param str route_map_out: IPv4 Outbound route map filter.
        :param str route_map_out6: IPv6 Outbound route map filter.
        :param str route_map_out6_preferable: IPv6 outbound route map filter if the peer is preferred.
        :param str route_map_out_evpn: L2VPN EVPN outbound route map filter.
        :param str route_map_out_preferable: IPv4 outbound route map filter if the peer is preferred.
        :param str route_map_out_vpnv4: VPNv4 outbound route map filter.
        :param str route_map_out_vpnv4_preferable: VPNv4 outbound route map filter if the peer is preferred.
        :param str route_map_out_vpnv6: VPNv6 outbound route map filter.
        :param str route_map_out_vpnv6_preferable: VPNv6 outbound route map filter if this neighbor is preferred.
        :param str route_reflector_client: Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        :param str route_reflector_client6: Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        :param str route_reflector_client_evpn: Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param str route_reflector_client_vpnv4: Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param str route_reflector_client_vpnv6: Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param str route_server_client: Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        :param str route_server_client6: Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        :param str route_server_client_evpn: Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param str route_server_client_vpnv4: Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param str route_server_client_vpnv6: Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param str send_community: IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param str send_community6: IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param str send_community_evpn: Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param str send_community_vpnv4: Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param str send_community_vpnv6: Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param str shutdown: Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        :param str soft_reconfiguration: Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param str soft_reconfiguration6: Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param str soft_reconfiguration_evpn: Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param str soft_reconfiguration_vpnv4: Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param str soft_reconfiguration_vpnv6: Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param str stale_route: Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        :param str strict_capability_match: Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        :param str unsuppress_map: IPv4 Route map to selectively unsuppress suppressed routes.
        :param str unsuppress_map6: IPv6 Route map to selectively unsuppress suppressed routes.
        :param str update_source: Interface to use as source IP/IPv6 address of TCP connections.
        :param int weight: Neighbor weight.
        """
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if activate6 is not None:
            pulumi.set(__self__, "activate6", activate6)
        if activate_evpn is not None:
            pulumi.set(__self__, "activate_evpn", activate_evpn)
        if activate_vpnv4 is not None:
            pulumi.set(__self__, "activate_vpnv4", activate_vpnv4)
        if activate_vpnv6 is not None:
            pulumi.set(__self__, "activate_vpnv6", activate_vpnv6)
        if additional_path is not None:
            pulumi.set(__self__, "additional_path", additional_path)
        if additional_path6 is not None:
            pulumi.set(__self__, "additional_path6", additional_path6)
        if additional_path_vpnv4 is not None:
            pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        if additional_path_vpnv6 is not None:
            pulumi.set(__self__, "additional_path_vpnv6", additional_path_vpnv6)
        if adv_additional_path is not None:
            pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        if adv_additional_path6 is not None:
            pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        if adv_additional_path_vpnv4 is not None:
            pulumi.set(__self__, "adv_additional_path_vpnv4", adv_additional_path_vpnv4)
        if adv_additional_path_vpnv6 is not None:
            pulumi.set(__self__, "adv_additional_path_vpnv6", adv_additional_path_vpnv6)
        if advertisement_interval is not None:
            pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        if allowas_in is not None:
            pulumi.set(__self__, "allowas_in", allowas_in)
        if allowas_in6 is not None:
            pulumi.set(__self__, "allowas_in6", allowas_in6)
        if allowas_in_enable is not None:
            pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        if allowas_in_enable6 is not None:
            pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        if allowas_in_enable_evpn is not None:
            pulumi.set(__self__, "allowas_in_enable_evpn", allowas_in_enable_evpn)
        if allowas_in_enable_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_enable_vpnv4", allowas_in_enable_vpnv4)
        if allowas_in_enable_vpnv6 is not None:
            pulumi.set(__self__, "allowas_in_enable_vpnv6", allowas_in_enable_vpnv6)
        if allowas_in_evpn is not None:
            pulumi.set(__self__, "allowas_in_evpn", allowas_in_evpn)
        if allowas_in_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_vpnv4", allowas_in_vpnv4)
        if allowas_in_vpnv6 is not None:
            pulumi.set(__self__, "allowas_in_vpnv6", allowas_in_vpnv6)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override6 is not None:
            pulumi.set(__self__, "as_override6", as_override6)
        if attribute_unchanged is not None:
            pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        if attribute_unchanged6 is not None:
            pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        if attribute_unchanged_vpnv4 is not None:
            pulumi.set(__self__, "attribute_unchanged_vpnv4", attribute_unchanged_vpnv4)
        if attribute_unchanged_vpnv6 is not None:
            pulumi.set(__self__, "attribute_unchanged_vpnv6", attribute_unchanged_vpnv6)
        if auth_options is not None:
            pulumi.set(__self__, "auth_options", auth_options)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if capability_default_originate is not None:
            pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        if capability_default_originate6 is not None:
            pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        if capability_dynamic is not None:
            pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        if capability_graceful_restart is not None:
            pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        if capability_graceful_restart6 is not None:
            pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        if capability_graceful_restart_evpn is not None:
            pulumi.set(__self__, "capability_graceful_restart_evpn", capability_graceful_restart_evpn)
        if capability_graceful_restart_vpnv4 is not None:
            pulumi.set(__self__, "capability_graceful_restart_vpnv4", capability_graceful_restart_vpnv4)
        if capability_graceful_restart_vpnv6 is not None:
            pulumi.set(__self__, "capability_graceful_restart_vpnv6", capability_graceful_restart_vpnv6)
        if capability_orf is not None:
            pulumi.set(__self__, "capability_orf", capability_orf)
        if capability_orf6 is not None:
            pulumi.set(__self__, "capability_orf6", capability_orf6)
        if capability_route_refresh is not None:
            pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        if connect_timer is not None:
            pulumi.set(__self__, "connect_timer", connect_timer)
        if default_originate_routemap is not None:
            pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        if default_originate_routemap6 is not None:
            pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distribute_list_in is not None:
            pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        if distribute_list_in6 is not None:
            pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        if distribute_list_in_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_in_vpnv4", distribute_list_in_vpnv4)
        if distribute_list_in_vpnv6 is not None:
            pulumi.set(__self__, "distribute_list_in_vpnv6", distribute_list_in_vpnv6)
        if distribute_list_out is not None:
            pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        if distribute_list_out6 is not None:
            pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        if distribute_list_out_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_out_vpnv4", distribute_list_out_vpnv4)
        if distribute_list_out_vpnv6 is not None:
            pulumi.set(__self__, "distribute_list_out_vpnv6", distribute_list_out_vpnv6)
        if dont_capability_negotiate is not None:
            pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        if ebgp_enforce_multihop is not None:
            pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        if ebgp_multihop_ttl is not None:
            pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        if filter_list_in is not None:
            pulumi.set(__self__, "filter_list_in", filter_list_in)
        if filter_list_in6 is not None:
            pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        if filter_list_in_vpnv4 is not None:
            pulumi.set(__self__, "filter_list_in_vpnv4", filter_list_in_vpnv4)
        if filter_list_in_vpnv6 is not None:
            pulumi.set(__self__, "filter_list_in_vpnv6", filter_list_in_vpnv6)
        if filter_list_out is not None:
            pulumi.set(__self__, "filter_list_out", filter_list_out)
        if filter_list_out6 is not None:
            pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        if filter_list_out_vpnv4 is not None:
            pulumi.set(__self__, "filter_list_out_vpnv4", filter_list_out_vpnv4)
        if filter_list_out_vpnv6 is not None:
            pulumi.set(__self__, "filter_list_out_vpnv6", filter_list_out_vpnv6)
        if holdtime_timer is not None:
            pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if keep_alive_timer is not None:
            pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        if link_down_failover is not None:
            pulumi.set(__self__, "link_down_failover", link_down_failover)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_no_prepend is not None:
            pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        if local_as_replace_as is not None:
            pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        if maximum_prefix is not None:
            pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        if maximum_prefix6 is not None:
            pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        if maximum_prefix_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_evpn", maximum_prefix_evpn)
        if maximum_prefix_threshold is not None:
            pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        if maximum_prefix_threshold6 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        if maximum_prefix_threshold_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_evpn", maximum_prefix_threshold_evpn)
        if maximum_prefix_threshold_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_vpnv4", maximum_prefix_threshold_vpnv4)
        if maximum_prefix_threshold_vpnv6 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_vpnv6", maximum_prefix_threshold_vpnv6)
        if maximum_prefix_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_vpnv4", maximum_prefix_vpnv4)
        if maximum_prefix_vpnv6 is not None:
            pulumi.set(__self__, "maximum_prefix_vpnv6", maximum_prefix_vpnv6)
        if maximum_prefix_warning_only is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        if maximum_prefix_warning_only6 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        if maximum_prefix_warning_only_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_evpn", maximum_prefix_warning_only_evpn)
        if maximum_prefix_warning_only_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_vpnv4", maximum_prefix_warning_only_vpnv4)
        if maximum_prefix_warning_only_vpnv6 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_vpnv6", maximum_prefix_warning_only_vpnv6)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self6 is not None:
            pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        if next_hop_self_rr is not None:
            pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        if next_hop_self_rr6 is not None:
            pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        if next_hop_self_vpnv4 is not None:
            pulumi.set(__self__, "next_hop_self_vpnv4", next_hop_self_vpnv4)
        if next_hop_self_vpnv6 is not None:
            pulumi.set(__self__, "next_hop_self_vpnv6", next_hop_self_vpnv6)
        if override_capability is not None:
            pulumi.set(__self__, "override_capability", override_capability)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if prefix_list_in is not None:
            pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        if prefix_list_in6 is not None:
            pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        if prefix_list_in_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_in_vpnv4", prefix_list_in_vpnv4)
        if prefix_list_in_vpnv6 is not None:
            pulumi.set(__self__, "prefix_list_in_vpnv6", prefix_list_in_vpnv6)
        if prefix_list_out is not None:
            pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        if prefix_list_out6 is not None:
            pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        if prefix_list_out_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_out_vpnv4", prefix_list_out_vpnv4)
        if prefix_list_out_vpnv6 is not None:
            pulumi.set(__self__, "prefix_list_out_vpnv6", prefix_list_out_vpnv6)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remove_private_as is not None:
            pulumi.set(__self__, "remove_private_as", remove_private_as)
        if remove_private_as6 is not None:
            pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        if remove_private_as_evpn is not None:
            pulumi.set(__self__, "remove_private_as_evpn", remove_private_as_evpn)
        if remove_private_as_vpnv4 is not None:
            pulumi.set(__self__, "remove_private_as_vpnv4", remove_private_as_vpnv4)
        if remove_private_as_vpnv6 is not None:
            pulumi.set(__self__, "remove_private_as_vpnv6", remove_private_as_vpnv6)
        if restart_time is not None:
            pulumi.set(__self__, "restart_time", restart_time)
        if retain_stale_time is not None:
            pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        if route_map_in is not None:
            pulumi.set(__self__, "route_map_in", route_map_in)
        if route_map_in6 is not None:
            pulumi.set(__self__, "route_map_in6", route_map_in6)
        if route_map_in_evpn is not None:
            pulumi.set(__self__, "route_map_in_evpn", route_map_in_evpn)
        if route_map_in_vpnv4 is not None:
            pulumi.set(__self__, "route_map_in_vpnv4", route_map_in_vpnv4)
        if route_map_in_vpnv6 is not None:
            pulumi.set(__self__, "route_map_in_vpnv6", route_map_in_vpnv6)
        if route_map_out is not None:
            pulumi.set(__self__, "route_map_out", route_map_out)
        if route_map_out6 is not None:
            pulumi.set(__self__, "route_map_out6", route_map_out6)
        if route_map_out6_preferable is not None:
            pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        if route_map_out_evpn is not None:
            pulumi.set(__self__, "route_map_out_evpn", route_map_out_evpn)
        if route_map_out_preferable is not None:
            pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        if route_map_out_vpnv4 is not None:
            pulumi.set(__self__, "route_map_out_vpnv4", route_map_out_vpnv4)
        if route_map_out_vpnv4_preferable is not None:
            pulumi.set(__self__, "route_map_out_vpnv4_preferable", route_map_out_vpnv4_preferable)
        if route_map_out_vpnv6 is not None:
            pulumi.set(__self__, "route_map_out_vpnv6", route_map_out_vpnv6)
        if route_map_out_vpnv6_preferable is not None:
            pulumi.set(__self__, "route_map_out_vpnv6_preferable", route_map_out_vpnv6_preferable)
        if route_reflector_client is not None:
            pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        if route_reflector_client6 is not None:
            pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        if route_reflector_client_evpn is not None:
            pulumi.set(__self__, "route_reflector_client_evpn", route_reflector_client_evpn)
        if route_reflector_client_vpnv4 is not None:
            pulumi.set(__self__, "route_reflector_client_vpnv4", route_reflector_client_vpnv4)
        if route_reflector_client_vpnv6 is not None:
            pulumi.set(__self__, "route_reflector_client_vpnv6", route_reflector_client_vpnv6)
        if route_server_client is not None:
            pulumi.set(__self__, "route_server_client", route_server_client)
        if route_server_client6 is not None:
            pulumi.set(__self__, "route_server_client6", route_server_client6)
        if route_server_client_evpn is not None:
            pulumi.set(__self__, "route_server_client_evpn", route_server_client_evpn)
        if route_server_client_vpnv4 is not None:
            pulumi.set(__self__, "route_server_client_vpnv4", route_server_client_vpnv4)
        if route_server_client_vpnv6 is not None:
            pulumi.set(__self__, "route_server_client_vpnv6", route_server_client_vpnv6)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community6 is not None:
            pulumi.set(__self__, "send_community6", send_community6)
        if send_community_evpn is not None:
            pulumi.set(__self__, "send_community_evpn", send_community_evpn)
        if send_community_vpnv4 is not None:
            pulumi.set(__self__, "send_community_vpnv4", send_community_vpnv4)
        if send_community_vpnv6 is not None:
            pulumi.set(__self__, "send_community_vpnv6", send_community_vpnv6)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if soft_reconfiguration is not None:
            pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        if soft_reconfiguration6 is not None:
            pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        if soft_reconfiguration_evpn is not None:
            pulumi.set(__self__, "soft_reconfiguration_evpn", soft_reconfiguration_evpn)
        if soft_reconfiguration_vpnv4 is not None:
            pulumi.set(__self__, "soft_reconfiguration_vpnv4", soft_reconfiguration_vpnv4)
        if soft_reconfiguration_vpnv6 is not None:
            pulumi.set(__self__, "soft_reconfiguration_vpnv6", soft_reconfiguration_vpnv6)
        if stale_route is not None:
            pulumi.set(__self__, "stale_route", stale_route)
        if strict_capability_match is not None:
            pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        if unsuppress_map is not None:
            pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        if unsuppress_map6 is not None:
            pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        if update_source is not None:
            pulumi.set(__self__, "update_source", update_source)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activate(self) -> Optional[str]:
        """
        Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter
    def activate6(self) -> Optional[str]:
        """
        Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate6")

    @property
    @pulumi.getter(name="activateEvpn")
    def activate_evpn(self) -> Optional[str]:
        """
        Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_evpn")

    @property
    @pulumi.getter(name="activateVpnv4")
    def activate_vpnv4(self) -> Optional[str]:
        """
        Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_vpnv4")

    @property
    @pulumi.getter(name="activateVpnv6")
    def activate_vpnv6(self) -> Optional[str]:
        """
        Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_vpnv6")

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> Optional[str]:
        """
        Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path")

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> Optional[str]:
        """
        Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path6")

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> Optional[str]:
        """
        Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv4")

    @property
    @pulumi.getter(name="additionalPathVpnv6")
    def additional_path_vpnv6(self) -> Optional[str]:
        """
        Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv6")

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> Optional[int]:
        """
        Number of IPv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path")

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> Optional[int]:
        """
        Number of IPv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path6")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv4")
    def adv_additional_path_vpnv4(self) -> Optional[int]:
        """
        Number of VPNv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv4")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv6")
    def adv_additional_path_vpnv6(self) -> Optional[int]:
        """
        Number of VPNv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv6")

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> Optional[int]:
        """
        Minimum interval (sec) between sending updates.
        """
        return pulumi.get(self, "advertisement_interval")

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> Optional[int]:
        """
        IPv4 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in")

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> Optional[int]:
        """
        IPv6 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in6")

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> Optional[str]:
        """
        Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable")

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> Optional[str]:
        """
        Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable6")

    @property
    @pulumi.getter(name="allowasInEnableEvpn")
    def allowas_in_enable_evpn(self) -> Optional[str]:
        """
        Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_evpn")

    @property
    @pulumi.getter(name="allowasInEnableVpnv4")
    def allowas_in_enable_vpnv4(self) -> Optional[str]:
        """
        Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv4")

    @property
    @pulumi.getter(name="allowasInEnableVpnv6")
    def allowas_in_enable_vpnv6(self) -> Optional[str]:
        """
        Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv6")

    @property
    @pulumi.getter(name="allowasInEvpn")
    def allowas_in_evpn(self) -> Optional[int]:
        """
        The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        """
        return pulumi.get(self, "allowas_in_evpn")

    @property
    @pulumi.getter(name="allowasInVpnv4")
    def allowas_in_vpnv4(self) -> Optional[int]:
        """
        The maximum number of occurrence of my AS number allowed for VPNv4 route.
        """
        return pulumi.get(self, "allowas_in_vpnv4")

    @property
    @pulumi.getter(name="allowasInVpnv6")
    def allowas_in_vpnv6(self) -> Optional[int]:
        """
        The maximum number of occurrence of my AS number allowed for VPNv6 route.
        """
        return pulumi.get(self, "allowas_in_vpnv6")

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[str]:
        """
        Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_override")

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> Optional[str]:
        """
        Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_override6")

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> Optional[str]:
        """
        IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged")

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> Optional[str]:
        """
        IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged6")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv4")
    def attribute_unchanged_vpnv4(self) -> Optional[str]:
        """
        List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv4")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv6")
    def attribute_unchanged_vpnv6(self) -> Optional[str]:
        """
        List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv6")

    @property
    @pulumi.getter(name="authOptions")
    def auth_options(self) -> Optional[str]:
        """
        Key-chain name for TCP authentication options.
        """
        return pulumi.get(self, "auth_options")

    @property
    @pulumi.getter
    def bfd(self) -> Optional[str]:
        """
        Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> Optional[str]:
        """
        Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_default_originate")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> Optional[str]:
        """
        Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_default_originate6")

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> Optional[str]:
        """
        Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_dynamic")

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> Optional[str]:
        """
        Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart")

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> Optional[str]:
        """
        Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart6")

    @property
    @pulumi.getter(name="capabilityGracefulRestartEvpn")
    def capability_graceful_restart_evpn(self) -> Optional[str]:
        """
        Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_evpn")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv4")
    def capability_graceful_restart_vpnv4(self) -> Optional[str]:
        """
        Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv4")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv6")
    def capability_graceful_restart_vpnv6(self) -> Optional[str]:
        """
        Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv6")

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> Optional[str]:
        """
        Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        """
        return pulumi.get(self, "capability_orf")

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> Optional[str]:
        """
        Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        """
        return pulumi.get(self, "capability_orf6")

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> Optional[str]:
        """
        Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_route_refresh")

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> Optional[int]:
        """
        Interval (sec) for connect timer.
        """
        return pulumi.get(self, "connect_timer")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> Optional[str]:
        """
        Route map to specify criteria to originate IPv4 default.
        """
        return pulumi.get(self, "default_originate_routemap")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> Optional[str]:
        """
        Route map to specify criteria to originate IPv6 default.
        """
        return pulumi.get(self, "default_originate_routemap6")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> Optional[str]:
        """
        Filter for IPv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in")

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> Optional[str]:
        """
        Filter for IPv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in6")

    @property
    @pulumi.getter(name="distributeListInVpnv4")
    def distribute_list_in_vpnv4(self) -> Optional[str]:
        """
        Filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv4")

    @property
    @pulumi.getter(name="distributeListInVpnv6")
    def distribute_list_in_vpnv6(self) -> Optional[str]:
        """
        Filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv6")

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> Optional[str]:
        """
        Filter for IPv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out")

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> Optional[str]:
        """
        Filter for IPv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out6")

    @property
    @pulumi.getter(name="distributeListOutVpnv4")
    def distribute_list_out_vpnv4(self) -> Optional[str]:
        """
        Filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv4")

    @property
    @pulumi.getter(name="distributeListOutVpnv6")
    def distribute_list_out_vpnv6(self) -> Optional[str]:
        """
        Filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv6")

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> Optional[str]:
        """
        Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_capability_negotiate")

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> Optional[str]:
        """
        Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ebgp_enforce_multihop")

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> Optional[int]:
        """
        EBGP multihop TTL for this peer.
        """
        return pulumi.get(self, "ebgp_multihop_ttl")

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> Optional[str]:
        """
        BGP filter for IPv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in")

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> Optional[str]:
        """
        BGP filter for IPv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in6")

    @property
    @pulumi.getter(name="filterListInVpnv4")
    def filter_list_in_vpnv4(self) -> Optional[str]:
        """
        BGP filter for VPNv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv4")

    @property
    @pulumi.getter(name="filterListInVpnv6")
    def filter_list_in_vpnv6(self) -> Optional[str]:
        """
        BGP filter for VPNv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv6")

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> Optional[str]:
        """
        BGP filter for IPv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out")

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> Optional[str]:
        """
        BGP filter for IPv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out6")

    @property
    @pulumi.getter(name="filterListOutVpnv4")
    def filter_list_out_vpnv4(self) -> Optional[str]:
        """
        BGP filter for VPNv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv4")

    @property
    @pulumi.getter(name="filterListOutVpnv6")
    def filter_list_out_vpnv6(self) -> Optional[str]:
        """
        BGP filter for VPNv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv6")

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> Optional[int]:
        """
        Interval (sec) before peer considered dead.
        """
        return pulumi.get(self, "holdtime_timer")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Interface
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> Optional[int]:
        """
        Keep alive timer interval (sec).
        """
        return pulumi.get(self, "keep_alive_timer")

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> Optional[str]:
        """
        Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_down_failover")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[int]:
        """
        Local AS number of neighbor.
        """
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> Optional[str]:
        """
        Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_as_no_prepend")

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> Optional[str]:
        """
        Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_as_replace_as")

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> Optional[int]:
        """
        Maximum number of IPv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix")

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> Optional[int]:
        """
        Maximum number of IPv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix6")

    @property
    @pulumi.getter(name="maximumPrefixEvpn")
    def maximum_prefix_evpn(self) -> Optional[int]:
        """
        Maximum number of L2VPN EVPN prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> Optional[int]:
        """
        Maximum IPv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold")

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> Optional[int]:
        """
        Maximum IPv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold6")

    @property
    @pulumi.getter(name="maximumPrefixThresholdEvpn")
    def maximum_prefix_threshold_evpn(self) -> Optional[int]:
        """
        Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv4")
    def maximum_prefix_threshold_vpnv4(self) -> Optional[int]:
        """
        Maximum VPNv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv6")
    def maximum_prefix_threshold_vpnv6(self) -> Optional[int]:
        """
        Maximum VPNv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv6")

    @property
    @pulumi.getter(name="maximumPrefixVpnv4")
    def maximum_prefix_vpnv4(self) -> Optional[int]:
        """
        Maximum number of VPNv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixVpnv6")
    def maximum_prefix_vpnv6(self) -> Optional[int]:
        """
        Maximum number of VPNv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> Optional[str]:
        """
        Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> Optional[str]:
        """
        Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyEvpn")
    def maximum_prefix_warning_only_evpn(self) -> Optional[str]:
        """
        Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_evpn")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv4")
    def maximum_prefix_warning_only_vpnv4(self) -> Optional[str]:
        """
        Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv6")
    def maximum_prefix_warning_only_vpnv6(self) -> Optional[str]:
        """
        Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv6")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Neighbor group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[str]:
        """
        Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self")

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> Optional[str]:
        """
        Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self6")

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> Optional[str]:
        """
        Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_rr")

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> Optional[str]:
        """
        Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_rr6")

    @property
    @pulumi.getter(name="nextHopSelfVpnv4")
    def next_hop_self_vpnv4(self) -> Optional[str]:
        """
        Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_vpnv4")

    @property
    @pulumi.getter(name="nextHopSelfVpnv6")
    def next_hop_self_vpnv6(self) -> Optional[str]:
        """
        Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_vpnv6")

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> Optional[str]:
        """
        Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_capability")

    @property
    @pulumi.getter
    def passive(self) -> Optional[str]:
        """
        Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password used in MD5 authentication.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> Optional[str]:
        """
        IPv4 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in")

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> Optional[str]:
        """
        IPv6 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in6")

    @property
    @pulumi.getter(name="prefixListInVpnv4")
    def prefix_list_in_vpnv4(self) -> Optional[str]:
        """
        Inbound filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv4")

    @property
    @pulumi.getter(name="prefixListInVpnv6")
    def prefix_list_in_vpnv6(self) -> Optional[str]:
        """
        Inbound filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv6")

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> Optional[str]:
        """
        IPv4 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out")

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> Optional[str]:
        """
        IPv6 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out6")

    @property
    @pulumi.getter(name="prefixListOutVpnv4")
    def prefix_list_out_vpnv4(self) -> Optional[str]:
        """
        Outbound filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv4")

    @property
    @pulumi.getter(name="prefixListOutVpnv6")
    def prefix_list_out_vpnv6(self) -> Optional[str]:
        """
        Outbound filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv6")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[int]:
        """
        AS number of neighbor.
        """
        return pulumi.get(self, "remote_as")

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> Optional[str]:
        """
        Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as")

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> Optional[str]:
        """
        Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as6")

    @property
    @pulumi.getter(name="removePrivateAsEvpn")
    def remove_private_as_evpn(self) -> Optional[str]:
        """
        Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_evpn")

    @property
    @pulumi.getter(name="removePrivateAsVpnv4")
    def remove_private_as_vpnv4(self) -> Optional[str]:
        """
        Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_vpnv4")

    @property
    @pulumi.getter(name="removePrivateAsVpnv6")
    def remove_private_as_vpnv6(self) -> Optional[str]:
        """
        Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_vpnv6")

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> Optional[int]:
        """
        Graceful restart delay time (sec, 0 = global default).
        """
        return pulumi.get(self, "restart_time")

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> Optional[int]:
        """
        Time to retain stale routes.
        """
        return pulumi.get(self, "retain_stale_time")

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> Optional[str]:
        """
        IPv4 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in")

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> Optional[str]:
        """
        IPv6 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in6")

    @property
    @pulumi.getter(name="routeMapInEvpn")
    def route_map_in_evpn(self) -> Optional[str]:
        """
        L2VPN EVPN inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_evpn")

    @property
    @pulumi.getter(name="routeMapInVpnv4")
    def route_map_in_vpnv4(self) -> Optional[str]:
        """
        VPNv4 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv4")

    @property
    @pulumi.getter(name="routeMapInVpnv6")
    def route_map_in_vpnv6(self) -> Optional[str]:
        """
        VPNv6 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv6")

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> Optional[str]:
        """
        IPv4 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out")

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> Optional[str]:
        """
        IPv6 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out6")

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> Optional[str]:
        """
        IPv6 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out6_preferable")

    @property
    @pulumi.getter(name="routeMapOutEvpn")
    def route_map_out_evpn(self) -> Optional[str]:
        """
        L2VPN EVPN outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_evpn")

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> Optional[str]:
        """
        IPv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv4")
    def route_map_out_vpnv4(self) -> Optional[str]:
        """
        VPNv4 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv4")

    @property
    @pulumi.getter(name="routeMapOutVpnv4Preferable")
    def route_map_out_vpnv4_preferable(self) -> Optional[str]:
        """
        VPNv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv4_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv6")
    def route_map_out_vpnv6(self) -> Optional[str]:
        """
        VPNv6 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv6")

    @property
    @pulumi.getter(name="routeMapOutVpnv6Preferable")
    def route_map_out_vpnv6_preferable(self) -> Optional[str]:
        """
        VPNv6 outbound route map filter if this neighbor is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv6_preferable")

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> Optional[str]:
        """
        Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client")

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> Optional[str]:
        """
        Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client6")

    @property
    @pulumi.getter(name="routeReflectorClientEvpn")
    def route_reflector_client_evpn(self) -> Optional[str]:
        """
        Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_evpn")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv4")
    def route_reflector_client_vpnv4(self) -> Optional[str]:
        """
        Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_vpnv4")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv6")
    def route_reflector_client_vpnv6(self) -> Optional[str]:
        """
        Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_vpnv6")

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> Optional[str]:
        """
        Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client")

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> Optional[str]:
        """
        Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client6")

    @property
    @pulumi.getter(name="routeServerClientEvpn")
    def route_server_client_evpn(self) -> Optional[str]:
        """
        Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_evpn")

    @property
    @pulumi.getter(name="routeServerClientVpnv4")
    def route_server_client_vpnv4(self) -> Optional[str]:
        """
        Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_vpnv4")

    @property
    @pulumi.getter(name="routeServerClientVpnv6")
    def route_server_client_vpnv6(self) -> Optional[str]:
        """
        Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_vpnv6")

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[str]:
        """
        IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community")

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> Optional[str]:
        """
        IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community6")

    @property
    @pulumi.getter(name="sendCommunityEvpn")
    def send_community_evpn(self) -> Optional[str]:
        """
        Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_evpn")

    @property
    @pulumi.getter(name="sendCommunityVpnv4")
    def send_community_vpnv4(self) -> Optional[str]:
        """
        Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_vpnv4")

    @property
    @pulumi.getter(name="sendCommunityVpnv6")
    def send_community_vpnv6(self) -> Optional[str]:
        """
        Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_vpnv6")

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[str]:
        """
        Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> Optional[str]:
        """
        Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration")

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> Optional[str]:
        """
        Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration6")

    @property
    @pulumi.getter(name="softReconfigurationEvpn")
    def soft_reconfiguration_evpn(self) -> Optional[str]:
        """
        Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_evpn")

    @property
    @pulumi.getter(name="softReconfigurationVpnv4")
    def soft_reconfiguration_vpnv4(self) -> Optional[str]:
        """
        Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv4")

    @property
    @pulumi.getter(name="softReconfigurationVpnv6")
    def soft_reconfiguration_vpnv6(self) -> Optional[str]:
        """
        Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv6")

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> Optional[str]:
        """
        Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "stale_route")

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> Optional[str]:
        """
        Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_capability_match")

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> Optional[str]:
        """
        IPv4 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map")

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> Optional[str]:
        """
        IPv6 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map6")

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> Optional[str]:
        """
        Interface to use as source IP/IPv6 address of TCP connections.
        """
        return pulumi.get(self, "update_source")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Neighbor weight.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class BgpNeighborRange6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxNeighborNum":
            suggest = "max_neighbor_num"
        elif key == "neighborGroup":
            suggest = "neighbor_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpNeighborRange6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpNeighborRange6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpNeighborRange6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 max_neighbor_num: Optional[int] = None,
                 neighbor_group: Optional[str] = None,
                 prefix6: Optional[str] = None):
        """
        :param int id: ID.
        :param int max_neighbor_num: Maximum number of neighbors.
        :param str neighbor_group: BGP neighbor group table. The structure of `neighbor_group` block is documented below.
        :param str prefix6: Aggregate IPv6 prefix.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_neighbor_num is not None:
            pulumi.set(__self__, "max_neighbor_num", max_neighbor_num)
        if neighbor_group is not None:
            pulumi.set(__self__, "neighbor_group", neighbor_group)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxNeighborNum")
    def max_neighbor_num(self) -> Optional[int]:
        """
        Maximum number of neighbors.
        """
        return pulumi.get(self, "max_neighbor_num")

    @property
    @pulumi.getter(name="neighborGroup")
    def neighbor_group(self) -> Optional[str]:
        """
        BGP neighbor group table. The structure of `neighbor_group` block is documented below.
        """
        return pulumi.get(self, "neighbor_group")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        """
        Aggregate IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class BgpNeighborRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxNeighborNum":
            suggest = "max_neighbor_num"
        elif key == "neighborGroup":
            suggest = "neighbor_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpNeighborRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpNeighborRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpNeighborRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 max_neighbor_num: Optional[int] = None,
                 neighbor_group: Optional[str] = None,
                 prefix: Optional[str] = None):
        """
        :param int id: IPv6 neighbor range ID.
        :param int max_neighbor_num: Maximum number of neighbors.
        :param str neighbor_group: Neighbor group name.
        :param str prefix: Neighbor range prefix.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_neighbor_num is not None:
            pulumi.set(__self__, "max_neighbor_num", max_neighbor_num)
        if neighbor_group is not None:
            pulumi.set(__self__, "neighbor_group", neighbor_group)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        IPv6 neighbor range ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxNeighborNum")
    def max_neighbor_num(self) -> Optional[int]:
        """
        Maximum number of neighbors.
        """
        return pulumi.get(self, "max_neighbor_num")

    @property
    @pulumi.getter(name="neighborGroup")
    def neighbor_group(self) -> Optional[str]:
        """
        Neighbor group name.
        """
        return pulumi.get(self, "neighbor_group")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Neighbor range prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class BgpNetwork6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkImportCheck":
            suggest = "network_import_check"
        elif key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpNetwork6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpNetwork6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpNetwork6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backdoor: Optional[str] = None,
                 id: Optional[int] = None,
                 network_import_check: Optional[str] = None,
                 prefix6: Optional[str] = None,
                 route_map: Optional[str] = None):
        """
        :param str backdoor: Enable/disable route as backdoor. Valid values: `enable`, `disable`.
        :param int id: ID.
        :param str network_import_check: Enable/disable ensure BGP network route exists in IGP. Valid values: `enable`, `disable`.
        :param str prefix6: Aggregate IPv6 prefix.
        :param str route_map: Route map of VRF leaking.
        """
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if network_import_check is not None:
            pulumi.set(__self__, "network_import_check", network_import_check)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[str]:
        """
        Enable/disable route as backdoor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> Optional[str]:
        """
        Enable/disable ensure BGP network route exists in IGP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "network_import_check")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        """
        Aggregate IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")


@pulumi.output_type
class BgpNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkImportCheck":
            suggest = "network_import_check"
        elif key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backdoor: Optional[str] = None,
                 id: Optional[int] = None,
                 network_import_check: Optional[str] = None,
                 prefix: Optional[str] = None,
                 route_map: Optional[str] = None):
        """
        :param str backdoor: Enable/disable route as backdoor. Valid values: `enable`, `disable`.
        :param int id: ID.
        :param str network_import_check: Configure insurance of BGP network route existence in IGP. Valid values: `global`, `enable`, `disable`.
        :param str prefix: Network prefix.
        :param str route_map: Route map to modify generated route.
        """
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if network_import_check is not None:
            pulumi.set(__self__, "network_import_check", network_import_check)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[str]:
        """
        Enable/disable route as backdoor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> Optional[str]:
        """
        Configure insurance of BGP network route existence in IGP. Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "network_import_check")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        """
        Route map to modify generated route.
        """
        return pulumi.get(self, "route_map")


@pulumi.output_type
class BgpRedistribute6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpRedistribute6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpRedistribute6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpRedistribute6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 route_map: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str name: Neighbor group name.
        :param str route_map: Route map of VRF leaking.
        :param str status: Status Valid values: `enable`, `disable`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Neighbor group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class BgpRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 route_map: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str name: Distribute list entry name.
        :param str route_map: Route map name.
        :param str status: Status Valid values: `enable`, `disable`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Distribute list entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        """
        Route map name.
        """
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class BgpVrf6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exportRts":
            suggest = "export_rts"
        elif key == "importRouteMap":
            suggest = "import_route_map"
        elif key == "importRts":
            suggest = "import_rts"
        elif key == "leakTargets":
            suggest = "leak_targets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpVrf6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpVrf6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpVrf6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 export_rts: Optional[Sequence['outputs.BgpVrf6ExportRt']] = None,
                 import_route_map: Optional[str] = None,
                 import_rts: Optional[Sequence['outputs.BgpVrf6ImportRt']] = None,
                 leak_targets: Optional[Sequence['outputs.BgpVrf6LeakTarget']] = None,
                 rd: Optional[str] = None,
                 role: Optional[str] = None,
                 vrf: Optional[str] = None):
        """
        :param Sequence['BgpVrf6ExportRtArgs'] export_rts: List of export route target. The structure of `export_rt` block is documented below.
        :param str import_route_map: Import route map.
        :param Sequence['BgpVrf6ImportRtArgs'] import_rts: List of import route target. The structure of `import_rt` block is documented below.
        :param Sequence['BgpVrf6LeakTargetArgs'] leak_targets: Target VRF table. The structure of `leak_target` block is documented below.
        :param str rd: Route Distinguisher: AA:NN|A.B.C.D:NN.
        :param str role: VRF role. Valid values: `standalone`, `ce`, `pe`.
        :param str vrf: BGP VRF leaking table. The structure of `vrf` block is documented below.
        """
        if export_rts is not None:
            pulumi.set(__self__, "export_rts", export_rts)
        if import_route_map is not None:
            pulumi.set(__self__, "import_route_map", import_route_map)
        if import_rts is not None:
            pulumi.set(__self__, "import_rts", import_rts)
        if leak_targets is not None:
            pulumi.set(__self__, "leak_targets", leak_targets)
        if rd is not None:
            pulumi.set(__self__, "rd", rd)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="exportRts")
    def export_rts(self) -> Optional[Sequence['outputs.BgpVrf6ExportRt']]:
        """
        List of export route target. The structure of `export_rt` block is documented below.
        """
        return pulumi.get(self, "export_rts")

    @property
    @pulumi.getter(name="importRouteMap")
    def import_route_map(self) -> Optional[str]:
        """
        Import route map.
        """
        return pulumi.get(self, "import_route_map")

    @property
    @pulumi.getter(name="importRts")
    def import_rts(self) -> Optional[Sequence['outputs.BgpVrf6ImportRt']]:
        """
        List of import route target. The structure of `import_rt` block is documented below.
        """
        return pulumi.get(self, "import_rts")

    @property
    @pulumi.getter(name="leakTargets")
    def leak_targets(self) -> Optional[Sequence['outputs.BgpVrf6LeakTarget']]:
        """
        Target VRF table. The structure of `leak_target` block is documented below.
        """
        return pulumi.get(self, "leak_targets")

    @property
    @pulumi.getter
    def rd(self) -> Optional[str]:
        """
        Route Distinguisher: AA:NN|A.B.C.D:NN.
        """
        return pulumi.get(self, "rd")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        VRF role. Valid values: `standalone`, `ce`, `pe`.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        """
        BGP VRF leaking table. The structure of `vrf` block is documented below.
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class BgpVrf6ExportRt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTarget":
            suggest = "route_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpVrf6ExportRt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpVrf6ExportRt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpVrf6ExportRt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_target: Optional[str] = None):
        """
        :param str route_target: Attribute: AA:NN|A.B.C.D:NN.
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[str]:
        """
        Attribute: AA:NN|A.B.C.D:NN.
        """
        return pulumi.get(self, "route_target")


@pulumi.output_type
class BgpVrf6ImportRt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTarget":
            suggest = "route_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpVrf6ImportRt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpVrf6ImportRt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpVrf6ImportRt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_target: Optional[str] = None):
        """
        :param str route_target: Attribute: AA:NN|A.B.C.D:NN
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[str]:
        """
        Attribute: AA:NN|A.B.C.D:NN
        """
        return pulumi.get(self, "route_target")


@pulumi.output_type
class BgpVrf6LeakTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpVrf6LeakTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpVrf6LeakTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpVrf6LeakTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface: Optional[str] = None,
                 route_map: Optional[str] = None,
                 vrf: Optional[str] = None):
        """
        :param str interface: Interface which is used to leak routes to target VRF.
        :param str route_map: Route map of VRF leaking.
        :param str vrf: Target VRF ID. On FortiOS versions 7.2.0-7.2.3: 0 - 63. On FortiOS versions >= 7.2.4: 0 - 251.
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Interface which is used to leak routes to target VRF.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        """
        Target VRF ID. On FortiOS versions 7.2.0-7.2.3: 0 - 63. On FortiOS versions >= 7.2.4: 0 - 251.
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class BgpVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exportRts":
            suggest = "export_rts"
        elif key == "importRouteMap":
            suggest = "import_route_map"
        elif key == "importRts":
            suggest = "import_rts"
        elif key == "leakTargets":
            suggest = "leak_targets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 export_rts: Optional[Sequence['outputs.BgpVrfExportRt']] = None,
                 import_route_map: Optional[str] = None,
                 import_rts: Optional[Sequence['outputs.BgpVrfImportRt']] = None,
                 leak_targets: Optional[Sequence['outputs.BgpVrfLeakTarget']] = None,
                 rd: Optional[str] = None,
                 role: Optional[str] = None,
                 vrf: Optional[str] = None):
        """
        :param Sequence['BgpVrfExportRtArgs'] export_rts: List of export route target. The structure of `export_rt` block is documented below.
        :param str import_route_map: Import route map.
        :param Sequence['BgpVrfImportRtArgs'] import_rts: List of import route target. The structure of `import_rt` block is documented below.
        :param Sequence['BgpVrfLeakTargetArgs'] leak_targets: Target VRF table. The structure of `leak_target` block is documented below.
        :param str rd: Route Distinguisher: AA|AA:NN.
        :param str role: VRF role. Valid values: `standalone`, `ce`, `pe`.
        :param str vrf: Origin VRF ID. On FortiOS versions 7.2.0-7.2.3: 0 - 63. On FortiOS versions >= 7.2.4: 0 - 251.
        """
        if export_rts is not None:
            pulumi.set(__self__, "export_rts", export_rts)
        if import_route_map is not None:
            pulumi.set(__self__, "import_route_map", import_route_map)
        if import_rts is not None:
            pulumi.set(__self__, "import_rts", import_rts)
        if leak_targets is not None:
            pulumi.set(__self__, "leak_targets", leak_targets)
        if rd is not None:
            pulumi.set(__self__, "rd", rd)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="exportRts")
    def export_rts(self) -> Optional[Sequence['outputs.BgpVrfExportRt']]:
        """
        List of export route target. The structure of `export_rt` block is documented below.
        """
        return pulumi.get(self, "export_rts")

    @property
    @pulumi.getter(name="importRouteMap")
    def import_route_map(self) -> Optional[str]:
        """
        Import route map.
        """
        return pulumi.get(self, "import_route_map")

    @property
    @pulumi.getter(name="importRts")
    def import_rts(self) -> Optional[Sequence['outputs.BgpVrfImportRt']]:
        """
        List of import route target. The structure of `import_rt` block is documented below.
        """
        return pulumi.get(self, "import_rts")

    @property
    @pulumi.getter(name="leakTargets")
    def leak_targets(self) -> Optional[Sequence['outputs.BgpVrfLeakTarget']]:
        """
        Target VRF table. The structure of `leak_target` block is documented below.
        """
        return pulumi.get(self, "leak_targets")

    @property
    @pulumi.getter
    def rd(self) -> Optional[str]:
        """
        Route Distinguisher: AA|AA:NN.
        """
        return pulumi.get(self, "rd")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        VRF role. Valid values: `standalone`, `ce`, `pe`.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        """
        Origin VRF ID. On FortiOS versions 7.2.0-7.2.3: 0 - 63. On FortiOS versions >= 7.2.4: 0 - 251.
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class BgpVrfExportRt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTarget":
            suggest = "route_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpVrfExportRt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpVrfExportRt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpVrfExportRt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_target: Optional[str] = None):
        """
        :param str route_target: Attribute: AA:NN|A.B.C.D:NN.
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[str]:
        """
        Attribute: AA:NN|A.B.C.D:NN.
        """
        return pulumi.get(self, "route_target")


@pulumi.output_type
class BgpVrfImportRt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeTarget":
            suggest = "route_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpVrfImportRt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpVrfImportRt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpVrfImportRt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route_target: Optional[str] = None):
        """
        :param str route_target: Attribute: AA:NN|A.B.C.D:NN
        """
        if route_target is not None:
            pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> Optional[str]:
        """
        Attribute: AA:NN|A.B.C.D:NN
        """
        return pulumi.get(self, "route_target")


@pulumi.output_type
class BgpVrfLeak6(dict):
    def __init__(__self__, *,
                 targets: Optional[Sequence['outputs.BgpVrfLeak6Target']] = None,
                 vrf: Optional[str] = None):
        """
        :param Sequence['BgpVrfLeak6TargetArgs'] targets: Target VRF table. The structure of `target` block is documented below.
        :param str vrf: BGP VRF leaking table. The structure of `vrf` block is documented below.
        """
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.BgpVrfLeak6Target']]:
        """
        Target VRF table. The structure of `target` block is documented below.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        """
        BGP VRF leaking table. The structure of `vrf` block is documented below.
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class BgpVrfLeak6Target(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpVrfLeak6Target. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpVrfLeak6Target.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpVrfLeak6Target.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface: Optional[str] = None,
                 route_map: Optional[str] = None,
                 vrf: Optional[str] = None):
        """
        :param str interface: Interface which is used to leak routes to target VRF.
        :param str route_map: Route map of VRF leaking.
        :param str vrf: Target VRF ID (0 - 31).
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Interface which is used to leak routes to target VRF.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        """
        Target VRF ID (0 - 31).
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class BgpVrfLeak(dict):
    def __init__(__self__, *,
                 targets: Optional[Sequence['outputs.BgpVrfLeakTarget']] = None,
                 vrf: Optional[str] = None):
        """
        :param Sequence['BgpVrfLeakTargetArgs'] targets: Target VRF table. The structure of `target` block is documented below.
        :param str vrf: Origin VRF ID (0 - 31).
        """
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.BgpVrfLeakTarget']]:
        """
        Target VRF table. The structure of `target` block is documented below.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        """
        Origin VRF ID (0 - 31).
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class BgpVrfLeakTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpVrfLeakTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpVrfLeakTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpVrfLeakTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface: Optional[str] = None,
                 route_map: Optional[str] = None,
                 vrf: Optional[str] = None):
        """
        :param str interface: Interface which is used to leak routes to target VRF.
        :param str route_map: Route map of VRF leaking.
        :param str vrf: Target VRF ID (0 - 31).
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Interface which is used to leak routes to target VRF.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        """
        Target VRF ID (0 - 31).
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class CommunitylistRule(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 match: Optional[str] = None,
                 regexp: Optional[str] = None):
        """
        :param str action: Permit or deny route-based operations, based on the route's COMMUNITY attribute. Valid values: `deny`, `permit`.
        :param int id: ID.
        :param str match: Community specifications for matching a reserved community.
        :param str regexp: Ordered list of COMMUNITY attributes as a regular expression.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Permit or deny route-based operations, based on the route's COMMUNITY attribute. Valid values: `deny`, `permit`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        """
        Community specifications for matching a reserved community.
        """
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def regexp(self) -> Optional[str]:
        """
        Ordered list of COMMUNITY attributes as a regular expression.
        """
        return pulumi.get(self, "regexp")


@pulumi.output_type
class ExtcommunitylistRule(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 match: Optional[str] = None,
                 regexp: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str action: Permit or deny route-based operations, based on the route's EXTENDED COMMUNITY attribute. Valid values: `deny`, `permit`.
        :param int id: ID.
        :param str match: Extended community specifications for matching a reserved extended community.
        :param str regexp: Ordered list of EXTENDED COMMUNITY attributes as a regular expression.
        :param str type: Type of extended community. Valid values: `rt`, `soo`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Permit or deny route-based operations, based on the route's EXTENDED COMMUNITY attribute. Valid values: `deny`, `permit`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        """
        Extended community specifications for matching a reserved extended community.
        """
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def regexp(self) -> Optional[str]:
        """
        Ordered list of EXTENDED COMMUNITY attributes as a regular expression.
        """
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of extended community. Valid values: `rt`, `soo`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class IsisIsisInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKeychainL1":
            suggest = "auth_keychain_l1"
        elif key == "authKeychainL2":
            suggest = "auth_keychain_l2"
        elif key == "authModeL1":
            suggest = "auth_mode_l1"
        elif key == "authModeL2":
            suggest = "auth_mode_l2"
        elif key == "authPasswordL1":
            suggest = "auth_password_l1"
        elif key == "authPasswordL2":
            suggest = "auth_password_l2"
        elif key == "authSendOnlyL1":
            suggest = "auth_send_only_l1"
        elif key == "authSendOnlyL2":
            suggest = "auth_send_only_l2"
        elif key == "circuitType":
            suggest = "circuit_type"
        elif key == "csnpIntervalL1":
            suggest = "csnp_interval_l1"
        elif key == "csnpIntervalL2":
            suggest = "csnp_interval_l2"
        elif key == "helloIntervalL1":
            suggest = "hello_interval_l1"
        elif key == "helloIntervalL2":
            suggest = "hello_interval_l2"
        elif key == "helloMultiplierL1":
            suggest = "hello_multiplier_l1"
        elif key == "helloMultiplierL2":
            suggest = "hello_multiplier_l2"
        elif key == "helloPadding":
            suggest = "hello_padding"
        elif key == "lspInterval":
            suggest = "lsp_interval"
        elif key == "lspRetransmitInterval":
            suggest = "lsp_retransmit_interval"
        elif key == "meshGroup":
            suggest = "mesh_group"
        elif key == "meshGroupId":
            suggest = "mesh_group_id"
        elif key == "metricL1":
            suggest = "metric_l1"
        elif key == "metricL2":
            suggest = "metric_l2"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "priorityL1":
            suggest = "priority_l1"
        elif key == "priorityL2":
            suggest = "priority_l2"
        elif key == "wideMetricL1":
            suggest = "wide_metric_l1"
        elif key == "wideMetricL2":
            suggest = "wide_metric_l2"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IsisIsisInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IsisIsisInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IsisIsisInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_keychain_l1: Optional[str] = None,
                 auth_keychain_l2: Optional[str] = None,
                 auth_mode_l1: Optional[str] = None,
                 auth_mode_l2: Optional[str] = None,
                 auth_password_l1: Optional[str] = None,
                 auth_password_l2: Optional[str] = None,
                 auth_send_only_l1: Optional[str] = None,
                 auth_send_only_l2: Optional[str] = None,
                 circuit_type: Optional[str] = None,
                 csnp_interval_l1: Optional[int] = None,
                 csnp_interval_l2: Optional[int] = None,
                 hello_interval_l1: Optional[int] = None,
                 hello_interval_l2: Optional[int] = None,
                 hello_multiplier_l1: Optional[int] = None,
                 hello_multiplier_l2: Optional[int] = None,
                 hello_padding: Optional[str] = None,
                 lsp_interval: Optional[int] = None,
                 lsp_retransmit_interval: Optional[int] = None,
                 mesh_group: Optional[str] = None,
                 mesh_group_id: Optional[int] = None,
                 metric_l1: Optional[int] = None,
                 metric_l2: Optional[int] = None,
                 name: Optional[str] = None,
                 network_type: Optional[str] = None,
                 priority_l1: Optional[int] = None,
                 priority_l2: Optional[int] = None,
                 status: Optional[str] = None,
                 status6: Optional[str] = None,
                 wide_metric_l1: Optional[int] = None,
                 wide_metric_l2: Optional[int] = None):
        """
        :param str auth_keychain_l1: Authentication key-chain for level 1 PDUs.
        :param str auth_keychain_l2: Authentication key-chain for level 2 PDUs.
        :param str auth_mode_l1: Level 1 authentication mode. Valid values: `md5`, `password`.
        :param str auth_mode_l2: Level 2 authentication mode. Valid values: `md5`, `password`.
        :param str auth_password_l1: Authentication password for level 1 PDUs.
        :param str auth_password_l2: Authentication password for level 2 PDUs.
        :param str auth_send_only_l1: Enable/disable authentication send-only for level 1 PDUs. Valid values: `enable`, `disable`.
        :param str auth_send_only_l2: Enable/disable authentication send-only for level 2 PDUs. Valid values: `enable`, `disable`.
        :param str circuit_type: IS-IS interface's circuit type Valid values: `level-1-2`, `level-1`, `level-2`.
        :param int csnp_interval_l1: Level 1 CSNP interval.
        :param int csnp_interval_l2: Level 2 CSNP interval.
        :param int hello_interval_l1: Level 1 hello interval.
        :param int hello_interval_l2: Level 2 hello interval.
        :param int hello_multiplier_l1: Level 1 multiplier for Hello holding time.
        :param int hello_multiplier_l2: Level 2 multiplier for Hello holding time.
        :param str hello_padding: Enable/disable padding to IS-IS hello packets. Valid values: `enable`, `disable`.
        :param int lsp_interval: LSP transmission interval (milliseconds).
        :param int lsp_retransmit_interval: LSP retransmission interval (sec).
        :param str mesh_group: Enable/disable IS-IS mesh group. Valid values: `enable`, `disable`.
        :param int mesh_group_id: Mesh group ID <0-4294967295>, 0: mesh-group blocked.
        :param int metric_l1: Level 1 metric for interface.
        :param int metric_l2: Level 2 metric for interface.
        :param str name: IS-IS interface name.
        :param str network_type: IS-IS interface's network type Valid values: `broadcast`, `point-to-point`, `loopback`.
        :param int priority_l1: Level 1 priority.
        :param int priority_l2: Level 2 priority.
        :param str status: Enable/disable interface for IS-IS. Valid values: `enable`, `disable`.
        :param str status6: Enable/disable IPv6 interface for IS-IS. Valid values: `enable`, `disable`.
        :param int wide_metric_l1: Level 1 wide metric for interface.
        :param int wide_metric_l2: Level 2 wide metric for interface.
        """
        if auth_keychain_l1 is not None:
            pulumi.set(__self__, "auth_keychain_l1", auth_keychain_l1)
        if auth_keychain_l2 is not None:
            pulumi.set(__self__, "auth_keychain_l2", auth_keychain_l2)
        if auth_mode_l1 is not None:
            pulumi.set(__self__, "auth_mode_l1", auth_mode_l1)
        if auth_mode_l2 is not None:
            pulumi.set(__self__, "auth_mode_l2", auth_mode_l2)
        if auth_password_l1 is not None:
            pulumi.set(__self__, "auth_password_l1", auth_password_l1)
        if auth_password_l2 is not None:
            pulumi.set(__self__, "auth_password_l2", auth_password_l2)
        if auth_send_only_l1 is not None:
            pulumi.set(__self__, "auth_send_only_l1", auth_send_only_l1)
        if auth_send_only_l2 is not None:
            pulumi.set(__self__, "auth_send_only_l2", auth_send_only_l2)
        if circuit_type is not None:
            pulumi.set(__self__, "circuit_type", circuit_type)
        if csnp_interval_l1 is not None:
            pulumi.set(__self__, "csnp_interval_l1", csnp_interval_l1)
        if csnp_interval_l2 is not None:
            pulumi.set(__self__, "csnp_interval_l2", csnp_interval_l2)
        if hello_interval_l1 is not None:
            pulumi.set(__self__, "hello_interval_l1", hello_interval_l1)
        if hello_interval_l2 is not None:
            pulumi.set(__self__, "hello_interval_l2", hello_interval_l2)
        if hello_multiplier_l1 is not None:
            pulumi.set(__self__, "hello_multiplier_l1", hello_multiplier_l1)
        if hello_multiplier_l2 is not None:
            pulumi.set(__self__, "hello_multiplier_l2", hello_multiplier_l2)
        if hello_padding is not None:
            pulumi.set(__self__, "hello_padding", hello_padding)
        if lsp_interval is not None:
            pulumi.set(__self__, "lsp_interval", lsp_interval)
        if lsp_retransmit_interval is not None:
            pulumi.set(__self__, "lsp_retransmit_interval", lsp_retransmit_interval)
        if mesh_group is not None:
            pulumi.set(__self__, "mesh_group", mesh_group)
        if mesh_group_id is not None:
            pulumi.set(__self__, "mesh_group_id", mesh_group_id)
        if metric_l1 is not None:
            pulumi.set(__self__, "metric_l1", metric_l1)
        if metric_l2 is not None:
            pulumi.set(__self__, "metric_l2", metric_l2)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if priority_l1 is not None:
            pulumi.set(__self__, "priority_l1", priority_l1)
        if priority_l2 is not None:
            pulumi.set(__self__, "priority_l2", priority_l2)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status6 is not None:
            pulumi.set(__self__, "status6", status6)
        if wide_metric_l1 is not None:
            pulumi.set(__self__, "wide_metric_l1", wide_metric_l1)
        if wide_metric_l2 is not None:
            pulumi.set(__self__, "wide_metric_l2", wide_metric_l2)

    @property
    @pulumi.getter(name="authKeychainL1")
    def auth_keychain_l1(self) -> Optional[str]:
        """
        Authentication key-chain for level 1 PDUs.
        """
        return pulumi.get(self, "auth_keychain_l1")

    @property
    @pulumi.getter(name="authKeychainL2")
    def auth_keychain_l2(self) -> Optional[str]:
        """
        Authentication key-chain for level 2 PDUs.
        """
        return pulumi.get(self, "auth_keychain_l2")

    @property
    @pulumi.getter(name="authModeL1")
    def auth_mode_l1(self) -> Optional[str]:
        """
        Level 1 authentication mode. Valid values: `md5`, `password`.
        """
        return pulumi.get(self, "auth_mode_l1")

    @property
    @pulumi.getter(name="authModeL2")
    def auth_mode_l2(self) -> Optional[str]:
        """
        Level 2 authentication mode. Valid values: `md5`, `password`.
        """
        return pulumi.get(self, "auth_mode_l2")

    @property
    @pulumi.getter(name="authPasswordL1")
    def auth_password_l1(self) -> Optional[str]:
        """
        Authentication password for level 1 PDUs.
        """
        return pulumi.get(self, "auth_password_l1")

    @property
    @pulumi.getter(name="authPasswordL2")
    def auth_password_l2(self) -> Optional[str]:
        """
        Authentication password for level 2 PDUs.
        """
        return pulumi.get(self, "auth_password_l2")

    @property
    @pulumi.getter(name="authSendOnlyL1")
    def auth_send_only_l1(self) -> Optional[str]:
        """
        Enable/disable authentication send-only for level 1 PDUs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_send_only_l1")

    @property
    @pulumi.getter(name="authSendOnlyL2")
    def auth_send_only_l2(self) -> Optional[str]:
        """
        Enable/disable authentication send-only for level 2 PDUs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_send_only_l2")

    @property
    @pulumi.getter(name="circuitType")
    def circuit_type(self) -> Optional[str]:
        """
        IS-IS interface's circuit type Valid values: `level-1-2`, `level-1`, `level-2`.
        """
        return pulumi.get(self, "circuit_type")

    @property
    @pulumi.getter(name="csnpIntervalL1")
    def csnp_interval_l1(self) -> Optional[int]:
        """
        Level 1 CSNP interval.
        """
        return pulumi.get(self, "csnp_interval_l1")

    @property
    @pulumi.getter(name="csnpIntervalL2")
    def csnp_interval_l2(self) -> Optional[int]:
        """
        Level 2 CSNP interval.
        """
        return pulumi.get(self, "csnp_interval_l2")

    @property
    @pulumi.getter(name="helloIntervalL1")
    def hello_interval_l1(self) -> Optional[int]:
        """
        Level 1 hello interval.
        """
        return pulumi.get(self, "hello_interval_l1")

    @property
    @pulumi.getter(name="helloIntervalL2")
    def hello_interval_l2(self) -> Optional[int]:
        """
        Level 2 hello interval.
        """
        return pulumi.get(self, "hello_interval_l2")

    @property
    @pulumi.getter(name="helloMultiplierL1")
    def hello_multiplier_l1(self) -> Optional[int]:
        """
        Level 1 multiplier for Hello holding time.
        """
        return pulumi.get(self, "hello_multiplier_l1")

    @property
    @pulumi.getter(name="helloMultiplierL2")
    def hello_multiplier_l2(self) -> Optional[int]:
        """
        Level 2 multiplier for Hello holding time.
        """
        return pulumi.get(self, "hello_multiplier_l2")

    @property
    @pulumi.getter(name="helloPadding")
    def hello_padding(self) -> Optional[str]:
        """
        Enable/disable padding to IS-IS hello packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "hello_padding")

    @property
    @pulumi.getter(name="lspInterval")
    def lsp_interval(self) -> Optional[int]:
        """
        LSP transmission interval (milliseconds).
        """
        return pulumi.get(self, "lsp_interval")

    @property
    @pulumi.getter(name="lspRetransmitInterval")
    def lsp_retransmit_interval(self) -> Optional[int]:
        """
        LSP retransmission interval (sec).
        """
        return pulumi.get(self, "lsp_retransmit_interval")

    @property
    @pulumi.getter(name="meshGroup")
    def mesh_group(self) -> Optional[str]:
        """
        Enable/disable IS-IS mesh group. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mesh_group")

    @property
    @pulumi.getter(name="meshGroupId")
    def mesh_group_id(self) -> Optional[int]:
        """
        Mesh group ID <0-4294967295>, 0: mesh-group blocked.
        """
        return pulumi.get(self, "mesh_group_id")

    @property
    @pulumi.getter(name="metricL1")
    def metric_l1(self) -> Optional[int]:
        """
        Level 1 metric for interface.
        """
        return pulumi.get(self, "metric_l1")

    @property
    @pulumi.getter(name="metricL2")
    def metric_l2(self) -> Optional[int]:
        """
        Level 2 metric for interface.
        """
        return pulumi.get(self, "metric_l2")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        IS-IS interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        """
        IS-IS interface's network type Valid values: `broadcast`, `point-to-point`, `loopback`.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="priorityL1")
    def priority_l1(self) -> Optional[int]:
        """
        Level 1 priority.
        """
        return pulumi.get(self, "priority_l1")

    @property
    @pulumi.getter(name="priorityL2")
    def priority_l2(self) -> Optional[int]:
        """
        Level 2 priority.
        """
        return pulumi.get(self, "priority_l2")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable interface for IS-IS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def status6(self) -> Optional[str]:
        """
        Enable/disable IPv6 interface for IS-IS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status6")

    @property
    @pulumi.getter(name="wideMetricL1")
    def wide_metric_l1(self) -> Optional[int]:
        """
        Level 1 wide metric for interface.
        """
        return pulumi.get(self, "wide_metric_l1")

    @property
    @pulumi.getter(name="wideMetricL2")
    def wide_metric_l2(self) -> Optional[int]:
        """
        Level 2 wide metric for interface.
        """
        return pulumi.get(self, "wide_metric_l2")


@pulumi.output_type
class IsisIsisNet(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 net: Optional[str] = None):
        """
        :param int id: isis-net ID.
        :param str net: IS-IS networks (format = xx.xxxx.  .xxxx.xx.).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if net is not None:
            pulumi.set(__self__, "net", net)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        isis-net ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def net(self) -> Optional[str]:
        """
        IS-IS networks (format = xx.xxxx.  .xxxx.xx.).
        """
        return pulumi.get(self, "net")


@pulumi.output_type
class IsisRedistribute6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IsisRedistribute6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IsisRedistribute6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IsisRedistribute6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level: Optional[str] = None,
                 metric: Optional[int] = None,
                 metric_type: Optional[str] = None,
                 protocol: Optional[str] = None,
                 routemap: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str level: Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        :param int metric: Metric.
        :param str metric_type: Metric type. Valid values: `external`, `internal`.
        :param str protocol: Protocol name.
        :param str routemap: Route map name.
        :param str status: Enable/disable interface for IS-IS. Valid values: `enable`, `disable`.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        """
        Metric.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        """
        Metric type. Valid values: `external`, `internal`.
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol name.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def routemap(self) -> Optional[str]:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable interface for IS-IS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class IsisRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IsisRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IsisRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IsisRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 level: Optional[str] = None,
                 metric: Optional[int] = None,
                 metric_type: Optional[str] = None,
                 protocol: Optional[str] = None,
                 routemap: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str level: Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        :param int metric: Metric.
        :param str metric_type: Metric type. Valid values: `external`, `internal`.
        :param str protocol: Protocol name.
        :param str routemap: Route map name.
        :param str status: Enable/disable redistribution. Valid values: `enable`, `disable`.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        """
        Metric.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        """
        Metric type. Valid values: `external`, `internal`.
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol name.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def routemap(self) -> Optional[str]:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable redistribution. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class IsisSummaryAddress6(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 level: Optional[str] = None,
                 prefix6: Optional[str] = None):
        """
        :param int id: isis-net ID.
        :param str level: Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        :param str prefix6: IPv6 prefix.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        isis-net ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class IsisSummaryAddress(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 level: Optional[str] = None,
                 prefix: Optional[str] = None):
        """
        :param int id: Prefix entry ID.
        :param str level: Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        :param str prefix: Prefix.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Prefix entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        """
        Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class KeychainKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptLifetime":
            suggest = "accept_lifetime"
        elif key == "keyString":
            suggest = "key_string"
        elif key == "sendLifetime":
            suggest = "send_lifetime"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KeychainKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KeychainKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KeychainKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_lifetime: Optional[str] = None,
                 algorithm: Optional[str] = None,
                 id: Optional[int] = None,
                 key_string: Optional[str] = None,
                 send_lifetime: Optional[str] = None):
        """
        :param str accept_lifetime: Lifetime of received authentication key (format: hh:mm:ss day month year).
        :param str algorithm: Cryptographic algorithm.
        :param int id: Key ID (0 - 2147483647).
        :param str key_string: Password for the key. On FortiOS versions 6.2.0-7.0.0: max. = 35 characters. On FortiOS versions 7.0.1-7.0.3: maximum = 64 characters.
        :param str send_lifetime: Lifetime of sent authentication key (format: hh:mm:ss day month year).
        """
        if accept_lifetime is not None:
            pulumi.set(__self__, "accept_lifetime", accept_lifetime)
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if send_lifetime is not None:
            pulumi.set(__self__, "send_lifetime", send_lifetime)

    @property
    @pulumi.getter(name="acceptLifetime")
    def accept_lifetime(self) -> Optional[str]:
        """
        Lifetime of received authentication key (format: hh:mm:ss day month year).
        """
        return pulumi.get(self, "accept_lifetime")

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        """
        Cryptographic algorithm.
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Key ID (0 - 2147483647).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[str]:
        """
        Password for the key. On FortiOS versions 6.2.0-7.0.0: max. = 35 characters. On FortiOS versions 7.0.1-7.0.3: maximum = 64 characters.
        """
        return pulumi.get(self, "key_string")

    @property
    @pulumi.getter(name="sendLifetime")
    def send_lifetime(self) -> Optional[str]:
        """
        Lifetime of sent authentication key (format: hh:mm:ss day month year).
        """
        return pulumi.get(self, "send_lifetime")


@pulumi.output_type
class Multicast6Interface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "helloHoldtime":
            suggest = "hello_holdtime"
        elif key == "helloInterval":
            suggest = "hello_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Multicast6Interface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Multicast6Interface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Multicast6Interface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hello_holdtime: Optional[int] = None,
                 hello_interval: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param int hello_holdtime: Time before old neighbor information expires in seconds (1 - 65535, default = 105).
        :param int hello_interval: Interval between sending PIM hello messages in seconds (1 - 65535, default = 30).
        :param str name: Interface name.
        """
        if hello_holdtime is not None:
            pulumi.set(__self__, "hello_holdtime", hello_holdtime)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="helloHoldtime")
    def hello_holdtime(self) -> Optional[int]:
        """
        Time before old neighbor information expires in seconds (1 - 65535, default = 105).
        """
        return pulumi.get(self, "hello_holdtime")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[int]:
        """
        Interval between sending PIM hello messages in seconds (1 - 65535, default = 30).
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class Multicast6PimSmGlobal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "registerRateLimit":
            suggest = "register_rate_limit"
        elif key == "rpAddresses":
            suggest = "rp_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Multicast6PimSmGlobal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Multicast6PimSmGlobal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Multicast6PimSmGlobal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 register_rate_limit: Optional[int] = None,
                 rp_addresses: Optional[Sequence['outputs.Multicast6PimSmGlobalRpAddress']] = None):
        """
        :param int register_rate_limit: Limit of packets/sec per source registered through this RP (0 means unlimited).
        :param Sequence['Multicast6PimSmGlobalRpAddressArgs'] rp_addresses: Statically configured RP addresses. The structure of `rp_address` block is documented below.
        """
        if register_rate_limit is not None:
            pulumi.set(__self__, "register_rate_limit", register_rate_limit)
        if rp_addresses is not None:
            pulumi.set(__self__, "rp_addresses", rp_addresses)

    @property
    @pulumi.getter(name="registerRateLimit")
    def register_rate_limit(self) -> Optional[int]:
        """
        Limit of packets/sec per source registered through this RP (0 means unlimited).
        """
        return pulumi.get(self, "register_rate_limit")

    @property
    @pulumi.getter(name="rpAddresses")
    def rp_addresses(self) -> Optional[Sequence['outputs.Multicast6PimSmGlobalRpAddress']]:
        """
        Statically configured RP addresses. The structure of `rp_address` block is documented below.
        """
        return pulumi.get(self, "rp_addresses")


@pulumi.output_type
class Multicast6PimSmGlobalRpAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ip6Address":
            suggest = "ip6_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Multicast6PimSmGlobalRpAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Multicast6PimSmGlobalRpAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Multicast6PimSmGlobalRpAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 ip6_address: Optional[str] = None):
        """
        :param int id: ID of the entry.
        :param str ip6_address: RP router IPv6 address.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip6_address is not None:
            pulumi.set(__self__, "ip6_address", ip6_address)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID of the entry.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> Optional[str]:
        """
        RP router IPv6 address.
        """
        return pulumi.get(self, "ip6_address")


@pulumi.output_type
class MulticastInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ciscoExcludeGenid":
            suggest = "cisco_exclude_genid"
        elif key == "drPriority":
            suggest = "dr_priority"
        elif key == "helloHoldtime":
            suggest = "hello_holdtime"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "joinGroups":
            suggest = "join_groups"
        elif key == "multicastFlow":
            suggest = "multicast_flow"
        elif key == "neighbourFilter":
            suggest = "neighbour_filter"
        elif key == "pimMode":
            suggest = "pim_mode"
        elif key == "propagationDelay":
            suggest = "propagation_delay"
        elif key == "rpCandidate":
            suggest = "rp_candidate"
        elif key == "rpCandidateGroup":
            suggest = "rp_candidate_group"
        elif key == "rpCandidateInterval":
            suggest = "rp_candidate_interval"
        elif key == "rpCandidatePriority":
            suggest = "rp_candidate_priority"
        elif key == "rpfNbrFailBack":
            suggest = "rpf_nbr_fail_back"
        elif key == "rpfNbrFailBackFilter":
            suggest = "rpf_nbr_fail_back_filter"
        elif key == "stateRefreshInterval":
            suggest = "state_refresh_interval"
        elif key == "staticGroup":
            suggest = "static_group"
        elif key == "ttlThreshold":
            suggest = "ttl_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MulticastInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MulticastInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MulticastInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bfd: Optional[str] = None,
                 cisco_exclude_genid: Optional[str] = None,
                 dr_priority: Optional[int] = None,
                 hello_holdtime: Optional[int] = None,
                 hello_interval: Optional[int] = None,
                 igmp: Optional['outputs.MulticastInterfaceIgmp'] = None,
                 join_groups: Optional[Sequence['outputs.MulticastInterfaceJoinGroup']] = None,
                 multicast_flow: Optional[str] = None,
                 name: Optional[str] = None,
                 neighbour_filter: Optional[str] = None,
                 passive: Optional[str] = None,
                 pim_mode: Optional[str] = None,
                 propagation_delay: Optional[int] = None,
                 rp_candidate: Optional[str] = None,
                 rp_candidate_group: Optional[str] = None,
                 rp_candidate_interval: Optional[int] = None,
                 rp_candidate_priority: Optional[int] = None,
                 rpf_nbr_fail_back: Optional[str] = None,
                 rpf_nbr_fail_back_filter: Optional[str] = None,
                 state_refresh_interval: Optional[int] = None,
                 static_group: Optional[str] = None,
                 ttl_threshold: Optional[int] = None):
        """
        :param str bfd: Enable/disable Protocol Independent Multicast (PIM) Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param str cisco_exclude_genid: Exclude GenID from hello packets (compatibility with old Cisco IOS). Valid values: `enable`, `disable`.
        :param int dr_priority: DR election priority.
        :param int hello_holdtime: Time before old neighbor information expires (0 - 65535 sec, default = 105).
        :param int hello_interval: Interval between sending PIM hello messages (0 - 65535 sec, default = 30).
        :param 'MulticastInterfaceIgmpArgs' igmp: IGMP configuration options. The structure of `igmp` block is documented below.
        :param Sequence['MulticastInterfaceJoinGroupArgs'] join_groups: Join multicast groups. The structure of `join_group` block is documented below.
        :param str multicast_flow: Acceptable source for multicast group.
        :param str name: Interface name.
        :param str neighbour_filter: Routers acknowledged as neighbor routers.
        :param str passive: Enable/disable listening to IGMP but not participating in PIM. Valid values: `enable`, `disable`.
        :param str pim_mode: PIM operation mode. Valid values: `sparse-mode`, `dense-mode`.
        :param int propagation_delay: Delay flooding packets on this interface (100 - 5000 msec, default = 500).
        :param str rp_candidate: Enable/disable compete to become RP in elections. Valid values: `enable`, `disable`.
        :param str rp_candidate_group: Multicast groups managed by this RP.
        :param int rp_candidate_interval: RP candidate advertisement interval (1 - 16383 sec, default = 60).
        :param int rp_candidate_priority: Router's priority as RP.
        :param str rpf_nbr_fail_back: Enable/disable fail back for RPF neighbor query. Valid values: `enable`, `disable`.
        :param str rpf_nbr_fail_back_filter: Filter for fail back RPF neighbors.
        :param int state_refresh_interval: Interval between sending state-refresh packets (1 - 100 sec, default = 60).
        :param str static_group: Statically set multicast groups to forward out.
        :param int ttl_threshold: Minimum TTL of multicast packets that will be forwarded (applied only to new multicast routes) (1 - 255, default = 1).
        """
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if cisco_exclude_genid is not None:
            pulumi.set(__self__, "cisco_exclude_genid", cisco_exclude_genid)
        if dr_priority is not None:
            pulumi.set(__self__, "dr_priority", dr_priority)
        if hello_holdtime is not None:
            pulumi.set(__self__, "hello_holdtime", hello_holdtime)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if igmp is not None:
            pulumi.set(__self__, "igmp", igmp)
        if join_groups is not None:
            pulumi.set(__self__, "join_groups", join_groups)
        if multicast_flow is not None:
            pulumi.set(__self__, "multicast_flow", multicast_flow)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if neighbour_filter is not None:
            pulumi.set(__self__, "neighbour_filter", neighbour_filter)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if pim_mode is not None:
            pulumi.set(__self__, "pim_mode", pim_mode)
        if propagation_delay is not None:
            pulumi.set(__self__, "propagation_delay", propagation_delay)
        if rp_candidate is not None:
            pulumi.set(__self__, "rp_candidate", rp_candidate)
        if rp_candidate_group is not None:
            pulumi.set(__self__, "rp_candidate_group", rp_candidate_group)
        if rp_candidate_interval is not None:
            pulumi.set(__self__, "rp_candidate_interval", rp_candidate_interval)
        if rp_candidate_priority is not None:
            pulumi.set(__self__, "rp_candidate_priority", rp_candidate_priority)
        if rpf_nbr_fail_back is not None:
            pulumi.set(__self__, "rpf_nbr_fail_back", rpf_nbr_fail_back)
        if rpf_nbr_fail_back_filter is not None:
            pulumi.set(__self__, "rpf_nbr_fail_back_filter", rpf_nbr_fail_back_filter)
        if state_refresh_interval is not None:
            pulumi.set(__self__, "state_refresh_interval", state_refresh_interval)
        if static_group is not None:
            pulumi.set(__self__, "static_group", static_group)
        if ttl_threshold is not None:
            pulumi.set(__self__, "ttl_threshold", ttl_threshold)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[str]:
        """
        Enable/disable Protocol Independent Multicast (PIM) Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="ciscoExcludeGenid")
    def cisco_exclude_genid(self) -> Optional[str]:
        """
        Exclude GenID from hello packets (compatibility with old Cisco IOS). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cisco_exclude_genid")

    @property
    @pulumi.getter(name="drPriority")
    def dr_priority(self) -> Optional[int]:
        """
        DR election priority.
        """
        return pulumi.get(self, "dr_priority")

    @property
    @pulumi.getter(name="helloHoldtime")
    def hello_holdtime(self) -> Optional[int]:
        """
        Time before old neighbor information expires (0 - 65535 sec, default = 105).
        """
        return pulumi.get(self, "hello_holdtime")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[int]:
        """
        Interval between sending PIM hello messages (0 - 65535 sec, default = 30).
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def igmp(self) -> Optional['outputs.MulticastInterfaceIgmp']:
        """
        IGMP configuration options. The structure of `igmp` block is documented below.
        """
        return pulumi.get(self, "igmp")

    @property
    @pulumi.getter(name="joinGroups")
    def join_groups(self) -> Optional[Sequence['outputs.MulticastInterfaceJoinGroup']]:
        """
        Join multicast groups. The structure of `join_group` block is documented below.
        """
        return pulumi.get(self, "join_groups")

    @property
    @pulumi.getter(name="multicastFlow")
    def multicast_flow(self) -> Optional[str]:
        """
        Acceptable source for multicast group.
        """
        return pulumi.get(self, "multicast_flow")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="neighbourFilter")
    def neighbour_filter(self) -> Optional[str]:
        """
        Routers acknowledged as neighbor routers.
        """
        return pulumi.get(self, "neighbour_filter")

    @property
    @pulumi.getter
    def passive(self) -> Optional[str]:
        """
        Enable/disable listening to IGMP but not participating in PIM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter(name="pimMode")
    def pim_mode(self) -> Optional[str]:
        """
        PIM operation mode. Valid values: `sparse-mode`, `dense-mode`.
        """
        return pulumi.get(self, "pim_mode")

    @property
    @pulumi.getter(name="propagationDelay")
    def propagation_delay(self) -> Optional[int]:
        """
        Delay flooding packets on this interface (100 - 5000 msec, default = 500).
        """
        return pulumi.get(self, "propagation_delay")

    @property
    @pulumi.getter(name="rpCandidate")
    def rp_candidate(self) -> Optional[str]:
        """
        Enable/disable compete to become RP in elections. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rp_candidate")

    @property
    @pulumi.getter(name="rpCandidateGroup")
    def rp_candidate_group(self) -> Optional[str]:
        """
        Multicast groups managed by this RP.
        """
        return pulumi.get(self, "rp_candidate_group")

    @property
    @pulumi.getter(name="rpCandidateInterval")
    def rp_candidate_interval(self) -> Optional[int]:
        """
        RP candidate advertisement interval (1 - 16383 sec, default = 60).
        """
        return pulumi.get(self, "rp_candidate_interval")

    @property
    @pulumi.getter(name="rpCandidatePriority")
    def rp_candidate_priority(self) -> Optional[int]:
        """
        Router's priority as RP.
        """
        return pulumi.get(self, "rp_candidate_priority")

    @property
    @pulumi.getter(name="rpfNbrFailBack")
    def rpf_nbr_fail_back(self) -> Optional[str]:
        """
        Enable/disable fail back for RPF neighbor query. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rpf_nbr_fail_back")

    @property
    @pulumi.getter(name="rpfNbrFailBackFilter")
    def rpf_nbr_fail_back_filter(self) -> Optional[str]:
        """
        Filter for fail back RPF neighbors.
        """
        return pulumi.get(self, "rpf_nbr_fail_back_filter")

    @property
    @pulumi.getter(name="stateRefreshInterval")
    def state_refresh_interval(self) -> Optional[int]:
        """
        Interval between sending state-refresh packets (1 - 100 sec, default = 60).
        """
        return pulumi.get(self, "state_refresh_interval")

    @property
    @pulumi.getter(name="staticGroup")
    def static_group(self) -> Optional[str]:
        """
        Statically set multicast groups to forward out.
        """
        return pulumi.get(self, "static_group")

    @property
    @pulumi.getter(name="ttlThreshold")
    def ttl_threshold(self) -> Optional[int]:
        """
        Minimum TTL of multicast packets that will be forwarded (applied only to new multicast routes) (1 - 255, default = 1).
        """
        return pulumi.get(self, "ttl_threshold")


@pulumi.output_type
class MulticastInterfaceIgmp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessGroup":
            suggest = "access_group"
        elif key == "immediateLeaveGroup":
            suggest = "immediate_leave_group"
        elif key == "lastMemberQueryCount":
            suggest = "last_member_query_count"
        elif key == "lastMemberQueryInterval":
            suggest = "last_member_query_interval"
        elif key == "queryInterval":
            suggest = "query_interval"
        elif key == "queryMaxResponseTime":
            suggest = "query_max_response_time"
        elif key == "queryTimeout":
            suggest = "query_timeout"
        elif key == "routerAlertCheck":
            suggest = "router_alert_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MulticastInterfaceIgmp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MulticastInterfaceIgmp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MulticastInterfaceIgmp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_group: Optional[str] = None,
                 immediate_leave_group: Optional[str] = None,
                 last_member_query_count: Optional[int] = None,
                 last_member_query_interval: Optional[int] = None,
                 query_interval: Optional[int] = None,
                 query_max_response_time: Optional[int] = None,
                 query_timeout: Optional[int] = None,
                 router_alert_check: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str access_group: Groups IGMP hosts are allowed to join.
        :param str immediate_leave_group: Groups to drop membership for immediately after receiving IGMPv2 leave.
        :param int last_member_query_count: Number of group specific queries before removing group (2 - 7, default = 2).
        :param int last_member_query_interval: Timeout between IGMPv2 leave and removing group (1 - 65535 msec, default = 1000).
        :param int query_interval: Interval between queries to IGMP hosts (1 - 65535 sec, default = 125).
        :param int query_max_response_time: Maximum time to wait for a IGMP query response (1 - 25 sec, default = 10).
        :param int query_timeout: Timeout between queries before becoming querying unit for network (60 - 900, default = 255).
        :param str router_alert_check: Enable/disable require IGMP packets contain router alert option. Valid values: `enable`, `disable`.
        :param str version: Maximum version of IGMP to support. Valid values: `3`, `2`, `1`.
        """
        if access_group is not None:
            pulumi.set(__self__, "access_group", access_group)
        if immediate_leave_group is not None:
            pulumi.set(__self__, "immediate_leave_group", immediate_leave_group)
        if last_member_query_count is not None:
            pulumi.set(__self__, "last_member_query_count", last_member_query_count)
        if last_member_query_interval is not None:
            pulumi.set(__self__, "last_member_query_interval", last_member_query_interval)
        if query_interval is not None:
            pulumi.set(__self__, "query_interval", query_interval)
        if query_max_response_time is not None:
            pulumi.set(__self__, "query_max_response_time", query_max_response_time)
        if query_timeout is not None:
            pulumi.set(__self__, "query_timeout", query_timeout)
        if router_alert_check is not None:
            pulumi.set(__self__, "router_alert_check", router_alert_check)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="accessGroup")
    def access_group(self) -> Optional[str]:
        """
        Groups IGMP hosts are allowed to join.
        """
        return pulumi.get(self, "access_group")

    @property
    @pulumi.getter(name="immediateLeaveGroup")
    def immediate_leave_group(self) -> Optional[str]:
        """
        Groups to drop membership for immediately after receiving IGMPv2 leave.
        """
        return pulumi.get(self, "immediate_leave_group")

    @property
    @pulumi.getter(name="lastMemberQueryCount")
    def last_member_query_count(self) -> Optional[int]:
        """
        Number of group specific queries before removing group (2 - 7, default = 2).
        """
        return pulumi.get(self, "last_member_query_count")

    @property
    @pulumi.getter(name="lastMemberQueryInterval")
    def last_member_query_interval(self) -> Optional[int]:
        """
        Timeout between IGMPv2 leave and removing group (1 - 65535 msec, default = 1000).
        """
        return pulumi.get(self, "last_member_query_interval")

    @property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> Optional[int]:
        """
        Interval between queries to IGMP hosts (1 - 65535 sec, default = 125).
        """
        return pulumi.get(self, "query_interval")

    @property
    @pulumi.getter(name="queryMaxResponseTime")
    def query_max_response_time(self) -> Optional[int]:
        """
        Maximum time to wait for a IGMP query response (1 - 25 sec, default = 10).
        """
        return pulumi.get(self, "query_max_response_time")

    @property
    @pulumi.getter(name="queryTimeout")
    def query_timeout(self) -> Optional[int]:
        """
        Timeout between queries before becoming querying unit for network (60 - 900, default = 255).
        """
        return pulumi.get(self, "query_timeout")

    @property
    @pulumi.getter(name="routerAlertCheck")
    def router_alert_check(self) -> Optional[str]:
        """
        Enable/disable require IGMP packets contain router alert option. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "router_alert_check")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Maximum version of IGMP to support. Valid values: `3`, `2`, `1`.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class MulticastInterfaceJoinGroup(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None):
        """
        :param str address: Multicast group IP address.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Multicast group IP address.
        """
        return pulumi.get(self, "address")


@pulumi.output_type
class MulticastPimSmGlobal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptRegisterList":
            suggest = "accept_register_list"
        elif key == "acceptSourceList":
            suggest = "accept_source_list"
        elif key == "bsrAllowQuickRefresh":
            suggest = "bsr_allow_quick_refresh"
        elif key == "bsrCandidate":
            suggest = "bsr_candidate"
        elif key == "bsrHash":
            suggest = "bsr_hash"
        elif key == "bsrInterface":
            suggest = "bsr_interface"
        elif key == "bsrPriority":
            suggest = "bsr_priority"
        elif key == "ciscoCrpPrefix":
            suggest = "cisco_crp_prefix"
        elif key == "ciscoIgnoreRpSetPriority":
            suggest = "cisco_ignore_rp_set_priority"
        elif key == "ciscoRegisterChecksum":
            suggest = "cisco_register_checksum"
        elif key == "ciscoRegisterChecksumGroup":
            suggest = "cisco_register_checksum_group"
        elif key == "joinPruneHoldtime":
            suggest = "join_prune_holdtime"
        elif key == "messageInterval":
            suggest = "message_interval"
        elif key == "nullRegisterRetries":
            suggest = "null_register_retries"
        elif key == "pimUseSdwan":
            suggest = "pim_use_sdwan"
        elif key == "registerRateLimit":
            suggest = "register_rate_limit"
        elif key == "registerRpReachability":
            suggest = "register_rp_reachability"
        elif key == "registerSource":
            suggest = "register_source"
        elif key == "registerSourceInterface":
            suggest = "register_source_interface"
        elif key == "registerSourceIp":
            suggest = "register_source_ip"
        elif key == "registerSupression":
            suggest = "register_supression"
        elif key == "rpAddresses":
            suggest = "rp_addresses"
        elif key == "rpRegisterKeepalive":
            suggest = "rp_register_keepalive"
        elif key == "sptThreshold":
            suggest = "spt_threshold"
        elif key == "sptThresholdGroup":
            suggest = "spt_threshold_group"
        elif key == "ssmRange":
            suggest = "ssm_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MulticastPimSmGlobal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MulticastPimSmGlobal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MulticastPimSmGlobal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_register_list: Optional[str] = None,
                 accept_source_list: Optional[str] = None,
                 bsr_allow_quick_refresh: Optional[str] = None,
                 bsr_candidate: Optional[str] = None,
                 bsr_hash: Optional[int] = None,
                 bsr_interface: Optional[str] = None,
                 bsr_priority: Optional[int] = None,
                 cisco_crp_prefix: Optional[str] = None,
                 cisco_ignore_rp_set_priority: Optional[str] = None,
                 cisco_register_checksum: Optional[str] = None,
                 cisco_register_checksum_group: Optional[str] = None,
                 join_prune_holdtime: Optional[int] = None,
                 message_interval: Optional[int] = None,
                 null_register_retries: Optional[int] = None,
                 pim_use_sdwan: Optional[str] = None,
                 register_rate_limit: Optional[int] = None,
                 register_rp_reachability: Optional[str] = None,
                 register_source: Optional[str] = None,
                 register_source_interface: Optional[str] = None,
                 register_source_ip: Optional[str] = None,
                 register_supression: Optional[int] = None,
                 rp_addresses: Optional[Sequence['outputs.MulticastPimSmGlobalRpAddress']] = None,
                 rp_register_keepalive: Optional[int] = None,
                 spt_threshold: Optional[str] = None,
                 spt_threshold_group: Optional[str] = None,
                 ssm: Optional[str] = None,
                 ssm_range: Optional[str] = None):
        """
        :param str accept_register_list: Sources allowed to register packets with this Rendezvous Point (RP).
        :param str accept_source_list: Sources allowed to send multicast traffic.
        :param str bsr_allow_quick_refresh: Enable/disable accept BSR quick refresh packets from neighbors. Valid values: `enable`, `disable`.
        :param str bsr_candidate: Enable/disable allowing this router to become a bootstrap router (BSR). Valid values: `enable`, `disable`.
        :param int bsr_hash: BSR hash length (0 - 32, default = 10).
        :param str bsr_interface: Interface to advertise as candidate BSR.
        :param int bsr_priority: BSR priority (0 - 255, default = 0).
        :param str cisco_crp_prefix: Enable/disable making candidate RP compatible with old Cisco IOS. Valid values: `enable`, `disable`.
        :param str cisco_ignore_rp_set_priority: Use only hash for RP selection (compatibility with old Cisco IOS). Valid values: `enable`, `disable`.
        :param str cisco_register_checksum: Checksum entire register packet(for old Cisco IOS compatibility). Valid values: `enable`, `disable`.
        :param str cisco_register_checksum_group: Cisco register checksum only these groups.
        :param int join_prune_holdtime: Join/prune holdtime (1 - 65535, default = 210).
        :param int message_interval: Period of time between sending periodic PIM join/prune messages in seconds (1 - 65535, default = 60).
        :param int null_register_retries: Maximum retries of null register (1 - 20, default = 1).
        :param str pim_use_sdwan: Enable/disable use of SDWAN when checking RPF neighbor and sending of REG packet. Valid values: `enable`, `disable`.
        :param int register_rate_limit: Limit of packets/sec per source registered through this RP (0 - 65535, default = 0 which means unlimited).
        :param str register_rp_reachability: Enable/disable check RP is reachable before registering packets. Valid values: `enable`, `disable`.
        :param str register_source: Override source address in register packets. Valid values: `disable`, `interface`, `ip-address`.
        :param str register_source_interface: Override with primary interface address.
        :param str register_source_ip: Override with local IP address.
        :param int register_supression: Period of time to honor register-stop message (1 - 65535 sec, default = 60).
        :param Sequence['MulticastPimSmGlobalRpAddressArgs'] rp_addresses: Statically configure RP addresses. The structure of `rp_address` block is documented below.
        :param int rp_register_keepalive: Timeout for RP receiving data on (S,G) tree (1 - 65535 sec, default = 185).
        :param str spt_threshold: Enable/disable switching to source specific trees. Valid values: `enable`, `disable`.
        :param str spt_threshold_group: Groups allowed to switch to source tree.
        :param str ssm: Enable/disable source specific multicast. Valid values: `enable`, `disable`.
        :param str ssm_range: Groups allowed to source specific multicast.
        """
        if accept_register_list is not None:
            pulumi.set(__self__, "accept_register_list", accept_register_list)
        if accept_source_list is not None:
            pulumi.set(__self__, "accept_source_list", accept_source_list)
        if bsr_allow_quick_refresh is not None:
            pulumi.set(__self__, "bsr_allow_quick_refresh", bsr_allow_quick_refresh)
        if bsr_candidate is not None:
            pulumi.set(__self__, "bsr_candidate", bsr_candidate)
        if bsr_hash is not None:
            pulumi.set(__self__, "bsr_hash", bsr_hash)
        if bsr_interface is not None:
            pulumi.set(__self__, "bsr_interface", bsr_interface)
        if bsr_priority is not None:
            pulumi.set(__self__, "bsr_priority", bsr_priority)
        if cisco_crp_prefix is not None:
            pulumi.set(__self__, "cisco_crp_prefix", cisco_crp_prefix)
        if cisco_ignore_rp_set_priority is not None:
            pulumi.set(__self__, "cisco_ignore_rp_set_priority", cisco_ignore_rp_set_priority)
        if cisco_register_checksum is not None:
            pulumi.set(__self__, "cisco_register_checksum", cisco_register_checksum)
        if cisco_register_checksum_group is not None:
            pulumi.set(__self__, "cisco_register_checksum_group", cisco_register_checksum_group)
        if join_prune_holdtime is not None:
            pulumi.set(__self__, "join_prune_holdtime", join_prune_holdtime)
        if message_interval is not None:
            pulumi.set(__self__, "message_interval", message_interval)
        if null_register_retries is not None:
            pulumi.set(__self__, "null_register_retries", null_register_retries)
        if pim_use_sdwan is not None:
            pulumi.set(__self__, "pim_use_sdwan", pim_use_sdwan)
        if register_rate_limit is not None:
            pulumi.set(__self__, "register_rate_limit", register_rate_limit)
        if register_rp_reachability is not None:
            pulumi.set(__self__, "register_rp_reachability", register_rp_reachability)
        if register_source is not None:
            pulumi.set(__self__, "register_source", register_source)
        if register_source_interface is not None:
            pulumi.set(__self__, "register_source_interface", register_source_interface)
        if register_source_ip is not None:
            pulumi.set(__self__, "register_source_ip", register_source_ip)
        if register_supression is not None:
            pulumi.set(__self__, "register_supression", register_supression)
        if rp_addresses is not None:
            pulumi.set(__self__, "rp_addresses", rp_addresses)
        if rp_register_keepalive is not None:
            pulumi.set(__self__, "rp_register_keepalive", rp_register_keepalive)
        if spt_threshold is not None:
            pulumi.set(__self__, "spt_threshold", spt_threshold)
        if spt_threshold_group is not None:
            pulumi.set(__self__, "spt_threshold_group", spt_threshold_group)
        if ssm is not None:
            pulumi.set(__self__, "ssm", ssm)
        if ssm_range is not None:
            pulumi.set(__self__, "ssm_range", ssm_range)

    @property
    @pulumi.getter(name="acceptRegisterList")
    def accept_register_list(self) -> Optional[str]:
        """
        Sources allowed to register packets with this Rendezvous Point (RP).
        """
        return pulumi.get(self, "accept_register_list")

    @property
    @pulumi.getter(name="acceptSourceList")
    def accept_source_list(self) -> Optional[str]:
        """
        Sources allowed to send multicast traffic.
        """
        return pulumi.get(self, "accept_source_list")

    @property
    @pulumi.getter(name="bsrAllowQuickRefresh")
    def bsr_allow_quick_refresh(self) -> Optional[str]:
        """
        Enable/disable accept BSR quick refresh packets from neighbors. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bsr_allow_quick_refresh")

    @property
    @pulumi.getter(name="bsrCandidate")
    def bsr_candidate(self) -> Optional[str]:
        """
        Enable/disable allowing this router to become a bootstrap router (BSR). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bsr_candidate")

    @property
    @pulumi.getter(name="bsrHash")
    def bsr_hash(self) -> Optional[int]:
        """
        BSR hash length (0 - 32, default = 10).
        """
        return pulumi.get(self, "bsr_hash")

    @property
    @pulumi.getter(name="bsrInterface")
    def bsr_interface(self) -> Optional[str]:
        """
        Interface to advertise as candidate BSR.
        """
        return pulumi.get(self, "bsr_interface")

    @property
    @pulumi.getter(name="bsrPriority")
    def bsr_priority(self) -> Optional[int]:
        """
        BSR priority (0 - 255, default = 0).
        """
        return pulumi.get(self, "bsr_priority")

    @property
    @pulumi.getter(name="ciscoCrpPrefix")
    def cisco_crp_prefix(self) -> Optional[str]:
        """
        Enable/disable making candidate RP compatible with old Cisco IOS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cisco_crp_prefix")

    @property
    @pulumi.getter(name="ciscoIgnoreRpSetPriority")
    def cisco_ignore_rp_set_priority(self) -> Optional[str]:
        """
        Use only hash for RP selection (compatibility with old Cisco IOS). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cisco_ignore_rp_set_priority")

    @property
    @pulumi.getter(name="ciscoRegisterChecksum")
    def cisco_register_checksum(self) -> Optional[str]:
        """
        Checksum entire register packet(for old Cisco IOS compatibility). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cisco_register_checksum")

    @property
    @pulumi.getter(name="ciscoRegisterChecksumGroup")
    def cisco_register_checksum_group(self) -> Optional[str]:
        """
        Cisco register checksum only these groups.
        """
        return pulumi.get(self, "cisco_register_checksum_group")

    @property
    @pulumi.getter(name="joinPruneHoldtime")
    def join_prune_holdtime(self) -> Optional[int]:
        """
        Join/prune holdtime (1 - 65535, default = 210).
        """
        return pulumi.get(self, "join_prune_holdtime")

    @property
    @pulumi.getter(name="messageInterval")
    def message_interval(self) -> Optional[int]:
        """
        Period of time between sending periodic PIM join/prune messages in seconds (1 - 65535, default = 60).
        """
        return pulumi.get(self, "message_interval")

    @property
    @pulumi.getter(name="nullRegisterRetries")
    def null_register_retries(self) -> Optional[int]:
        """
        Maximum retries of null register (1 - 20, default = 1).
        """
        return pulumi.get(self, "null_register_retries")

    @property
    @pulumi.getter(name="pimUseSdwan")
    def pim_use_sdwan(self) -> Optional[str]:
        """
        Enable/disable use of SDWAN when checking RPF neighbor and sending of REG packet. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pim_use_sdwan")

    @property
    @pulumi.getter(name="registerRateLimit")
    def register_rate_limit(self) -> Optional[int]:
        """
        Limit of packets/sec per source registered through this RP (0 - 65535, default = 0 which means unlimited).
        """
        return pulumi.get(self, "register_rate_limit")

    @property
    @pulumi.getter(name="registerRpReachability")
    def register_rp_reachability(self) -> Optional[str]:
        """
        Enable/disable check RP is reachable before registering packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "register_rp_reachability")

    @property
    @pulumi.getter(name="registerSource")
    def register_source(self) -> Optional[str]:
        """
        Override source address in register packets. Valid values: `disable`, `interface`, `ip-address`.
        """
        return pulumi.get(self, "register_source")

    @property
    @pulumi.getter(name="registerSourceInterface")
    def register_source_interface(self) -> Optional[str]:
        """
        Override with primary interface address.
        """
        return pulumi.get(self, "register_source_interface")

    @property
    @pulumi.getter(name="registerSourceIp")
    def register_source_ip(self) -> Optional[str]:
        """
        Override with local IP address.
        """
        return pulumi.get(self, "register_source_ip")

    @property
    @pulumi.getter(name="registerSupression")
    def register_supression(self) -> Optional[int]:
        """
        Period of time to honor register-stop message (1 - 65535 sec, default = 60).
        """
        return pulumi.get(self, "register_supression")

    @property
    @pulumi.getter(name="rpAddresses")
    def rp_addresses(self) -> Optional[Sequence['outputs.MulticastPimSmGlobalRpAddress']]:
        """
        Statically configure RP addresses. The structure of `rp_address` block is documented below.
        """
        return pulumi.get(self, "rp_addresses")

    @property
    @pulumi.getter(name="rpRegisterKeepalive")
    def rp_register_keepalive(self) -> Optional[int]:
        """
        Timeout for RP receiving data on (S,G) tree (1 - 65535 sec, default = 185).
        """
        return pulumi.get(self, "rp_register_keepalive")

    @property
    @pulumi.getter(name="sptThreshold")
    def spt_threshold(self) -> Optional[str]:
        """
        Enable/disable switching to source specific trees. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "spt_threshold")

    @property
    @pulumi.getter(name="sptThresholdGroup")
    def spt_threshold_group(self) -> Optional[str]:
        """
        Groups allowed to switch to source tree.
        """
        return pulumi.get(self, "spt_threshold_group")

    @property
    @pulumi.getter
    def ssm(self) -> Optional[str]:
        """
        Enable/disable source specific multicast. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssm")

    @property
    @pulumi.getter(name="ssmRange")
    def ssm_range(self) -> Optional[str]:
        """
        Groups allowed to source specific multicast.
        """
        return pulumi.get(self, "ssm_range")


@pulumi.output_type
class MulticastPimSmGlobalRpAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MulticastPimSmGlobalRpAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MulticastPimSmGlobalRpAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MulticastPimSmGlobalRpAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 id: Optional[int] = None,
                 ip_address: Optional[str] = None):
        """
        :param str group: Groups to use this RP.
        :param int id: ID.
        :param str ip_address: RP router address.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        Groups to use this RP.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        RP router address.
        """
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class MulticastflowFlow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupAddr":
            suggest = "group_addr"
        elif key == "sourceAddr":
            suggest = "source_addr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MulticastflowFlow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MulticastflowFlow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MulticastflowFlow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_addr: Optional[str] = None,
                 id: Optional[int] = None,
                 source_addr: Optional[str] = None):
        """
        :param str group_addr: Multicast group IP address.
        :param int id: Flow ID.
        :param str source_addr: Multicast source IP address.
        """
        if group_addr is not None:
            pulumi.set(__self__, "group_addr", group_addr)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if source_addr is not None:
            pulumi.set(__self__, "source_addr", source_addr)

    @property
    @pulumi.getter(name="groupAddr")
    def group_addr(self) -> Optional[str]:
        """
        Multicast group IP address.
        """
        return pulumi.get(self, "group_addr")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Flow ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sourceAddr")
    def source_addr(self) -> Optional[str]:
        """
        Multicast source IP address.
        """
        return pulumi.get(self, "source_addr")


@pulumi.output_type
class Ospf6Area(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultCost":
            suggest = "default_cost"
        elif key == "ipsecAuthAlg":
            suggest = "ipsec_auth_alg"
        elif key == "ipsecEncAlg":
            suggest = "ipsec_enc_alg"
        elif key == "ipsecKeys":
            suggest = "ipsec_keys"
        elif key == "keyRolloverInterval":
            suggest = "key_rollover_interval"
        elif key == "nssaDefaultInformationOriginate":
            suggest = "nssa_default_information_originate"
        elif key == "nssaDefaultInformationOriginateMetric":
            suggest = "nssa_default_information_originate_metric"
        elif key == "nssaDefaultInformationOriginateMetricType":
            suggest = "nssa_default_information_originate_metric_type"
        elif key == "nssaRedistribution":
            suggest = "nssa_redistribution"
        elif key == "nssaTranslatorRole":
            suggest = "nssa_translator_role"
        elif key == "stubType":
            suggest = "stub_type"
        elif key == "virtualLinks":
            suggest = "virtual_links"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ospf6Area. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ospf6Area.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ospf6Area.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 default_cost: Optional[int] = None,
                 id: Optional[str] = None,
                 ipsec_auth_alg: Optional[str] = None,
                 ipsec_enc_alg: Optional[str] = None,
                 ipsec_keys: Optional[Sequence['outputs.Ospf6AreaIpsecKey']] = None,
                 key_rollover_interval: Optional[int] = None,
                 nssa_default_information_originate: Optional[str] = None,
                 nssa_default_information_originate_metric: Optional[int] = None,
                 nssa_default_information_originate_metric_type: Optional[str] = None,
                 nssa_redistribution: Optional[str] = None,
                 nssa_translator_role: Optional[str] = None,
                 ranges: Optional[Sequence['outputs.Ospf6AreaRange']] = None,
                 stub_type: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_links: Optional[Sequence['outputs.Ospf6AreaVirtualLink']] = None):
        """
        :param str authentication: Authentication mode. Valid values: `none`, `ah`, `esp`.
        :param int default_cost: Summary default cost of stub or NSSA area.
        :param str id: Area entry IP address.
        :param str ipsec_auth_alg: Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        :param str ipsec_enc_alg: Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
        :param Sequence['Ospf6AreaIpsecKeyArgs'] ipsec_keys: IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        :param int key_rollover_interval: Key roll-over interval.
        :param str nssa_default_information_originate: Enable/disable originate type 7 default into NSSA area. Valid values: `enable`, `disable`.
        :param int nssa_default_information_originate_metric: OSPFv3 default metric.
        :param str nssa_default_information_originate_metric_type: OSPFv3 metric type for default routes. Valid values: `1`, `2`.
        :param str nssa_redistribution: Enable/disable redistribute into NSSA area. Valid values: `enable`, `disable`.
        :param str nssa_translator_role: NSSA translator role type. Valid values: `candidate`, `never`, `always`.
        :param Sequence['Ospf6AreaRangeArgs'] ranges: OSPF6 area range configuration. The structure of `range` block is documented below.
        :param str stub_type: Stub summary setting. Valid values: `no-summary`, `summary`.
        :param str type: Area type setting. Valid values: `regular`, `nssa`, `stub`.
        :param Sequence['Ospf6AreaVirtualLinkArgs'] virtual_links: OSPF6 virtual link configuration. The structure of `virtual_link` block is documented below.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if default_cost is not None:
            pulumi.set(__self__, "default_cost", default_cost)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipsec_auth_alg is not None:
            pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        if ipsec_enc_alg is not None:
            pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        if ipsec_keys is not None:
            pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        if key_rollover_interval is not None:
            pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        if nssa_default_information_originate is not None:
            pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        if nssa_default_information_originate_metric is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        if nssa_default_information_originate_metric_type is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        if nssa_redistribution is not None:
            pulumi.set(__self__, "nssa_redistribution", nssa_redistribution)
        if nssa_translator_role is not None:
            pulumi.set(__self__, "nssa_translator_role", nssa_translator_role)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if stub_type is not None:
            pulumi.set(__self__, "stub_type", stub_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_links is not None:
            pulumi.set(__self__, "virtual_links", virtual_links)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        """
        Authentication mode. Valid values: `none`, `ah`, `esp`.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="defaultCost")
    def default_cost(self) -> Optional[int]:
        """
        Summary default cost of stub or NSSA area.
        """
        return pulumi.get(self, "default_cost")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Area entry IP address.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> Optional[str]:
        """
        Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        """
        return pulumi.get(self, "ipsec_auth_alg")

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> Optional[str]:
        """
        Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
        """
        return pulumi.get(self, "ipsec_enc_alg")

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Optional[Sequence['outputs.Ospf6AreaIpsecKey']]:
        """
        IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        """
        return pulumi.get(self, "ipsec_keys")

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> Optional[int]:
        """
        Key roll-over interval.
        """
        return pulumi.get(self, "key_rollover_interval")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> Optional[str]:
        """
        Enable/disable originate type 7 default into NSSA area. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nssa_default_information_originate")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> Optional[int]:
        """
        OSPFv3 default metric.
        """
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> Optional[str]:
        """
        OSPFv3 metric type for default routes. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @property
    @pulumi.getter(name="nssaRedistribution")
    def nssa_redistribution(self) -> Optional[str]:
        """
        Enable/disable redistribute into NSSA area. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nssa_redistribution")

    @property
    @pulumi.getter(name="nssaTranslatorRole")
    def nssa_translator_role(self) -> Optional[str]:
        """
        NSSA translator role type. Valid values: `candidate`, `never`, `always`.
        """
        return pulumi.get(self, "nssa_translator_role")

    @property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['outputs.Ospf6AreaRange']]:
        """
        OSPF6 area range configuration. The structure of `range` block is documented below.
        """
        return pulumi.get(self, "ranges")

    @property
    @pulumi.getter(name="stubType")
    def stub_type(self) -> Optional[str]:
        """
        Stub summary setting. Valid values: `no-summary`, `summary`.
        """
        return pulumi.get(self, "stub_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Area type setting. Valid values: `regular`, `nssa`, `stub`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualLinks")
    def virtual_links(self) -> Optional[Sequence['outputs.Ospf6AreaVirtualLink']]:
        """
        OSPF6 virtual link configuration. The structure of `virtual_link` block is documented below.
        """
        return pulumi.get(self, "virtual_links")


@pulumi.output_type
class Ospf6AreaIpsecKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKey":
            suggest = "auth_key"
        elif key == "encKey":
            suggest = "enc_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ospf6AreaIpsecKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ospf6AreaIpsecKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ospf6AreaIpsecKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_key: Optional[str] = None,
                 enc_key: Optional[str] = None,
                 spi: Optional[int] = None):
        """
        :param str auth_key: Authentication key.
        :param str enc_key: Encryption key.
        :param int spi: Security Parameters Index.
        """
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[str]:
        """
        Authentication key.
        """
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[str]:
        """
        Encryption key.
        """
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def spi(self) -> Optional[int]:
        """
        Security Parameters Index.
        """
        return pulumi.get(self, "spi")


@pulumi.output_type
class Ospf6AreaRange(dict):
    def __init__(__self__, *,
                 advertise: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix6: Optional[str] = None):
        """
        :param str advertise: Enable/disable advertise status. Valid values: `disable`, `enable`.
        :param int id: Range entry ID.
        :param str prefix6: IPv6 prefix.
        """
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[str]:
        """
        Enable/disable advertise status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Range entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class Ospf6AreaVirtualLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deadInterval":
            suggest = "dead_interval"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "ipsecAuthAlg":
            suggest = "ipsec_auth_alg"
        elif key == "ipsecEncAlg":
            suggest = "ipsec_enc_alg"
        elif key == "ipsecKeys":
            suggest = "ipsec_keys"
        elif key == "keyRolloverInterval":
            suggest = "key_rollover_interval"
        elif key == "retransmitInterval":
            suggest = "retransmit_interval"
        elif key == "transmitDelay":
            suggest = "transmit_delay"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ospf6AreaVirtualLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ospf6AreaVirtualLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ospf6AreaVirtualLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 dead_interval: Optional[int] = None,
                 hello_interval: Optional[int] = None,
                 ipsec_auth_alg: Optional[str] = None,
                 ipsec_enc_alg: Optional[str] = None,
                 ipsec_keys: Optional[Sequence['outputs.Ospf6AreaVirtualLinkIpsecKey']] = None,
                 key_rollover_interval: Optional[int] = None,
                 name: Optional[str] = None,
                 peer: Optional[str] = None,
                 retransmit_interval: Optional[int] = None,
                 transmit_delay: Optional[int] = None):
        """
        :param str authentication: Authentication mode. Valid values: `none`, `ah`, `esp`, `area`.
        :param int dead_interval: Dead interval.
        :param int hello_interval: Hello interval.
        :param str ipsec_auth_alg: Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        :param str ipsec_enc_alg: Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
        :param Sequence['Ospf6AreaVirtualLinkIpsecKeyArgs'] ipsec_keys: IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        :param int key_rollover_interval: Key roll-over interval.
        :param str name: Virtual link entry name.
        :param str peer: A.B.C.D, peer router ID.
        :param int retransmit_interval: Retransmit interval.
        :param int transmit_delay: Transmit delay.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if ipsec_auth_alg is not None:
            pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        if ipsec_enc_alg is not None:
            pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        if ipsec_keys is not None:
            pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        if key_rollover_interval is not None:
            pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        """
        Authentication mode. Valid values: `none`, `ah`, `esp`, `area`.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[int]:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[int]:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> Optional[str]:
        """
        Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        """
        return pulumi.get(self, "ipsec_auth_alg")

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> Optional[str]:
        """
        Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
        """
        return pulumi.get(self, "ipsec_enc_alg")

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Optional[Sequence['outputs.Ospf6AreaVirtualLinkIpsecKey']]:
        """
        IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        """
        return pulumi.get(self, "ipsec_keys")

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> Optional[int]:
        """
        Key roll-over interval.
        """
        return pulumi.get(self, "key_rollover_interval")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Virtual link entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peer(self) -> Optional[str]:
        """
        A.B.C.D, peer router ID.
        """
        return pulumi.get(self, "peer")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[int]:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[int]:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class Ospf6AreaVirtualLinkIpsecKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKey":
            suggest = "auth_key"
        elif key == "encKey":
            suggest = "enc_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ospf6AreaVirtualLinkIpsecKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ospf6AreaVirtualLinkIpsecKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ospf6AreaVirtualLinkIpsecKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_key: Optional[str] = None,
                 enc_key: Optional[str] = None,
                 spi: Optional[int] = None):
        """
        :param str auth_key: Authentication key.
        :param str enc_key: Encryption key.
        :param int spi: Security Parameters Index.
        """
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[str]:
        """
        Authentication key.
        """
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[str]:
        """
        Encryption key.
        """
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def spi(self) -> Optional[int]:
        """
        Security Parameters Index.
        """
        return pulumi.get(self, "spi")


@pulumi.output_type
class Ospf6Ospf6Interface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areaId":
            suggest = "area_id"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "ipsecAuthAlg":
            suggest = "ipsec_auth_alg"
        elif key == "ipsecEncAlg":
            suggest = "ipsec_enc_alg"
        elif key == "ipsecKeys":
            suggest = "ipsec_keys"
        elif key == "keyRolloverInterval":
            suggest = "key_rollover_interval"
        elif key == "mtuIgnore":
            suggest = "mtu_ignore"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "retransmitInterval":
            suggest = "retransmit_interval"
        elif key == "transmitDelay":
            suggest = "transmit_delay"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ospf6Ospf6Interface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ospf6Ospf6Interface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ospf6Ospf6Interface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area_id: Optional[str] = None,
                 authentication: Optional[str] = None,
                 bfd: Optional[str] = None,
                 cost: Optional[int] = None,
                 dead_interval: Optional[int] = None,
                 hello_interval: Optional[int] = None,
                 interface: Optional[str] = None,
                 ipsec_auth_alg: Optional[str] = None,
                 ipsec_enc_alg: Optional[str] = None,
                 ipsec_keys: Optional[Sequence['outputs.Ospf6Ospf6InterfaceIpsecKey']] = None,
                 key_rollover_interval: Optional[int] = None,
                 mtu: Optional[int] = None,
                 mtu_ignore: Optional[str] = None,
                 name: Optional[str] = None,
                 neighbors: Optional[Sequence['outputs.Ospf6Ospf6InterfaceNeighbor']] = None,
                 network_type: Optional[str] = None,
                 priority: Optional[int] = None,
                 retransmit_interval: Optional[int] = None,
                 status: Optional[str] = None,
                 transmit_delay: Optional[int] = None):
        """
        :param str area_id: A.B.C.D, in IPv4 address format.
        :param str authentication: Authentication mode. Valid values: `none`, `ah`, `esp`.
        :param str bfd: Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param int cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param int dead_interval: Dead interval.
        :param int hello_interval: Hello interval.
        :param str interface: Configuration interface name.
        :param str ipsec_auth_alg: Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        :param str ipsec_enc_alg: Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
        :param Sequence['Ospf6Ospf6InterfaceIpsecKeyArgs'] ipsec_keys: IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        :param int key_rollover_interval: Key roll-over interval.
        :param int mtu: MTU for OSPFv3 packets.
        :param str mtu_ignore: Enable/disable ignoring MTU field in DBD packets. Valid values: `enable`, `disable`.
        :param str name: Interface entry name.
        :param Sequence['Ospf6Ospf6InterfaceNeighborArgs'] neighbors: OSPFv3 neighbors are used when OSPFv3 runs on non-broadcast media The structure of `neighbor` block is documented below.
        :param str network_type: Network type. Valid values: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        :param int priority: priority
        :param int retransmit_interval: Retransmit interval.
        :param str status: Enable/disable OSPF6 routing on this interface. Valid values: `disable`, `enable`.
        :param int transmit_delay: Transmit delay.
        """
        if area_id is not None:
            pulumi.set(__self__, "area_id", area_id)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ipsec_auth_alg is not None:
            pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        if ipsec_enc_alg is not None:
            pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        if ipsec_keys is not None:
            pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        if key_rollover_interval is not None:
            pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_ignore is not None:
            pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> Optional[str]:
        """
        A.B.C.D, in IPv4 address format.
        """
        return pulumi.get(self, "area_id")

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        """
        Authentication mode. Valid values: `none`, `ah`, `esp`.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def bfd(self) -> Optional[str]:
        """
        Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[int]:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[int]:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Configuration interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> Optional[str]:
        """
        Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        """
        return pulumi.get(self, "ipsec_auth_alg")

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> Optional[str]:
        """
        Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
        """
        return pulumi.get(self, "ipsec_enc_alg")

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Optional[Sequence['outputs.Ospf6Ospf6InterfaceIpsecKey']]:
        """
        IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        """
        return pulumi.get(self, "ipsec_keys")

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> Optional[int]:
        """
        Key roll-over interval.
        """
        return pulumi.get(self, "key_rollover_interval")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        """
        MTU for OSPFv3 packets.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> Optional[str]:
        """
        Enable/disable ignoring MTU field in DBD packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mtu_ignore")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[Sequence['outputs.Ospf6Ospf6InterfaceNeighbor']]:
        """
        OSPFv3 neighbors are used when OSPFv3 runs on non-broadcast media The structure of `neighbor` block is documented below.
        """
        return pulumi.get(self, "neighbors")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        """
        Network type. Valid values: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        priority
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[int]:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable OSPF6 routing on this interface. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[int]:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class Ospf6Ospf6InterfaceIpsecKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKey":
            suggest = "auth_key"
        elif key == "encKey":
            suggest = "enc_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ospf6Ospf6InterfaceIpsecKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ospf6Ospf6InterfaceIpsecKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ospf6Ospf6InterfaceIpsecKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_key: Optional[str] = None,
                 enc_key: Optional[str] = None,
                 spi: Optional[int] = None):
        """
        :param str auth_key: Authentication key.
        :param str enc_key: Encryption key.
        :param int spi: Security Parameters Index.
        """
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[str]:
        """
        Authentication key.
        """
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[str]:
        """
        Encryption key.
        """
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def spi(self) -> Optional[int]:
        """
        Security Parameters Index.
        """
        return pulumi.get(self, "spi")


@pulumi.output_type
class Ospf6Ospf6InterfaceNeighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pollInterval":
            suggest = "poll_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ospf6Ospf6InterfaceNeighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ospf6Ospf6InterfaceNeighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ospf6Ospf6InterfaceNeighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost: Optional[int] = None,
                 ip6: Optional[str] = None,
                 poll_interval: Optional[int] = None,
                 priority: Optional[int] = None):
        """
        :param int cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param str ip6: IPv6 link local address of the neighbor.
        :param int poll_interval: Poll interval time in seconds.
        :param int priority: priority
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if poll_interval is not None:
            pulumi.set(__self__, "poll_interval", poll_interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def ip6(self) -> Optional[str]:
        """
        IPv6 link local address of the neighbor.
        """
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> Optional[int]:
        """
        Poll interval time in seconds.
        """
        return pulumi.get(self, "poll_interval")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        priority
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class Ospf6PassiveInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Passive interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Passive interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class Ospf6Redistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Ospf6Redistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Ospf6Redistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Ospf6Redistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: Optional[int] = None,
                 metric_type: Optional[str] = None,
                 name: Optional[str] = None,
                 routemap: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param int metric: Redistribute metric setting.
        :param str metric_type: Metric type. Valid values: `1`, `2`.
        :param str name: Redistribute name.
        :param str routemap: Route map name.
        :param str status: status Valid values: `enable`, `disable`.
        """
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        """
        Redistribute metric setting.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        """
        Metric type. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Redistribute name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> Optional[str]:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class Ospf6SummaryAddress(dict):
    def __init__(__self__, *,
                 advertise: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix6: Optional[str] = None,
                 tag: Optional[int] = None):
        """
        :param str advertise: Enable/disable advertise status. Valid values: `disable`, `enable`.
        :param int id: Summary address entry ID.
        :param str prefix6: IPv6 prefix.
        :param int tag: Tag value.
        """
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[str]:
        """
        Enable/disable advertise status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Summary address entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")

    @property
    @pulumi.getter
    def tag(self) -> Optional[int]:
        """
        Tag value.
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class OspfArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultCost":
            suggest = "default_cost"
        elif key == "filterLists":
            suggest = "filter_lists"
        elif key == "nssaDefaultInformationOriginate":
            suggest = "nssa_default_information_originate"
        elif key == "nssaDefaultInformationOriginateMetric":
            suggest = "nssa_default_information_originate_metric"
        elif key == "nssaDefaultInformationOriginateMetricType":
            suggest = "nssa_default_information_originate_metric_type"
        elif key == "nssaRedistribution":
            suggest = "nssa_redistribution"
        elif key == "nssaTranslatorRole":
            suggest = "nssa_translator_role"
        elif key == "stubType":
            suggest = "stub_type"
        elif key == "virtualLinks":
            suggest = "virtual_links"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OspfArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OspfArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OspfArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 comments: Optional[str] = None,
                 default_cost: Optional[int] = None,
                 filter_lists: Optional[Sequence['outputs.OspfAreaFilterList']] = None,
                 id: Optional[str] = None,
                 nssa_default_information_originate: Optional[str] = None,
                 nssa_default_information_originate_metric: Optional[int] = None,
                 nssa_default_information_originate_metric_type: Optional[str] = None,
                 nssa_redistribution: Optional[str] = None,
                 nssa_translator_role: Optional[str] = None,
                 ranges: Optional[Sequence['outputs.OspfAreaRange']] = None,
                 shortcut: Optional[str] = None,
                 stub_type: Optional[str] = None,
                 type: Optional[str] = None,
                 virtual_links: Optional[Sequence['outputs.OspfAreaVirtualLink']] = None):
        """
        :param str authentication: Authentication type.
        :param str comments: Comment.
        :param int default_cost: Summary default cost of stub or NSSA area.
        :param Sequence['OspfAreaFilterListArgs'] filter_lists: OSPF area filter-list configuration. The structure of `filter_list` block is documented below.
        :param str id: Area entry IP address.
        :param str nssa_default_information_originate: Redistribute, advertise, or do not originate Type-7 default route into NSSA area. Valid values: `enable`, `always`, `disable`.
        :param int nssa_default_information_originate_metric: OSPF default metric.
        :param str nssa_default_information_originate_metric_type: OSPF metric type for default routes. Valid values: `1`, `2`.
        :param str nssa_redistribution: Enable/disable redistribute into NSSA area. Valid values: `enable`, `disable`.
        :param str nssa_translator_role: NSSA translator role type. Valid values: `candidate`, `never`, `always`.
        :param Sequence['OspfAreaRangeArgs'] ranges: OSPF area range configuration. The structure of `range` block is documented below.
        :param str shortcut: Enable/disable shortcut option. Valid values: `disable`, `enable`, `default`.
        :param str stub_type: Stub summary setting. Valid values: `no-summary`, `summary`.
        :param str type: Area type setting. Valid values: `regular`, `nssa`, `stub`.
        :param Sequence['OspfAreaVirtualLinkArgs'] virtual_links: OSPF virtual link configuration. The structure of `virtual_link` block is documented below.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if default_cost is not None:
            pulumi.set(__self__, "default_cost", default_cost)
        if filter_lists is not None:
            pulumi.set(__self__, "filter_lists", filter_lists)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if nssa_default_information_originate is not None:
            pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        if nssa_default_information_originate_metric is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        if nssa_default_information_originate_metric_type is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        if nssa_redistribution is not None:
            pulumi.set(__self__, "nssa_redistribution", nssa_redistribution)
        if nssa_translator_role is not None:
            pulumi.set(__self__, "nssa_translator_role", nssa_translator_role)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if shortcut is not None:
            pulumi.set(__self__, "shortcut", shortcut)
        if stub_type is not None:
            pulumi.set(__self__, "stub_type", stub_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_links is not None:
            pulumi.set(__self__, "virtual_links", virtual_links)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        """
        Authentication type.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="defaultCost")
    def default_cost(self) -> Optional[int]:
        """
        Summary default cost of stub or NSSA area.
        """
        return pulumi.get(self, "default_cost")

    @property
    @pulumi.getter(name="filterLists")
    def filter_lists(self) -> Optional[Sequence['outputs.OspfAreaFilterList']]:
        """
        OSPF area filter-list configuration. The structure of `filter_list` block is documented below.
        """
        return pulumi.get(self, "filter_lists")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Area entry IP address.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> Optional[str]:
        """
        Redistribute, advertise, or do not originate Type-7 default route into NSSA area. Valid values: `enable`, `always`, `disable`.
        """
        return pulumi.get(self, "nssa_default_information_originate")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> Optional[int]:
        """
        OSPF default metric.
        """
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> Optional[str]:
        """
        OSPF metric type for default routes. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @property
    @pulumi.getter(name="nssaRedistribution")
    def nssa_redistribution(self) -> Optional[str]:
        """
        Enable/disable redistribute into NSSA area. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nssa_redistribution")

    @property
    @pulumi.getter(name="nssaTranslatorRole")
    def nssa_translator_role(self) -> Optional[str]:
        """
        NSSA translator role type. Valid values: `candidate`, `never`, `always`.
        """
        return pulumi.get(self, "nssa_translator_role")

    @property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['outputs.OspfAreaRange']]:
        """
        OSPF area range configuration. The structure of `range` block is documented below.
        """
        return pulumi.get(self, "ranges")

    @property
    @pulumi.getter
    def shortcut(self) -> Optional[str]:
        """
        Enable/disable shortcut option. Valid values: `disable`, `enable`, `default`.
        """
        return pulumi.get(self, "shortcut")

    @property
    @pulumi.getter(name="stubType")
    def stub_type(self) -> Optional[str]:
        """
        Stub summary setting. Valid values: `no-summary`, `summary`.
        """
        return pulumi.get(self, "stub_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Area type setting. Valid values: `regular`, `nssa`, `stub`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualLinks")
    def virtual_links(self) -> Optional[Sequence['outputs.OspfAreaVirtualLink']]:
        """
        OSPF virtual link configuration. The structure of `virtual_link` block is documented below.
        """
        return pulumi.get(self, "virtual_links")


@pulumi.output_type
class OspfAreaFilterList(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 id: Optional[int] = None,
                 list: Optional[str] = None):
        """
        :param str direction: Direction. Valid values: `in`, `out`.
        :param int id: Filter list entry ID.
        :param str list: Access-list or prefix-list name.
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if list is not None:
            pulumi.set(__self__, "list", list)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        Direction. Valid values: `in`, `out`.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Filter list entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def list(self) -> Optional[str]:
        """
        Access-list or prefix-list name.
        """
        return pulumi.get(self, "list")


@pulumi.output_type
class OspfAreaRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "substituteStatus":
            suggest = "substitute_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OspfAreaRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OspfAreaRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OspfAreaRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertise: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None,
                 substitute: Optional[str] = None,
                 substitute_status: Optional[str] = None):
        """
        :param str advertise: Enable/disable advertise status. Valid values: `disable`, `enable`.
        :param int id: Range entry ID.
        :param str prefix: Prefix.
        :param str substitute: Substitute prefix.
        :param str substitute_status: Enable/disable substitute status. Valid values: `enable`, `disable`.
        """
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if substitute is not None:
            pulumi.set(__self__, "substitute", substitute)
        if substitute_status is not None:
            pulumi.set(__self__, "substitute_status", substitute_status)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[str]:
        """
        Enable/disable advertise status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Range entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def substitute(self) -> Optional[str]:
        """
        Substitute prefix.
        """
        return pulumi.get(self, "substitute")

    @property
    @pulumi.getter(name="substituteStatus")
    def substitute_status(self) -> Optional[str]:
        """
        Enable/disable substitute status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "substitute_status")


@pulumi.output_type
class OspfAreaVirtualLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "md5Key":
            suggest = "md5_key"
        elif key == "md5Keychain":
            suggest = "md5_keychain"
        elif key == "md5Keys":
            suggest = "md5_keys"
        elif key == "retransmitInterval":
            suggest = "retransmit_interval"
        elif key == "transmitDelay":
            suggest = "transmit_delay"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OspfAreaVirtualLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OspfAreaVirtualLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OspfAreaVirtualLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 authentication_key: Optional[str] = None,
                 dead_interval: Optional[int] = None,
                 hello_interval: Optional[int] = None,
                 keychain: Optional[str] = None,
                 md5_key: Optional[str] = None,
                 md5_keychain: Optional[str] = None,
                 md5_keys: Optional[Sequence['outputs.OspfAreaVirtualLinkMd5Key']] = None,
                 name: Optional[str] = None,
                 peer: Optional[str] = None,
                 retransmit_interval: Optional[int] = None,
                 transmit_delay: Optional[int] = None):
        """
        :param str authentication: Authentication type.
        :param str authentication_key: Authentication key.
        :param int dead_interval: Dead interval.
        :param int hello_interval: Hello interval.
        :param str keychain: Message-digest key-chain name.
        :param str md5_key: MD5 key.
        :param str md5_keychain: Authentication MD5 key-chain name.
        :param Sequence['OspfAreaVirtualLinkMd5KeyArgs'] md5_keys: MD5 key. The structure of `md5_keys` block is documented below.
               
               The `md5_keys` block supports:
        :param str name: Virtual link entry name.
        :param str peer: Peer IP.
        :param int retransmit_interval: Retransmit interval.
        :param int transmit_delay: Transmit delay.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if keychain is not None:
            pulumi.set(__self__, "keychain", keychain)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if md5_keychain is not None:
            pulumi.set(__self__, "md5_keychain", md5_keychain)
        if md5_keys is not None:
            pulumi.set(__self__, "md5_keys", md5_keys)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        """
        Authentication type.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[str]:
        """
        Authentication key.
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[int]:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[int]:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def keychain(self) -> Optional[str]:
        """
        Message-digest key-chain name.
        """
        return pulumi.get(self, "keychain")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[str]:
        """
        MD5 key.
        """
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> Optional[str]:
        """
        Authentication MD5 key-chain name.
        """
        return pulumi.get(self, "md5_keychain")

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> Optional[Sequence['outputs.OspfAreaVirtualLinkMd5Key']]:
        """
        MD5 key. The structure of `md5_keys` block is documented below.

        The `md5_keys` block supports:
        """
        return pulumi.get(self, "md5_keys")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Virtual link entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peer(self) -> Optional[str]:
        """
        Peer IP.
        """
        return pulumi.get(self, "peer")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[int]:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[int]:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class OspfAreaVirtualLinkMd5Key(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyString":
            suggest = "key_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OspfAreaVirtualLinkMd5Key. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OspfAreaVirtualLinkMd5Key.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OspfAreaVirtualLinkMd5Key.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 key_string: Optional[str] = None):
        """
        :param int id: Area entry IP address.
        :param str key_string: Password for the key.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Area entry IP address.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[str]:
        """
        Password for the key.
        """
        return pulumi.get(self, "key_string")


@pulumi.output_type
class OspfDistributeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList":
            suggest = "access_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OspfDistributeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OspfDistributeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OspfDistributeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list: Optional[str] = None,
                 id: Optional[int] = None,
                 protocol: Optional[str] = None):
        """
        :param str access_list: Access list name.
        :param int id: Distribute list entry ID.
        :param str protocol: Protocol type. Valid values: `connected`, `static`, `rip`.
        """
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[str]:
        """
        Access list name.
        """
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol type. Valid values: `connected`, `static`, `rip`.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class OspfNeighbor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pollInterval":
            suggest = "poll_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OspfNeighbor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OspfNeighbor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OspfNeighbor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost: Optional[int] = None,
                 id: Optional[int] = None,
                 ip: Optional[str] = None,
                 poll_interval: Optional[int] = None,
                 priority: Optional[int] = None):
        """
        :param int cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param int id: Neighbor entry ID.
        :param str ip: Interface IP address of the neighbor.
        :param int poll_interval: Poll interval time in seconds.
        :param int priority: Priority.
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if poll_interval is not None:
            pulumi.set(__self__, "poll_interval", poll_interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Neighbor entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        Interface IP address of the neighbor.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> Optional[int]:
        """
        Poll interval time in seconds.
        """
        return pulumi.get(self, "poll_interval")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class OspfNetwork(dict):
    def __init__(__self__, *,
                 area: Optional[str] = None,
                 comments: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None):
        """
        :param str area: Attach the network to area.
        :param str comments: Comment.
        :param int id: Network entry ID.
        :param str prefix: Prefix.
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def area(self) -> Optional[str]:
        """
        Attach the network to area.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Network entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class OspfOspfInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationKey":
            suggest = "authentication_key"
        elif key == "databaseFilterOut":
            suggest = "database_filter_out"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "helloMultiplier":
            suggest = "hello_multiplier"
        elif key == "md5Key":
            suggest = "md5_key"
        elif key == "md5Keychain":
            suggest = "md5_keychain"
        elif key == "md5Keys":
            suggest = "md5_keys"
        elif key == "mtuIgnore":
            suggest = "mtu_ignore"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "prefixLength":
            suggest = "prefix_length"
        elif key == "resyncTimeout":
            suggest = "resync_timeout"
        elif key == "retransmitInterval":
            suggest = "retransmit_interval"
        elif key == "transmitDelay":
            suggest = "transmit_delay"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OspfOspfInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OspfOspfInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OspfOspfInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication: Optional[str] = None,
                 authentication_key: Optional[str] = None,
                 bfd: Optional[str] = None,
                 comments: Optional[str] = None,
                 cost: Optional[int] = None,
                 database_filter_out: Optional[str] = None,
                 dead_interval: Optional[int] = None,
                 hello_interval: Optional[int] = None,
                 hello_multiplier: Optional[int] = None,
                 interface: Optional[str] = None,
                 ip: Optional[str] = None,
                 keychain: Optional[str] = None,
                 md5_key: Optional[str] = None,
                 md5_keychain: Optional[str] = None,
                 md5_keys: Optional[Sequence['outputs.OspfOspfInterfaceMd5Key']] = None,
                 mtu: Optional[int] = None,
                 mtu_ignore: Optional[str] = None,
                 name: Optional[str] = None,
                 network_type: Optional[str] = None,
                 prefix_length: Optional[int] = None,
                 priority: Optional[int] = None,
                 resync_timeout: Optional[int] = None,
                 retransmit_interval: Optional[int] = None,
                 status: Optional[str] = None,
                 transmit_delay: Optional[int] = None):
        """
        :param str authentication: Authentication type.
        :param str authentication_key: Authentication key.
        :param str bfd: Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
        :param str comments: Comment.
        :param int cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param str database_filter_out: Enable/disable control of flooding out LSAs. Valid values: `enable`, `disable`.
        :param int dead_interval: Dead interval.
        :param int hello_interval: Hello interval.
        :param int hello_multiplier: Number of hello packets within dead interval.
        :param str interface: Configuration interface name.
        :param str ip: IP address.
        :param str keychain: Message-digest key-chain name.
        :param str md5_key: MD5 key.
        :param str md5_keychain: Authentication MD5 key-chain name.
        :param Sequence['OspfOspfInterfaceMd5KeyArgs'] md5_keys: MD5 key. The structure of `md5_keys` block is documented below.
               
               The `md5_keys` block supports:
        :param int mtu: MTU for database description packets.
        :param str mtu_ignore: Enable/disable ignore MTU. Valid values: `enable`, `disable`.
        :param str name: Interface entry name.
        :param str network_type: Network type. Valid values: `broadcast`, `non-broadcast`, `point-to-point`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        :param int prefix_length: Prefix length.
        :param int priority: Priority.
        :param int resync_timeout: Graceful restart neighbor resynchronization timeout.
        :param int retransmit_interval: Retransmit interval.
        :param str status: Enable/disable status. Valid values: `disable`, `enable`.
        :param int transmit_delay: Transmit delay.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if database_filter_out is not None:
            pulumi.set(__self__, "database_filter_out", database_filter_out)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_multiplier is not None:
            pulumi.set(__self__, "hello_multiplier", hello_multiplier)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if keychain is not None:
            pulumi.set(__self__, "keychain", keychain)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if md5_keychain is not None:
            pulumi.set(__self__, "md5_keychain", md5_keychain)
        if md5_keys is not None:
            pulumi.set(__self__, "md5_keys", md5_keys)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_ignore is not None:
            pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if resync_timeout is not None:
            pulumi.set(__self__, "resync_timeout", resync_timeout)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[str]:
        """
        Authentication type.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[str]:
        """
        Authentication key.
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    def bfd(self) -> Optional[str]:
        """
        Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="databaseFilterOut")
    def database_filter_out(self) -> Optional[str]:
        """
        Enable/disable control of flooding out LSAs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "database_filter_out")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[int]:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[int]:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter(name="helloMultiplier")
    def hello_multiplier(self) -> Optional[int]:
        """
        Number of hello packets within dead interval.
        """
        return pulumi.get(self, "hello_multiplier")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Configuration interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IP address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def keychain(self) -> Optional[str]:
        """
        Message-digest key-chain name.
        """
        return pulumi.get(self, "keychain")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[str]:
        """
        MD5 key.
        """
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> Optional[str]:
        """
        Authentication MD5 key-chain name.
        """
        return pulumi.get(self, "md5_keychain")

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> Optional[Sequence['outputs.OspfOspfInterfaceMd5Key']]:
        """
        MD5 key. The structure of `md5_keys` block is documented below.

        The `md5_keys` block supports:
        """
        return pulumi.get(self, "md5_keys")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        """
        MTU for database description packets.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> Optional[str]:
        """
        Enable/disable ignore MTU. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mtu_ignore")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        """
        Network type. Valid values: `broadcast`, `non-broadcast`, `point-to-point`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[int]:
        """
        Prefix length.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="resyncTimeout")
    def resync_timeout(self) -> Optional[int]:
        """
        Graceful restart neighbor resynchronization timeout.
        """
        return pulumi.get(self, "resync_timeout")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[int]:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[int]:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class OspfOspfInterfaceMd5Key(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyString":
            suggest = "key_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OspfOspfInterfaceMd5Key. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OspfOspfInterfaceMd5Key.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OspfOspfInterfaceMd5Key.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 key_string: Optional[str] = None):
        """
        :param int id: Area entry IP address.
        :param str key_string: Password for the key.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Area entry IP address.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[str]:
        """
        Password for the key.
        """
        return pulumi.get(self, "key_string")


@pulumi.output_type
class OspfPassiveInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Passive interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Passive interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class OspfRedistribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OspfRedistribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OspfRedistribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OspfRedistribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: Optional[int] = None,
                 metric_type: Optional[str] = None,
                 name: Optional[str] = None,
                 routemap: Optional[str] = None,
                 status: Optional[str] = None,
                 tag: Optional[int] = None):
        """
        :param int metric: Redistribute metric setting.
        :param str metric_type: Metric type. Valid values: `1`, `2`.
        :param str name: Redistribute name.
        :param str routemap: Route map name.
        :param str status: status Valid values: `enable`, `disable`.
        :param int tag: Tag value.
        """
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        """
        Redistribute metric setting.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[str]:
        """
        Metric type. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Redistribute name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> Optional[str]:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[int]:
        """
        Tag value.
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class OspfSummaryAddress(dict):
    def __init__(__self__, *,
                 advertise: Optional[str] = None,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None,
                 tag: Optional[int] = None):
        """
        :param str advertise: Enable/disable advertise status. Valid values: `disable`, `enable`.
        :param int id: Summary address entry ID.
        :param str prefix: Prefix.
        :param int tag: Tag value.
        """
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[str]:
        """
        Enable/disable advertise status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Summary address entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def tag(self) -> Optional[int]:
        """
        Tag value.
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class Policy6Dstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address/group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address/group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class Policy6InternetServiceCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Custom Destination Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Custom Destination Internet Service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class Policy6InternetServiceId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Destination Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Destination Internet Service ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class Policy6Srcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address/group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address/group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PolicyDst(dict):
    def __init__(__self__, *,
                 subnet: Optional[str] = None):
        """
        :param str subnet: IP and mask.
        """
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        """
        IP and mask.
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class PolicyDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address/group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address/group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PolicyInputDevice(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PolicyInternetServiceCustom(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Custom Destination Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Custom Destination Internet Service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PolicyInternetServiceId(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Destination Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Destination Internet Service ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PolicySrc(dict):
    def __init__(__self__, *,
                 subnet: Optional[str] = None):
        """
        :param str subnet: IP and mask.
        """
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        """
        IP and mask.
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class PolicySrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address/group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address/group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class Prefixlist6Rule(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 flags: Optional[int] = None,
                 ge: Optional[int] = None,
                 id: Optional[int] = None,
                 le: Optional[int] = None,
                 prefix6: Optional[str] = None):
        """
        :param str action: Permit or deny packets that match this rule. Valid values: `permit`, `deny`.
        :param int flags: Flags.
        :param int ge: Minimum prefix length to be matched (0 - 128).
        :param int id: Rule ID.
        :param int le: Maximum prefix length to be matched (0 - 128).
        :param str prefix6: IPv6 prefix to define regular filter criteria, such as "any" or subnets.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if le is not None:
            pulumi.set(__self__, "le", le)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Permit or deny packets that match this rule. Valid values: `permit`, `deny`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def ge(self) -> Optional[int]:
        """
        Minimum prefix length to be matched (0 - 128).
        """
        return pulumi.get(self, "ge")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def le(self) -> Optional[int]:
        """
        Maximum prefix length to be matched (0 - 128).
        """
        return pulumi.get(self, "le")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        """
        IPv6 prefix to define regular filter criteria, such as "any" or subnets.
        """
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class PrefixlistRule(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 flags: Optional[int] = None,
                 ge: Optional[int] = None,
                 id: Optional[int] = None,
                 le: Optional[int] = None,
                 prefix: Optional[str] = None):
        """
        :param str action: Permit or deny this IP address and netmask prefix. Valid values: `permit`, `deny`.
        :param int flags: Flags.
        :param int ge: Minimum prefix length to be matched (0 - 32).
        :param int id: Rule ID.
        :param int le: Maximum prefix length to be matched (0 - 32).
        :param str prefix: IPv4 prefix to define regular filter criteria, such as "any" or subnets.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if le is not None:
            pulumi.set(__self__, "le", le)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Permit or deny this IP address and netmask prefix. Valid values: `permit`, `deny`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def ge(self) -> Optional[int]:
        """
        Minimum prefix length to be matched (0 - 32).
        """
        return pulumi.get(self, "ge")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def le(self) -> Optional[int]:
        """
        Maximum prefix length to be matched (0 - 32).
        """
        return pulumi.get(self, "le")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        IPv4 prefix to define regular filter criteria, such as "any" or subnets.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class RipDistance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList":
            suggest = "access_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RipDistance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RipDistance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RipDistance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list: Optional[str] = None,
                 distance: Optional[int] = None,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None):
        """
        :param str access_list: Access list for route destination.
        :param int distance: Distance (1 - 255).
        :param int id: Distance ID.
        :param str prefix: Distance prefix.
        """
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[str]:
        """
        Access list for route destination.
        """
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def distance(self) -> Optional[int]:
        """
        Distance (1 - 255).
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Distance ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Distance prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class RipDistributeList(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 listname: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str direction: Distribute list direction. Valid values: `in`, `out`.
        :param int id: Distribute list ID.
        :param str interface: Distribute list interface name.
        :param str listname: Distribute access/prefix list name.
        :param str status: status Valid values: `enable`, `disable`.
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if listname is not None:
            pulumi.set(__self__, "listname", listname)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        Distribute list direction. Valid values: `in`, `out`.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Distribute list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Distribute list interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def listname(self) -> Optional[str]:
        """
        Distribute access/prefix list name.
        """
        return pulumi.get(self, "listname")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class RipInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKeychain":
            suggest = "auth_keychain"
        elif key == "authMode":
            suggest = "auth_mode"
        elif key == "authString":
            suggest = "auth_string"
        elif key == "receiveVersion":
            suggest = "receive_version"
        elif key == "sendVersion":
            suggest = "send_version"
        elif key == "sendVersion2Broadcast":
            suggest = "send_version2_broadcast"
        elif key == "splitHorizon":
            suggest = "split_horizon"
        elif key == "splitHorizonStatus":
            suggest = "split_horizon_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RipInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RipInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RipInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_keychain: Optional[str] = None,
                 auth_mode: Optional[str] = None,
                 auth_string: Optional[str] = None,
                 flags: Optional[int] = None,
                 name: Optional[str] = None,
                 receive_version: Optional[str] = None,
                 send_version: Optional[str] = None,
                 send_version2_broadcast: Optional[str] = None,
                 split_horizon: Optional[str] = None,
                 split_horizon_status: Optional[str] = None):
        """
        :param str auth_keychain: Authentication key-chain name.
        :param str auth_mode: Authentication mode. Valid values: `none`, `text`, `md5`.
        :param str auth_string: Authentication string/password.
        :param int flags: flags
        :param str name: Interface name.
        :param str receive_version: Receive version. Valid values: `1`, `2`.
        :param str send_version: Send version. Valid values: `1`, `2`.
        :param str send_version2_broadcast: Enable/disable broadcast version 1 compatible packets. Valid values: `disable`, `enable`.
        :param str split_horizon: Enable/disable split horizon. Valid values: `poisoned`, `regular`.
        :param str split_horizon_status: Enable/disable split horizon. Valid values: `enable`, `disable`.
        """
        if auth_keychain is not None:
            pulumi.set(__self__, "auth_keychain", auth_keychain)
        if auth_mode is not None:
            pulumi.set(__self__, "auth_mode", auth_mode)
        if auth_string is not None:
            pulumi.set(__self__, "auth_string", auth_string)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if receive_version is not None:
            pulumi.set(__self__, "receive_version", receive_version)
        if send_version is not None:
            pulumi.set(__self__, "send_version", send_version)
        if send_version2_broadcast is not None:
            pulumi.set(__self__, "send_version2_broadcast", send_version2_broadcast)
        if split_horizon is not None:
            pulumi.set(__self__, "split_horizon", split_horizon)
        if split_horizon_status is not None:
            pulumi.set(__self__, "split_horizon_status", split_horizon_status)

    @property
    @pulumi.getter(name="authKeychain")
    def auth_keychain(self) -> Optional[str]:
        """
        Authentication key-chain name.
        """
        return pulumi.get(self, "auth_keychain")

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> Optional[str]:
        """
        Authentication mode. Valid values: `none`, `text`, `md5`.
        """
        return pulumi.get(self, "auth_mode")

    @property
    @pulumi.getter(name="authString")
    def auth_string(self) -> Optional[str]:
        """
        Authentication string/password.
        """
        return pulumi.get(self, "auth_string")

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        """
        flags
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="receiveVersion")
    def receive_version(self) -> Optional[str]:
        """
        Receive version. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "receive_version")

    @property
    @pulumi.getter(name="sendVersion")
    def send_version(self) -> Optional[str]:
        """
        Send version. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "send_version")

    @property
    @pulumi.getter(name="sendVersion2Broadcast")
    def send_version2_broadcast(self) -> Optional[str]:
        """
        Enable/disable broadcast version 1 compatible packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "send_version2_broadcast")

    @property
    @pulumi.getter(name="splitHorizon")
    def split_horizon(self) -> Optional[str]:
        """
        Enable/disable split horizon. Valid values: `poisoned`, `regular`.
        """
        return pulumi.get(self, "split_horizon")

    @property
    @pulumi.getter(name="splitHorizonStatus")
    def split_horizon_status(self) -> Optional[str]:
        """
        Enable/disable split horizon. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "split_horizon_status")


@pulumi.output_type
class RipNeighbor(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 ip: Optional[str] = None):
        """
        :param int id: Neighbor entry ID.
        :param str ip: IP address.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Neighbor entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IP address.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class RipNetwork(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None):
        """
        :param int id: Network entry ID.
        :param str prefix: Network prefix.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Network entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Network prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class RipOffsetList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList":
            suggest = "access_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RipOffsetList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RipOffsetList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RipOffsetList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list: Optional[str] = None,
                 direction: Optional[str] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 offset: Optional[int] = None,
                 status: Optional[str] = None):
        """
        :param str access_list: Access list name.
        :param str direction: Offset list direction. Valid values: `in`, `out`.
        :param int id: Offset-list ID.
        :param str interface: Interface name.
        :param int offset: offset
        :param str status: status Valid values: `enable`, `disable`.
        """
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[str]:
        """
        Access list name.
        """
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        Offset list direction. Valid values: `in`, `out`.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        """
        offset
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class RipPassiveInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Passive interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Passive interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RipRedistribute(dict):
    def __init__(__self__, *,
                 metric: Optional[int] = None,
                 name: Optional[str] = None,
                 routemap: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param int metric: Redistribute metric setting.
        :param str name: Redistribute name.
        :param str routemap: Route map name.
        :param str status: status Valid values: `enable`, `disable`.
        """
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        """
        Redistribute metric setting.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Redistribute name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> Optional[str]:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class RipngAggregateAddress(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 prefix6: Optional[str] = None):
        """
        :param int id: Aggregate address entry ID.
        :param str prefix6: Aggregate address prefix.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Aggregate address entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        """
        Aggregate address prefix.
        """
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class RipngDistance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList6":
            suggest = "access_list6"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RipngDistance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RipngDistance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RipngDistance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list6: Optional[str] = None,
                 distance: Optional[int] = None,
                 id: Optional[int] = None,
                 prefix6: Optional[str] = None):
        """
        :param str access_list6: Access list for route destination.
        :param int distance: Distance (1 - 255).
        :param int id: Distance ID.
        :param str prefix6: Distance prefix6.
        """
        if access_list6 is not None:
            pulumi.set(__self__, "access_list6", access_list6)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter(name="accessList6")
    def access_list6(self) -> Optional[str]:
        """
        Access list for route destination.
        """
        return pulumi.get(self, "access_list6")

    @property
    @pulumi.getter
    def distance(self) -> Optional[int]:
        """
        Distance (1 - 255).
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Distance ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[str]:
        """
        Distance prefix6.
        """
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class RipngDistributeList(dict):
    def __init__(__self__, *,
                 direction: Optional[str] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 listname: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str direction: Distribute list direction. Valid values: `in`, `out`.
        :param int id: Distribute list ID.
        :param str interface: Distribute list interface name.
        :param str listname: Distribute access/prefix list name.
        :param str status: status Valid values: `enable`, `disable`.
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if listname is not None:
            pulumi.set(__self__, "listname", listname)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        Distribute list direction. Valid values: `in`, `out`.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Distribute list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Distribute list interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def listname(self) -> Optional[str]:
        """
        Distribute access/prefix list name.
        """
        return pulumi.get(self, "listname")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class RipngInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "splitHorizon":
            suggest = "split_horizon"
        elif key == "splitHorizonStatus":
            suggest = "split_horizon_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RipngInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RipngInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RipngInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flags: Optional[int] = None,
                 name: Optional[str] = None,
                 split_horizon: Optional[str] = None,
                 split_horizon_status: Optional[str] = None):
        """
        :param int flags: Flags.
        :param str name: Interface name.
        :param str split_horizon: Enable/disable split horizon. Valid values: `poisoned`, `regular`.
        :param str split_horizon_status: Enable/disable split horizon. Valid values: `enable`, `disable`.
        """
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if split_horizon is not None:
            pulumi.set(__self__, "split_horizon", split_horizon)
        if split_horizon_status is not None:
            pulumi.set(__self__, "split_horizon_status", split_horizon_status)

    @property
    @pulumi.getter
    def flags(self) -> Optional[int]:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="splitHorizon")
    def split_horizon(self) -> Optional[str]:
        """
        Enable/disable split horizon. Valid values: `poisoned`, `regular`.
        """
        return pulumi.get(self, "split_horizon")

    @property
    @pulumi.getter(name="splitHorizonStatus")
    def split_horizon_status(self) -> Optional[str]:
        """
        Enable/disable split horizon. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "split_horizon_status")


@pulumi.output_type
class RipngNeighbor(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 ip6: Optional[str] = None):
        """
        :param int id: Neighbor entry ID.
        :param str interface: Interface name.
        :param str ip6: IPv6 link-local address.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Neighbor entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip6(self) -> Optional[str]:
        """
        IPv6 link-local address.
        """
        return pulumi.get(self, "ip6")


@pulumi.output_type
class RipngNetwork(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 prefix: Optional[str] = None):
        """
        :param int id: Network entry ID.
        :param str prefix: Network IPv6 link-local prefix.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Network entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Network IPv6 link-local prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class RipngOffsetList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList6":
            suggest = "access_list6"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RipngOffsetList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RipngOffsetList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RipngOffsetList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list6: Optional[str] = None,
                 direction: Optional[str] = None,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 offset: Optional[int] = None,
                 status: Optional[str] = None):
        """
        :param str access_list6: IPv6 access list name.
        :param str direction: Offset list direction. Valid values: `in`, `out`.
        :param int id: Offset-list ID.
        :param str interface: Interface name.
        :param int offset: offset
        :param str status: status Valid values: `enable`, `disable`.
        """
        if access_list6 is not None:
            pulumi.set(__self__, "access_list6", access_list6)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessList6")
    def access_list6(self) -> Optional[str]:
        """
        IPv6 access list name.
        """
        return pulumi.get(self, "access_list6")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        Offset list direction. Valid values: `in`, `out`.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        """
        offset
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class RipngPassiveInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Passive interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Passive interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RipngRedistribute(dict):
    def __init__(__self__, *,
                 metric: Optional[int] = None,
                 name: Optional[str] = None,
                 routemap: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param int metric: Redistribute metric setting.
        :param str name: Redistribute name.
        :param str routemap: Route map name.
        :param str status: status Valid values: `enable`, `disable`.
        """
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        """
        Redistribute metric setting.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Redistribute name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> Optional[str]:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class RoutemapRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchAsPath":
            suggest = "match_as_path"
        elif key == "matchCommunity":
            suggest = "match_community"
        elif key == "matchCommunityExact":
            suggest = "match_community_exact"
        elif key == "matchExtcommunity":
            suggest = "match_extcommunity"
        elif key == "matchExtcommunityExact":
            suggest = "match_extcommunity_exact"
        elif key == "matchFlags":
            suggest = "match_flags"
        elif key == "matchInterface":
            suggest = "match_interface"
        elif key == "matchIp6Address":
            suggest = "match_ip6_address"
        elif key == "matchIp6Nexthop":
            suggest = "match_ip6_nexthop"
        elif key == "matchIpAddress":
            suggest = "match_ip_address"
        elif key == "matchIpNexthop":
            suggest = "match_ip_nexthop"
        elif key == "matchMetric":
            suggest = "match_metric"
        elif key == "matchOrigin":
            suggest = "match_origin"
        elif key == "matchRouteType":
            suggest = "match_route_type"
        elif key == "matchTag":
            suggest = "match_tag"
        elif key == "matchVrf":
            suggest = "match_vrf"
        elif key == "setAggregatorAs":
            suggest = "set_aggregator_as"
        elif key == "setAggregatorIp":
            suggest = "set_aggregator_ip"
        elif key == "setAspathAction":
            suggest = "set_aspath_action"
        elif key == "setAspaths":
            suggest = "set_aspaths"
        elif key == "setAtomicAggregate":
            suggest = "set_atomic_aggregate"
        elif key == "setCommunities":
            suggest = "set_communities"
        elif key == "setCommunityAdditive":
            suggest = "set_community_additive"
        elif key == "setCommunityDelete":
            suggest = "set_community_delete"
        elif key == "setDampeningMaxSuppress":
            suggest = "set_dampening_max_suppress"
        elif key == "setDampeningReachabilityHalfLife":
            suggest = "set_dampening_reachability_half_life"
        elif key == "setDampeningReuse":
            suggest = "set_dampening_reuse"
        elif key == "setDampeningSuppress":
            suggest = "set_dampening_suppress"
        elif key == "setDampeningUnreachabilityHalfLife":
            suggest = "set_dampening_unreachability_half_life"
        elif key == "setExtcommunityRts":
            suggest = "set_extcommunity_rts"
        elif key == "setExtcommunitySoos":
            suggest = "set_extcommunity_soos"
        elif key == "setFlags":
            suggest = "set_flags"
        elif key == "setIp6Nexthop":
            suggest = "set_ip6_nexthop"
        elif key == "setIp6NexthopLocal":
            suggest = "set_ip6_nexthop_local"
        elif key == "setIpNexthop":
            suggest = "set_ip_nexthop"
        elif key == "setIpPrefsrc":
            suggest = "set_ip_prefsrc"
        elif key == "setLocalPreference":
            suggest = "set_local_preference"
        elif key == "setMetric":
            suggest = "set_metric"
        elif key == "setMetricType":
            suggest = "set_metric_type"
        elif key == "setOrigin":
            suggest = "set_origin"
        elif key == "setOriginatorId":
            suggest = "set_originator_id"
        elif key == "setPriority":
            suggest = "set_priority"
        elif key == "setRouteTag":
            suggest = "set_route_tag"
        elif key == "setTag":
            suggest = "set_tag"
        elif key == "setVpnv4Nexthop":
            suggest = "set_vpnv4_nexthop"
        elif key == "setVpnv6Nexthop":
            suggest = "set_vpnv6_nexthop"
        elif key == "setVpnv6NexthopLocal":
            suggest = "set_vpnv6_nexthop_local"
        elif key == "setWeight":
            suggest = "set_weight"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutemapRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutemapRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutemapRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 match_as_path: Optional[str] = None,
                 match_community: Optional[str] = None,
                 match_community_exact: Optional[str] = None,
                 match_extcommunity: Optional[str] = None,
                 match_extcommunity_exact: Optional[str] = None,
                 match_flags: Optional[int] = None,
                 match_interface: Optional[str] = None,
                 match_ip6_address: Optional[str] = None,
                 match_ip6_nexthop: Optional[str] = None,
                 match_ip_address: Optional[str] = None,
                 match_ip_nexthop: Optional[str] = None,
                 match_metric: Optional[int] = None,
                 match_origin: Optional[str] = None,
                 match_route_type: Optional[str] = None,
                 match_tag: Optional[int] = None,
                 match_vrf: Optional[int] = None,
                 set_aggregator_as: Optional[int] = None,
                 set_aggregator_ip: Optional[str] = None,
                 set_aspath_action: Optional[str] = None,
                 set_aspaths: Optional[Sequence['outputs.RoutemapRuleSetAspath']] = None,
                 set_atomic_aggregate: Optional[str] = None,
                 set_communities: Optional[Sequence['outputs.RoutemapRuleSetCommunity']] = None,
                 set_community_additive: Optional[str] = None,
                 set_community_delete: Optional[str] = None,
                 set_dampening_max_suppress: Optional[int] = None,
                 set_dampening_reachability_half_life: Optional[int] = None,
                 set_dampening_reuse: Optional[int] = None,
                 set_dampening_suppress: Optional[int] = None,
                 set_dampening_unreachability_half_life: Optional[int] = None,
                 set_extcommunity_rts: Optional[Sequence['outputs.RoutemapRuleSetExtcommunityRt']] = None,
                 set_extcommunity_soos: Optional[Sequence['outputs.RoutemapRuleSetExtcommunitySoo']] = None,
                 set_flags: Optional[int] = None,
                 set_ip6_nexthop: Optional[str] = None,
                 set_ip6_nexthop_local: Optional[str] = None,
                 set_ip_nexthop: Optional[str] = None,
                 set_ip_prefsrc: Optional[str] = None,
                 set_local_preference: Optional[int] = None,
                 set_metric: Optional[int] = None,
                 set_metric_type: Optional[str] = None,
                 set_origin: Optional[str] = None,
                 set_originator_id: Optional[str] = None,
                 set_priority: Optional[int] = None,
                 set_route_tag: Optional[int] = None,
                 set_tag: Optional[int] = None,
                 set_vpnv4_nexthop: Optional[str] = None,
                 set_vpnv6_nexthop: Optional[str] = None,
                 set_vpnv6_nexthop_local: Optional[str] = None,
                 set_weight: Optional[int] = None):
        """
        :param str action: Action. Valid values: `permit`, `deny`.
        :param int id: Rule ID.
        :param str match_as_path: Match BGP AS path list.
        :param str match_community: Match BGP community list.
        :param str match_community_exact: Enable/disable exact matching of communities. Valid values: `enable`, `disable`.
        :param str match_extcommunity: Match BGP extended community list.
        :param str match_extcommunity_exact: Enable/disable exact matching of extended communities. Valid values: `enable`, `disable`.
        :param int match_flags: BGP flag value to match (0 - 65535)
        :param str match_interface: Match interface configuration.
        :param str match_ip6_address: Match IPv6 address permitted by access-list6 or prefix-list6.
        :param str match_ip6_nexthop: Match next hop IPv6 address passed by access-list6 or prefix-list6.
        :param str match_ip_address: Match IP address permitted by access-list or prefix-list.
        :param str match_ip_nexthop: Match next hop IP address passed by access-list or prefix-list.
        :param int match_metric: Match metric for redistribute routes.
        :param str match_origin: Match BGP origin code. Valid values: `none`, `egp`, `igp`, `incomplete`.
        :param str match_route_type: Match route type.
        :param int match_tag: Match tag.
        :param int match_vrf: Match VRF ID.
        :param int set_aggregator_as: BGP aggregator AS.
        :param str set_aggregator_ip: BGP aggregator IP.
        :param str set_aspath_action: Specify preferred action of set-aspath. Valid values: `prepend`, `replace`.
        :param Sequence['RoutemapRuleSetAspathArgs'] set_aspaths: Prepend BGP AS path attribute. The structure of `set_aspath` block is documented below.
        :param str set_atomic_aggregate: Enable/disable BGP atomic aggregate attribute. Valid values: `enable`, `disable`.
        :param Sequence['RoutemapRuleSetCommunityArgs'] set_communities: BGP community attribute. The structure of `set_community` block is documented below.
        :param str set_community_additive: Enable/disable adding set-community to existing community. Valid values: `enable`, `disable`.
        :param str set_community_delete: Delete communities matching community list.
        :param int set_dampening_max_suppress: Maximum duration to suppress a route (1 - 255 min, 0 = unset).
        :param int set_dampening_reachability_half_life: Reachability half-life time for the penalty (1 - 45 min, 0 = unset).
        :param int set_dampening_reuse: Value to start reusing a route (1 - 20000, 0 = unset).
        :param int set_dampening_suppress: Value to start suppressing a route (1 - 20000, 0 = unset).
        :param int set_dampening_unreachability_half_life: Unreachability Half-life time for the penalty (1 - 45 min, 0 = unset)
        :param Sequence['RoutemapRuleSetExtcommunityRtArgs'] set_extcommunity_rts: Route Target extended community. The structure of `set_extcommunity_rt` block is documented below.
        :param Sequence['RoutemapRuleSetExtcommunitySooArgs'] set_extcommunity_soos: Site-of-Origin extended community. The structure of `set_extcommunity_soo` block is documented below.
        :param int set_flags: BGP flags value (0 - 65535)
        :param str set_ip6_nexthop: IPv6 global address of next hop.
        :param str set_ip6_nexthop_local: IPv6 local address of next hop.
        :param str set_ip_nexthop: IP address of next hop.
        :param str set_ip_prefsrc: IP address of preferred source.
        :param int set_local_preference: BGP local preference path attribute.
        :param int set_metric: Metric value.
        :param str set_metric_type: Metric type.
        :param str set_origin: BGP origin code. Valid values: `none`, `egp`, `igp`, `incomplete`.
        :param str set_originator_id: BGP originator ID attribute.
        :param int set_priority: Priority for routing table.
        :param int set_route_tag: Route tag for routing table.
        :param int set_tag: Tag value.
        :param str set_vpnv4_nexthop: IP address of VPNv4 next-hop.
        :param str set_vpnv6_nexthop: IPv6 global address of VPNv6 next-hop.
        :param str set_vpnv6_nexthop_local: IPv6 link-local address of VPNv6 next-hop.
        :param int set_weight: BGP weight for routing table.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_as_path is not None:
            pulumi.set(__self__, "match_as_path", match_as_path)
        if match_community is not None:
            pulumi.set(__self__, "match_community", match_community)
        if match_community_exact is not None:
            pulumi.set(__self__, "match_community_exact", match_community_exact)
        if match_extcommunity is not None:
            pulumi.set(__self__, "match_extcommunity", match_extcommunity)
        if match_extcommunity_exact is not None:
            pulumi.set(__self__, "match_extcommunity_exact", match_extcommunity_exact)
        if match_flags is not None:
            pulumi.set(__self__, "match_flags", match_flags)
        if match_interface is not None:
            pulumi.set(__self__, "match_interface", match_interface)
        if match_ip6_address is not None:
            pulumi.set(__self__, "match_ip6_address", match_ip6_address)
        if match_ip6_nexthop is not None:
            pulumi.set(__self__, "match_ip6_nexthop", match_ip6_nexthop)
        if match_ip_address is not None:
            pulumi.set(__self__, "match_ip_address", match_ip_address)
        if match_ip_nexthop is not None:
            pulumi.set(__self__, "match_ip_nexthop", match_ip_nexthop)
        if match_metric is not None:
            pulumi.set(__self__, "match_metric", match_metric)
        if match_origin is not None:
            pulumi.set(__self__, "match_origin", match_origin)
        if match_route_type is not None:
            pulumi.set(__self__, "match_route_type", match_route_type)
        if match_tag is not None:
            pulumi.set(__self__, "match_tag", match_tag)
        if match_vrf is not None:
            pulumi.set(__self__, "match_vrf", match_vrf)
        if set_aggregator_as is not None:
            pulumi.set(__self__, "set_aggregator_as", set_aggregator_as)
        if set_aggregator_ip is not None:
            pulumi.set(__self__, "set_aggregator_ip", set_aggregator_ip)
        if set_aspath_action is not None:
            pulumi.set(__self__, "set_aspath_action", set_aspath_action)
        if set_aspaths is not None:
            pulumi.set(__self__, "set_aspaths", set_aspaths)
        if set_atomic_aggregate is not None:
            pulumi.set(__self__, "set_atomic_aggregate", set_atomic_aggregate)
        if set_communities is not None:
            pulumi.set(__self__, "set_communities", set_communities)
        if set_community_additive is not None:
            pulumi.set(__self__, "set_community_additive", set_community_additive)
        if set_community_delete is not None:
            pulumi.set(__self__, "set_community_delete", set_community_delete)
        if set_dampening_max_suppress is not None:
            pulumi.set(__self__, "set_dampening_max_suppress", set_dampening_max_suppress)
        if set_dampening_reachability_half_life is not None:
            pulumi.set(__self__, "set_dampening_reachability_half_life", set_dampening_reachability_half_life)
        if set_dampening_reuse is not None:
            pulumi.set(__self__, "set_dampening_reuse", set_dampening_reuse)
        if set_dampening_suppress is not None:
            pulumi.set(__self__, "set_dampening_suppress", set_dampening_suppress)
        if set_dampening_unreachability_half_life is not None:
            pulumi.set(__self__, "set_dampening_unreachability_half_life", set_dampening_unreachability_half_life)
        if set_extcommunity_rts is not None:
            pulumi.set(__self__, "set_extcommunity_rts", set_extcommunity_rts)
        if set_extcommunity_soos is not None:
            pulumi.set(__self__, "set_extcommunity_soos", set_extcommunity_soos)
        if set_flags is not None:
            pulumi.set(__self__, "set_flags", set_flags)
        if set_ip6_nexthop is not None:
            pulumi.set(__self__, "set_ip6_nexthop", set_ip6_nexthop)
        if set_ip6_nexthop_local is not None:
            pulumi.set(__self__, "set_ip6_nexthop_local", set_ip6_nexthop_local)
        if set_ip_nexthop is not None:
            pulumi.set(__self__, "set_ip_nexthop", set_ip_nexthop)
        if set_ip_prefsrc is not None:
            pulumi.set(__self__, "set_ip_prefsrc", set_ip_prefsrc)
        if set_local_preference is not None:
            pulumi.set(__self__, "set_local_preference", set_local_preference)
        if set_metric is not None:
            pulumi.set(__self__, "set_metric", set_metric)
        if set_metric_type is not None:
            pulumi.set(__self__, "set_metric_type", set_metric_type)
        if set_origin is not None:
            pulumi.set(__self__, "set_origin", set_origin)
        if set_originator_id is not None:
            pulumi.set(__self__, "set_originator_id", set_originator_id)
        if set_priority is not None:
            pulumi.set(__self__, "set_priority", set_priority)
        if set_route_tag is not None:
            pulumi.set(__self__, "set_route_tag", set_route_tag)
        if set_tag is not None:
            pulumi.set(__self__, "set_tag", set_tag)
        if set_vpnv4_nexthop is not None:
            pulumi.set(__self__, "set_vpnv4_nexthop", set_vpnv4_nexthop)
        if set_vpnv6_nexthop is not None:
            pulumi.set(__self__, "set_vpnv6_nexthop", set_vpnv6_nexthop)
        if set_vpnv6_nexthop_local is not None:
            pulumi.set(__self__, "set_vpnv6_nexthop_local", set_vpnv6_nexthop_local)
        if set_weight is not None:
            pulumi.set(__self__, "set_weight", set_weight)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `permit`, `deny`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchAsPath")
    def match_as_path(self) -> Optional[str]:
        """
        Match BGP AS path list.
        """
        return pulumi.get(self, "match_as_path")

    @property
    @pulumi.getter(name="matchCommunity")
    def match_community(self) -> Optional[str]:
        """
        Match BGP community list.
        """
        return pulumi.get(self, "match_community")

    @property
    @pulumi.getter(name="matchCommunityExact")
    def match_community_exact(self) -> Optional[str]:
        """
        Enable/disable exact matching of communities. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "match_community_exact")

    @property
    @pulumi.getter(name="matchExtcommunity")
    def match_extcommunity(self) -> Optional[str]:
        """
        Match BGP extended community list.
        """
        return pulumi.get(self, "match_extcommunity")

    @property
    @pulumi.getter(name="matchExtcommunityExact")
    def match_extcommunity_exact(self) -> Optional[str]:
        """
        Enable/disable exact matching of extended communities. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "match_extcommunity_exact")

    @property
    @pulumi.getter(name="matchFlags")
    def match_flags(self) -> Optional[int]:
        """
        BGP flag value to match (0 - 65535)
        """
        return pulumi.get(self, "match_flags")

    @property
    @pulumi.getter(name="matchInterface")
    def match_interface(self) -> Optional[str]:
        """
        Match interface configuration.
        """
        return pulumi.get(self, "match_interface")

    @property
    @pulumi.getter(name="matchIp6Address")
    def match_ip6_address(self) -> Optional[str]:
        """
        Match IPv6 address permitted by access-list6 or prefix-list6.
        """
        return pulumi.get(self, "match_ip6_address")

    @property
    @pulumi.getter(name="matchIp6Nexthop")
    def match_ip6_nexthop(self) -> Optional[str]:
        """
        Match next hop IPv6 address passed by access-list6 or prefix-list6.
        """
        return pulumi.get(self, "match_ip6_nexthop")

    @property
    @pulumi.getter(name="matchIpAddress")
    def match_ip_address(self) -> Optional[str]:
        """
        Match IP address permitted by access-list or prefix-list.
        """
        return pulumi.get(self, "match_ip_address")

    @property
    @pulumi.getter(name="matchIpNexthop")
    def match_ip_nexthop(self) -> Optional[str]:
        """
        Match next hop IP address passed by access-list or prefix-list.
        """
        return pulumi.get(self, "match_ip_nexthop")

    @property
    @pulumi.getter(name="matchMetric")
    def match_metric(self) -> Optional[int]:
        """
        Match metric for redistribute routes.
        """
        return pulumi.get(self, "match_metric")

    @property
    @pulumi.getter(name="matchOrigin")
    def match_origin(self) -> Optional[str]:
        """
        Match BGP origin code. Valid values: `none`, `egp`, `igp`, `incomplete`.
        """
        return pulumi.get(self, "match_origin")

    @property
    @pulumi.getter(name="matchRouteType")
    def match_route_type(self) -> Optional[str]:
        """
        Match route type.
        """
        return pulumi.get(self, "match_route_type")

    @property
    @pulumi.getter(name="matchTag")
    def match_tag(self) -> Optional[int]:
        """
        Match tag.
        """
        return pulumi.get(self, "match_tag")

    @property
    @pulumi.getter(name="matchVrf")
    def match_vrf(self) -> Optional[int]:
        """
        Match VRF ID.
        """
        return pulumi.get(self, "match_vrf")

    @property
    @pulumi.getter(name="setAggregatorAs")
    def set_aggregator_as(self) -> Optional[int]:
        """
        BGP aggregator AS.
        """
        return pulumi.get(self, "set_aggregator_as")

    @property
    @pulumi.getter(name="setAggregatorIp")
    def set_aggregator_ip(self) -> Optional[str]:
        """
        BGP aggregator IP.
        """
        return pulumi.get(self, "set_aggregator_ip")

    @property
    @pulumi.getter(name="setAspathAction")
    def set_aspath_action(self) -> Optional[str]:
        """
        Specify preferred action of set-aspath. Valid values: `prepend`, `replace`.
        """
        return pulumi.get(self, "set_aspath_action")

    @property
    @pulumi.getter(name="setAspaths")
    def set_aspaths(self) -> Optional[Sequence['outputs.RoutemapRuleSetAspath']]:
        """
        Prepend BGP AS path attribute. The structure of `set_aspath` block is documented below.
        """
        return pulumi.get(self, "set_aspaths")

    @property
    @pulumi.getter(name="setAtomicAggregate")
    def set_atomic_aggregate(self) -> Optional[str]:
        """
        Enable/disable BGP atomic aggregate attribute. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "set_atomic_aggregate")

    @property
    @pulumi.getter(name="setCommunities")
    def set_communities(self) -> Optional[Sequence['outputs.RoutemapRuleSetCommunity']]:
        """
        BGP community attribute. The structure of `set_community` block is documented below.
        """
        return pulumi.get(self, "set_communities")

    @property
    @pulumi.getter(name="setCommunityAdditive")
    def set_community_additive(self) -> Optional[str]:
        """
        Enable/disable adding set-community to existing community. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "set_community_additive")

    @property
    @pulumi.getter(name="setCommunityDelete")
    def set_community_delete(self) -> Optional[str]:
        """
        Delete communities matching community list.
        """
        return pulumi.get(self, "set_community_delete")

    @property
    @pulumi.getter(name="setDampeningMaxSuppress")
    def set_dampening_max_suppress(self) -> Optional[int]:
        """
        Maximum duration to suppress a route (1 - 255 min, 0 = unset).
        """
        return pulumi.get(self, "set_dampening_max_suppress")

    @property
    @pulumi.getter(name="setDampeningReachabilityHalfLife")
    def set_dampening_reachability_half_life(self) -> Optional[int]:
        """
        Reachability half-life time for the penalty (1 - 45 min, 0 = unset).
        """
        return pulumi.get(self, "set_dampening_reachability_half_life")

    @property
    @pulumi.getter(name="setDampeningReuse")
    def set_dampening_reuse(self) -> Optional[int]:
        """
        Value to start reusing a route (1 - 20000, 0 = unset).
        """
        return pulumi.get(self, "set_dampening_reuse")

    @property
    @pulumi.getter(name="setDampeningSuppress")
    def set_dampening_suppress(self) -> Optional[int]:
        """
        Value to start suppressing a route (1 - 20000, 0 = unset).
        """
        return pulumi.get(self, "set_dampening_suppress")

    @property
    @pulumi.getter(name="setDampeningUnreachabilityHalfLife")
    def set_dampening_unreachability_half_life(self) -> Optional[int]:
        """
        Unreachability Half-life time for the penalty (1 - 45 min, 0 = unset)
        """
        return pulumi.get(self, "set_dampening_unreachability_half_life")

    @property
    @pulumi.getter(name="setExtcommunityRts")
    def set_extcommunity_rts(self) -> Optional[Sequence['outputs.RoutemapRuleSetExtcommunityRt']]:
        """
        Route Target extended community. The structure of `set_extcommunity_rt` block is documented below.
        """
        return pulumi.get(self, "set_extcommunity_rts")

    @property
    @pulumi.getter(name="setExtcommunitySoos")
    def set_extcommunity_soos(self) -> Optional[Sequence['outputs.RoutemapRuleSetExtcommunitySoo']]:
        """
        Site-of-Origin extended community. The structure of `set_extcommunity_soo` block is documented below.
        """
        return pulumi.get(self, "set_extcommunity_soos")

    @property
    @pulumi.getter(name="setFlags")
    def set_flags(self) -> Optional[int]:
        """
        BGP flags value (0 - 65535)
        """
        return pulumi.get(self, "set_flags")

    @property
    @pulumi.getter(name="setIp6Nexthop")
    def set_ip6_nexthop(self) -> Optional[str]:
        """
        IPv6 global address of next hop.
        """
        return pulumi.get(self, "set_ip6_nexthop")

    @property
    @pulumi.getter(name="setIp6NexthopLocal")
    def set_ip6_nexthop_local(self) -> Optional[str]:
        """
        IPv6 local address of next hop.
        """
        return pulumi.get(self, "set_ip6_nexthop_local")

    @property
    @pulumi.getter(name="setIpNexthop")
    def set_ip_nexthop(self) -> Optional[str]:
        """
        IP address of next hop.
        """
        return pulumi.get(self, "set_ip_nexthop")

    @property
    @pulumi.getter(name="setIpPrefsrc")
    def set_ip_prefsrc(self) -> Optional[str]:
        """
        IP address of preferred source.
        """
        return pulumi.get(self, "set_ip_prefsrc")

    @property
    @pulumi.getter(name="setLocalPreference")
    def set_local_preference(self) -> Optional[int]:
        """
        BGP local preference path attribute.
        """
        return pulumi.get(self, "set_local_preference")

    @property
    @pulumi.getter(name="setMetric")
    def set_metric(self) -> Optional[int]:
        """
        Metric value.
        """
        return pulumi.get(self, "set_metric")

    @property
    @pulumi.getter(name="setMetricType")
    def set_metric_type(self) -> Optional[str]:
        """
        Metric type.
        """
        return pulumi.get(self, "set_metric_type")

    @property
    @pulumi.getter(name="setOrigin")
    def set_origin(self) -> Optional[str]:
        """
        BGP origin code. Valid values: `none`, `egp`, `igp`, `incomplete`.
        """
        return pulumi.get(self, "set_origin")

    @property
    @pulumi.getter(name="setOriginatorId")
    def set_originator_id(self) -> Optional[str]:
        """
        BGP originator ID attribute.
        """
        return pulumi.get(self, "set_originator_id")

    @property
    @pulumi.getter(name="setPriority")
    def set_priority(self) -> Optional[int]:
        """
        Priority for routing table.
        """
        return pulumi.get(self, "set_priority")

    @property
    @pulumi.getter(name="setRouteTag")
    def set_route_tag(self) -> Optional[int]:
        """
        Route tag for routing table.
        """
        return pulumi.get(self, "set_route_tag")

    @property
    @pulumi.getter(name="setTag")
    def set_tag(self) -> Optional[int]:
        """
        Tag value.
        """
        return pulumi.get(self, "set_tag")

    @property
    @pulumi.getter(name="setVpnv4Nexthop")
    def set_vpnv4_nexthop(self) -> Optional[str]:
        """
        IP address of VPNv4 next-hop.
        """
        return pulumi.get(self, "set_vpnv4_nexthop")

    @property
    @pulumi.getter(name="setVpnv6Nexthop")
    def set_vpnv6_nexthop(self) -> Optional[str]:
        """
        IPv6 global address of VPNv6 next-hop.
        """
        return pulumi.get(self, "set_vpnv6_nexthop")

    @property
    @pulumi.getter(name="setVpnv6NexthopLocal")
    def set_vpnv6_nexthop_local(self) -> Optional[str]:
        """
        IPv6 link-local address of VPNv6 next-hop.
        """
        return pulumi.get(self, "set_vpnv6_nexthop_local")

    @property
    @pulumi.getter(name="setWeight")
    def set_weight(self) -> Optional[int]:
        """
        BGP weight for routing table.
        """
        return pulumi.get(self, "set_weight")


@pulumi.output_type
class RoutemapRuleSetAspath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "as":
            suggest = "as_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutemapRuleSetAspath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutemapRuleSetAspath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutemapRuleSetAspath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_: Optional[str] = None):
        """
        :param str as_: AS number. Use quotes for repeating numbers, For example, "1 1 2". On FortiOS versions 6.2.0-7.0.0: 0 - 42949672. On FortiOS versions 7.0.1-7.0.3: 0 - 4294967295.
        """
        if as_ is not None:
            pulumi.set(__self__, "as_", as_)

    @property
    @pulumi.getter(name="as")
    def as_(self) -> Optional[str]:
        """
        AS number. Use quotes for repeating numbers, For example, "1 1 2". On FortiOS versions 6.2.0-7.0.0: 0 - 42949672. On FortiOS versions 7.0.1-7.0.3: 0 - 4294967295.
        """
        return pulumi.get(self, "as_")


@pulumi.output_type
class RoutemapRuleSetCommunity(dict):
    def __init__(__self__, *,
                 community: Optional[str] = None):
        """
        :param str community: Attribute: AA|AA:NN|internet|local-AS|no-advertise|no-export.
        """
        if community is not None:
            pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> Optional[str]:
        """
        Attribute: AA|AA:NN|internet|local-AS|no-advertise|no-export.
        """
        return pulumi.get(self, "community")


@pulumi.output_type
class RoutemapRuleSetExtcommunityRt(dict):
    def __init__(__self__, *,
                 community: Optional[str] = None):
        """
        :param str community: AA:NN.
        """
        if community is not None:
            pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> Optional[str]:
        """
        AA:NN.
        """
        return pulumi.get(self, "community")


@pulumi.output_type
class RoutemapRuleSetExtcommunitySoo(dict):
    def __init__(__self__, *,
                 community: Optional[str] = None):
        """
        :param str community: Community (format = AA:NN).
        """
        if community is not None:
            pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> Optional[str]:
        """
        Community (format = AA:NN).
        """
        return pulumi.get(self, "community")


@pulumi.output_type
class Static6SdwanZone(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: SD-WAN zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        SD-WAN zone name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class StaticSdwanZone(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: SD-WAN zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        SD-WAN zone name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAccesslist6RuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 exact_match: str,
                 flags: int,
                 id: int,
                 prefix6: str):
        """
        :param str action: Permit or deny this IP address and netmask prefix.
        :param str exact_match: Enable/disable exact prefix match.
        :param int flags: Flags.
        :param int id: Rule ID.
        :param str prefix6: IPv6 prefix to define regular filter criteria, such as "any" or subnets.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Permit or deny this IP address and netmask prefix.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        """
        Enable/disable exact prefix match.
        """
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter
    def flags(self) -> int:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        """
        IPv6 prefix to define regular filter criteria, such as "any" or subnets.
        """
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class GetAccesslistRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 exact_match: str,
                 flags: int,
                 id: int,
                 prefix: str,
                 wildcard: str):
        """
        :param str action: Permit or deny this IP address and netmask prefix.
        :param str exact_match: Enable/disable exact match.
        :param int flags: Flags.
        :param int id: Rule ID.
        :param str prefix: IPv4 prefix to define regular filter criteria, such as "any" or subnets.
        :param str wildcard: Wildcard to define Cisco-style wildcard filter criteria.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Permit or deny this IP address and netmask prefix.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        """
        Enable/disable exact match.
        """
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter
    def flags(self) -> int:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        IPv4 prefix to define regular filter criteria, such as "any" or subnets.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def wildcard(self) -> str:
        """
        Wildcard to define Cisco-style wildcard filter criteria.
        """
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class GetAspathlistRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 id: int,
                 regexp: str):
        """
        :param str action: Permit or deny route-based operations, based on the route's AS_PATH attribute.
        :param int id: ID.
        :param str regexp: Regular-expression to match the Border Gateway Protocol (BGP) AS paths.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "regexp", regexp)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Permit or deny route-based operations, based on the route's AS_PATH attribute.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        """
        Regular-expression to match the Border Gateway Protocol (BGP) AS paths.
        """
        return pulumi.get(self, "regexp")


@pulumi.output_type
class GetBfd6MultihopTemplateResult(dict):
    def __init__(__self__, *,
                 auth_mode: str,
                 bfd_desired_min_tx: int,
                 bfd_detect_mult: int,
                 bfd_required_min_rx: int,
                 dst: str,
                 id: int,
                 md5_key: str,
                 src: str):
        """
        :param str auth_mode: Authentication mode.
        :param int bfd_desired_min_tx: BFD desired minimal transmit interval (milliseconds).
        :param int bfd_detect_mult: BFD detection multiplier.
        :param int bfd_required_min_rx: BFD required minimal receive interval (milliseconds).
        :param str dst: Destination prefix.
        :param int id: ID.
        :param str md5_key: MD5 key of key ID 1.
        :param str src: Source prefix.
        """
        pulumi.set(__self__, "auth_mode", auth_mode)
        pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        pulumi.set(__self__, "dst", dst)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "md5_key", md5_key)
        pulumi.set(__self__, "src", src)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> str:
        """
        Authentication mode.
        """
        return pulumi.get(self, "auth_mode")

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> int:
        """
        BFD desired minimal transmit interval (milliseconds).
        """
        return pulumi.get(self, "bfd_desired_min_tx")

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> int:
        """
        BFD detection multiplier.
        """
        return pulumi.get(self, "bfd_detect_mult")

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> int:
        """
        BFD required minimal receive interval (milliseconds).
        """
        return pulumi.get(self, "bfd_required_min_rx")

    @property
    @pulumi.getter
    def dst(self) -> str:
        """
        Destination prefix.
        """
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> str:
        """
        MD5 key of key ID 1.
        """
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter
    def src(self) -> str:
        """
        Source prefix.
        """
        return pulumi.get(self, "src")


@pulumi.output_type
class GetBfd6NeighborResult(dict):
    def __init__(__self__, *,
                 interface: str,
                 ip6_address: str):
        """
        :param str interface: Interface to the BFD neighbor.
        :param str ip6_address: IPv6 address of the BFD neighbor.
        """
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ip6_address", ip6_address)

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface to the BFD neighbor.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> str:
        """
        IPv6 address of the BFD neighbor.
        """
        return pulumi.get(self, "ip6_address")


@pulumi.output_type
class GetBfdMultihopTemplateResult(dict):
    def __init__(__self__, *,
                 auth_mode: str,
                 bfd_desired_min_tx: int,
                 bfd_detect_mult: int,
                 bfd_required_min_rx: int,
                 dst: str,
                 id: int,
                 md5_key: str,
                 src: str):
        """
        :param str auth_mode: Authentication mode.
        :param int bfd_desired_min_tx: BFD desired minimal transmit interval (milliseconds).
        :param int bfd_detect_mult: BFD detection multiplier.
        :param int bfd_required_min_rx: BFD required minimal receive interval (milliseconds).
        :param str dst: Destination prefix.
        :param int id: ID.
        :param str md5_key: MD5 key of key ID 1.
        :param str src: Source prefix.
        """
        pulumi.set(__self__, "auth_mode", auth_mode)
        pulumi.set(__self__, "bfd_desired_min_tx", bfd_desired_min_tx)
        pulumi.set(__self__, "bfd_detect_mult", bfd_detect_mult)
        pulumi.set(__self__, "bfd_required_min_rx", bfd_required_min_rx)
        pulumi.set(__self__, "dst", dst)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "md5_key", md5_key)
        pulumi.set(__self__, "src", src)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> str:
        """
        Authentication mode.
        """
        return pulumi.get(self, "auth_mode")

    @property
    @pulumi.getter(name="bfdDesiredMinTx")
    def bfd_desired_min_tx(self) -> int:
        """
        BFD desired minimal transmit interval (milliseconds).
        """
        return pulumi.get(self, "bfd_desired_min_tx")

    @property
    @pulumi.getter(name="bfdDetectMult")
    def bfd_detect_mult(self) -> int:
        """
        BFD detection multiplier.
        """
        return pulumi.get(self, "bfd_detect_mult")

    @property
    @pulumi.getter(name="bfdRequiredMinRx")
    def bfd_required_min_rx(self) -> int:
        """
        BFD required minimal receive interval (milliseconds).
        """
        return pulumi.get(self, "bfd_required_min_rx")

    @property
    @pulumi.getter
    def dst(self) -> str:
        """
        Destination prefix.
        """
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> str:
        """
        MD5 key of key ID 1.
        """
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter
    def src(self) -> str:
        """
        Source prefix.
        """
        return pulumi.get(self, "src")


@pulumi.output_type
class GetBfdNeighborResult(dict):
    def __init__(__self__, *,
                 interface: str,
                 ip: str):
        """
        :param str interface: Interface name.
        :param str ip: IPv4 address of the BFD neighbor.
        """
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IPv4 address of the BFD neighbor.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetBgpAdminDistanceResult(dict):
    def __init__(__self__, *,
                 distance: int,
                 id: int,
                 neighbour_prefix: str,
                 route_list: str):
        """
        :param int distance: Administrative distance to apply (1 - 255).
        :param int id: ID.
        :param str neighbour_prefix: Neighbor address prefix.
        :param str route_list: Access list of routes to apply new distance to.
        """
        pulumi.set(__self__, "distance", distance)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "neighbour_prefix", neighbour_prefix)
        pulumi.set(__self__, "route_list", route_list)

    @property
    @pulumi.getter
    def distance(self) -> int:
        """
        Administrative distance to apply (1 - 255).
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="neighbourPrefix")
    def neighbour_prefix(self) -> str:
        """
        Neighbor address prefix.
        """
        return pulumi.get(self, "neighbour_prefix")

    @property
    @pulumi.getter(name="routeList")
    def route_list(self) -> str:
        """
        Access list of routes to apply new distance to.
        """
        return pulumi.get(self, "route_list")


@pulumi.output_type
class GetBgpAggregateAddress6Result(dict):
    def __init__(__self__, *,
                 as_set: str,
                 id: int,
                 prefix6: str,
                 summary_only: str):
        """
        :param str as_set: Enable/disable generate AS set path information.
        :param int id: ID.
        :param str prefix6: Network IPv6 prefix.
        :param str summary_only: Enable/disable filter more specific routes from updates.
        """
        pulumi.set(__self__, "as_set", as_set)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix6", prefix6)
        pulumi.set(__self__, "summary_only", summary_only)

    @property
    @pulumi.getter(name="asSet")
    def as_set(self) -> str:
        """
        Enable/disable generate AS set path information.
        """
        return pulumi.get(self, "as_set")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        """
        Network IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")

    @property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> str:
        """
        Enable/disable filter more specific routes from updates.
        """
        return pulumi.get(self, "summary_only")


@pulumi.output_type
class GetBgpAggregateAddressResult(dict):
    def __init__(__self__, *,
                 as_set: str,
                 id: int,
                 prefix: str,
                 summary_only: str):
        """
        :param str as_set: Enable/disable generate AS set path information.
        :param int id: ID.
        :param str prefix: Network prefix.
        :param str summary_only: Enable/disable filter more specific routes from updates.
        """
        pulumi.set(__self__, "as_set", as_set)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "summary_only", summary_only)

    @property
    @pulumi.getter(name="asSet")
    def as_set(self) -> str:
        """
        Enable/disable generate AS set path information.
        """
        return pulumi.get(self, "as_set")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> str:
        """
        Enable/disable filter more specific routes from updates.
        """
        return pulumi.get(self, "summary_only")


@pulumi.output_type
class GetBgpConfederationPeerResult(dict):
    def __init__(__self__, *,
                 peer: str):
        """
        :param str peer: Peer ID.
        """
        pulumi.set(__self__, "peer", peer)

    @property
    @pulumi.getter
    def peer(self) -> str:
        """
        Peer ID.
        """
        return pulumi.get(self, "peer")


@pulumi.output_type
class GetBgpNeighborResult(dict):
    def __init__(__self__, *,
                 activate: str,
                 activate6: str,
                 activate_evpn: str,
                 activate_vpnv4: str,
                 activate_vpnv6: str,
                 additional_path: str,
                 additional_path6: str,
                 additional_path_vpnv4: str,
                 additional_path_vpnv6: str,
                 adv_additional_path: int,
                 adv_additional_path6: int,
                 adv_additional_path_vpnv4: int,
                 adv_additional_path_vpnv6: int,
                 advertisement_interval: int,
                 allowas_in: int,
                 allowas_in6: int,
                 allowas_in_enable: str,
                 allowas_in_enable6: str,
                 allowas_in_enable_evpn: str,
                 allowas_in_enable_vpnv4: str,
                 allowas_in_enable_vpnv6: str,
                 allowas_in_evpn: int,
                 allowas_in_vpnv4: int,
                 allowas_in_vpnv6: int,
                 as_override: str,
                 as_override6: str,
                 attribute_unchanged: str,
                 attribute_unchanged6: str,
                 attribute_unchanged_vpnv4: str,
                 attribute_unchanged_vpnv6: str,
                 auth_options: str,
                 bfd: str,
                 capability_default_originate: str,
                 capability_default_originate6: str,
                 capability_dynamic: str,
                 capability_graceful_restart: str,
                 capability_graceful_restart6: str,
                 capability_graceful_restart_evpn: str,
                 capability_graceful_restart_vpnv4: str,
                 capability_graceful_restart_vpnv6: str,
                 capability_orf: str,
                 capability_orf6: str,
                 capability_route_refresh: str,
                 conditional_advertise6s: Sequence['outputs.GetBgpNeighborConditionalAdvertise6Result'],
                 conditional_advertises: Sequence['outputs.GetBgpNeighborConditionalAdvertiseResult'],
                 connect_timer: int,
                 default_originate_routemap: str,
                 default_originate_routemap6: str,
                 description: str,
                 distribute_list_in: str,
                 distribute_list_in6: str,
                 distribute_list_in_vpnv4: str,
                 distribute_list_in_vpnv6: str,
                 distribute_list_out: str,
                 distribute_list_out6: str,
                 distribute_list_out_vpnv4: str,
                 distribute_list_out_vpnv6: str,
                 dont_capability_negotiate: str,
                 ebgp_enforce_multihop: str,
                 ebgp_multihop_ttl: int,
                 filter_list_in: str,
                 filter_list_in6: str,
                 filter_list_in_vpnv4: str,
                 filter_list_in_vpnv6: str,
                 filter_list_out: str,
                 filter_list_out6: str,
                 filter_list_out_vpnv4: str,
                 filter_list_out_vpnv6: str,
                 holdtime_timer: int,
                 interface: str,
                 ip: str,
                 keep_alive_timer: int,
                 link_down_failover: str,
                 local_as: int,
                 local_as_no_prepend: str,
                 local_as_replace_as: str,
                 maximum_prefix: int,
                 maximum_prefix6: int,
                 maximum_prefix_evpn: int,
                 maximum_prefix_threshold: int,
                 maximum_prefix_threshold6: int,
                 maximum_prefix_threshold_evpn: int,
                 maximum_prefix_threshold_vpnv4: int,
                 maximum_prefix_threshold_vpnv6: int,
                 maximum_prefix_vpnv4: int,
                 maximum_prefix_vpnv6: int,
                 maximum_prefix_warning_only: str,
                 maximum_prefix_warning_only6: str,
                 maximum_prefix_warning_only_evpn: str,
                 maximum_prefix_warning_only_vpnv4: str,
                 maximum_prefix_warning_only_vpnv6: str,
                 next_hop_self: str,
                 next_hop_self6: str,
                 next_hop_self_rr: str,
                 next_hop_self_rr6: str,
                 next_hop_self_vpnv4: str,
                 next_hop_self_vpnv6: str,
                 override_capability: str,
                 passive: str,
                 password: str,
                 prefix_list_in: str,
                 prefix_list_in6: str,
                 prefix_list_in_vpnv4: str,
                 prefix_list_in_vpnv6: str,
                 prefix_list_out: str,
                 prefix_list_out6: str,
                 prefix_list_out_vpnv4: str,
                 prefix_list_out_vpnv6: str,
                 remote_as: int,
                 remove_private_as: str,
                 remove_private_as6: str,
                 remove_private_as_evpn: str,
                 remove_private_as_vpnv4: str,
                 remove_private_as_vpnv6: str,
                 restart_time: int,
                 retain_stale_time: int,
                 route_map_in: str,
                 route_map_in6: str,
                 route_map_in_evpn: str,
                 route_map_in_vpnv4: str,
                 route_map_in_vpnv6: str,
                 route_map_out: str,
                 route_map_out6: str,
                 route_map_out6_preferable: str,
                 route_map_out_evpn: str,
                 route_map_out_preferable: str,
                 route_map_out_vpnv4: str,
                 route_map_out_vpnv4_preferable: str,
                 route_map_out_vpnv6: str,
                 route_map_out_vpnv6_preferable: str,
                 route_reflector_client: str,
                 route_reflector_client6: str,
                 route_reflector_client_evpn: str,
                 route_reflector_client_vpnv4: str,
                 route_reflector_client_vpnv6: str,
                 route_server_client: str,
                 route_server_client6: str,
                 route_server_client_evpn: str,
                 route_server_client_vpnv4: str,
                 route_server_client_vpnv6: str,
                 send_community: str,
                 send_community6: str,
                 send_community_evpn: str,
                 send_community_vpnv4: str,
                 send_community_vpnv6: str,
                 shutdown: str,
                 soft_reconfiguration: str,
                 soft_reconfiguration6: str,
                 soft_reconfiguration_evpn: str,
                 soft_reconfiguration_vpnv4: str,
                 soft_reconfiguration_vpnv6: str,
                 stale_route: str,
                 strict_capability_match: str,
                 unsuppress_map: str,
                 unsuppress_map6: str,
                 update_source: str,
                 weight: int):
        """
        :param str activate: Enable/disable address family IPv4 for this neighbor.
        :param str activate6: Enable/disable address family IPv6 for this neighbor.
        :param str activate_evpn: Enable/disable address family L2VPN EVPN for this neighbor.
        :param str activate_vpnv4: Enable/disable address family VPNv4 for this neighbor.
        :param str activate_vpnv6: Enable/disable address family VPNv6 for this neighbor.
        :param str additional_path: Enable/disable IPv4 additional-path capability.
        :param str additional_path6: Enable/disable IPv6 additional-path capability.
        :param str additional_path_vpnv4: Enable/disable VPNv4 additional-path capability.
        :param str additional_path_vpnv6: Enable/disable VPNv6 additional-path capability.
        :param int adv_additional_path: Number of IPv4 additional paths that can be advertised to this neighbor.
        :param int adv_additional_path6: Number of IPv6 additional paths that can be advertised to this neighbor.
        :param int adv_additional_path_vpnv4: Number of VPNv4 additional paths that can be advertised to this neighbor.
        :param int adv_additional_path_vpnv6: Number of VPNv6 additional paths that can be advertised to this neighbor.
        :param int advertisement_interval: Minimum interval (sec) between sending updates.
        :param int allowas_in: IPv4 The maximum number of occurrence of my AS number allowed.
        :param int allowas_in6: IPv6 The maximum number of occurrence of my AS number allowed.
        :param str allowas_in_enable: Enable/disable IPv4 Enable to allow my AS in AS path.
        :param str allowas_in_enable6: Enable/disable IPv6 Enable to allow my AS in AS path.
        :param str allowas_in_enable_evpn: Enable/disable to allow my AS in AS path for L2VPN EVPN route.
        :param str allowas_in_enable_vpnv4: Enable/disable to allow my AS in AS path for VPNv4 route.
        :param str allowas_in_enable_vpnv6: Enable/disable use of my AS in AS path for VPNv6 route.
        :param int allowas_in_evpn: The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        :param int allowas_in_vpnv4: The maximum number of occurrence of my AS number allowed for VPNv4 route.
        :param int allowas_in_vpnv6: The maximum number of occurrence of my AS number allowed for VPNv6 route.
        :param str as_override: Enable/disable replace peer AS with own AS for IPv4.
        :param str as_override6: Enable/disable replace peer AS with own AS for IPv6.
        :param str attribute_unchanged: IPv4 List of attributes that should be unchanged.
        :param str attribute_unchanged6: IPv6 List of attributes that should be unchanged.
        :param str attribute_unchanged_vpnv4: List of attributes that should be unchanged for VPNv4 route.
        :param str attribute_unchanged_vpnv6: List of attributes that should not be changed for VPNv6 route.
        :param str auth_options: Key-chain name for TCP authentication options.
        :param str bfd: Enable/disable BFD for this neighbor.
        :param str capability_default_originate: Enable/disable advertise default IPv4 route to this neighbor.
        :param str capability_default_originate6: Enable/disable advertise default IPv6 route to this neighbor.
        :param str capability_dynamic: Enable/disable advertise dynamic capability to this neighbor.
        :param str capability_graceful_restart: Enable/disable advertise IPv4 graceful restart capability to this neighbor.
        :param str capability_graceful_restart6: Enable/disable advertise IPv6 graceful restart capability to this neighbor.
        :param str capability_graceful_restart_evpn: Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor.
        :param str capability_graceful_restart_vpnv4: Enable/disable advertise VPNv4 graceful restart capability to this neighbor.
        :param str capability_graceful_restart_vpnv6: Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor.
        :param str capability_orf: Accept/Send IPv4 ORF lists to/from this neighbor.
        :param str capability_orf6: Accept/Send IPv6 ORF lists to/from this neighbor.
        :param str capability_route_refresh: Enable/disable advertise route refresh capability to this neighbor.
        :param Sequence['GetBgpNeighborConditionalAdvertise6Args'] conditional_advertise6s: IPv6 conditional advertisement. The structure of `conditional_advertise6` block is documented below.
        :param Sequence['GetBgpNeighborConditionalAdvertiseArgs'] conditional_advertises: Conditional advertisement. The structure of `conditional_advertise` block is documented below.
        :param int connect_timer: Interval (sec) for connect timer.
        :param str default_originate_routemap: Route map to specify criteria to originate IPv4 default.
        :param str default_originate_routemap6: Route map to specify criteria to originate IPv6 default.
        :param str description: Description.
        :param str distribute_list_in: Filter for IPv4 updates from this neighbor.
        :param str distribute_list_in6: Filter for IPv6 updates from this neighbor.
        :param str distribute_list_in_vpnv4: Filter for VPNv4 updates from this neighbor.
        :param str distribute_list_in_vpnv6: Filter for VPNv6 updates from this neighbor.
        :param str distribute_list_out: Filter for IPv4 updates to this neighbor.
        :param str distribute_list_out6: Filter for IPv6 updates to this neighbor.
        :param str distribute_list_out_vpnv4: Filter for VPNv4 updates to this neighbor.
        :param str distribute_list_out_vpnv6: Filter for VPNv6 updates to this neighbor.
        :param str dont_capability_negotiate: Don't negotiate capabilities with this neighbor
        :param str ebgp_enforce_multihop: Enable/disable allow multi-hop EBGP neighbors.
        :param int ebgp_multihop_ttl: EBGP multihop TTL for this peer.
        :param str filter_list_in: BGP filter for IPv4 inbound routes.
        :param str filter_list_in6: BGP filter for IPv6 inbound routes.
        :param str filter_list_in_vpnv4: BGP filter for VPNv4 inbound routes.
        :param str filter_list_in_vpnv6: BGP filter for VPNv6 inbound routes.
        :param str filter_list_out: BGP filter for IPv4 outbound routes.
        :param str filter_list_out6: BGP filter for IPv6 outbound routes.
        :param str filter_list_out_vpnv4: BGP filter for VPNv4 outbound routes.
        :param str filter_list_out_vpnv6: BGP filter for VPNv6 outbound routes.
        :param int holdtime_timer: Interval (sec) before peer considered dead.
        :param str interface: Interface which is used to leak routes to target VRF.
        :param str ip: IP/IPv6 address of neighbor.
        :param int keep_alive_timer: Keep alive timer interval (sec).
        :param str link_down_failover: Enable/disable failover upon link down.
        :param int local_as: Local AS number of neighbor.
        :param str local_as_no_prepend: Do not prepend local-as to incoming updates.
        :param str local_as_replace_as: Replace real AS with local-as in outgoing updates.
        :param int maximum_prefix: Maximum number of IPv4 prefixes to accept from this peer.
        :param int maximum_prefix6: Maximum number of IPv6 prefixes to accept from this peer.
        :param int maximum_prefix_evpn: Maximum number of L2VPN EVPN prefixes to accept from this peer.
        :param int maximum_prefix_threshold: Maximum IPv4 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold6: Maximum IPv6 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold_evpn: Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold_vpnv4: Maximum VPNv4 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold_vpnv6: Maximum VPNv6 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_vpnv4: Maximum number of VPNv4 prefixes to accept from this peer.
        :param int maximum_prefix_vpnv6: Maximum number of VPNv6 prefixes to accept from this peer.
        :param str maximum_prefix_warning_only: Enable/disable IPv4 Only give warning message when limit is exceeded.
        :param str maximum_prefix_warning_only6: Enable/disable IPv6 Only give warning message when limit is exceeded.
        :param str maximum_prefix_warning_only_evpn: Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes.
        :param str maximum_prefix_warning_only_vpnv4: Enable/disable only giving warning message when limit is exceeded for VPNv4 routes.
        :param str maximum_prefix_warning_only_vpnv6: Enable/disable warning message when limit is exceeded for VPNv6 routes.
        :param str next_hop_self: Enable/disable IPv4 next-hop calculation for this neighbor.
        :param str next_hop_self6: Enable/disable IPv6 next-hop calculation for this neighbor.
        :param str next_hop_self_rr: Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes.
        :param str next_hop_self_rr6: Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes.
        :param str next_hop_self_vpnv4: Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor.
        :param str next_hop_self_vpnv6: Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor.
        :param str override_capability: Enable/disable override result of capability negotiation.
        :param str passive: Enable/disable sending of open messages to this neighbor.
        :param str password: Password used in MD5 authentication.
        :param str prefix_list_in: IPv4 Inbound filter for updates from this neighbor.
        :param str prefix_list_in6: IPv6 Inbound filter for updates from this neighbor.
        :param str prefix_list_in_vpnv4: Inbound filter for VPNv4 updates from this neighbor.
        :param str prefix_list_in_vpnv6: Inbound filter for VPNv6 updates from this neighbor.
        :param str prefix_list_out: IPv4 Outbound filter for updates to this neighbor.
        :param str prefix_list_out6: IPv6 Outbound filter for updates to this neighbor.
        :param str prefix_list_out_vpnv4: Outbound filter for VPNv4 updates to this neighbor.
        :param str prefix_list_out_vpnv6: Outbound filter for VPNv6 updates to this neighbor.
        :param int remote_as: AS number of neighbor.
        :param str remove_private_as: Enable/disable remove private AS number from IPv4 outbound updates.
        :param str remove_private_as6: Enable/disable remove private AS number from IPv6 outbound updates.
        :param str remove_private_as_evpn: Enable/disable removing private AS number from L2VPN EVPN outbound updates.
        :param str remove_private_as_vpnv4: Enable/disable remove private AS number from VPNv4 outbound updates.
        :param str remove_private_as_vpnv6: Enable/disable to remove private AS number from VPNv6 outbound updates.
        :param int restart_time: Graceful restart delay time (sec, 0 = global default).
        :param int retain_stale_time: Time to retain stale routes.
        :param str route_map_in: IPv4 Inbound route map filter.
        :param str route_map_in6: IPv6 Inbound route map filter.
        :param str route_map_in_evpn: L2VPN EVPN inbound route map filter.
        :param str route_map_in_vpnv4: VPNv4 inbound route map filter.
        :param str route_map_in_vpnv6: VPNv6 inbound route map filter.
        :param str route_map_out: IPv4 Outbound route map filter.
        :param str route_map_out6: IPv6 Outbound route map filter.
        :param str route_map_out6_preferable: IPv6 outbound route map filter if the peer is preferred.
        :param str route_map_out_evpn: L2VPN EVPN outbound route map filter.
        :param str route_map_out_preferable: IPv4 outbound route map filter if the peer is preferred.
        :param str route_map_out_vpnv4: VPNv4 outbound route map filter.
        :param str route_map_out_vpnv4_preferable: VPNv4 outbound route map filter if the peer is preferred.
        :param str route_map_out_vpnv6: VPNv6 outbound route map filter.
        :param str route_map_out_vpnv6_preferable: VPNv6 outbound route map filter if this neighbor is preferred.
        :param str route_reflector_client: Enable/disable IPv4 AS route reflector client.
        :param str route_reflector_client6: Enable/disable IPv6 AS route reflector client.
        :param str route_reflector_client_evpn: Enable/disable L2VPN EVPN AS route reflector client for this neighbor.
        :param str route_reflector_client_vpnv4: Enable/disable VPNv4 AS route reflector client for this neighbor.
        :param str route_reflector_client_vpnv6: Enable/disable VPNv6 AS route reflector client for this neighbor.
        :param str route_server_client: Enable/disable IPv4 AS route server client.
        :param str route_server_client6: Enable/disable IPv6 AS route server client.
        :param str route_server_client_evpn: Enable/disable L2VPN EVPN AS route server client for this neighbor.
        :param str route_server_client_vpnv4: Enable/disable VPNv4 AS route server client for this neighbor.
        :param str route_server_client_vpnv6: Enable/disable VPNv6 AS route server client for this neighbor.
        :param str send_community: IPv4 Send community attribute to neighbor.
        :param str send_community6: IPv6 Send community attribute to neighbor.
        :param str send_community_evpn: Enable/disable sending community attribute to neighbor for L2VPN EVPN address family.
        :param str send_community_vpnv4: Send community attribute to neighbor for VPNv4 address family.
        :param str send_community_vpnv6: Enable/disable sending community attribute to this neighbor for VPNv6 address family.
        :param str shutdown: Enable/disable shutdown this neighbor.
        :param str soft_reconfiguration: Enable/disable allow IPv4 inbound soft reconfiguration.
        :param str soft_reconfiguration6: Enable/disable allow IPv6 inbound soft reconfiguration.
        :param str soft_reconfiguration_evpn: Enable/disable L2VPN EVPN inbound soft reconfiguration.
        :param str soft_reconfiguration_vpnv4: Enable/disable allow VPNv4 inbound soft reconfiguration.
        :param str soft_reconfiguration_vpnv6: Enable/disable VPNv6 inbound soft reconfiguration.
        :param str stale_route: Enable/disable stale route after neighbor down.
        :param str strict_capability_match: Enable/disable strict capability matching.
        :param str unsuppress_map: IPv4 Route map to selectively unsuppress suppressed routes.
        :param str unsuppress_map6: IPv6 Route map to selectively unsuppress suppressed routes.
        :param str update_source: Interface to use as source IP/IPv6 address of TCP connections.
        :param int weight: Neighbor weight.
        """
        pulumi.set(__self__, "activate", activate)
        pulumi.set(__self__, "activate6", activate6)
        pulumi.set(__self__, "activate_evpn", activate_evpn)
        pulumi.set(__self__, "activate_vpnv4", activate_vpnv4)
        pulumi.set(__self__, "activate_vpnv6", activate_vpnv6)
        pulumi.set(__self__, "additional_path", additional_path)
        pulumi.set(__self__, "additional_path6", additional_path6)
        pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        pulumi.set(__self__, "additional_path_vpnv6", additional_path_vpnv6)
        pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        pulumi.set(__self__, "adv_additional_path_vpnv4", adv_additional_path_vpnv4)
        pulumi.set(__self__, "adv_additional_path_vpnv6", adv_additional_path_vpnv6)
        pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        pulumi.set(__self__, "allowas_in", allowas_in)
        pulumi.set(__self__, "allowas_in6", allowas_in6)
        pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        pulumi.set(__self__, "allowas_in_enable_evpn", allowas_in_enable_evpn)
        pulumi.set(__self__, "allowas_in_enable_vpnv4", allowas_in_enable_vpnv4)
        pulumi.set(__self__, "allowas_in_enable_vpnv6", allowas_in_enable_vpnv6)
        pulumi.set(__self__, "allowas_in_evpn", allowas_in_evpn)
        pulumi.set(__self__, "allowas_in_vpnv4", allowas_in_vpnv4)
        pulumi.set(__self__, "allowas_in_vpnv6", allowas_in_vpnv6)
        pulumi.set(__self__, "as_override", as_override)
        pulumi.set(__self__, "as_override6", as_override6)
        pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        pulumi.set(__self__, "attribute_unchanged_vpnv4", attribute_unchanged_vpnv4)
        pulumi.set(__self__, "attribute_unchanged_vpnv6", attribute_unchanged_vpnv6)
        pulumi.set(__self__, "auth_options", auth_options)
        pulumi.set(__self__, "bfd", bfd)
        pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        pulumi.set(__self__, "capability_graceful_restart_evpn", capability_graceful_restart_evpn)
        pulumi.set(__self__, "capability_graceful_restart_vpnv4", capability_graceful_restart_vpnv4)
        pulumi.set(__self__, "capability_graceful_restart_vpnv6", capability_graceful_restart_vpnv6)
        pulumi.set(__self__, "capability_orf", capability_orf)
        pulumi.set(__self__, "capability_orf6", capability_orf6)
        pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        pulumi.set(__self__, "conditional_advertise6s", conditional_advertise6s)
        pulumi.set(__self__, "conditional_advertises", conditional_advertises)
        pulumi.set(__self__, "connect_timer", connect_timer)
        pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        pulumi.set(__self__, "distribute_list_in_vpnv4", distribute_list_in_vpnv4)
        pulumi.set(__self__, "distribute_list_in_vpnv6", distribute_list_in_vpnv6)
        pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        pulumi.set(__self__, "distribute_list_out_vpnv4", distribute_list_out_vpnv4)
        pulumi.set(__self__, "distribute_list_out_vpnv6", distribute_list_out_vpnv6)
        pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        pulumi.set(__self__, "filter_list_in", filter_list_in)
        pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        pulumi.set(__self__, "filter_list_in_vpnv4", filter_list_in_vpnv4)
        pulumi.set(__self__, "filter_list_in_vpnv6", filter_list_in_vpnv6)
        pulumi.set(__self__, "filter_list_out", filter_list_out)
        pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        pulumi.set(__self__, "filter_list_out_vpnv4", filter_list_out_vpnv4)
        pulumi.set(__self__, "filter_list_out_vpnv6", filter_list_out_vpnv6)
        pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        pulumi.set(__self__, "link_down_failover", link_down_failover)
        pulumi.set(__self__, "local_as", local_as)
        pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        pulumi.set(__self__, "maximum_prefix_evpn", maximum_prefix_evpn)
        pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        pulumi.set(__self__, "maximum_prefix_threshold_evpn", maximum_prefix_threshold_evpn)
        pulumi.set(__self__, "maximum_prefix_threshold_vpnv4", maximum_prefix_threshold_vpnv4)
        pulumi.set(__self__, "maximum_prefix_threshold_vpnv6", maximum_prefix_threshold_vpnv6)
        pulumi.set(__self__, "maximum_prefix_vpnv4", maximum_prefix_vpnv4)
        pulumi.set(__self__, "maximum_prefix_vpnv6", maximum_prefix_vpnv6)
        pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        pulumi.set(__self__, "maximum_prefix_warning_only_evpn", maximum_prefix_warning_only_evpn)
        pulumi.set(__self__, "maximum_prefix_warning_only_vpnv4", maximum_prefix_warning_only_vpnv4)
        pulumi.set(__self__, "maximum_prefix_warning_only_vpnv6", maximum_prefix_warning_only_vpnv6)
        pulumi.set(__self__, "next_hop_self", next_hop_self)
        pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        pulumi.set(__self__, "next_hop_self_vpnv4", next_hop_self_vpnv4)
        pulumi.set(__self__, "next_hop_self_vpnv6", next_hop_self_vpnv6)
        pulumi.set(__self__, "override_capability", override_capability)
        pulumi.set(__self__, "passive", passive)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        pulumi.set(__self__, "prefix_list_in_vpnv4", prefix_list_in_vpnv4)
        pulumi.set(__self__, "prefix_list_in_vpnv6", prefix_list_in_vpnv6)
        pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        pulumi.set(__self__, "prefix_list_out_vpnv4", prefix_list_out_vpnv4)
        pulumi.set(__self__, "prefix_list_out_vpnv6", prefix_list_out_vpnv6)
        pulumi.set(__self__, "remote_as", remote_as)
        pulumi.set(__self__, "remove_private_as", remove_private_as)
        pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        pulumi.set(__self__, "remove_private_as_evpn", remove_private_as_evpn)
        pulumi.set(__self__, "remove_private_as_vpnv4", remove_private_as_vpnv4)
        pulumi.set(__self__, "remove_private_as_vpnv6", remove_private_as_vpnv6)
        pulumi.set(__self__, "restart_time", restart_time)
        pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        pulumi.set(__self__, "route_map_in", route_map_in)
        pulumi.set(__self__, "route_map_in6", route_map_in6)
        pulumi.set(__self__, "route_map_in_evpn", route_map_in_evpn)
        pulumi.set(__self__, "route_map_in_vpnv4", route_map_in_vpnv4)
        pulumi.set(__self__, "route_map_in_vpnv6", route_map_in_vpnv6)
        pulumi.set(__self__, "route_map_out", route_map_out)
        pulumi.set(__self__, "route_map_out6", route_map_out6)
        pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        pulumi.set(__self__, "route_map_out_evpn", route_map_out_evpn)
        pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        pulumi.set(__self__, "route_map_out_vpnv4", route_map_out_vpnv4)
        pulumi.set(__self__, "route_map_out_vpnv4_preferable", route_map_out_vpnv4_preferable)
        pulumi.set(__self__, "route_map_out_vpnv6", route_map_out_vpnv6)
        pulumi.set(__self__, "route_map_out_vpnv6_preferable", route_map_out_vpnv6_preferable)
        pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        pulumi.set(__self__, "route_reflector_client_evpn", route_reflector_client_evpn)
        pulumi.set(__self__, "route_reflector_client_vpnv4", route_reflector_client_vpnv4)
        pulumi.set(__self__, "route_reflector_client_vpnv6", route_reflector_client_vpnv6)
        pulumi.set(__self__, "route_server_client", route_server_client)
        pulumi.set(__self__, "route_server_client6", route_server_client6)
        pulumi.set(__self__, "route_server_client_evpn", route_server_client_evpn)
        pulumi.set(__self__, "route_server_client_vpnv4", route_server_client_vpnv4)
        pulumi.set(__self__, "route_server_client_vpnv6", route_server_client_vpnv6)
        pulumi.set(__self__, "send_community", send_community)
        pulumi.set(__self__, "send_community6", send_community6)
        pulumi.set(__self__, "send_community_evpn", send_community_evpn)
        pulumi.set(__self__, "send_community_vpnv4", send_community_vpnv4)
        pulumi.set(__self__, "send_community_vpnv6", send_community_vpnv6)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        pulumi.set(__self__, "soft_reconfiguration_evpn", soft_reconfiguration_evpn)
        pulumi.set(__self__, "soft_reconfiguration_vpnv4", soft_reconfiguration_vpnv4)
        pulumi.set(__self__, "soft_reconfiguration_vpnv6", soft_reconfiguration_vpnv6)
        pulumi.set(__self__, "stale_route", stale_route)
        pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        pulumi.set(__self__, "update_source", update_source)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activate(self) -> str:
        """
        Enable/disable address family IPv4 for this neighbor.
        """
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter
    def activate6(self) -> str:
        """
        Enable/disable address family IPv6 for this neighbor.
        """
        return pulumi.get(self, "activate6")

    @property
    @pulumi.getter(name="activateEvpn")
    def activate_evpn(self) -> str:
        """
        Enable/disable address family L2VPN EVPN for this neighbor.
        """
        return pulumi.get(self, "activate_evpn")

    @property
    @pulumi.getter(name="activateVpnv4")
    def activate_vpnv4(self) -> str:
        """
        Enable/disable address family VPNv4 for this neighbor.
        """
        return pulumi.get(self, "activate_vpnv4")

    @property
    @pulumi.getter(name="activateVpnv6")
    def activate_vpnv6(self) -> str:
        """
        Enable/disable address family VPNv6 for this neighbor.
        """
        return pulumi.get(self, "activate_vpnv6")

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> str:
        """
        Enable/disable IPv4 additional-path capability.
        """
        return pulumi.get(self, "additional_path")

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> str:
        """
        Enable/disable IPv6 additional-path capability.
        """
        return pulumi.get(self, "additional_path6")

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> str:
        """
        Enable/disable VPNv4 additional-path capability.
        """
        return pulumi.get(self, "additional_path_vpnv4")

    @property
    @pulumi.getter(name="additionalPathVpnv6")
    def additional_path_vpnv6(self) -> str:
        """
        Enable/disable VPNv6 additional-path capability.
        """
        return pulumi.get(self, "additional_path_vpnv6")

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> int:
        """
        Number of IPv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path")

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> int:
        """
        Number of IPv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path6")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv4")
    def adv_additional_path_vpnv4(self) -> int:
        """
        Number of VPNv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv4")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv6")
    def adv_additional_path_vpnv6(self) -> int:
        """
        Number of VPNv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv6")

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> int:
        """
        Minimum interval (sec) between sending updates.
        """
        return pulumi.get(self, "advertisement_interval")

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> int:
        """
        IPv4 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in")

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> int:
        """
        IPv6 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in6")

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> str:
        """
        Enable/disable IPv4 Enable to allow my AS in AS path.
        """
        return pulumi.get(self, "allowas_in_enable")

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> str:
        """
        Enable/disable IPv6 Enable to allow my AS in AS path.
        """
        return pulumi.get(self, "allowas_in_enable6")

    @property
    @pulumi.getter(name="allowasInEnableEvpn")
    def allowas_in_enable_evpn(self) -> str:
        """
        Enable/disable to allow my AS in AS path for L2VPN EVPN route.
        """
        return pulumi.get(self, "allowas_in_enable_evpn")

    @property
    @pulumi.getter(name="allowasInEnableVpnv4")
    def allowas_in_enable_vpnv4(self) -> str:
        """
        Enable/disable to allow my AS in AS path for VPNv4 route.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv4")

    @property
    @pulumi.getter(name="allowasInEnableVpnv6")
    def allowas_in_enable_vpnv6(self) -> str:
        """
        Enable/disable use of my AS in AS path for VPNv6 route.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv6")

    @property
    @pulumi.getter(name="allowasInEvpn")
    def allowas_in_evpn(self) -> int:
        """
        The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        """
        return pulumi.get(self, "allowas_in_evpn")

    @property
    @pulumi.getter(name="allowasInVpnv4")
    def allowas_in_vpnv4(self) -> int:
        """
        The maximum number of occurrence of my AS number allowed for VPNv4 route.
        """
        return pulumi.get(self, "allowas_in_vpnv4")

    @property
    @pulumi.getter(name="allowasInVpnv6")
    def allowas_in_vpnv6(self) -> int:
        """
        The maximum number of occurrence of my AS number allowed for VPNv6 route.
        """
        return pulumi.get(self, "allowas_in_vpnv6")

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> str:
        """
        Enable/disable replace peer AS with own AS for IPv4.
        """
        return pulumi.get(self, "as_override")

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> str:
        """
        Enable/disable replace peer AS with own AS for IPv6.
        """
        return pulumi.get(self, "as_override6")

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> str:
        """
        IPv4 List of attributes that should be unchanged.
        """
        return pulumi.get(self, "attribute_unchanged")

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> str:
        """
        IPv6 List of attributes that should be unchanged.
        """
        return pulumi.get(self, "attribute_unchanged6")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv4")
    def attribute_unchanged_vpnv4(self) -> str:
        """
        List of attributes that should be unchanged for VPNv4 route.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv4")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv6")
    def attribute_unchanged_vpnv6(self) -> str:
        """
        List of attributes that should not be changed for VPNv6 route.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv6")

    @property
    @pulumi.getter(name="authOptions")
    def auth_options(self) -> str:
        """
        Key-chain name for TCP authentication options.
        """
        return pulumi.get(self, "auth_options")

    @property
    @pulumi.getter
    def bfd(self) -> str:
        """
        Enable/disable BFD for this neighbor.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> str:
        """
        Enable/disable advertise default IPv4 route to this neighbor.
        """
        return pulumi.get(self, "capability_default_originate")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> str:
        """
        Enable/disable advertise default IPv6 route to this neighbor.
        """
        return pulumi.get(self, "capability_default_originate6")

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> str:
        """
        Enable/disable advertise dynamic capability to this neighbor.
        """
        return pulumi.get(self, "capability_dynamic")

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> str:
        """
        Enable/disable advertise IPv4 graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart")

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> str:
        """
        Enable/disable advertise IPv6 graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart6")

    @property
    @pulumi.getter(name="capabilityGracefulRestartEvpn")
    def capability_graceful_restart_evpn(self) -> str:
        """
        Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart_evpn")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv4")
    def capability_graceful_restart_vpnv4(self) -> str:
        """
        Enable/disable advertise VPNv4 graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv4")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv6")
    def capability_graceful_restart_vpnv6(self) -> str:
        """
        Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv6")

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> str:
        """
        Accept/Send IPv4 ORF lists to/from this neighbor.
        """
        return pulumi.get(self, "capability_orf")

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> str:
        """
        Accept/Send IPv6 ORF lists to/from this neighbor.
        """
        return pulumi.get(self, "capability_orf6")

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> str:
        """
        Enable/disable advertise route refresh capability to this neighbor.
        """
        return pulumi.get(self, "capability_route_refresh")

    @property
    @pulumi.getter(name="conditionalAdvertise6s")
    def conditional_advertise6s(self) -> Sequence['outputs.GetBgpNeighborConditionalAdvertise6Result']:
        """
        IPv6 conditional advertisement. The structure of `conditional_advertise6` block is documented below.
        """
        return pulumi.get(self, "conditional_advertise6s")

    @property
    @pulumi.getter(name="conditionalAdvertises")
    def conditional_advertises(self) -> Sequence['outputs.GetBgpNeighborConditionalAdvertiseResult']:
        """
        Conditional advertisement. The structure of `conditional_advertise` block is documented below.
        """
        return pulumi.get(self, "conditional_advertises")

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> int:
        """
        Interval (sec) for connect timer.
        """
        return pulumi.get(self, "connect_timer")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> str:
        """
        Route map to specify criteria to originate IPv4 default.
        """
        return pulumi.get(self, "default_originate_routemap")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> str:
        """
        Route map to specify criteria to originate IPv6 default.
        """
        return pulumi.get(self, "default_originate_routemap6")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> str:
        """
        Filter for IPv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in")

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> str:
        """
        Filter for IPv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in6")

    @property
    @pulumi.getter(name="distributeListInVpnv4")
    def distribute_list_in_vpnv4(self) -> str:
        """
        Filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv4")

    @property
    @pulumi.getter(name="distributeListInVpnv6")
    def distribute_list_in_vpnv6(self) -> str:
        """
        Filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv6")

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> str:
        """
        Filter for IPv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out")

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> str:
        """
        Filter for IPv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out6")

    @property
    @pulumi.getter(name="distributeListOutVpnv4")
    def distribute_list_out_vpnv4(self) -> str:
        """
        Filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv4")

    @property
    @pulumi.getter(name="distributeListOutVpnv6")
    def distribute_list_out_vpnv6(self) -> str:
        """
        Filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv6")

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> str:
        """
        Don't negotiate capabilities with this neighbor
        """
        return pulumi.get(self, "dont_capability_negotiate")

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> str:
        """
        Enable/disable allow multi-hop EBGP neighbors.
        """
        return pulumi.get(self, "ebgp_enforce_multihop")

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> int:
        """
        EBGP multihop TTL for this peer.
        """
        return pulumi.get(self, "ebgp_multihop_ttl")

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> str:
        """
        BGP filter for IPv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in")

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> str:
        """
        BGP filter for IPv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in6")

    @property
    @pulumi.getter(name="filterListInVpnv4")
    def filter_list_in_vpnv4(self) -> str:
        """
        BGP filter for VPNv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv4")

    @property
    @pulumi.getter(name="filterListInVpnv6")
    def filter_list_in_vpnv6(self) -> str:
        """
        BGP filter for VPNv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv6")

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> str:
        """
        BGP filter for IPv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out")

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> str:
        """
        BGP filter for IPv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out6")

    @property
    @pulumi.getter(name="filterListOutVpnv4")
    def filter_list_out_vpnv4(self) -> str:
        """
        BGP filter for VPNv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv4")

    @property
    @pulumi.getter(name="filterListOutVpnv6")
    def filter_list_out_vpnv6(self) -> str:
        """
        BGP filter for VPNv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv6")

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> int:
        """
        Interval (sec) before peer considered dead.
        """
        return pulumi.get(self, "holdtime_timer")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface which is used to leak routes to target VRF.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP/IPv6 address of neighbor.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> int:
        """
        Keep alive timer interval (sec).
        """
        return pulumi.get(self, "keep_alive_timer")

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> str:
        """
        Enable/disable failover upon link down.
        """
        return pulumi.get(self, "link_down_failover")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> int:
        """
        Local AS number of neighbor.
        """
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> str:
        """
        Do not prepend local-as to incoming updates.
        """
        return pulumi.get(self, "local_as_no_prepend")

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> str:
        """
        Replace real AS with local-as in outgoing updates.
        """
        return pulumi.get(self, "local_as_replace_as")

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> int:
        """
        Maximum number of IPv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix")

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> int:
        """
        Maximum number of IPv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix6")

    @property
    @pulumi.getter(name="maximumPrefixEvpn")
    def maximum_prefix_evpn(self) -> int:
        """
        Maximum number of L2VPN EVPN prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> int:
        """
        Maximum IPv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold")

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> int:
        """
        Maximum IPv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold6")

    @property
    @pulumi.getter(name="maximumPrefixThresholdEvpn")
    def maximum_prefix_threshold_evpn(self) -> int:
        """
        Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv4")
    def maximum_prefix_threshold_vpnv4(self) -> int:
        """
        Maximum VPNv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv6")
    def maximum_prefix_threshold_vpnv6(self) -> int:
        """
        Maximum VPNv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv6")

    @property
    @pulumi.getter(name="maximumPrefixVpnv4")
    def maximum_prefix_vpnv4(self) -> int:
        """
        Maximum number of VPNv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixVpnv6")
    def maximum_prefix_vpnv6(self) -> int:
        """
        Maximum number of VPNv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> str:
        """
        Enable/disable IPv4 Only give warning message when limit is exceeded.
        """
        return pulumi.get(self, "maximum_prefix_warning_only")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> str:
        """
        Enable/disable IPv6 Only give warning message when limit is exceeded.
        """
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyEvpn")
    def maximum_prefix_warning_only_evpn(self) -> str:
        """
        Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_evpn")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv4")
    def maximum_prefix_warning_only_vpnv4(self) -> str:
        """
        Enable/disable only giving warning message when limit is exceeded for VPNv4 routes.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv6")
    def maximum_prefix_warning_only_vpnv6(self) -> str:
        """
        Enable/disable warning message when limit is exceeded for VPNv6 routes.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv6")

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> str:
        """
        Enable/disable IPv4 next-hop calculation for this neighbor.
        """
        return pulumi.get(self, "next_hop_self")

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> str:
        """
        Enable/disable IPv6 next-hop calculation for this neighbor.
        """
        return pulumi.get(self, "next_hop_self6")

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> str:
        """
        Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes.
        """
        return pulumi.get(self, "next_hop_self_rr")

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> str:
        """
        Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes.
        """
        return pulumi.get(self, "next_hop_self_rr6")

    @property
    @pulumi.getter(name="nextHopSelfVpnv4")
    def next_hop_self_vpnv4(self) -> str:
        """
        Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor.
        """
        return pulumi.get(self, "next_hop_self_vpnv4")

    @property
    @pulumi.getter(name="nextHopSelfVpnv6")
    def next_hop_self_vpnv6(self) -> str:
        """
        Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor.
        """
        return pulumi.get(self, "next_hop_self_vpnv6")

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> str:
        """
        Enable/disable override result of capability negotiation.
        """
        return pulumi.get(self, "override_capability")

    @property
    @pulumi.getter
    def passive(self) -> str:
        """
        Enable/disable sending of open messages to this neighbor.
        """
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password used in MD5 authentication.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> str:
        """
        IPv4 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in")

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> str:
        """
        IPv6 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in6")

    @property
    @pulumi.getter(name="prefixListInVpnv4")
    def prefix_list_in_vpnv4(self) -> str:
        """
        Inbound filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv4")

    @property
    @pulumi.getter(name="prefixListInVpnv6")
    def prefix_list_in_vpnv6(self) -> str:
        """
        Inbound filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv6")

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> str:
        """
        IPv4 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out")

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> str:
        """
        IPv6 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out6")

    @property
    @pulumi.getter(name="prefixListOutVpnv4")
    def prefix_list_out_vpnv4(self) -> str:
        """
        Outbound filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv4")

    @property
    @pulumi.getter(name="prefixListOutVpnv6")
    def prefix_list_out_vpnv6(self) -> str:
        """
        Outbound filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv6")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> int:
        """
        AS number of neighbor.
        """
        return pulumi.get(self, "remote_as")

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> str:
        """
        Enable/disable remove private AS number from IPv4 outbound updates.
        """
        return pulumi.get(self, "remove_private_as")

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> str:
        """
        Enable/disable remove private AS number from IPv6 outbound updates.
        """
        return pulumi.get(self, "remove_private_as6")

    @property
    @pulumi.getter(name="removePrivateAsEvpn")
    def remove_private_as_evpn(self) -> str:
        """
        Enable/disable removing private AS number from L2VPN EVPN outbound updates.
        """
        return pulumi.get(self, "remove_private_as_evpn")

    @property
    @pulumi.getter(name="removePrivateAsVpnv4")
    def remove_private_as_vpnv4(self) -> str:
        """
        Enable/disable remove private AS number from VPNv4 outbound updates.
        """
        return pulumi.get(self, "remove_private_as_vpnv4")

    @property
    @pulumi.getter(name="removePrivateAsVpnv6")
    def remove_private_as_vpnv6(self) -> str:
        """
        Enable/disable to remove private AS number from VPNv6 outbound updates.
        """
        return pulumi.get(self, "remove_private_as_vpnv6")

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> int:
        """
        Graceful restart delay time (sec, 0 = global default).
        """
        return pulumi.get(self, "restart_time")

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> int:
        """
        Time to retain stale routes.
        """
        return pulumi.get(self, "retain_stale_time")

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> str:
        """
        IPv4 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in")

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> str:
        """
        IPv6 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in6")

    @property
    @pulumi.getter(name="routeMapInEvpn")
    def route_map_in_evpn(self) -> str:
        """
        L2VPN EVPN inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_evpn")

    @property
    @pulumi.getter(name="routeMapInVpnv4")
    def route_map_in_vpnv4(self) -> str:
        """
        VPNv4 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv4")

    @property
    @pulumi.getter(name="routeMapInVpnv6")
    def route_map_in_vpnv6(self) -> str:
        """
        VPNv6 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv6")

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> str:
        """
        IPv4 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out")

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> str:
        """
        IPv6 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out6")

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> str:
        """
        IPv6 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out6_preferable")

    @property
    @pulumi.getter(name="routeMapOutEvpn")
    def route_map_out_evpn(self) -> str:
        """
        L2VPN EVPN outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_evpn")

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> str:
        """
        IPv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv4")
    def route_map_out_vpnv4(self) -> str:
        """
        VPNv4 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv4")

    @property
    @pulumi.getter(name="routeMapOutVpnv4Preferable")
    def route_map_out_vpnv4_preferable(self) -> str:
        """
        VPNv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv4_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv6")
    def route_map_out_vpnv6(self) -> str:
        """
        VPNv6 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv6")

    @property
    @pulumi.getter(name="routeMapOutVpnv6Preferable")
    def route_map_out_vpnv6_preferable(self) -> str:
        """
        VPNv6 outbound route map filter if this neighbor is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv6_preferable")

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> str:
        """
        Enable/disable IPv4 AS route reflector client.
        """
        return pulumi.get(self, "route_reflector_client")

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> str:
        """
        Enable/disable IPv6 AS route reflector client.
        """
        return pulumi.get(self, "route_reflector_client6")

    @property
    @pulumi.getter(name="routeReflectorClientEvpn")
    def route_reflector_client_evpn(self) -> str:
        """
        Enable/disable L2VPN EVPN AS route reflector client for this neighbor.
        """
        return pulumi.get(self, "route_reflector_client_evpn")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv4")
    def route_reflector_client_vpnv4(self) -> str:
        """
        Enable/disable VPNv4 AS route reflector client for this neighbor.
        """
        return pulumi.get(self, "route_reflector_client_vpnv4")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv6")
    def route_reflector_client_vpnv6(self) -> str:
        """
        Enable/disable VPNv6 AS route reflector client for this neighbor.
        """
        return pulumi.get(self, "route_reflector_client_vpnv6")

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> str:
        """
        Enable/disable IPv4 AS route server client.
        """
        return pulumi.get(self, "route_server_client")

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> str:
        """
        Enable/disable IPv6 AS route server client.
        """
        return pulumi.get(self, "route_server_client6")

    @property
    @pulumi.getter(name="routeServerClientEvpn")
    def route_server_client_evpn(self) -> str:
        """
        Enable/disable L2VPN EVPN AS route server client for this neighbor.
        """
        return pulumi.get(self, "route_server_client_evpn")

    @property
    @pulumi.getter(name="routeServerClientVpnv4")
    def route_server_client_vpnv4(self) -> str:
        """
        Enable/disable VPNv4 AS route server client for this neighbor.
        """
        return pulumi.get(self, "route_server_client_vpnv4")

    @property
    @pulumi.getter(name="routeServerClientVpnv6")
    def route_server_client_vpnv6(self) -> str:
        """
        Enable/disable VPNv6 AS route server client for this neighbor.
        """
        return pulumi.get(self, "route_server_client_vpnv6")

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> str:
        """
        IPv4 Send community attribute to neighbor.
        """
        return pulumi.get(self, "send_community")

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> str:
        """
        IPv6 Send community attribute to neighbor.
        """
        return pulumi.get(self, "send_community6")

    @property
    @pulumi.getter(name="sendCommunityEvpn")
    def send_community_evpn(self) -> str:
        """
        Enable/disable sending community attribute to neighbor for L2VPN EVPN address family.
        """
        return pulumi.get(self, "send_community_evpn")

    @property
    @pulumi.getter(name="sendCommunityVpnv4")
    def send_community_vpnv4(self) -> str:
        """
        Send community attribute to neighbor for VPNv4 address family.
        """
        return pulumi.get(self, "send_community_vpnv4")

    @property
    @pulumi.getter(name="sendCommunityVpnv6")
    def send_community_vpnv6(self) -> str:
        """
        Enable/disable sending community attribute to this neighbor for VPNv6 address family.
        """
        return pulumi.get(self, "send_community_vpnv6")

    @property
    @pulumi.getter
    def shutdown(self) -> str:
        """
        Enable/disable shutdown this neighbor.
        """
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> str:
        """
        Enable/disable allow IPv4 inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration")

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> str:
        """
        Enable/disable allow IPv6 inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration6")

    @property
    @pulumi.getter(name="softReconfigurationEvpn")
    def soft_reconfiguration_evpn(self) -> str:
        """
        Enable/disable L2VPN EVPN inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration_evpn")

    @property
    @pulumi.getter(name="softReconfigurationVpnv4")
    def soft_reconfiguration_vpnv4(self) -> str:
        """
        Enable/disable allow VPNv4 inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv4")

    @property
    @pulumi.getter(name="softReconfigurationVpnv6")
    def soft_reconfiguration_vpnv6(self) -> str:
        """
        Enable/disable VPNv6 inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv6")

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> str:
        """
        Enable/disable stale route after neighbor down.
        """
        return pulumi.get(self, "stale_route")

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> str:
        """
        Enable/disable strict capability matching.
        """
        return pulumi.get(self, "strict_capability_match")

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> str:
        """
        IPv4 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map")

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> str:
        """
        IPv6 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map6")

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> str:
        """
        Interface to use as source IP/IPv6 address of TCP connections.
        """
        return pulumi.get(self, "update_source")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Neighbor weight.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetBgpNeighborConditionalAdvertise6Result(dict):
    def __init__(__self__, *,
                 advertise_routemap: str,
                 condition_routemap: str,
                 condition_type: str):
        """
        :param str advertise_routemap: Name of advertising route map.
        :param str condition_routemap: Name of condition route map.
        :param str condition_type: Type of condition.
        """
        pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        pulumi.set(__self__, "condition_routemap", condition_routemap)
        pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> str:
        """
        Name of advertising route map.
        """
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> str:
        """
        Name of condition route map.
        """
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        """
        Type of condition.
        """
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class GetBgpNeighborConditionalAdvertiseResult(dict):
    def __init__(__self__, *,
                 advertise_routemap: str,
                 condition_routemap: str,
                 condition_type: str):
        """
        :param str advertise_routemap: Name of advertising route map.
        :param str condition_routemap: Name of condition route map.
        :param str condition_type: Type of condition.
        """
        pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        pulumi.set(__self__, "condition_routemap", condition_routemap)
        pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> str:
        """
        Name of advertising route map.
        """
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> str:
        """
        Name of condition route map.
        """
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        """
        Type of condition.
        """
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class GetBgpNeighborGroupResult(dict):
    def __init__(__self__, *,
                 activate: str,
                 activate6: str,
                 activate_evpn: str,
                 activate_vpnv4: str,
                 activate_vpnv6: str,
                 additional_path: str,
                 additional_path6: str,
                 additional_path_vpnv4: str,
                 additional_path_vpnv6: str,
                 adv_additional_path: int,
                 adv_additional_path6: int,
                 adv_additional_path_vpnv4: int,
                 adv_additional_path_vpnv6: int,
                 advertisement_interval: int,
                 allowas_in: int,
                 allowas_in6: int,
                 allowas_in_enable: str,
                 allowas_in_enable6: str,
                 allowas_in_enable_evpn: str,
                 allowas_in_enable_vpnv4: str,
                 allowas_in_enable_vpnv6: str,
                 allowas_in_evpn: int,
                 allowas_in_vpnv4: int,
                 allowas_in_vpnv6: int,
                 as_override: str,
                 as_override6: str,
                 attribute_unchanged: str,
                 attribute_unchanged6: str,
                 attribute_unchanged_vpnv4: str,
                 attribute_unchanged_vpnv6: str,
                 auth_options: str,
                 bfd: str,
                 capability_default_originate: str,
                 capability_default_originate6: str,
                 capability_dynamic: str,
                 capability_graceful_restart: str,
                 capability_graceful_restart6: str,
                 capability_graceful_restart_evpn: str,
                 capability_graceful_restart_vpnv4: str,
                 capability_graceful_restart_vpnv6: str,
                 capability_orf: str,
                 capability_orf6: str,
                 capability_route_refresh: str,
                 connect_timer: int,
                 default_originate_routemap: str,
                 default_originate_routemap6: str,
                 description: str,
                 distribute_list_in: str,
                 distribute_list_in6: str,
                 distribute_list_in_vpnv4: str,
                 distribute_list_in_vpnv6: str,
                 distribute_list_out: str,
                 distribute_list_out6: str,
                 distribute_list_out_vpnv4: str,
                 distribute_list_out_vpnv6: str,
                 dont_capability_negotiate: str,
                 ebgp_enforce_multihop: str,
                 ebgp_multihop_ttl: int,
                 filter_list_in: str,
                 filter_list_in6: str,
                 filter_list_in_vpnv4: str,
                 filter_list_in_vpnv6: str,
                 filter_list_out: str,
                 filter_list_out6: str,
                 filter_list_out_vpnv4: str,
                 filter_list_out_vpnv6: str,
                 holdtime_timer: int,
                 interface: str,
                 keep_alive_timer: int,
                 link_down_failover: str,
                 local_as: int,
                 local_as_no_prepend: str,
                 local_as_replace_as: str,
                 maximum_prefix: int,
                 maximum_prefix6: int,
                 maximum_prefix_evpn: int,
                 maximum_prefix_threshold: int,
                 maximum_prefix_threshold6: int,
                 maximum_prefix_threshold_evpn: int,
                 maximum_prefix_threshold_vpnv4: int,
                 maximum_prefix_threshold_vpnv6: int,
                 maximum_prefix_vpnv4: int,
                 maximum_prefix_vpnv6: int,
                 maximum_prefix_warning_only: str,
                 maximum_prefix_warning_only6: str,
                 maximum_prefix_warning_only_evpn: str,
                 maximum_prefix_warning_only_vpnv4: str,
                 maximum_prefix_warning_only_vpnv6: str,
                 name: str,
                 next_hop_self: str,
                 next_hop_self6: str,
                 next_hop_self_rr: str,
                 next_hop_self_rr6: str,
                 next_hop_self_vpnv4: str,
                 next_hop_self_vpnv6: str,
                 override_capability: str,
                 passive: str,
                 password: str,
                 prefix_list_in: str,
                 prefix_list_in6: str,
                 prefix_list_in_vpnv4: str,
                 prefix_list_in_vpnv6: str,
                 prefix_list_out: str,
                 prefix_list_out6: str,
                 prefix_list_out_vpnv4: str,
                 prefix_list_out_vpnv6: str,
                 remote_as: int,
                 remove_private_as: str,
                 remove_private_as6: str,
                 remove_private_as_evpn: str,
                 remove_private_as_vpnv4: str,
                 remove_private_as_vpnv6: str,
                 restart_time: int,
                 retain_stale_time: int,
                 route_map_in: str,
                 route_map_in6: str,
                 route_map_in_evpn: str,
                 route_map_in_vpnv4: str,
                 route_map_in_vpnv6: str,
                 route_map_out: str,
                 route_map_out6: str,
                 route_map_out6_preferable: str,
                 route_map_out_evpn: str,
                 route_map_out_preferable: str,
                 route_map_out_vpnv4: str,
                 route_map_out_vpnv4_preferable: str,
                 route_map_out_vpnv6: str,
                 route_map_out_vpnv6_preferable: str,
                 route_reflector_client: str,
                 route_reflector_client6: str,
                 route_reflector_client_evpn: str,
                 route_reflector_client_vpnv4: str,
                 route_reflector_client_vpnv6: str,
                 route_server_client: str,
                 route_server_client6: str,
                 route_server_client_evpn: str,
                 route_server_client_vpnv4: str,
                 route_server_client_vpnv6: str,
                 send_community: str,
                 send_community6: str,
                 send_community_evpn: str,
                 send_community_vpnv4: str,
                 send_community_vpnv6: str,
                 shutdown: str,
                 soft_reconfiguration: str,
                 soft_reconfiguration6: str,
                 soft_reconfiguration_evpn: str,
                 soft_reconfiguration_vpnv4: str,
                 soft_reconfiguration_vpnv6: str,
                 stale_route: str,
                 strict_capability_match: str,
                 unsuppress_map: str,
                 unsuppress_map6: str,
                 update_source: str,
                 weight: int):
        """
        :param str activate: Enable/disable address family IPv4 for this neighbor.
        :param str activate6: Enable/disable address family IPv6 for this neighbor.
        :param str activate_evpn: Enable/disable address family L2VPN EVPN for this neighbor.
        :param str activate_vpnv4: Enable/disable address family VPNv4 for this neighbor.
        :param str activate_vpnv6: Enable/disable address family VPNv6 for this neighbor.
        :param str additional_path: Enable/disable IPv4 additional-path capability.
        :param str additional_path6: Enable/disable IPv6 additional-path capability.
        :param str additional_path_vpnv4: Enable/disable VPNv4 additional-path capability.
        :param str additional_path_vpnv6: Enable/disable VPNv6 additional-path capability.
        :param int adv_additional_path: Number of IPv4 additional paths that can be advertised to this neighbor.
        :param int adv_additional_path6: Number of IPv6 additional paths that can be advertised to this neighbor.
        :param int adv_additional_path_vpnv4: Number of VPNv4 additional paths that can be advertised to this neighbor.
        :param int adv_additional_path_vpnv6: Number of VPNv6 additional paths that can be advertised to this neighbor.
        :param int advertisement_interval: Minimum interval (sec) between sending updates.
        :param int allowas_in: IPv4 The maximum number of occurrence of my AS number allowed.
        :param int allowas_in6: IPv6 The maximum number of occurrence of my AS number allowed.
        :param str allowas_in_enable: Enable/disable IPv4 Enable to allow my AS in AS path.
        :param str allowas_in_enable6: Enable/disable IPv6 Enable to allow my AS in AS path.
        :param str allowas_in_enable_evpn: Enable/disable to allow my AS in AS path for L2VPN EVPN route.
        :param str allowas_in_enable_vpnv4: Enable/disable to allow my AS in AS path for VPNv4 route.
        :param str allowas_in_enable_vpnv6: Enable/disable use of my AS in AS path for VPNv6 route.
        :param int allowas_in_evpn: The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        :param int allowas_in_vpnv4: The maximum number of occurrence of my AS number allowed for VPNv4 route.
        :param int allowas_in_vpnv6: The maximum number of occurrence of my AS number allowed for VPNv6 route.
        :param str as_override: Enable/disable replace peer AS with own AS for IPv4.
        :param str as_override6: Enable/disable replace peer AS with own AS for IPv6.
        :param str attribute_unchanged: IPv4 List of attributes that should be unchanged.
        :param str attribute_unchanged6: IPv6 List of attributes that should be unchanged.
        :param str attribute_unchanged_vpnv4: List of attributes that should be unchanged for VPNv4 route.
        :param str attribute_unchanged_vpnv6: List of attributes that should not be changed for VPNv6 route.
        :param str auth_options: Key-chain name for TCP authentication options.
        :param str bfd: Enable/disable BFD for this neighbor.
        :param str capability_default_originate: Enable/disable advertise default IPv4 route to this neighbor.
        :param str capability_default_originate6: Enable/disable advertise default IPv6 route to this neighbor.
        :param str capability_dynamic: Enable/disable advertise dynamic capability to this neighbor.
        :param str capability_graceful_restart: Enable/disable advertise IPv4 graceful restart capability to this neighbor.
        :param str capability_graceful_restart6: Enable/disable advertise IPv6 graceful restart capability to this neighbor.
        :param str capability_graceful_restart_evpn: Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor.
        :param str capability_graceful_restart_vpnv4: Enable/disable advertise VPNv4 graceful restart capability to this neighbor.
        :param str capability_graceful_restart_vpnv6: Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor.
        :param str capability_orf: Accept/Send IPv4 ORF lists to/from this neighbor.
        :param str capability_orf6: Accept/Send IPv6 ORF lists to/from this neighbor.
        :param str capability_route_refresh: Enable/disable advertise route refresh capability to this neighbor.
        :param int connect_timer: Interval (sec) for connect timer.
        :param str default_originate_routemap: Route map to specify criteria to originate IPv4 default.
        :param str default_originate_routemap6: Route map to specify criteria to originate IPv6 default.
        :param str description: Description.
        :param str distribute_list_in: Filter for IPv4 updates from this neighbor.
        :param str distribute_list_in6: Filter for IPv6 updates from this neighbor.
        :param str distribute_list_in_vpnv4: Filter for VPNv4 updates from this neighbor.
        :param str distribute_list_in_vpnv6: Filter for VPNv6 updates from this neighbor.
        :param str distribute_list_out: Filter for IPv4 updates to this neighbor.
        :param str distribute_list_out6: Filter for IPv6 updates to this neighbor.
        :param str distribute_list_out_vpnv4: Filter for VPNv4 updates to this neighbor.
        :param str distribute_list_out_vpnv6: Filter for VPNv6 updates to this neighbor.
        :param str dont_capability_negotiate: Don't negotiate capabilities with this neighbor
        :param str ebgp_enforce_multihop: Enable/disable allow multi-hop EBGP neighbors.
        :param int ebgp_multihop_ttl: EBGP multihop TTL for this peer.
        :param str filter_list_in: BGP filter for IPv4 inbound routes.
        :param str filter_list_in6: BGP filter for IPv6 inbound routes.
        :param str filter_list_in_vpnv4: BGP filter for VPNv4 inbound routes.
        :param str filter_list_in_vpnv6: BGP filter for VPNv6 inbound routes.
        :param str filter_list_out: BGP filter for IPv4 outbound routes.
        :param str filter_list_out6: BGP filter for IPv6 outbound routes.
        :param str filter_list_out_vpnv4: BGP filter for VPNv4 outbound routes.
        :param str filter_list_out_vpnv6: BGP filter for VPNv6 outbound routes.
        :param int holdtime_timer: Interval (sec) before peer considered dead.
        :param str interface: Interface which is used to leak routes to target VRF.
        :param int keep_alive_timer: Keep alive timer interval (sec).
        :param str link_down_failover: Enable/disable failover upon link down.
        :param int local_as: Local AS number of neighbor.
        :param str local_as_no_prepend: Do not prepend local-as to incoming updates.
        :param str local_as_replace_as: Replace real AS with local-as in outgoing updates.
        :param int maximum_prefix: Maximum number of IPv4 prefixes to accept from this peer.
        :param int maximum_prefix6: Maximum number of IPv6 prefixes to accept from this peer.
        :param int maximum_prefix_evpn: Maximum number of L2VPN EVPN prefixes to accept from this peer.
        :param int maximum_prefix_threshold: Maximum IPv4 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold6: Maximum IPv6 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold_evpn: Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold_vpnv4: Maximum VPNv4 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_threshold_vpnv6: Maximum VPNv6 prefix threshold value (1 - 100 percent).
        :param int maximum_prefix_vpnv4: Maximum number of VPNv4 prefixes to accept from this peer.
        :param int maximum_prefix_vpnv6: Maximum number of VPNv6 prefixes to accept from this peer.
        :param str maximum_prefix_warning_only: Enable/disable IPv4 Only give warning message when limit is exceeded.
        :param str maximum_prefix_warning_only6: Enable/disable IPv6 Only give warning message when limit is exceeded.
        :param str maximum_prefix_warning_only_evpn: Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes.
        :param str maximum_prefix_warning_only_vpnv4: Enable/disable only giving warning message when limit is exceeded for VPNv4 routes.
        :param str maximum_prefix_warning_only_vpnv6: Enable/disable warning message when limit is exceeded for VPNv6 routes.
        :param str name: Distribute list entry name.
        :param str next_hop_self: Enable/disable IPv4 next-hop calculation for this neighbor.
        :param str next_hop_self6: Enable/disable IPv6 next-hop calculation for this neighbor.
        :param str next_hop_self_rr: Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes.
        :param str next_hop_self_rr6: Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes.
        :param str next_hop_self_vpnv4: Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor.
        :param str next_hop_self_vpnv6: Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor.
        :param str override_capability: Enable/disable override result of capability negotiation.
        :param str passive: Enable/disable sending of open messages to this neighbor.
        :param str password: Password used in MD5 authentication.
        :param str prefix_list_in: IPv4 Inbound filter for updates from this neighbor.
        :param str prefix_list_in6: IPv6 Inbound filter for updates from this neighbor.
        :param str prefix_list_in_vpnv4: Inbound filter for VPNv4 updates from this neighbor.
        :param str prefix_list_in_vpnv6: Inbound filter for VPNv6 updates from this neighbor.
        :param str prefix_list_out: IPv4 Outbound filter for updates to this neighbor.
        :param str prefix_list_out6: IPv6 Outbound filter for updates to this neighbor.
        :param str prefix_list_out_vpnv4: Outbound filter for VPNv4 updates to this neighbor.
        :param str prefix_list_out_vpnv6: Outbound filter for VPNv6 updates to this neighbor.
        :param int remote_as: AS number of neighbor.
        :param str remove_private_as: Enable/disable remove private AS number from IPv4 outbound updates.
        :param str remove_private_as6: Enable/disable remove private AS number from IPv6 outbound updates.
        :param str remove_private_as_evpn: Enable/disable removing private AS number from L2VPN EVPN outbound updates.
        :param str remove_private_as_vpnv4: Enable/disable remove private AS number from VPNv4 outbound updates.
        :param str remove_private_as_vpnv6: Enable/disable to remove private AS number from VPNv6 outbound updates.
        :param int restart_time: Graceful restart delay time (sec, 0 = global default).
        :param int retain_stale_time: Time to retain stale routes.
        :param str route_map_in: IPv4 Inbound route map filter.
        :param str route_map_in6: IPv6 Inbound route map filter.
        :param str route_map_in_evpn: L2VPN EVPN inbound route map filter.
        :param str route_map_in_vpnv4: VPNv4 inbound route map filter.
        :param str route_map_in_vpnv6: VPNv6 inbound route map filter.
        :param str route_map_out: IPv4 Outbound route map filter.
        :param str route_map_out6: IPv6 Outbound route map filter.
        :param str route_map_out6_preferable: IPv6 outbound route map filter if the peer is preferred.
        :param str route_map_out_evpn: L2VPN EVPN outbound route map filter.
        :param str route_map_out_preferable: IPv4 outbound route map filter if the peer is preferred.
        :param str route_map_out_vpnv4: VPNv4 outbound route map filter.
        :param str route_map_out_vpnv4_preferable: VPNv4 outbound route map filter if the peer is preferred.
        :param str route_map_out_vpnv6: VPNv6 outbound route map filter.
        :param str route_map_out_vpnv6_preferable: VPNv6 outbound route map filter if this neighbor is preferred.
        :param str route_reflector_client: Enable/disable IPv4 AS route reflector client.
        :param str route_reflector_client6: Enable/disable IPv6 AS route reflector client.
        :param str route_reflector_client_evpn: Enable/disable L2VPN EVPN AS route reflector client for this neighbor.
        :param str route_reflector_client_vpnv4: Enable/disable VPNv4 AS route reflector client for this neighbor.
        :param str route_reflector_client_vpnv6: Enable/disable VPNv6 AS route reflector client for this neighbor.
        :param str route_server_client: Enable/disable IPv4 AS route server client.
        :param str route_server_client6: Enable/disable IPv6 AS route server client.
        :param str route_server_client_evpn: Enable/disable L2VPN EVPN AS route server client for this neighbor.
        :param str route_server_client_vpnv4: Enable/disable VPNv4 AS route server client for this neighbor.
        :param str route_server_client_vpnv6: Enable/disable VPNv6 AS route server client for this neighbor.
        :param str send_community: IPv4 Send community attribute to neighbor.
        :param str send_community6: IPv6 Send community attribute to neighbor.
        :param str send_community_evpn: Enable/disable sending community attribute to neighbor for L2VPN EVPN address family.
        :param str send_community_vpnv4: Send community attribute to neighbor for VPNv4 address family.
        :param str send_community_vpnv6: Enable/disable sending community attribute to this neighbor for VPNv6 address family.
        :param str shutdown: Enable/disable shutdown this neighbor.
        :param str soft_reconfiguration: Enable/disable allow IPv4 inbound soft reconfiguration.
        :param str soft_reconfiguration6: Enable/disable allow IPv6 inbound soft reconfiguration.
        :param str soft_reconfiguration_evpn: Enable/disable L2VPN EVPN inbound soft reconfiguration.
        :param str soft_reconfiguration_vpnv4: Enable/disable allow VPNv4 inbound soft reconfiguration.
        :param str soft_reconfiguration_vpnv6: Enable/disable VPNv6 inbound soft reconfiguration.
        :param str stale_route: Enable/disable stale route after neighbor down.
        :param str strict_capability_match: Enable/disable strict capability matching.
        :param str unsuppress_map: IPv4 Route map to selectively unsuppress suppressed routes.
        :param str unsuppress_map6: IPv6 Route map to selectively unsuppress suppressed routes.
        :param str update_source: Interface to use as source IP/IPv6 address of TCP connections.
        :param int weight: Neighbor weight.
        """
        pulumi.set(__self__, "activate", activate)
        pulumi.set(__self__, "activate6", activate6)
        pulumi.set(__self__, "activate_evpn", activate_evpn)
        pulumi.set(__self__, "activate_vpnv4", activate_vpnv4)
        pulumi.set(__self__, "activate_vpnv6", activate_vpnv6)
        pulumi.set(__self__, "additional_path", additional_path)
        pulumi.set(__self__, "additional_path6", additional_path6)
        pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        pulumi.set(__self__, "additional_path_vpnv6", additional_path_vpnv6)
        pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        pulumi.set(__self__, "adv_additional_path_vpnv4", adv_additional_path_vpnv4)
        pulumi.set(__self__, "adv_additional_path_vpnv6", adv_additional_path_vpnv6)
        pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        pulumi.set(__self__, "allowas_in", allowas_in)
        pulumi.set(__self__, "allowas_in6", allowas_in6)
        pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        pulumi.set(__self__, "allowas_in_enable_evpn", allowas_in_enable_evpn)
        pulumi.set(__self__, "allowas_in_enable_vpnv4", allowas_in_enable_vpnv4)
        pulumi.set(__self__, "allowas_in_enable_vpnv6", allowas_in_enable_vpnv6)
        pulumi.set(__self__, "allowas_in_evpn", allowas_in_evpn)
        pulumi.set(__self__, "allowas_in_vpnv4", allowas_in_vpnv4)
        pulumi.set(__self__, "allowas_in_vpnv6", allowas_in_vpnv6)
        pulumi.set(__self__, "as_override", as_override)
        pulumi.set(__self__, "as_override6", as_override6)
        pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        pulumi.set(__self__, "attribute_unchanged_vpnv4", attribute_unchanged_vpnv4)
        pulumi.set(__self__, "attribute_unchanged_vpnv6", attribute_unchanged_vpnv6)
        pulumi.set(__self__, "auth_options", auth_options)
        pulumi.set(__self__, "bfd", bfd)
        pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        pulumi.set(__self__, "capability_graceful_restart_evpn", capability_graceful_restart_evpn)
        pulumi.set(__self__, "capability_graceful_restart_vpnv4", capability_graceful_restart_vpnv4)
        pulumi.set(__self__, "capability_graceful_restart_vpnv6", capability_graceful_restart_vpnv6)
        pulumi.set(__self__, "capability_orf", capability_orf)
        pulumi.set(__self__, "capability_orf6", capability_orf6)
        pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        pulumi.set(__self__, "connect_timer", connect_timer)
        pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        pulumi.set(__self__, "distribute_list_in_vpnv4", distribute_list_in_vpnv4)
        pulumi.set(__self__, "distribute_list_in_vpnv6", distribute_list_in_vpnv6)
        pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        pulumi.set(__self__, "distribute_list_out_vpnv4", distribute_list_out_vpnv4)
        pulumi.set(__self__, "distribute_list_out_vpnv6", distribute_list_out_vpnv6)
        pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        pulumi.set(__self__, "filter_list_in", filter_list_in)
        pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        pulumi.set(__self__, "filter_list_in_vpnv4", filter_list_in_vpnv4)
        pulumi.set(__self__, "filter_list_in_vpnv6", filter_list_in_vpnv6)
        pulumi.set(__self__, "filter_list_out", filter_list_out)
        pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        pulumi.set(__self__, "filter_list_out_vpnv4", filter_list_out_vpnv4)
        pulumi.set(__self__, "filter_list_out_vpnv6", filter_list_out_vpnv6)
        pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        pulumi.set(__self__, "link_down_failover", link_down_failover)
        pulumi.set(__self__, "local_as", local_as)
        pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        pulumi.set(__self__, "maximum_prefix_evpn", maximum_prefix_evpn)
        pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        pulumi.set(__self__, "maximum_prefix_threshold_evpn", maximum_prefix_threshold_evpn)
        pulumi.set(__self__, "maximum_prefix_threshold_vpnv4", maximum_prefix_threshold_vpnv4)
        pulumi.set(__self__, "maximum_prefix_threshold_vpnv6", maximum_prefix_threshold_vpnv6)
        pulumi.set(__self__, "maximum_prefix_vpnv4", maximum_prefix_vpnv4)
        pulumi.set(__self__, "maximum_prefix_vpnv6", maximum_prefix_vpnv6)
        pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        pulumi.set(__self__, "maximum_prefix_warning_only_evpn", maximum_prefix_warning_only_evpn)
        pulumi.set(__self__, "maximum_prefix_warning_only_vpnv4", maximum_prefix_warning_only_vpnv4)
        pulumi.set(__self__, "maximum_prefix_warning_only_vpnv6", maximum_prefix_warning_only_vpnv6)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_hop_self", next_hop_self)
        pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        pulumi.set(__self__, "next_hop_self_vpnv4", next_hop_self_vpnv4)
        pulumi.set(__self__, "next_hop_self_vpnv6", next_hop_self_vpnv6)
        pulumi.set(__self__, "override_capability", override_capability)
        pulumi.set(__self__, "passive", passive)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        pulumi.set(__self__, "prefix_list_in_vpnv4", prefix_list_in_vpnv4)
        pulumi.set(__self__, "prefix_list_in_vpnv6", prefix_list_in_vpnv6)
        pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        pulumi.set(__self__, "prefix_list_out_vpnv4", prefix_list_out_vpnv4)
        pulumi.set(__self__, "prefix_list_out_vpnv6", prefix_list_out_vpnv6)
        pulumi.set(__self__, "remote_as", remote_as)
        pulumi.set(__self__, "remove_private_as", remove_private_as)
        pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        pulumi.set(__self__, "remove_private_as_evpn", remove_private_as_evpn)
        pulumi.set(__self__, "remove_private_as_vpnv4", remove_private_as_vpnv4)
        pulumi.set(__self__, "remove_private_as_vpnv6", remove_private_as_vpnv6)
        pulumi.set(__self__, "restart_time", restart_time)
        pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        pulumi.set(__self__, "route_map_in", route_map_in)
        pulumi.set(__self__, "route_map_in6", route_map_in6)
        pulumi.set(__self__, "route_map_in_evpn", route_map_in_evpn)
        pulumi.set(__self__, "route_map_in_vpnv4", route_map_in_vpnv4)
        pulumi.set(__self__, "route_map_in_vpnv6", route_map_in_vpnv6)
        pulumi.set(__self__, "route_map_out", route_map_out)
        pulumi.set(__self__, "route_map_out6", route_map_out6)
        pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        pulumi.set(__self__, "route_map_out_evpn", route_map_out_evpn)
        pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        pulumi.set(__self__, "route_map_out_vpnv4", route_map_out_vpnv4)
        pulumi.set(__self__, "route_map_out_vpnv4_preferable", route_map_out_vpnv4_preferable)
        pulumi.set(__self__, "route_map_out_vpnv6", route_map_out_vpnv6)
        pulumi.set(__self__, "route_map_out_vpnv6_preferable", route_map_out_vpnv6_preferable)
        pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        pulumi.set(__self__, "route_reflector_client_evpn", route_reflector_client_evpn)
        pulumi.set(__self__, "route_reflector_client_vpnv4", route_reflector_client_vpnv4)
        pulumi.set(__self__, "route_reflector_client_vpnv6", route_reflector_client_vpnv6)
        pulumi.set(__self__, "route_server_client", route_server_client)
        pulumi.set(__self__, "route_server_client6", route_server_client6)
        pulumi.set(__self__, "route_server_client_evpn", route_server_client_evpn)
        pulumi.set(__self__, "route_server_client_vpnv4", route_server_client_vpnv4)
        pulumi.set(__self__, "route_server_client_vpnv6", route_server_client_vpnv6)
        pulumi.set(__self__, "send_community", send_community)
        pulumi.set(__self__, "send_community6", send_community6)
        pulumi.set(__self__, "send_community_evpn", send_community_evpn)
        pulumi.set(__self__, "send_community_vpnv4", send_community_vpnv4)
        pulumi.set(__self__, "send_community_vpnv6", send_community_vpnv6)
        pulumi.set(__self__, "shutdown", shutdown)
        pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        pulumi.set(__self__, "soft_reconfiguration_evpn", soft_reconfiguration_evpn)
        pulumi.set(__self__, "soft_reconfiguration_vpnv4", soft_reconfiguration_vpnv4)
        pulumi.set(__self__, "soft_reconfiguration_vpnv6", soft_reconfiguration_vpnv6)
        pulumi.set(__self__, "stale_route", stale_route)
        pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        pulumi.set(__self__, "update_source", update_source)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activate(self) -> str:
        """
        Enable/disable address family IPv4 for this neighbor.
        """
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter
    def activate6(self) -> str:
        """
        Enable/disable address family IPv6 for this neighbor.
        """
        return pulumi.get(self, "activate6")

    @property
    @pulumi.getter(name="activateEvpn")
    def activate_evpn(self) -> str:
        """
        Enable/disable address family L2VPN EVPN for this neighbor.
        """
        return pulumi.get(self, "activate_evpn")

    @property
    @pulumi.getter(name="activateVpnv4")
    def activate_vpnv4(self) -> str:
        """
        Enable/disable address family VPNv4 for this neighbor.
        """
        return pulumi.get(self, "activate_vpnv4")

    @property
    @pulumi.getter(name="activateVpnv6")
    def activate_vpnv6(self) -> str:
        """
        Enable/disable address family VPNv6 for this neighbor.
        """
        return pulumi.get(self, "activate_vpnv6")

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> str:
        """
        Enable/disable IPv4 additional-path capability.
        """
        return pulumi.get(self, "additional_path")

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> str:
        """
        Enable/disable IPv6 additional-path capability.
        """
        return pulumi.get(self, "additional_path6")

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> str:
        """
        Enable/disable VPNv4 additional-path capability.
        """
        return pulumi.get(self, "additional_path_vpnv4")

    @property
    @pulumi.getter(name="additionalPathVpnv6")
    def additional_path_vpnv6(self) -> str:
        """
        Enable/disable VPNv6 additional-path capability.
        """
        return pulumi.get(self, "additional_path_vpnv6")

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> int:
        """
        Number of IPv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path")

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> int:
        """
        Number of IPv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path6")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv4")
    def adv_additional_path_vpnv4(self) -> int:
        """
        Number of VPNv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv4")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv6")
    def adv_additional_path_vpnv6(self) -> int:
        """
        Number of VPNv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv6")

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> int:
        """
        Minimum interval (sec) between sending updates.
        """
        return pulumi.get(self, "advertisement_interval")

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> int:
        """
        IPv4 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in")

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> int:
        """
        IPv6 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in6")

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> str:
        """
        Enable/disable IPv4 Enable to allow my AS in AS path.
        """
        return pulumi.get(self, "allowas_in_enable")

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> str:
        """
        Enable/disable IPv6 Enable to allow my AS in AS path.
        """
        return pulumi.get(self, "allowas_in_enable6")

    @property
    @pulumi.getter(name="allowasInEnableEvpn")
    def allowas_in_enable_evpn(self) -> str:
        """
        Enable/disable to allow my AS in AS path for L2VPN EVPN route.
        """
        return pulumi.get(self, "allowas_in_enable_evpn")

    @property
    @pulumi.getter(name="allowasInEnableVpnv4")
    def allowas_in_enable_vpnv4(self) -> str:
        """
        Enable/disable to allow my AS in AS path for VPNv4 route.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv4")

    @property
    @pulumi.getter(name="allowasInEnableVpnv6")
    def allowas_in_enable_vpnv6(self) -> str:
        """
        Enable/disable use of my AS in AS path for VPNv6 route.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv6")

    @property
    @pulumi.getter(name="allowasInEvpn")
    def allowas_in_evpn(self) -> int:
        """
        The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        """
        return pulumi.get(self, "allowas_in_evpn")

    @property
    @pulumi.getter(name="allowasInVpnv4")
    def allowas_in_vpnv4(self) -> int:
        """
        The maximum number of occurrence of my AS number allowed for VPNv4 route.
        """
        return pulumi.get(self, "allowas_in_vpnv4")

    @property
    @pulumi.getter(name="allowasInVpnv6")
    def allowas_in_vpnv6(self) -> int:
        """
        The maximum number of occurrence of my AS number allowed for VPNv6 route.
        """
        return pulumi.get(self, "allowas_in_vpnv6")

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> str:
        """
        Enable/disable replace peer AS with own AS for IPv4.
        """
        return pulumi.get(self, "as_override")

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> str:
        """
        Enable/disable replace peer AS with own AS for IPv6.
        """
        return pulumi.get(self, "as_override6")

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> str:
        """
        IPv4 List of attributes that should be unchanged.
        """
        return pulumi.get(self, "attribute_unchanged")

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> str:
        """
        IPv6 List of attributes that should be unchanged.
        """
        return pulumi.get(self, "attribute_unchanged6")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv4")
    def attribute_unchanged_vpnv4(self) -> str:
        """
        List of attributes that should be unchanged for VPNv4 route.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv4")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv6")
    def attribute_unchanged_vpnv6(self) -> str:
        """
        List of attributes that should not be changed for VPNv6 route.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv6")

    @property
    @pulumi.getter(name="authOptions")
    def auth_options(self) -> str:
        """
        Key-chain name for TCP authentication options.
        """
        return pulumi.get(self, "auth_options")

    @property
    @pulumi.getter
    def bfd(self) -> str:
        """
        Enable/disable BFD for this neighbor.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> str:
        """
        Enable/disable advertise default IPv4 route to this neighbor.
        """
        return pulumi.get(self, "capability_default_originate")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> str:
        """
        Enable/disable advertise default IPv6 route to this neighbor.
        """
        return pulumi.get(self, "capability_default_originate6")

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> str:
        """
        Enable/disable advertise dynamic capability to this neighbor.
        """
        return pulumi.get(self, "capability_dynamic")

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> str:
        """
        Enable/disable advertise IPv4 graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart")

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> str:
        """
        Enable/disable advertise IPv6 graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart6")

    @property
    @pulumi.getter(name="capabilityGracefulRestartEvpn")
    def capability_graceful_restart_evpn(self) -> str:
        """
        Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart_evpn")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv4")
    def capability_graceful_restart_vpnv4(self) -> str:
        """
        Enable/disable advertise VPNv4 graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv4")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv6")
    def capability_graceful_restart_vpnv6(self) -> str:
        """
        Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv6")

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> str:
        """
        Accept/Send IPv4 ORF lists to/from this neighbor.
        """
        return pulumi.get(self, "capability_orf")

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> str:
        """
        Accept/Send IPv6 ORF lists to/from this neighbor.
        """
        return pulumi.get(self, "capability_orf6")

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> str:
        """
        Enable/disable advertise route refresh capability to this neighbor.
        """
        return pulumi.get(self, "capability_route_refresh")

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> int:
        """
        Interval (sec) for connect timer.
        """
        return pulumi.get(self, "connect_timer")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> str:
        """
        Route map to specify criteria to originate IPv4 default.
        """
        return pulumi.get(self, "default_originate_routemap")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> str:
        """
        Route map to specify criteria to originate IPv6 default.
        """
        return pulumi.get(self, "default_originate_routemap6")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> str:
        """
        Filter for IPv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in")

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> str:
        """
        Filter for IPv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in6")

    @property
    @pulumi.getter(name="distributeListInVpnv4")
    def distribute_list_in_vpnv4(self) -> str:
        """
        Filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv4")

    @property
    @pulumi.getter(name="distributeListInVpnv6")
    def distribute_list_in_vpnv6(self) -> str:
        """
        Filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv6")

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> str:
        """
        Filter for IPv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out")

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> str:
        """
        Filter for IPv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out6")

    @property
    @pulumi.getter(name="distributeListOutVpnv4")
    def distribute_list_out_vpnv4(self) -> str:
        """
        Filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv4")

    @property
    @pulumi.getter(name="distributeListOutVpnv6")
    def distribute_list_out_vpnv6(self) -> str:
        """
        Filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv6")

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> str:
        """
        Don't negotiate capabilities with this neighbor
        """
        return pulumi.get(self, "dont_capability_negotiate")

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> str:
        """
        Enable/disable allow multi-hop EBGP neighbors.
        """
        return pulumi.get(self, "ebgp_enforce_multihop")

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> int:
        """
        EBGP multihop TTL for this peer.
        """
        return pulumi.get(self, "ebgp_multihop_ttl")

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> str:
        """
        BGP filter for IPv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in")

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> str:
        """
        BGP filter for IPv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in6")

    @property
    @pulumi.getter(name="filterListInVpnv4")
    def filter_list_in_vpnv4(self) -> str:
        """
        BGP filter for VPNv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv4")

    @property
    @pulumi.getter(name="filterListInVpnv6")
    def filter_list_in_vpnv6(self) -> str:
        """
        BGP filter for VPNv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv6")

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> str:
        """
        BGP filter for IPv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out")

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> str:
        """
        BGP filter for IPv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out6")

    @property
    @pulumi.getter(name="filterListOutVpnv4")
    def filter_list_out_vpnv4(self) -> str:
        """
        BGP filter for VPNv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv4")

    @property
    @pulumi.getter(name="filterListOutVpnv6")
    def filter_list_out_vpnv6(self) -> str:
        """
        BGP filter for VPNv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv6")

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> int:
        """
        Interval (sec) before peer considered dead.
        """
        return pulumi.get(self, "holdtime_timer")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface which is used to leak routes to target VRF.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> int:
        """
        Keep alive timer interval (sec).
        """
        return pulumi.get(self, "keep_alive_timer")

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> str:
        """
        Enable/disable failover upon link down.
        """
        return pulumi.get(self, "link_down_failover")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> int:
        """
        Local AS number of neighbor.
        """
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> str:
        """
        Do not prepend local-as to incoming updates.
        """
        return pulumi.get(self, "local_as_no_prepend")

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> str:
        """
        Replace real AS with local-as in outgoing updates.
        """
        return pulumi.get(self, "local_as_replace_as")

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> int:
        """
        Maximum number of IPv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix")

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> int:
        """
        Maximum number of IPv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix6")

    @property
    @pulumi.getter(name="maximumPrefixEvpn")
    def maximum_prefix_evpn(self) -> int:
        """
        Maximum number of L2VPN EVPN prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> int:
        """
        Maximum IPv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold")

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> int:
        """
        Maximum IPv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold6")

    @property
    @pulumi.getter(name="maximumPrefixThresholdEvpn")
    def maximum_prefix_threshold_evpn(self) -> int:
        """
        Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv4")
    def maximum_prefix_threshold_vpnv4(self) -> int:
        """
        Maximum VPNv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv6")
    def maximum_prefix_threshold_vpnv6(self) -> int:
        """
        Maximum VPNv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv6")

    @property
    @pulumi.getter(name="maximumPrefixVpnv4")
    def maximum_prefix_vpnv4(self) -> int:
        """
        Maximum number of VPNv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixVpnv6")
    def maximum_prefix_vpnv6(self) -> int:
        """
        Maximum number of VPNv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> str:
        """
        Enable/disable IPv4 Only give warning message when limit is exceeded.
        """
        return pulumi.get(self, "maximum_prefix_warning_only")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> str:
        """
        Enable/disable IPv6 Only give warning message when limit is exceeded.
        """
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyEvpn")
    def maximum_prefix_warning_only_evpn(self) -> str:
        """
        Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_evpn")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv4")
    def maximum_prefix_warning_only_vpnv4(self) -> str:
        """
        Enable/disable only giving warning message when limit is exceeded for VPNv4 routes.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv6")
    def maximum_prefix_warning_only_vpnv6(self) -> str:
        """
        Enable/disable warning message when limit is exceeded for VPNv6 routes.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv6")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Distribute list entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> str:
        """
        Enable/disable IPv4 next-hop calculation for this neighbor.
        """
        return pulumi.get(self, "next_hop_self")

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> str:
        """
        Enable/disable IPv6 next-hop calculation for this neighbor.
        """
        return pulumi.get(self, "next_hop_self6")

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> str:
        """
        Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes.
        """
        return pulumi.get(self, "next_hop_self_rr")

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> str:
        """
        Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes.
        """
        return pulumi.get(self, "next_hop_self_rr6")

    @property
    @pulumi.getter(name="nextHopSelfVpnv4")
    def next_hop_self_vpnv4(self) -> str:
        """
        Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor.
        """
        return pulumi.get(self, "next_hop_self_vpnv4")

    @property
    @pulumi.getter(name="nextHopSelfVpnv6")
    def next_hop_self_vpnv6(self) -> str:
        """
        Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor.
        """
        return pulumi.get(self, "next_hop_self_vpnv6")

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> str:
        """
        Enable/disable override result of capability negotiation.
        """
        return pulumi.get(self, "override_capability")

    @property
    @pulumi.getter
    def passive(self) -> str:
        """
        Enable/disable sending of open messages to this neighbor.
        """
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password used in MD5 authentication.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> str:
        """
        IPv4 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in")

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> str:
        """
        IPv6 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in6")

    @property
    @pulumi.getter(name="prefixListInVpnv4")
    def prefix_list_in_vpnv4(self) -> str:
        """
        Inbound filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv4")

    @property
    @pulumi.getter(name="prefixListInVpnv6")
    def prefix_list_in_vpnv6(self) -> str:
        """
        Inbound filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv6")

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> str:
        """
        IPv4 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out")

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> str:
        """
        IPv6 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out6")

    @property
    @pulumi.getter(name="prefixListOutVpnv4")
    def prefix_list_out_vpnv4(self) -> str:
        """
        Outbound filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv4")

    @property
    @pulumi.getter(name="prefixListOutVpnv6")
    def prefix_list_out_vpnv6(self) -> str:
        """
        Outbound filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv6")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> int:
        """
        AS number of neighbor.
        """
        return pulumi.get(self, "remote_as")

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> str:
        """
        Enable/disable remove private AS number from IPv4 outbound updates.
        """
        return pulumi.get(self, "remove_private_as")

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> str:
        """
        Enable/disable remove private AS number from IPv6 outbound updates.
        """
        return pulumi.get(self, "remove_private_as6")

    @property
    @pulumi.getter(name="removePrivateAsEvpn")
    def remove_private_as_evpn(self) -> str:
        """
        Enable/disable removing private AS number from L2VPN EVPN outbound updates.
        """
        return pulumi.get(self, "remove_private_as_evpn")

    @property
    @pulumi.getter(name="removePrivateAsVpnv4")
    def remove_private_as_vpnv4(self) -> str:
        """
        Enable/disable remove private AS number from VPNv4 outbound updates.
        """
        return pulumi.get(self, "remove_private_as_vpnv4")

    @property
    @pulumi.getter(name="removePrivateAsVpnv6")
    def remove_private_as_vpnv6(self) -> str:
        """
        Enable/disable to remove private AS number from VPNv6 outbound updates.
        """
        return pulumi.get(self, "remove_private_as_vpnv6")

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> int:
        """
        Graceful restart delay time (sec, 0 = global default).
        """
        return pulumi.get(self, "restart_time")

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> int:
        """
        Time to retain stale routes.
        """
        return pulumi.get(self, "retain_stale_time")

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> str:
        """
        IPv4 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in")

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> str:
        """
        IPv6 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in6")

    @property
    @pulumi.getter(name="routeMapInEvpn")
    def route_map_in_evpn(self) -> str:
        """
        L2VPN EVPN inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_evpn")

    @property
    @pulumi.getter(name="routeMapInVpnv4")
    def route_map_in_vpnv4(self) -> str:
        """
        VPNv4 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv4")

    @property
    @pulumi.getter(name="routeMapInVpnv6")
    def route_map_in_vpnv6(self) -> str:
        """
        VPNv6 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv6")

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> str:
        """
        IPv4 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out")

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> str:
        """
        IPv6 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out6")

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> str:
        """
        IPv6 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out6_preferable")

    @property
    @pulumi.getter(name="routeMapOutEvpn")
    def route_map_out_evpn(self) -> str:
        """
        L2VPN EVPN outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_evpn")

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> str:
        """
        IPv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv4")
    def route_map_out_vpnv4(self) -> str:
        """
        VPNv4 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv4")

    @property
    @pulumi.getter(name="routeMapOutVpnv4Preferable")
    def route_map_out_vpnv4_preferable(self) -> str:
        """
        VPNv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv4_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv6")
    def route_map_out_vpnv6(self) -> str:
        """
        VPNv6 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv6")

    @property
    @pulumi.getter(name="routeMapOutVpnv6Preferable")
    def route_map_out_vpnv6_preferable(self) -> str:
        """
        VPNv6 outbound route map filter if this neighbor is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv6_preferable")

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> str:
        """
        Enable/disable IPv4 AS route reflector client.
        """
        return pulumi.get(self, "route_reflector_client")

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> str:
        """
        Enable/disable IPv6 AS route reflector client.
        """
        return pulumi.get(self, "route_reflector_client6")

    @property
    @pulumi.getter(name="routeReflectorClientEvpn")
    def route_reflector_client_evpn(self) -> str:
        """
        Enable/disable L2VPN EVPN AS route reflector client for this neighbor.
        """
        return pulumi.get(self, "route_reflector_client_evpn")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv4")
    def route_reflector_client_vpnv4(self) -> str:
        """
        Enable/disable VPNv4 AS route reflector client for this neighbor.
        """
        return pulumi.get(self, "route_reflector_client_vpnv4")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv6")
    def route_reflector_client_vpnv6(self) -> str:
        """
        Enable/disable VPNv6 AS route reflector client for this neighbor.
        """
        return pulumi.get(self, "route_reflector_client_vpnv6")

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> str:
        """
        Enable/disable IPv4 AS route server client.
        """
        return pulumi.get(self, "route_server_client")

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> str:
        """
        Enable/disable IPv6 AS route server client.
        """
        return pulumi.get(self, "route_server_client6")

    @property
    @pulumi.getter(name="routeServerClientEvpn")
    def route_server_client_evpn(self) -> str:
        """
        Enable/disable L2VPN EVPN AS route server client for this neighbor.
        """
        return pulumi.get(self, "route_server_client_evpn")

    @property
    @pulumi.getter(name="routeServerClientVpnv4")
    def route_server_client_vpnv4(self) -> str:
        """
        Enable/disable VPNv4 AS route server client for this neighbor.
        """
        return pulumi.get(self, "route_server_client_vpnv4")

    @property
    @pulumi.getter(name="routeServerClientVpnv6")
    def route_server_client_vpnv6(self) -> str:
        """
        Enable/disable VPNv6 AS route server client for this neighbor.
        """
        return pulumi.get(self, "route_server_client_vpnv6")

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> str:
        """
        IPv4 Send community attribute to neighbor.
        """
        return pulumi.get(self, "send_community")

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> str:
        """
        IPv6 Send community attribute to neighbor.
        """
        return pulumi.get(self, "send_community6")

    @property
    @pulumi.getter(name="sendCommunityEvpn")
    def send_community_evpn(self) -> str:
        """
        Enable/disable sending community attribute to neighbor for L2VPN EVPN address family.
        """
        return pulumi.get(self, "send_community_evpn")

    @property
    @pulumi.getter(name="sendCommunityVpnv4")
    def send_community_vpnv4(self) -> str:
        """
        Send community attribute to neighbor for VPNv4 address family.
        """
        return pulumi.get(self, "send_community_vpnv4")

    @property
    @pulumi.getter(name="sendCommunityVpnv6")
    def send_community_vpnv6(self) -> str:
        """
        Enable/disable sending community attribute to this neighbor for VPNv6 address family.
        """
        return pulumi.get(self, "send_community_vpnv6")

    @property
    @pulumi.getter
    def shutdown(self) -> str:
        """
        Enable/disable shutdown this neighbor.
        """
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> str:
        """
        Enable/disable allow IPv4 inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration")

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> str:
        """
        Enable/disable allow IPv6 inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration6")

    @property
    @pulumi.getter(name="softReconfigurationEvpn")
    def soft_reconfiguration_evpn(self) -> str:
        """
        Enable/disable L2VPN EVPN inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration_evpn")

    @property
    @pulumi.getter(name="softReconfigurationVpnv4")
    def soft_reconfiguration_vpnv4(self) -> str:
        """
        Enable/disable allow VPNv4 inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv4")

    @property
    @pulumi.getter(name="softReconfigurationVpnv6")
    def soft_reconfiguration_vpnv6(self) -> str:
        """
        Enable/disable VPNv6 inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv6")

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> str:
        """
        Enable/disable stale route after neighbor down.
        """
        return pulumi.get(self, "stale_route")

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> str:
        """
        Enable/disable strict capability matching.
        """
        return pulumi.get(self, "strict_capability_match")

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> str:
        """
        IPv4 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map")

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> str:
        """
        IPv6 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map6")

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> str:
        """
        Interface to use as source IP/IPv6 address of TCP connections.
        """
        return pulumi.get(self, "update_source")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Neighbor weight.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetBgpNeighborRange6Result(dict):
    def __init__(__self__, *,
                 id: int,
                 max_neighbor_num: int,
                 neighbor_group: str,
                 prefix6: str):
        """
        :param int id: ID.
        :param int max_neighbor_num: Maximum number of neighbors.
        :param str neighbor_group: Neighbor group name.
        :param str prefix6: Network IPv6 prefix.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_neighbor_num", max_neighbor_num)
        pulumi.set(__self__, "neighbor_group", neighbor_group)
        pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxNeighborNum")
    def max_neighbor_num(self) -> int:
        """
        Maximum number of neighbors.
        """
        return pulumi.get(self, "max_neighbor_num")

    @property
    @pulumi.getter(name="neighborGroup")
    def neighbor_group(self) -> str:
        """
        Neighbor group name.
        """
        return pulumi.get(self, "neighbor_group")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        """
        Network IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class GetBgpNeighborRangeResult(dict):
    def __init__(__self__, *,
                 id: int,
                 max_neighbor_num: int,
                 neighbor_group: str,
                 prefix: str):
        """
        :param int id: ID.
        :param int max_neighbor_num: Maximum number of neighbors.
        :param str neighbor_group: Neighbor group name.
        :param str prefix: Network prefix.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_neighbor_num", max_neighbor_num)
        pulumi.set(__self__, "neighbor_group", neighbor_group)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxNeighborNum")
    def max_neighbor_num(self) -> int:
        """
        Maximum number of neighbors.
        """
        return pulumi.get(self, "max_neighbor_num")

    @property
    @pulumi.getter(name="neighborGroup")
    def neighbor_group(self) -> str:
        """
        Neighbor group name.
        """
        return pulumi.get(self, "neighbor_group")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Network prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetBgpNetwork6Result(dict):
    def __init__(__self__, *,
                 backdoor: str,
                 id: int,
                 network_import_check: str,
                 prefix6: str,
                 route_map: str):
        """
        :param str backdoor: Enable/disable route as backdoor.
        :param int id: ID.
        :param str network_import_check: Configure insurance of BGP network route existence in IGP.
        :param str prefix6: Network IPv6 prefix.
        :param str route_map: Route map of VRF leaking.
        """
        pulumi.set(__self__, "backdoor", backdoor)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "network_import_check", network_import_check)
        pulumi.set(__self__, "prefix6", prefix6)
        pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> str:
        """
        Enable/disable route as backdoor.
        """
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> str:
        """
        Configure insurance of BGP network route existence in IGP.
        """
        return pulumi.get(self, "network_import_check")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        """
        Network IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")


@pulumi.output_type
class GetBgpNetworkResult(dict):
    def __init__(__self__, *,
                 backdoor: str,
                 id: int,
                 network_import_check: str,
                 prefix: str,
                 route_map: str):
        """
        :param str backdoor: Enable/disable route as backdoor.
        :param int id: ID.
        :param str network_import_check: Configure insurance of BGP network route existence in IGP.
        :param str prefix: Network prefix.
        :param str route_map: Route map of VRF leaking.
        """
        pulumi.set(__self__, "backdoor", backdoor)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "network_import_check", network_import_check)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> str:
        """
        Enable/disable route as backdoor.
        """
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> str:
        """
        Configure insurance of BGP network route existence in IGP.
        """
        return pulumi.get(self, "network_import_check")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")


@pulumi.output_type
class GetBgpRedistribute6Result(dict):
    def __init__(__self__, *,
                 name: str,
                 route_map: str,
                 status: str):
        """
        :param str name: Distribute list entry name.
        :param str route_map: Route map of VRF leaking.
        :param str status: Status
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "route_map", route_map)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Distribute list entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetBgpRedistributeResult(dict):
    def __init__(__self__, *,
                 name: str,
                 route_map: str,
                 status: str):
        """
        :param str name: Distribute list entry name.
        :param str route_map: Route map of VRF leaking.
        :param str status: Status
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "route_map", route_map)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Distribute list entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetBgpVrf6Result(dict):
    def __init__(__self__, *,
                 export_rts: Sequence['outputs.GetBgpVrf6ExportRtResult'],
                 import_route_map: str,
                 import_rts: Sequence['outputs.GetBgpVrf6ImportRtResult'],
                 leak_targets: Sequence['outputs.GetBgpVrf6LeakTargetResult'],
                 rd: str,
                 role: str,
                 vrf: str):
        """
        :param Sequence['GetBgpVrf6ExportRtArgs'] export_rts: List of export route target. The structure of `export_rt` block is documented below.
        :param str import_route_map: Import route map.
        :param Sequence['GetBgpVrf6ImportRtArgs'] import_rts: List of import route target. The structure of `import_rt` block is documented below.
        :param Sequence['GetBgpVrf6LeakTargetArgs'] leak_targets: Target VRF table. The structure of `leak_target` block is documented below.
        :param str rd: Route Distinguisher: AA:NN|A.B.C.D:NN.
        :param str role: VRF role.
        :param str vrf: Target VRF ID <0 - 31>.
        """
        pulumi.set(__self__, "export_rts", export_rts)
        pulumi.set(__self__, "import_route_map", import_route_map)
        pulumi.set(__self__, "import_rts", import_rts)
        pulumi.set(__self__, "leak_targets", leak_targets)
        pulumi.set(__self__, "rd", rd)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="exportRts")
    def export_rts(self) -> Sequence['outputs.GetBgpVrf6ExportRtResult']:
        """
        List of export route target. The structure of `export_rt` block is documented below.
        """
        return pulumi.get(self, "export_rts")

    @property
    @pulumi.getter(name="importRouteMap")
    def import_route_map(self) -> str:
        """
        Import route map.
        """
        return pulumi.get(self, "import_route_map")

    @property
    @pulumi.getter(name="importRts")
    def import_rts(self) -> Sequence['outputs.GetBgpVrf6ImportRtResult']:
        """
        List of import route target. The structure of `import_rt` block is documented below.
        """
        return pulumi.get(self, "import_rts")

    @property
    @pulumi.getter(name="leakTargets")
    def leak_targets(self) -> Sequence['outputs.GetBgpVrf6LeakTargetResult']:
        """
        Target VRF table. The structure of `leak_target` block is documented below.
        """
        return pulumi.get(self, "leak_targets")

    @property
    @pulumi.getter
    def rd(self) -> str:
        """
        Route Distinguisher: AA:NN|A.B.C.D:NN.
        """
        return pulumi.get(self, "rd")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        VRF role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        """
        Target VRF ID <0 - 31>.
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetBgpVrf6ExportRtResult(dict):
    def __init__(__self__, *,
                 route_target: str):
        """
        :param str route_target: Attribute: AA:NN|A.B.C.D:NN
        """
        pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> str:
        """
        Attribute: AA:NN|A.B.C.D:NN
        """
        return pulumi.get(self, "route_target")


@pulumi.output_type
class GetBgpVrf6ImportRtResult(dict):
    def __init__(__self__, *,
                 route_target: str):
        """
        :param str route_target: Attribute: AA:NN|A.B.C.D:NN
        """
        pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> str:
        """
        Attribute: AA:NN|A.B.C.D:NN
        """
        return pulumi.get(self, "route_target")


@pulumi.output_type
class GetBgpVrf6LeakTargetResult(dict):
    def __init__(__self__, *,
                 interface: str,
                 route_map: str,
                 vrf: str):
        """
        :param str interface: Interface which is used to leak routes to target VRF.
        :param str route_map: Route map of VRF leaking.
        :param str vrf: Target VRF ID <0 - 31>.
        """
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "route_map", route_map)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface which is used to leak routes to target VRF.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        """
        Target VRF ID <0 - 31>.
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetBgpVrfResult(dict):
    def __init__(__self__, *,
                 export_rts: Sequence['outputs.GetBgpVrfExportRtResult'],
                 import_route_map: str,
                 import_rts: Sequence['outputs.GetBgpVrfImportRtResult'],
                 leak_targets: Sequence['outputs.GetBgpVrfLeakTargetResult'],
                 rd: str,
                 role: str,
                 vrf: str):
        """
        :param Sequence['GetBgpVrfExportRtArgs'] export_rts: List of export route target. The structure of `export_rt` block is documented below.
        :param str import_route_map: Import route map.
        :param Sequence['GetBgpVrfImportRtArgs'] import_rts: List of import route target. The structure of `import_rt` block is documented below.
        :param Sequence['GetBgpVrfLeakTargetArgs'] leak_targets: Target VRF table. The structure of `leak_target` block is documented below.
        :param str rd: Route Distinguisher: AA:NN|A.B.C.D:NN.
        :param str role: VRF role.
        :param str vrf: Target VRF ID <0 - 31>.
        """
        pulumi.set(__self__, "export_rts", export_rts)
        pulumi.set(__self__, "import_route_map", import_route_map)
        pulumi.set(__self__, "import_rts", import_rts)
        pulumi.set(__self__, "leak_targets", leak_targets)
        pulumi.set(__self__, "rd", rd)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="exportRts")
    def export_rts(self) -> Sequence['outputs.GetBgpVrfExportRtResult']:
        """
        List of export route target. The structure of `export_rt` block is documented below.
        """
        return pulumi.get(self, "export_rts")

    @property
    @pulumi.getter(name="importRouteMap")
    def import_route_map(self) -> str:
        """
        Import route map.
        """
        return pulumi.get(self, "import_route_map")

    @property
    @pulumi.getter(name="importRts")
    def import_rts(self) -> Sequence['outputs.GetBgpVrfImportRtResult']:
        """
        List of import route target. The structure of `import_rt` block is documented below.
        """
        return pulumi.get(self, "import_rts")

    @property
    @pulumi.getter(name="leakTargets")
    def leak_targets(self) -> Sequence['outputs.GetBgpVrfLeakTargetResult']:
        """
        Target VRF table. The structure of `leak_target` block is documented below.
        """
        return pulumi.get(self, "leak_targets")

    @property
    @pulumi.getter
    def rd(self) -> str:
        """
        Route Distinguisher: AA:NN|A.B.C.D:NN.
        """
        return pulumi.get(self, "rd")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        VRF role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        """
        Target VRF ID <0 - 31>.
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetBgpVrfExportRtResult(dict):
    def __init__(__self__, *,
                 route_target: str):
        """
        :param str route_target: Attribute: AA:NN|A.B.C.D:NN
        """
        pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> str:
        """
        Attribute: AA:NN|A.B.C.D:NN
        """
        return pulumi.get(self, "route_target")


@pulumi.output_type
class GetBgpVrfImportRtResult(dict):
    def __init__(__self__, *,
                 route_target: str):
        """
        :param str route_target: Attribute: AA:NN|A.B.C.D:NN
        """
        pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> str:
        """
        Attribute: AA:NN|A.B.C.D:NN
        """
        return pulumi.get(self, "route_target")


@pulumi.output_type
class GetBgpVrfLeak6Result(dict):
    def __init__(__self__, *,
                 targets: Sequence['outputs.GetBgpVrfLeak6TargetResult'],
                 vrf: str):
        """
        :param Sequence['GetBgpVrfLeak6TargetArgs'] targets: Target VRF table. The structure of `target` block is documented below.
        :param str vrf: Target VRF ID <0 - 31>.
        """
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetBgpVrfLeak6TargetResult']:
        """
        Target VRF table. The structure of `target` block is documented below.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        """
        Target VRF ID <0 - 31>.
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetBgpVrfLeak6TargetResult(dict):
    def __init__(__self__, *,
                 interface: str,
                 route_map: str,
                 vrf: str):
        """
        :param str interface: Interface which is used to leak routes to target VRF.
        :param str route_map: Route map of VRF leaking.
        :param str vrf: Target VRF ID <0 - 31>.
        """
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "route_map", route_map)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface which is used to leak routes to target VRF.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        """
        Target VRF ID <0 - 31>.
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetBgpVrfLeakResult(dict):
    def __init__(__self__, *,
                 targets: Sequence['outputs.GetBgpVrfLeakTargetResult'],
                 vrf: str):
        """
        :param Sequence['GetBgpVrfLeakTargetArgs'] targets: Target VRF table. The structure of `target` block is documented below.
        :param str vrf: Target VRF ID <0 - 31>.
        """
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetBgpVrfLeakTargetResult']:
        """
        Target VRF table. The structure of `target` block is documented below.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        """
        Target VRF ID <0 - 31>.
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetBgpVrfLeakTargetResult(dict):
    def __init__(__self__, *,
                 interface: str,
                 route_map: str,
                 vrf: str):
        """
        :param str interface: Interface which is used to leak routes to target VRF.
        :param str route_map: Route map of VRF leaking.
        :param str vrf: Target VRF ID <0 - 31>.
        """
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "route_map", route_map)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface which is used to leak routes to target VRF.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        """
        Target VRF ID <0 - 31>.
        """
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetCommunitylistRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 id: int,
                 match: str,
                 regexp: str):
        """
        :param str action: Permit or deny route-based operations, based on the route's COMMUNITY attribute.
        :param int id: ID.
        :param str match: Community specifications for matching a reserved community.
        :param str regexp: Ordered list of COMMUNITY attributes as a regular expression.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "match", match)
        pulumi.set(__self__, "regexp", regexp)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Permit or deny route-based operations, based on the route's COMMUNITY attribute.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def match(self) -> str:
        """
        Community specifications for matching a reserved community.
        """
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def regexp(self) -> str:
        """
        Ordered list of COMMUNITY attributes as a regular expression.
        """
        return pulumi.get(self, "regexp")


@pulumi.output_type
class GetIsisIsisInterfaceResult(dict):
    def __init__(__self__, *,
                 auth_keychain_l1: str,
                 auth_keychain_l2: str,
                 auth_mode_l1: str,
                 auth_mode_l2: str,
                 auth_password_l1: str,
                 auth_password_l2: str,
                 auth_send_only_l1: str,
                 auth_send_only_l2: str,
                 circuit_type: str,
                 csnp_interval_l1: int,
                 csnp_interval_l2: int,
                 hello_interval_l1: int,
                 hello_interval_l2: int,
                 hello_multiplier_l1: int,
                 hello_multiplier_l2: int,
                 hello_padding: str,
                 lsp_interval: int,
                 lsp_retransmit_interval: int,
                 mesh_group: str,
                 mesh_group_id: int,
                 metric_l1: int,
                 metric_l2: int,
                 name: str,
                 network_type: str,
                 priority_l1: int,
                 priority_l2: int,
                 status: str,
                 status6: str,
                 wide_metric_l1: int,
                 wide_metric_l2: int):
        """
        :param str auth_keychain_l1: Authentication key-chain for level 1 PDUs.
        :param str auth_keychain_l2: Authentication key-chain for level 2 PDUs.
        :param str auth_mode_l1: Level 1 authentication mode.
        :param str auth_mode_l2: Level 2 authentication mode.
        :param str auth_password_l1: Authentication password for level 1 PDUs.
        :param str auth_password_l2: Authentication password for level 2 PDUs.
        :param str auth_send_only_l1: Enable/disable authentication send-only for level 1 PDUs.
        :param str auth_send_only_l2: Enable/disable authentication send-only for level 2 PDUs.
        :param str circuit_type: IS-IS interface's circuit type
        :param int csnp_interval_l1: Level 1 CSNP interval.
        :param int csnp_interval_l2: Level 2 CSNP interval.
        :param int hello_interval_l1: Level 1 hello interval.
        :param int hello_interval_l2: Level 2 hello interval.
        :param int hello_multiplier_l1: Level 1 multiplier for Hello holding time.
        :param int hello_multiplier_l2: Level 2 multiplier for Hello holding time.
        :param str hello_padding: Enable/disable padding to IS-IS hello packets.
        :param int lsp_interval: LSP transmission interval (milliseconds).
        :param int lsp_retransmit_interval: LSP retransmission interval (sec).
        :param str mesh_group: Enable/disable IS-IS mesh group.
        :param int mesh_group_id: Mesh group ID <0-4294967295>, 0: mesh-group blocked.
        :param int metric_l1: Level 1 metric for interface.
        :param int metric_l2: Level 2 metric for interface.
        :param str name: IS-IS interface name.
        :param str network_type: IS-IS interface's network type
        :param int priority_l1: Level 1 priority.
        :param int priority_l2: Level 2 priority.
        :param str status: Enable/disable redistribution.
        :param str status6: Enable/disable IPv6 interface for IS-IS.
        :param int wide_metric_l1: Level 1 wide metric for interface.
        :param int wide_metric_l2: Level 2 wide metric for interface.
        """
        pulumi.set(__self__, "auth_keychain_l1", auth_keychain_l1)
        pulumi.set(__self__, "auth_keychain_l2", auth_keychain_l2)
        pulumi.set(__self__, "auth_mode_l1", auth_mode_l1)
        pulumi.set(__self__, "auth_mode_l2", auth_mode_l2)
        pulumi.set(__self__, "auth_password_l1", auth_password_l1)
        pulumi.set(__self__, "auth_password_l2", auth_password_l2)
        pulumi.set(__self__, "auth_send_only_l1", auth_send_only_l1)
        pulumi.set(__self__, "auth_send_only_l2", auth_send_only_l2)
        pulumi.set(__self__, "circuit_type", circuit_type)
        pulumi.set(__self__, "csnp_interval_l1", csnp_interval_l1)
        pulumi.set(__self__, "csnp_interval_l2", csnp_interval_l2)
        pulumi.set(__self__, "hello_interval_l1", hello_interval_l1)
        pulumi.set(__self__, "hello_interval_l2", hello_interval_l2)
        pulumi.set(__self__, "hello_multiplier_l1", hello_multiplier_l1)
        pulumi.set(__self__, "hello_multiplier_l2", hello_multiplier_l2)
        pulumi.set(__self__, "hello_padding", hello_padding)
        pulumi.set(__self__, "lsp_interval", lsp_interval)
        pulumi.set(__self__, "lsp_retransmit_interval", lsp_retransmit_interval)
        pulumi.set(__self__, "mesh_group", mesh_group)
        pulumi.set(__self__, "mesh_group_id", mesh_group_id)
        pulumi.set(__self__, "metric_l1", metric_l1)
        pulumi.set(__self__, "metric_l2", metric_l2)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "priority_l1", priority_l1)
        pulumi.set(__self__, "priority_l2", priority_l2)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status6", status6)
        pulumi.set(__self__, "wide_metric_l1", wide_metric_l1)
        pulumi.set(__self__, "wide_metric_l2", wide_metric_l2)

    @property
    @pulumi.getter(name="authKeychainL1")
    def auth_keychain_l1(self) -> str:
        """
        Authentication key-chain for level 1 PDUs.
        """
        return pulumi.get(self, "auth_keychain_l1")

    @property
    @pulumi.getter(name="authKeychainL2")
    def auth_keychain_l2(self) -> str:
        """
        Authentication key-chain for level 2 PDUs.
        """
        return pulumi.get(self, "auth_keychain_l2")

    @property
    @pulumi.getter(name="authModeL1")
    def auth_mode_l1(self) -> str:
        """
        Level 1 authentication mode.
        """
        return pulumi.get(self, "auth_mode_l1")

    @property
    @pulumi.getter(name="authModeL2")
    def auth_mode_l2(self) -> str:
        """
        Level 2 authentication mode.
        """
        return pulumi.get(self, "auth_mode_l2")

    @property
    @pulumi.getter(name="authPasswordL1")
    def auth_password_l1(self) -> str:
        """
        Authentication password for level 1 PDUs.
        """
        return pulumi.get(self, "auth_password_l1")

    @property
    @pulumi.getter(name="authPasswordL2")
    def auth_password_l2(self) -> str:
        """
        Authentication password for level 2 PDUs.
        """
        return pulumi.get(self, "auth_password_l2")

    @property
    @pulumi.getter(name="authSendOnlyL1")
    def auth_send_only_l1(self) -> str:
        """
        Enable/disable authentication send-only for level 1 PDUs.
        """
        return pulumi.get(self, "auth_send_only_l1")

    @property
    @pulumi.getter(name="authSendOnlyL2")
    def auth_send_only_l2(self) -> str:
        """
        Enable/disable authentication send-only for level 2 PDUs.
        """
        return pulumi.get(self, "auth_send_only_l2")

    @property
    @pulumi.getter(name="circuitType")
    def circuit_type(self) -> str:
        """
        IS-IS interface's circuit type
        """
        return pulumi.get(self, "circuit_type")

    @property
    @pulumi.getter(name="csnpIntervalL1")
    def csnp_interval_l1(self) -> int:
        """
        Level 1 CSNP interval.
        """
        return pulumi.get(self, "csnp_interval_l1")

    @property
    @pulumi.getter(name="csnpIntervalL2")
    def csnp_interval_l2(self) -> int:
        """
        Level 2 CSNP interval.
        """
        return pulumi.get(self, "csnp_interval_l2")

    @property
    @pulumi.getter(name="helloIntervalL1")
    def hello_interval_l1(self) -> int:
        """
        Level 1 hello interval.
        """
        return pulumi.get(self, "hello_interval_l1")

    @property
    @pulumi.getter(name="helloIntervalL2")
    def hello_interval_l2(self) -> int:
        """
        Level 2 hello interval.
        """
        return pulumi.get(self, "hello_interval_l2")

    @property
    @pulumi.getter(name="helloMultiplierL1")
    def hello_multiplier_l1(self) -> int:
        """
        Level 1 multiplier for Hello holding time.
        """
        return pulumi.get(self, "hello_multiplier_l1")

    @property
    @pulumi.getter(name="helloMultiplierL2")
    def hello_multiplier_l2(self) -> int:
        """
        Level 2 multiplier for Hello holding time.
        """
        return pulumi.get(self, "hello_multiplier_l2")

    @property
    @pulumi.getter(name="helloPadding")
    def hello_padding(self) -> str:
        """
        Enable/disable padding to IS-IS hello packets.
        """
        return pulumi.get(self, "hello_padding")

    @property
    @pulumi.getter(name="lspInterval")
    def lsp_interval(self) -> int:
        """
        LSP transmission interval (milliseconds).
        """
        return pulumi.get(self, "lsp_interval")

    @property
    @pulumi.getter(name="lspRetransmitInterval")
    def lsp_retransmit_interval(self) -> int:
        """
        LSP retransmission interval (sec).
        """
        return pulumi.get(self, "lsp_retransmit_interval")

    @property
    @pulumi.getter(name="meshGroup")
    def mesh_group(self) -> str:
        """
        Enable/disable IS-IS mesh group.
        """
        return pulumi.get(self, "mesh_group")

    @property
    @pulumi.getter(name="meshGroupId")
    def mesh_group_id(self) -> int:
        """
        Mesh group ID <0-4294967295>, 0: mesh-group blocked.
        """
        return pulumi.get(self, "mesh_group_id")

    @property
    @pulumi.getter(name="metricL1")
    def metric_l1(self) -> int:
        """
        Level 1 metric for interface.
        """
        return pulumi.get(self, "metric_l1")

    @property
    @pulumi.getter(name="metricL2")
    def metric_l2(self) -> int:
        """
        Level 2 metric for interface.
        """
        return pulumi.get(self, "metric_l2")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        IS-IS interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        """
        IS-IS interface's network type
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="priorityL1")
    def priority_l1(self) -> int:
        """
        Level 1 priority.
        """
        return pulumi.get(self, "priority_l1")

    @property
    @pulumi.getter(name="priorityL2")
    def priority_l2(self) -> int:
        """
        Level 2 priority.
        """
        return pulumi.get(self, "priority_l2")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable redistribution.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def status6(self) -> str:
        """
        Enable/disable IPv6 interface for IS-IS.
        """
        return pulumi.get(self, "status6")

    @property
    @pulumi.getter(name="wideMetricL1")
    def wide_metric_l1(self) -> int:
        """
        Level 1 wide metric for interface.
        """
        return pulumi.get(self, "wide_metric_l1")

    @property
    @pulumi.getter(name="wideMetricL2")
    def wide_metric_l2(self) -> int:
        """
        Level 2 wide metric for interface.
        """
        return pulumi.get(self, "wide_metric_l2")


@pulumi.output_type
class GetIsisIsisNetResult(dict):
    def __init__(__self__, *,
                 id: int,
                 net: str):
        """
        :param int id: Prefix entry ID.
        :param str net: IS-IS net xx.xxxx. ... .xxxx.xx.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "net", net)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Prefix entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def net(self) -> str:
        """
        IS-IS net xx.xxxx. ... .xxxx.xx.
        """
        return pulumi.get(self, "net")


@pulumi.output_type
class GetIsisRedistribute6Result(dict):
    def __init__(__self__, *,
                 level: str,
                 metric: int,
                 metric_type: str,
                 protocol: str,
                 routemap: str,
                 status: str):
        """
        :param str level: Level.
        :param int metric: Metric.
        :param str metric_type: Metric type.
        :param str protocol: Protocol name.
        :param str routemap: Route map name.
        :param str status: Enable/disable redistribution.
        """
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "routemap", routemap)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        Level.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def metric(self) -> int:
        """
        Metric.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        """
        Metric type.
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol name.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def routemap(self) -> str:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable redistribution.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetIsisRedistributeResult(dict):
    def __init__(__self__, *,
                 level: str,
                 metric: int,
                 metric_type: str,
                 protocol: str,
                 routemap: str,
                 status: str):
        """
        :param str level: Level.
        :param int metric: Metric.
        :param str metric_type: Metric type.
        :param str protocol: Protocol name.
        :param str routemap: Route map name.
        :param str status: Enable/disable redistribution.
        """
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "routemap", routemap)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        Level.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def metric(self) -> int:
        """
        Metric.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        """
        Metric type.
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol name.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def routemap(self) -> str:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable redistribution.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetIsisSummaryAddress6Result(dict):
    def __init__(__self__, *,
                 id: int,
                 level: str,
                 prefix6: str):
        """
        :param int id: Prefix entry ID.
        :param str level: Level.
        :param str prefix6: IPv6 prefix.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Prefix entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        Level.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class GetIsisSummaryAddressResult(dict):
    def __init__(__self__, *,
                 id: int,
                 level: str,
                 prefix: str):
        """
        :param int id: Prefix entry ID.
        :param str level: Level.
        :param str prefix: Prefix.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Prefix entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        Level.
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetKeychainKeyResult(dict):
    def __init__(__self__, *,
                 accept_lifetime: str,
                 algorithm: str,
                 id: int,
                 key_string: str,
                 send_lifetime: str):
        """
        :param str accept_lifetime: Lifetime of received authentication key (format: hh:mm:ss day month year).
        :param str algorithm: Cryptographic algorithm.
        :param int id: Key ID (0 - 2147483647).
        :param str key_string: Password for the key (max. = 35 characters).
        :param str send_lifetime: Lifetime of sent authentication key (format: hh:mm:ss day month year).
        """
        pulumi.set(__self__, "accept_lifetime", accept_lifetime)
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_string", key_string)
        pulumi.set(__self__, "send_lifetime", send_lifetime)

    @property
    @pulumi.getter(name="acceptLifetime")
    def accept_lifetime(self) -> str:
        """
        Lifetime of received authentication key (format: hh:mm:ss day month year).
        """
        return pulumi.get(self, "accept_lifetime")

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        """
        Cryptographic algorithm.
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Key ID (0 - 2147483647).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> str:
        """
        Password for the key (max. = 35 characters).
        """
        return pulumi.get(self, "key_string")

    @property
    @pulumi.getter(name="sendLifetime")
    def send_lifetime(self) -> str:
        """
        Lifetime of sent authentication key (format: hh:mm:ss day month year).
        """
        return pulumi.get(self, "send_lifetime")


@pulumi.output_type
class GetMulticast6InterfaceResult(dict):
    def __init__(__self__, *,
                 hello_holdtime: int,
                 hello_interval: int,
                 name: str):
        """
        :param int hello_holdtime: Time before old neighbour information expires (1 - 65535 sec, default = 105).
        :param int hello_interval: Interval between sending PIM hello messages  (1 - 65535 sec, default = 30)..
        :param str name: Interface name.
        """
        pulumi.set(__self__, "hello_holdtime", hello_holdtime)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="helloHoldtime")
    def hello_holdtime(self) -> int:
        """
        Time before old neighbour information expires (1 - 65535 sec, default = 105).
        """
        return pulumi.get(self, "hello_holdtime")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> int:
        """
        Interval between sending PIM hello messages  (1 - 65535 sec, default = 30)..
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMulticast6PimSmGlobalResult(dict):
    def __init__(__self__, *,
                 register_rate_limit: int,
                 rp_addresses: Sequence['outputs.GetMulticast6PimSmGlobalRpAddressResult']):
        """
        :param int register_rate_limit: Limit of packets/sec per source registered through this RP (0 means unlimited).
        :param Sequence['GetMulticast6PimSmGlobalRpAddressArgs'] rp_addresses: Statically configured RP addresses. The structure of `rp_address` block is documented below.
        """
        pulumi.set(__self__, "register_rate_limit", register_rate_limit)
        pulumi.set(__self__, "rp_addresses", rp_addresses)

    @property
    @pulumi.getter(name="registerRateLimit")
    def register_rate_limit(self) -> int:
        """
        Limit of packets/sec per source registered through this RP (0 means unlimited).
        """
        return pulumi.get(self, "register_rate_limit")

    @property
    @pulumi.getter(name="rpAddresses")
    def rp_addresses(self) -> Sequence['outputs.GetMulticast6PimSmGlobalRpAddressResult']:
        """
        Statically configured RP addresses. The structure of `rp_address` block is documented below.
        """
        return pulumi.get(self, "rp_addresses")


@pulumi.output_type
class GetMulticast6PimSmGlobalRpAddressResult(dict):
    def __init__(__self__, *,
                 id: int,
                 ip6_address: str):
        """
        :param int id: ID of the entry.
        :param str ip6_address: RP router IPv6 address.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip6_address", ip6_address)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID of the entry.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> str:
        """
        RP router IPv6 address.
        """
        return pulumi.get(self, "ip6_address")


@pulumi.output_type
class GetMulticastInterfaceResult(dict):
    def __init__(__self__, *,
                 bfd: str,
                 cisco_exclude_genid: str,
                 dr_priority: int,
                 hello_holdtime: int,
                 hello_interval: int,
                 igmps: Sequence['outputs.GetMulticastInterfaceIgmpResult'],
                 join_groups: Sequence['outputs.GetMulticastInterfaceJoinGroupResult'],
                 multicast_flow: str,
                 name: str,
                 neighbour_filter: str,
                 passive: str,
                 pim_mode: str,
                 propagation_delay: int,
                 rp_candidate: str,
                 rp_candidate_group: str,
                 rp_candidate_interval: int,
                 rp_candidate_priority: int,
                 rpf_nbr_fail_back: str,
                 rpf_nbr_fail_back_filter: str,
                 state_refresh_interval: int,
                 static_group: str,
                 ttl_threshold: int):
        """
        :param str bfd: Enable/disable Protocol Independent Multicast (PIM) Bidirectional Forwarding Detection (BFD).
        :param str cisco_exclude_genid: Exclude GenID from hello packets (compatibility with old Cisco IOS).
        :param int dr_priority: DR election priority.
        :param int hello_holdtime: Time before old neighbor information expires (0 - 65535 sec, default = 105).
        :param int hello_interval: Interval between sending PIM hello messages (0 - 65535 sec, default = 30).
        :param Sequence['GetMulticastInterfaceIgmpArgs'] igmps: IGMP configuration options. The structure of `igmp` block is documented below.
        :param Sequence['GetMulticastInterfaceJoinGroupArgs'] join_groups: Join multicast groups. The structure of `join_group` block is documented below.
        :param str multicast_flow: Acceptable source for multicast group.
        :param str name: Interface name.
        :param str neighbour_filter: Routers acknowledged as neighbor routers.
        :param str passive: Enable/disable listening to IGMP but not participating in PIM.
        :param str pim_mode: PIM operation mode.
        :param int propagation_delay: Delay flooding packets on this interface (100 - 5000 msec, default = 500).
        :param str rp_candidate: Enable/disable compete to become RP in elections.
        :param str rp_candidate_group: Multicast groups managed by this RP.
        :param int rp_candidate_interval: RP candidate advertisement interval (1 - 16383 sec, default = 60).
        :param int rp_candidate_priority: Router's priority as RP.
        :param str rpf_nbr_fail_back: Enable/disable fail back for RPF neighbor query.
        :param str rpf_nbr_fail_back_filter: Filter for fail back RPF neighbors.
        :param int state_refresh_interval: Interval between sending state-refresh packets (1 - 100 sec, default = 60).
        :param str static_group: Statically set multicast groups to forward out.
        :param int ttl_threshold: Minimum TTL of multicast packets that will be forwarded (applied only to new multicast routes) (1 - 255, default = 1).
        """
        pulumi.set(__self__, "bfd", bfd)
        pulumi.set(__self__, "cisco_exclude_genid", cisco_exclude_genid)
        pulumi.set(__self__, "dr_priority", dr_priority)
        pulumi.set(__self__, "hello_holdtime", hello_holdtime)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "igmps", igmps)
        pulumi.set(__self__, "join_groups", join_groups)
        pulumi.set(__self__, "multicast_flow", multicast_flow)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "neighbour_filter", neighbour_filter)
        pulumi.set(__self__, "passive", passive)
        pulumi.set(__self__, "pim_mode", pim_mode)
        pulumi.set(__self__, "propagation_delay", propagation_delay)
        pulumi.set(__self__, "rp_candidate", rp_candidate)
        pulumi.set(__self__, "rp_candidate_group", rp_candidate_group)
        pulumi.set(__self__, "rp_candidate_interval", rp_candidate_interval)
        pulumi.set(__self__, "rp_candidate_priority", rp_candidate_priority)
        pulumi.set(__self__, "rpf_nbr_fail_back", rpf_nbr_fail_back)
        pulumi.set(__self__, "rpf_nbr_fail_back_filter", rpf_nbr_fail_back_filter)
        pulumi.set(__self__, "state_refresh_interval", state_refresh_interval)
        pulumi.set(__self__, "static_group", static_group)
        pulumi.set(__self__, "ttl_threshold", ttl_threshold)

    @property
    @pulumi.getter
    def bfd(self) -> str:
        """
        Enable/disable Protocol Independent Multicast (PIM) Bidirectional Forwarding Detection (BFD).
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="ciscoExcludeGenid")
    def cisco_exclude_genid(self) -> str:
        """
        Exclude GenID from hello packets (compatibility with old Cisco IOS).
        """
        return pulumi.get(self, "cisco_exclude_genid")

    @property
    @pulumi.getter(name="drPriority")
    def dr_priority(self) -> int:
        """
        DR election priority.
        """
        return pulumi.get(self, "dr_priority")

    @property
    @pulumi.getter(name="helloHoldtime")
    def hello_holdtime(self) -> int:
        """
        Time before old neighbor information expires (0 - 65535 sec, default = 105).
        """
        return pulumi.get(self, "hello_holdtime")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> int:
        """
        Interval between sending PIM hello messages (0 - 65535 sec, default = 30).
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def igmps(self) -> Sequence['outputs.GetMulticastInterfaceIgmpResult']:
        """
        IGMP configuration options. The structure of `igmp` block is documented below.
        """
        return pulumi.get(self, "igmps")

    @property
    @pulumi.getter(name="joinGroups")
    def join_groups(self) -> Sequence['outputs.GetMulticastInterfaceJoinGroupResult']:
        """
        Join multicast groups. The structure of `join_group` block is documented below.
        """
        return pulumi.get(self, "join_groups")

    @property
    @pulumi.getter(name="multicastFlow")
    def multicast_flow(self) -> str:
        """
        Acceptable source for multicast group.
        """
        return pulumi.get(self, "multicast_flow")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="neighbourFilter")
    def neighbour_filter(self) -> str:
        """
        Routers acknowledged as neighbor routers.
        """
        return pulumi.get(self, "neighbour_filter")

    @property
    @pulumi.getter
    def passive(self) -> str:
        """
        Enable/disable listening to IGMP but not participating in PIM.
        """
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter(name="pimMode")
    def pim_mode(self) -> str:
        """
        PIM operation mode.
        """
        return pulumi.get(self, "pim_mode")

    @property
    @pulumi.getter(name="propagationDelay")
    def propagation_delay(self) -> int:
        """
        Delay flooding packets on this interface (100 - 5000 msec, default = 500).
        """
        return pulumi.get(self, "propagation_delay")

    @property
    @pulumi.getter(name="rpCandidate")
    def rp_candidate(self) -> str:
        """
        Enable/disable compete to become RP in elections.
        """
        return pulumi.get(self, "rp_candidate")

    @property
    @pulumi.getter(name="rpCandidateGroup")
    def rp_candidate_group(self) -> str:
        """
        Multicast groups managed by this RP.
        """
        return pulumi.get(self, "rp_candidate_group")

    @property
    @pulumi.getter(name="rpCandidateInterval")
    def rp_candidate_interval(self) -> int:
        """
        RP candidate advertisement interval (1 - 16383 sec, default = 60).
        """
        return pulumi.get(self, "rp_candidate_interval")

    @property
    @pulumi.getter(name="rpCandidatePriority")
    def rp_candidate_priority(self) -> int:
        """
        Router's priority as RP.
        """
        return pulumi.get(self, "rp_candidate_priority")

    @property
    @pulumi.getter(name="rpfNbrFailBack")
    def rpf_nbr_fail_back(self) -> str:
        """
        Enable/disable fail back for RPF neighbor query.
        """
        return pulumi.get(self, "rpf_nbr_fail_back")

    @property
    @pulumi.getter(name="rpfNbrFailBackFilter")
    def rpf_nbr_fail_back_filter(self) -> str:
        """
        Filter for fail back RPF neighbors.
        """
        return pulumi.get(self, "rpf_nbr_fail_back_filter")

    @property
    @pulumi.getter(name="stateRefreshInterval")
    def state_refresh_interval(self) -> int:
        """
        Interval between sending state-refresh packets (1 - 100 sec, default = 60).
        """
        return pulumi.get(self, "state_refresh_interval")

    @property
    @pulumi.getter(name="staticGroup")
    def static_group(self) -> str:
        """
        Statically set multicast groups to forward out.
        """
        return pulumi.get(self, "static_group")

    @property
    @pulumi.getter(name="ttlThreshold")
    def ttl_threshold(self) -> int:
        """
        Minimum TTL of multicast packets that will be forwarded (applied only to new multicast routes) (1 - 255, default = 1).
        """
        return pulumi.get(self, "ttl_threshold")


@pulumi.output_type
class GetMulticastInterfaceIgmpResult(dict):
    def __init__(__self__, *,
                 access_group: str,
                 immediate_leave_group: str,
                 last_member_query_count: int,
                 last_member_query_interval: int,
                 query_interval: int,
                 query_max_response_time: int,
                 query_timeout: int,
                 router_alert_check: str,
                 version: str):
        """
        :param str access_group: Groups IGMP hosts are allowed to join.
        :param str immediate_leave_group: Groups to drop membership for immediately after receiving IGMPv2 leave.
        :param int last_member_query_count: Number of group specific queries before removing group (2 - 7, default = 2).
        :param int last_member_query_interval: Timeout between IGMPv2 leave and removing group (1 - 65535 msec, default = 1000).
        :param int query_interval: Interval between queries to IGMP hosts (1 - 65535 sec, default = 125).
        :param int query_max_response_time: Maximum time to wait for a IGMP query response (1 - 25 sec, default = 10).
        :param int query_timeout: Timeout between queries before becoming querier for network (60 - 900, default = 255).
        :param str router_alert_check: Enable/disable require IGMP packets contain router alert option.
        :param str version: Maximum version of IGMP to support.
        """
        pulumi.set(__self__, "access_group", access_group)
        pulumi.set(__self__, "immediate_leave_group", immediate_leave_group)
        pulumi.set(__self__, "last_member_query_count", last_member_query_count)
        pulumi.set(__self__, "last_member_query_interval", last_member_query_interval)
        pulumi.set(__self__, "query_interval", query_interval)
        pulumi.set(__self__, "query_max_response_time", query_max_response_time)
        pulumi.set(__self__, "query_timeout", query_timeout)
        pulumi.set(__self__, "router_alert_check", router_alert_check)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="accessGroup")
    def access_group(self) -> str:
        """
        Groups IGMP hosts are allowed to join.
        """
        return pulumi.get(self, "access_group")

    @property
    @pulumi.getter(name="immediateLeaveGroup")
    def immediate_leave_group(self) -> str:
        """
        Groups to drop membership for immediately after receiving IGMPv2 leave.
        """
        return pulumi.get(self, "immediate_leave_group")

    @property
    @pulumi.getter(name="lastMemberQueryCount")
    def last_member_query_count(self) -> int:
        """
        Number of group specific queries before removing group (2 - 7, default = 2).
        """
        return pulumi.get(self, "last_member_query_count")

    @property
    @pulumi.getter(name="lastMemberQueryInterval")
    def last_member_query_interval(self) -> int:
        """
        Timeout between IGMPv2 leave and removing group (1 - 65535 msec, default = 1000).
        """
        return pulumi.get(self, "last_member_query_interval")

    @property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> int:
        """
        Interval between queries to IGMP hosts (1 - 65535 sec, default = 125).
        """
        return pulumi.get(self, "query_interval")

    @property
    @pulumi.getter(name="queryMaxResponseTime")
    def query_max_response_time(self) -> int:
        """
        Maximum time to wait for a IGMP query response (1 - 25 sec, default = 10).
        """
        return pulumi.get(self, "query_max_response_time")

    @property
    @pulumi.getter(name="queryTimeout")
    def query_timeout(self) -> int:
        """
        Timeout between queries before becoming querier for network (60 - 900, default = 255).
        """
        return pulumi.get(self, "query_timeout")

    @property
    @pulumi.getter(name="routerAlertCheck")
    def router_alert_check(self) -> str:
        """
        Enable/disable require IGMP packets contain router alert option.
        """
        return pulumi.get(self, "router_alert_check")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Maximum version of IGMP to support.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMulticastInterfaceJoinGroupResult(dict):
    def __init__(__self__, *,
                 address: str):
        """
        :param str address: Multicast group IP address.
        """
        pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        Multicast group IP address.
        """
        return pulumi.get(self, "address")


@pulumi.output_type
class GetMulticastPimSmGlobalResult(dict):
    def __init__(__self__, *,
                 accept_register_list: str,
                 accept_source_list: str,
                 bsr_allow_quick_refresh: str,
                 bsr_candidate: str,
                 bsr_hash: int,
                 bsr_interface: str,
                 bsr_priority: int,
                 cisco_crp_prefix: str,
                 cisco_ignore_rp_set_priority: str,
                 cisco_register_checksum: str,
                 cisco_register_checksum_group: str,
                 join_prune_holdtime: int,
                 message_interval: int,
                 null_register_retries: int,
                 pim_use_sdwan: str,
                 register_rate_limit: int,
                 register_rp_reachability: str,
                 register_source: str,
                 register_source_interface: str,
                 register_source_ip: str,
                 register_supression: int,
                 rp_addresses: Sequence['outputs.GetMulticastPimSmGlobalRpAddressResult'],
                 rp_register_keepalive: int,
                 spt_threshold: str,
                 spt_threshold_group: str,
                 ssm: str,
                 ssm_range: str):
        """
        :param str accept_register_list: Sources allowed to register packets with this Rendezvous Point (RP).
        :param str accept_source_list: Sources allowed to send multicast traffic.
        :param str bsr_allow_quick_refresh: Enable/disable accept BSR quick refresh packets from neighbors.
        :param str bsr_candidate: Enable/disable allowing this router to become a bootstrap router (BSR).
        :param int bsr_hash: BSR hash length (0 - 32, default = 10).
        :param str bsr_interface: Interface to advertise as candidate BSR.
        :param int bsr_priority: BSR priority (0 - 255, default = 0).
        :param str cisco_crp_prefix: Enable/disable making candidate RP compatible with old Cisco IOS.
        :param str cisco_ignore_rp_set_priority: Use only hash for RP selection (compatibility with old Cisco IOS).
        :param str cisco_register_checksum: Checksum entire register packet(for old Cisco IOS compatibility).
        :param str cisco_register_checksum_group: Cisco register checksum only these groups.
        :param int join_prune_holdtime: Join/prune holdtime (1 - 65535, default = 210).
        :param int message_interval: Period of time between sending periodic PIM join/prune messages in seconds (1 - 65535, default = 60).
        :param int null_register_retries: Maximum retries of null register (1 - 20, default = 1).
        :param str pim_use_sdwan: Enable/disable use of SDWAN when checking RPF neighbor and sending of REG packet.
        :param int register_rate_limit: Limit of packets/sec per source registered through this RP (0 - 65535, default = 0 which means unlimited).
        :param str register_rp_reachability: Enable/disable check RP is reachable before registering packets.
        :param str register_source: Override source address in register packets.
        :param str register_source_interface: Override with primary interface address.
        :param str register_source_ip: Override with local IP address.
        :param int register_supression: Period of time to honor register-stop message (1 - 65535 sec, default = 60).
        :param Sequence['GetMulticastPimSmGlobalRpAddressArgs'] rp_addresses: Statically configure RP addresses. The structure of `rp_address` block is documented below.
        :param int rp_register_keepalive: Timeout for RP receiving data on (S,G) tree (1 - 65535 sec, default = 185).
        :param str spt_threshold: Enable/disable switching to source specific trees.
        :param str spt_threshold_group: Groups allowed to switch to source tree.
        :param str ssm: Enable/disable source specific multicast.
        :param str ssm_range: Groups allowed to source specific multicast.
        """
        pulumi.set(__self__, "accept_register_list", accept_register_list)
        pulumi.set(__self__, "accept_source_list", accept_source_list)
        pulumi.set(__self__, "bsr_allow_quick_refresh", bsr_allow_quick_refresh)
        pulumi.set(__self__, "bsr_candidate", bsr_candidate)
        pulumi.set(__self__, "bsr_hash", bsr_hash)
        pulumi.set(__self__, "bsr_interface", bsr_interface)
        pulumi.set(__self__, "bsr_priority", bsr_priority)
        pulumi.set(__self__, "cisco_crp_prefix", cisco_crp_prefix)
        pulumi.set(__self__, "cisco_ignore_rp_set_priority", cisco_ignore_rp_set_priority)
        pulumi.set(__self__, "cisco_register_checksum", cisco_register_checksum)
        pulumi.set(__self__, "cisco_register_checksum_group", cisco_register_checksum_group)
        pulumi.set(__self__, "join_prune_holdtime", join_prune_holdtime)
        pulumi.set(__self__, "message_interval", message_interval)
        pulumi.set(__self__, "null_register_retries", null_register_retries)
        pulumi.set(__self__, "pim_use_sdwan", pim_use_sdwan)
        pulumi.set(__self__, "register_rate_limit", register_rate_limit)
        pulumi.set(__self__, "register_rp_reachability", register_rp_reachability)
        pulumi.set(__self__, "register_source", register_source)
        pulumi.set(__self__, "register_source_interface", register_source_interface)
        pulumi.set(__self__, "register_source_ip", register_source_ip)
        pulumi.set(__self__, "register_supression", register_supression)
        pulumi.set(__self__, "rp_addresses", rp_addresses)
        pulumi.set(__self__, "rp_register_keepalive", rp_register_keepalive)
        pulumi.set(__self__, "spt_threshold", spt_threshold)
        pulumi.set(__self__, "spt_threshold_group", spt_threshold_group)
        pulumi.set(__self__, "ssm", ssm)
        pulumi.set(__self__, "ssm_range", ssm_range)

    @property
    @pulumi.getter(name="acceptRegisterList")
    def accept_register_list(self) -> str:
        """
        Sources allowed to register packets with this Rendezvous Point (RP).
        """
        return pulumi.get(self, "accept_register_list")

    @property
    @pulumi.getter(name="acceptSourceList")
    def accept_source_list(self) -> str:
        """
        Sources allowed to send multicast traffic.
        """
        return pulumi.get(self, "accept_source_list")

    @property
    @pulumi.getter(name="bsrAllowQuickRefresh")
    def bsr_allow_quick_refresh(self) -> str:
        """
        Enable/disable accept BSR quick refresh packets from neighbors.
        """
        return pulumi.get(self, "bsr_allow_quick_refresh")

    @property
    @pulumi.getter(name="bsrCandidate")
    def bsr_candidate(self) -> str:
        """
        Enable/disable allowing this router to become a bootstrap router (BSR).
        """
        return pulumi.get(self, "bsr_candidate")

    @property
    @pulumi.getter(name="bsrHash")
    def bsr_hash(self) -> int:
        """
        BSR hash length (0 - 32, default = 10).
        """
        return pulumi.get(self, "bsr_hash")

    @property
    @pulumi.getter(name="bsrInterface")
    def bsr_interface(self) -> str:
        """
        Interface to advertise as candidate BSR.
        """
        return pulumi.get(self, "bsr_interface")

    @property
    @pulumi.getter(name="bsrPriority")
    def bsr_priority(self) -> int:
        """
        BSR priority (0 - 255, default = 0).
        """
        return pulumi.get(self, "bsr_priority")

    @property
    @pulumi.getter(name="ciscoCrpPrefix")
    def cisco_crp_prefix(self) -> str:
        """
        Enable/disable making candidate RP compatible with old Cisco IOS.
        """
        return pulumi.get(self, "cisco_crp_prefix")

    @property
    @pulumi.getter(name="ciscoIgnoreRpSetPriority")
    def cisco_ignore_rp_set_priority(self) -> str:
        """
        Use only hash for RP selection (compatibility with old Cisco IOS).
        """
        return pulumi.get(self, "cisco_ignore_rp_set_priority")

    @property
    @pulumi.getter(name="ciscoRegisterChecksum")
    def cisco_register_checksum(self) -> str:
        """
        Checksum entire register packet(for old Cisco IOS compatibility).
        """
        return pulumi.get(self, "cisco_register_checksum")

    @property
    @pulumi.getter(name="ciscoRegisterChecksumGroup")
    def cisco_register_checksum_group(self) -> str:
        """
        Cisco register checksum only these groups.
        """
        return pulumi.get(self, "cisco_register_checksum_group")

    @property
    @pulumi.getter(name="joinPruneHoldtime")
    def join_prune_holdtime(self) -> int:
        """
        Join/prune holdtime (1 - 65535, default = 210).
        """
        return pulumi.get(self, "join_prune_holdtime")

    @property
    @pulumi.getter(name="messageInterval")
    def message_interval(self) -> int:
        """
        Period of time between sending periodic PIM join/prune messages in seconds (1 - 65535, default = 60).
        """
        return pulumi.get(self, "message_interval")

    @property
    @pulumi.getter(name="nullRegisterRetries")
    def null_register_retries(self) -> int:
        """
        Maximum retries of null register (1 - 20, default = 1).
        """
        return pulumi.get(self, "null_register_retries")

    @property
    @pulumi.getter(name="pimUseSdwan")
    def pim_use_sdwan(self) -> str:
        """
        Enable/disable use of SDWAN when checking RPF neighbor and sending of REG packet.
        """
        return pulumi.get(self, "pim_use_sdwan")

    @property
    @pulumi.getter(name="registerRateLimit")
    def register_rate_limit(self) -> int:
        """
        Limit of packets/sec per source registered through this RP (0 - 65535, default = 0 which means unlimited).
        """
        return pulumi.get(self, "register_rate_limit")

    @property
    @pulumi.getter(name="registerRpReachability")
    def register_rp_reachability(self) -> str:
        """
        Enable/disable check RP is reachable before registering packets.
        """
        return pulumi.get(self, "register_rp_reachability")

    @property
    @pulumi.getter(name="registerSource")
    def register_source(self) -> str:
        """
        Override source address in register packets.
        """
        return pulumi.get(self, "register_source")

    @property
    @pulumi.getter(name="registerSourceInterface")
    def register_source_interface(self) -> str:
        """
        Override with primary interface address.
        """
        return pulumi.get(self, "register_source_interface")

    @property
    @pulumi.getter(name="registerSourceIp")
    def register_source_ip(self) -> str:
        """
        Override with local IP address.
        """
        return pulumi.get(self, "register_source_ip")

    @property
    @pulumi.getter(name="registerSupression")
    def register_supression(self) -> int:
        """
        Period of time to honor register-stop message (1 - 65535 sec, default = 60).
        """
        return pulumi.get(self, "register_supression")

    @property
    @pulumi.getter(name="rpAddresses")
    def rp_addresses(self) -> Sequence['outputs.GetMulticastPimSmGlobalRpAddressResult']:
        """
        Statically configure RP addresses. The structure of `rp_address` block is documented below.
        """
        return pulumi.get(self, "rp_addresses")

    @property
    @pulumi.getter(name="rpRegisterKeepalive")
    def rp_register_keepalive(self) -> int:
        """
        Timeout for RP receiving data on (S,G) tree (1 - 65535 sec, default = 185).
        """
        return pulumi.get(self, "rp_register_keepalive")

    @property
    @pulumi.getter(name="sptThreshold")
    def spt_threshold(self) -> str:
        """
        Enable/disable switching to source specific trees.
        """
        return pulumi.get(self, "spt_threshold")

    @property
    @pulumi.getter(name="sptThresholdGroup")
    def spt_threshold_group(self) -> str:
        """
        Groups allowed to switch to source tree.
        """
        return pulumi.get(self, "spt_threshold_group")

    @property
    @pulumi.getter
    def ssm(self) -> str:
        """
        Enable/disable source specific multicast.
        """
        return pulumi.get(self, "ssm")

    @property
    @pulumi.getter(name="ssmRange")
    def ssm_range(self) -> str:
        """
        Groups allowed to source specific multicast.
        """
        return pulumi.get(self, "ssm_range")


@pulumi.output_type
class GetMulticastPimSmGlobalRpAddressResult(dict):
    def __init__(__self__, *,
                 group: str,
                 id: int,
                 ip_address: str):
        """
        :param str group: Groups to use this RP.
        :param int id: ID.
        :param str ip_address: RP router address.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Groups to use this RP.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        RP router address.
        """
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetMulticastflowFlowResult(dict):
    def __init__(__self__, *,
                 group_addr: str,
                 id: int,
                 source_addr: str):
        """
        :param str group_addr: Multicast group IP address.
        :param int id: Flow ID.
        :param str source_addr: Multicast source IP address.
        """
        pulumi.set(__self__, "group_addr", group_addr)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "source_addr", source_addr)

    @property
    @pulumi.getter(name="groupAddr")
    def group_addr(self) -> str:
        """
        Multicast group IP address.
        """
        return pulumi.get(self, "group_addr")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Flow ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sourceAddr")
    def source_addr(self) -> str:
        """
        Multicast source IP address.
        """
        return pulumi.get(self, "source_addr")


@pulumi.output_type
class GetOspf6AreaResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 default_cost: int,
                 id: str,
                 ipsec_auth_alg: str,
                 ipsec_enc_alg: str,
                 ipsec_keys: Sequence['outputs.GetOspf6AreaIpsecKeyResult'],
                 key_rollover_interval: int,
                 nssa_default_information_originate: str,
                 nssa_default_information_originate_metric: int,
                 nssa_default_information_originate_metric_type: str,
                 nssa_redistribution: str,
                 nssa_translator_role: str,
                 ranges: Sequence['outputs.GetOspf6AreaRangeResult'],
                 stub_type: str,
                 type: str,
                 virtual_links: Sequence['outputs.GetOspf6AreaVirtualLinkResult']):
        """
        :param str authentication: Authentication mode.
        :param int default_cost: Summary default cost of stub or NSSA area.
        :param str id: Summary address entry ID.
        :param str ipsec_auth_alg: Authentication algorithm.
        :param str ipsec_enc_alg: Encryption algorithm.
        :param Sequence['GetOspf6AreaIpsecKeyArgs'] ipsec_keys: IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        :param int key_rollover_interval: Key roll-over interval.
        :param str nssa_default_information_originate: Enable/disable originate type 7 default into NSSA area.
        :param int nssa_default_information_originate_metric: OSPFv3 default metric.
        :param str nssa_default_information_originate_metric_type: OSPFv3 metric type for default routes.
        :param str nssa_redistribution: Enable/disable redistribute into NSSA area.
        :param str nssa_translator_role: NSSA translator role type.
        :param Sequence['GetOspf6AreaRangeArgs'] ranges: OSPF6 area range configuration. The structure of `range` block is documented below.
        :param str stub_type: Stub summary setting.
        :param str type: Area type setting.
        :param Sequence['GetOspf6AreaVirtualLinkArgs'] virtual_links: OSPF6 virtual link configuration. The structure of `virtual_link` block is documented below.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "default_cost", default_cost)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        pulumi.set(__self__, "nssa_redistribution", nssa_redistribution)
        pulumi.set(__self__, "nssa_translator_role", nssa_translator_role)
        pulumi.set(__self__, "ranges", ranges)
        pulumi.set(__self__, "stub_type", stub_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "virtual_links", virtual_links)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        """
        Authentication mode.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="defaultCost")
    def default_cost(self) -> int:
        """
        Summary default cost of stub or NSSA area.
        """
        return pulumi.get(self, "default_cost")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Summary address entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> str:
        """
        Authentication algorithm.
        """
        return pulumi.get(self, "ipsec_auth_alg")

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> str:
        """
        Encryption algorithm.
        """
        return pulumi.get(self, "ipsec_enc_alg")

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Sequence['outputs.GetOspf6AreaIpsecKeyResult']:
        """
        IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        """
        return pulumi.get(self, "ipsec_keys")

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> int:
        """
        Key roll-over interval.
        """
        return pulumi.get(self, "key_rollover_interval")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> str:
        """
        Enable/disable originate type 7 default into NSSA area.
        """
        return pulumi.get(self, "nssa_default_information_originate")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> int:
        """
        OSPFv3 default metric.
        """
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> str:
        """
        OSPFv3 metric type for default routes.
        """
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @property
    @pulumi.getter(name="nssaRedistribution")
    def nssa_redistribution(self) -> str:
        """
        Enable/disable redistribute into NSSA area.
        """
        return pulumi.get(self, "nssa_redistribution")

    @property
    @pulumi.getter(name="nssaTranslatorRole")
    def nssa_translator_role(self) -> str:
        """
        NSSA translator role type.
        """
        return pulumi.get(self, "nssa_translator_role")

    @property
    @pulumi.getter
    def ranges(self) -> Sequence['outputs.GetOspf6AreaRangeResult']:
        """
        OSPF6 area range configuration. The structure of `range` block is documented below.
        """
        return pulumi.get(self, "ranges")

    @property
    @pulumi.getter(name="stubType")
    def stub_type(self) -> str:
        """
        Stub summary setting.
        """
        return pulumi.get(self, "stub_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Area type setting.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualLinks")
    def virtual_links(self) -> Sequence['outputs.GetOspf6AreaVirtualLinkResult']:
        """
        OSPF6 virtual link configuration. The structure of `virtual_link` block is documented below.
        """
        return pulumi.get(self, "virtual_links")


@pulumi.output_type
class GetOspf6AreaIpsecKeyResult(dict):
    def __init__(__self__, *,
                 auth_key: str,
                 enc_key: str,
                 spi: int):
        """
        :param str auth_key: Authentication key.
        :param str enc_key: Encryption key.
        :param int spi: Security Parameters Index.
        """
        pulumi.set(__self__, "auth_key", auth_key)
        pulumi.set(__self__, "enc_key", enc_key)
        pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> str:
        """
        Authentication key.
        """
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> str:
        """
        Encryption key.
        """
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def spi(self) -> int:
        """
        Security Parameters Index.
        """
        return pulumi.get(self, "spi")


@pulumi.output_type
class GetOspf6AreaRangeResult(dict):
    def __init__(__self__, *,
                 advertise: str,
                 id: int,
                 prefix6: str):
        """
        :param str advertise: Enable/disable advertise status.
        :param int id: Summary address entry ID.
        :param str prefix6: IPv6 prefix.
        """
        pulumi.set(__self__, "advertise", advertise)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def advertise(self) -> str:
        """
        Enable/disable advertise status.
        """
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Summary address entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class GetOspf6AreaVirtualLinkResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 dead_interval: int,
                 hello_interval: int,
                 ipsec_auth_alg: str,
                 ipsec_enc_alg: str,
                 ipsec_keys: Sequence['outputs.GetOspf6AreaVirtualLinkIpsecKeyResult'],
                 key_rollover_interval: int,
                 name: str,
                 peer: str,
                 retransmit_interval: int,
                 transmit_delay: int):
        """
        :param str authentication: Authentication mode.
        :param int dead_interval: Dead interval.
        :param int hello_interval: Hello interval.
        :param str ipsec_auth_alg: Authentication algorithm.
        :param str ipsec_enc_alg: Encryption algorithm.
        :param Sequence['GetOspf6AreaVirtualLinkIpsecKeyArgs'] ipsec_keys: IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        :param int key_rollover_interval: Key roll-over interval.
        :param str name: Passive interface name.
        :param str peer: A.B.C.D, peer router ID.
        :param int retransmit_interval: Retransmit interval.
        :param int transmit_delay: Transmit delay.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "peer", peer)
        pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        """
        Authentication mode.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> int:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> int:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> str:
        """
        Authentication algorithm.
        """
        return pulumi.get(self, "ipsec_auth_alg")

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> str:
        """
        Encryption algorithm.
        """
        return pulumi.get(self, "ipsec_enc_alg")

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Sequence['outputs.GetOspf6AreaVirtualLinkIpsecKeyResult']:
        """
        IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        """
        return pulumi.get(self, "ipsec_keys")

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> int:
        """
        Key roll-over interval.
        """
        return pulumi.get(self, "key_rollover_interval")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Passive interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peer(self) -> str:
        """
        A.B.C.D, peer router ID.
        """
        return pulumi.get(self, "peer")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> int:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> int:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class GetOspf6AreaVirtualLinkIpsecKeyResult(dict):
    def __init__(__self__, *,
                 auth_key: str,
                 enc_key: str,
                 spi: int):
        """
        :param str auth_key: Authentication key.
        :param str enc_key: Encryption key.
        :param int spi: Security Parameters Index.
        """
        pulumi.set(__self__, "auth_key", auth_key)
        pulumi.set(__self__, "enc_key", enc_key)
        pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> str:
        """
        Authentication key.
        """
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> str:
        """
        Encryption key.
        """
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def spi(self) -> int:
        """
        Security Parameters Index.
        """
        return pulumi.get(self, "spi")


@pulumi.output_type
class GetOspf6Ospf6InterfaceResult(dict):
    def __init__(__self__, *,
                 area_id: str,
                 authentication: str,
                 bfd: str,
                 cost: int,
                 dead_interval: int,
                 hello_interval: int,
                 interface: str,
                 ipsec_auth_alg: str,
                 ipsec_enc_alg: str,
                 ipsec_keys: Sequence['outputs.GetOspf6Ospf6InterfaceIpsecKeyResult'],
                 key_rollover_interval: int,
                 mtu: int,
                 mtu_ignore: str,
                 name: str,
                 neighbors: Sequence['outputs.GetOspf6Ospf6InterfaceNeighborResult'],
                 network_type: str,
                 priority: int,
                 retransmit_interval: int,
                 status: str,
                 transmit_delay: int):
        """
        :param str area_id: A.B.C.D, in IPv4 address format.
        :param str authentication: Authentication mode.
        :param str bfd: Enable/disable Bidirectional Forwarding Detection (BFD).
        :param int cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param int dead_interval: Dead interval.
        :param int hello_interval: Hello interval.
        :param str interface: Configuration interface name.
        :param str ipsec_auth_alg: Authentication algorithm.
        :param str ipsec_enc_alg: Encryption algorithm.
        :param Sequence['GetOspf6Ospf6InterfaceIpsecKeyArgs'] ipsec_keys: IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        :param int key_rollover_interval: Key roll-over interval.
        :param int mtu: MTU for OSPFv3 packets.
        :param str mtu_ignore: Enable/disable ignoring MTU field in DBD packets.
        :param str name: Passive interface name.
        :param Sequence['GetOspf6Ospf6InterfaceNeighborArgs'] neighbors: OSPFv3 neighbors are used when OSPFv3 runs on non-broadcast media The structure of `neighbor` block is documented below.
        :param str network_type: Network type.
        :param int priority: priority
        :param int retransmit_interval: Retransmit interval.
        :param str status: status
        :param int transmit_delay: Transmit delay.
        """
        pulumi.set(__self__, "area_id", area_id)
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "bfd", bfd)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        pulumi.set(__self__, "mtu", mtu)
        pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "neighbors", neighbors)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> str:
        """
        A.B.C.D, in IPv4 address format.
        """
        return pulumi.get(self, "area_id")

    @property
    @pulumi.getter
    def authentication(self) -> str:
        """
        Authentication mode.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def bfd(self) -> str:
        """
        Enable/disable Bidirectional Forwarding Detection (BFD).
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter
    def cost(self) -> int:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> int:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> int:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Configuration interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> str:
        """
        Authentication algorithm.
        """
        return pulumi.get(self, "ipsec_auth_alg")

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> str:
        """
        Encryption algorithm.
        """
        return pulumi.get(self, "ipsec_enc_alg")

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Sequence['outputs.GetOspf6Ospf6InterfaceIpsecKeyResult']:
        """
        IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        """
        return pulumi.get(self, "ipsec_keys")

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> int:
        """
        Key roll-over interval.
        """
        return pulumi.get(self, "key_rollover_interval")

    @property
    @pulumi.getter
    def mtu(self) -> int:
        """
        MTU for OSPFv3 packets.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> str:
        """
        Enable/disable ignoring MTU field in DBD packets.
        """
        return pulumi.get(self, "mtu_ignore")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Passive interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def neighbors(self) -> Sequence['outputs.GetOspf6Ospf6InterfaceNeighborResult']:
        """
        OSPFv3 neighbors are used when OSPFv3 runs on non-broadcast media The structure of `neighbor` block is documented below.
        """
        return pulumi.get(self, "neighbors")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        """
        Network type.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        priority
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> int:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> int:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class GetOspf6Ospf6InterfaceIpsecKeyResult(dict):
    def __init__(__self__, *,
                 auth_key: str,
                 enc_key: str,
                 spi: int):
        """
        :param str auth_key: Authentication key.
        :param str enc_key: Encryption key.
        :param int spi: Security Parameters Index.
        """
        pulumi.set(__self__, "auth_key", auth_key)
        pulumi.set(__self__, "enc_key", enc_key)
        pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> str:
        """
        Authentication key.
        """
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> str:
        """
        Encryption key.
        """
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def spi(self) -> int:
        """
        Security Parameters Index.
        """
        return pulumi.get(self, "spi")


@pulumi.output_type
class GetOspf6Ospf6InterfaceNeighborResult(dict):
    def __init__(__self__, *,
                 cost: int,
                 ip6: str,
                 poll_interval: int,
                 priority: int):
        """
        :param int cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param str ip6: IPv6 link local address of the neighbor.
        :param int poll_interval: Poll interval time in seconds.
        :param int priority: priority
        """
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "ip6", ip6)
        pulumi.set(__self__, "poll_interval", poll_interval)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> int:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def ip6(self) -> str:
        """
        IPv6 link local address of the neighbor.
        """
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> int:
        """
        Poll interval time in seconds.
        """
        return pulumi.get(self, "poll_interval")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        priority
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetOspf6PassiveInterfaceResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Passive interface name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Passive interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetOspf6RedistributeResult(dict):
    def __init__(__self__, *,
                 metric: int,
                 metric_type: str,
                 name: str,
                 routemap: str,
                 status: str):
        """
        :param int metric: Redistribute metric setting.
        :param str metric_type: Metric type.
        :param str name: Passive interface name.
        :param str routemap: Route map name.
        :param str status: status
        """
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "routemap", routemap)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> int:
        """
        Redistribute metric setting.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        """
        Metric type.
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Passive interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> str:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetOspf6SummaryAddressResult(dict):
    def __init__(__self__, *,
                 advertise: str,
                 id: int,
                 prefix6: str,
                 tag: int):
        """
        :param str advertise: Enable/disable advertise status.
        :param int id: Summary address entry ID.
        :param str prefix6: IPv6 prefix.
        :param int tag: Tag value.
        """
        pulumi.set(__self__, "advertise", advertise)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix6", prefix6)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def advertise(self) -> str:
        """
        Enable/disable advertise status.
        """
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Summary address entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")

    @property
    @pulumi.getter
    def tag(self) -> int:
        """
        Tag value.
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetOspfAreaResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 comments: str,
                 default_cost: int,
                 filter_lists: Sequence['outputs.GetOspfAreaFilterListResult'],
                 id: str,
                 nssa_default_information_originate: str,
                 nssa_default_information_originate_metric: int,
                 nssa_default_information_originate_metric_type: str,
                 nssa_redistribution: str,
                 nssa_translator_role: str,
                 ranges: Sequence['outputs.GetOspfAreaRangeResult'],
                 shortcut: str,
                 stub_type: str,
                 type: str,
                 virtual_links: Sequence['outputs.GetOspfAreaVirtualLinkResult']):
        """
        :param str authentication: Authentication type.
        :param str comments: Comment.
        :param int default_cost: Summary default cost of stub or NSSA area.
        :param Sequence['GetOspfAreaFilterListArgs'] filter_lists: OSPF area filter-list configuration. The structure of `filter_list` block is documented below.
        :param str id: Distribute list entry ID.
        :param str nssa_default_information_originate: Redistribute, advertise, or do not originate Type-7 default route into NSSA area.
        :param int nssa_default_information_originate_metric: OSPF default metric.
        :param str nssa_default_information_originate_metric_type: OSPF metric type for default routes.
        :param str nssa_redistribution: Enable/disable redistribute into NSSA area.
        :param str nssa_translator_role: NSSA translator role type.
        :param Sequence['GetOspfAreaRangeArgs'] ranges: OSPF area range configuration. The structure of `range` block is documented below.
        :param str shortcut: Enable/disable shortcut option.
        :param str stub_type: Stub summary setting.
        :param str type: Area type setting.
        :param Sequence['GetOspfAreaVirtualLinkArgs'] virtual_links: OSPF virtual link configuration. The structure of `virtual_link` block is documented below.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "default_cost", default_cost)
        pulumi.set(__self__, "filter_lists", filter_lists)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        pulumi.set(__self__, "nssa_redistribution", nssa_redistribution)
        pulumi.set(__self__, "nssa_translator_role", nssa_translator_role)
        pulumi.set(__self__, "ranges", ranges)
        pulumi.set(__self__, "shortcut", shortcut)
        pulumi.set(__self__, "stub_type", stub_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "virtual_links", virtual_links)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        """
        Authentication type.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="defaultCost")
    def default_cost(self) -> int:
        """
        Summary default cost of stub or NSSA area.
        """
        return pulumi.get(self, "default_cost")

    @property
    @pulumi.getter(name="filterLists")
    def filter_lists(self) -> Sequence['outputs.GetOspfAreaFilterListResult']:
        """
        OSPF area filter-list configuration. The structure of `filter_list` block is documented below.
        """
        return pulumi.get(self, "filter_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> str:
        """
        Redistribute, advertise, or do not originate Type-7 default route into NSSA area.
        """
        return pulumi.get(self, "nssa_default_information_originate")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> int:
        """
        OSPF default metric.
        """
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> str:
        """
        OSPF metric type for default routes.
        """
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @property
    @pulumi.getter(name="nssaRedistribution")
    def nssa_redistribution(self) -> str:
        """
        Enable/disable redistribute into NSSA area.
        """
        return pulumi.get(self, "nssa_redistribution")

    @property
    @pulumi.getter(name="nssaTranslatorRole")
    def nssa_translator_role(self) -> str:
        """
        NSSA translator role type.
        """
        return pulumi.get(self, "nssa_translator_role")

    @property
    @pulumi.getter
    def ranges(self) -> Sequence['outputs.GetOspfAreaRangeResult']:
        """
        OSPF area range configuration. The structure of `range` block is documented below.
        """
        return pulumi.get(self, "ranges")

    @property
    @pulumi.getter
    def shortcut(self) -> str:
        """
        Enable/disable shortcut option.
        """
        return pulumi.get(self, "shortcut")

    @property
    @pulumi.getter(name="stubType")
    def stub_type(self) -> str:
        """
        Stub summary setting.
        """
        return pulumi.get(self, "stub_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Area type setting.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualLinks")
    def virtual_links(self) -> Sequence['outputs.GetOspfAreaVirtualLinkResult']:
        """
        OSPF virtual link configuration. The structure of `virtual_link` block is documented below.
        """
        return pulumi.get(self, "virtual_links")


@pulumi.output_type
class GetOspfAreaFilterListResult(dict):
    def __init__(__self__, *,
                 direction: str,
                 id: int,
                 list: str):
        """
        :param str direction: Direction.
        :param int id: Distribute list entry ID.
        :param str list: Access-list or prefix-list name.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "list", list)

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        Direction.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def list(self) -> str:
        """
        Access-list or prefix-list name.
        """
        return pulumi.get(self, "list")


@pulumi.output_type
class GetOspfAreaRangeResult(dict):
    def __init__(__self__, *,
                 advertise: str,
                 id: int,
                 prefix: str,
                 substitute: str,
                 substitute_status: str):
        """
        :param str advertise: Enable/disable advertise status.
        :param int id: Distribute list entry ID.
        :param str prefix: Prefix.
        :param str substitute: Substitute prefix.
        :param str substitute_status: Enable/disable substitute status.
        """
        pulumi.set(__self__, "advertise", advertise)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "substitute", substitute)
        pulumi.set(__self__, "substitute_status", substitute_status)

    @property
    @pulumi.getter
    def advertise(self) -> str:
        """
        Enable/disable advertise status.
        """
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def substitute(self) -> str:
        """
        Substitute prefix.
        """
        return pulumi.get(self, "substitute")

    @property
    @pulumi.getter(name="substituteStatus")
    def substitute_status(self) -> str:
        """
        Enable/disable substitute status.
        """
        return pulumi.get(self, "substitute_status")


@pulumi.output_type
class GetOspfAreaVirtualLinkResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 authentication_key: str,
                 dead_interval: int,
                 hello_interval: int,
                 keychain: str,
                 md5_key: str,
                 md5_keychain: str,
                 md5_keys: Sequence['outputs.GetOspfAreaVirtualLinkMd5KeyResult'],
                 name: str,
                 peer: str,
                 retransmit_interval: int,
                 transmit_delay: int):
        """
        :param str authentication: Authentication type.
        :param str authentication_key: Authentication key.
        :param int dead_interval: Dead interval.
        :param int hello_interval: Hello interval.
        :param str keychain: Message-digest key-chain name.
        :param str md5_key: MD5 key.
        :param str md5_keychain: Authentication MD5 key-chain name.
        :param Sequence['GetOspfAreaVirtualLinkMd5KeyArgs'] md5_keys: MD5 key. The structure of `md5_keys` block is documented below.
        :param str name: Redistribute name.
        :param str peer: Peer IP.
        :param int retransmit_interval: Retransmit interval.
        :param int transmit_delay: Transmit delay.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "authentication_key", authentication_key)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "keychain", keychain)
        pulumi.set(__self__, "md5_key", md5_key)
        pulumi.set(__self__, "md5_keychain", md5_keychain)
        pulumi.set(__self__, "md5_keys", md5_keys)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "peer", peer)
        pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        """
        Authentication type.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> str:
        """
        Authentication key.
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> int:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> int:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def keychain(self) -> str:
        """
        Message-digest key-chain name.
        """
        return pulumi.get(self, "keychain")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> str:
        """
        MD5 key.
        """
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> str:
        """
        Authentication MD5 key-chain name.
        """
        return pulumi.get(self, "md5_keychain")

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> Sequence['outputs.GetOspfAreaVirtualLinkMd5KeyResult']:
        """
        MD5 key. The structure of `md5_keys` block is documented below.
        """
        return pulumi.get(self, "md5_keys")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Redistribute name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peer(self) -> str:
        """
        Peer IP.
        """
        return pulumi.get(self, "peer")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> int:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> int:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class GetOspfAreaVirtualLinkMd5KeyResult(dict):
    def __init__(__self__, *,
                 id: int,
                 key_string: str):
        """
        :param int id: Distribute list entry ID.
        :param str key_string: Password for the key.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> str:
        """
        Password for the key.
        """
        return pulumi.get(self, "key_string")


@pulumi.output_type
class GetOspfDistributeListResult(dict):
    def __init__(__self__, *,
                 access_list: str,
                 id: int,
                 protocol: str):
        """
        :param str access_list: Access list name.
        :param int id: Distribute list entry ID.
        :param str protocol: Protocol type.
        """
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> str:
        """
        Access list name.
        """
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol type.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetOspfNeighborResult(dict):
    def __init__(__self__, *,
                 cost: int,
                 id: int,
                 ip: str,
                 poll_interval: int,
                 priority: int):
        """
        :param int cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param int id: Distribute list entry ID.
        :param str ip: Interface IP address of the neighbor.
        :param int poll_interval: Poll interval time in seconds.
        :param int priority: Priority.
        """
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "poll_interval", poll_interval)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> int:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Interface IP address of the neighbor.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> int:
        """
        Poll interval time in seconds.
        """
        return pulumi.get(self, "poll_interval")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetOspfNetworkResult(dict):
    def __init__(__self__, *,
                 area: str,
                 comments: str,
                 id: int,
                 prefix: str):
        """
        :param str area: Attach the network to area.
        :param str comments: Comment.
        :param int id: Distribute list entry ID.
        :param str prefix: Prefix.
        """
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def area(self) -> str:
        """
        Attach the network to area.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetOspfOspfInterfaceResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 authentication_key: str,
                 bfd: str,
                 comments: str,
                 cost: int,
                 database_filter_out: str,
                 dead_interval: int,
                 hello_interval: int,
                 hello_multiplier: int,
                 interface: str,
                 ip: str,
                 keychain: str,
                 md5_key: str,
                 md5_keychain: str,
                 md5_keys: Sequence['outputs.GetOspfOspfInterfaceMd5KeyResult'],
                 mtu: int,
                 mtu_ignore: str,
                 name: str,
                 network_type: str,
                 prefix_length: int,
                 priority: int,
                 resync_timeout: int,
                 retransmit_interval: int,
                 status: str,
                 transmit_delay: int):
        """
        :param str authentication: Authentication type.
        :param str authentication_key: Authentication key.
        :param str bfd: Bidirectional Forwarding Detection (BFD).
        :param str comments: Comment.
        :param int cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param str database_filter_out: Enable/disable control of flooding out LSAs.
        :param int dead_interval: Dead interval.
        :param int hello_interval: Hello interval.
        :param int hello_multiplier: Number of hello packets within dead interval.
        :param str interface: Configuration interface name.
        :param str ip: Interface IP address of the neighbor.
        :param str keychain: Message-digest key-chain name.
        :param str md5_key: MD5 key.
        :param str md5_keychain: Authentication MD5 key-chain name.
        :param Sequence['GetOspfOspfInterfaceMd5KeyArgs'] md5_keys: MD5 key. The structure of `md5_keys` block is documented below.
        :param int mtu: MTU for database description packets.
        :param str mtu_ignore: Enable/disable ignore MTU.
        :param str name: Redistribute name.
        :param str network_type: Network type.
        :param int prefix_length: Prefix length.
        :param int priority: Priority.
        :param int resync_timeout: Graceful restart neighbor resynchronization timeout.
        :param int retransmit_interval: Retransmit interval.
        :param str status: status
        :param int transmit_delay: Transmit delay.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "authentication_key", authentication_key)
        pulumi.set(__self__, "bfd", bfd)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "database_filter_out", database_filter_out)
        pulumi.set(__self__, "dead_interval", dead_interval)
        pulumi.set(__self__, "hello_interval", hello_interval)
        pulumi.set(__self__, "hello_multiplier", hello_multiplier)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "keychain", keychain)
        pulumi.set(__self__, "md5_key", md5_key)
        pulumi.set(__self__, "md5_keychain", md5_keychain)
        pulumi.set(__self__, "md5_keys", md5_keys)
        pulumi.set(__self__, "mtu", mtu)
        pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "prefix_length", prefix_length)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "resync_timeout", resync_timeout)
        pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        """
        Authentication type.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> str:
        """
        Authentication key.
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    def bfd(self) -> str:
        """
        Bidirectional Forwarding Detection (BFD).
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def cost(self) -> int:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="databaseFilterOut")
    def database_filter_out(self) -> str:
        """
        Enable/disable control of flooding out LSAs.
        """
        return pulumi.get(self, "database_filter_out")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> int:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> int:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter(name="helloMultiplier")
    def hello_multiplier(self) -> int:
        """
        Number of hello packets within dead interval.
        """
        return pulumi.get(self, "hello_multiplier")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Configuration interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        Interface IP address of the neighbor.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def keychain(self) -> str:
        """
        Message-digest key-chain name.
        """
        return pulumi.get(self, "keychain")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> str:
        """
        MD5 key.
        """
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> str:
        """
        Authentication MD5 key-chain name.
        """
        return pulumi.get(self, "md5_keychain")

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> Sequence['outputs.GetOspfOspfInterfaceMd5KeyResult']:
        """
        MD5 key. The structure of `md5_keys` block is documented below.
        """
        return pulumi.get(self, "md5_keys")

    @property
    @pulumi.getter
    def mtu(self) -> int:
        """
        MTU for database description packets.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> str:
        """
        Enable/disable ignore MTU.
        """
        return pulumi.get(self, "mtu_ignore")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Redistribute name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        """
        Network type.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> int:
        """
        Prefix length.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="resyncTimeout")
    def resync_timeout(self) -> int:
        """
        Graceful restart neighbor resynchronization timeout.
        """
        return pulumi.get(self, "resync_timeout")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> int:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> int:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")


@pulumi.output_type
class GetOspfOspfInterfaceMd5KeyResult(dict):
    def __init__(__self__, *,
                 id: int,
                 key_string: str):
        """
        :param int id: Distribute list entry ID.
        :param str key_string: Password for the key.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> str:
        """
        Password for the key.
        """
        return pulumi.get(self, "key_string")


@pulumi.output_type
class GetOspfPassiveInterfaceResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Redistribute name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Redistribute name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetOspfRedistributeResult(dict):
    def __init__(__self__, *,
                 metric: int,
                 metric_type: str,
                 name: str,
                 routemap: str,
                 status: str,
                 tag: int):
        """
        :param int metric: Redistribute metric setting.
        :param str metric_type: Metric type.
        :param str name: Redistribute name.
        :param str routemap: Route map name.
        :param str status: status
        :param int tag: Tag value.
        """
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "routemap", routemap)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def metric(self) -> int:
        """
        Redistribute metric setting.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        """
        Metric type.
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Redistribute name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> str:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> int:
        """
        Tag value.
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetOspfSummaryAddressResult(dict):
    def __init__(__self__, *,
                 advertise: str,
                 id: int,
                 prefix: str,
                 tag: int):
        """
        :param str advertise: Enable/disable advertise status.
        :param int id: Distribute list entry ID.
        :param str prefix: Prefix.
        :param int tag: Tag value.
        """
        pulumi.set(__self__, "advertise", advertise)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def advertise(self) -> str:
        """
        Enable/disable advertise status.
        """
        return pulumi.get(self, "advertise")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def tag(self) -> int:
        """
        Tag value.
        """
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetPolicy6DstaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Custom Destination Internet Service name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Custom Destination Internet Service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPolicy6InternetServiceCustomResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Custom Destination Internet Service name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Custom Destination Internet Service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPolicy6InternetServiceIdResult(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: Destination Internet Service ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Destination Internet Service ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPolicy6SrcaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Custom Destination Internet Service name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Custom Destination Internet Service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPolicyDstResult(dict):
    def __init__(__self__, *,
                 subnet: str):
        """
        :param str subnet: IP and mask.
        """
        pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> str:
        """
        IP and mask.
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class GetPolicyDstaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Custom Destination Internet Service name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Custom Destination Internet Service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPolicyInputDeviceResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Custom Destination Internet Service name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Custom Destination Internet Service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPolicyInternetServiceCustomResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Custom Destination Internet Service name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Custom Destination Internet Service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPolicyInternetServiceIdResult(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: Destination Internet Service ID.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Destination Internet Service ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPolicySrcResult(dict):
    def __init__(__self__, *,
                 subnet: str):
        """
        :param str subnet: IP and mask.
        """
        pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> str:
        """
        IP and mask.
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class GetPolicySrcaddrResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Custom Destination Internet Service name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Custom Destination Internet Service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetPrefixlist6RuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 flags: int,
                 ge: int,
                 id: int,
                 le: int,
                 prefix6: str):
        """
        :param str action: Permit or deny packets that match this rule.
        :param int flags: Flags.
        :param int ge: Minimum prefix length to be matched (0 - 128).
        :param int id: Rule ID.
        :param int le: Maximum prefix length to be matched (0 - 128).
        :param str prefix6: IPv6 prefix to define regular filter criteria, such as "any" or subnets.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "ge", ge)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "le", le)
        pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Permit or deny packets that match this rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def flags(self) -> int:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def ge(self) -> int:
        """
        Minimum prefix length to be matched (0 - 128).
        """
        return pulumi.get(self, "ge")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def le(self) -> int:
        """
        Maximum prefix length to be matched (0 - 128).
        """
        return pulumi.get(self, "le")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        """
        IPv6 prefix to define regular filter criteria, such as "any" or subnets.
        """
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class GetPrefixlistRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 flags: int,
                 ge: int,
                 id: int,
                 le: int,
                 prefix: str):
        """
        :param str action: Permit or deny this IP address and netmask prefix.
        :param int flags: Flags.
        :param int ge: Minimum prefix length to be matched (0 - 32).
        :param int id: Rule ID.
        :param int le: Maximum prefix length to be matched (0 - 32).
        :param str prefix: IPv4 prefix to define regular filter criteria, such as "any" or subnets.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "ge", ge)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "le", le)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Permit or deny this IP address and netmask prefix.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def flags(self) -> int:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def ge(self) -> int:
        """
        Minimum prefix length to be matched (0 - 32).
        """
        return pulumi.get(self, "ge")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def le(self) -> int:
        """
        Maximum prefix length to be matched (0 - 32).
        """
        return pulumi.get(self, "le")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        IPv4 prefix to define regular filter criteria, such as "any" or subnets.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetRipDistanceResult(dict):
    def __init__(__self__, *,
                 access_list: str,
                 distance: int,
                 id: int,
                 prefix: str):
        """
        :param str access_list: Access list name.
        :param int distance: Distance (1 - 255).
        :param int id: Offset-list ID.
        :param str prefix: Network prefix.
        """
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "distance", distance)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> str:
        """
        Access list name.
        """
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def distance(self) -> int:
        """
        Distance (1 - 255).
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Network prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetRipDistributeListResult(dict):
    def __init__(__self__, *,
                 direction: str,
                 id: int,
                 interface: str,
                 listname: str,
                 status: str):
        """
        :param str direction: Offset list direction.
        :param int id: Offset-list ID.
        :param str interface: Interface name.
        :param str listname: Distribute access/prefix list name.
        :param str status: status
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "listname", listname)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        Offset list direction.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def listname(self) -> str:
        """
        Distribute access/prefix list name.
        """
        return pulumi.get(self, "listname")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRipInterfaceResult(dict):
    def __init__(__self__, *,
                 auth_keychain: str,
                 auth_mode: str,
                 auth_string: str,
                 flags: int,
                 name: str,
                 receive_version: str,
                 send_version: str,
                 send_version2_broadcast: str,
                 split_horizon: str,
                 split_horizon_status: str):
        """
        :param str auth_keychain: Authentication key-chain name.
        :param str auth_mode: Authentication mode.
        :param str auth_string: Authentication string/password.
        :param int flags: flags
        :param str name: Interface name.
        :param str receive_version: Receive version.
        :param str send_version: Send version.
        :param str send_version2_broadcast: Enable/disable broadcast version 1 compatible packets.
        :param str split_horizon: Enable/disable split horizon.
        :param str split_horizon_status: Enable/disable split horizon.
        """
        pulumi.set(__self__, "auth_keychain", auth_keychain)
        pulumi.set(__self__, "auth_mode", auth_mode)
        pulumi.set(__self__, "auth_string", auth_string)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "receive_version", receive_version)
        pulumi.set(__self__, "send_version", send_version)
        pulumi.set(__self__, "send_version2_broadcast", send_version2_broadcast)
        pulumi.set(__self__, "split_horizon", split_horizon)
        pulumi.set(__self__, "split_horizon_status", split_horizon_status)

    @property
    @pulumi.getter(name="authKeychain")
    def auth_keychain(self) -> str:
        """
        Authentication key-chain name.
        """
        return pulumi.get(self, "auth_keychain")

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> str:
        """
        Authentication mode.
        """
        return pulumi.get(self, "auth_mode")

    @property
    @pulumi.getter(name="authString")
    def auth_string(self) -> str:
        """
        Authentication string/password.
        """
        return pulumi.get(self, "auth_string")

    @property
    @pulumi.getter
    def flags(self) -> int:
        """
        flags
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="receiveVersion")
    def receive_version(self) -> str:
        """
        Receive version.
        """
        return pulumi.get(self, "receive_version")

    @property
    @pulumi.getter(name="sendVersion")
    def send_version(self) -> str:
        """
        Send version.
        """
        return pulumi.get(self, "send_version")

    @property
    @pulumi.getter(name="sendVersion2Broadcast")
    def send_version2_broadcast(self) -> str:
        """
        Enable/disable broadcast version 1 compatible packets.
        """
        return pulumi.get(self, "send_version2_broadcast")

    @property
    @pulumi.getter(name="splitHorizon")
    def split_horizon(self) -> str:
        """
        Enable/disable split horizon.
        """
        return pulumi.get(self, "split_horizon")

    @property
    @pulumi.getter(name="splitHorizonStatus")
    def split_horizon_status(self) -> str:
        """
        Enable/disable split horizon.
        """
        return pulumi.get(self, "split_horizon_status")


@pulumi.output_type
class GetRipNeighborResult(dict):
    def __init__(__self__, *,
                 id: int,
                 ip: str):
        """
        :param int id: Offset-list ID.
        :param str ip: IP address.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP address.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetRipNetworkResult(dict):
    def __init__(__self__, *,
                 id: int,
                 prefix: str):
        """
        :param int id: Offset-list ID.
        :param str prefix: Network prefix.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Network prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetRipOffsetListResult(dict):
    def __init__(__self__, *,
                 access_list: str,
                 direction: str,
                 id: int,
                 interface: str,
                 offset: int,
                 status: str):
        """
        :param str access_list: Access list name.
        :param str direction: Offset list direction.
        :param int id: Offset-list ID.
        :param str interface: Interface name.
        :param int offset: offset
        :param str status: status
        """
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> str:
        """
        Access list name.
        """
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        Offset list direction.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        offset
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRipPassiveInterfaceResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Interface name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRipRedistributeResult(dict):
    def __init__(__self__, *,
                 metric: int,
                 name: str,
                 routemap: str,
                 status: str):
        """
        :param int metric: Redistribute metric setting.
        :param str name: Interface name.
        :param str routemap: Route map name.
        :param str status: status
        """
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "routemap", routemap)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> int:
        """
        Redistribute metric setting.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> str:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRipngAggregateAddressResult(dict):
    def __init__(__self__, *,
                 id: int,
                 prefix6: str):
        """
        :param int id: Offset-list ID.
        :param str prefix6: Aggregate address prefix.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        """
        Aggregate address prefix.
        """
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class GetRipngDistanceResult(dict):
    def __init__(__self__, *,
                 access_list6: str,
                 distance: int,
                 id: int,
                 prefix6: str):
        """
        :param str access_list6: IPv6 access list name.
        :param int distance: Distance (1 - 255).
        :param int id: Offset-list ID.
        :param str prefix6: Aggregate address prefix.
        """
        pulumi.set(__self__, "access_list6", access_list6)
        pulumi.set(__self__, "distance", distance)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter(name="accessList6")
    def access_list6(self) -> str:
        """
        IPv6 access list name.
        """
        return pulumi.get(self, "access_list6")

    @property
    @pulumi.getter
    def distance(self) -> int:
        """
        Distance (1 - 255).
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix6(self) -> str:
        """
        Aggregate address prefix.
        """
        return pulumi.get(self, "prefix6")


@pulumi.output_type
class GetRipngDistributeListResult(dict):
    def __init__(__self__, *,
                 direction: str,
                 id: int,
                 interface: str,
                 listname: str,
                 status: str):
        """
        :param str direction: Offset list direction.
        :param int id: Offset-list ID.
        :param str interface: Interface name.
        :param str listname: Distribute access/prefix list name.
        :param str status: status
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "listname", listname)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        Offset list direction.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def listname(self) -> str:
        """
        Distribute access/prefix list name.
        """
        return pulumi.get(self, "listname")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRipngInterfaceResult(dict):
    def __init__(__self__, *,
                 flags: int,
                 name: str,
                 split_horizon: str,
                 split_horizon_status: str):
        """
        :param int flags: Flags.
        :param str name: Interface name.
        :param str split_horizon: Enable/disable split horizon.
        :param str split_horizon_status: Enable/disable split horizon.
        """
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "split_horizon", split_horizon)
        pulumi.set(__self__, "split_horizon_status", split_horizon_status)

    @property
    @pulumi.getter
    def flags(self) -> int:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="splitHorizon")
    def split_horizon(self) -> str:
        """
        Enable/disable split horizon.
        """
        return pulumi.get(self, "split_horizon")

    @property
    @pulumi.getter(name="splitHorizonStatus")
    def split_horizon_status(self) -> str:
        """
        Enable/disable split horizon.
        """
        return pulumi.get(self, "split_horizon_status")


@pulumi.output_type
class GetRipngNeighborResult(dict):
    def __init__(__self__, *,
                 id: int,
                 interface: str,
                 ip6: str):
        """
        :param int id: Offset-list ID.
        :param str interface: Interface name.
        :param str ip6: IPv6 link-local address.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip6(self) -> str:
        """
        IPv6 link-local address.
        """
        return pulumi.get(self, "ip6")


@pulumi.output_type
class GetRipngNetworkResult(dict):
    def __init__(__self__, *,
                 id: int,
                 prefix: str):
        """
        :param int id: Offset-list ID.
        :param str prefix: Network IPv6 link-local prefix.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Network IPv6 link-local prefix.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetRipngOffsetListResult(dict):
    def __init__(__self__, *,
                 access_list6: str,
                 direction: str,
                 id: int,
                 interface: str,
                 offset: int,
                 status: str):
        """
        :param str access_list6: IPv6 access list name.
        :param str direction: Offset list direction.
        :param int id: Offset-list ID.
        :param str interface: Interface name.
        :param int offset: offset
        :param str status: status
        """
        pulumi.set(__self__, "access_list6", access_list6)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessList6")
    def access_list6(self) -> str:
        """
        IPv6 access list name.
        """
        return pulumi.get(self, "access_list6")

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        Offset list direction.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        offset
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRipngPassiveInterfaceResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Interface name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRipngRedistributeResult(dict):
    def __init__(__self__, *,
                 metric: int,
                 name: str,
                 routemap: str,
                 status: str):
        """
        :param int metric: Redistribute metric setting.
        :param str name: Interface name.
        :param str routemap: Route map name.
        :param str status: status
        """
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "routemap", routemap)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> int:
        """
        Redistribute metric setting.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def routemap(self) -> str:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRoutemapRuleResult(dict):
    def __init__(__self__, *,
                 action: str,
                 id: int,
                 match_as_path: str,
                 match_community: str,
                 match_community_exact: str,
                 match_extcommunity: str,
                 match_extcommunity_exact: str,
                 match_flags: int,
                 match_interface: str,
                 match_ip6_address: str,
                 match_ip6_nexthop: str,
                 match_ip_address: str,
                 match_ip_nexthop: str,
                 match_metric: int,
                 match_origin: str,
                 match_route_type: str,
                 match_tag: int,
                 match_vrf: int,
                 set_aggregator_as: int,
                 set_aggregator_ip: str,
                 set_aspath_action: str,
                 set_aspaths: Sequence['outputs.GetRoutemapRuleSetAspathResult'],
                 set_atomic_aggregate: str,
                 set_communities: Sequence['outputs.GetRoutemapRuleSetCommunityResult'],
                 set_community_additive: str,
                 set_community_delete: str,
                 set_dampening_max_suppress: int,
                 set_dampening_reachability_half_life: int,
                 set_dampening_reuse: int,
                 set_dampening_suppress: int,
                 set_dampening_unreachability_half_life: int,
                 set_extcommunity_rts: Sequence['outputs.GetRoutemapRuleSetExtcommunityRtResult'],
                 set_extcommunity_soos: Sequence['outputs.GetRoutemapRuleSetExtcommunitySooResult'],
                 set_flags: int,
                 set_ip6_nexthop: str,
                 set_ip6_nexthop_local: str,
                 set_ip_nexthop: str,
                 set_ip_prefsrc: str,
                 set_local_preference: int,
                 set_metric: int,
                 set_metric_type: str,
                 set_origin: str,
                 set_originator_id: str,
                 set_priority: int,
                 set_route_tag: int,
                 set_tag: int,
                 set_vpnv4_nexthop: str,
                 set_vpnv6_nexthop: str,
                 set_vpnv6_nexthop_local: str,
                 set_weight: int):
        """
        :param str action: Action.
        :param int id: Rule ID.
        :param str match_as_path: Match BGP AS path list.
        :param str match_community: Match BGP community list.
        :param str match_community_exact: Enable/disable exact matching of communities.
        :param str match_extcommunity: Match BGP extended community list.
        :param str match_extcommunity_exact: Enable/disable exact matching of extended communities.
        :param int match_flags: BGP flag value to match (0 - 65535)
        :param str match_interface: Match interface configuration.
        :param str match_ip6_address: Match IPv6 address permitted by access-list6 or prefix-list6.
        :param str match_ip6_nexthop: Match next hop IPv6 address passed by access-list6 or prefix-list6.
        :param str match_ip_address: Match IP address permitted by access-list or prefix-list.
        :param str match_ip_nexthop: Match next hop IP address passed by access-list or prefix-list.
        :param int match_metric: Match metric for redistribute routes.
        :param str match_origin: Match BGP origin code.
        :param str match_route_type: Match route type.
        :param int match_tag: Match tag.
        :param int match_vrf: Match VRF ID.
        :param int set_aggregator_as: BGP aggregator AS.
        :param str set_aggregator_ip: BGP aggregator IP.
        :param str set_aspath_action: Specify preferred action of set-aspath.
        :param Sequence['GetRoutemapRuleSetAspathArgs'] set_aspaths: Prepend BGP AS path attribute. The structure of `set_aspath` block is documented below.
        :param str set_atomic_aggregate: Enable/disable BGP atomic aggregate attribute.
        :param Sequence['GetRoutemapRuleSetCommunityArgs'] set_communities: BGP community attribute. The structure of `set_community` block is documented below.
        :param str set_community_additive: Enable/disable adding set-community to existing community.
        :param str set_community_delete: Delete communities matching community list.
        :param int set_dampening_max_suppress: Maximum duration to suppress a route (1 - 255 min, 0 = unset).
        :param int set_dampening_reachability_half_life: Reachability half-life time for the penalty (1 - 45 min, 0 = unset).
        :param int set_dampening_reuse: Value to start reusing a route (1 - 20000, 0 = unset).
        :param int set_dampening_suppress: Value to start suppressing a route (1 - 20000, 0 = unset).
        :param int set_dampening_unreachability_half_life: Unreachability Half-life time for the penalty (1 - 45 min, 0 = unset)
        :param Sequence['GetRoutemapRuleSetExtcommunityRtArgs'] set_extcommunity_rts: Route Target extended community. The structure of `set_extcommunity_rt` block is documented below.
        :param Sequence['GetRoutemapRuleSetExtcommunitySooArgs'] set_extcommunity_soos: Site-of-Origin extended community. The structure of `set_extcommunity_soo` block is documented below.
        :param int set_flags: BGP flags value (0 - 65535)
        :param str set_ip6_nexthop: IPv6 global address of next hop.
        :param str set_ip6_nexthop_local: IPv6 local address of next hop.
        :param str set_ip_nexthop: IP address of next hop.
        :param str set_ip_prefsrc: IP address of preferred source.
        :param int set_local_preference: BGP local preference path attribute.
        :param int set_metric: Metric value.
        :param str set_metric_type: Metric type.
        :param str set_origin: BGP origin code.
        :param str set_originator_id: BGP originator ID attribute.
        :param int set_priority: Priority for routing table.
        :param int set_route_tag: Route tag for routing table.
        :param int set_tag: Tag value.
        :param str set_vpnv4_nexthop: IP address of VPNv4 next-hop.
        :param str set_vpnv6_nexthop: IPv6 global address of VPNv6 next-hop.
        :param str set_vpnv6_nexthop_local: IPv6 link-local address of VPNv6 next-hop.
        :param int set_weight: BGP weight for routing table.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "match_as_path", match_as_path)
        pulumi.set(__self__, "match_community", match_community)
        pulumi.set(__self__, "match_community_exact", match_community_exact)
        pulumi.set(__self__, "match_extcommunity", match_extcommunity)
        pulumi.set(__self__, "match_extcommunity_exact", match_extcommunity_exact)
        pulumi.set(__self__, "match_flags", match_flags)
        pulumi.set(__self__, "match_interface", match_interface)
        pulumi.set(__self__, "match_ip6_address", match_ip6_address)
        pulumi.set(__self__, "match_ip6_nexthop", match_ip6_nexthop)
        pulumi.set(__self__, "match_ip_address", match_ip_address)
        pulumi.set(__self__, "match_ip_nexthop", match_ip_nexthop)
        pulumi.set(__self__, "match_metric", match_metric)
        pulumi.set(__self__, "match_origin", match_origin)
        pulumi.set(__self__, "match_route_type", match_route_type)
        pulumi.set(__self__, "match_tag", match_tag)
        pulumi.set(__self__, "match_vrf", match_vrf)
        pulumi.set(__self__, "set_aggregator_as", set_aggregator_as)
        pulumi.set(__self__, "set_aggregator_ip", set_aggregator_ip)
        pulumi.set(__self__, "set_aspath_action", set_aspath_action)
        pulumi.set(__self__, "set_aspaths", set_aspaths)
        pulumi.set(__self__, "set_atomic_aggregate", set_atomic_aggregate)
        pulumi.set(__self__, "set_communities", set_communities)
        pulumi.set(__self__, "set_community_additive", set_community_additive)
        pulumi.set(__self__, "set_community_delete", set_community_delete)
        pulumi.set(__self__, "set_dampening_max_suppress", set_dampening_max_suppress)
        pulumi.set(__self__, "set_dampening_reachability_half_life", set_dampening_reachability_half_life)
        pulumi.set(__self__, "set_dampening_reuse", set_dampening_reuse)
        pulumi.set(__self__, "set_dampening_suppress", set_dampening_suppress)
        pulumi.set(__self__, "set_dampening_unreachability_half_life", set_dampening_unreachability_half_life)
        pulumi.set(__self__, "set_extcommunity_rts", set_extcommunity_rts)
        pulumi.set(__self__, "set_extcommunity_soos", set_extcommunity_soos)
        pulumi.set(__self__, "set_flags", set_flags)
        pulumi.set(__self__, "set_ip6_nexthop", set_ip6_nexthop)
        pulumi.set(__self__, "set_ip6_nexthop_local", set_ip6_nexthop_local)
        pulumi.set(__self__, "set_ip_nexthop", set_ip_nexthop)
        pulumi.set(__self__, "set_ip_prefsrc", set_ip_prefsrc)
        pulumi.set(__self__, "set_local_preference", set_local_preference)
        pulumi.set(__self__, "set_metric", set_metric)
        pulumi.set(__self__, "set_metric_type", set_metric_type)
        pulumi.set(__self__, "set_origin", set_origin)
        pulumi.set(__self__, "set_originator_id", set_originator_id)
        pulumi.set(__self__, "set_priority", set_priority)
        pulumi.set(__self__, "set_route_tag", set_route_tag)
        pulumi.set(__self__, "set_tag", set_tag)
        pulumi.set(__self__, "set_vpnv4_nexthop", set_vpnv4_nexthop)
        pulumi.set(__self__, "set_vpnv6_nexthop", set_vpnv6_nexthop)
        pulumi.set(__self__, "set_vpnv6_nexthop_local", set_vpnv6_nexthop_local)
        pulumi.set(__self__, "set_weight", set_weight)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchAsPath")
    def match_as_path(self) -> str:
        """
        Match BGP AS path list.
        """
        return pulumi.get(self, "match_as_path")

    @property
    @pulumi.getter(name="matchCommunity")
    def match_community(self) -> str:
        """
        Match BGP community list.
        """
        return pulumi.get(self, "match_community")

    @property
    @pulumi.getter(name="matchCommunityExact")
    def match_community_exact(self) -> str:
        """
        Enable/disable exact matching of communities.
        """
        return pulumi.get(self, "match_community_exact")

    @property
    @pulumi.getter(name="matchExtcommunity")
    def match_extcommunity(self) -> str:
        """
        Match BGP extended community list.
        """
        return pulumi.get(self, "match_extcommunity")

    @property
    @pulumi.getter(name="matchExtcommunityExact")
    def match_extcommunity_exact(self) -> str:
        """
        Enable/disable exact matching of extended communities.
        """
        return pulumi.get(self, "match_extcommunity_exact")

    @property
    @pulumi.getter(name="matchFlags")
    def match_flags(self) -> int:
        """
        BGP flag value to match (0 - 65535)
        """
        return pulumi.get(self, "match_flags")

    @property
    @pulumi.getter(name="matchInterface")
    def match_interface(self) -> str:
        """
        Match interface configuration.
        """
        return pulumi.get(self, "match_interface")

    @property
    @pulumi.getter(name="matchIp6Address")
    def match_ip6_address(self) -> str:
        """
        Match IPv6 address permitted by access-list6 or prefix-list6.
        """
        return pulumi.get(self, "match_ip6_address")

    @property
    @pulumi.getter(name="matchIp6Nexthop")
    def match_ip6_nexthop(self) -> str:
        """
        Match next hop IPv6 address passed by access-list6 or prefix-list6.
        """
        return pulumi.get(self, "match_ip6_nexthop")

    @property
    @pulumi.getter(name="matchIpAddress")
    def match_ip_address(self) -> str:
        """
        Match IP address permitted by access-list or prefix-list.
        """
        return pulumi.get(self, "match_ip_address")

    @property
    @pulumi.getter(name="matchIpNexthop")
    def match_ip_nexthop(self) -> str:
        """
        Match next hop IP address passed by access-list or prefix-list.
        """
        return pulumi.get(self, "match_ip_nexthop")

    @property
    @pulumi.getter(name="matchMetric")
    def match_metric(self) -> int:
        """
        Match metric for redistribute routes.
        """
        return pulumi.get(self, "match_metric")

    @property
    @pulumi.getter(name="matchOrigin")
    def match_origin(self) -> str:
        """
        Match BGP origin code.
        """
        return pulumi.get(self, "match_origin")

    @property
    @pulumi.getter(name="matchRouteType")
    def match_route_type(self) -> str:
        """
        Match route type.
        """
        return pulumi.get(self, "match_route_type")

    @property
    @pulumi.getter(name="matchTag")
    def match_tag(self) -> int:
        """
        Match tag.
        """
        return pulumi.get(self, "match_tag")

    @property
    @pulumi.getter(name="matchVrf")
    def match_vrf(self) -> int:
        """
        Match VRF ID.
        """
        return pulumi.get(self, "match_vrf")

    @property
    @pulumi.getter(name="setAggregatorAs")
    def set_aggregator_as(self) -> int:
        """
        BGP aggregator AS.
        """
        return pulumi.get(self, "set_aggregator_as")

    @property
    @pulumi.getter(name="setAggregatorIp")
    def set_aggregator_ip(self) -> str:
        """
        BGP aggregator IP.
        """
        return pulumi.get(self, "set_aggregator_ip")

    @property
    @pulumi.getter(name="setAspathAction")
    def set_aspath_action(self) -> str:
        """
        Specify preferred action of set-aspath.
        """
        return pulumi.get(self, "set_aspath_action")

    @property
    @pulumi.getter(name="setAspaths")
    def set_aspaths(self) -> Sequence['outputs.GetRoutemapRuleSetAspathResult']:
        """
        Prepend BGP AS path attribute. The structure of `set_aspath` block is documented below.
        """
        return pulumi.get(self, "set_aspaths")

    @property
    @pulumi.getter(name="setAtomicAggregate")
    def set_atomic_aggregate(self) -> str:
        """
        Enable/disable BGP atomic aggregate attribute.
        """
        return pulumi.get(self, "set_atomic_aggregate")

    @property
    @pulumi.getter(name="setCommunities")
    def set_communities(self) -> Sequence['outputs.GetRoutemapRuleSetCommunityResult']:
        """
        BGP community attribute. The structure of `set_community` block is documented below.
        """
        return pulumi.get(self, "set_communities")

    @property
    @pulumi.getter(name="setCommunityAdditive")
    def set_community_additive(self) -> str:
        """
        Enable/disable adding set-community to existing community.
        """
        return pulumi.get(self, "set_community_additive")

    @property
    @pulumi.getter(name="setCommunityDelete")
    def set_community_delete(self) -> str:
        """
        Delete communities matching community list.
        """
        return pulumi.get(self, "set_community_delete")

    @property
    @pulumi.getter(name="setDampeningMaxSuppress")
    def set_dampening_max_suppress(self) -> int:
        """
        Maximum duration to suppress a route (1 - 255 min, 0 = unset).
        """
        return pulumi.get(self, "set_dampening_max_suppress")

    @property
    @pulumi.getter(name="setDampeningReachabilityHalfLife")
    def set_dampening_reachability_half_life(self) -> int:
        """
        Reachability half-life time for the penalty (1 - 45 min, 0 = unset).
        """
        return pulumi.get(self, "set_dampening_reachability_half_life")

    @property
    @pulumi.getter(name="setDampeningReuse")
    def set_dampening_reuse(self) -> int:
        """
        Value to start reusing a route (1 - 20000, 0 = unset).
        """
        return pulumi.get(self, "set_dampening_reuse")

    @property
    @pulumi.getter(name="setDampeningSuppress")
    def set_dampening_suppress(self) -> int:
        """
        Value to start suppressing a route (1 - 20000, 0 = unset).
        """
        return pulumi.get(self, "set_dampening_suppress")

    @property
    @pulumi.getter(name="setDampeningUnreachabilityHalfLife")
    def set_dampening_unreachability_half_life(self) -> int:
        """
        Unreachability Half-life time for the penalty (1 - 45 min, 0 = unset)
        """
        return pulumi.get(self, "set_dampening_unreachability_half_life")

    @property
    @pulumi.getter(name="setExtcommunityRts")
    def set_extcommunity_rts(self) -> Sequence['outputs.GetRoutemapRuleSetExtcommunityRtResult']:
        """
        Route Target extended community. The structure of `set_extcommunity_rt` block is documented below.
        """
        return pulumi.get(self, "set_extcommunity_rts")

    @property
    @pulumi.getter(name="setExtcommunitySoos")
    def set_extcommunity_soos(self) -> Sequence['outputs.GetRoutemapRuleSetExtcommunitySooResult']:
        """
        Site-of-Origin extended community. The structure of `set_extcommunity_soo` block is documented below.
        """
        return pulumi.get(self, "set_extcommunity_soos")

    @property
    @pulumi.getter(name="setFlags")
    def set_flags(self) -> int:
        """
        BGP flags value (0 - 65535)
        """
        return pulumi.get(self, "set_flags")

    @property
    @pulumi.getter(name="setIp6Nexthop")
    def set_ip6_nexthop(self) -> str:
        """
        IPv6 global address of next hop.
        """
        return pulumi.get(self, "set_ip6_nexthop")

    @property
    @pulumi.getter(name="setIp6NexthopLocal")
    def set_ip6_nexthop_local(self) -> str:
        """
        IPv6 local address of next hop.
        """
        return pulumi.get(self, "set_ip6_nexthop_local")

    @property
    @pulumi.getter(name="setIpNexthop")
    def set_ip_nexthop(self) -> str:
        """
        IP address of next hop.
        """
        return pulumi.get(self, "set_ip_nexthop")

    @property
    @pulumi.getter(name="setIpPrefsrc")
    def set_ip_prefsrc(self) -> str:
        """
        IP address of preferred source.
        """
        return pulumi.get(self, "set_ip_prefsrc")

    @property
    @pulumi.getter(name="setLocalPreference")
    def set_local_preference(self) -> int:
        """
        BGP local preference path attribute.
        """
        return pulumi.get(self, "set_local_preference")

    @property
    @pulumi.getter(name="setMetric")
    def set_metric(self) -> int:
        """
        Metric value.
        """
        return pulumi.get(self, "set_metric")

    @property
    @pulumi.getter(name="setMetricType")
    def set_metric_type(self) -> str:
        """
        Metric type.
        """
        return pulumi.get(self, "set_metric_type")

    @property
    @pulumi.getter(name="setOrigin")
    def set_origin(self) -> str:
        """
        BGP origin code.
        """
        return pulumi.get(self, "set_origin")

    @property
    @pulumi.getter(name="setOriginatorId")
    def set_originator_id(self) -> str:
        """
        BGP originator ID attribute.
        """
        return pulumi.get(self, "set_originator_id")

    @property
    @pulumi.getter(name="setPriority")
    def set_priority(self) -> int:
        """
        Priority for routing table.
        """
        return pulumi.get(self, "set_priority")

    @property
    @pulumi.getter(name="setRouteTag")
    def set_route_tag(self) -> int:
        """
        Route tag for routing table.
        """
        return pulumi.get(self, "set_route_tag")

    @property
    @pulumi.getter(name="setTag")
    def set_tag(self) -> int:
        """
        Tag value.
        """
        return pulumi.get(self, "set_tag")

    @property
    @pulumi.getter(name="setVpnv4Nexthop")
    def set_vpnv4_nexthop(self) -> str:
        """
        IP address of VPNv4 next-hop.
        """
        return pulumi.get(self, "set_vpnv4_nexthop")

    @property
    @pulumi.getter(name="setVpnv6Nexthop")
    def set_vpnv6_nexthop(self) -> str:
        """
        IPv6 global address of VPNv6 next-hop.
        """
        return pulumi.get(self, "set_vpnv6_nexthop")

    @property
    @pulumi.getter(name="setVpnv6NexthopLocal")
    def set_vpnv6_nexthop_local(self) -> str:
        """
        IPv6 link-local address of VPNv6 next-hop.
        """
        return pulumi.get(self, "set_vpnv6_nexthop_local")

    @property
    @pulumi.getter(name="setWeight")
    def set_weight(self) -> int:
        """
        BGP weight for routing table.
        """
        return pulumi.get(self, "set_weight")


@pulumi.output_type
class GetRoutemapRuleSetAspathResult(dict):
    def __init__(__self__, *,
                 as_: str):
        """
        :param str as_: AS number (0 - 42949672). NOTE: Use quotes for repeating numbers, e.g.: "1 1 2"
        """
        pulumi.set(__self__, "as_", as_)

    @property
    @pulumi.getter(name="as")
    def as_(self) -> str:
        """
        AS number (0 - 42949672). NOTE: Use quotes for repeating numbers, e.g.: "1 1 2"
        """
        return pulumi.get(self, "as_")


@pulumi.output_type
class GetRoutemapRuleSetCommunityResult(dict):
    def __init__(__self__, *,
                 community: str):
        """
        :param str community: AA:NN
        """
        pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> str:
        """
        AA:NN
        """
        return pulumi.get(self, "community")


@pulumi.output_type
class GetRoutemapRuleSetExtcommunityRtResult(dict):
    def __init__(__self__, *,
                 community: str):
        """
        :param str community: AA:NN
        """
        pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> str:
        """
        AA:NN
        """
        return pulumi.get(self, "community")


@pulumi.output_type
class GetRoutemapRuleSetExtcommunitySooResult(dict):
    def __init__(__self__, *,
                 community: str):
        """
        :param str community: AA:NN
        """
        pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> str:
        """
        AA:NN
        """
        return pulumi.get(self, "community")


@pulumi.output_type
class GetStatic6SdwanZoneResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: SD-WAN zone name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        SD-WAN zone name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetStaticSdwanZoneResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: SD-WAN zone name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        SD-WAN zone name.
        """
        return pulumi.get(self, "name")


