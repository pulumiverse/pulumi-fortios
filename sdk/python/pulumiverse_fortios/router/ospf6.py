# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Ospf6Args', 'Ospf6']

@pulumi.input_type
class Ospf6Args:
    def __init__(__self__, *,
                 router_id: pulumi.Input[str],
                 abr_type: Optional[pulumi.Input[str]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6AreaArgs']]]] = None,
                 auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 default_information_metric: Optional[pulumi.Input[int]] = None,
                 default_information_metric_type: Optional[pulumi.Input[str]] = None,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_information_route_map: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 ospf6_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6Ospf6InterfaceArgs']]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6PassiveInterfaceArgs']]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6RedistributeArgs']]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None,
                 restart_on_topology_change: Optional[pulumi.Input[str]] = None,
                 restart_period: Optional[pulumi.Input[int]] = None,
                 spf_timers: Optional[pulumi.Input[str]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6SummaryAddressArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ospf6 resource.
        :param pulumi.Input[str] router_id: A.B.C.D, in IPv4 address format.
        :param pulumi.Input[str] abr_type: Area border router type. Valid values: `cisco`, `ibm`, `standard`.
        :param pulumi.Input[Sequence[pulumi.Input['Ospf6AreaArgs']]] areas: OSPF6 area configuration. The structure of `area` block is documented below.
        :param pulumi.Input[int] auto_cost_ref_bandwidth: Reference bandwidth in terms of megabits per second.
        :param pulumi.Input[str] bfd: Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] default_information_metric: Default information metric.
        :param pulumi.Input[str] default_information_metric_type: Default information metric type. Valid values: `1`, `2`.
        :param pulumi.Input[str] default_information_originate: Enable/disable generation of default route. Valid values: `enable`, `always`, `disable`.
        :param pulumi.Input[str] default_information_route_map: Default information route map.
        :param pulumi.Input[int] default_metric: Default metric of redistribute routes.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] log_neighbour_changes: Enable logging of OSPFv3 neighbour's changes Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['Ospf6Ospf6InterfaceArgs']]] ospf6_interfaces: OSPF6 interface configuration. The structure of `ospf6_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['Ospf6PassiveInterfaceArgs']]] passive_interfaces: Passive interface configuration. The structure of `passive_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['Ospf6RedistributeArgs']]] redistributes: Redistribute configuration. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] restart_mode: OSPFv3 restart mode (graceful or none). Valid values: `none`, `graceful-restart`.
        :param pulumi.Input[str] restart_on_topology_change: Enable/disable continuing graceful restart upon topology change. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] restart_period: Graceful restart period in seconds.
        :param pulumi.Input[str] spf_timers: SPF calculation frequency.
        :param pulumi.Input[Sequence[pulumi.Input['Ospf6SummaryAddressArgs']]] summary_addresses: IPv6 address summary configuration. The structure of `summary_address` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "router_id", router_id)
        if abr_type is not None:
            pulumi.set(__self__, "abr_type", abr_type)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)
        if auto_cost_ref_bandwidth is not None:
            pulumi.set(__self__, "auto_cost_ref_bandwidth", auto_cost_ref_bandwidth)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if default_information_metric is not None:
            pulumi.set(__self__, "default_information_metric", default_information_metric)
        if default_information_metric_type is not None:
            pulumi.set(__self__, "default_information_metric_type", default_information_metric_type)
        if default_information_originate is not None:
            pulumi.set(__self__, "default_information_originate", default_information_originate)
        if default_information_route_map is not None:
            pulumi.set(__self__, "default_information_route_map", default_information_route_map)
        if default_metric is not None:
            pulumi.set(__self__, "default_metric", default_metric)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if log_neighbour_changes is not None:
            pulumi.set(__self__, "log_neighbour_changes", log_neighbour_changes)
        if ospf6_interfaces is not None:
            pulumi.set(__self__, "ospf6_interfaces", ospf6_interfaces)
        if passive_interfaces is not None:
            pulumi.set(__self__, "passive_interfaces", passive_interfaces)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if restart_mode is not None:
            pulumi.set(__self__, "restart_mode", restart_mode)
        if restart_on_topology_change is not None:
            pulumi.set(__self__, "restart_on_topology_change", restart_on_topology_change)
        if restart_period is not None:
            pulumi.set(__self__, "restart_period", restart_period)
        if spf_timers is not None:
            pulumi.set(__self__, "spf_timers", spf_timers)
        if summary_addresses is not None:
            pulumi.set(__self__, "summary_addresses", summary_addresses)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Input[str]:
        """
        A.B.C.D, in IPv4 address format.
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="abrType")
    def abr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Area border router type. Valid values: `cisco`, `ibm`, `standard`.
        """
        return pulumi.get(self, "abr_type")

    @abr_type.setter
    def abr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abr_type", value)

    @property
    @pulumi.getter
    def areas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6AreaArgs']]]]:
        """
        OSPF6 area configuration. The structure of `area` block is documented below.
        """
        return pulumi.get(self, "areas")

    @areas.setter
    def areas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6AreaArgs']]]]):
        pulumi.set(self, "areas", value)

    @property
    @pulumi.getter(name="autoCostRefBandwidth")
    def auto_cost_ref_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Reference bandwidth in terms of megabits per second.
        """
        return pulumi.get(self, "auto_cost_ref_bandwidth")

    @auto_cost_ref_bandwidth.setter
    def auto_cost_ref_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_cost_ref_bandwidth", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="defaultInformationMetric")
    def default_information_metric(self) -> Optional[pulumi.Input[int]]:
        """
        Default information metric.
        """
        return pulumi.get(self, "default_information_metric")

    @default_information_metric.setter
    def default_information_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_information_metric", value)

    @property
    @pulumi.getter(name="defaultInformationMetricType")
    def default_information_metric_type(self) -> Optional[pulumi.Input[str]]:
        """
        Default information metric type. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "default_information_metric_type")

    @default_information_metric_type.setter
    def default_information_metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_metric_type", value)

    @property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable generation of default route. Valid values: `enable`, `always`, `disable`.
        """
        return pulumi.get(self, "default_information_originate")

    @default_information_originate.setter
    def default_information_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_originate", value)

    @property
    @pulumi.getter(name="defaultInformationRouteMap")
    def default_information_route_map(self) -> Optional[pulumi.Input[str]]:
        """
        Default information route map.
        """
        return pulumi.get(self, "default_information_route_map")

    @default_information_route_map.setter
    def default_information_route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_route_map", value)

    @property
    @pulumi.getter(name="defaultMetric")
    def default_metric(self) -> Optional[pulumi.Input[int]]:
        """
        Default metric of redistribute routes.
        """
        return pulumi.get(self, "default_metric")

    @default_metric.setter
    def default_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_metric", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="logNeighbourChanges")
    def log_neighbour_changes(self) -> Optional[pulumi.Input[str]]:
        """
        Enable logging of OSPFv3 neighbour's changes Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_neighbour_changes")

    @log_neighbour_changes.setter
    def log_neighbour_changes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_neighbour_changes", value)

    @property
    @pulumi.getter(name="ospf6Interfaces")
    def ospf6_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6Ospf6InterfaceArgs']]]]:
        """
        OSPF6 interface configuration. The structure of `ospf6_interface` block is documented below.
        """
        return pulumi.get(self, "ospf6_interfaces")

    @ospf6_interfaces.setter
    def ospf6_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6Ospf6InterfaceArgs']]]]):
        pulumi.set(self, "ospf6_interfaces", value)

    @property
    @pulumi.getter(name="passiveInterfaces")
    def passive_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6PassiveInterfaceArgs']]]]:
        """
        Passive interface configuration. The structure of `passive_interface` block is documented below.
        """
        return pulumi.get(self, "passive_interfaces")

    @passive_interfaces.setter
    def passive_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6PassiveInterfaceArgs']]]]):
        pulumi.set(self, "passive_interfaces", value)

    @property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6RedistributeArgs']]]]:
        """
        Redistribute configuration. The structure of `redistribute` block is documented below.
        """
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6RedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @property
    @pulumi.getter(name="restartMode")
    def restart_mode(self) -> Optional[pulumi.Input[str]]:
        """
        OSPFv3 restart mode (graceful or none). Valid values: `none`, `graceful-restart`.
        """
        return pulumi.get(self, "restart_mode")

    @restart_mode.setter
    def restart_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_mode", value)

    @property
    @pulumi.getter(name="restartOnTopologyChange")
    def restart_on_topology_change(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable continuing graceful restart upon topology change. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restart_on_topology_change")

    @restart_on_topology_change.setter
    def restart_on_topology_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_on_topology_change", value)

    @property
    @pulumi.getter(name="restartPeriod")
    def restart_period(self) -> Optional[pulumi.Input[int]]:
        """
        Graceful restart period in seconds.
        """
        return pulumi.get(self, "restart_period")

    @restart_period.setter
    def restart_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restart_period", value)

    @property
    @pulumi.getter(name="spfTimers")
    def spf_timers(self) -> Optional[pulumi.Input[str]]:
        """
        SPF calculation frequency.
        """
        return pulumi.get(self, "spf_timers")

    @spf_timers.setter
    def spf_timers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spf_timers", value)

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6SummaryAddressArgs']]]]:
        """
        IPv6 address summary configuration. The structure of `summary_address` block is documented below.
        """
        return pulumi.get(self, "summary_addresses")

    @summary_addresses.setter
    def summary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6SummaryAddressArgs']]]]):
        pulumi.set(self, "summary_addresses", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _Ospf6State:
    def __init__(__self__, *,
                 abr_type: Optional[pulumi.Input[str]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6AreaArgs']]]] = None,
                 auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 default_information_metric: Optional[pulumi.Input[int]] = None,
                 default_information_metric_type: Optional[pulumi.Input[str]] = None,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_information_route_map: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 ospf6_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6Ospf6InterfaceArgs']]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6PassiveInterfaceArgs']]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6RedistributeArgs']]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None,
                 restart_on_topology_change: Optional[pulumi.Input[str]] = None,
                 restart_period: Optional[pulumi.Input[int]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 spf_timers: Optional[pulumi.Input[str]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6SummaryAddressArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ospf6 resources.
        :param pulumi.Input[str] abr_type: Area border router type. Valid values: `cisco`, `ibm`, `standard`.
        :param pulumi.Input[Sequence[pulumi.Input['Ospf6AreaArgs']]] areas: OSPF6 area configuration. The structure of `area` block is documented below.
        :param pulumi.Input[int] auto_cost_ref_bandwidth: Reference bandwidth in terms of megabits per second.
        :param pulumi.Input[str] bfd: Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] default_information_metric: Default information metric.
        :param pulumi.Input[str] default_information_metric_type: Default information metric type. Valid values: `1`, `2`.
        :param pulumi.Input[str] default_information_originate: Enable/disable generation of default route. Valid values: `enable`, `always`, `disable`.
        :param pulumi.Input[str] default_information_route_map: Default information route map.
        :param pulumi.Input[int] default_metric: Default metric of redistribute routes.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] log_neighbour_changes: Enable logging of OSPFv3 neighbour's changes Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['Ospf6Ospf6InterfaceArgs']]] ospf6_interfaces: OSPF6 interface configuration. The structure of `ospf6_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['Ospf6PassiveInterfaceArgs']]] passive_interfaces: Passive interface configuration. The structure of `passive_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['Ospf6RedistributeArgs']]] redistributes: Redistribute configuration. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] restart_mode: OSPFv3 restart mode (graceful or none). Valid values: `none`, `graceful-restart`.
        :param pulumi.Input[str] restart_on_topology_change: Enable/disable continuing graceful restart upon topology change. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] restart_period: Graceful restart period in seconds.
        :param pulumi.Input[str] router_id: A.B.C.D, in IPv4 address format.
        :param pulumi.Input[str] spf_timers: SPF calculation frequency.
        :param pulumi.Input[Sequence[pulumi.Input['Ospf6SummaryAddressArgs']]] summary_addresses: IPv6 address summary configuration. The structure of `summary_address` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if abr_type is not None:
            pulumi.set(__self__, "abr_type", abr_type)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)
        if auto_cost_ref_bandwidth is not None:
            pulumi.set(__self__, "auto_cost_ref_bandwidth", auto_cost_ref_bandwidth)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if default_information_metric is not None:
            pulumi.set(__self__, "default_information_metric", default_information_metric)
        if default_information_metric_type is not None:
            pulumi.set(__self__, "default_information_metric_type", default_information_metric_type)
        if default_information_originate is not None:
            pulumi.set(__self__, "default_information_originate", default_information_originate)
        if default_information_route_map is not None:
            pulumi.set(__self__, "default_information_route_map", default_information_route_map)
        if default_metric is not None:
            pulumi.set(__self__, "default_metric", default_metric)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if log_neighbour_changes is not None:
            pulumi.set(__self__, "log_neighbour_changes", log_neighbour_changes)
        if ospf6_interfaces is not None:
            pulumi.set(__self__, "ospf6_interfaces", ospf6_interfaces)
        if passive_interfaces is not None:
            pulumi.set(__self__, "passive_interfaces", passive_interfaces)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if restart_mode is not None:
            pulumi.set(__self__, "restart_mode", restart_mode)
        if restart_on_topology_change is not None:
            pulumi.set(__self__, "restart_on_topology_change", restart_on_topology_change)
        if restart_period is not None:
            pulumi.set(__self__, "restart_period", restart_period)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if spf_timers is not None:
            pulumi.set(__self__, "spf_timers", spf_timers)
        if summary_addresses is not None:
            pulumi.set(__self__, "summary_addresses", summary_addresses)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="abrType")
    def abr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Area border router type. Valid values: `cisco`, `ibm`, `standard`.
        """
        return pulumi.get(self, "abr_type")

    @abr_type.setter
    def abr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abr_type", value)

    @property
    @pulumi.getter
    def areas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6AreaArgs']]]]:
        """
        OSPF6 area configuration. The structure of `area` block is documented below.
        """
        return pulumi.get(self, "areas")

    @areas.setter
    def areas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6AreaArgs']]]]):
        pulumi.set(self, "areas", value)

    @property
    @pulumi.getter(name="autoCostRefBandwidth")
    def auto_cost_ref_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Reference bandwidth in terms of megabits per second.
        """
        return pulumi.get(self, "auto_cost_ref_bandwidth")

    @auto_cost_ref_bandwidth.setter
    def auto_cost_ref_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_cost_ref_bandwidth", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="defaultInformationMetric")
    def default_information_metric(self) -> Optional[pulumi.Input[int]]:
        """
        Default information metric.
        """
        return pulumi.get(self, "default_information_metric")

    @default_information_metric.setter
    def default_information_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_information_metric", value)

    @property
    @pulumi.getter(name="defaultInformationMetricType")
    def default_information_metric_type(self) -> Optional[pulumi.Input[str]]:
        """
        Default information metric type. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "default_information_metric_type")

    @default_information_metric_type.setter
    def default_information_metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_metric_type", value)

    @property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable generation of default route. Valid values: `enable`, `always`, `disable`.
        """
        return pulumi.get(self, "default_information_originate")

    @default_information_originate.setter
    def default_information_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_originate", value)

    @property
    @pulumi.getter(name="defaultInformationRouteMap")
    def default_information_route_map(self) -> Optional[pulumi.Input[str]]:
        """
        Default information route map.
        """
        return pulumi.get(self, "default_information_route_map")

    @default_information_route_map.setter
    def default_information_route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_route_map", value)

    @property
    @pulumi.getter(name="defaultMetric")
    def default_metric(self) -> Optional[pulumi.Input[int]]:
        """
        Default metric of redistribute routes.
        """
        return pulumi.get(self, "default_metric")

    @default_metric.setter
    def default_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_metric", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="logNeighbourChanges")
    def log_neighbour_changes(self) -> Optional[pulumi.Input[str]]:
        """
        Enable logging of OSPFv3 neighbour's changes Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_neighbour_changes")

    @log_neighbour_changes.setter
    def log_neighbour_changes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_neighbour_changes", value)

    @property
    @pulumi.getter(name="ospf6Interfaces")
    def ospf6_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6Ospf6InterfaceArgs']]]]:
        """
        OSPF6 interface configuration. The structure of `ospf6_interface` block is documented below.
        """
        return pulumi.get(self, "ospf6_interfaces")

    @ospf6_interfaces.setter
    def ospf6_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6Ospf6InterfaceArgs']]]]):
        pulumi.set(self, "ospf6_interfaces", value)

    @property
    @pulumi.getter(name="passiveInterfaces")
    def passive_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6PassiveInterfaceArgs']]]]:
        """
        Passive interface configuration. The structure of `passive_interface` block is documented below.
        """
        return pulumi.get(self, "passive_interfaces")

    @passive_interfaces.setter
    def passive_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6PassiveInterfaceArgs']]]]):
        pulumi.set(self, "passive_interfaces", value)

    @property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6RedistributeArgs']]]]:
        """
        Redistribute configuration. The structure of `redistribute` block is documented below.
        """
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6RedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @property
    @pulumi.getter(name="restartMode")
    def restart_mode(self) -> Optional[pulumi.Input[str]]:
        """
        OSPFv3 restart mode (graceful or none). Valid values: `none`, `graceful-restart`.
        """
        return pulumi.get(self, "restart_mode")

    @restart_mode.setter
    def restart_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_mode", value)

    @property
    @pulumi.getter(name="restartOnTopologyChange")
    def restart_on_topology_change(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable continuing graceful restart upon topology change. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restart_on_topology_change")

    @restart_on_topology_change.setter
    def restart_on_topology_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_on_topology_change", value)

    @property
    @pulumi.getter(name="restartPeriod")
    def restart_period(self) -> Optional[pulumi.Input[int]]:
        """
        Graceful restart period in seconds.
        """
        return pulumi.get(self, "restart_period")

    @restart_period.setter
    def restart_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restart_period", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        A.B.C.D, in IPv4 address format.
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="spfTimers")
    def spf_timers(self) -> Optional[pulumi.Input[str]]:
        """
        SPF calculation frequency.
        """
        return pulumi.get(self, "spf_timers")

    @spf_timers.setter
    def spf_timers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spf_timers", value)

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6SummaryAddressArgs']]]]:
        """
        IPv6 address summary configuration. The structure of `summary_address` block is documented below.
        """
        return pulumi.get(self, "summary_addresses")

    @summary_addresses.setter
    def summary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ospf6SummaryAddressArgs']]]]):
        pulumi.set(self, "summary_addresses", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Ospf6(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abr_type: Optional[pulumi.Input[str]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6AreaArgs']]]]] = None,
                 auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 default_information_metric: Optional[pulumi.Input[int]] = None,
                 default_information_metric_type: Optional[pulumi.Input[str]] = None,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_information_route_map: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 ospf6_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6Ospf6InterfaceArgs']]]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6PassiveInterfaceArgs']]]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6RedistributeArgs']]]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None,
                 restart_on_topology_change: Optional[pulumi.Input[str]] = None,
                 restart_period: Optional[pulumi.Input[int]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 spf_timers: Optional[pulumi.Input[str]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6SummaryAddressArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure IPv6 OSPF.

        > The provider supports the definition of Ospf6-Interface in Router Ospf6 `router.Ospf6`, and also allows the definition of separate Ospf6-Interface resources `router/ospf6.Ospf6interface`, but do not use a `router.Ospf6` with in-line Ospf6-Interface in conjunction with any `router/ospf6.Ospf6interface` resources, otherwise conflicts and overwrite will occur.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.router.Ospf6("trname",
            abr_type="standard",
            auto_cost_ref_bandwidth=1000,
            bfd="disable",
            default_information_metric=10,
            default_information_metric_type="2",
            default_information_originate="disable",
            default_metric=10,
            log_neighbour_changes="enable",
            redistributes=[
                fortios.router.Ospf6RedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="connected",
                    status="disable",
                ),
                fortios.router.Ospf6RedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="static",
                    status="disable",
                ),
                fortios.router.Ospf6RedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="rip",
                    status="disable",
                ),
                fortios.router.Ospf6RedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="bgp",
                    status="disable",
                ),
                fortios.router.Ospf6RedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="isis",
                    status="disable",
                ),
            ],
            router_id="0.0.0.0",
            spf_timers="5 10")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Router Ospf6 can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:router/ospf6:Ospf6 labelname RouterOspf6
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:router/ospf6:Ospf6 labelname RouterOspf6
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] abr_type: Area border router type. Valid values: `cisco`, `ibm`, `standard`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6AreaArgs']]]] areas: OSPF6 area configuration. The structure of `area` block is documented below.
        :param pulumi.Input[int] auto_cost_ref_bandwidth: Reference bandwidth in terms of megabits per second.
        :param pulumi.Input[str] bfd: Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] default_information_metric: Default information metric.
        :param pulumi.Input[str] default_information_metric_type: Default information metric type. Valid values: `1`, `2`.
        :param pulumi.Input[str] default_information_originate: Enable/disable generation of default route. Valid values: `enable`, `always`, `disable`.
        :param pulumi.Input[str] default_information_route_map: Default information route map.
        :param pulumi.Input[int] default_metric: Default metric of redistribute routes.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] log_neighbour_changes: Enable logging of OSPFv3 neighbour's changes Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6Ospf6InterfaceArgs']]]] ospf6_interfaces: OSPF6 interface configuration. The structure of `ospf6_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6PassiveInterfaceArgs']]]] passive_interfaces: Passive interface configuration. The structure of `passive_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6RedistributeArgs']]]] redistributes: Redistribute configuration. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] restart_mode: OSPFv3 restart mode (graceful or none). Valid values: `none`, `graceful-restart`.
        :param pulumi.Input[str] restart_on_topology_change: Enable/disable continuing graceful restart upon topology change. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] restart_period: Graceful restart period in seconds.
        :param pulumi.Input[str] router_id: A.B.C.D, in IPv4 address format.
        :param pulumi.Input[str] spf_timers: SPF calculation frequency.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6SummaryAddressArgs']]]] summary_addresses: IPv6 address summary configuration. The structure of `summary_address` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Ospf6Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure IPv6 OSPF.

        > The provider supports the definition of Ospf6-Interface in Router Ospf6 `router.Ospf6`, and also allows the definition of separate Ospf6-Interface resources `router/ospf6.Ospf6interface`, but do not use a `router.Ospf6` with in-line Ospf6-Interface in conjunction with any `router/ospf6.Ospf6interface` resources, otherwise conflicts and overwrite will occur.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.router.Ospf6("trname",
            abr_type="standard",
            auto_cost_ref_bandwidth=1000,
            bfd="disable",
            default_information_metric=10,
            default_information_metric_type="2",
            default_information_originate="disable",
            default_metric=10,
            log_neighbour_changes="enable",
            redistributes=[
                fortios.router.Ospf6RedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="connected",
                    status="disable",
                ),
                fortios.router.Ospf6RedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="static",
                    status="disable",
                ),
                fortios.router.Ospf6RedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="rip",
                    status="disable",
                ),
                fortios.router.Ospf6RedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="bgp",
                    status="disable",
                ),
                fortios.router.Ospf6RedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="isis",
                    status="disable",
                ),
            ],
            router_id="0.0.0.0",
            spf_timers="5 10")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Router Ospf6 can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:router/ospf6:Ospf6 labelname RouterOspf6
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:router/ospf6:Ospf6 labelname RouterOspf6
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param Ospf6Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Ospf6Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abr_type: Optional[pulumi.Input[str]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6AreaArgs']]]]] = None,
                 auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 default_information_metric: Optional[pulumi.Input[int]] = None,
                 default_information_metric_type: Optional[pulumi.Input[str]] = None,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_information_route_map: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 ospf6_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6Ospf6InterfaceArgs']]]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6PassiveInterfaceArgs']]]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6RedistributeArgs']]]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None,
                 restart_on_topology_change: Optional[pulumi.Input[str]] = None,
                 restart_period: Optional[pulumi.Input[int]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 spf_timers: Optional[pulumi.Input[str]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6SummaryAddressArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Ospf6Args.__new__(Ospf6Args)

            __props__.__dict__["abr_type"] = abr_type
            __props__.__dict__["areas"] = areas
            __props__.__dict__["auto_cost_ref_bandwidth"] = auto_cost_ref_bandwidth
            __props__.__dict__["bfd"] = bfd
            __props__.__dict__["default_information_metric"] = default_information_metric
            __props__.__dict__["default_information_metric_type"] = default_information_metric_type
            __props__.__dict__["default_information_originate"] = default_information_originate
            __props__.__dict__["default_information_route_map"] = default_information_route_map
            __props__.__dict__["default_metric"] = default_metric
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["log_neighbour_changes"] = log_neighbour_changes
            __props__.__dict__["ospf6_interfaces"] = ospf6_interfaces
            __props__.__dict__["passive_interfaces"] = passive_interfaces
            __props__.__dict__["redistributes"] = redistributes
            __props__.__dict__["restart_mode"] = restart_mode
            __props__.__dict__["restart_on_topology_change"] = restart_on_topology_change
            __props__.__dict__["restart_period"] = restart_period
            if router_id is None and not opts.urn:
                raise TypeError("Missing required property 'router_id'")
            __props__.__dict__["router_id"] = router_id
            __props__.__dict__["spf_timers"] = spf_timers
            __props__.__dict__["summary_addresses"] = summary_addresses
            __props__.__dict__["vdomparam"] = vdomparam
        super(Ospf6, __self__).__init__(
            'fortios:router/ospf6:Ospf6',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abr_type: Optional[pulumi.Input[str]] = None,
            areas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6AreaArgs']]]]] = None,
            auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
            bfd: Optional[pulumi.Input[str]] = None,
            default_information_metric: Optional[pulumi.Input[int]] = None,
            default_information_metric_type: Optional[pulumi.Input[str]] = None,
            default_information_originate: Optional[pulumi.Input[str]] = None,
            default_information_route_map: Optional[pulumi.Input[str]] = None,
            default_metric: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            log_neighbour_changes: Optional[pulumi.Input[str]] = None,
            ospf6_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6Ospf6InterfaceArgs']]]]] = None,
            passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6PassiveInterfaceArgs']]]]] = None,
            redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6RedistributeArgs']]]]] = None,
            restart_mode: Optional[pulumi.Input[str]] = None,
            restart_on_topology_change: Optional[pulumi.Input[str]] = None,
            restart_period: Optional[pulumi.Input[int]] = None,
            router_id: Optional[pulumi.Input[str]] = None,
            spf_timers: Optional[pulumi.Input[str]] = None,
            summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6SummaryAddressArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Ospf6':
        """
        Get an existing Ospf6 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] abr_type: Area border router type. Valid values: `cisco`, `ibm`, `standard`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6AreaArgs']]]] areas: OSPF6 area configuration. The structure of `area` block is documented below.
        :param pulumi.Input[int] auto_cost_ref_bandwidth: Reference bandwidth in terms of megabits per second.
        :param pulumi.Input[str] bfd: Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] default_information_metric: Default information metric.
        :param pulumi.Input[str] default_information_metric_type: Default information metric type. Valid values: `1`, `2`.
        :param pulumi.Input[str] default_information_originate: Enable/disable generation of default route. Valid values: `enable`, `always`, `disable`.
        :param pulumi.Input[str] default_information_route_map: Default information route map.
        :param pulumi.Input[int] default_metric: Default metric of redistribute routes.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] log_neighbour_changes: Enable logging of OSPFv3 neighbour's changes Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6Ospf6InterfaceArgs']]]] ospf6_interfaces: OSPF6 interface configuration. The structure of `ospf6_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6PassiveInterfaceArgs']]]] passive_interfaces: Passive interface configuration. The structure of `passive_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6RedistributeArgs']]]] redistributes: Redistribute configuration. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] restart_mode: OSPFv3 restart mode (graceful or none). Valid values: `none`, `graceful-restart`.
        :param pulumi.Input[str] restart_on_topology_change: Enable/disable continuing graceful restart upon topology change. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] restart_period: Graceful restart period in seconds.
        :param pulumi.Input[str] router_id: A.B.C.D, in IPv4 address format.
        :param pulumi.Input[str] spf_timers: SPF calculation frequency.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ospf6SummaryAddressArgs']]]] summary_addresses: IPv6 address summary configuration. The structure of `summary_address` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Ospf6State.__new__(_Ospf6State)

        __props__.__dict__["abr_type"] = abr_type
        __props__.__dict__["areas"] = areas
        __props__.__dict__["auto_cost_ref_bandwidth"] = auto_cost_ref_bandwidth
        __props__.__dict__["bfd"] = bfd
        __props__.__dict__["default_information_metric"] = default_information_metric
        __props__.__dict__["default_information_metric_type"] = default_information_metric_type
        __props__.__dict__["default_information_originate"] = default_information_originate
        __props__.__dict__["default_information_route_map"] = default_information_route_map
        __props__.__dict__["default_metric"] = default_metric
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["log_neighbour_changes"] = log_neighbour_changes
        __props__.__dict__["ospf6_interfaces"] = ospf6_interfaces
        __props__.__dict__["passive_interfaces"] = passive_interfaces
        __props__.__dict__["redistributes"] = redistributes
        __props__.__dict__["restart_mode"] = restart_mode
        __props__.__dict__["restart_on_topology_change"] = restart_on_topology_change
        __props__.__dict__["restart_period"] = restart_period
        __props__.__dict__["router_id"] = router_id
        __props__.__dict__["spf_timers"] = spf_timers
        __props__.__dict__["summary_addresses"] = summary_addresses
        __props__.__dict__["vdomparam"] = vdomparam
        return Ospf6(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="abrType")
    def abr_type(self) -> pulumi.Output[str]:
        """
        Area border router type. Valid values: `cisco`, `ibm`, `standard`.
        """
        return pulumi.get(self, "abr_type")

    @property
    @pulumi.getter
    def areas(self) -> pulumi.Output[Optional[Sequence['outputs.Ospf6Area']]]:
        """
        OSPF6 area configuration. The structure of `area` block is documented below.
        """
        return pulumi.get(self, "areas")

    @property
    @pulumi.getter(name="autoCostRefBandwidth")
    def auto_cost_ref_bandwidth(self) -> pulumi.Output[int]:
        """
        Reference bandwidth in terms of megabits per second.
        """
        return pulumi.get(self, "auto_cost_ref_bandwidth")

    @property
    @pulumi.getter
    def bfd(self) -> pulumi.Output[str]:
        """
        Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="defaultInformationMetric")
    def default_information_metric(self) -> pulumi.Output[int]:
        """
        Default information metric.
        """
        return pulumi.get(self, "default_information_metric")

    @property
    @pulumi.getter(name="defaultInformationMetricType")
    def default_information_metric_type(self) -> pulumi.Output[str]:
        """
        Default information metric type. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "default_information_metric_type")

    @property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> pulumi.Output[str]:
        """
        Enable/disable generation of default route. Valid values: `enable`, `always`, `disable`.
        """
        return pulumi.get(self, "default_information_originate")

    @property
    @pulumi.getter(name="defaultInformationRouteMap")
    def default_information_route_map(self) -> pulumi.Output[str]:
        """
        Default information route map.
        """
        return pulumi.get(self, "default_information_route_map")

    @property
    @pulumi.getter(name="defaultMetric")
    def default_metric(self) -> pulumi.Output[int]:
        """
        Default metric of redistribute routes.
        """
        return pulumi.get(self, "default_metric")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="logNeighbourChanges")
    def log_neighbour_changes(self) -> pulumi.Output[str]:
        """
        Enable logging of OSPFv3 neighbour's changes Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_neighbour_changes")

    @property
    @pulumi.getter(name="ospf6Interfaces")
    def ospf6_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.Ospf6Ospf6Interface']]]:
        """
        OSPF6 interface configuration. The structure of `ospf6_interface` block is documented below.
        """
        return pulumi.get(self, "ospf6_interfaces")

    @property
    @pulumi.getter(name="passiveInterfaces")
    def passive_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.Ospf6PassiveInterface']]]:
        """
        Passive interface configuration. The structure of `passive_interface` block is documented below.
        """
        return pulumi.get(self, "passive_interfaces")

    @property
    @pulumi.getter
    def redistributes(self) -> pulumi.Output[Optional[Sequence['outputs.Ospf6Redistribute']]]:
        """
        Redistribute configuration. The structure of `redistribute` block is documented below.
        """
        return pulumi.get(self, "redistributes")

    @property
    @pulumi.getter(name="restartMode")
    def restart_mode(self) -> pulumi.Output[str]:
        """
        OSPFv3 restart mode (graceful or none). Valid values: `none`, `graceful-restart`.
        """
        return pulumi.get(self, "restart_mode")

    @property
    @pulumi.getter(name="restartOnTopologyChange")
    def restart_on_topology_change(self) -> pulumi.Output[str]:
        """
        Enable/disable continuing graceful restart upon topology change. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restart_on_topology_change")

    @property
    @pulumi.getter(name="restartPeriod")
    def restart_period(self) -> pulumi.Output[int]:
        """
        Graceful restart period in seconds.
        """
        return pulumi.get(self, "restart_period")

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Output[str]:
        """
        A.B.C.D, in IPv4 address format.
        """
        return pulumi.get(self, "router_id")

    @property
    @pulumi.getter(name="spfTimers")
    def spf_timers(self) -> pulumi.Output[str]:
        """
        SPF calculation frequency.
        """
        return pulumi.get(self, "spf_timers")

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.Ospf6SummaryAddress']]]:
        """
        IPv6 address summary configuration. The structure of `summary_address` block is documented below.
        """
        return pulumi.get(self, "summary_addresses")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

