# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OspfArgs', 'Ospf']

@pulumi.input_type
class OspfArgs:
    def __init__(__self__, *,
                 router_id: pulumi.Input[str],
                 abr_type: Optional[pulumi.Input[str]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input['OspfAreaArgs']]]] = None,
                 auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 database_overflow: Optional[pulumi.Input[str]] = None,
                 database_overflow_max_lsas: Optional[pulumi.Input[int]] = None,
                 database_overflow_time_to_recover: Optional[pulumi.Input[int]] = None,
                 default_information_metric: Optional[pulumi.Input[int]] = None,
                 default_information_metric_type: Optional[pulumi.Input[str]] = None,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_information_route_map: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 distance_external: Optional[pulumi.Input[int]] = None,
                 distance_inter_area: Optional[pulumi.Input[int]] = None,
                 distance_intra_area: Optional[pulumi.Input[int]] = None,
                 distribute_list_in: Optional[pulumi.Input[str]] = None,
                 distribute_lists: Optional[pulumi.Input[Sequence[pulumi.Input['OspfDistributeListArgs']]]] = None,
                 distribute_route_map_in: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['OspfNeighborArgs']]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['OspfNetworkArgs']]]] = None,
                 ospf_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['OspfOspfInterfaceArgs']]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['OspfPassiveInterfaceArgs']]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['OspfRedistributeArgs']]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None,
                 restart_on_topology_change: Optional[pulumi.Input[str]] = None,
                 restart_period: Optional[pulumi.Input[int]] = None,
                 rfc1583_compatible: Optional[pulumi.Input[str]] = None,
                 spf_timers: Optional[pulumi.Input[str]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['OspfSummaryAddressArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ospf resource.
        :param pulumi.Input[str] router_id: Router ID.
        :param pulumi.Input[str] abr_type: Area border router type. Valid values: `cisco`, `ibm`, `shortcut`, `standard`.
        :param pulumi.Input[Sequence[pulumi.Input['OspfAreaArgs']]] areas: OSPF area configuration. The structure of `area` block is documented below.
        :param pulumi.Input[int] auto_cost_ref_bandwidth: Reference bandwidth in terms of megabits per second.
        :param pulumi.Input[str] bfd: Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] database_overflow: Enable/disable database overflow. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] database_overflow_max_lsas: Database overflow maximum LSAs.
        :param pulumi.Input[int] database_overflow_time_to_recover: Database overflow time to recover (sec).
        :param pulumi.Input[int] default_information_metric: Default information metric.
        :param pulumi.Input[str] default_information_metric_type: Default information metric type. Valid values: `1`, `2`.
        :param pulumi.Input[str] default_information_originate: Enable/disable generation of default route. Valid values: `enable`, `always`, `disable`.
        :param pulumi.Input[str] default_information_route_map: Default information route map.
        :param pulumi.Input[int] default_metric: Default metric of redistribute routes.
        :param pulumi.Input[int] distance: Distance of the route.
        :param pulumi.Input[int] distance_external: Administrative external distance.
        :param pulumi.Input[int] distance_inter_area: Administrative inter-area distance.
        :param pulumi.Input[int] distance_intra_area: Administrative intra-area distance.
        :param pulumi.Input[str] distribute_list_in: Filter incoming routes.
        :param pulumi.Input[Sequence[pulumi.Input['OspfDistributeListArgs']]] distribute_lists: Distribute list configuration. The structure of `distribute_list` block is documented below.
        :param pulumi.Input[str] distribute_route_map_in: Filter incoming external routes by route-map.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] log_neighbour_changes: Enable logging of OSPF neighbour's changes Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['OspfNeighborArgs']]] neighbors: OSPF neighbor configuration are used when OSPF runs on non-broadcast media The structure of `neighbor` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['OspfNetworkArgs']]] networks: OSPF network configuration. The structure of `network` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['OspfOspfInterfaceArgs']]] ospf_interfaces: OSPF interface configuration. The structure of `ospf_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['OspfPassiveInterfaceArgs']]] passive_interfaces: Passive interface configuration. The structure of `passive_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['OspfRedistributeArgs']]] redistributes: Redistribute configuration. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] restart_mode: OSPF restart mode (graceful or LLS). Valid values: `none`, `lls`, `graceful-restart`.
        :param pulumi.Input[str] restart_on_topology_change: Enable/disable continuing graceful restart upon topology change. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] restart_period: Graceful restart period.
        :param pulumi.Input[str] rfc1583_compatible: Enable/disable RFC1583 compatibility. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] spf_timers: SPF calculation frequency.
        :param pulumi.Input[Sequence[pulumi.Input['OspfSummaryAddressArgs']]] summary_addresses: IP address summary configuration. The structure of `summary_address` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "router_id", router_id)
        if abr_type is not None:
            pulumi.set(__self__, "abr_type", abr_type)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)
        if auto_cost_ref_bandwidth is not None:
            pulumi.set(__self__, "auto_cost_ref_bandwidth", auto_cost_ref_bandwidth)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if database_overflow is not None:
            pulumi.set(__self__, "database_overflow", database_overflow)
        if database_overflow_max_lsas is not None:
            pulumi.set(__self__, "database_overflow_max_lsas", database_overflow_max_lsas)
        if database_overflow_time_to_recover is not None:
            pulumi.set(__self__, "database_overflow_time_to_recover", database_overflow_time_to_recover)
        if default_information_metric is not None:
            pulumi.set(__self__, "default_information_metric", default_information_metric)
        if default_information_metric_type is not None:
            pulumi.set(__self__, "default_information_metric_type", default_information_metric_type)
        if default_information_originate is not None:
            pulumi.set(__self__, "default_information_originate", default_information_originate)
        if default_information_route_map is not None:
            pulumi.set(__self__, "default_information_route_map", default_information_route_map)
        if default_metric is not None:
            pulumi.set(__self__, "default_metric", default_metric)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if distance_external is not None:
            pulumi.set(__self__, "distance_external", distance_external)
        if distance_inter_area is not None:
            pulumi.set(__self__, "distance_inter_area", distance_inter_area)
        if distance_intra_area is not None:
            pulumi.set(__self__, "distance_intra_area", distance_intra_area)
        if distribute_list_in is not None:
            pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        if distribute_lists is not None:
            pulumi.set(__self__, "distribute_lists", distribute_lists)
        if distribute_route_map_in is not None:
            pulumi.set(__self__, "distribute_route_map_in", distribute_route_map_in)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if log_neighbour_changes is not None:
            pulumi.set(__self__, "log_neighbour_changes", log_neighbour_changes)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if ospf_interfaces is not None:
            pulumi.set(__self__, "ospf_interfaces", ospf_interfaces)
        if passive_interfaces is not None:
            pulumi.set(__self__, "passive_interfaces", passive_interfaces)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if restart_mode is not None:
            pulumi.set(__self__, "restart_mode", restart_mode)
        if restart_on_topology_change is not None:
            pulumi.set(__self__, "restart_on_topology_change", restart_on_topology_change)
        if restart_period is not None:
            pulumi.set(__self__, "restart_period", restart_period)
        if rfc1583_compatible is not None:
            pulumi.set(__self__, "rfc1583_compatible", rfc1583_compatible)
        if spf_timers is not None:
            pulumi.set(__self__, "spf_timers", spf_timers)
        if summary_addresses is not None:
            pulumi.set(__self__, "summary_addresses", summary_addresses)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Input[str]:
        """
        Router ID.
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="abrType")
    def abr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Area border router type. Valid values: `cisco`, `ibm`, `shortcut`, `standard`.
        """
        return pulumi.get(self, "abr_type")

    @abr_type.setter
    def abr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abr_type", value)

    @property
    @pulumi.getter
    def areas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfAreaArgs']]]]:
        """
        OSPF area configuration. The structure of `area` block is documented below.
        """
        return pulumi.get(self, "areas")

    @areas.setter
    def areas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfAreaArgs']]]]):
        pulumi.set(self, "areas", value)

    @property
    @pulumi.getter(name="autoCostRefBandwidth")
    def auto_cost_ref_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Reference bandwidth in terms of megabits per second.
        """
        return pulumi.get(self, "auto_cost_ref_bandwidth")

    @auto_cost_ref_bandwidth.setter
    def auto_cost_ref_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_cost_ref_bandwidth", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="databaseOverflow")
    def database_overflow(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable database overflow. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "database_overflow")

    @database_overflow.setter
    def database_overflow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_overflow", value)

    @property
    @pulumi.getter(name="databaseOverflowMaxLsas")
    def database_overflow_max_lsas(self) -> Optional[pulumi.Input[int]]:
        """
        Database overflow maximum LSAs.
        """
        return pulumi.get(self, "database_overflow_max_lsas")

    @database_overflow_max_lsas.setter
    def database_overflow_max_lsas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "database_overflow_max_lsas", value)

    @property
    @pulumi.getter(name="databaseOverflowTimeToRecover")
    def database_overflow_time_to_recover(self) -> Optional[pulumi.Input[int]]:
        """
        Database overflow time to recover (sec).
        """
        return pulumi.get(self, "database_overflow_time_to_recover")

    @database_overflow_time_to_recover.setter
    def database_overflow_time_to_recover(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "database_overflow_time_to_recover", value)

    @property
    @pulumi.getter(name="defaultInformationMetric")
    def default_information_metric(self) -> Optional[pulumi.Input[int]]:
        """
        Default information metric.
        """
        return pulumi.get(self, "default_information_metric")

    @default_information_metric.setter
    def default_information_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_information_metric", value)

    @property
    @pulumi.getter(name="defaultInformationMetricType")
    def default_information_metric_type(self) -> Optional[pulumi.Input[str]]:
        """
        Default information metric type. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "default_information_metric_type")

    @default_information_metric_type.setter
    def default_information_metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_metric_type", value)

    @property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable generation of default route. Valid values: `enable`, `always`, `disable`.
        """
        return pulumi.get(self, "default_information_originate")

    @default_information_originate.setter
    def default_information_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_originate", value)

    @property
    @pulumi.getter(name="defaultInformationRouteMap")
    def default_information_route_map(self) -> Optional[pulumi.Input[str]]:
        """
        Default information route map.
        """
        return pulumi.get(self, "default_information_route_map")

    @default_information_route_map.setter
    def default_information_route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_route_map", value)

    @property
    @pulumi.getter(name="defaultMetric")
    def default_metric(self) -> Optional[pulumi.Input[int]]:
        """
        Default metric of redistribute routes.
        """
        return pulumi.get(self, "default_metric")

    @default_metric.setter
    def default_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_metric", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Distance of the route.
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="distanceExternal")
    def distance_external(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative external distance.
        """
        return pulumi.get(self, "distance_external")

    @distance_external.setter
    def distance_external(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance_external", value)

    @property
    @pulumi.getter(name="distanceInterArea")
    def distance_inter_area(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative inter-area distance.
        """
        return pulumi.get(self, "distance_inter_area")

    @distance_inter_area.setter
    def distance_inter_area(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance_inter_area", value)

    @property
    @pulumi.getter(name="distanceIntraArea")
    def distance_intra_area(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative intra-area distance.
        """
        return pulumi.get(self, "distance_intra_area")

    @distance_intra_area.setter
    def distance_intra_area(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance_intra_area", value)

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> Optional[pulumi.Input[str]]:
        """
        Filter incoming routes.
        """
        return pulumi.get(self, "distribute_list_in")

    @distribute_list_in.setter
    def distribute_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in", value)

    @property
    @pulumi.getter(name="distributeLists")
    def distribute_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfDistributeListArgs']]]]:
        """
        Distribute list configuration. The structure of `distribute_list` block is documented below.
        """
        return pulumi.get(self, "distribute_lists")

    @distribute_lists.setter
    def distribute_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfDistributeListArgs']]]]):
        pulumi.set(self, "distribute_lists", value)

    @property
    @pulumi.getter(name="distributeRouteMapIn")
    def distribute_route_map_in(self) -> Optional[pulumi.Input[str]]:
        """
        Filter incoming external routes by route-map.
        """
        return pulumi.get(self, "distribute_route_map_in")

    @distribute_route_map_in.setter
    def distribute_route_map_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_route_map_in", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="logNeighbourChanges")
    def log_neighbour_changes(self) -> Optional[pulumi.Input[str]]:
        """
        Enable logging of OSPF neighbour's changes Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_neighbour_changes")

    @log_neighbour_changes.setter
    def log_neighbour_changes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_neighbour_changes", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfNeighborArgs']]]]:
        """
        OSPF neighbor configuration are used when OSPF runs on non-broadcast media The structure of `neighbor` block is documented below.
        """
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfNeighborArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfNetworkArgs']]]]:
        """
        OSPF network configuration. The structure of `network` block is documented below.
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="ospfInterfaces")
    def ospf_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfOspfInterfaceArgs']]]]:
        """
        OSPF interface configuration. The structure of `ospf_interface` block is documented below.
        """
        return pulumi.get(self, "ospf_interfaces")

    @ospf_interfaces.setter
    def ospf_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfOspfInterfaceArgs']]]]):
        pulumi.set(self, "ospf_interfaces", value)

    @property
    @pulumi.getter(name="passiveInterfaces")
    def passive_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfPassiveInterfaceArgs']]]]:
        """
        Passive interface configuration. The structure of `passive_interface` block is documented below.
        """
        return pulumi.get(self, "passive_interfaces")

    @passive_interfaces.setter
    def passive_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfPassiveInterfaceArgs']]]]):
        pulumi.set(self, "passive_interfaces", value)

    @property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfRedistributeArgs']]]]:
        """
        Redistribute configuration. The structure of `redistribute` block is documented below.
        """
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @property
    @pulumi.getter(name="restartMode")
    def restart_mode(self) -> Optional[pulumi.Input[str]]:
        """
        OSPF restart mode (graceful or LLS). Valid values: `none`, `lls`, `graceful-restart`.
        """
        return pulumi.get(self, "restart_mode")

    @restart_mode.setter
    def restart_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_mode", value)

    @property
    @pulumi.getter(name="restartOnTopologyChange")
    def restart_on_topology_change(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable continuing graceful restart upon topology change. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restart_on_topology_change")

    @restart_on_topology_change.setter
    def restart_on_topology_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_on_topology_change", value)

    @property
    @pulumi.getter(name="restartPeriod")
    def restart_period(self) -> Optional[pulumi.Input[int]]:
        """
        Graceful restart period.
        """
        return pulumi.get(self, "restart_period")

    @restart_period.setter
    def restart_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restart_period", value)

    @property
    @pulumi.getter(name="rfc1583Compatible")
    def rfc1583_compatible(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable RFC1583 compatibility. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rfc1583_compatible")

    @rfc1583_compatible.setter
    def rfc1583_compatible(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rfc1583_compatible", value)

    @property
    @pulumi.getter(name="spfTimers")
    def spf_timers(self) -> Optional[pulumi.Input[str]]:
        """
        SPF calculation frequency.
        """
        return pulumi.get(self, "spf_timers")

    @spf_timers.setter
    def spf_timers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spf_timers", value)

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfSummaryAddressArgs']]]]:
        """
        IP address summary configuration. The structure of `summary_address` block is documented below.
        """
        return pulumi.get(self, "summary_addresses")

    @summary_addresses.setter
    def summary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfSummaryAddressArgs']]]]):
        pulumi.set(self, "summary_addresses", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _OspfState:
    def __init__(__self__, *,
                 abr_type: Optional[pulumi.Input[str]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input['OspfAreaArgs']]]] = None,
                 auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 database_overflow: Optional[pulumi.Input[str]] = None,
                 database_overflow_max_lsas: Optional[pulumi.Input[int]] = None,
                 database_overflow_time_to_recover: Optional[pulumi.Input[int]] = None,
                 default_information_metric: Optional[pulumi.Input[int]] = None,
                 default_information_metric_type: Optional[pulumi.Input[str]] = None,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_information_route_map: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 distance_external: Optional[pulumi.Input[int]] = None,
                 distance_inter_area: Optional[pulumi.Input[int]] = None,
                 distance_intra_area: Optional[pulumi.Input[int]] = None,
                 distribute_list_in: Optional[pulumi.Input[str]] = None,
                 distribute_lists: Optional[pulumi.Input[Sequence[pulumi.Input['OspfDistributeListArgs']]]] = None,
                 distribute_route_map_in: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['OspfNeighborArgs']]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['OspfNetworkArgs']]]] = None,
                 ospf_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['OspfOspfInterfaceArgs']]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['OspfPassiveInterfaceArgs']]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['OspfRedistributeArgs']]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None,
                 restart_on_topology_change: Optional[pulumi.Input[str]] = None,
                 restart_period: Optional[pulumi.Input[int]] = None,
                 rfc1583_compatible: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 spf_timers: Optional[pulumi.Input[str]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['OspfSummaryAddressArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ospf resources.
        :param pulumi.Input[str] abr_type: Area border router type. Valid values: `cisco`, `ibm`, `shortcut`, `standard`.
        :param pulumi.Input[Sequence[pulumi.Input['OspfAreaArgs']]] areas: OSPF area configuration. The structure of `area` block is documented below.
        :param pulumi.Input[int] auto_cost_ref_bandwidth: Reference bandwidth in terms of megabits per second.
        :param pulumi.Input[str] bfd: Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] database_overflow: Enable/disable database overflow. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] database_overflow_max_lsas: Database overflow maximum LSAs.
        :param pulumi.Input[int] database_overflow_time_to_recover: Database overflow time to recover (sec).
        :param pulumi.Input[int] default_information_metric: Default information metric.
        :param pulumi.Input[str] default_information_metric_type: Default information metric type. Valid values: `1`, `2`.
        :param pulumi.Input[str] default_information_originate: Enable/disable generation of default route. Valid values: `enable`, `always`, `disable`.
        :param pulumi.Input[str] default_information_route_map: Default information route map.
        :param pulumi.Input[int] default_metric: Default metric of redistribute routes.
        :param pulumi.Input[int] distance: Distance of the route.
        :param pulumi.Input[int] distance_external: Administrative external distance.
        :param pulumi.Input[int] distance_inter_area: Administrative inter-area distance.
        :param pulumi.Input[int] distance_intra_area: Administrative intra-area distance.
        :param pulumi.Input[str] distribute_list_in: Filter incoming routes.
        :param pulumi.Input[Sequence[pulumi.Input['OspfDistributeListArgs']]] distribute_lists: Distribute list configuration. The structure of `distribute_list` block is documented below.
        :param pulumi.Input[str] distribute_route_map_in: Filter incoming external routes by route-map.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] log_neighbour_changes: Enable logging of OSPF neighbour's changes Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['OspfNeighborArgs']]] neighbors: OSPF neighbor configuration are used when OSPF runs on non-broadcast media The structure of `neighbor` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['OspfNetworkArgs']]] networks: OSPF network configuration. The structure of `network` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['OspfOspfInterfaceArgs']]] ospf_interfaces: OSPF interface configuration. The structure of `ospf_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['OspfPassiveInterfaceArgs']]] passive_interfaces: Passive interface configuration. The structure of `passive_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['OspfRedistributeArgs']]] redistributes: Redistribute configuration. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] restart_mode: OSPF restart mode (graceful or LLS). Valid values: `none`, `lls`, `graceful-restart`.
        :param pulumi.Input[str] restart_on_topology_change: Enable/disable continuing graceful restart upon topology change. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] restart_period: Graceful restart period.
        :param pulumi.Input[str] rfc1583_compatible: Enable/disable RFC1583 compatibility. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] router_id: Router ID.
        :param pulumi.Input[str] spf_timers: SPF calculation frequency.
        :param pulumi.Input[Sequence[pulumi.Input['OspfSummaryAddressArgs']]] summary_addresses: IP address summary configuration. The structure of `summary_address` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if abr_type is not None:
            pulumi.set(__self__, "abr_type", abr_type)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)
        if auto_cost_ref_bandwidth is not None:
            pulumi.set(__self__, "auto_cost_ref_bandwidth", auto_cost_ref_bandwidth)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if database_overflow is not None:
            pulumi.set(__self__, "database_overflow", database_overflow)
        if database_overflow_max_lsas is not None:
            pulumi.set(__self__, "database_overflow_max_lsas", database_overflow_max_lsas)
        if database_overflow_time_to_recover is not None:
            pulumi.set(__self__, "database_overflow_time_to_recover", database_overflow_time_to_recover)
        if default_information_metric is not None:
            pulumi.set(__self__, "default_information_metric", default_information_metric)
        if default_information_metric_type is not None:
            pulumi.set(__self__, "default_information_metric_type", default_information_metric_type)
        if default_information_originate is not None:
            pulumi.set(__self__, "default_information_originate", default_information_originate)
        if default_information_route_map is not None:
            pulumi.set(__self__, "default_information_route_map", default_information_route_map)
        if default_metric is not None:
            pulumi.set(__self__, "default_metric", default_metric)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if distance_external is not None:
            pulumi.set(__self__, "distance_external", distance_external)
        if distance_inter_area is not None:
            pulumi.set(__self__, "distance_inter_area", distance_inter_area)
        if distance_intra_area is not None:
            pulumi.set(__self__, "distance_intra_area", distance_intra_area)
        if distribute_list_in is not None:
            pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        if distribute_lists is not None:
            pulumi.set(__self__, "distribute_lists", distribute_lists)
        if distribute_route_map_in is not None:
            pulumi.set(__self__, "distribute_route_map_in", distribute_route_map_in)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if log_neighbour_changes is not None:
            pulumi.set(__self__, "log_neighbour_changes", log_neighbour_changes)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if ospf_interfaces is not None:
            pulumi.set(__self__, "ospf_interfaces", ospf_interfaces)
        if passive_interfaces is not None:
            pulumi.set(__self__, "passive_interfaces", passive_interfaces)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if restart_mode is not None:
            pulumi.set(__self__, "restart_mode", restart_mode)
        if restart_on_topology_change is not None:
            pulumi.set(__self__, "restart_on_topology_change", restart_on_topology_change)
        if restart_period is not None:
            pulumi.set(__self__, "restart_period", restart_period)
        if rfc1583_compatible is not None:
            pulumi.set(__self__, "rfc1583_compatible", rfc1583_compatible)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if spf_timers is not None:
            pulumi.set(__self__, "spf_timers", spf_timers)
        if summary_addresses is not None:
            pulumi.set(__self__, "summary_addresses", summary_addresses)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="abrType")
    def abr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Area border router type. Valid values: `cisco`, `ibm`, `shortcut`, `standard`.
        """
        return pulumi.get(self, "abr_type")

    @abr_type.setter
    def abr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abr_type", value)

    @property
    @pulumi.getter
    def areas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfAreaArgs']]]]:
        """
        OSPF area configuration. The structure of `area` block is documented below.
        """
        return pulumi.get(self, "areas")

    @areas.setter
    def areas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfAreaArgs']]]]):
        pulumi.set(self, "areas", value)

    @property
    @pulumi.getter(name="autoCostRefBandwidth")
    def auto_cost_ref_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Reference bandwidth in terms of megabits per second.
        """
        return pulumi.get(self, "auto_cost_ref_bandwidth")

    @auto_cost_ref_bandwidth.setter
    def auto_cost_ref_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_cost_ref_bandwidth", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="databaseOverflow")
    def database_overflow(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable database overflow. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "database_overflow")

    @database_overflow.setter
    def database_overflow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_overflow", value)

    @property
    @pulumi.getter(name="databaseOverflowMaxLsas")
    def database_overflow_max_lsas(self) -> Optional[pulumi.Input[int]]:
        """
        Database overflow maximum LSAs.
        """
        return pulumi.get(self, "database_overflow_max_lsas")

    @database_overflow_max_lsas.setter
    def database_overflow_max_lsas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "database_overflow_max_lsas", value)

    @property
    @pulumi.getter(name="databaseOverflowTimeToRecover")
    def database_overflow_time_to_recover(self) -> Optional[pulumi.Input[int]]:
        """
        Database overflow time to recover (sec).
        """
        return pulumi.get(self, "database_overflow_time_to_recover")

    @database_overflow_time_to_recover.setter
    def database_overflow_time_to_recover(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "database_overflow_time_to_recover", value)

    @property
    @pulumi.getter(name="defaultInformationMetric")
    def default_information_metric(self) -> Optional[pulumi.Input[int]]:
        """
        Default information metric.
        """
        return pulumi.get(self, "default_information_metric")

    @default_information_metric.setter
    def default_information_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_information_metric", value)

    @property
    @pulumi.getter(name="defaultInformationMetricType")
    def default_information_metric_type(self) -> Optional[pulumi.Input[str]]:
        """
        Default information metric type. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "default_information_metric_type")

    @default_information_metric_type.setter
    def default_information_metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_metric_type", value)

    @property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable generation of default route. Valid values: `enable`, `always`, `disable`.
        """
        return pulumi.get(self, "default_information_originate")

    @default_information_originate.setter
    def default_information_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_originate", value)

    @property
    @pulumi.getter(name="defaultInformationRouteMap")
    def default_information_route_map(self) -> Optional[pulumi.Input[str]]:
        """
        Default information route map.
        """
        return pulumi.get(self, "default_information_route_map")

    @default_information_route_map.setter
    def default_information_route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_information_route_map", value)

    @property
    @pulumi.getter(name="defaultMetric")
    def default_metric(self) -> Optional[pulumi.Input[int]]:
        """
        Default metric of redistribute routes.
        """
        return pulumi.get(self, "default_metric")

    @default_metric.setter
    def default_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_metric", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Distance of the route.
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="distanceExternal")
    def distance_external(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative external distance.
        """
        return pulumi.get(self, "distance_external")

    @distance_external.setter
    def distance_external(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance_external", value)

    @property
    @pulumi.getter(name="distanceInterArea")
    def distance_inter_area(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative inter-area distance.
        """
        return pulumi.get(self, "distance_inter_area")

    @distance_inter_area.setter
    def distance_inter_area(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance_inter_area", value)

    @property
    @pulumi.getter(name="distanceIntraArea")
    def distance_intra_area(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative intra-area distance.
        """
        return pulumi.get(self, "distance_intra_area")

    @distance_intra_area.setter
    def distance_intra_area(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance_intra_area", value)

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> Optional[pulumi.Input[str]]:
        """
        Filter incoming routes.
        """
        return pulumi.get(self, "distribute_list_in")

    @distribute_list_in.setter
    def distribute_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in", value)

    @property
    @pulumi.getter(name="distributeLists")
    def distribute_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfDistributeListArgs']]]]:
        """
        Distribute list configuration. The structure of `distribute_list` block is documented below.
        """
        return pulumi.get(self, "distribute_lists")

    @distribute_lists.setter
    def distribute_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfDistributeListArgs']]]]):
        pulumi.set(self, "distribute_lists", value)

    @property
    @pulumi.getter(name="distributeRouteMapIn")
    def distribute_route_map_in(self) -> Optional[pulumi.Input[str]]:
        """
        Filter incoming external routes by route-map.
        """
        return pulumi.get(self, "distribute_route_map_in")

    @distribute_route_map_in.setter
    def distribute_route_map_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_route_map_in", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="logNeighbourChanges")
    def log_neighbour_changes(self) -> Optional[pulumi.Input[str]]:
        """
        Enable logging of OSPF neighbour's changes Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_neighbour_changes")

    @log_neighbour_changes.setter
    def log_neighbour_changes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_neighbour_changes", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfNeighborArgs']]]]:
        """
        OSPF neighbor configuration are used when OSPF runs on non-broadcast media The structure of `neighbor` block is documented below.
        """
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfNeighborArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfNetworkArgs']]]]:
        """
        OSPF network configuration. The structure of `network` block is documented below.
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="ospfInterfaces")
    def ospf_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfOspfInterfaceArgs']]]]:
        """
        OSPF interface configuration. The structure of `ospf_interface` block is documented below.
        """
        return pulumi.get(self, "ospf_interfaces")

    @ospf_interfaces.setter
    def ospf_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfOspfInterfaceArgs']]]]):
        pulumi.set(self, "ospf_interfaces", value)

    @property
    @pulumi.getter(name="passiveInterfaces")
    def passive_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfPassiveInterfaceArgs']]]]:
        """
        Passive interface configuration. The structure of `passive_interface` block is documented below.
        """
        return pulumi.get(self, "passive_interfaces")

    @passive_interfaces.setter
    def passive_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfPassiveInterfaceArgs']]]]):
        pulumi.set(self, "passive_interfaces", value)

    @property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfRedistributeArgs']]]]:
        """
        Redistribute configuration. The structure of `redistribute` block is documented below.
        """
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @property
    @pulumi.getter(name="restartMode")
    def restart_mode(self) -> Optional[pulumi.Input[str]]:
        """
        OSPF restart mode (graceful or LLS). Valid values: `none`, `lls`, `graceful-restart`.
        """
        return pulumi.get(self, "restart_mode")

    @restart_mode.setter
    def restart_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_mode", value)

    @property
    @pulumi.getter(name="restartOnTopologyChange")
    def restart_on_topology_change(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable continuing graceful restart upon topology change. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restart_on_topology_change")

    @restart_on_topology_change.setter
    def restart_on_topology_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_on_topology_change", value)

    @property
    @pulumi.getter(name="restartPeriod")
    def restart_period(self) -> Optional[pulumi.Input[int]]:
        """
        Graceful restart period.
        """
        return pulumi.get(self, "restart_period")

    @restart_period.setter
    def restart_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restart_period", value)

    @property
    @pulumi.getter(name="rfc1583Compatible")
    def rfc1583_compatible(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable RFC1583 compatibility. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rfc1583_compatible")

    @rfc1583_compatible.setter
    def rfc1583_compatible(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rfc1583_compatible", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        Router ID.
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="spfTimers")
    def spf_timers(self) -> Optional[pulumi.Input[str]]:
        """
        SPF calculation frequency.
        """
        return pulumi.get(self, "spf_timers")

    @spf_timers.setter
    def spf_timers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spf_timers", value)

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfSummaryAddressArgs']]]]:
        """
        IP address summary configuration. The structure of `summary_address` block is documented below.
        """
        return pulumi.get(self, "summary_addresses")

    @summary_addresses.setter
    def summary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfSummaryAddressArgs']]]]):
        pulumi.set(self, "summary_addresses", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Ospf(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abr_type: Optional[pulumi.Input[str]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfAreaArgs']]]]] = None,
                 auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 database_overflow: Optional[pulumi.Input[str]] = None,
                 database_overflow_max_lsas: Optional[pulumi.Input[int]] = None,
                 database_overflow_time_to_recover: Optional[pulumi.Input[int]] = None,
                 default_information_metric: Optional[pulumi.Input[int]] = None,
                 default_information_metric_type: Optional[pulumi.Input[str]] = None,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_information_route_map: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 distance_external: Optional[pulumi.Input[int]] = None,
                 distance_inter_area: Optional[pulumi.Input[int]] = None,
                 distance_intra_area: Optional[pulumi.Input[int]] = None,
                 distribute_list_in: Optional[pulumi.Input[str]] = None,
                 distribute_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfDistributeListArgs']]]]] = None,
                 distribute_route_map_in: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfNeighborArgs']]]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfNetworkArgs']]]]] = None,
                 ospf_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfOspfInterfaceArgs']]]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfPassiveInterfaceArgs']]]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfRedistributeArgs']]]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None,
                 restart_on_topology_change: Optional[pulumi.Input[str]] = None,
                 restart_period: Optional[pulumi.Input[int]] = None,
                 rfc1583_compatible: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 spf_timers: Optional[pulumi.Input[str]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfSummaryAddressArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure OSPF.

        > The provider supports the definition of Ospf-Interface in Router Ospf `router.Ospf`, and also allows the definition of separate Ospf-Interface resources `router/ospf.Ospfinterface`, but do not use a `router.Ospf` with in-line Ospf-Interface in conjunction with any `router/ospf.Ospfinterface` resources, otherwise conflicts and overwrite will occur.

        > The provider supports the definition of Network in Router Ospf `router.Ospf`, and also allows the definition of separate Network resources `router/ospf.Network`, but do not use a `router.Ospf` with in-line Network in conjunction with any `router/ospf.Network` resources, otherwise conflicts and overwrite will occur.

        > The provider supports the definition of Neighbor in Router Ospf `router.Ospf`, and also allows the definition of separate Neighbor resources `router/ospf.Neighbor`, but do not use a `router.Ospf` with in-line Neighbor in conjunction with any `router/ospf.Neighbor` resources, otherwise conflicts and overwrite will occur.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.router.Ospf("trname",
            abr_type="standard",
            auto_cost_ref_bandwidth=1000,
            bfd="disable",
            database_overflow="disable",
            database_overflow_max_lsas=10000,
            database_overflow_time_to_recover=300,
            default_information_metric=10,
            default_information_metric_type="2",
            default_information_originate="disable",
            default_metric=10,
            distance=110,
            distance_external=110,
            distance_inter_area=110,
            distance_intra_area=110,
            log_neighbour_changes="enable",
            redistributes=[
                fortios.router.OspfRedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="connected",
                    status="disable",
                    tag=0,
                ),
                fortios.router.OspfRedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="static",
                    status="disable",
                    tag=0,
                ),
                fortios.router.OspfRedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="rip",
                    status="disable",
                    tag=0,
                ),
                fortios.router.OspfRedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="bgp",
                    status="disable",
                    tag=0,
                ),
                fortios.router.OspfRedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="isis",
                    status="disable",
                    tag=0,
                ),
            ],
            restart_mode="none",
            restart_period=120,
            rfc1583_compatible="disable",
            router_id="0.0.0.0",
            spf_timers="5 10")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Router Ospf can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:router/ospf:Ospf labelname RouterOspf
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:router/ospf:Ospf labelname RouterOspf
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] abr_type: Area border router type. Valid values: `cisco`, `ibm`, `shortcut`, `standard`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfAreaArgs']]]] areas: OSPF area configuration. The structure of `area` block is documented below.
        :param pulumi.Input[int] auto_cost_ref_bandwidth: Reference bandwidth in terms of megabits per second.
        :param pulumi.Input[str] bfd: Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] database_overflow: Enable/disable database overflow. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] database_overflow_max_lsas: Database overflow maximum LSAs.
        :param pulumi.Input[int] database_overflow_time_to_recover: Database overflow time to recover (sec).
        :param pulumi.Input[int] default_information_metric: Default information metric.
        :param pulumi.Input[str] default_information_metric_type: Default information metric type. Valid values: `1`, `2`.
        :param pulumi.Input[str] default_information_originate: Enable/disable generation of default route. Valid values: `enable`, `always`, `disable`.
        :param pulumi.Input[str] default_information_route_map: Default information route map.
        :param pulumi.Input[int] default_metric: Default metric of redistribute routes.
        :param pulumi.Input[int] distance: Distance of the route.
        :param pulumi.Input[int] distance_external: Administrative external distance.
        :param pulumi.Input[int] distance_inter_area: Administrative inter-area distance.
        :param pulumi.Input[int] distance_intra_area: Administrative intra-area distance.
        :param pulumi.Input[str] distribute_list_in: Filter incoming routes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfDistributeListArgs']]]] distribute_lists: Distribute list configuration. The structure of `distribute_list` block is documented below.
        :param pulumi.Input[str] distribute_route_map_in: Filter incoming external routes by route-map.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] log_neighbour_changes: Enable logging of OSPF neighbour's changes Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfNeighborArgs']]]] neighbors: OSPF neighbor configuration are used when OSPF runs on non-broadcast media The structure of `neighbor` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfNetworkArgs']]]] networks: OSPF network configuration. The structure of `network` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfOspfInterfaceArgs']]]] ospf_interfaces: OSPF interface configuration. The structure of `ospf_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfPassiveInterfaceArgs']]]] passive_interfaces: Passive interface configuration. The structure of `passive_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfRedistributeArgs']]]] redistributes: Redistribute configuration. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] restart_mode: OSPF restart mode (graceful or LLS). Valid values: `none`, `lls`, `graceful-restart`.
        :param pulumi.Input[str] restart_on_topology_change: Enable/disable continuing graceful restart upon topology change. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] restart_period: Graceful restart period.
        :param pulumi.Input[str] rfc1583_compatible: Enable/disable RFC1583 compatibility. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] router_id: Router ID.
        :param pulumi.Input[str] spf_timers: SPF calculation frequency.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfSummaryAddressArgs']]]] summary_addresses: IP address summary configuration. The structure of `summary_address` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OspfArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure OSPF.

        > The provider supports the definition of Ospf-Interface in Router Ospf `router.Ospf`, and also allows the definition of separate Ospf-Interface resources `router/ospf.Ospfinterface`, but do not use a `router.Ospf` with in-line Ospf-Interface in conjunction with any `router/ospf.Ospfinterface` resources, otherwise conflicts and overwrite will occur.

        > The provider supports the definition of Network in Router Ospf `router.Ospf`, and also allows the definition of separate Network resources `router/ospf.Network`, but do not use a `router.Ospf` with in-line Network in conjunction with any `router/ospf.Network` resources, otherwise conflicts and overwrite will occur.

        > The provider supports the definition of Neighbor in Router Ospf `router.Ospf`, and also allows the definition of separate Neighbor resources `router/ospf.Neighbor`, but do not use a `router.Ospf` with in-line Neighbor in conjunction with any `router/ospf.Neighbor` resources, otherwise conflicts and overwrite will occur.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.router.Ospf("trname",
            abr_type="standard",
            auto_cost_ref_bandwidth=1000,
            bfd="disable",
            database_overflow="disable",
            database_overflow_max_lsas=10000,
            database_overflow_time_to_recover=300,
            default_information_metric=10,
            default_information_metric_type="2",
            default_information_originate="disable",
            default_metric=10,
            distance=110,
            distance_external=110,
            distance_inter_area=110,
            distance_intra_area=110,
            log_neighbour_changes="enable",
            redistributes=[
                fortios.router.OspfRedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="connected",
                    status="disable",
                    tag=0,
                ),
                fortios.router.OspfRedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="static",
                    status="disable",
                    tag=0,
                ),
                fortios.router.OspfRedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="rip",
                    status="disable",
                    tag=0,
                ),
                fortios.router.OspfRedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="bgp",
                    status="disable",
                    tag=0,
                ),
                fortios.router.OspfRedistributeArgs(
                    metric=0,
                    metric_type="2",
                    name="isis",
                    status="disable",
                    tag=0,
                ),
            ],
            restart_mode="none",
            restart_period=120,
            rfc1583_compatible="disable",
            router_id="0.0.0.0",
            spf_timers="5 10")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Router Ospf can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:router/ospf:Ospf labelname RouterOspf
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:router/ospf:Ospf labelname RouterOspf
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param OspfArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OspfArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abr_type: Optional[pulumi.Input[str]] = None,
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfAreaArgs']]]]] = None,
                 auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 database_overflow: Optional[pulumi.Input[str]] = None,
                 database_overflow_max_lsas: Optional[pulumi.Input[int]] = None,
                 database_overflow_time_to_recover: Optional[pulumi.Input[int]] = None,
                 default_information_metric: Optional[pulumi.Input[int]] = None,
                 default_information_metric_type: Optional[pulumi.Input[str]] = None,
                 default_information_originate: Optional[pulumi.Input[str]] = None,
                 default_information_route_map: Optional[pulumi.Input[str]] = None,
                 default_metric: Optional[pulumi.Input[int]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 distance_external: Optional[pulumi.Input[int]] = None,
                 distance_inter_area: Optional[pulumi.Input[int]] = None,
                 distance_intra_area: Optional[pulumi.Input[int]] = None,
                 distribute_list_in: Optional[pulumi.Input[str]] = None,
                 distribute_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfDistributeListArgs']]]]] = None,
                 distribute_route_map_in: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfNeighborArgs']]]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfNetworkArgs']]]]] = None,
                 ospf_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfOspfInterfaceArgs']]]]] = None,
                 passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfPassiveInterfaceArgs']]]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfRedistributeArgs']]]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None,
                 restart_on_topology_change: Optional[pulumi.Input[str]] = None,
                 restart_period: Optional[pulumi.Input[int]] = None,
                 rfc1583_compatible: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 spf_timers: Optional[pulumi.Input[str]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfSummaryAddressArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OspfArgs.__new__(OspfArgs)

            __props__.__dict__["abr_type"] = abr_type
            __props__.__dict__["areas"] = areas
            __props__.__dict__["auto_cost_ref_bandwidth"] = auto_cost_ref_bandwidth
            __props__.__dict__["bfd"] = bfd
            __props__.__dict__["database_overflow"] = database_overflow
            __props__.__dict__["database_overflow_max_lsas"] = database_overflow_max_lsas
            __props__.__dict__["database_overflow_time_to_recover"] = database_overflow_time_to_recover
            __props__.__dict__["default_information_metric"] = default_information_metric
            __props__.__dict__["default_information_metric_type"] = default_information_metric_type
            __props__.__dict__["default_information_originate"] = default_information_originate
            __props__.__dict__["default_information_route_map"] = default_information_route_map
            __props__.__dict__["default_metric"] = default_metric
            __props__.__dict__["distance"] = distance
            __props__.__dict__["distance_external"] = distance_external
            __props__.__dict__["distance_inter_area"] = distance_inter_area
            __props__.__dict__["distance_intra_area"] = distance_intra_area
            __props__.__dict__["distribute_list_in"] = distribute_list_in
            __props__.__dict__["distribute_lists"] = distribute_lists
            __props__.__dict__["distribute_route_map_in"] = distribute_route_map_in
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["log_neighbour_changes"] = log_neighbour_changes
            __props__.__dict__["neighbors"] = neighbors
            __props__.__dict__["networks"] = networks
            __props__.__dict__["ospf_interfaces"] = ospf_interfaces
            __props__.__dict__["passive_interfaces"] = passive_interfaces
            __props__.__dict__["redistributes"] = redistributes
            __props__.__dict__["restart_mode"] = restart_mode
            __props__.__dict__["restart_on_topology_change"] = restart_on_topology_change
            __props__.__dict__["restart_period"] = restart_period
            __props__.__dict__["rfc1583_compatible"] = rfc1583_compatible
            if router_id is None and not opts.urn:
                raise TypeError("Missing required property 'router_id'")
            __props__.__dict__["router_id"] = router_id
            __props__.__dict__["spf_timers"] = spf_timers
            __props__.__dict__["summary_addresses"] = summary_addresses
            __props__.__dict__["vdomparam"] = vdomparam
        super(Ospf, __self__).__init__(
            'fortios:router/ospf:Ospf',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abr_type: Optional[pulumi.Input[str]] = None,
            areas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfAreaArgs']]]]] = None,
            auto_cost_ref_bandwidth: Optional[pulumi.Input[int]] = None,
            bfd: Optional[pulumi.Input[str]] = None,
            database_overflow: Optional[pulumi.Input[str]] = None,
            database_overflow_max_lsas: Optional[pulumi.Input[int]] = None,
            database_overflow_time_to_recover: Optional[pulumi.Input[int]] = None,
            default_information_metric: Optional[pulumi.Input[int]] = None,
            default_information_metric_type: Optional[pulumi.Input[str]] = None,
            default_information_originate: Optional[pulumi.Input[str]] = None,
            default_information_route_map: Optional[pulumi.Input[str]] = None,
            default_metric: Optional[pulumi.Input[int]] = None,
            distance: Optional[pulumi.Input[int]] = None,
            distance_external: Optional[pulumi.Input[int]] = None,
            distance_inter_area: Optional[pulumi.Input[int]] = None,
            distance_intra_area: Optional[pulumi.Input[int]] = None,
            distribute_list_in: Optional[pulumi.Input[str]] = None,
            distribute_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfDistributeListArgs']]]]] = None,
            distribute_route_map_in: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            log_neighbour_changes: Optional[pulumi.Input[str]] = None,
            neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfNeighborArgs']]]]] = None,
            networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfNetworkArgs']]]]] = None,
            ospf_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfOspfInterfaceArgs']]]]] = None,
            passive_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfPassiveInterfaceArgs']]]]] = None,
            redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfRedistributeArgs']]]]] = None,
            restart_mode: Optional[pulumi.Input[str]] = None,
            restart_on_topology_change: Optional[pulumi.Input[str]] = None,
            restart_period: Optional[pulumi.Input[int]] = None,
            rfc1583_compatible: Optional[pulumi.Input[str]] = None,
            router_id: Optional[pulumi.Input[str]] = None,
            spf_timers: Optional[pulumi.Input[str]] = None,
            summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfSummaryAddressArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Ospf':
        """
        Get an existing Ospf resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] abr_type: Area border router type. Valid values: `cisco`, `ibm`, `shortcut`, `standard`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfAreaArgs']]]] areas: OSPF area configuration. The structure of `area` block is documented below.
        :param pulumi.Input[int] auto_cost_ref_bandwidth: Reference bandwidth in terms of megabits per second.
        :param pulumi.Input[str] bfd: Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] database_overflow: Enable/disable database overflow. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] database_overflow_max_lsas: Database overflow maximum LSAs.
        :param pulumi.Input[int] database_overflow_time_to_recover: Database overflow time to recover (sec).
        :param pulumi.Input[int] default_information_metric: Default information metric.
        :param pulumi.Input[str] default_information_metric_type: Default information metric type. Valid values: `1`, `2`.
        :param pulumi.Input[str] default_information_originate: Enable/disable generation of default route. Valid values: `enable`, `always`, `disable`.
        :param pulumi.Input[str] default_information_route_map: Default information route map.
        :param pulumi.Input[int] default_metric: Default metric of redistribute routes.
        :param pulumi.Input[int] distance: Distance of the route.
        :param pulumi.Input[int] distance_external: Administrative external distance.
        :param pulumi.Input[int] distance_inter_area: Administrative inter-area distance.
        :param pulumi.Input[int] distance_intra_area: Administrative intra-area distance.
        :param pulumi.Input[str] distribute_list_in: Filter incoming routes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfDistributeListArgs']]]] distribute_lists: Distribute list configuration. The structure of `distribute_list` block is documented below.
        :param pulumi.Input[str] distribute_route_map_in: Filter incoming external routes by route-map.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] log_neighbour_changes: Enable logging of OSPF neighbour's changes Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfNeighborArgs']]]] neighbors: OSPF neighbor configuration are used when OSPF runs on non-broadcast media The structure of `neighbor` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfNetworkArgs']]]] networks: OSPF network configuration. The structure of `network` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfOspfInterfaceArgs']]]] ospf_interfaces: OSPF interface configuration. The structure of `ospf_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfPassiveInterfaceArgs']]]] passive_interfaces: Passive interface configuration. The structure of `passive_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfRedistributeArgs']]]] redistributes: Redistribute configuration. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] restart_mode: OSPF restart mode (graceful or LLS). Valid values: `none`, `lls`, `graceful-restart`.
        :param pulumi.Input[str] restart_on_topology_change: Enable/disable continuing graceful restart upon topology change. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] restart_period: Graceful restart period.
        :param pulumi.Input[str] rfc1583_compatible: Enable/disable RFC1583 compatibility. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] router_id: Router ID.
        :param pulumi.Input[str] spf_timers: SPF calculation frequency.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfSummaryAddressArgs']]]] summary_addresses: IP address summary configuration. The structure of `summary_address` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OspfState.__new__(_OspfState)

        __props__.__dict__["abr_type"] = abr_type
        __props__.__dict__["areas"] = areas
        __props__.__dict__["auto_cost_ref_bandwidth"] = auto_cost_ref_bandwidth
        __props__.__dict__["bfd"] = bfd
        __props__.__dict__["database_overflow"] = database_overflow
        __props__.__dict__["database_overflow_max_lsas"] = database_overflow_max_lsas
        __props__.__dict__["database_overflow_time_to_recover"] = database_overflow_time_to_recover
        __props__.__dict__["default_information_metric"] = default_information_metric
        __props__.__dict__["default_information_metric_type"] = default_information_metric_type
        __props__.__dict__["default_information_originate"] = default_information_originate
        __props__.__dict__["default_information_route_map"] = default_information_route_map
        __props__.__dict__["default_metric"] = default_metric
        __props__.__dict__["distance"] = distance
        __props__.__dict__["distance_external"] = distance_external
        __props__.__dict__["distance_inter_area"] = distance_inter_area
        __props__.__dict__["distance_intra_area"] = distance_intra_area
        __props__.__dict__["distribute_list_in"] = distribute_list_in
        __props__.__dict__["distribute_lists"] = distribute_lists
        __props__.__dict__["distribute_route_map_in"] = distribute_route_map_in
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["log_neighbour_changes"] = log_neighbour_changes
        __props__.__dict__["neighbors"] = neighbors
        __props__.__dict__["networks"] = networks
        __props__.__dict__["ospf_interfaces"] = ospf_interfaces
        __props__.__dict__["passive_interfaces"] = passive_interfaces
        __props__.__dict__["redistributes"] = redistributes
        __props__.__dict__["restart_mode"] = restart_mode
        __props__.__dict__["restart_on_topology_change"] = restart_on_topology_change
        __props__.__dict__["restart_period"] = restart_period
        __props__.__dict__["rfc1583_compatible"] = rfc1583_compatible
        __props__.__dict__["router_id"] = router_id
        __props__.__dict__["spf_timers"] = spf_timers
        __props__.__dict__["summary_addresses"] = summary_addresses
        __props__.__dict__["vdomparam"] = vdomparam
        return Ospf(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="abrType")
    def abr_type(self) -> pulumi.Output[str]:
        """
        Area border router type. Valid values: `cisco`, `ibm`, `shortcut`, `standard`.
        """
        return pulumi.get(self, "abr_type")

    @property
    @pulumi.getter
    def areas(self) -> pulumi.Output[Optional[Sequence['outputs.OspfArea']]]:
        """
        OSPF area configuration. The structure of `area` block is documented below.
        """
        return pulumi.get(self, "areas")

    @property
    @pulumi.getter(name="autoCostRefBandwidth")
    def auto_cost_ref_bandwidth(self) -> pulumi.Output[int]:
        """
        Reference bandwidth in terms of megabits per second.
        """
        return pulumi.get(self, "auto_cost_ref_bandwidth")

    @property
    @pulumi.getter
    def bfd(self) -> pulumi.Output[str]:
        """
        Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="databaseOverflow")
    def database_overflow(self) -> pulumi.Output[str]:
        """
        Enable/disable database overflow. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "database_overflow")

    @property
    @pulumi.getter(name="databaseOverflowMaxLsas")
    def database_overflow_max_lsas(self) -> pulumi.Output[int]:
        """
        Database overflow maximum LSAs.
        """
        return pulumi.get(self, "database_overflow_max_lsas")

    @property
    @pulumi.getter(name="databaseOverflowTimeToRecover")
    def database_overflow_time_to_recover(self) -> pulumi.Output[int]:
        """
        Database overflow time to recover (sec).
        """
        return pulumi.get(self, "database_overflow_time_to_recover")

    @property
    @pulumi.getter(name="defaultInformationMetric")
    def default_information_metric(self) -> pulumi.Output[int]:
        """
        Default information metric.
        """
        return pulumi.get(self, "default_information_metric")

    @property
    @pulumi.getter(name="defaultInformationMetricType")
    def default_information_metric_type(self) -> pulumi.Output[str]:
        """
        Default information metric type. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "default_information_metric_type")

    @property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> pulumi.Output[str]:
        """
        Enable/disable generation of default route. Valid values: `enable`, `always`, `disable`.
        """
        return pulumi.get(self, "default_information_originate")

    @property
    @pulumi.getter(name="defaultInformationRouteMap")
    def default_information_route_map(self) -> pulumi.Output[str]:
        """
        Default information route map.
        """
        return pulumi.get(self, "default_information_route_map")

    @property
    @pulumi.getter(name="defaultMetric")
    def default_metric(self) -> pulumi.Output[int]:
        """
        Default metric of redistribute routes.
        """
        return pulumi.get(self, "default_metric")

    @property
    @pulumi.getter
    def distance(self) -> pulumi.Output[int]:
        """
        Distance of the route.
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter(name="distanceExternal")
    def distance_external(self) -> pulumi.Output[int]:
        """
        Administrative external distance.
        """
        return pulumi.get(self, "distance_external")

    @property
    @pulumi.getter(name="distanceInterArea")
    def distance_inter_area(self) -> pulumi.Output[int]:
        """
        Administrative inter-area distance.
        """
        return pulumi.get(self, "distance_inter_area")

    @property
    @pulumi.getter(name="distanceIntraArea")
    def distance_intra_area(self) -> pulumi.Output[int]:
        """
        Administrative intra-area distance.
        """
        return pulumi.get(self, "distance_intra_area")

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> pulumi.Output[str]:
        """
        Filter incoming routes.
        """
        return pulumi.get(self, "distribute_list_in")

    @property
    @pulumi.getter(name="distributeLists")
    def distribute_lists(self) -> pulumi.Output[Optional[Sequence['outputs.OspfDistributeList']]]:
        """
        Distribute list configuration. The structure of `distribute_list` block is documented below.
        """
        return pulumi.get(self, "distribute_lists")

    @property
    @pulumi.getter(name="distributeRouteMapIn")
    def distribute_route_map_in(self) -> pulumi.Output[str]:
        """
        Filter incoming external routes by route-map.
        """
        return pulumi.get(self, "distribute_route_map_in")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="logNeighbourChanges")
    def log_neighbour_changes(self) -> pulumi.Output[str]:
        """
        Enable logging of OSPF neighbour's changes Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_neighbour_changes")

    @property
    @pulumi.getter
    def neighbors(self) -> pulumi.Output[Optional[Sequence['outputs.OspfNeighbor']]]:
        """
        OSPF neighbor configuration are used when OSPF runs on non-broadcast media The structure of `neighbor` block is documented below.
        """
        return pulumi.get(self, "neighbors")

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Output[Optional[Sequence['outputs.OspfNetwork']]]:
        """
        OSPF network configuration. The structure of `network` block is documented below.
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="ospfInterfaces")
    def ospf_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.OspfOspfInterface']]]:
        """
        OSPF interface configuration. The structure of `ospf_interface` block is documented below.
        """
        return pulumi.get(self, "ospf_interfaces")

    @property
    @pulumi.getter(name="passiveInterfaces")
    def passive_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.OspfPassiveInterface']]]:
        """
        Passive interface configuration. The structure of `passive_interface` block is documented below.
        """
        return pulumi.get(self, "passive_interfaces")

    @property
    @pulumi.getter
    def redistributes(self) -> pulumi.Output[Optional[Sequence['outputs.OspfRedistribute']]]:
        """
        Redistribute configuration. The structure of `redistribute` block is documented below.
        """
        return pulumi.get(self, "redistributes")

    @property
    @pulumi.getter(name="restartMode")
    def restart_mode(self) -> pulumi.Output[str]:
        """
        OSPF restart mode (graceful or LLS). Valid values: `none`, `lls`, `graceful-restart`.
        """
        return pulumi.get(self, "restart_mode")

    @property
    @pulumi.getter(name="restartOnTopologyChange")
    def restart_on_topology_change(self) -> pulumi.Output[str]:
        """
        Enable/disable continuing graceful restart upon topology change. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restart_on_topology_change")

    @property
    @pulumi.getter(name="restartPeriod")
    def restart_period(self) -> pulumi.Output[int]:
        """
        Graceful restart period.
        """
        return pulumi.get(self, "restart_period")

    @property
    @pulumi.getter(name="rfc1583Compatible")
    def rfc1583_compatible(self) -> pulumi.Output[str]:
        """
        Enable/disable RFC1583 compatibility. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rfc1583_compatible")

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Output[str]:
        """
        Router ID.
        """
        return pulumi.get(self, "router_id")

    @property
    @pulumi.getter(name="spfTimers")
    def spf_timers(self) -> pulumi.Output[str]:
        """
        SPF calculation frequency.
        """
        return pulumi.get(self, "spf_timers")

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.OspfSummaryAddress']]]:
        """
        IP address summary configuration. The structure of `summary_address` block is documented below.
        """
        return pulumi.get(self, "summary_addresses")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

