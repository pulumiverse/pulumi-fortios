# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Policy6Args', 'Policy6']

@pulumi.input_type
class Policy6Args:
    def __init__(__self__, *,
                 input_device: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 dst_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6DstaddrArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 end_source_port: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 input_device_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceCustomArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceIdArgs']]]] = None,
                 output_device: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 src_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6SrcaddrArgs']]]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 start_source_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Policy6 resource.
        :param pulumi.Input[str] input_device: Incoming interface name.
        :param pulumi.Input[str] action: Action of the policy route. Valid values: `deny`, `permit`.
        :param pulumi.Input[str] comments: Optional comments.
        :param pulumi.Input[str] dst: Destination IPv6 prefix.
        :param pulumi.Input[str] dst_negate: Enable/disable negating destination address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['Policy6DstaddrArgs']]] dstaddrs: Destination address name. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] end_port: End destination port number (1 - 65535).
        :param pulumi.Input[int] end_source_port: End source port number (1 - 65535).
        :param pulumi.Input[str] gateway: IPv6 address of the gateway.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] input_device_negate: Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceCustomArgs']]] internet_service_customs: Custom Destination Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceIdArgs']]] internet_service_ids: Destination Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[str] output_device: Outgoing interface name.
        :param pulumi.Input[int] protocol: Protocol number (0 - 255).
        :param pulumi.Input[int] seq_num: Sequence number.
        :param pulumi.Input[str] src: Source IPv6 prefix.
        :param pulumi.Input[str] src_negate: Enable/disable negating source address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['Policy6SrcaddrArgs']]] srcaddrs: Source address name. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[int] start_port: Start destination port number (1 - 65535).
        :param pulumi.Input[int] start_source_port: Start source port number (1 - 65535).
        :param pulumi.Input[str] status: Enable/disable this policy route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tos: Type of service bit pattern.
        :param pulumi.Input[str] tos_mask: Type of service evaluated bits.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "input_device", input_device)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if dst_negate is not None:
            pulumi.set(__self__, "dst_negate", dst_negate)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if end_source_port is not None:
            pulumi.set(__self__, "end_source_port", end_source_port)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if input_device_negate is not None:
            pulumi.set(__self__, "input_device_negate", input_device_negate)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if output_device is not None:
            pulumi.set(__self__, "output_device", output_device)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if src is not None:
            pulumi.set(__self__, "src", src)
        if src_negate is not None:
            pulumi.set(__self__, "src_negate", src_negate)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if start_source_port is not None:
            pulumi.set(__self__, "start_source_port", start_source_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="inputDevice")
    def input_device(self) -> pulumi.Input[str]:
        """
        Incoming interface name.
        """
        return pulumi.get(self, "input_device")

    @input_device.setter
    def input_device(self, value: pulumi.Input[str]):
        pulumi.set(self, "input_device", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action of the policy route. Valid values: `deny`, `permit`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IPv6 prefix.
        """
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negating destination address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dst_negate")

    @dst_negate.setter
    def dst_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_negate", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Policy6DstaddrArgs']]]]:
        """
        Destination address name. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6DstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        End destination port number (1 - 65535).
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="endSourcePort")
    def end_source_port(self) -> Optional[pulumi.Input[int]]:
        """
        End source port number (1 - 65535).
        """
        return pulumi.get(self, "end_source_port")

    @end_source_port.setter
    def end_source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_source_port", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the gateway.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "input_device_negate")

    @input_device_negate.setter
    def input_device_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_device_negate", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceCustomArgs']]]]:
        """
        Custom Destination Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceIdArgs']]]]:
        """
        Destination Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="outputDevice")
    def output_device(self) -> Optional[pulumi.Input[str]]:
        """
        Outgoing interface name.
        """
        return pulumi.get(self, "output_device")

    @output_device.setter
    def output_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_device", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Protocol number (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)

    @property
    @pulumi.getter
    def src(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 prefix.
        """
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src", value)

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negating source address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "src_negate")

    @src_negate.setter
    def src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_negate", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Policy6SrcaddrArgs']]]]:
        """
        Source address name. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6SrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Start destination port number (1 - 65535).
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter(name="startSourcePort")
    def start_source_port(self) -> Optional[pulumi.Input[int]]:
        """
        Start source port number (1 - 65535).
        """
        return pulumi.get(self, "start_source_port")

    @start_source_port.setter
    def start_source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_source_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this policy route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        """
        Type of service bit pattern.
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Type of service evaluated bits.
        """
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _Policy6State:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 dst_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6DstaddrArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 end_source_port: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 input_device: Optional[pulumi.Input[str]] = None,
                 input_device_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceCustomArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceIdArgs']]]] = None,
                 output_device: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 src_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6SrcaddrArgs']]]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 start_source_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Policy6 resources.
        :param pulumi.Input[str] action: Action of the policy route. Valid values: `deny`, `permit`.
        :param pulumi.Input[str] comments: Optional comments.
        :param pulumi.Input[str] dst: Destination IPv6 prefix.
        :param pulumi.Input[str] dst_negate: Enable/disable negating destination address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['Policy6DstaddrArgs']]] dstaddrs: Destination address name. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] end_port: End destination port number (1 - 65535).
        :param pulumi.Input[int] end_source_port: End source port number (1 - 65535).
        :param pulumi.Input[str] gateway: IPv6 address of the gateway.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] input_device: Incoming interface name.
        :param pulumi.Input[str] input_device_negate: Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceCustomArgs']]] internet_service_customs: Custom Destination Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceIdArgs']]] internet_service_ids: Destination Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[str] output_device: Outgoing interface name.
        :param pulumi.Input[int] protocol: Protocol number (0 - 255).
        :param pulumi.Input[int] seq_num: Sequence number.
        :param pulumi.Input[str] src: Source IPv6 prefix.
        :param pulumi.Input[str] src_negate: Enable/disable negating source address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['Policy6SrcaddrArgs']]] srcaddrs: Source address name. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[int] start_port: Start destination port number (1 - 65535).
        :param pulumi.Input[int] start_source_port: Start source port number (1 - 65535).
        :param pulumi.Input[str] status: Enable/disable this policy route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tos: Type of service bit pattern.
        :param pulumi.Input[str] tos_mask: Type of service evaluated bits.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if dst_negate is not None:
            pulumi.set(__self__, "dst_negate", dst_negate)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if end_source_port is not None:
            pulumi.set(__self__, "end_source_port", end_source_port)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if input_device is not None:
            pulumi.set(__self__, "input_device", input_device)
        if input_device_negate is not None:
            pulumi.set(__self__, "input_device_negate", input_device_negate)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if output_device is not None:
            pulumi.set(__self__, "output_device", output_device)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if src is not None:
            pulumi.set(__self__, "src", src)
        if src_negate is not None:
            pulumi.set(__self__, "src_negate", src_negate)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if start_source_port is not None:
            pulumi.set(__self__, "start_source_port", start_source_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action of the policy route. Valid values: `deny`, `permit`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IPv6 prefix.
        """
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negating destination address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dst_negate")

    @dst_negate.setter
    def dst_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_negate", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Policy6DstaddrArgs']]]]:
        """
        Destination address name. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6DstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        End destination port number (1 - 65535).
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter(name="endSourcePort")
    def end_source_port(self) -> Optional[pulumi.Input[int]]:
        """
        End source port number (1 - 65535).
        """
        return pulumi.get(self, "end_source_port")

    @end_source_port.setter
    def end_source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_source_port", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the gateway.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="inputDevice")
    def input_device(self) -> Optional[pulumi.Input[str]]:
        """
        Incoming interface name.
        """
        return pulumi.get(self, "input_device")

    @input_device.setter
    def input_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_device", value)

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "input_device_negate")

    @input_device_negate.setter
    def input_device_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_device_negate", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceCustomArgs']]]]:
        """
        Custom Destination Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceIdArgs']]]]:
        """
        Destination Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6InternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="outputDevice")
    def output_device(self) -> Optional[pulumi.Input[str]]:
        """
        Outgoing interface name.
        """
        return pulumi.get(self, "output_device")

    @output_device.setter
    def output_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_device", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Protocol number (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)

    @property
    @pulumi.getter
    def src(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 prefix.
        """
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src", value)

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negating source address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "src_negate")

    @src_negate.setter
    def src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_negate", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Policy6SrcaddrArgs']]]]:
        """
        Source address name. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Policy6SrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Start destination port number (1 - 65535).
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter(name="startSourcePort")
    def start_source_port(self) -> Optional[pulumi.Input[int]]:
        """
        Start source port number (1 - 65535).
        """
        return pulumi.get(self, "start_source_port")

    @start_source_port.setter
    def start_source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_source_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this policy route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        """
        Type of service bit pattern.
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Type of service evaluated bits.
        """
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Policy6(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 dst_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6DstaddrArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 end_source_port: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 input_device: Optional[pulumi.Input[str]] = None,
                 input_device_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6InternetServiceCustomArgs']]]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6InternetServiceIdArgs']]]]] = None,
                 output_device: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 src_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6SrcaddrArgs']]]]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 start_source_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure IPv6 routing policies.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.router.Policy6("trname",
            dst="::/0",
            end_port=65535,
            gateway="::",
            input_device="port1",
            output_device="port3",
            protocol=33,
            seq_num=1,
            src="2001:db8:85a3::8a2e:370:7334/128",
            start_port=1,
            status="enable",
            tos="0x00",
            tos_mask="0x00")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Router Policy6 can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:router/policy6:Policy6 labelname {{seq_num}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:router/policy6:Policy6 labelname {{seq_num}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Action of the policy route. Valid values: `deny`, `permit`.
        :param pulumi.Input[str] comments: Optional comments.
        :param pulumi.Input[str] dst: Destination IPv6 prefix.
        :param pulumi.Input[str] dst_negate: Enable/disable negating destination address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6DstaddrArgs']]]] dstaddrs: Destination address name. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] end_port: End destination port number (1 - 65535).
        :param pulumi.Input[int] end_source_port: End source port number (1 - 65535).
        :param pulumi.Input[str] gateway: IPv6 address of the gateway.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] input_device: Incoming interface name.
        :param pulumi.Input[str] input_device_negate: Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6InternetServiceCustomArgs']]]] internet_service_customs: Custom Destination Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6InternetServiceIdArgs']]]] internet_service_ids: Destination Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[str] output_device: Outgoing interface name.
        :param pulumi.Input[int] protocol: Protocol number (0 - 255).
        :param pulumi.Input[int] seq_num: Sequence number.
        :param pulumi.Input[str] src: Source IPv6 prefix.
        :param pulumi.Input[str] src_negate: Enable/disable negating source address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6SrcaddrArgs']]]] srcaddrs: Source address name. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[int] start_port: Start destination port number (1 - 65535).
        :param pulumi.Input[int] start_source_port: Start source port number (1 - 65535).
        :param pulumi.Input[str] status: Enable/disable this policy route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tos: Type of service bit pattern.
        :param pulumi.Input[str] tos_mask: Type of service evaluated bits.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Policy6Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure IPv6 routing policies.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.router.Policy6("trname",
            dst="::/0",
            end_port=65535,
            gateway="::",
            input_device="port1",
            output_device="port3",
            protocol=33,
            seq_num=1,
            src="2001:db8:85a3::8a2e:370:7334/128",
            start_port=1,
            status="enable",
            tos="0x00",
            tos_mask="0x00")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Router Policy6 can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:router/policy6:Policy6 labelname {{seq_num}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:router/policy6:Policy6 labelname {{seq_num}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param Policy6Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Policy6Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 dst_negate: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6DstaddrArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 end_source_port: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 input_device: Optional[pulumi.Input[str]] = None,
                 input_device_negate: Optional[pulumi.Input[str]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6InternetServiceCustomArgs']]]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6InternetServiceIdArgs']]]]] = None,
                 output_device: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 src_negate: Optional[pulumi.Input[str]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6SrcaddrArgs']]]]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 start_source_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Policy6Args.__new__(Policy6Args)

            __props__.__dict__["action"] = action
            __props__.__dict__["comments"] = comments
            __props__.__dict__["dst"] = dst
            __props__.__dict__["dst_negate"] = dst_negate
            __props__.__dict__["dstaddrs"] = dstaddrs
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["end_port"] = end_port
            __props__.__dict__["end_source_port"] = end_source_port
            __props__.__dict__["gateway"] = gateway
            __props__.__dict__["get_all_tables"] = get_all_tables
            if input_device is None and not opts.urn:
                raise TypeError("Missing required property 'input_device'")
            __props__.__dict__["input_device"] = input_device
            __props__.__dict__["input_device_negate"] = input_device_negate
            __props__.__dict__["internet_service_customs"] = internet_service_customs
            __props__.__dict__["internet_service_ids"] = internet_service_ids
            __props__.__dict__["output_device"] = output_device
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["seq_num"] = seq_num
            __props__.__dict__["src"] = src
            __props__.__dict__["src_negate"] = src_negate
            __props__.__dict__["srcaddrs"] = srcaddrs
            __props__.__dict__["start_port"] = start_port
            __props__.__dict__["start_source_port"] = start_source_port
            __props__.__dict__["status"] = status
            __props__.__dict__["tos"] = tos
            __props__.__dict__["tos_mask"] = tos_mask
            __props__.__dict__["vdomparam"] = vdomparam
        super(Policy6, __self__).__init__(
            'fortios:router/policy6:Policy6',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dst: Optional[pulumi.Input[str]] = None,
            dst_negate: Optional[pulumi.Input[str]] = None,
            dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6DstaddrArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            end_port: Optional[pulumi.Input[int]] = None,
            end_source_port: Optional[pulumi.Input[int]] = None,
            gateway: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            input_device: Optional[pulumi.Input[str]] = None,
            input_device_negate: Optional[pulumi.Input[str]] = None,
            internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6InternetServiceCustomArgs']]]]] = None,
            internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6InternetServiceIdArgs']]]]] = None,
            output_device: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[int]] = None,
            seq_num: Optional[pulumi.Input[int]] = None,
            src: Optional[pulumi.Input[str]] = None,
            src_negate: Optional[pulumi.Input[str]] = None,
            srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6SrcaddrArgs']]]]] = None,
            start_port: Optional[pulumi.Input[int]] = None,
            start_source_port: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tos: Optional[pulumi.Input[str]] = None,
            tos_mask: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Policy6':
        """
        Get an existing Policy6 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Action of the policy route. Valid values: `deny`, `permit`.
        :param pulumi.Input[str] comments: Optional comments.
        :param pulumi.Input[str] dst: Destination IPv6 prefix.
        :param pulumi.Input[str] dst_negate: Enable/disable negating destination address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6DstaddrArgs']]]] dstaddrs: Destination address name. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] end_port: End destination port number (1 - 65535).
        :param pulumi.Input[int] end_source_port: End source port number (1 - 65535).
        :param pulumi.Input[str] gateway: IPv6 address of the gateway.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] input_device: Incoming interface name.
        :param pulumi.Input[str] input_device_negate: Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6InternetServiceCustomArgs']]]] internet_service_customs: Custom Destination Internet Service name. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6InternetServiceIdArgs']]]] internet_service_ids: Destination Internet Service ID. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[str] output_device: Outgoing interface name.
        :param pulumi.Input[int] protocol: Protocol number (0 - 255).
        :param pulumi.Input[int] seq_num: Sequence number.
        :param pulumi.Input[str] src: Source IPv6 prefix.
        :param pulumi.Input[str] src_negate: Enable/disable negating source address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Policy6SrcaddrArgs']]]] srcaddrs: Source address name. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[int] start_port: Start destination port number (1 - 65535).
        :param pulumi.Input[int] start_source_port: Start source port number (1 - 65535).
        :param pulumi.Input[str] status: Enable/disable this policy route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tos: Type of service bit pattern.
        :param pulumi.Input[str] tos_mask: Type of service evaluated bits.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Policy6State.__new__(_Policy6State)

        __props__.__dict__["action"] = action
        __props__.__dict__["comments"] = comments
        __props__.__dict__["dst"] = dst
        __props__.__dict__["dst_negate"] = dst_negate
        __props__.__dict__["dstaddrs"] = dstaddrs
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["end_port"] = end_port
        __props__.__dict__["end_source_port"] = end_source_port
        __props__.__dict__["gateway"] = gateway
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["input_device"] = input_device
        __props__.__dict__["input_device_negate"] = input_device_negate
        __props__.__dict__["internet_service_customs"] = internet_service_customs
        __props__.__dict__["internet_service_ids"] = internet_service_ids
        __props__.__dict__["output_device"] = output_device
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["seq_num"] = seq_num
        __props__.__dict__["src"] = src
        __props__.__dict__["src_negate"] = src_negate
        __props__.__dict__["srcaddrs"] = srcaddrs
        __props__.__dict__["start_port"] = start_port
        __props__.__dict__["start_source_port"] = start_source_port
        __props__.__dict__["status"] = status
        __props__.__dict__["tos"] = tos
        __props__.__dict__["tos_mask"] = tos_mask
        __props__.__dict__["vdomparam"] = vdomparam
        return Policy6(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Action of the policy route. Valid values: `deny`, `permit`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def dst(self) -> pulumi.Output[str]:
        """
        Destination IPv6 prefix.
        """
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> pulumi.Output[str]:
        """
        Enable/disable negating destination address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dst_negate")

    @property
    @pulumi.getter
    def dstaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.Policy6Dstaddr']]]:
        """
        Destination address name. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> pulumi.Output[int]:
        """
        End destination port number (1 - 65535).
        """
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="endSourcePort")
    def end_source_port(self) -> pulumi.Output[int]:
        """
        End source port number (1 - 65535).
        """
        return pulumi.get(self, "end_source_port")

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Output[str]:
        """
        IPv6 address of the gateway.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="inputDevice")
    def input_device(self) -> pulumi.Output[str]:
        """
        Incoming interface name.
        """
        return pulumi.get(self, "input_device")

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> pulumi.Output[str]:
        """
        Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "input_device_negate")

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> pulumi.Output[Optional[Sequence['outputs.Policy6InternetServiceCustom']]]:
        """
        Custom Destination Internet Service name. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> pulumi.Output[Optional[Sequence['outputs.Policy6InternetServiceId']]]:
        """
        Destination Internet Service ID. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @property
    @pulumi.getter(name="outputDevice")
    def output_device(self) -> pulumi.Output[str]:
        """
        Outgoing interface name.
        """
        return pulumi.get(self, "output_device")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[int]:
        """
        Protocol number (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> pulumi.Output[int]:
        """
        Sequence number.
        """
        return pulumi.get(self, "seq_num")

    @property
    @pulumi.getter
    def src(self) -> pulumi.Output[str]:
        """
        Source IPv6 prefix.
        """
        return pulumi.get(self, "src")

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> pulumi.Output[str]:
        """
        Enable/disable negating source address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "src_negate")

    @property
    @pulumi.getter
    def srcaddrs(self) -> pulumi.Output[Optional[Sequence['outputs.Policy6Srcaddr']]]:
        """
        Source address name. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> pulumi.Output[int]:
        """
        Start destination port number (1 - 65535).
        """
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter(name="startSourcePort")
    def start_source_port(self) -> pulumi.Output[int]:
        """
        Start source port number (1 - 65535).
        """
        return pulumi.get(self, "start_source_port")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable this policy route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tos(self) -> pulumi.Output[str]:
        """
        Type of service bit pattern.
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> pulumi.Output[str]:
        """
        Type of service evaluated bits.
        """
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

