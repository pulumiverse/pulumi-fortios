# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OspfinterfaceArgs', 'Ospfinterface']

@pulumi.input_type
class OspfinterfaceArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 authentication_key: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 database_filter_out: Optional[pulumi.Input[str]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 hello_multiplier: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 keychain: Optional[pulumi.Input[str]] = None,
                 md5_key: Optional[pulumi.Input[str]] = None,
                 md5_keychain: Optional[pulumi.Input[str]] = None,
                 md5_keys: Optional[pulumi.Input[Sequence[pulumi.Input['OspfinterfaceMd5KeyArgs']]]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_ignore: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 resync_timeout: Optional[pulumi.Input[int]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ospfinterface resource.
        :param pulumi.Input[str] authentication: Authentication type.
        :param pulumi.Input[str] authentication_key: Authentication key.
        :param pulumi.Input[str] bfd: Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[int] cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param pulumi.Input[str] database_filter_out: Enable/disable control of flooding out LSAs. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] dead_interval: Dead interval.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] hello_interval: Hello interval.
        :param pulumi.Input[int] hello_multiplier: Number of hello packets within dead interval.
        :param pulumi.Input[str] interface: Configuration interface name.
        :param pulumi.Input[str] ip: IP address.
        :param pulumi.Input[str] keychain: Message-digest key-chain name.
        :param pulumi.Input[str] md5_key: MD5 key.
        :param pulumi.Input[str] md5_keychain: Authentication MD5 key-chain name.
        :param pulumi.Input[Sequence[pulumi.Input['OspfinterfaceMd5KeyArgs']]] md5_keys: MD5 key. The structure of `md5_keys` block is documented below.
        :param pulumi.Input[int] mtu: MTU for database description packets.
        :param pulumi.Input[str] mtu_ignore: Enable/disable ignore MTU. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Interface entry name.
        :param pulumi.Input[str] network_type: Network type. Valid values: `broadcast`, `non-broadcast`, `point-to-point`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        :param pulumi.Input[int] prefix_length: Prefix length.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[int] resync_timeout: Graceful restart neighbor resynchronization timeout.
        :param pulumi.Input[int] retransmit_interval: Retransmit interval.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] transmit_delay: Transmit delay.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
               
               The `md5_keys` block supports:
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if database_filter_out is not None:
            pulumi.set(__self__, "database_filter_out", database_filter_out)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_multiplier is not None:
            pulumi.set(__self__, "hello_multiplier", hello_multiplier)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if keychain is not None:
            pulumi.set(__self__, "keychain", keychain)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if md5_keychain is not None:
            pulumi.set(__self__, "md5_keychain", md5_keychain)
        if md5_keys is not None:
            pulumi.set(__self__, "md5_keys", md5_keys)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_ignore is not None:
            pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if resync_timeout is not None:
            pulumi.set(__self__, "resync_timeout", resync_timeout)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key.
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter(name="databaseFilterOut")
    def database_filter_out(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable control of flooding out LSAs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "database_filter_out")

    @database_filter_out.setter
    def database_filter_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_filter_out", value)

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_interval", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter(name="helloMultiplier")
    def hello_multiplier(self) -> Optional[pulumi.Input[int]]:
        """
        Number of hello packets within dead interval.
        """
        return pulumi.get(self, "hello_multiplier")

    @hello_multiplier.setter
    def hello_multiplier(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_multiplier", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def keychain(self) -> Optional[pulumi.Input[str]]:
        """
        Message-digest key-chain name.
        """
        return pulumi.get(self, "keychain")

    @keychain.setter
    def keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keychain", value)

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[pulumi.Input[str]]:
        """
        MD5 key.
        """
        return pulumi.get(self, "md5_key")

    @md5_key.setter
    def md5_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_key", value)

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication MD5 key-chain name.
        """
        return pulumi.get(self, "md5_keychain")

    @md5_keychain.setter
    def md5_keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_keychain", value)

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfinterfaceMd5KeyArgs']]]]:
        """
        MD5 key. The structure of `md5_keys` block is documented below.
        """
        return pulumi.get(self, "md5_keys")

    @md5_keys.setter
    def md5_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfinterfaceMd5KeyArgs']]]]):
        pulumi.set(self, "md5_keys", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU for database description packets.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ignore MTU. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mtu_ignore")

    @mtu_ignore.setter
    def mtu_ignore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu_ignore", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Network type. Valid values: `broadcast`, `non-broadcast`, `point-to-point`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[int]]:
        """
        Prefix length.
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="resyncTimeout")
    def resync_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Graceful restart neighbor resynchronization timeout.
        """
        return pulumi.get(self, "resync_timeout")

    @resync_timeout.setter
    def resync_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "resync_timeout", value)

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retransmit_interval", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")

    @transmit_delay.setter
    def transmit_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmit_delay", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.

        The `md5_keys` block supports:
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _OspfinterfaceState:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 authentication_key: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 database_filter_out: Optional[pulumi.Input[str]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 hello_multiplier: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 keychain: Optional[pulumi.Input[str]] = None,
                 md5_key: Optional[pulumi.Input[str]] = None,
                 md5_keychain: Optional[pulumi.Input[str]] = None,
                 md5_keys: Optional[pulumi.Input[Sequence[pulumi.Input['OspfinterfaceMd5KeyArgs']]]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_ignore: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 resync_timeout: Optional[pulumi.Input[int]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ospfinterface resources.
        :param pulumi.Input[str] authentication: Authentication type.
        :param pulumi.Input[str] authentication_key: Authentication key.
        :param pulumi.Input[str] bfd: Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[int] cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param pulumi.Input[str] database_filter_out: Enable/disable control of flooding out LSAs. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] dead_interval: Dead interval.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] hello_interval: Hello interval.
        :param pulumi.Input[int] hello_multiplier: Number of hello packets within dead interval.
        :param pulumi.Input[str] interface: Configuration interface name.
        :param pulumi.Input[str] ip: IP address.
        :param pulumi.Input[str] keychain: Message-digest key-chain name.
        :param pulumi.Input[str] md5_key: MD5 key.
        :param pulumi.Input[str] md5_keychain: Authentication MD5 key-chain name.
        :param pulumi.Input[Sequence[pulumi.Input['OspfinterfaceMd5KeyArgs']]] md5_keys: MD5 key. The structure of `md5_keys` block is documented below.
        :param pulumi.Input[int] mtu: MTU for database description packets.
        :param pulumi.Input[str] mtu_ignore: Enable/disable ignore MTU. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Interface entry name.
        :param pulumi.Input[str] network_type: Network type. Valid values: `broadcast`, `non-broadcast`, `point-to-point`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        :param pulumi.Input[int] prefix_length: Prefix length.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[int] resync_timeout: Graceful restart neighbor resynchronization timeout.
        :param pulumi.Input[int] retransmit_interval: Retransmit interval.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] transmit_delay: Transmit delay.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
               
               The `md5_keys` block supports:
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if database_filter_out is not None:
            pulumi.set(__self__, "database_filter_out", database_filter_out)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_multiplier is not None:
            pulumi.set(__self__, "hello_multiplier", hello_multiplier)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if keychain is not None:
            pulumi.set(__self__, "keychain", keychain)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if md5_keychain is not None:
            pulumi.set(__self__, "md5_keychain", md5_keychain)
        if md5_keys is not None:
            pulumi.set(__self__, "md5_keys", md5_keys)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_ignore is not None:
            pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if resync_timeout is not None:
            pulumi.set(__self__, "resync_timeout", resync_timeout)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key.
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter(name="databaseFilterOut")
    def database_filter_out(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable control of flooding out LSAs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "database_filter_out")

    @database_filter_out.setter
    def database_filter_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_filter_out", value)

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_interval", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter(name="helloMultiplier")
    def hello_multiplier(self) -> Optional[pulumi.Input[int]]:
        """
        Number of hello packets within dead interval.
        """
        return pulumi.get(self, "hello_multiplier")

    @hello_multiplier.setter
    def hello_multiplier(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_multiplier", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def keychain(self) -> Optional[pulumi.Input[str]]:
        """
        Message-digest key-chain name.
        """
        return pulumi.get(self, "keychain")

    @keychain.setter
    def keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keychain", value)

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[pulumi.Input[str]]:
        """
        MD5 key.
        """
        return pulumi.get(self, "md5_key")

    @md5_key.setter
    def md5_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_key", value)

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication MD5 key-chain name.
        """
        return pulumi.get(self, "md5_keychain")

    @md5_keychain.setter
    def md5_keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_keychain", value)

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OspfinterfaceMd5KeyArgs']]]]:
        """
        MD5 key. The structure of `md5_keys` block is documented below.
        """
        return pulumi.get(self, "md5_keys")

    @md5_keys.setter
    def md5_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OspfinterfaceMd5KeyArgs']]]]):
        pulumi.set(self, "md5_keys", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU for database description packets.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ignore MTU. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mtu_ignore")

    @mtu_ignore.setter
    def mtu_ignore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu_ignore", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Network type. Valid values: `broadcast`, `non-broadcast`, `point-to-point`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[int]]:
        """
        Prefix length.
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="resyncTimeout")
    def resync_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Graceful restart neighbor resynchronization timeout.
        """
        return pulumi.get(self, "resync_timeout")

    @resync_timeout.setter
    def resync_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "resync_timeout", value)

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retransmit_interval", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")

    @transmit_delay.setter
    def transmit_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmit_delay", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.

        The `md5_keys` block supports:
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Ospfinterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 authentication_key: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 database_filter_out: Optional[pulumi.Input[str]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 hello_multiplier: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 keychain: Optional[pulumi.Input[str]] = None,
                 md5_key: Optional[pulumi.Input[str]] = None,
                 md5_keychain: Optional[pulumi.Input[str]] = None,
                 md5_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfinterfaceMd5KeyArgs']]]]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_ignore: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 resync_timeout: Optional[pulumi.Input[int]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        OSPF interface configuration.

        > The provider supports the definition of Ospf-Interface in Router Ospf `router.Ospf`, and also allows the definition of separate Ospf-Interface resources `router/ospf.Ospfinterface`, but do not use a `router.Ospf` with in-line Ospf-Interface in conjunction with any `router/ospf.Ospfinterface` resources, otherwise conflicts and overwrite will occur.

        ## Import

        Routerospf OspfInterface can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:router/ospf/ospfinterface:Ospfinterface labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:router/ospf/ospfinterface:Ospfinterface labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authentication: Authentication type.
        :param pulumi.Input[str] authentication_key: Authentication key.
        :param pulumi.Input[str] bfd: Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[int] cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param pulumi.Input[str] database_filter_out: Enable/disable control of flooding out LSAs. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] dead_interval: Dead interval.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] hello_interval: Hello interval.
        :param pulumi.Input[int] hello_multiplier: Number of hello packets within dead interval.
        :param pulumi.Input[str] interface: Configuration interface name.
        :param pulumi.Input[str] ip: IP address.
        :param pulumi.Input[str] keychain: Message-digest key-chain name.
        :param pulumi.Input[str] md5_key: MD5 key.
        :param pulumi.Input[str] md5_keychain: Authentication MD5 key-chain name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfinterfaceMd5KeyArgs']]]] md5_keys: MD5 key. The structure of `md5_keys` block is documented below.
        :param pulumi.Input[int] mtu: MTU for database description packets.
        :param pulumi.Input[str] mtu_ignore: Enable/disable ignore MTU. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Interface entry name.
        :param pulumi.Input[str] network_type: Network type. Valid values: `broadcast`, `non-broadcast`, `point-to-point`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        :param pulumi.Input[int] prefix_length: Prefix length.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[int] resync_timeout: Graceful restart neighbor resynchronization timeout.
        :param pulumi.Input[int] retransmit_interval: Retransmit interval.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] transmit_delay: Transmit delay.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
               
               The `md5_keys` block supports:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[OspfinterfaceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        OSPF interface configuration.

        > The provider supports the definition of Ospf-Interface in Router Ospf `router.Ospf`, and also allows the definition of separate Ospf-Interface resources `router/ospf.Ospfinterface`, but do not use a `router.Ospf` with in-line Ospf-Interface in conjunction with any `router/ospf.Ospfinterface` resources, otherwise conflicts and overwrite will occur.

        ## Import

        Routerospf OspfInterface can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:router/ospf/ospfinterface:Ospfinterface labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:router/ospf/ospfinterface:Ospfinterface labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param OspfinterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OspfinterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 authentication_key: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 database_filter_out: Optional[pulumi.Input[str]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 hello_multiplier: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 keychain: Optional[pulumi.Input[str]] = None,
                 md5_key: Optional[pulumi.Input[str]] = None,
                 md5_keychain: Optional[pulumi.Input[str]] = None,
                 md5_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfinterfaceMd5KeyArgs']]]]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_ignore: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 resync_timeout: Optional[pulumi.Input[int]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OspfinterfaceArgs.__new__(OspfinterfaceArgs)

            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["authentication_key"] = authentication_key
            __props__.__dict__["bfd"] = bfd
            __props__.__dict__["comments"] = comments
            __props__.__dict__["cost"] = cost
            __props__.__dict__["database_filter_out"] = database_filter_out
            __props__.__dict__["dead_interval"] = dead_interval
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["hello_interval"] = hello_interval
            __props__.__dict__["hello_multiplier"] = hello_multiplier
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ip"] = ip
            __props__.__dict__["keychain"] = keychain
            __props__.__dict__["md5_key"] = md5_key
            __props__.__dict__["md5_keychain"] = md5_keychain
            __props__.__dict__["md5_keys"] = md5_keys
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["mtu_ignore"] = mtu_ignore
            __props__.__dict__["name"] = name
            __props__.__dict__["network_type"] = network_type
            __props__.__dict__["prefix_length"] = prefix_length
            __props__.__dict__["priority"] = priority
            __props__.__dict__["resync_timeout"] = resync_timeout
            __props__.__dict__["retransmit_interval"] = retransmit_interval
            __props__.__dict__["status"] = status
            __props__.__dict__["transmit_delay"] = transmit_delay
            __props__.__dict__["vdomparam"] = vdomparam
        super(Ospfinterface, __self__).__init__(
            'fortios:router/ospf/ospfinterface:Ospfinterface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authentication: Optional[pulumi.Input[str]] = None,
            authentication_key: Optional[pulumi.Input[str]] = None,
            bfd: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            cost: Optional[pulumi.Input[int]] = None,
            database_filter_out: Optional[pulumi.Input[str]] = None,
            dead_interval: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            hello_interval: Optional[pulumi.Input[int]] = None,
            hello_multiplier: Optional[pulumi.Input[int]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            keychain: Optional[pulumi.Input[str]] = None,
            md5_key: Optional[pulumi.Input[str]] = None,
            md5_keychain: Optional[pulumi.Input[str]] = None,
            md5_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfinterfaceMd5KeyArgs']]]]] = None,
            mtu: Optional[pulumi.Input[int]] = None,
            mtu_ignore: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_type: Optional[pulumi.Input[str]] = None,
            prefix_length: Optional[pulumi.Input[int]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            resync_timeout: Optional[pulumi.Input[int]] = None,
            retransmit_interval: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            transmit_delay: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Ospfinterface':
        """
        Get an existing Ospfinterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authentication: Authentication type.
        :param pulumi.Input[str] authentication_key: Authentication key.
        :param pulumi.Input[str] bfd: Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[int] cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param pulumi.Input[str] database_filter_out: Enable/disable control of flooding out LSAs. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] dead_interval: Dead interval.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] hello_interval: Hello interval.
        :param pulumi.Input[int] hello_multiplier: Number of hello packets within dead interval.
        :param pulumi.Input[str] interface: Configuration interface name.
        :param pulumi.Input[str] ip: IP address.
        :param pulumi.Input[str] keychain: Message-digest key-chain name.
        :param pulumi.Input[str] md5_key: MD5 key.
        :param pulumi.Input[str] md5_keychain: Authentication MD5 key-chain name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OspfinterfaceMd5KeyArgs']]]] md5_keys: MD5 key. The structure of `md5_keys` block is documented below.
        :param pulumi.Input[int] mtu: MTU for database description packets.
        :param pulumi.Input[str] mtu_ignore: Enable/disable ignore MTU. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Interface entry name.
        :param pulumi.Input[str] network_type: Network type. Valid values: `broadcast`, `non-broadcast`, `point-to-point`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        :param pulumi.Input[int] prefix_length: Prefix length.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[int] resync_timeout: Graceful restart neighbor resynchronization timeout.
        :param pulumi.Input[int] retransmit_interval: Retransmit interval.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] transmit_delay: Transmit delay.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
               
               The `md5_keys` block supports:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OspfinterfaceState.__new__(_OspfinterfaceState)

        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["authentication_key"] = authentication_key
        __props__.__dict__["bfd"] = bfd
        __props__.__dict__["comments"] = comments
        __props__.__dict__["cost"] = cost
        __props__.__dict__["database_filter_out"] = database_filter_out
        __props__.__dict__["dead_interval"] = dead_interval
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["hello_interval"] = hello_interval
        __props__.__dict__["hello_multiplier"] = hello_multiplier
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ip"] = ip
        __props__.__dict__["keychain"] = keychain
        __props__.__dict__["md5_key"] = md5_key
        __props__.__dict__["md5_keychain"] = md5_keychain
        __props__.__dict__["md5_keys"] = md5_keys
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["mtu_ignore"] = mtu_ignore
        __props__.__dict__["name"] = name
        __props__.__dict__["network_type"] = network_type
        __props__.__dict__["prefix_length"] = prefix_length
        __props__.__dict__["priority"] = priority
        __props__.__dict__["resync_timeout"] = resync_timeout
        __props__.__dict__["retransmit_interval"] = retransmit_interval
        __props__.__dict__["status"] = status
        __props__.__dict__["transmit_delay"] = transmit_delay
        __props__.__dict__["vdomparam"] = vdomparam
        return Ospfinterface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output[str]:
        """
        Authentication type.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication key.
        """
        return pulumi.get(self, "authentication_key")

    @property
    @pulumi.getter
    def bfd(self) -> pulumi.Output[str]:
        """
        Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def cost(self) -> pulumi.Output[int]:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="databaseFilterOut")
    def database_filter_out(self) -> pulumi.Output[str]:
        """
        Enable/disable control of flooding out LSAs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "database_filter_out")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> pulumi.Output[int]:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> pulumi.Output[int]:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter(name="helloMultiplier")
    def hello_multiplier(self) -> pulumi.Output[int]:
        """
        Number of hello packets within dead interval.
        """
        return pulumi.get(self, "hello_multiplier")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Configuration interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        """
        IP address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def keychain(self) -> pulumi.Output[str]:
        """
        Message-digest key-chain name.
        """
        return pulumi.get(self, "keychain")

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> pulumi.Output[str]:
        """
        MD5 key.
        """
        return pulumi.get(self, "md5_key")

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> pulumi.Output[str]:
        """
        Authentication MD5 key-chain name.
        """
        return pulumi.get(self, "md5_keychain")

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> pulumi.Output[Optional[Sequence['outputs.OspfinterfaceMd5Key']]]:
        """
        MD5 key. The structure of `md5_keys` block is documented below.
        """
        return pulumi.get(self, "md5_keys")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[int]:
        """
        MTU for database description packets.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> pulumi.Output[str]:
        """
        Enable/disable ignore MTU. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mtu_ignore")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Interface entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Output[str]:
        """
        Network type. Valid values: `broadcast`, `non-broadcast`, `point-to-point`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> pulumi.Output[int]:
        """
        Prefix length.
        """
        return pulumi.get(self, "prefix_length")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="resyncTimeout")
    def resync_timeout(self) -> pulumi.Output[int]:
        """
        Graceful restart neighbor resynchronization timeout.
        """
        return pulumi.get(self, "resync_timeout")

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> pulumi.Output[int]:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> pulumi.Output[int]:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.

        The `md5_keys` block supports:
        """
        return pulumi.get(self, "vdomparam")

