# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NeighborArgs', 'Neighbor']

@pulumi.input_type
class NeighborArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 activate: Optional[pulumi.Input[str]] = None,
                 activate6: Optional[pulumi.Input[str]] = None,
                 activate_evpn: Optional[pulumi.Input[str]] = None,
                 activate_vpnv4: Optional[pulumi.Input[str]] = None,
                 activate_vpnv6: Optional[pulumi.Input[str]] = None,
                 additional_path: Optional[pulumi.Input[str]] = None,
                 additional_path6: Optional[pulumi.Input[str]] = None,
                 additional_path_vpnv4: Optional[pulumi.Input[str]] = None,
                 additional_path_vpnv6: Optional[pulumi.Input[str]] = None,
                 adv_additional_path: Optional[pulumi.Input[int]] = None,
                 adv_additional_path6: Optional[pulumi.Input[int]] = None,
                 adv_additional_path_vpnv4: Optional[pulumi.Input[int]] = None,
                 adv_additional_path_vpnv6: Optional[pulumi.Input[int]] = None,
                 advertisement_interval: Optional[pulumi.Input[int]] = None,
                 allowas_in: Optional[pulumi.Input[int]] = None,
                 allowas_in6: Optional[pulumi.Input[int]] = None,
                 allowas_in_enable: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable6: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_evpn: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_vpnv4: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_vpnv6: Optional[pulumi.Input[str]] = None,
                 allowas_in_evpn: Optional[pulumi.Input[int]] = None,
                 allowas_in_vpnv4: Optional[pulumi.Input[int]] = None,
                 allowas_in_vpnv6: Optional[pulumi.Input[int]] = None,
                 as_override: Optional[pulumi.Input[str]] = None,
                 as_override6: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged6: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged_vpnv4: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged_vpnv6: Optional[pulumi.Input[str]] = None,
                 auth_options: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 capability_default_originate: Optional[pulumi.Input[str]] = None,
                 capability_default_originate6: Optional[pulumi.Input[str]] = None,
                 capability_dynamic: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart6: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_evpn: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_vpnv4: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_vpnv6: Optional[pulumi.Input[str]] = None,
                 capability_orf: Optional[pulumi.Input[str]] = None,
                 capability_orf6: Optional[pulumi.Input[str]] = None,
                 capability_route_refresh: Optional[pulumi.Input[str]] = None,
                 conditional_advertise6s: Optional[pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertise6Args']]]] = None,
                 conditional_advertises: Optional[pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertiseArgs']]]] = None,
                 connect_timer: Optional[pulumi.Input[int]] = None,
                 default_originate_routemap: Optional[pulumi.Input[str]] = None,
                 default_originate_routemap6: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distribute_list_in: Optional[pulumi.Input[str]] = None,
                 distribute_list_in6: Optional[pulumi.Input[str]] = None,
                 distribute_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 distribute_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 distribute_list_out: Optional[pulumi.Input[str]] = None,
                 distribute_list_out6: Optional[pulumi.Input[str]] = None,
                 distribute_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 distribute_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 dont_capability_negotiate: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ebgp_enforce_multihop: Optional[pulumi.Input[str]] = None,
                 ebgp_multihop_ttl: Optional[pulumi.Input[int]] = None,
                 filter_list_in: Optional[pulumi.Input[str]] = None,
                 filter_list_in6: Optional[pulumi.Input[str]] = None,
                 filter_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 filter_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 filter_list_out: Optional[pulumi.Input[str]] = None,
                 filter_list_out6: Optional[pulumi.Input[str]] = None,
                 filter_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 filter_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 holdtime_timer: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 keep_alive_timer: Optional[pulumi.Input[int]] = None,
                 link_down_failover: Optional[pulumi.Input[str]] = None,
                 local_as: Optional[pulumi.Input[int]] = None,
                 local_as_no_prepend: Optional[pulumi.Input[str]] = None,
                 local_as_replace_as: Optional[pulumi.Input[str]] = None,
                 maximum_prefix: Optional[pulumi.Input[int]] = None,
                 maximum_prefix6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_evpn: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_evpn: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_vpnv4: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_vpnv6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_vpnv4: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_vpnv6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_warning_only: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only6: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_evpn: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_vpnv4: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_vpnv6: Optional[pulumi.Input[str]] = None,
                 next_hop_self: Optional[pulumi.Input[str]] = None,
                 next_hop_self6: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr6: Optional[pulumi.Input[str]] = None,
                 next_hop_self_vpnv4: Optional[pulumi.Input[str]] = None,
                 next_hop_self_vpnv6: Optional[pulumi.Input[str]] = None,
                 override_capability: Optional[pulumi.Input[str]] = None,
                 passive: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prefix_list_in: Optional[pulumi.Input[str]] = None,
                 prefix_list_in6: Optional[pulumi.Input[str]] = None,
                 prefix_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 prefix_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 prefix_list_out: Optional[pulumi.Input[str]] = None,
                 prefix_list_out6: Optional[pulumi.Input[str]] = None,
                 prefix_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 prefix_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 remote_as: Optional[pulumi.Input[int]] = None,
                 remove_private_as: Optional[pulumi.Input[str]] = None,
                 remove_private_as6: Optional[pulumi.Input[str]] = None,
                 remove_private_as_evpn: Optional[pulumi.Input[str]] = None,
                 remove_private_as_vpnv4: Optional[pulumi.Input[str]] = None,
                 remove_private_as_vpnv6: Optional[pulumi.Input[str]] = None,
                 restart_time: Optional[pulumi.Input[int]] = None,
                 retain_stale_time: Optional[pulumi.Input[int]] = None,
                 route_map_in: Optional[pulumi.Input[str]] = None,
                 route_map_in6: Optional[pulumi.Input[str]] = None,
                 route_map_in_evpn: Optional[pulumi.Input[str]] = None,
                 route_map_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_map_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 route_map_out: Optional[pulumi.Input[str]] = None,
                 route_map_out6: Optional[pulumi.Input[str]] = None,
                 route_map_out6_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_evpn: Optional[pulumi.Input[str]] = None,
                 route_map_out_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv4_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv6_preferable: Optional[pulumi.Input[str]] = None,
                 route_reflector_client: Optional[pulumi.Input[str]] = None,
                 route_reflector_client6: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_evpn: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_vpnv6: Optional[pulumi.Input[str]] = None,
                 route_server_client: Optional[pulumi.Input[str]] = None,
                 route_server_client6: Optional[pulumi.Input[str]] = None,
                 route_server_client_evpn: Optional[pulumi.Input[str]] = None,
                 route_server_client_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_server_client_vpnv6: Optional[pulumi.Input[str]] = None,
                 send_community: Optional[pulumi.Input[str]] = None,
                 send_community6: Optional[pulumi.Input[str]] = None,
                 send_community_evpn: Optional[pulumi.Input[str]] = None,
                 send_community_vpnv4: Optional[pulumi.Input[str]] = None,
                 send_community_vpnv6: Optional[pulumi.Input[str]] = None,
                 shutdown: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration6: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_evpn: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_vpnv4: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_vpnv6: Optional[pulumi.Input[str]] = None,
                 stale_route: Optional[pulumi.Input[str]] = None,
                 strict_capability_match: Optional[pulumi.Input[str]] = None,
                 unsuppress_map: Optional[pulumi.Input[str]] = None,
                 unsuppress_map6: Optional[pulumi.Input[str]] = None,
                 update_source: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Neighbor resource.
        :param pulumi.Input[str] ip: IP/IPv6 address of neighbor.
        :param pulumi.Input[str] activate: Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate6: Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate_evpn: Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate_vpnv4: Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate_vpnv6: Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] additional_path: Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[str] additional_path6: Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[str] additional_path_vpnv4: Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[str] additional_path_vpnv6: Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[int] adv_additional_path: Number of IPv4 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] adv_additional_path6: Number of IPv6 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] adv_additional_path_vpnv4: Number of VPNv4 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] adv_additional_path_vpnv6: Number of VPNv6 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] advertisement_interval: Minimum interval (sec) between sending updates.
        :param pulumi.Input[int] allowas_in: IPv4 The maximum number of occurrence of my AS number allowed.
        :param pulumi.Input[int] allowas_in6: IPv6 The maximum number of occurrence of my AS number allowed.
        :param pulumi.Input[str] allowas_in_enable: Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable6: Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable_evpn: Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable_vpnv4: Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable_vpnv6: Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] allowas_in_evpn: The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        :param pulumi.Input[int] allowas_in_vpnv4: The maximum number of occurrence of my AS number allowed for VPNv4 route.
        :param pulumi.Input[int] allowas_in_vpnv6: The maximum number of occurrence of my AS number allowed for VPNv6 route.
        :param pulumi.Input[str] as_override: Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] as_override6: Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] attribute_unchanged: IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] attribute_unchanged6: IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] attribute_unchanged_vpnv4: List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] attribute_unchanged_vpnv6: List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] auth_options: Key-chain name for TCP authentication options.
        :param pulumi.Input[str] bfd: Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_default_originate: Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_default_originate6: Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_dynamic: Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart: Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart6: Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart_evpn: Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart_vpnv4: Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart_vpnv6: Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_orf: Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param pulumi.Input[str] capability_orf6: Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param pulumi.Input[str] capability_route_refresh: Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertise6Args']]] conditional_advertise6s: IPv6 conditional advertisement. The structure of `conditional_advertise6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertiseArgs']]] conditional_advertises: Conditional advertisement. The structure of `conditional_advertise` block is documented below.
        :param pulumi.Input[int] connect_timer: Interval (sec) for connect timer.
        :param pulumi.Input[str] default_originate_routemap: Route map to specify criteria to originate IPv4 default.
        :param pulumi.Input[str] default_originate_routemap6: Route map to specify criteria to originate IPv6 default.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] distribute_list_in: Filter for IPv4 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_in6: Filter for IPv6 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_in_vpnv4: Filter for VPNv4 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_in_vpnv6: Filter for VPNv6 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_out: Filter for IPv4 updates to this neighbor.
        :param pulumi.Input[str] distribute_list_out6: Filter for IPv6 updates to this neighbor.
        :param pulumi.Input[str] distribute_list_out_vpnv4: Filter for VPNv4 updates to this neighbor.
        :param pulumi.Input[str] distribute_list_out_vpnv6: Filter for VPNv6 updates to this neighbor.
        :param pulumi.Input[str] dont_capability_negotiate: Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ebgp_enforce_multihop: Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ebgp_multihop_ttl: EBGP multihop TTL for this peer.
        :param pulumi.Input[str] filter_list_in: BGP filter for IPv4 inbound routes.
        :param pulumi.Input[str] filter_list_in6: BGP filter for IPv6 inbound routes.
        :param pulumi.Input[str] filter_list_in_vpnv4: BGP filter for VPNv4 inbound routes.
        :param pulumi.Input[str] filter_list_in_vpnv6: BGP filter for VPNv6 inbound routes.
        :param pulumi.Input[str] filter_list_out: BGP filter for IPv4 outbound routes.
        :param pulumi.Input[str] filter_list_out6: BGP filter for IPv6 outbound routes.
        :param pulumi.Input[str] filter_list_out_vpnv4: BGP filter for VPNv4 outbound routes.
        :param pulumi.Input[str] filter_list_out_vpnv6: BGP filter for VPNv6 outbound routes.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] holdtime_timer: Interval (sec) before peer considered dead.
        :param pulumi.Input[str] interface: Interface
        :param pulumi.Input[int] keep_alive_timer: Keep alive timer interval (sec).
        :param pulumi.Input[str] link_down_failover: Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] local_as: Local AS number of neighbor.
        :param pulumi.Input[str] local_as_no_prepend: Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_as_replace_as: Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] maximum_prefix: Maximum number of IPv4 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix6: Maximum number of IPv6 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix_evpn: Maximum number of L2VPN EVPN prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix_threshold: Maximum IPv4 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold6: Maximum IPv6 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold_evpn: Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold_vpnv4: Maximum VPNv4 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold_vpnv6: Maximum VPNv6 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_vpnv4: Maximum number of VPNv4 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix_vpnv6: Maximum number of VPNv6 prefixes to accept from this peer.
        :param pulumi.Input[str] maximum_prefix_warning_only: Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only6: Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only_evpn: Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only_vpnv4: Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only_vpnv6: Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self: Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self6: Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_rr: Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_rr6: Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_vpnv4: Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_vpnv6: Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_capability: Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] passive: Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] password: Password used in MD5 authentication.
        :param pulumi.Input[str] prefix_list_in: IPv4 Inbound filter for updates from this neighbor.
        :param pulumi.Input[str] prefix_list_in6: IPv6 Inbound filter for updates from this neighbor.
        :param pulumi.Input[str] prefix_list_in_vpnv4: Inbound filter for VPNv4 updates from this neighbor.
        :param pulumi.Input[str] prefix_list_in_vpnv6: Inbound filter for VPNv6 updates from this neighbor.
        :param pulumi.Input[str] prefix_list_out: IPv4 Outbound filter for updates to this neighbor.
        :param pulumi.Input[str] prefix_list_out6: IPv6 Outbound filter for updates to this neighbor.
        :param pulumi.Input[str] prefix_list_out_vpnv4: Outbound filter for VPNv4 updates to this neighbor.
        :param pulumi.Input[str] prefix_list_out_vpnv6: Outbound filter for VPNv6 updates to this neighbor.
        :param pulumi.Input[int] remote_as: AS number of neighbor.
        :param pulumi.Input[str] remove_private_as: Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as6: Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as_evpn: Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as_vpnv4: Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as_vpnv6: Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] restart_time: Graceful restart delay time (sec, 0 = global default).
        :param pulumi.Input[int] retain_stale_time: Time to retain stale routes.
        :param pulumi.Input[str] route_map_in: IPv4 Inbound route map filter.
        :param pulumi.Input[str] route_map_in6: IPv6 Inbound route map filter.
        :param pulumi.Input[str] route_map_in_evpn: L2VPN EVPN inbound route map filter.
        :param pulumi.Input[str] route_map_in_vpnv4: VPNv4 inbound route map filter.
        :param pulumi.Input[str] route_map_in_vpnv6: VPNv6 inbound route map filter.
        :param pulumi.Input[str] route_map_out: IPv4 Outbound route map filter.
        :param pulumi.Input[str] route_map_out6: IPv6 Outbound route map filter.
        :param pulumi.Input[str] route_map_out6_preferable: IPv6 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_map_out_evpn: L2VPN EVPN outbound route map filter.
        :param pulumi.Input[str] route_map_out_preferable: IPv4 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_map_out_vpnv4: VPNv4 outbound route map filter.
        :param pulumi.Input[str] route_map_out_vpnv4_preferable: VPNv4 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_map_out_vpnv6: VPNv6 outbound route map filter.
        :param pulumi.Input[str] route_map_out_vpnv6_preferable: VPNv6 outbound route map filter if this neighbor is preferred.
        :param pulumi.Input[str] route_reflector_client: Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client6: Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client_evpn: Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client_vpnv4: Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client_vpnv6: Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client: Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client6: Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client_evpn: Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client_vpnv4: Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client_vpnv6: Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] send_community: IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community6: IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community_evpn: Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community_vpnv4: Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community_vpnv6: Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] shutdown: Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration: Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration6: Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration_evpn: Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration_vpnv4: Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration_vpnv6: Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] stale_route: Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_capability_match: Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unsuppress_map: IPv4 Route map to selectively unsuppress suppressed routes.
        :param pulumi.Input[str] unsuppress_map6: IPv6 Route map to selectively unsuppress suppressed routes.
        :param pulumi.Input[str] update_source: Interface to use as source IP/IPv6 address of TCP connections.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] weight: Neighbor weight.
        """
        pulumi.set(__self__, "ip", ip)
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if activate6 is not None:
            pulumi.set(__self__, "activate6", activate6)
        if activate_evpn is not None:
            pulumi.set(__self__, "activate_evpn", activate_evpn)
        if activate_vpnv4 is not None:
            pulumi.set(__self__, "activate_vpnv4", activate_vpnv4)
        if activate_vpnv6 is not None:
            pulumi.set(__self__, "activate_vpnv6", activate_vpnv6)
        if additional_path is not None:
            pulumi.set(__self__, "additional_path", additional_path)
        if additional_path6 is not None:
            pulumi.set(__self__, "additional_path6", additional_path6)
        if additional_path_vpnv4 is not None:
            pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        if additional_path_vpnv6 is not None:
            pulumi.set(__self__, "additional_path_vpnv6", additional_path_vpnv6)
        if adv_additional_path is not None:
            pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        if adv_additional_path6 is not None:
            pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        if adv_additional_path_vpnv4 is not None:
            pulumi.set(__self__, "adv_additional_path_vpnv4", adv_additional_path_vpnv4)
        if adv_additional_path_vpnv6 is not None:
            pulumi.set(__self__, "adv_additional_path_vpnv6", adv_additional_path_vpnv6)
        if advertisement_interval is not None:
            pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        if allowas_in is not None:
            pulumi.set(__self__, "allowas_in", allowas_in)
        if allowas_in6 is not None:
            pulumi.set(__self__, "allowas_in6", allowas_in6)
        if allowas_in_enable is not None:
            pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        if allowas_in_enable6 is not None:
            pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        if allowas_in_enable_evpn is not None:
            pulumi.set(__self__, "allowas_in_enable_evpn", allowas_in_enable_evpn)
        if allowas_in_enable_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_enable_vpnv4", allowas_in_enable_vpnv4)
        if allowas_in_enable_vpnv6 is not None:
            pulumi.set(__self__, "allowas_in_enable_vpnv6", allowas_in_enable_vpnv6)
        if allowas_in_evpn is not None:
            pulumi.set(__self__, "allowas_in_evpn", allowas_in_evpn)
        if allowas_in_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_vpnv4", allowas_in_vpnv4)
        if allowas_in_vpnv6 is not None:
            pulumi.set(__self__, "allowas_in_vpnv6", allowas_in_vpnv6)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override6 is not None:
            pulumi.set(__self__, "as_override6", as_override6)
        if attribute_unchanged is not None:
            pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        if attribute_unchanged6 is not None:
            pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        if attribute_unchanged_vpnv4 is not None:
            pulumi.set(__self__, "attribute_unchanged_vpnv4", attribute_unchanged_vpnv4)
        if attribute_unchanged_vpnv6 is not None:
            pulumi.set(__self__, "attribute_unchanged_vpnv6", attribute_unchanged_vpnv6)
        if auth_options is not None:
            pulumi.set(__self__, "auth_options", auth_options)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if capability_default_originate is not None:
            pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        if capability_default_originate6 is not None:
            pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        if capability_dynamic is not None:
            pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        if capability_graceful_restart is not None:
            pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        if capability_graceful_restart6 is not None:
            pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        if capability_graceful_restart_evpn is not None:
            pulumi.set(__self__, "capability_graceful_restart_evpn", capability_graceful_restart_evpn)
        if capability_graceful_restart_vpnv4 is not None:
            pulumi.set(__self__, "capability_graceful_restart_vpnv4", capability_graceful_restart_vpnv4)
        if capability_graceful_restart_vpnv6 is not None:
            pulumi.set(__self__, "capability_graceful_restart_vpnv6", capability_graceful_restart_vpnv6)
        if capability_orf is not None:
            pulumi.set(__self__, "capability_orf", capability_orf)
        if capability_orf6 is not None:
            pulumi.set(__self__, "capability_orf6", capability_orf6)
        if capability_route_refresh is not None:
            pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        if conditional_advertise6s is not None:
            pulumi.set(__self__, "conditional_advertise6s", conditional_advertise6s)
        if conditional_advertises is not None:
            pulumi.set(__self__, "conditional_advertises", conditional_advertises)
        if connect_timer is not None:
            pulumi.set(__self__, "connect_timer", connect_timer)
        if default_originate_routemap is not None:
            pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        if default_originate_routemap6 is not None:
            pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distribute_list_in is not None:
            pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        if distribute_list_in6 is not None:
            pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        if distribute_list_in_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_in_vpnv4", distribute_list_in_vpnv4)
        if distribute_list_in_vpnv6 is not None:
            pulumi.set(__self__, "distribute_list_in_vpnv6", distribute_list_in_vpnv6)
        if distribute_list_out is not None:
            pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        if distribute_list_out6 is not None:
            pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        if distribute_list_out_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_out_vpnv4", distribute_list_out_vpnv4)
        if distribute_list_out_vpnv6 is not None:
            pulumi.set(__self__, "distribute_list_out_vpnv6", distribute_list_out_vpnv6)
        if dont_capability_negotiate is not None:
            pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ebgp_enforce_multihop is not None:
            pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        if ebgp_multihop_ttl is not None:
            pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        if filter_list_in is not None:
            pulumi.set(__self__, "filter_list_in", filter_list_in)
        if filter_list_in6 is not None:
            pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        if filter_list_in_vpnv4 is not None:
            pulumi.set(__self__, "filter_list_in_vpnv4", filter_list_in_vpnv4)
        if filter_list_in_vpnv6 is not None:
            pulumi.set(__self__, "filter_list_in_vpnv6", filter_list_in_vpnv6)
        if filter_list_out is not None:
            pulumi.set(__self__, "filter_list_out", filter_list_out)
        if filter_list_out6 is not None:
            pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        if filter_list_out_vpnv4 is not None:
            pulumi.set(__self__, "filter_list_out_vpnv4", filter_list_out_vpnv4)
        if filter_list_out_vpnv6 is not None:
            pulumi.set(__self__, "filter_list_out_vpnv6", filter_list_out_vpnv6)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if holdtime_timer is not None:
            pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if keep_alive_timer is not None:
            pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        if link_down_failover is not None:
            pulumi.set(__self__, "link_down_failover", link_down_failover)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_no_prepend is not None:
            pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        if local_as_replace_as is not None:
            pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        if maximum_prefix is not None:
            pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        if maximum_prefix6 is not None:
            pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        if maximum_prefix_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_evpn", maximum_prefix_evpn)
        if maximum_prefix_threshold is not None:
            pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        if maximum_prefix_threshold6 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        if maximum_prefix_threshold_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_evpn", maximum_prefix_threshold_evpn)
        if maximum_prefix_threshold_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_vpnv4", maximum_prefix_threshold_vpnv4)
        if maximum_prefix_threshold_vpnv6 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_vpnv6", maximum_prefix_threshold_vpnv6)
        if maximum_prefix_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_vpnv4", maximum_prefix_vpnv4)
        if maximum_prefix_vpnv6 is not None:
            pulumi.set(__self__, "maximum_prefix_vpnv6", maximum_prefix_vpnv6)
        if maximum_prefix_warning_only is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        if maximum_prefix_warning_only6 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        if maximum_prefix_warning_only_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_evpn", maximum_prefix_warning_only_evpn)
        if maximum_prefix_warning_only_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_vpnv4", maximum_prefix_warning_only_vpnv4)
        if maximum_prefix_warning_only_vpnv6 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_vpnv6", maximum_prefix_warning_only_vpnv6)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self6 is not None:
            pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        if next_hop_self_rr is not None:
            pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        if next_hop_self_rr6 is not None:
            pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        if next_hop_self_vpnv4 is not None:
            pulumi.set(__self__, "next_hop_self_vpnv4", next_hop_self_vpnv4)
        if next_hop_self_vpnv6 is not None:
            pulumi.set(__self__, "next_hop_self_vpnv6", next_hop_self_vpnv6)
        if override_capability is not None:
            pulumi.set(__self__, "override_capability", override_capability)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if prefix_list_in is not None:
            pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        if prefix_list_in6 is not None:
            pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        if prefix_list_in_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_in_vpnv4", prefix_list_in_vpnv4)
        if prefix_list_in_vpnv6 is not None:
            pulumi.set(__self__, "prefix_list_in_vpnv6", prefix_list_in_vpnv6)
        if prefix_list_out is not None:
            pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        if prefix_list_out6 is not None:
            pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        if prefix_list_out_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_out_vpnv4", prefix_list_out_vpnv4)
        if prefix_list_out_vpnv6 is not None:
            pulumi.set(__self__, "prefix_list_out_vpnv6", prefix_list_out_vpnv6)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remove_private_as is not None:
            pulumi.set(__self__, "remove_private_as", remove_private_as)
        if remove_private_as6 is not None:
            pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        if remove_private_as_evpn is not None:
            pulumi.set(__self__, "remove_private_as_evpn", remove_private_as_evpn)
        if remove_private_as_vpnv4 is not None:
            pulumi.set(__self__, "remove_private_as_vpnv4", remove_private_as_vpnv4)
        if remove_private_as_vpnv6 is not None:
            pulumi.set(__self__, "remove_private_as_vpnv6", remove_private_as_vpnv6)
        if restart_time is not None:
            pulumi.set(__self__, "restart_time", restart_time)
        if retain_stale_time is not None:
            pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        if route_map_in is not None:
            pulumi.set(__self__, "route_map_in", route_map_in)
        if route_map_in6 is not None:
            pulumi.set(__self__, "route_map_in6", route_map_in6)
        if route_map_in_evpn is not None:
            pulumi.set(__self__, "route_map_in_evpn", route_map_in_evpn)
        if route_map_in_vpnv4 is not None:
            pulumi.set(__self__, "route_map_in_vpnv4", route_map_in_vpnv4)
        if route_map_in_vpnv6 is not None:
            pulumi.set(__self__, "route_map_in_vpnv6", route_map_in_vpnv6)
        if route_map_out is not None:
            pulumi.set(__self__, "route_map_out", route_map_out)
        if route_map_out6 is not None:
            pulumi.set(__self__, "route_map_out6", route_map_out6)
        if route_map_out6_preferable is not None:
            pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        if route_map_out_evpn is not None:
            pulumi.set(__self__, "route_map_out_evpn", route_map_out_evpn)
        if route_map_out_preferable is not None:
            pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        if route_map_out_vpnv4 is not None:
            pulumi.set(__self__, "route_map_out_vpnv4", route_map_out_vpnv4)
        if route_map_out_vpnv4_preferable is not None:
            pulumi.set(__self__, "route_map_out_vpnv4_preferable", route_map_out_vpnv4_preferable)
        if route_map_out_vpnv6 is not None:
            pulumi.set(__self__, "route_map_out_vpnv6", route_map_out_vpnv6)
        if route_map_out_vpnv6_preferable is not None:
            pulumi.set(__self__, "route_map_out_vpnv6_preferable", route_map_out_vpnv6_preferable)
        if route_reflector_client is not None:
            pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        if route_reflector_client6 is not None:
            pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        if route_reflector_client_evpn is not None:
            pulumi.set(__self__, "route_reflector_client_evpn", route_reflector_client_evpn)
        if route_reflector_client_vpnv4 is not None:
            pulumi.set(__self__, "route_reflector_client_vpnv4", route_reflector_client_vpnv4)
        if route_reflector_client_vpnv6 is not None:
            pulumi.set(__self__, "route_reflector_client_vpnv6", route_reflector_client_vpnv6)
        if route_server_client is not None:
            pulumi.set(__self__, "route_server_client", route_server_client)
        if route_server_client6 is not None:
            pulumi.set(__self__, "route_server_client6", route_server_client6)
        if route_server_client_evpn is not None:
            pulumi.set(__self__, "route_server_client_evpn", route_server_client_evpn)
        if route_server_client_vpnv4 is not None:
            pulumi.set(__self__, "route_server_client_vpnv4", route_server_client_vpnv4)
        if route_server_client_vpnv6 is not None:
            pulumi.set(__self__, "route_server_client_vpnv6", route_server_client_vpnv6)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community6 is not None:
            pulumi.set(__self__, "send_community6", send_community6)
        if send_community_evpn is not None:
            pulumi.set(__self__, "send_community_evpn", send_community_evpn)
        if send_community_vpnv4 is not None:
            pulumi.set(__self__, "send_community_vpnv4", send_community_vpnv4)
        if send_community_vpnv6 is not None:
            pulumi.set(__self__, "send_community_vpnv6", send_community_vpnv6)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if soft_reconfiguration is not None:
            pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        if soft_reconfiguration6 is not None:
            pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        if soft_reconfiguration_evpn is not None:
            pulumi.set(__self__, "soft_reconfiguration_evpn", soft_reconfiguration_evpn)
        if soft_reconfiguration_vpnv4 is not None:
            pulumi.set(__self__, "soft_reconfiguration_vpnv4", soft_reconfiguration_vpnv4)
        if soft_reconfiguration_vpnv6 is not None:
            pulumi.set(__self__, "soft_reconfiguration_vpnv6", soft_reconfiguration_vpnv6)
        if stale_route is not None:
            pulumi.set(__self__, "stale_route", stale_route)
        if strict_capability_match is not None:
            pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        if unsuppress_map is not None:
            pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        if unsuppress_map6 is not None:
            pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        if update_source is not None:
            pulumi.set(__self__, "update_source", update_source)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        """
        IP/IPv6 address of neighbor.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter
    def activate6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate6")

    @activate6.setter
    def activate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate6", value)

    @property
    @pulumi.getter(name="activateEvpn")
    def activate_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_evpn")

    @activate_evpn.setter
    def activate_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate_evpn", value)

    @property
    @pulumi.getter(name="activateVpnv4")
    def activate_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_vpnv4")

    @activate_vpnv4.setter
    def activate_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate_vpnv4", value)

    @property
    @pulumi.getter(name="activateVpnv6")
    def activate_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_vpnv6")

    @activate_vpnv6.setter
    def activate_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate_vpnv6", value)

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path")

    @additional_path.setter
    def additional_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path", value)

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path6")

    @additional_path6.setter
    def additional_path6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path6", value)

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv4")

    @additional_path_vpnv4.setter
    def additional_path_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path_vpnv4", value)

    @property
    @pulumi.getter(name="additionalPathVpnv6")
    def additional_path_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv6")

    @additional_path_vpnv6.setter
    def additional_path_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path_vpnv6", value)

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> Optional[pulumi.Input[int]]:
        """
        Number of IPv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path")

    @adv_additional_path.setter
    def adv_additional_path(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path", value)

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> Optional[pulumi.Input[int]]:
        """
        Number of IPv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path6")

    @adv_additional_path6.setter
    def adv_additional_path6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path6", value)

    @property
    @pulumi.getter(name="advAdditionalPathVpnv4")
    def adv_additional_path_vpnv4(self) -> Optional[pulumi.Input[int]]:
        """
        Number of VPNv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv4")

    @adv_additional_path_vpnv4.setter
    def adv_additional_path_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path_vpnv4", value)

    @property
    @pulumi.getter(name="advAdditionalPathVpnv6")
    def adv_additional_path_vpnv6(self) -> Optional[pulumi.Input[int]]:
        """
        Number of VPNv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv6")

    @adv_additional_path_vpnv6.setter
    def adv_additional_path_vpnv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path_vpnv6", value)

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum interval (sec) between sending updates.
        """
        return pulumi.get(self, "advertisement_interval")

    @advertisement_interval.setter
    def advertisement_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "advertisement_interval", value)

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> Optional[pulumi.Input[int]]:
        """
        IPv4 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in")

    @allowas_in.setter
    def allowas_in(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in", value)

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in6")

    @allowas_in6.setter
    def allowas_in6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in6", value)

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable")

    @allowas_in_enable.setter
    def allowas_in_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable", value)

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable6")

    @allowas_in_enable6.setter
    def allowas_in_enable6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable6", value)

    @property
    @pulumi.getter(name="allowasInEnableEvpn")
    def allowas_in_enable_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_evpn")

    @allowas_in_enable_evpn.setter
    def allowas_in_enable_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable_evpn", value)

    @property
    @pulumi.getter(name="allowasInEnableVpnv4")
    def allowas_in_enable_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv4")

    @allowas_in_enable_vpnv4.setter
    def allowas_in_enable_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable_vpnv4", value)

    @property
    @pulumi.getter(name="allowasInEnableVpnv6")
    def allowas_in_enable_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv6")

    @allowas_in_enable_vpnv6.setter
    def allowas_in_enable_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable_vpnv6", value)

    @property
    @pulumi.getter(name="allowasInEvpn")
    def allowas_in_evpn(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        """
        return pulumi.get(self, "allowas_in_evpn")

    @allowas_in_evpn.setter
    def allowas_in_evpn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in_evpn", value)

    @property
    @pulumi.getter(name="allowasInVpnv4")
    def allowas_in_vpnv4(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of occurrence of my AS number allowed for VPNv4 route.
        """
        return pulumi.get(self, "allowas_in_vpnv4")

    @allowas_in_vpnv4.setter
    def allowas_in_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in_vpnv4", value)

    @property
    @pulumi.getter(name="allowasInVpnv6")
    def allowas_in_vpnv6(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of occurrence of my AS number allowed for VPNv6 route.
        """
        return pulumi.get(self, "allowas_in_vpnv6")

    @allowas_in_vpnv6.setter
    def allowas_in_vpnv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in_vpnv6", value)

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_override")

    @as_override.setter
    def as_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_override", value)

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_override6")

    @as_override6.setter
    def as_override6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_override6", value)

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged")

    @attribute_unchanged.setter
    def attribute_unchanged(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged", value)

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged6")

    @attribute_unchanged6.setter
    def attribute_unchanged6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged6", value)

    @property
    @pulumi.getter(name="attributeUnchangedVpnv4")
    def attribute_unchanged_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv4")

    @attribute_unchanged_vpnv4.setter
    def attribute_unchanged_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged_vpnv4", value)

    @property
    @pulumi.getter(name="attributeUnchangedVpnv6")
    def attribute_unchanged_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv6")

    @attribute_unchanged_vpnv6.setter
    def attribute_unchanged_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged_vpnv6", value)

    @property
    @pulumi.getter(name="authOptions")
    def auth_options(self) -> Optional[pulumi.Input[str]]:
        """
        Key-chain name for TCP authentication options.
        """
        return pulumi.get(self, "auth_options")

    @auth_options.setter
    def auth_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_options", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_default_originate")

    @capability_default_originate.setter
    def capability_default_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_default_originate", value)

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_default_originate6")

    @capability_default_originate6.setter
    def capability_default_originate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_default_originate6", value)

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_dynamic")

    @capability_dynamic.setter
    def capability_dynamic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_dynamic", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart")

    @capability_graceful_restart.setter
    def capability_graceful_restart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart6")

    @capability_graceful_restart6.setter
    def capability_graceful_restart6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart6", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestartEvpn")
    def capability_graceful_restart_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_evpn")

    @capability_graceful_restart_evpn.setter
    def capability_graceful_restart_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart_evpn", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv4")
    def capability_graceful_restart_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv4")

    @capability_graceful_restart_vpnv4.setter
    def capability_graceful_restart_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart_vpnv4", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv6")
    def capability_graceful_restart_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv6")

    @capability_graceful_restart_vpnv6.setter
    def capability_graceful_restart_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart_vpnv6", value)

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> Optional[pulumi.Input[str]]:
        """
        Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        """
        return pulumi.get(self, "capability_orf")

    @capability_orf.setter
    def capability_orf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_orf", value)

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> Optional[pulumi.Input[str]]:
        """
        Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        """
        return pulumi.get(self, "capability_orf6")

    @capability_orf6.setter
    def capability_orf6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_orf6", value)

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_route_refresh")

    @capability_route_refresh.setter
    def capability_route_refresh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_route_refresh", value)

    @property
    @pulumi.getter(name="conditionalAdvertise6s")
    def conditional_advertise6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertise6Args']]]]:
        """
        IPv6 conditional advertisement. The structure of `conditional_advertise6` block is documented below.
        """
        return pulumi.get(self, "conditional_advertise6s")

    @conditional_advertise6s.setter
    def conditional_advertise6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertise6Args']]]]):
        pulumi.set(self, "conditional_advertise6s", value)

    @property
    @pulumi.getter(name="conditionalAdvertises")
    def conditional_advertises(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertiseArgs']]]]:
        """
        Conditional advertisement. The structure of `conditional_advertise` block is documented below.
        """
        return pulumi.get(self, "conditional_advertises")

    @conditional_advertises.setter
    def conditional_advertises(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertiseArgs']]]]):
        pulumi.set(self, "conditional_advertises", value)

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Interval (sec) for connect timer.
        """
        return pulumi.get(self, "connect_timer")

    @connect_timer.setter
    def connect_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timer", value)

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Route map to specify criteria to originate IPv4 default.
        """
        return pulumi.get(self, "default_originate_routemap")

    @default_originate_routemap.setter
    def default_originate_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate_routemap", value)

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> Optional[pulumi.Input[str]]:
        """
        Route map to specify criteria to originate IPv6 default.
        """
        return pulumi.get(self, "default_originate_routemap6")

    @default_originate_routemap6.setter
    def default_originate_routemap6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate_routemap6", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in")

    @distribute_list_in.setter
    def distribute_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in", value)

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in6")

    @distribute_list_in6.setter
    def distribute_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in6", value)

    @property
    @pulumi.getter(name="distributeListInVpnv4")
    def distribute_list_in_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv4")

    @distribute_list_in_vpnv4.setter
    def distribute_list_in_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in_vpnv4", value)

    @property
    @pulumi.getter(name="distributeListInVpnv6")
    def distribute_list_in_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv6")

    @distribute_list_in_vpnv6.setter
    def distribute_list_in_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in_vpnv6", value)

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out")

    @distribute_list_out.setter
    def distribute_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out", value)

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out6")

    @distribute_list_out6.setter
    def distribute_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out6", value)

    @property
    @pulumi.getter(name="distributeListOutVpnv4")
    def distribute_list_out_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv4")

    @distribute_list_out_vpnv4.setter
    def distribute_list_out_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out_vpnv4", value)

    @property
    @pulumi.getter(name="distributeListOutVpnv6")
    def distribute_list_out_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv6")

    @distribute_list_out_vpnv6.setter
    def distribute_list_out_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out_vpnv6", value)

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> Optional[pulumi.Input[str]]:
        """
        Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_capability_negotiate")

    @dont_capability_negotiate.setter
    def dont_capability_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dont_capability_negotiate", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ebgp_enforce_multihop")

    @ebgp_enforce_multihop.setter
    def ebgp_enforce_multihop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ebgp_enforce_multihop", value)

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        EBGP multihop TTL for this peer.
        """
        return pulumi.get(self, "ebgp_multihop_ttl")

    @ebgp_multihop_ttl.setter
    def ebgp_multihop_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ebgp_multihop_ttl", value)

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in")

    @filter_list_in.setter
    def filter_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in", value)

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in6")

    @filter_list_in6.setter
    def filter_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in6", value)

    @property
    @pulumi.getter(name="filterListInVpnv4")
    def filter_list_in_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for VPNv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv4")

    @filter_list_in_vpnv4.setter
    def filter_list_in_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in_vpnv4", value)

    @property
    @pulumi.getter(name="filterListInVpnv6")
    def filter_list_in_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for VPNv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv6")

    @filter_list_in_vpnv6.setter
    def filter_list_in_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in_vpnv6", value)

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out")

    @filter_list_out.setter
    def filter_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out", value)

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out6")

    @filter_list_out6.setter
    def filter_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out6", value)

    @property
    @pulumi.getter(name="filterListOutVpnv4")
    def filter_list_out_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for VPNv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv4")

    @filter_list_out_vpnv4.setter
    def filter_list_out_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out_vpnv4", value)

    @property
    @pulumi.getter(name="filterListOutVpnv6")
    def filter_list_out_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for VPNv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv6")

    @filter_list_out_vpnv6.setter
    def filter_list_out_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out_vpnv6", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Interval (sec) before peer considered dead.
        """
        return pulumi.get(self, "holdtime_timer")

    @holdtime_timer.setter
    def holdtime_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holdtime_timer", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Keep alive timer interval (sec).
        """
        return pulumi.get(self, "keep_alive_timer")

    @keep_alive_timer.setter
    def keep_alive_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_alive_timer", value)

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_down_failover")

    @link_down_failover.setter
    def link_down_failover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_down_failover", value)

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[pulumi.Input[int]]:
        """
        Local AS number of neighbor.
        """
        return pulumi.get(self, "local_as")

    @local_as.setter
    def local_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_as", value)

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> Optional[pulumi.Input[str]]:
        """
        Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_as_no_prepend")

    @local_as_no_prepend.setter
    def local_as_no_prepend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as_no_prepend", value)

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> Optional[pulumi.Input[str]]:
        """
        Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_as_replace_as")

    @local_as_replace_as.setter
    def local_as_replace_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as_replace_as", value)

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of IPv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix")

    @maximum_prefix.setter
    def maximum_prefix(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix", value)

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of IPv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix6")

    @maximum_prefix6.setter
    def maximum_prefix6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix6", value)

    @property
    @pulumi.getter(name="maximumPrefixEvpn")
    def maximum_prefix_evpn(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of L2VPN EVPN prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_evpn")

    @maximum_prefix_evpn.setter
    def maximum_prefix_evpn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_evpn", value)

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum IPv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold")

    @maximum_prefix_threshold.setter
    def maximum_prefix_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold", value)

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum IPv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold6")

    @maximum_prefix_threshold6.setter
    def maximum_prefix_threshold6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold6", value)

    @property
    @pulumi.getter(name="maximumPrefixThresholdEvpn")
    def maximum_prefix_threshold_evpn(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_evpn")

    @maximum_prefix_threshold_evpn.setter
    def maximum_prefix_threshold_evpn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold_evpn", value)

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv4")
    def maximum_prefix_threshold_vpnv4(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum VPNv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv4")

    @maximum_prefix_threshold_vpnv4.setter
    def maximum_prefix_threshold_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold_vpnv4", value)

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv6")
    def maximum_prefix_threshold_vpnv6(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum VPNv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv6")

    @maximum_prefix_threshold_vpnv6.setter
    def maximum_prefix_threshold_vpnv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold_vpnv6", value)

    @property
    @pulumi.getter(name="maximumPrefixVpnv4")
    def maximum_prefix_vpnv4(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of VPNv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv4")

    @maximum_prefix_vpnv4.setter
    def maximum_prefix_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_vpnv4", value)

    @property
    @pulumi.getter(name="maximumPrefixVpnv6")
    def maximum_prefix_vpnv6(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of VPNv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv6")

    @maximum_prefix_vpnv6.setter
    def maximum_prefix_vpnv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_vpnv6", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only")

    @maximum_prefix_warning_only.setter
    def maximum_prefix_warning_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @maximum_prefix_warning_only6.setter
    def maximum_prefix_warning_only6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only6", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyEvpn")
    def maximum_prefix_warning_only_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_evpn")

    @maximum_prefix_warning_only_evpn.setter
    def maximum_prefix_warning_only_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only_evpn", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv4")
    def maximum_prefix_warning_only_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv4")

    @maximum_prefix_warning_only_vpnv4.setter
    def maximum_prefix_warning_only_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only_vpnv4", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv6")
    def maximum_prefix_warning_only_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv6")

    @maximum_prefix_warning_only_vpnv6.setter
    def maximum_prefix_warning_only_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only_vpnv6", value)

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self")

    @next_hop_self.setter
    def next_hop_self(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self", value)

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self6")

    @next_hop_self6.setter
    def next_hop_self6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self6", value)

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_rr")

    @next_hop_self_rr.setter
    def next_hop_self_rr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_rr", value)

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_rr6")

    @next_hop_self_rr6.setter
    def next_hop_self_rr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_rr6", value)

    @property
    @pulumi.getter(name="nextHopSelfVpnv4")
    def next_hop_self_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_vpnv4")

    @next_hop_self_vpnv4.setter
    def next_hop_self_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_vpnv4", value)

    @property
    @pulumi.getter(name="nextHopSelfVpnv6")
    def next_hop_self_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_vpnv6")

    @next_hop_self_vpnv6.setter
    def next_hop_self_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_vpnv6", value)

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_capability")

    @override_capability.setter
    def override_capability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_capability", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password used in MD5 authentication.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in")

    @prefix_list_in.setter
    def prefix_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in", value)

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in6")

    @prefix_list_in6.setter
    def prefix_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in6", value)

    @property
    @pulumi.getter(name="prefixListInVpnv4")
    def prefix_list_in_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Inbound filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv4")

    @prefix_list_in_vpnv4.setter
    def prefix_list_in_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in_vpnv4", value)

    @property
    @pulumi.getter(name="prefixListInVpnv6")
    def prefix_list_in_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Inbound filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv6")

    @prefix_list_in_vpnv6.setter
    def prefix_list_in_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in_vpnv6", value)

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out")

    @prefix_list_out.setter
    def prefix_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out", value)

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out6")

    @prefix_list_out6.setter
    def prefix_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out6", value)

    @property
    @pulumi.getter(name="prefixListOutVpnv4")
    def prefix_list_out_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Outbound filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv4")

    @prefix_list_out_vpnv4.setter
    def prefix_list_out_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out_vpnv4", value)

    @property
    @pulumi.getter(name="prefixListOutVpnv6")
    def prefix_list_out_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Outbound filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv6")

    @prefix_list_out_vpnv6.setter
    def prefix_list_out_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out_vpnv6", value)

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[int]]:
        """
        AS number of neighbor.
        """
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_as", value)

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as")

    @remove_private_as.setter
    def remove_private_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as", value)

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as6")

    @remove_private_as6.setter
    def remove_private_as6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as6", value)

    @property
    @pulumi.getter(name="removePrivateAsEvpn")
    def remove_private_as_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_evpn")

    @remove_private_as_evpn.setter
    def remove_private_as_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as_evpn", value)

    @property
    @pulumi.getter(name="removePrivateAsVpnv4")
    def remove_private_as_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_vpnv4")

    @remove_private_as_vpnv4.setter
    def remove_private_as_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as_vpnv4", value)

    @property
    @pulumi.getter(name="removePrivateAsVpnv6")
    def remove_private_as_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_vpnv6")

    @remove_private_as_vpnv6.setter
    def remove_private_as_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as_vpnv6", value)

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> Optional[pulumi.Input[int]]:
        """
        Graceful restart delay time (sec, 0 = global default).
        """
        return pulumi.get(self, "restart_time")

    @restart_time.setter
    def restart_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restart_time", value)

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time to retain stale routes.
        """
        return pulumi.get(self, "retain_stale_time")

    @retain_stale_time.setter
    def retain_stale_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retain_stale_time", value)

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in")

    @route_map_in.setter
    def route_map_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in", value)

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in6")

    @route_map_in6.setter
    def route_map_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in6", value)

    @property
    @pulumi.getter(name="routeMapInEvpn")
    def route_map_in_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        L2VPN EVPN inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_evpn")

    @route_map_in_evpn.setter
    def route_map_in_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in_evpn", value)

    @property
    @pulumi.getter(name="routeMapInVpnv4")
    def route_map_in_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        VPNv4 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv4")

    @route_map_in_vpnv4.setter
    def route_map_in_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in_vpnv4", value)

    @property
    @pulumi.getter(name="routeMapInVpnv6")
    def route_map_in_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        VPNv6 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv6")

    @route_map_in_vpnv6.setter
    def route_map_in_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in_vpnv6", value)

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out")

    @route_map_out.setter
    def route_map_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out", value)

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out6")

    @route_map_out6.setter
    def route_map_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out6", value)

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out6_preferable")

    @route_map_out6_preferable.setter
    def route_map_out6_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out6_preferable", value)

    @property
    @pulumi.getter(name="routeMapOutEvpn")
    def route_map_out_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        L2VPN EVPN outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_evpn")

    @route_map_out_evpn.setter
    def route_map_out_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_evpn", value)

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_preferable")

    @route_map_out_preferable.setter
    def route_map_out_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_preferable", value)

    @property
    @pulumi.getter(name="routeMapOutVpnv4")
    def route_map_out_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        VPNv4 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv4")

    @route_map_out_vpnv4.setter
    def route_map_out_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_vpnv4", value)

    @property
    @pulumi.getter(name="routeMapOutVpnv4Preferable")
    def route_map_out_vpnv4_preferable(self) -> Optional[pulumi.Input[str]]:
        """
        VPNv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv4_preferable")

    @route_map_out_vpnv4_preferable.setter
    def route_map_out_vpnv4_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_vpnv4_preferable", value)

    @property
    @pulumi.getter(name="routeMapOutVpnv6")
    def route_map_out_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        VPNv6 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv6")

    @route_map_out_vpnv6.setter
    def route_map_out_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_vpnv6", value)

    @property
    @pulumi.getter(name="routeMapOutVpnv6Preferable")
    def route_map_out_vpnv6_preferable(self) -> Optional[pulumi.Input[str]]:
        """
        VPNv6 outbound route map filter if this neighbor is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv6_preferable")

    @route_map_out_vpnv6_preferable.setter
    def route_map_out_vpnv6_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_vpnv6_preferable", value)

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client")

    @route_reflector_client.setter
    def route_reflector_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client", value)

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client6")

    @route_reflector_client6.setter
    def route_reflector_client6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client6", value)

    @property
    @pulumi.getter(name="routeReflectorClientEvpn")
    def route_reflector_client_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_evpn")

    @route_reflector_client_evpn.setter
    def route_reflector_client_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client_evpn", value)

    @property
    @pulumi.getter(name="routeReflectorClientVpnv4")
    def route_reflector_client_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_vpnv4")

    @route_reflector_client_vpnv4.setter
    def route_reflector_client_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client_vpnv4", value)

    @property
    @pulumi.getter(name="routeReflectorClientVpnv6")
    def route_reflector_client_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_vpnv6")

    @route_reflector_client_vpnv6.setter
    def route_reflector_client_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client_vpnv6", value)

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client")

    @route_server_client.setter
    def route_server_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client", value)

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client6")

    @route_server_client6.setter
    def route_server_client6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client6", value)

    @property
    @pulumi.getter(name="routeServerClientEvpn")
    def route_server_client_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_evpn")

    @route_server_client_evpn.setter
    def route_server_client_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client_evpn", value)

    @property
    @pulumi.getter(name="routeServerClientVpnv4")
    def route_server_client_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_vpnv4")

    @route_server_client_vpnv4.setter
    def route_server_client_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client_vpnv4", value)

    @property
    @pulumi.getter(name="routeServerClientVpnv6")
    def route_server_client_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_vpnv6")

    @route_server_client_vpnv6.setter
    def route_server_client_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client_vpnv6", value)

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community")

    @send_community.setter
    def send_community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community", value)

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community6")

    @send_community6.setter
    def send_community6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community6", value)

    @property
    @pulumi.getter(name="sendCommunityEvpn")
    def send_community_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_evpn")

    @send_community_evpn.setter
    def send_community_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community_evpn", value)

    @property
    @pulumi.getter(name="sendCommunityVpnv4")
    def send_community_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_vpnv4")

    @send_community_vpnv4.setter
    def send_community_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community_vpnv4", value)

    @property
    @pulumi.getter(name="sendCommunityVpnv6")
    def send_community_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_vpnv6")

    @send_community_vpnv6.setter
    def send_community_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community_vpnv6", value)

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown", value)

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration")

    @soft_reconfiguration.setter
    def soft_reconfiguration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration", value)

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration6")

    @soft_reconfiguration6.setter
    def soft_reconfiguration6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration6", value)

    @property
    @pulumi.getter(name="softReconfigurationEvpn")
    def soft_reconfiguration_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_evpn")

    @soft_reconfiguration_evpn.setter
    def soft_reconfiguration_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration_evpn", value)

    @property
    @pulumi.getter(name="softReconfigurationVpnv4")
    def soft_reconfiguration_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv4")

    @soft_reconfiguration_vpnv4.setter
    def soft_reconfiguration_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration_vpnv4", value)

    @property
    @pulumi.getter(name="softReconfigurationVpnv6")
    def soft_reconfiguration_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv6")

    @soft_reconfiguration_vpnv6.setter
    def soft_reconfiguration_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration_vpnv6", value)

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "stale_route")

    @stale_route.setter
    def stale_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stale_route", value)

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_capability_match")

    @strict_capability_match.setter
    def strict_capability_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_capability_match", value)

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map")

    @unsuppress_map.setter
    def unsuppress_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsuppress_map", value)

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map6")

    @unsuppress_map6.setter
    def unsuppress_map6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsuppress_map6", value)

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> Optional[pulumi.Input[str]]:
        """
        Interface to use as source IP/IPv6 address of TCP connections.
        """
        return pulumi.get(self, "update_source")

    @update_source.setter
    def update_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_source", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Neighbor weight.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class _NeighborState:
    def __init__(__self__, *,
                 activate: Optional[pulumi.Input[str]] = None,
                 activate6: Optional[pulumi.Input[str]] = None,
                 activate_evpn: Optional[pulumi.Input[str]] = None,
                 activate_vpnv4: Optional[pulumi.Input[str]] = None,
                 activate_vpnv6: Optional[pulumi.Input[str]] = None,
                 additional_path: Optional[pulumi.Input[str]] = None,
                 additional_path6: Optional[pulumi.Input[str]] = None,
                 additional_path_vpnv4: Optional[pulumi.Input[str]] = None,
                 additional_path_vpnv6: Optional[pulumi.Input[str]] = None,
                 adv_additional_path: Optional[pulumi.Input[int]] = None,
                 adv_additional_path6: Optional[pulumi.Input[int]] = None,
                 adv_additional_path_vpnv4: Optional[pulumi.Input[int]] = None,
                 adv_additional_path_vpnv6: Optional[pulumi.Input[int]] = None,
                 advertisement_interval: Optional[pulumi.Input[int]] = None,
                 allowas_in: Optional[pulumi.Input[int]] = None,
                 allowas_in6: Optional[pulumi.Input[int]] = None,
                 allowas_in_enable: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable6: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_evpn: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_vpnv4: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_vpnv6: Optional[pulumi.Input[str]] = None,
                 allowas_in_evpn: Optional[pulumi.Input[int]] = None,
                 allowas_in_vpnv4: Optional[pulumi.Input[int]] = None,
                 allowas_in_vpnv6: Optional[pulumi.Input[int]] = None,
                 as_override: Optional[pulumi.Input[str]] = None,
                 as_override6: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged6: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged_vpnv4: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged_vpnv6: Optional[pulumi.Input[str]] = None,
                 auth_options: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 capability_default_originate: Optional[pulumi.Input[str]] = None,
                 capability_default_originate6: Optional[pulumi.Input[str]] = None,
                 capability_dynamic: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart6: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_evpn: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_vpnv4: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_vpnv6: Optional[pulumi.Input[str]] = None,
                 capability_orf: Optional[pulumi.Input[str]] = None,
                 capability_orf6: Optional[pulumi.Input[str]] = None,
                 capability_route_refresh: Optional[pulumi.Input[str]] = None,
                 conditional_advertise6s: Optional[pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertise6Args']]]] = None,
                 conditional_advertises: Optional[pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertiseArgs']]]] = None,
                 connect_timer: Optional[pulumi.Input[int]] = None,
                 default_originate_routemap: Optional[pulumi.Input[str]] = None,
                 default_originate_routemap6: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distribute_list_in: Optional[pulumi.Input[str]] = None,
                 distribute_list_in6: Optional[pulumi.Input[str]] = None,
                 distribute_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 distribute_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 distribute_list_out: Optional[pulumi.Input[str]] = None,
                 distribute_list_out6: Optional[pulumi.Input[str]] = None,
                 distribute_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 distribute_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 dont_capability_negotiate: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ebgp_enforce_multihop: Optional[pulumi.Input[str]] = None,
                 ebgp_multihop_ttl: Optional[pulumi.Input[int]] = None,
                 filter_list_in: Optional[pulumi.Input[str]] = None,
                 filter_list_in6: Optional[pulumi.Input[str]] = None,
                 filter_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 filter_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 filter_list_out: Optional[pulumi.Input[str]] = None,
                 filter_list_out6: Optional[pulumi.Input[str]] = None,
                 filter_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 filter_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 holdtime_timer: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 keep_alive_timer: Optional[pulumi.Input[int]] = None,
                 link_down_failover: Optional[pulumi.Input[str]] = None,
                 local_as: Optional[pulumi.Input[int]] = None,
                 local_as_no_prepend: Optional[pulumi.Input[str]] = None,
                 local_as_replace_as: Optional[pulumi.Input[str]] = None,
                 maximum_prefix: Optional[pulumi.Input[int]] = None,
                 maximum_prefix6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_evpn: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_evpn: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_vpnv4: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_vpnv6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_vpnv4: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_vpnv6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_warning_only: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only6: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_evpn: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_vpnv4: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_vpnv6: Optional[pulumi.Input[str]] = None,
                 next_hop_self: Optional[pulumi.Input[str]] = None,
                 next_hop_self6: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr6: Optional[pulumi.Input[str]] = None,
                 next_hop_self_vpnv4: Optional[pulumi.Input[str]] = None,
                 next_hop_self_vpnv6: Optional[pulumi.Input[str]] = None,
                 override_capability: Optional[pulumi.Input[str]] = None,
                 passive: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prefix_list_in: Optional[pulumi.Input[str]] = None,
                 prefix_list_in6: Optional[pulumi.Input[str]] = None,
                 prefix_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 prefix_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 prefix_list_out: Optional[pulumi.Input[str]] = None,
                 prefix_list_out6: Optional[pulumi.Input[str]] = None,
                 prefix_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 prefix_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 remote_as: Optional[pulumi.Input[int]] = None,
                 remove_private_as: Optional[pulumi.Input[str]] = None,
                 remove_private_as6: Optional[pulumi.Input[str]] = None,
                 remove_private_as_evpn: Optional[pulumi.Input[str]] = None,
                 remove_private_as_vpnv4: Optional[pulumi.Input[str]] = None,
                 remove_private_as_vpnv6: Optional[pulumi.Input[str]] = None,
                 restart_time: Optional[pulumi.Input[int]] = None,
                 retain_stale_time: Optional[pulumi.Input[int]] = None,
                 route_map_in: Optional[pulumi.Input[str]] = None,
                 route_map_in6: Optional[pulumi.Input[str]] = None,
                 route_map_in_evpn: Optional[pulumi.Input[str]] = None,
                 route_map_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_map_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 route_map_out: Optional[pulumi.Input[str]] = None,
                 route_map_out6: Optional[pulumi.Input[str]] = None,
                 route_map_out6_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_evpn: Optional[pulumi.Input[str]] = None,
                 route_map_out_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv4_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv6_preferable: Optional[pulumi.Input[str]] = None,
                 route_reflector_client: Optional[pulumi.Input[str]] = None,
                 route_reflector_client6: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_evpn: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_vpnv6: Optional[pulumi.Input[str]] = None,
                 route_server_client: Optional[pulumi.Input[str]] = None,
                 route_server_client6: Optional[pulumi.Input[str]] = None,
                 route_server_client_evpn: Optional[pulumi.Input[str]] = None,
                 route_server_client_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_server_client_vpnv6: Optional[pulumi.Input[str]] = None,
                 send_community: Optional[pulumi.Input[str]] = None,
                 send_community6: Optional[pulumi.Input[str]] = None,
                 send_community_evpn: Optional[pulumi.Input[str]] = None,
                 send_community_vpnv4: Optional[pulumi.Input[str]] = None,
                 send_community_vpnv6: Optional[pulumi.Input[str]] = None,
                 shutdown: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration6: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_evpn: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_vpnv4: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_vpnv6: Optional[pulumi.Input[str]] = None,
                 stale_route: Optional[pulumi.Input[str]] = None,
                 strict_capability_match: Optional[pulumi.Input[str]] = None,
                 unsuppress_map: Optional[pulumi.Input[str]] = None,
                 unsuppress_map6: Optional[pulumi.Input[str]] = None,
                 update_source: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Neighbor resources.
        :param pulumi.Input[str] activate: Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate6: Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate_evpn: Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate_vpnv4: Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate_vpnv6: Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] additional_path: Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[str] additional_path6: Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[str] additional_path_vpnv4: Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[str] additional_path_vpnv6: Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[int] adv_additional_path: Number of IPv4 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] adv_additional_path6: Number of IPv6 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] adv_additional_path_vpnv4: Number of VPNv4 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] adv_additional_path_vpnv6: Number of VPNv6 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] advertisement_interval: Minimum interval (sec) between sending updates.
        :param pulumi.Input[int] allowas_in: IPv4 The maximum number of occurrence of my AS number allowed.
        :param pulumi.Input[int] allowas_in6: IPv6 The maximum number of occurrence of my AS number allowed.
        :param pulumi.Input[str] allowas_in_enable: Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable6: Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable_evpn: Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable_vpnv4: Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable_vpnv6: Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] allowas_in_evpn: The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        :param pulumi.Input[int] allowas_in_vpnv4: The maximum number of occurrence of my AS number allowed for VPNv4 route.
        :param pulumi.Input[int] allowas_in_vpnv6: The maximum number of occurrence of my AS number allowed for VPNv6 route.
        :param pulumi.Input[str] as_override: Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] as_override6: Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] attribute_unchanged: IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] attribute_unchanged6: IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] attribute_unchanged_vpnv4: List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] attribute_unchanged_vpnv6: List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] auth_options: Key-chain name for TCP authentication options.
        :param pulumi.Input[str] bfd: Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_default_originate: Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_default_originate6: Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_dynamic: Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart: Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart6: Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart_evpn: Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart_vpnv4: Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart_vpnv6: Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_orf: Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param pulumi.Input[str] capability_orf6: Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param pulumi.Input[str] capability_route_refresh: Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertise6Args']]] conditional_advertise6s: IPv6 conditional advertisement. The structure of `conditional_advertise6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertiseArgs']]] conditional_advertises: Conditional advertisement. The structure of `conditional_advertise` block is documented below.
        :param pulumi.Input[int] connect_timer: Interval (sec) for connect timer.
        :param pulumi.Input[str] default_originate_routemap: Route map to specify criteria to originate IPv4 default.
        :param pulumi.Input[str] default_originate_routemap6: Route map to specify criteria to originate IPv6 default.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] distribute_list_in: Filter for IPv4 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_in6: Filter for IPv6 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_in_vpnv4: Filter for VPNv4 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_in_vpnv6: Filter for VPNv6 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_out: Filter for IPv4 updates to this neighbor.
        :param pulumi.Input[str] distribute_list_out6: Filter for IPv6 updates to this neighbor.
        :param pulumi.Input[str] distribute_list_out_vpnv4: Filter for VPNv4 updates to this neighbor.
        :param pulumi.Input[str] distribute_list_out_vpnv6: Filter for VPNv6 updates to this neighbor.
        :param pulumi.Input[str] dont_capability_negotiate: Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ebgp_enforce_multihop: Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ebgp_multihop_ttl: EBGP multihop TTL for this peer.
        :param pulumi.Input[str] filter_list_in: BGP filter for IPv4 inbound routes.
        :param pulumi.Input[str] filter_list_in6: BGP filter for IPv6 inbound routes.
        :param pulumi.Input[str] filter_list_in_vpnv4: BGP filter for VPNv4 inbound routes.
        :param pulumi.Input[str] filter_list_in_vpnv6: BGP filter for VPNv6 inbound routes.
        :param pulumi.Input[str] filter_list_out: BGP filter for IPv4 outbound routes.
        :param pulumi.Input[str] filter_list_out6: BGP filter for IPv6 outbound routes.
        :param pulumi.Input[str] filter_list_out_vpnv4: BGP filter for VPNv4 outbound routes.
        :param pulumi.Input[str] filter_list_out_vpnv6: BGP filter for VPNv6 outbound routes.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] holdtime_timer: Interval (sec) before peer considered dead.
        :param pulumi.Input[str] interface: Interface
        :param pulumi.Input[str] ip: IP/IPv6 address of neighbor.
        :param pulumi.Input[int] keep_alive_timer: Keep alive timer interval (sec).
        :param pulumi.Input[str] link_down_failover: Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] local_as: Local AS number of neighbor.
        :param pulumi.Input[str] local_as_no_prepend: Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_as_replace_as: Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] maximum_prefix: Maximum number of IPv4 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix6: Maximum number of IPv6 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix_evpn: Maximum number of L2VPN EVPN prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix_threshold: Maximum IPv4 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold6: Maximum IPv6 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold_evpn: Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold_vpnv4: Maximum VPNv4 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold_vpnv6: Maximum VPNv6 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_vpnv4: Maximum number of VPNv4 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix_vpnv6: Maximum number of VPNv6 prefixes to accept from this peer.
        :param pulumi.Input[str] maximum_prefix_warning_only: Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only6: Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only_evpn: Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only_vpnv4: Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only_vpnv6: Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self: Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self6: Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_rr: Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_rr6: Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_vpnv4: Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_vpnv6: Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_capability: Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] passive: Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] password: Password used in MD5 authentication.
        :param pulumi.Input[str] prefix_list_in: IPv4 Inbound filter for updates from this neighbor.
        :param pulumi.Input[str] prefix_list_in6: IPv6 Inbound filter for updates from this neighbor.
        :param pulumi.Input[str] prefix_list_in_vpnv4: Inbound filter for VPNv4 updates from this neighbor.
        :param pulumi.Input[str] prefix_list_in_vpnv6: Inbound filter for VPNv6 updates from this neighbor.
        :param pulumi.Input[str] prefix_list_out: IPv4 Outbound filter for updates to this neighbor.
        :param pulumi.Input[str] prefix_list_out6: IPv6 Outbound filter for updates to this neighbor.
        :param pulumi.Input[str] prefix_list_out_vpnv4: Outbound filter for VPNv4 updates to this neighbor.
        :param pulumi.Input[str] prefix_list_out_vpnv6: Outbound filter for VPNv6 updates to this neighbor.
        :param pulumi.Input[int] remote_as: AS number of neighbor.
        :param pulumi.Input[str] remove_private_as: Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as6: Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as_evpn: Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as_vpnv4: Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as_vpnv6: Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] restart_time: Graceful restart delay time (sec, 0 = global default).
        :param pulumi.Input[int] retain_stale_time: Time to retain stale routes.
        :param pulumi.Input[str] route_map_in: IPv4 Inbound route map filter.
        :param pulumi.Input[str] route_map_in6: IPv6 Inbound route map filter.
        :param pulumi.Input[str] route_map_in_evpn: L2VPN EVPN inbound route map filter.
        :param pulumi.Input[str] route_map_in_vpnv4: VPNv4 inbound route map filter.
        :param pulumi.Input[str] route_map_in_vpnv6: VPNv6 inbound route map filter.
        :param pulumi.Input[str] route_map_out: IPv4 Outbound route map filter.
        :param pulumi.Input[str] route_map_out6: IPv6 Outbound route map filter.
        :param pulumi.Input[str] route_map_out6_preferable: IPv6 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_map_out_evpn: L2VPN EVPN outbound route map filter.
        :param pulumi.Input[str] route_map_out_preferable: IPv4 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_map_out_vpnv4: VPNv4 outbound route map filter.
        :param pulumi.Input[str] route_map_out_vpnv4_preferable: VPNv4 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_map_out_vpnv6: VPNv6 outbound route map filter.
        :param pulumi.Input[str] route_map_out_vpnv6_preferable: VPNv6 outbound route map filter if this neighbor is preferred.
        :param pulumi.Input[str] route_reflector_client: Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client6: Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client_evpn: Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client_vpnv4: Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client_vpnv6: Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client: Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client6: Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client_evpn: Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client_vpnv4: Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client_vpnv6: Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] send_community: IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community6: IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community_evpn: Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community_vpnv4: Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community_vpnv6: Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] shutdown: Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration: Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration6: Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration_evpn: Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration_vpnv4: Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration_vpnv6: Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] stale_route: Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_capability_match: Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unsuppress_map: IPv4 Route map to selectively unsuppress suppressed routes.
        :param pulumi.Input[str] unsuppress_map6: IPv6 Route map to selectively unsuppress suppressed routes.
        :param pulumi.Input[str] update_source: Interface to use as source IP/IPv6 address of TCP connections.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] weight: Neighbor weight.
        """
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if activate6 is not None:
            pulumi.set(__self__, "activate6", activate6)
        if activate_evpn is not None:
            pulumi.set(__self__, "activate_evpn", activate_evpn)
        if activate_vpnv4 is not None:
            pulumi.set(__self__, "activate_vpnv4", activate_vpnv4)
        if activate_vpnv6 is not None:
            pulumi.set(__self__, "activate_vpnv6", activate_vpnv6)
        if additional_path is not None:
            pulumi.set(__self__, "additional_path", additional_path)
        if additional_path6 is not None:
            pulumi.set(__self__, "additional_path6", additional_path6)
        if additional_path_vpnv4 is not None:
            pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        if additional_path_vpnv6 is not None:
            pulumi.set(__self__, "additional_path_vpnv6", additional_path_vpnv6)
        if adv_additional_path is not None:
            pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        if adv_additional_path6 is not None:
            pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        if adv_additional_path_vpnv4 is not None:
            pulumi.set(__self__, "adv_additional_path_vpnv4", adv_additional_path_vpnv4)
        if adv_additional_path_vpnv6 is not None:
            pulumi.set(__self__, "adv_additional_path_vpnv6", adv_additional_path_vpnv6)
        if advertisement_interval is not None:
            pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        if allowas_in is not None:
            pulumi.set(__self__, "allowas_in", allowas_in)
        if allowas_in6 is not None:
            pulumi.set(__self__, "allowas_in6", allowas_in6)
        if allowas_in_enable is not None:
            pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        if allowas_in_enable6 is not None:
            pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        if allowas_in_enable_evpn is not None:
            pulumi.set(__self__, "allowas_in_enable_evpn", allowas_in_enable_evpn)
        if allowas_in_enable_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_enable_vpnv4", allowas_in_enable_vpnv4)
        if allowas_in_enable_vpnv6 is not None:
            pulumi.set(__self__, "allowas_in_enable_vpnv6", allowas_in_enable_vpnv6)
        if allowas_in_evpn is not None:
            pulumi.set(__self__, "allowas_in_evpn", allowas_in_evpn)
        if allowas_in_vpnv4 is not None:
            pulumi.set(__self__, "allowas_in_vpnv4", allowas_in_vpnv4)
        if allowas_in_vpnv6 is not None:
            pulumi.set(__self__, "allowas_in_vpnv6", allowas_in_vpnv6)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override6 is not None:
            pulumi.set(__self__, "as_override6", as_override6)
        if attribute_unchanged is not None:
            pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        if attribute_unchanged6 is not None:
            pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        if attribute_unchanged_vpnv4 is not None:
            pulumi.set(__self__, "attribute_unchanged_vpnv4", attribute_unchanged_vpnv4)
        if attribute_unchanged_vpnv6 is not None:
            pulumi.set(__self__, "attribute_unchanged_vpnv6", attribute_unchanged_vpnv6)
        if auth_options is not None:
            pulumi.set(__self__, "auth_options", auth_options)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if capability_default_originate is not None:
            pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        if capability_default_originate6 is not None:
            pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        if capability_dynamic is not None:
            pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        if capability_graceful_restart is not None:
            pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        if capability_graceful_restart6 is not None:
            pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        if capability_graceful_restart_evpn is not None:
            pulumi.set(__self__, "capability_graceful_restart_evpn", capability_graceful_restart_evpn)
        if capability_graceful_restart_vpnv4 is not None:
            pulumi.set(__self__, "capability_graceful_restart_vpnv4", capability_graceful_restart_vpnv4)
        if capability_graceful_restart_vpnv6 is not None:
            pulumi.set(__self__, "capability_graceful_restart_vpnv6", capability_graceful_restart_vpnv6)
        if capability_orf is not None:
            pulumi.set(__self__, "capability_orf", capability_orf)
        if capability_orf6 is not None:
            pulumi.set(__self__, "capability_orf6", capability_orf6)
        if capability_route_refresh is not None:
            pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        if conditional_advertise6s is not None:
            pulumi.set(__self__, "conditional_advertise6s", conditional_advertise6s)
        if conditional_advertises is not None:
            pulumi.set(__self__, "conditional_advertises", conditional_advertises)
        if connect_timer is not None:
            pulumi.set(__self__, "connect_timer", connect_timer)
        if default_originate_routemap is not None:
            pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        if default_originate_routemap6 is not None:
            pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distribute_list_in is not None:
            pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        if distribute_list_in6 is not None:
            pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        if distribute_list_in_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_in_vpnv4", distribute_list_in_vpnv4)
        if distribute_list_in_vpnv6 is not None:
            pulumi.set(__self__, "distribute_list_in_vpnv6", distribute_list_in_vpnv6)
        if distribute_list_out is not None:
            pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        if distribute_list_out6 is not None:
            pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        if distribute_list_out_vpnv4 is not None:
            pulumi.set(__self__, "distribute_list_out_vpnv4", distribute_list_out_vpnv4)
        if distribute_list_out_vpnv6 is not None:
            pulumi.set(__self__, "distribute_list_out_vpnv6", distribute_list_out_vpnv6)
        if dont_capability_negotiate is not None:
            pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ebgp_enforce_multihop is not None:
            pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        if ebgp_multihop_ttl is not None:
            pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        if filter_list_in is not None:
            pulumi.set(__self__, "filter_list_in", filter_list_in)
        if filter_list_in6 is not None:
            pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        if filter_list_in_vpnv4 is not None:
            pulumi.set(__self__, "filter_list_in_vpnv4", filter_list_in_vpnv4)
        if filter_list_in_vpnv6 is not None:
            pulumi.set(__self__, "filter_list_in_vpnv6", filter_list_in_vpnv6)
        if filter_list_out is not None:
            pulumi.set(__self__, "filter_list_out", filter_list_out)
        if filter_list_out6 is not None:
            pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        if filter_list_out_vpnv4 is not None:
            pulumi.set(__self__, "filter_list_out_vpnv4", filter_list_out_vpnv4)
        if filter_list_out_vpnv6 is not None:
            pulumi.set(__self__, "filter_list_out_vpnv6", filter_list_out_vpnv6)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if holdtime_timer is not None:
            pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if keep_alive_timer is not None:
            pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        if link_down_failover is not None:
            pulumi.set(__self__, "link_down_failover", link_down_failover)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_no_prepend is not None:
            pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        if local_as_replace_as is not None:
            pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        if maximum_prefix is not None:
            pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        if maximum_prefix6 is not None:
            pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        if maximum_prefix_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_evpn", maximum_prefix_evpn)
        if maximum_prefix_threshold is not None:
            pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        if maximum_prefix_threshold6 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        if maximum_prefix_threshold_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_evpn", maximum_prefix_threshold_evpn)
        if maximum_prefix_threshold_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_vpnv4", maximum_prefix_threshold_vpnv4)
        if maximum_prefix_threshold_vpnv6 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold_vpnv6", maximum_prefix_threshold_vpnv6)
        if maximum_prefix_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_vpnv4", maximum_prefix_vpnv4)
        if maximum_prefix_vpnv6 is not None:
            pulumi.set(__self__, "maximum_prefix_vpnv6", maximum_prefix_vpnv6)
        if maximum_prefix_warning_only is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        if maximum_prefix_warning_only6 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        if maximum_prefix_warning_only_evpn is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_evpn", maximum_prefix_warning_only_evpn)
        if maximum_prefix_warning_only_vpnv4 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_vpnv4", maximum_prefix_warning_only_vpnv4)
        if maximum_prefix_warning_only_vpnv6 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only_vpnv6", maximum_prefix_warning_only_vpnv6)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self6 is not None:
            pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        if next_hop_self_rr is not None:
            pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        if next_hop_self_rr6 is not None:
            pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        if next_hop_self_vpnv4 is not None:
            pulumi.set(__self__, "next_hop_self_vpnv4", next_hop_self_vpnv4)
        if next_hop_self_vpnv6 is not None:
            pulumi.set(__self__, "next_hop_self_vpnv6", next_hop_self_vpnv6)
        if override_capability is not None:
            pulumi.set(__self__, "override_capability", override_capability)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if prefix_list_in is not None:
            pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        if prefix_list_in6 is not None:
            pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        if prefix_list_in_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_in_vpnv4", prefix_list_in_vpnv4)
        if prefix_list_in_vpnv6 is not None:
            pulumi.set(__self__, "prefix_list_in_vpnv6", prefix_list_in_vpnv6)
        if prefix_list_out is not None:
            pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        if prefix_list_out6 is not None:
            pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        if prefix_list_out_vpnv4 is not None:
            pulumi.set(__self__, "prefix_list_out_vpnv4", prefix_list_out_vpnv4)
        if prefix_list_out_vpnv6 is not None:
            pulumi.set(__self__, "prefix_list_out_vpnv6", prefix_list_out_vpnv6)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remove_private_as is not None:
            pulumi.set(__self__, "remove_private_as", remove_private_as)
        if remove_private_as6 is not None:
            pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        if remove_private_as_evpn is not None:
            pulumi.set(__self__, "remove_private_as_evpn", remove_private_as_evpn)
        if remove_private_as_vpnv4 is not None:
            pulumi.set(__self__, "remove_private_as_vpnv4", remove_private_as_vpnv4)
        if remove_private_as_vpnv6 is not None:
            pulumi.set(__self__, "remove_private_as_vpnv6", remove_private_as_vpnv6)
        if restart_time is not None:
            pulumi.set(__self__, "restart_time", restart_time)
        if retain_stale_time is not None:
            pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        if route_map_in is not None:
            pulumi.set(__self__, "route_map_in", route_map_in)
        if route_map_in6 is not None:
            pulumi.set(__self__, "route_map_in6", route_map_in6)
        if route_map_in_evpn is not None:
            pulumi.set(__self__, "route_map_in_evpn", route_map_in_evpn)
        if route_map_in_vpnv4 is not None:
            pulumi.set(__self__, "route_map_in_vpnv4", route_map_in_vpnv4)
        if route_map_in_vpnv6 is not None:
            pulumi.set(__self__, "route_map_in_vpnv6", route_map_in_vpnv6)
        if route_map_out is not None:
            pulumi.set(__self__, "route_map_out", route_map_out)
        if route_map_out6 is not None:
            pulumi.set(__self__, "route_map_out6", route_map_out6)
        if route_map_out6_preferable is not None:
            pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        if route_map_out_evpn is not None:
            pulumi.set(__self__, "route_map_out_evpn", route_map_out_evpn)
        if route_map_out_preferable is not None:
            pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        if route_map_out_vpnv4 is not None:
            pulumi.set(__self__, "route_map_out_vpnv4", route_map_out_vpnv4)
        if route_map_out_vpnv4_preferable is not None:
            pulumi.set(__self__, "route_map_out_vpnv4_preferable", route_map_out_vpnv4_preferable)
        if route_map_out_vpnv6 is not None:
            pulumi.set(__self__, "route_map_out_vpnv6", route_map_out_vpnv6)
        if route_map_out_vpnv6_preferable is not None:
            pulumi.set(__self__, "route_map_out_vpnv6_preferable", route_map_out_vpnv6_preferable)
        if route_reflector_client is not None:
            pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        if route_reflector_client6 is not None:
            pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        if route_reflector_client_evpn is not None:
            pulumi.set(__self__, "route_reflector_client_evpn", route_reflector_client_evpn)
        if route_reflector_client_vpnv4 is not None:
            pulumi.set(__self__, "route_reflector_client_vpnv4", route_reflector_client_vpnv4)
        if route_reflector_client_vpnv6 is not None:
            pulumi.set(__self__, "route_reflector_client_vpnv6", route_reflector_client_vpnv6)
        if route_server_client is not None:
            pulumi.set(__self__, "route_server_client", route_server_client)
        if route_server_client6 is not None:
            pulumi.set(__self__, "route_server_client6", route_server_client6)
        if route_server_client_evpn is not None:
            pulumi.set(__self__, "route_server_client_evpn", route_server_client_evpn)
        if route_server_client_vpnv4 is not None:
            pulumi.set(__self__, "route_server_client_vpnv4", route_server_client_vpnv4)
        if route_server_client_vpnv6 is not None:
            pulumi.set(__self__, "route_server_client_vpnv6", route_server_client_vpnv6)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community6 is not None:
            pulumi.set(__self__, "send_community6", send_community6)
        if send_community_evpn is not None:
            pulumi.set(__self__, "send_community_evpn", send_community_evpn)
        if send_community_vpnv4 is not None:
            pulumi.set(__self__, "send_community_vpnv4", send_community_vpnv4)
        if send_community_vpnv6 is not None:
            pulumi.set(__self__, "send_community_vpnv6", send_community_vpnv6)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if soft_reconfiguration is not None:
            pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        if soft_reconfiguration6 is not None:
            pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        if soft_reconfiguration_evpn is not None:
            pulumi.set(__self__, "soft_reconfiguration_evpn", soft_reconfiguration_evpn)
        if soft_reconfiguration_vpnv4 is not None:
            pulumi.set(__self__, "soft_reconfiguration_vpnv4", soft_reconfiguration_vpnv4)
        if soft_reconfiguration_vpnv6 is not None:
            pulumi.set(__self__, "soft_reconfiguration_vpnv6", soft_reconfiguration_vpnv6)
        if stale_route is not None:
            pulumi.set(__self__, "stale_route", stale_route)
        if strict_capability_match is not None:
            pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        if unsuppress_map is not None:
            pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        if unsuppress_map6 is not None:
            pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        if update_source is not None:
            pulumi.set(__self__, "update_source", update_source)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter
    def activate6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate6")

    @activate6.setter
    def activate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate6", value)

    @property
    @pulumi.getter(name="activateEvpn")
    def activate_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_evpn")

    @activate_evpn.setter
    def activate_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate_evpn", value)

    @property
    @pulumi.getter(name="activateVpnv4")
    def activate_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_vpnv4")

    @activate_vpnv4.setter
    def activate_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate_vpnv4", value)

    @property
    @pulumi.getter(name="activateVpnv6")
    def activate_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_vpnv6")

    @activate_vpnv6.setter
    def activate_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate_vpnv6", value)

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path")

    @additional_path.setter
    def additional_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path", value)

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path6")

    @additional_path6.setter
    def additional_path6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path6", value)

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv4")

    @additional_path_vpnv4.setter
    def additional_path_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path_vpnv4", value)

    @property
    @pulumi.getter(name="additionalPathVpnv6")
    def additional_path_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv6")

    @additional_path_vpnv6.setter
    def additional_path_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path_vpnv6", value)

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> Optional[pulumi.Input[int]]:
        """
        Number of IPv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path")

    @adv_additional_path.setter
    def adv_additional_path(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path", value)

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> Optional[pulumi.Input[int]]:
        """
        Number of IPv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path6")

    @adv_additional_path6.setter
    def adv_additional_path6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path6", value)

    @property
    @pulumi.getter(name="advAdditionalPathVpnv4")
    def adv_additional_path_vpnv4(self) -> Optional[pulumi.Input[int]]:
        """
        Number of VPNv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv4")

    @adv_additional_path_vpnv4.setter
    def adv_additional_path_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path_vpnv4", value)

    @property
    @pulumi.getter(name="advAdditionalPathVpnv6")
    def adv_additional_path_vpnv6(self) -> Optional[pulumi.Input[int]]:
        """
        Number of VPNv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv6")

    @adv_additional_path_vpnv6.setter
    def adv_additional_path_vpnv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path_vpnv6", value)

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum interval (sec) between sending updates.
        """
        return pulumi.get(self, "advertisement_interval")

    @advertisement_interval.setter
    def advertisement_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "advertisement_interval", value)

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> Optional[pulumi.Input[int]]:
        """
        IPv4 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in")

    @allowas_in.setter
    def allowas_in(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in", value)

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in6")

    @allowas_in6.setter
    def allowas_in6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in6", value)

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable")

    @allowas_in_enable.setter
    def allowas_in_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable", value)

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable6")

    @allowas_in_enable6.setter
    def allowas_in_enable6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable6", value)

    @property
    @pulumi.getter(name="allowasInEnableEvpn")
    def allowas_in_enable_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_evpn")

    @allowas_in_enable_evpn.setter
    def allowas_in_enable_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable_evpn", value)

    @property
    @pulumi.getter(name="allowasInEnableVpnv4")
    def allowas_in_enable_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv4")

    @allowas_in_enable_vpnv4.setter
    def allowas_in_enable_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable_vpnv4", value)

    @property
    @pulumi.getter(name="allowasInEnableVpnv6")
    def allowas_in_enable_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv6")

    @allowas_in_enable_vpnv6.setter
    def allowas_in_enable_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable_vpnv6", value)

    @property
    @pulumi.getter(name="allowasInEvpn")
    def allowas_in_evpn(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        """
        return pulumi.get(self, "allowas_in_evpn")

    @allowas_in_evpn.setter
    def allowas_in_evpn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in_evpn", value)

    @property
    @pulumi.getter(name="allowasInVpnv4")
    def allowas_in_vpnv4(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of occurrence of my AS number allowed for VPNv4 route.
        """
        return pulumi.get(self, "allowas_in_vpnv4")

    @allowas_in_vpnv4.setter
    def allowas_in_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in_vpnv4", value)

    @property
    @pulumi.getter(name="allowasInVpnv6")
    def allowas_in_vpnv6(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of occurrence of my AS number allowed for VPNv6 route.
        """
        return pulumi.get(self, "allowas_in_vpnv6")

    @allowas_in_vpnv6.setter
    def allowas_in_vpnv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in_vpnv6", value)

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_override")

    @as_override.setter
    def as_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_override", value)

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_override6")

    @as_override6.setter
    def as_override6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_override6", value)

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged")

    @attribute_unchanged.setter
    def attribute_unchanged(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged", value)

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged6")

    @attribute_unchanged6.setter
    def attribute_unchanged6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged6", value)

    @property
    @pulumi.getter(name="attributeUnchangedVpnv4")
    def attribute_unchanged_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv4")

    @attribute_unchanged_vpnv4.setter
    def attribute_unchanged_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged_vpnv4", value)

    @property
    @pulumi.getter(name="attributeUnchangedVpnv6")
    def attribute_unchanged_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv6")

    @attribute_unchanged_vpnv6.setter
    def attribute_unchanged_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged_vpnv6", value)

    @property
    @pulumi.getter(name="authOptions")
    def auth_options(self) -> Optional[pulumi.Input[str]]:
        """
        Key-chain name for TCP authentication options.
        """
        return pulumi.get(self, "auth_options")

    @auth_options.setter
    def auth_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_options", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_default_originate")

    @capability_default_originate.setter
    def capability_default_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_default_originate", value)

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_default_originate6")

    @capability_default_originate6.setter
    def capability_default_originate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_default_originate6", value)

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_dynamic")

    @capability_dynamic.setter
    def capability_dynamic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_dynamic", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart")

    @capability_graceful_restart.setter
    def capability_graceful_restart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart6")

    @capability_graceful_restart6.setter
    def capability_graceful_restart6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart6", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestartEvpn")
    def capability_graceful_restart_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_evpn")

    @capability_graceful_restart_evpn.setter
    def capability_graceful_restart_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart_evpn", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv4")
    def capability_graceful_restart_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv4")

    @capability_graceful_restart_vpnv4.setter
    def capability_graceful_restart_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart_vpnv4", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv6")
    def capability_graceful_restart_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv6")

    @capability_graceful_restart_vpnv6.setter
    def capability_graceful_restart_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart_vpnv6", value)

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> Optional[pulumi.Input[str]]:
        """
        Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        """
        return pulumi.get(self, "capability_orf")

    @capability_orf.setter
    def capability_orf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_orf", value)

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> Optional[pulumi.Input[str]]:
        """
        Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        """
        return pulumi.get(self, "capability_orf6")

    @capability_orf6.setter
    def capability_orf6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_orf6", value)

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_route_refresh")

    @capability_route_refresh.setter
    def capability_route_refresh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_route_refresh", value)

    @property
    @pulumi.getter(name="conditionalAdvertise6s")
    def conditional_advertise6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertise6Args']]]]:
        """
        IPv6 conditional advertisement. The structure of `conditional_advertise6` block is documented below.
        """
        return pulumi.get(self, "conditional_advertise6s")

    @conditional_advertise6s.setter
    def conditional_advertise6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertise6Args']]]]):
        pulumi.set(self, "conditional_advertise6s", value)

    @property
    @pulumi.getter(name="conditionalAdvertises")
    def conditional_advertises(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertiseArgs']]]]:
        """
        Conditional advertisement. The structure of `conditional_advertise` block is documented below.
        """
        return pulumi.get(self, "conditional_advertises")

    @conditional_advertises.setter
    def conditional_advertises(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NeighborConditionalAdvertiseArgs']]]]):
        pulumi.set(self, "conditional_advertises", value)

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Interval (sec) for connect timer.
        """
        return pulumi.get(self, "connect_timer")

    @connect_timer.setter
    def connect_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timer", value)

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Route map to specify criteria to originate IPv4 default.
        """
        return pulumi.get(self, "default_originate_routemap")

    @default_originate_routemap.setter
    def default_originate_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate_routemap", value)

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> Optional[pulumi.Input[str]]:
        """
        Route map to specify criteria to originate IPv6 default.
        """
        return pulumi.get(self, "default_originate_routemap6")

    @default_originate_routemap6.setter
    def default_originate_routemap6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate_routemap6", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in")

    @distribute_list_in.setter
    def distribute_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in", value)

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in6")

    @distribute_list_in6.setter
    def distribute_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in6", value)

    @property
    @pulumi.getter(name="distributeListInVpnv4")
    def distribute_list_in_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv4")

    @distribute_list_in_vpnv4.setter
    def distribute_list_in_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in_vpnv4", value)

    @property
    @pulumi.getter(name="distributeListInVpnv6")
    def distribute_list_in_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv6")

    @distribute_list_in_vpnv6.setter
    def distribute_list_in_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in_vpnv6", value)

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out")

    @distribute_list_out.setter
    def distribute_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out", value)

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out6")

    @distribute_list_out6.setter
    def distribute_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out6", value)

    @property
    @pulumi.getter(name="distributeListOutVpnv4")
    def distribute_list_out_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv4")

    @distribute_list_out_vpnv4.setter
    def distribute_list_out_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out_vpnv4", value)

    @property
    @pulumi.getter(name="distributeListOutVpnv6")
    def distribute_list_out_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv6")

    @distribute_list_out_vpnv6.setter
    def distribute_list_out_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out_vpnv6", value)

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> Optional[pulumi.Input[str]]:
        """
        Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_capability_negotiate")

    @dont_capability_negotiate.setter
    def dont_capability_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dont_capability_negotiate", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ebgp_enforce_multihop")

    @ebgp_enforce_multihop.setter
    def ebgp_enforce_multihop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ebgp_enforce_multihop", value)

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        EBGP multihop TTL for this peer.
        """
        return pulumi.get(self, "ebgp_multihop_ttl")

    @ebgp_multihop_ttl.setter
    def ebgp_multihop_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ebgp_multihop_ttl", value)

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in")

    @filter_list_in.setter
    def filter_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in", value)

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in6")

    @filter_list_in6.setter
    def filter_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in6", value)

    @property
    @pulumi.getter(name="filterListInVpnv4")
    def filter_list_in_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for VPNv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv4")

    @filter_list_in_vpnv4.setter
    def filter_list_in_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in_vpnv4", value)

    @property
    @pulumi.getter(name="filterListInVpnv6")
    def filter_list_in_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for VPNv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv6")

    @filter_list_in_vpnv6.setter
    def filter_list_in_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in_vpnv6", value)

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out")

    @filter_list_out.setter
    def filter_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out", value)

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out6")

    @filter_list_out6.setter
    def filter_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out6", value)

    @property
    @pulumi.getter(name="filterListOutVpnv4")
    def filter_list_out_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for VPNv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv4")

    @filter_list_out_vpnv4.setter
    def filter_list_out_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out_vpnv4", value)

    @property
    @pulumi.getter(name="filterListOutVpnv6")
    def filter_list_out_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for VPNv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv6")

    @filter_list_out_vpnv6.setter
    def filter_list_out_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out_vpnv6", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Interval (sec) before peer considered dead.
        """
        return pulumi.get(self, "holdtime_timer")

    @holdtime_timer.setter
    def holdtime_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holdtime_timer", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP/IPv6 address of neighbor.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Keep alive timer interval (sec).
        """
        return pulumi.get(self, "keep_alive_timer")

    @keep_alive_timer.setter
    def keep_alive_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_alive_timer", value)

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_down_failover")

    @link_down_failover.setter
    def link_down_failover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_down_failover", value)

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[pulumi.Input[int]]:
        """
        Local AS number of neighbor.
        """
        return pulumi.get(self, "local_as")

    @local_as.setter
    def local_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_as", value)

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> Optional[pulumi.Input[str]]:
        """
        Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_as_no_prepend")

    @local_as_no_prepend.setter
    def local_as_no_prepend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as_no_prepend", value)

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> Optional[pulumi.Input[str]]:
        """
        Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_as_replace_as")

    @local_as_replace_as.setter
    def local_as_replace_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as_replace_as", value)

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of IPv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix")

    @maximum_prefix.setter
    def maximum_prefix(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix", value)

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of IPv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix6")

    @maximum_prefix6.setter
    def maximum_prefix6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix6", value)

    @property
    @pulumi.getter(name="maximumPrefixEvpn")
    def maximum_prefix_evpn(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of L2VPN EVPN prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_evpn")

    @maximum_prefix_evpn.setter
    def maximum_prefix_evpn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_evpn", value)

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum IPv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold")

    @maximum_prefix_threshold.setter
    def maximum_prefix_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold", value)

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum IPv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold6")

    @maximum_prefix_threshold6.setter
    def maximum_prefix_threshold6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold6", value)

    @property
    @pulumi.getter(name="maximumPrefixThresholdEvpn")
    def maximum_prefix_threshold_evpn(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_evpn")

    @maximum_prefix_threshold_evpn.setter
    def maximum_prefix_threshold_evpn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold_evpn", value)

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv4")
    def maximum_prefix_threshold_vpnv4(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum VPNv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv4")

    @maximum_prefix_threshold_vpnv4.setter
    def maximum_prefix_threshold_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold_vpnv4", value)

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv6")
    def maximum_prefix_threshold_vpnv6(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum VPNv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv6")

    @maximum_prefix_threshold_vpnv6.setter
    def maximum_prefix_threshold_vpnv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold_vpnv6", value)

    @property
    @pulumi.getter(name="maximumPrefixVpnv4")
    def maximum_prefix_vpnv4(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of VPNv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv4")

    @maximum_prefix_vpnv4.setter
    def maximum_prefix_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_vpnv4", value)

    @property
    @pulumi.getter(name="maximumPrefixVpnv6")
    def maximum_prefix_vpnv6(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of VPNv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv6")

    @maximum_prefix_vpnv6.setter
    def maximum_prefix_vpnv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_vpnv6", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only")

    @maximum_prefix_warning_only.setter
    def maximum_prefix_warning_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @maximum_prefix_warning_only6.setter
    def maximum_prefix_warning_only6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only6", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyEvpn")
    def maximum_prefix_warning_only_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_evpn")

    @maximum_prefix_warning_only_evpn.setter
    def maximum_prefix_warning_only_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only_evpn", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv4")
    def maximum_prefix_warning_only_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv4")

    @maximum_prefix_warning_only_vpnv4.setter
    def maximum_prefix_warning_only_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only_vpnv4", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv6")
    def maximum_prefix_warning_only_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv6")

    @maximum_prefix_warning_only_vpnv6.setter
    def maximum_prefix_warning_only_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only_vpnv6", value)

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self")

    @next_hop_self.setter
    def next_hop_self(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self", value)

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self6")

    @next_hop_self6.setter
    def next_hop_self6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self6", value)

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_rr")

    @next_hop_self_rr.setter
    def next_hop_self_rr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_rr", value)

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_rr6")

    @next_hop_self_rr6.setter
    def next_hop_self_rr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_rr6", value)

    @property
    @pulumi.getter(name="nextHopSelfVpnv4")
    def next_hop_self_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_vpnv4")

    @next_hop_self_vpnv4.setter
    def next_hop_self_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_vpnv4", value)

    @property
    @pulumi.getter(name="nextHopSelfVpnv6")
    def next_hop_self_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_vpnv6")

    @next_hop_self_vpnv6.setter
    def next_hop_self_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_vpnv6", value)

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_capability")

    @override_capability.setter
    def override_capability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_capability", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password used in MD5 authentication.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in")

    @prefix_list_in.setter
    def prefix_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in", value)

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in6")

    @prefix_list_in6.setter
    def prefix_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in6", value)

    @property
    @pulumi.getter(name="prefixListInVpnv4")
    def prefix_list_in_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Inbound filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv4")

    @prefix_list_in_vpnv4.setter
    def prefix_list_in_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in_vpnv4", value)

    @property
    @pulumi.getter(name="prefixListInVpnv6")
    def prefix_list_in_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Inbound filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv6")

    @prefix_list_in_vpnv6.setter
    def prefix_list_in_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in_vpnv6", value)

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out")

    @prefix_list_out.setter
    def prefix_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out", value)

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out6")

    @prefix_list_out6.setter
    def prefix_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out6", value)

    @property
    @pulumi.getter(name="prefixListOutVpnv4")
    def prefix_list_out_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Outbound filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv4")

    @prefix_list_out_vpnv4.setter
    def prefix_list_out_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out_vpnv4", value)

    @property
    @pulumi.getter(name="prefixListOutVpnv6")
    def prefix_list_out_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Outbound filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv6")

    @prefix_list_out_vpnv6.setter
    def prefix_list_out_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out_vpnv6", value)

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[int]]:
        """
        AS number of neighbor.
        """
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_as", value)

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as")

    @remove_private_as.setter
    def remove_private_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as", value)

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as6")

    @remove_private_as6.setter
    def remove_private_as6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as6", value)

    @property
    @pulumi.getter(name="removePrivateAsEvpn")
    def remove_private_as_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_evpn")

    @remove_private_as_evpn.setter
    def remove_private_as_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as_evpn", value)

    @property
    @pulumi.getter(name="removePrivateAsVpnv4")
    def remove_private_as_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_vpnv4")

    @remove_private_as_vpnv4.setter
    def remove_private_as_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as_vpnv4", value)

    @property
    @pulumi.getter(name="removePrivateAsVpnv6")
    def remove_private_as_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_vpnv6")

    @remove_private_as_vpnv6.setter
    def remove_private_as_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as_vpnv6", value)

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> Optional[pulumi.Input[int]]:
        """
        Graceful restart delay time (sec, 0 = global default).
        """
        return pulumi.get(self, "restart_time")

    @restart_time.setter
    def restart_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restart_time", value)

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time to retain stale routes.
        """
        return pulumi.get(self, "retain_stale_time")

    @retain_stale_time.setter
    def retain_stale_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retain_stale_time", value)

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in")

    @route_map_in.setter
    def route_map_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in", value)

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in6")

    @route_map_in6.setter
    def route_map_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in6", value)

    @property
    @pulumi.getter(name="routeMapInEvpn")
    def route_map_in_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        L2VPN EVPN inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_evpn")

    @route_map_in_evpn.setter
    def route_map_in_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in_evpn", value)

    @property
    @pulumi.getter(name="routeMapInVpnv4")
    def route_map_in_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        VPNv4 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv4")

    @route_map_in_vpnv4.setter
    def route_map_in_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in_vpnv4", value)

    @property
    @pulumi.getter(name="routeMapInVpnv6")
    def route_map_in_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        VPNv6 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv6")

    @route_map_in_vpnv6.setter
    def route_map_in_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in_vpnv6", value)

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out")

    @route_map_out.setter
    def route_map_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out", value)

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out6")

    @route_map_out6.setter
    def route_map_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out6", value)

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out6_preferable")

    @route_map_out6_preferable.setter
    def route_map_out6_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out6_preferable", value)

    @property
    @pulumi.getter(name="routeMapOutEvpn")
    def route_map_out_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        L2VPN EVPN outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_evpn")

    @route_map_out_evpn.setter
    def route_map_out_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_evpn", value)

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_preferable")

    @route_map_out_preferable.setter
    def route_map_out_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_preferable", value)

    @property
    @pulumi.getter(name="routeMapOutVpnv4")
    def route_map_out_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        VPNv4 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv4")

    @route_map_out_vpnv4.setter
    def route_map_out_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_vpnv4", value)

    @property
    @pulumi.getter(name="routeMapOutVpnv4Preferable")
    def route_map_out_vpnv4_preferable(self) -> Optional[pulumi.Input[str]]:
        """
        VPNv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv4_preferable")

    @route_map_out_vpnv4_preferable.setter
    def route_map_out_vpnv4_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_vpnv4_preferable", value)

    @property
    @pulumi.getter(name="routeMapOutVpnv6")
    def route_map_out_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        VPNv6 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv6")

    @route_map_out_vpnv6.setter
    def route_map_out_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_vpnv6", value)

    @property
    @pulumi.getter(name="routeMapOutVpnv6Preferable")
    def route_map_out_vpnv6_preferable(self) -> Optional[pulumi.Input[str]]:
        """
        VPNv6 outbound route map filter if this neighbor is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv6_preferable")

    @route_map_out_vpnv6_preferable.setter
    def route_map_out_vpnv6_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_vpnv6_preferable", value)

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client")

    @route_reflector_client.setter
    def route_reflector_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client", value)

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client6")

    @route_reflector_client6.setter
    def route_reflector_client6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client6", value)

    @property
    @pulumi.getter(name="routeReflectorClientEvpn")
    def route_reflector_client_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_evpn")

    @route_reflector_client_evpn.setter
    def route_reflector_client_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client_evpn", value)

    @property
    @pulumi.getter(name="routeReflectorClientVpnv4")
    def route_reflector_client_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_vpnv4")

    @route_reflector_client_vpnv4.setter
    def route_reflector_client_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client_vpnv4", value)

    @property
    @pulumi.getter(name="routeReflectorClientVpnv6")
    def route_reflector_client_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_vpnv6")

    @route_reflector_client_vpnv6.setter
    def route_reflector_client_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client_vpnv6", value)

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client")

    @route_server_client.setter
    def route_server_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client", value)

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client6")

    @route_server_client6.setter
    def route_server_client6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client6", value)

    @property
    @pulumi.getter(name="routeServerClientEvpn")
    def route_server_client_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_evpn")

    @route_server_client_evpn.setter
    def route_server_client_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client_evpn", value)

    @property
    @pulumi.getter(name="routeServerClientVpnv4")
    def route_server_client_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_vpnv4")

    @route_server_client_vpnv4.setter
    def route_server_client_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client_vpnv4", value)

    @property
    @pulumi.getter(name="routeServerClientVpnv6")
    def route_server_client_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_vpnv6")

    @route_server_client_vpnv6.setter
    def route_server_client_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client_vpnv6", value)

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community")

    @send_community.setter
    def send_community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community", value)

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community6")

    @send_community6.setter
    def send_community6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community6", value)

    @property
    @pulumi.getter(name="sendCommunityEvpn")
    def send_community_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_evpn")

    @send_community_evpn.setter
    def send_community_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community_evpn", value)

    @property
    @pulumi.getter(name="sendCommunityVpnv4")
    def send_community_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_vpnv4")

    @send_community_vpnv4.setter
    def send_community_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community_vpnv4", value)

    @property
    @pulumi.getter(name="sendCommunityVpnv6")
    def send_community_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_vpnv6")

    @send_community_vpnv6.setter
    def send_community_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community_vpnv6", value)

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown", value)

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration")

    @soft_reconfiguration.setter
    def soft_reconfiguration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration", value)

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration6")

    @soft_reconfiguration6.setter
    def soft_reconfiguration6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration6", value)

    @property
    @pulumi.getter(name="softReconfigurationEvpn")
    def soft_reconfiguration_evpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_evpn")

    @soft_reconfiguration_evpn.setter
    def soft_reconfiguration_evpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration_evpn", value)

    @property
    @pulumi.getter(name="softReconfigurationVpnv4")
    def soft_reconfiguration_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv4")

    @soft_reconfiguration_vpnv4.setter
    def soft_reconfiguration_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration_vpnv4", value)

    @property
    @pulumi.getter(name="softReconfigurationVpnv6")
    def soft_reconfiguration_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv6")

    @soft_reconfiguration_vpnv6.setter
    def soft_reconfiguration_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration_vpnv6", value)

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "stale_route")

    @stale_route.setter
    def stale_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stale_route", value)

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_capability_match")

    @strict_capability_match.setter
    def strict_capability_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_capability_match", value)

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map")

    @unsuppress_map.setter
    def unsuppress_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsuppress_map", value)

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map6")

    @unsuppress_map6.setter
    def unsuppress_map6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsuppress_map6", value)

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> Optional[pulumi.Input[str]]:
        """
        Interface to use as source IP/IPv6 address of TCP connections.
        """
        return pulumi.get(self, "update_source")

    @update_source.setter
    def update_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_source", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Neighbor weight.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


class Neighbor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activate: Optional[pulumi.Input[str]] = None,
                 activate6: Optional[pulumi.Input[str]] = None,
                 activate_evpn: Optional[pulumi.Input[str]] = None,
                 activate_vpnv4: Optional[pulumi.Input[str]] = None,
                 activate_vpnv6: Optional[pulumi.Input[str]] = None,
                 additional_path: Optional[pulumi.Input[str]] = None,
                 additional_path6: Optional[pulumi.Input[str]] = None,
                 additional_path_vpnv4: Optional[pulumi.Input[str]] = None,
                 additional_path_vpnv6: Optional[pulumi.Input[str]] = None,
                 adv_additional_path: Optional[pulumi.Input[int]] = None,
                 adv_additional_path6: Optional[pulumi.Input[int]] = None,
                 adv_additional_path_vpnv4: Optional[pulumi.Input[int]] = None,
                 adv_additional_path_vpnv6: Optional[pulumi.Input[int]] = None,
                 advertisement_interval: Optional[pulumi.Input[int]] = None,
                 allowas_in: Optional[pulumi.Input[int]] = None,
                 allowas_in6: Optional[pulumi.Input[int]] = None,
                 allowas_in_enable: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable6: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_evpn: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_vpnv4: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_vpnv6: Optional[pulumi.Input[str]] = None,
                 allowas_in_evpn: Optional[pulumi.Input[int]] = None,
                 allowas_in_vpnv4: Optional[pulumi.Input[int]] = None,
                 allowas_in_vpnv6: Optional[pulumi.Input[int]] = None,
                 as_override: Optional[pulumi.Input[str]] = None,
                 as_override6: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged6: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged_vpnv4: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged_vpnv6: Optional[pulumi.Input[str]] = None,
                 auth_options: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 capability_default_originate: Optional[pulumi.Input[str]] = None,
                 capability_default_originate6: Optional[pulumi.Input[str]] = None,
                 capability_dynamic: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart6: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_evpn: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_vpnv4: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_vpnv6: Optional[pulumi.Input[str]] = None,
                 capability_orf: Optional[pulumi.Input[str]] = None,
                 capability_orf6: Optional[pulumi.Input[str]] = None,
                 capability_route_refresh: Optional[pulumi.Input[str]] = None,
                 conditional_advertise6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NeighborConditionalAdvertise6Args']]]]] = None,
                 conditional_advertises: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NeighborConditionalAdvertiseArgs']]]]] = None,
                 connect_timer: Optional[pulumi.Input[int]] = None,
                 default_originate_routemap: Optional[pulumi.Input[str]] = None,
                 default_originate_routemap6: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distribute_list_in: Optional[pulumi.Input[str]] = None,
                 distribute_list_in6: Optional[pulumi.Input[str]] = None,
                 distribute_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 distribute_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 distribute_list_out: Optional[pulumi.Input[str]] = None,
                 distribute_list_out6: Optional[pulumi.Input[str]] = None,
                 distribute_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 distribute_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 dont_capability_negotiate: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ebgp_enforce_multihop: Optional[pulumi.Input[str]] = None,
                 ebgp_multihop_ttl: Optional[pulumi.Input[int]] = None,
                 filter_list_in: Optional[pulumi.Input[str]] = None,
                 filter_list_in6: Optional[pulumi.Input[str]] = None,
                 filter_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 filter_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 filter_list_out: Optional[pulumi.Input[str]] = None,
                 filter_list_out6: Optional[pulumi.Input[str]] = None,
                 filter_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 filter_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 holdtime_timer: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 keep_alive_timer: Optional[pulumi.Input[int]] = None,
                 link_down_failover: Optional[pulumi.Input[str]] = None,
                 local_as: Optional[pulumi.Input[int]] = None,
                 local_as_no_prepend: Optional[pulumi.Input[str]] = None,
                 local_as_replace_as: Optional[pulumi.Input[str]] = None,
                 maximum_prefix: Optional[pulumi.Input[int]] = None,
                 maximum_prefix6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_evpn: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_evpn: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_vpnv4: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_vpnv6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_vpnv4: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_vpnv6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_warning_only: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only6: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_evpn: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_vpnv4: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_vpnv6: Optional[pulumi.Input[str]] = None,
                 next_hop_self: Optional[pulumi.Input[str]] = None,
                 next_hop_self6: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr6: Optional[pulumi.Input[str]] = None,
                 next_hop_self_vpnv4: Optional[pulumi.Input[str]] = None,
                 next_hop_self_vpnv6: Optional[pulumi.Input[str]] = None,
                 override_capability: Optional[pulumi.Input[str]] = None,
                 passive: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prefix_list_in: Optional[pulumi.Input[str]] = None,
                 prefix_list_in6: Optional[pulumi.Input[str]] = None,
                 prefix_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 prefix_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 prefix_list_out: Optional[pulumi.Input[str]] = None,
                 prefix_list_out6: Optional[pulumi.Input[str]] = None,
                 prefix_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 prefix_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 remote_as: Optional[pulumi.Input[int]] = None,
                 remove_private_as: Optional[pulumi.Input[str]] = None,
                 remove_private_as6: Optional[pulumi.Input[str]] = None,
                 remove_private_as_evpn: Optional[pulumi.Input[str]] = None,
                 remove_private_as_vpnv4: Optional[pulumi.Input[str]] = None,
                 remove_private_as_vpnv6: Optional[pulumi.Input[str]] = None,
                 restart_time: Optional[pulumi.Input[int]] = None,
                 retain_stale_time: Optional[pulumi.Input[int]] = None,
                 route_map_in: Optional[pulumi.Input[str]] = None,
                 route_map_in6: Optional[pulumi.Input[str]] = None,
                 route_map_in_evpn: Optional[pulumi.Input[str]] = None,
                 route_map_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_map_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 route_map_out: Optional[pulumi.Input[str]] = None,
                 route_map_out6: Optional[pulumi.Input[str]] = None,
                 route_map_out6_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_evpn: Optional[pulumi.Input[str]] = None,
                 route_map_out_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv4_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv6_preferable: Optional[pulumi.Input[str]] = None,
                 route_reflector_client: Optional[pulumi.Input[str]] = None,
                 route_reflector_client6: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_evpn: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_vpnv6: Optional[pulumi.Input[str]] = None,
                 route_server_client: Optional[pulumi.Input[str]] = None,
                 route_server_client6: Optional[pulumi.Input[str]] = None,
                 route_server_client_evpn: Optional[pulumi.Input[str]] = None,
                 route_server_client_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_server_client_vpnv6: Optional[pulumi.Input[str]] = None,
                 send_community: Optional[pulumi.Input[str]] = None,
                 send_community6: Optional[pulumi.Input[str]] = None,
                 send_community_evpn: Optional[pulumi.Input[str]] = None,
                 send_community_vpnv4: Optional[pulumi.Input[str]] = None,
                 send_community_vpnv6: Optional[pulumi.Input[str]] = None,
                 shutdown: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration6: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_evpn: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_vpnv4: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_vpnv6: Optional[pulumi.Input[str]] = None,
                 stale_route: Optional[pulumi.Input[str]] = None,
                 strict_capability_match: Optional[pulumi.Input[str]] = None,
                 unsuppress_map: Optional[pulumi.Input[str]] = None,
                 unsuppress_map6: Optional[pulumi.Input[str]] = None,
                 update_source: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        BGP neighbor table.

        > The provider supports the definition of Neighbor in Router Bgp `router.Bgp`, and also allows the definition of separate Neighbor resources `router/bgp.Neighbor`, but do not use a `router.Bgp` with in-line Neighbor in conjunction with any `router/bgp.Neighbor` resources, otherwise conflicts and overwrite will occur.

        ## Import

        Routerbgp Neighbor can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:router/bgp/neighbor:Neighbor labelname {{ip}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:router/bgp/neighbor:Neighbor labelname {{ip}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] activate: Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate6: Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate_evpn: Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate_vpnv4: Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate_vpnv6: Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] additional_path: Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[str] additional_path6: Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[str] additional_path_vpnv4: Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[str] additional_path_vpnv6: Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[int] adv_additional_path: Number of IPv4 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] adv_additional_path6: Number of IPv6 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] adv_additional_path_vpnv4: Number of VPNv4 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] adv_additional_path_vpnv6: Number of VPNv6 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] advertisement_interval: Minimum interval (sec) between sending updates.
        :param pulumi.Input[int] allowas_in: IPv4 The maximum number of occurrence of my AS number allowed.
        :param pulumi.Input[int] allowas_in6: IPv6 The maximum number of occurrence of my AS number allowed.
        :param pulumi.Input[str] allowas_in_enable: Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable6: Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable_evpn: Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable_vpnv4: Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable_vpnv6: Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] allowas_in_evpn: The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        :param pulumi.Input[int] allowas_in_vpnv4: The maximum number of occurrence of my AS number allowed for VPNv4 route.
        :param pulumi.Input[int] allowas_in_vpnv6: The maximum number of occurrence of my AS number allowed for VPNv6 route.
        :param pulumi.Input[str] as_override: Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] as_override6: Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] attribute_unchanged: IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] attribute_unchanged6: IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] attribute_unchanged_vpnv4: List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] attribute_unchanged_vpnv6: List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] auth_options: Key-chain name for TCP authentication options.
        :param pulumi.Input[str] bfd: Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_default_originate: Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_default_originate6: Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_dynamic: Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart: Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart6: Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart_evpn: Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart_vpnv4: Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart_vpnv6: Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_orf: Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param pulumi.Input[str] capability_orf6: Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param pulumi.Input[str] capability_route_refresh: Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NeighborConditionalAdvertise6Args']]]] conditional_advertise6s: IPv6 conditional advertisement. The structure of `conditional_advertise6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NeighborConditionalAdvertiseArgs']]]] conditional_advertises: Conditional advertisement. The structure of `conditional_advertise` block is documented below.
        :param pulumi.Input[int] connect_timer: Interval (sec) for connect timer.
        :param pulumi.Input[str] default_originate_routemap: Route map to specify criteria to originate IPv4 default.
        :param pulumi.Input[str] default_originate_routemap6: Route map to specify criteria to originate IPv6 default.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] distribute_list_in: Filter for IPv4 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_in6: Filter for IPv6 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_in_vpnv4: Filter for VPNv4 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_in_vpnv6: Filter for VPNv6 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_out: Filter for IPv4 updates to this neighbor.
        :param pulumi.Input[str] distribute_list_out6: Filter for IPv6 updates to this neighbor.
        :param pulumi.Input[str] distribute_list_out_vpnv4: Filter for VPNv4 updates to this neighbor.
        :param pulumi.Input[str] distribute_list_out_vpnv6: Filter for VPNv6 updates to this neighbor.
        :param pulumi.Input[str] dont_capability_negotiate: Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ebgp_enforce_multihop: Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ebgp_multihop_ttl: EBGP multihop TTL for this peer.
        :param pulumi.Input[str] filter_list_in: BGP filter for IPv4 inbound routes.
        :param pulumi.Input[str] filter_list_in6: BGP filter for IPv6 inbound routes.
        :param pulumi.Input[str] filter_list_in_vpnv4: BGP filter for VPNv4 inbound routes.
        :param pulumi.Input[str] filter_list_in_vpnv6: BGP filter for VPNv6 inbound routes.
        :param pulumi.Input[str] filter_list_out: BGP filter for IPv4 outbound routes.
        :param pulumi.Input[str] filter_list_out6: BGP filter for IPv6 outbound routes.
        :param pulumi.Input[str] filter_list_out_vpnv4: BGP filter for VPNv4 outbound routes.
        :param pulumi.Input[str] filter_list_out_vpnv6: BGP filter for VPNv6 outbound routes.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] holdtime_timer: Interval (sec) before peer considered dead.
        :param pulumi.Input[str] interface: Interface
        :param pulumi.Input[str] ip: IP/IPv6 address of neighbor.
        :param pulumi.Input[int] keep_alive_timer: Keep alive timer interval (sec).
        :param pulumi.Input[str] link_down_failover: Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] local_as: Local AS number of neighbor.
        :param pulumi.Input[str] local_as_no_prepend: Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_as_replace_as: Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] maximum_prefix: Maximum number of IPv4 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix6: Maximum number of IPv6 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix_evpn: Maximum number of L2VPN EVPN prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix_threshold: Maximum IPv4 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold6: Maximum IPv6 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold_evpn: Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold_vpnv4: Maximum VPNv4 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold_vpnv6: Maximum VPNv6 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_vpnv4: Maximum number of VPNv4 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix_vpnv6: Maximum number of VPNv6 prefixes to accept from this peer.
        :param pulumi.Input[str] maximum_prefix_warning_only: Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only6: Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only_evpn: Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only_vpnv4: Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only_vpnv6: Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self: Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self6: Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_rr: Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_rr6: Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_vpnv4: Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_vpnv6: Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_capability: Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] passive: Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] password: Password used in MD5 authentication.
        :param pulumi.Input[str] prefix_list_in: IPv4 Inbound filter for updates from this neighbor.
        :param pulumi.Input[str] prefix_list_in6: IPv6 Inbound filter for updates from this neighbor.
        :param pulumi.Input[str] prefix_list_in_vpnv4: Inbound filter for VPNv4 updates from this neighbor.
        :param pulumi.Input[str] prefix_list_in_vpnv6: Inbound filter for VPNv6 updates from this neighbor.
        :param pulumi.Input[str] prefix_list_out: IPv4 Outbound filter for updates to this neighbor.
        :param pulumi.Input[str] prefix_list_out6: IPv6 Outbound filter for updates to this neighbor.
        :param pulumi.Input[str] prefix_list_out_vpnv4: Outbound filter for VPNv4 updates to this neighbor.
        :param pulumi.Input[str] prefix_list_out_vpnv6: Outbound filter for VPNv6 updates to this neighbor.
        :param pulumi.Input[int] remote_as: AS number of neighbor.
        :param pulumi.Input[str] remove_private_as: Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as6: Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as_evpn: Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as_vpnv4: Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as_vpnv6: Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] restart_time: Graceful restart delay time (sec, 0 = global default).
        :param pulumi.Input[int] retain_stale_time: Time to retain stale routes.
        :param pulumi.Input[str] route_map_in: IPv4 Inbound route map filter.
        :param pulumi.Input[str] route_map_in6: IPv6 Inbound route map filter.
        :param pulumi.Input[str] route_map_in_evpn: L2VPN EVPN inbound route map filter.
        :param pulumi.Input[str] route_map_in_vpnv4: VPNv4 inbound route map filter.
        :param pulumi.Input[str] route_map_in_vpnv6: VPNv6 inbound route map filter.
        :param pulumi.Input[str] route_map_out: IPv4 Outbound route map filter.
        :param pulumi.Input[str] route_map_out6: IPv6 Outbound route map filter.
        :param pulumi.Input[str] route_map_out6_preferable: IPv6 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_map_out_evpn: L2VPN EVPN outbound route map filter.
        :param pulumi.Input[str] route_map_out_preferable: IPv4 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_map_out_vpnv4: VPNv4 outbound route map filter.
        :param pulumi.Input[str] route_map_out_vpnv4_preferable: VPNv4 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_map_out_vpnv6: VPNv6 outbound route map filter.
        :param pulumi.Input[str] route_map_out_vpnv6_preferable: VPNv6 outbound route map filter if this neighbor is preferred.
        :param pulumi.Input[str] route_reflector_client: Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client6: Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client_evpn: Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client_vpnv4: Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client_vpnv6: Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client: Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client6: Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client_evpn: Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client_vpnv4: Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client_vpnv6: Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] send_community: IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community6: IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community_evpn: Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community_vpnv4: Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community_vpnv6: Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] shutdown: Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration: Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration6: Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration_evpn: Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration_vpnv4: Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration_vpnv6: Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] stale_route: Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_capability_match: Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unsuppress_map: IPv4 Route map to selectively unsuppress suppressed routes.
        :param pulumi.Input[str] unsuppress_map6: IPv6 Route map to selectively unsuppress suppressed routes.
        :param pulumi.Input[str] update_source: Interface to use as source IP/IPv6 address of TCP connections.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] weight: Neighbor weight.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NeighborArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        BGP neighbor table.

        > The provider supports the definition of Neighbor in Router Bgp `router.Bgp`, and also allows the definition of separate Neighbor resources `router/bgp.Neighbor`, but do not use a `router.Bgp` with in-line Neighbor in conjunction with any `router/bgp.Neighbor` resources, otherwise conflicts and overwrite will occur.

        ## Import

        Routerbgp Neighbor can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:router/bgp/neighbor:Neighbor labelname {{ip}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:router/bgp/neighbor:Neighbor labelname {{ip}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param NeighborArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NeighborArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activate: Optional[pulumi.Input[str]] = None,
                 activate6: Optional[pulumi.Input[str]] = None,
                 activate_evpn: Optional[pulumi.Input[str]] = None,
                 activate_vpnv4: Optional[pulumi.Input[str]] = None,
                 activate_vpnv6: Optional[pulumi.Input[str]] = None,
                 additional_path: Optional[pulumi.Input[str]] = None,
                 additional_path6: Optional[pulumi.Input[str]] = None,
                 additional_path_vpnv4: Optional[pulumi.Input[str]] = None,
                 additional_path_vpnv6: Optional[pulumi.Input[str]] = None,
                 adv_additional_path: Optional[pulumi.Input[int]] = None,
                 adv_additional_path6: Optional[pulumi.Input[int]] = None,
                 adv_additional_path_vpnv4: Optional[pulumi.Input[int]] = None,
                 adv_additional_path_vpnv6: Optional[pulumi.Input[int]] = None,
                 advertisement_interval: Optional[pulumi.Input[int]] = None,
                 allowas_in: Optional[pulumi.Input[int]] = None,
                 allowas_in6: Optional[pulumi.Input[int]] = None,
                 allowas_in_enable: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable6: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_evpn: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_vpnv4: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable_vpnv6: Optional[pulumi.Input[str]] = None,
                 allowas_in_evpn: Optional[pulumi.Input[int]] = None,
                 allowas_in_vpnv4: Optional[pulumi.Input[int]] = None,
                 allowas_in_vpnv6: Optional[pulumi.Input[int]] = None,
                 as_override: Optional[pulumi.Input[str]] = None,
                 as_override6: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged6: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged_vpnv4: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged_vpnv6: Optional[pulumi.Input[str]] = None,
                 auth_options: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 capability_default_originate: Optional[pulumi.Input[str]] = None,
                 capability_default_originate6: Optional[pulumi.Input[str]] = None,
                 capability_dynamic: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart6: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_evpn: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_vpnv4: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart_vpnv6: Optional[pulumi.Input[str]] = None,
                 capability_orf: Optional[pulumi.Input[str]] = None,
                 capability_orf6: Optional[pulumi.Input[str]] = None,
                 capability_route_refresh: Optional[pulumi.Input[str]] = None,
                 conditional_advertise6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NeighborConditionalAdvertise6Args']]]]] = None,
                 conditional_advertises: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NeighborConditionalAdvertiseArgs']]]]] = None,
                 connect_timer: Optional[pulumi.Input[int]] = None,
                 default_originate_routemap: Optional[pulumi.Input[str]] = None,
                 default_originate_routemap6: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distribute_list_in: Optional[pulumi.Input[str]] = None,
                 distribute_list_in6: Optional[pulumi.Input[str]] = None,
                 distribute_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 distribute_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 distribute_list_out: Optional[pulumi.Input[str]] = None,
                 distribute_list_out6: Optional[pulumi.Input[str]] = None,
                 distribute_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 distribute_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 dont_capability_negotiate: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ebgp_enforce_multihop: Optional[pulumi.Input[str]] = None,
                 ebgp_multihop_ttl: Optional[pulumi.Input[int]] = None,
                 filter_list_in: Optional[pulumi.Input[str]] = None,
                 filter_list_in6: Optional[pulumi.Input[str]] = None,
                 filter_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 filter_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 filter_list_out: Optional[pulumi.Input[str]] = None,
                 filter_list_out6: Optional[pulumi.Input[str]] = None,
                 filter_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 filter_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 holdtime_timer: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 keep_alive_timer: Optional[pulumi.Input[int]] = None,
                 link_down_failover: Optional[pulumi.Input[str]] = None,
                 local_as: Optional[pulumi.Input[int]] = None,
                 local_as_no_prepend: Optional[pulumi.Input[str]] = None,
                 local_as_replace_as: Optional[pulumi.Input[str]] = None,
                 maximum_prefix: Optional[pulumi.Input[int]] = None,
                 maximum_prefix6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_evpn: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_evpn: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_vpnv4: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold_vpnv6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_vpnv4: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_vpnv6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_warning_only: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only6: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_evpn: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_vpnv4: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only_vpnv6: Optional[pulumi.Input[str]] = None,
                 next_hop_self: Optional[pulumi.Input[str]] = None,
                 next_hop_self6: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr6: Optional[pulumi.Input[str]] = None,
                 next_hop_self_vpnv4: Optional[pulumi.Input[str]] = None,
                 next_hop_self_vpnv6: Optional[pulumi.Input[str]] = None,
                 override_capability: Optional[pulumi.Input[str]] = None,
                 passive: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prefix_list_in: Optional[pulumi.Input[str]] = None,
                 prefix_list_in6: Optional[pulumi.Input[str]] = None,
                 prefix_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 prefix_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 prefix_list_out: Optional[pulumi.Input[str]] = None,
                 prefix_list_out6: Optional[pulumi.Input[str]] = None,
                 prefix_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 prefix_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 remote_as: Optional[pulumi.Input[int]] = None,
                 remove_private_as: Optional[pulumi.Input[str]] = None,
                 remove_private_as6: Optional[pulumi.Input[str]] = None,
                 remove_private_as_evpn: Optional[pulumi.Input[str]] = None,
                 remove_private_as_vpnv4: Optional[pulumi.Input[str]] = None,
                 remove_private_as_vpnv6: Optional[pulumi.Input[str]] = None,
                 restart_time: Optional[pulumi.Input[int]] = None,
                 retain_stale_time: Optional[pulumi.Input[int]] = None,
                 route_map_in: Optional[pulumi.Input[str]] = None,
                 route_map_in6: Optional[pulumi.Input[str]] = None,
                 route_map_in_evpn: Optional[pulumi.Input[str]] = None,
                 route_map_in_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_map_in_vpnv6: Optional[pulumi.Input[str]] = None,
                 route_map_out: Optional[pulumi.Input[str]] = None,
                 route_map_out6: Optional[pulumi.Input[str]] = None,
                 route_map_out6_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_evpn: Optional[pulumi.Input[str]] = None,
                 route_map_out_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv4_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv6: Optional[pulumi.Input[str]] = None,
                 route_map_out_vpnv6_preferable: Optional[pulumi.Input[str]] = None,
                 route_reflector_client: Optional[pulumi.Input[str]] = None,
                 route_reflector_client6: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_evpn: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_reflector_client_vpnv6: Optional[pulumi.Input[str]] = None,
                 route_server_client: Optional[pulumi.Input[str]] = None,
                 route_server_client6: Optional[pulumi.Input[str]] = None,
                 route_server_client_evpn: Optional[pulumi.Input[str]] = None,
                 route_server_client_vpnv4: Optional[pulumi.Input[str]] = None,
                 route_server_client_vpnv6: Optional[pulumi.Input[str]] = None,
                 send_community: Optional[pulumi.Input[str]] = None,
                 send_community6: Optional[pulumi.Input[str]] = None,
                 send_community_evpn: Optional[pulumi.Input[str]] = None,
                 send_community_vpnv4: Optional[pulumi.Input[str]] = None,
                 send_community_vpnv6: Optional[pulumi.Input[str]] = None,
                 shutdown: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration6: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_evpn: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_vpnv4: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration_vpnv6: Optional[pulumi.Input[str]] = None,
                 stale_route: Optional[pulumi.Input[str]] = None,
                 strict_capability_match: Optional[pulumi.Input[str]] = None,
                 unsuppress_map: Optional[pulumi.Input[str]] = None,
                 unsuppress_map6: Optional[pulumi.Input[str]] = None,
                 update_source: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NeighborArgs.__new__(NeighborArgs)

            __props__.__dict__["activate"] = activate
            __props__.__dict__["activate6"] = activate6
            __props__.__dict__["activate_evpn"] = activate_evpn
            __props__.__dict__["activate_vpnv4"] = activate_vpnv4
            __props__.__dict__["activate_vpnv6"] = activate_vpnv6
            __props__.__dict__["additional_path"] = additional_path
            __props__.__dict__["additional_path6"] = additional_path6
            __props__.__dict__["additional_path_vpnv4"] = additional_path_vpnv4
            __props__.__dict__["additional_path_vpnv6"] = additional_path_vpnv6
            __props__.__dict__["adv_additional_path"] = adv_additional_path
            __props__.__dict__["adv_additional_path6"] = adv_additional_path6
            __props__.__dict__["adv_additional_path_vpnv4"] = adv_additional_path_vpnv4
            __props__.__dict__["adv_additional_path_vpnv6"] = adv_additional_path_vpnv6
            __props__.__dict__["advertisement_interval"] = advertisement_interval
            __props__.__dict__["allowas_in"] = allowas_in
            __props__.__dict__["allowas_in6"] = allowas_in6
            __props__.__dict__["allowas_in_enable"] = allowas_in_enable
            __props__.__dict__["allowas_in_enable6"] = allowas_in_enable6
            __props__.__dict__["allowas_in_enable_evpn"] = allowas_in_enable_evpn
            __props__.__dict__["allowas_in_enable_vpnv4"] = allowas_in_enable_vpnv4
            __props__.__dict__["allowas_in_enable_vpnv6"] = allowas_in_enable_vpnv6
            __props__.__dict__["allowas_in_evpn"] = allowas_in_evpn
            __props__.__dict__["allowas_in_vpnv4"] = allowas_in_vpnv4
            __props__.__dict__["allowas_in_vpnv6"] = allowas_in_vpnv6
            __props__.__dict__["as_override"] = as_override
            __props__.__dict__["as_override6"] = as_override6
            __props__.__dict__["attribute_unchanged"] = attribute_unchanged
            __props__.__dict__["attribute_unchanged6"] = attribute_unchanged6
            __props__.__dict__["attribute_unchanged_vpnv4"] = attribute_unchanged_vpnv4
            __props__.__dict__["attribute_unchanged_vpnv6"] = attribute_unchanged_vpnv6
            __props__.__dict__["auth_options"] = auth_options
            __props__.__dict__["bfd"] = bfd
            __props__.__dict__["capability_default_originate"] = capability_default_originate
            __props__.__dict__["capability_default_originate6"] = capability_default_originate6
            __props__.__dict__["capability_dynamic"] = capability_dynamic
            __props__.__dict__["capability_graceful_restart"] = capability_graceful_restart
            __props__.__dict__["capability_graceful_restart6"] = capability_graceful_restart6
            __props__.__dict__["capability_graceful_restart_evpn"] = capability_graceful_restart_evpn
            __props__.__dict__["capability_graceful_restart_vpnv4"] = capability_graceful_restart_vpnv4
            __props__.__dict__["capability_graceful_restart_vpnv6"] = capability_graceful_restart_vpnv6
            __props__.__dict__["capability_orf"] = capability_orf
            __props__.__dict__["capability_orf6"] = capability_orf6
            __props__.__dict__["capability_route_refresh"] = capability_route_refresh
            __props__.__dict__["conditional_advertise6s"] = conditional_advertise6s
            __props__.__dict__["conditional_advertises"] = conditional_advertises
            __props__.__dict__["connect_timer"] = connect_timer
            __props__.__dict__["default_originate_routemap"] = default_originate_routemap
            __props__.__dict__["default_originate_routemap6"] = default_originate_routemap6
            __props__.__dict__["description"] = description
            __props__.__dict__["distribute_list_in"] = distribute_list_in
            __props__.__dict__["distribute_list_in6"] = distribute_list_in6
            __props__.__dict__["distribute_list_in_vpnv4"] = distribute_list_in_vpnv4
            __props__.__dict__["distribute_list_in_vpnv6"] = distribute_list_in_vpnv6
            __props__.__dict__["distribute_list_out"] = distribute_list_out
            __props__.__dict__["distribute_list_out6"] = distribute_list_out6
            __props__.__dict__["distribute_list_out_vpnv4"] = distribute_list_out_vpnv4
            __props__.__dict__["distribute_list_out_vpnv6"] = distribute_list_out_vpnv6
            __props__.__dict__["dont_capability_negotiate"] = dont_capability_negotiate
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["ebgp_enforce_multihop"] = ebgp_enforce_multihop
            __props__.__dict__["ebgp_multihop_ttl"] = ebgp_multihop_ttl
            __props__.__dict__["filter_list_in"] = filter_list_in
            __props__.__dict__["filter_list_in6"] = filter_list_in6
            __props__.__dict__["filter_list_in_vpnv4"] = filter_list_in_vpnv4
            __props__.__dict__["filter_list_in_vpnv6"] = filter_list_in_vpnv6
            __props__.__dict__["filter_list_out"] = filter_list_out
            __props__.__dict__["filter_list_out6"] = filter_list_out6
            __props__.__dict__["filter_list_out_vpnv4"] = filter_list_out_vpnv4
            __props__.__dict__["filter_list_out_vpnv6"] = filter_list_out_vpnv6
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["holdtime_timer"] = holdtime_timer
            __props__.__dict__["interface"] = interface
            if ip is None and not opts.urn:
                raise TypeError("Missing required property 'ip'")
            __props__.__dict__["ip"] = ip
            __props__.__dict__["keep_alive_timer"] = keep_alive_timer
            __props__.__dict__["link_down_failover"] = link_down_failover
            __props__.__dict__["local_as"] = local_as
            __props__.__dict__["local_as_no_prepend"] = local_as_no_prepend
            __props__.__dict__["local_as_replace_as"] = local_as_replace_as
            __props__.__dict__["maximum_prefix"] = maximum_prefix
            __props__.__dict__["maximum_prefix6"] = maximum_prefix6
            __props__.__dict__["maximum_prefix_evpn"] = maximum_prefix_evpn
            __props__.__dict__["maximum_prefix_threshold"] = maximum_prefix_threshold
            __props__.__dict__["maximum_prefix_threshold6"] = maximum_prefix_threshold6
            __props__.__dict__["maximum_prefix_threshold_evpn"] = maximum_prefix_threshold_evpn
            __props__.__dict__["maximum_prefix_threshold_vpnv4"] = maximum_prefix_threshold_vpnv4
            __props__.__dict__["maximum_prefix_threshold_vpnv6"] = maximum_prefix_threshold_vpnv6
            __props__.__dict__["maximum_prefix_vpnv4"] = maximum_prefix_vpnv4
            __props__.__dict__["maximum_prefix_vpnv6"] = maximum_prefix_vpnv6
            __props__.__dict__["maximum_prefix_warning_only"] = maximum_prefix_warning_only
            __props__.__dict__["maximum_prefix_warning_only6"] = maximum_prefix_warning_only6
            __props__.__dict__["maximum_prefix_warning_only_evpn"] = maximum_prefix_warning_only_evpn
            __props__.__dict__["maximum_prefix_warning_only_vpnv4"] = maximum_prefix_warning_only_vpnv4
            __props__.__dict__["maximum_prefix_warning_only_vpnv6"] = maximum_prefix_warning_only_vpnv6
            __props__.__dict__["next_hop_self"] = next_hop_self
            __props__.__dict__["next_hop_self6"] = next_hop_self6
            __props__.__dict__["next_hop_self_rr"] = next_hop_self_rr
            __props__.__dict__["next_hop_self_rr6"] = next_hop_self_rr6
            __props__.__dict__["next_hop_self_vpnv4"] = next_hop_self_vpnv4
            __props__.__dict__["next_hop_self_vpnv6"] = next_hop_self_vpnv6
            __props__.__dict__["override_capability"] = override_capability
            __props__.__dict__["passive"] = passive
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["prefix_list_in"] = prefix_list_in
            __props__.__dict__["prefix_list_in6"] = prefix_list_in6
            __props__.__dict__["prefix_list_in_vpnv4"] = prefix_list_in_vpnv4
            __props__.__dict__["prefix_list_in_vpnv6"] = prefix_list_in_vpnv6
            __props__.__dict__["prefix_list_out"] = prefix_list_out
            __props__.__dict__["prefix_list_out6"] = prefix_list_out6
            __props__.__dict__["prefix_list_out_vpnv4"] = prefix_list_out_vpnv4
            __props__.__dict__["prefix_list_out_vpnv6"] = prefix_list_out_vpnv6
            __props__.__dict__["remote_as"] = remote_as
            __props__.__dict__["remove_private_as"] = remove_private_as
            __props__.__dict__["remove_private_as6"] = remove_private_as6
            __props__.__dict__["remove_private_as_evpn"] = remove_private_as_evpn
            __props__.__dict__["remove_private_as_vpnv4"] = remove_private_as_vpnv4
            __props__.__dict__["remove_private_as_vpnv6"] = remove_private_as_vpnv6
            __props__.__dict__["restart_time"] = restart_time
            __props__.__dict__["retain_stale_time"] = retain_stale_time
            __props__.__dict__["route_map_in"] = route_map_in
            __props__.__dict__["route_map_in6"] = route_map_in6
            __props__.__dict__["route_map_in_evpn"] = route_map_in_evpn
            __props__.__dict__["route_map_in_vpnv4"] = route_map_in_vpnv4
            __props__.__dict__["route_map_in_vpnv6"] = route_map_in_vpnv6
            __props__.__dict__["route_map_out"] = route_map_out
            __props__.__dict__["route_map_out6"] = route_map_out6
            __props__.__dict__["route_map_out6_preferable"] = route_map_out6_preferable
            __props__.__dict__["route_map_out_evpn"] = route_map_out_evpn
            __props__.__dict__["route_map_out_preferable"] = route_map_out_preferable
            __props__.__dict__["route_map_out_vpnv4"] = route_map_out_vpnv4
            __props__.__dict__["route_map_out_vpnv4_preferable"] = route_map_out_vpnv4_preferable
            __props__.__dict__["route_map_out_vpnv6"] = route_map_out_vpnv6
            __props__.__dict__["route_map_out_vpnv6_preferable"] = route_map_out_vpnv6_preferable
            __props__.__dict__["route_reflector_client"] = route_reflector_client
            __props__.__dict__["route_reflector_client6"] = route_reflector_client6
            __props__.__dict__["route_reflector_client_evpn"] = route_reflector_client_evpn
            __props__.__dict__["route_reflector_client_vpnv4"] = route_reflector_client_vpnv4
            __props__.__dict__["route_reflector_client_vpnv6"] = route_reflector_client_vpnv6
            __props__.__dict__["route_server_client"] = route_server_client
            __props__.__dict__["route_server_client6"] = route_server_client6
            __props__.__dict__["route_server_client_evpn"] = route_server_client_evpn
            __props__.__dict__["route_server_client_vpnv4"] = route_server_client_vpnv4
            __props__.__dict__["route_server_client_vpnv6"] = route_server_client_vpnv6
            __props__.__dict__["send_community"] = send_community
            __props__.__dict__["send_community6"] = send_community6
            __props__.__dict__["send_community_evpn"] = send_community_evpn
            __props__.__dict__["send_community_vpnv4"] = send_community_vpnv4
            __props__.__dict__["send_community_vpnv6"] = send_community_vpnv6
            __props__.__dict__["shutdown"] = shutdown
            __props__.__dict__["soft_reconfiguration"] = soft_reconfiguration
            __props__.__dict__["soft_reconfiguration6"] = soft_reconfiguration6
            __props__.__dict__["soft_reconfiguration_evpn"] = soft_reconfiguration_evpn
            __props__.__dict__["soft_reconfiguration_vpnv4"] = soft_reconfiguration_vpnv4
            __props__.__dict__["soft_reconfiguration_vpnv6"] = soft_reconfiguration_vpnv6
            __props__.__dict__["stale_route"] = stale_route
            __props__.__dict__["strict_capability_match"] = strict_capability_match
            __props__.__dict__["unsuppress_map"] = unsuppress_map
            __props__.__dict__["unsuppress_map6"] = unsuppress_map6
            __props__.__dict__["update_source"] = update_source
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["weight"] = weight
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Neighbor, __self__).__init__(
            'fortios:router/bgp/neighbor:Neighbor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            activate: Optional[pulumi.Input[str]] = None,
            activate6: Optional[pulumi.Input[str]] = None,
            activate_evpn: Optional[pulumi.Input[str]] = None,
            activate_vpnv4: Optional[pulumi.Input[str]] = None,
            activate_vpnv6: Optional[pulumi.Input[str]] = None,
            additional_path: Optional[pulumi.Input[str]] = None,
            additional_path6: Optional[pulumi.Input[str]] = None,
            additional_path_vpnv4: Optional[pulumi.Input[str]] = None,
            additional_path_vpnv6: Optional[pulumi.Input[str]] = None,
            adv_additional_path: Optional[pulumi.Input[int]] = None,
            adv_additional_path6: Optional[pulumi.Input[int]] = None,
            adv_additional_path_vpnv4: Optional[pulumi.Input[int]] = None,
            adv_additional_path_vpnv6: Optional[pulumi.Input[int]] = None,
            advertisement_interval: Optional[pulumi.Input[int]] = None,
            allowas_in: Optional[pulumi.Input[int]] = None,
            allowas_in6: Optional[pulumi.Input[int]] = None,
            allowas_in_enable: Optional[pulumi.Input[str]] = None,
            allowas_in_enable6: Optional[pulumi.Input[str]] = None,
            allowas_in_enable_evpn: Optional[pulumi.Input[str]] = None,
            allowas_in_enable_vpnv4: Optional[pulumi.Input[str]] = None,
            allowas_in_enable_vpnv6: Optional[pulumi.Input[str]] = None,
            allowas_in_evpn: Optional[pulumi.Input[int]] = None,
            allowas_in_vpnv4: Optional[pulumi.Input[int]] = None,
            allowas_in_vpnv6: Optional[pulumi.Input[int]] = None,
            as_override: Optional[pulumi.Input[str]] = None,
            as_override6: Optional[pulumi.Input[str]] = None,
            attribute_unchanged: Optional[pulumi.Input[str]] = None,
            attribute_unchanged6: Optional[pulumi.Input[str]] = None,
            attribute_unchanged_vpnv4: Optional[pulumi.Input[str]] = None,
            attribute_unchanged_vpnv6: Optional[pulumi.Input[str]] = None,
            auth_options: Optional[pulumi.Input[str]] = None,
            bfd: Optional[pulumi.Input[str]] = None,
            capability_default_originate: Optional[pulumi.Input[str]] = None,
            capability_default_originate6: Optional[pulumi.Input[str]] = None,
            capability_dynamic: Optional[pulumi.Input[str]] = None,
            capability_graceful_restart: Optional[pulumi.Input[str]] = None,
            capability_graceful_restart6: Optional[pulumi.Input[str]] = None,
            capability_graceful_restart_evpn: Optional[pulumi.Input[str]] = None,
            capability_graceful_restart_vpnv4: Optional[pulumi.Input[str]] = None,
            capability_graceful_restart_vpnv6: Optional[pulumi.Input[str]] = None,
            capability_orf: Optional[pulumi.Input[str]] = None,
            capability_orf6: Optional[pulumi.Input[str]] = None,
            capability_route_refresh: Optional[pulumi.Input[str]] = None,
            conditional_advertise6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NeighborConditionalAdvertise6Args']]]]] = None,
            conditional_advertises: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NeighborConditionalAdvertiseArgs']]]]] = None,
            connect_timer: Optional[pulumi.Input[int]] = None,
            default_originate_routemap: Optional[pulumi.Input[str]] = None,
            default_originate_routemap6: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            distribute_list_in: Optional[pulumi.Input[str]] = None,
            distribute_list_in6: Optional[pulumi.Input[str]] = None,
            distribute_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
            distribute_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
            distribute_list_out: Optional[pulumi.Input[str]] = None,
            distribute_list_out6: Optional[pulumi.Input[str]] = None,
            distribute_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
            distribute_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
            dont_capability_negotiate: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            ebgp_enforce_multihop: Optional[pulumi.Input[str]] = None,
            ebgp_multihop_ttl: Optional[pulumi.Input[int]] = None,
            filter_list_in: Optional[pulumi.Input[str]] = None,
            filter_list_in6: Optional[pulumi.Input[str]] = None,
            filter_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
            filter_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
            filter_list_out: Optional[pulumi.Input[str]] = None,
            filter_list_out6: Optional[pulumi.Input[str]] = None,
            filter_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
            filter_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            holdtime_timer: Optional[pulumi.Input[int]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            keep_alive_timer: Optional[pulumi.Input[int]] = None,
            link_down_failover: Optional[pulumi.Input[str]] = None,
            local_as: Optional[pulumi.Input[int]] = None,
            local_as_no_prepend: Optional[pulumi.Input[str]] = None,
            local_as_replace_as: Optional[pulumi.Input[str]] = None,
            maximum_prefix: Optional[pulumi.Input[int]] = None,
            maximum_prefix6: Optional[pulumi.Input[int]] = None,
            maximum_prefix_evpn: Optional[pulumi.Input[int]] = None,
            maximum_prefix_threshold: Optional[pulumi.Input[int]] = None,
            maximum_prefix_threshold6: Optional[pulumi.Input[int]] = None,
            maximum_prefix_threshold_evpn: Optional[pulumi.Input[int]] = None,
            maximum_prefix_threshold_vpnv4: Optional[pulumi.Input[int]] = None,
            maximum_prefix_threshold_vpnv6: Optional[pulumi.Input[int]] = None,
            maximum_prefix_vpnv4: Optional[pulumi.Input[int]] = None,
            maximum_prefix_vpnv6: Optional[pulumi.Input[int]] = None,
            maximum_prefix_warning_only: Optional[pulumi.Input[str]] = None,
            maximum_prefix_warning_only6: Optional[pulumi.Input[str]] = None,
            maximum_prefix_warning_only_evpn: Optional[pulumi.Input[str]] = None,
            maximum_prefix_warning_only_vpnv4: Optional[pulumi.Input[str]] = None,
            maximum_prefix_warning_only_vpnv6: Optional[pulumi.Input[str]] = None,
            next_hop_self: Optional[pulumi.Input[str]] = None,
            next_hop_self6: Optional[pulumi.Input[str]] = None,
            next_hop_self_rr: Optional[pulumi.Input[str]] = None,
            next_hop_self_rr6: Optional[pulumi.Input[str]] = None,
            next_hop_self_vpnv4: Optional[pulumi.Input[str]] = None,
            next_hop_self_vpnv6: Optional[pulumi.Input[str]] = None,
            override_capability: Optional[pulumi.Input[str]] = None,
            passive: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            prefix_list_in: Optional[pulumi.Input[str]] = None,
            prefix_list_in6: Optional[pulumi.Input[str]] = None,
            prefix_list_in_vpnv4: Optional[pulumi.Input[str]] = None,
            prefix_list_in_vpnv6: Optional[pulumi.Input[str]] = None,
            prefix_list_out: Optional[pulumi.Input[str]] = None,
            prefix_list_out6: Optional[pulumi.Input[str]] = None,
            prefix_list_out_vpnv4: Optional[pulumi.Input[str]] = None,
            prefix_list_out_vpnv6: Optional[pulumi.Input[str]] = None,
            remote_as: Optional[pulumi.Input[int]] = None,
            remove_private_as: Optional[pulumi.Input[str]] = None,
            remove_private_as6: Optional[pulumi.Input[str]] = None,
            remove_private_as_evpn: Optional[pulumi.Input[str]] = None,
            remove_private_as_vpnv4: Optional[pulumi.Input[str]] = None,
            remove_private_as_vpnv6: Optional[pulumi.Input[str]] = None,
            restart_time: Optional[pulumi.Input[int]] = None,
            retain_stale_time: Optional[pulumi.Input[int]] = None,
            route_map_in: Optional[pulumi.Input[str]] = None,
            route_map_in6: Optional[pulumi.Input[str]] = None,
            route_map_in_evpn: Optional[pulumi.Input[str]] = None,
            route_map_in_vpnv4: Optional[pulumi.Input[str]] = None,
            route_map_in_vpnv6: Optional[pulumi.Input[str]] = None,
            route_map_out: Optional[pulumi.Input[str]] = None,
            route_map_out6: Optional[pulumi.Input[str]] = None,
            route_map_out6_preferable: Optional[pulumi.Input[str]] = None,
            route_map_out_evpn: Optional[pulumi.Input[str]] = None,
            route_map_out_preferable: Optional[pulumi.Input[str]] = None,
            route_map_out_vpnv4: Optional[pulumi.Input[str]] = None,
            route_map_out_vpnv4_preferable: Optional[pulumi.Input[str]] = None,
            route_map_out_vpnv6: Optional[pulumi.Input[str]] = None,
            route_map_out_vpnv6_preferable: Optional[pulumi.Input[str]] = None,
            route_reflector_client: Optional[pulumi.Input[str]] = None,
            route_reflector_client6: Optional[pulumi.Input[str]] = None,
            route_reflector_client_evpn: Optional[pulumi.Input[str]] = None,
            route_reflector_client_vpnv4: Optional[pulumi.Input[str]] = None,
            route_reflector_client_vpnv6: Optional[pulumi.Input[str]] = None,
            route_server_client: Optional[pulumi.Input[str]] = None,
            route_server_client6: Optional[pulumi.Input[str]] = None,
            route_server_client_evpn: Optional[pulumi.Input[str]] = None,
            route_server_client_vpnv4: Optional[pulumi.Input[str]] = None,
            route_server_client_vpnv6: Optional[pulumi.Input[str]] = None,
            send_community: Optional[pulumi.Input[str]] = None,
            send_community6: Optional[pulumi.Input[str]] = None,
            send_community_evpn: Optional[pulumi.Input[str]] = None,
            send_community_vpnv4: Optional[pulumi.Input[str]] = None,
            send_community_vpnv6: Optional[pulumi.Input[str]] = None,
            shutdown: Optional[pulumi.Input[str]] = None,
            soft_reconfiguration: Optional[pulumi.Input[str]] = None,
            soft_reconfiguration6: Optional[pulumi.Input[str]] = None,
            soft_reconfiguration_evpn: Optional[pulumi.Input[str]] = None,
            soft_reconfiguration_vpnv4: Optional[pulumi.Input[str]] = None,
            soft_reconfiguration_vpnv6: Optional[pulumi.Input[str]] = None,
            stale_route: Optional[pulumi.Input[str]] = None,
            strict_capability_match: Optional[pulumi.Input[str]] = None,
            unsuppress_map: Optional[pulumi.Input[str]] = None,
            unsuppress_map6: Optional[pulumi.Input[str]] = None,
            update_source: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            weight: Optional[pulumi.Input[int]] = None) -> 'Neighbor':
        """
        Get an existing Neighbor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] activate: Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate6: Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate_evpn: Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate_vpnv4: Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate_vpnv6: Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] additional_path: Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[str] additional_path6: Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[str] additional_path_vpnv4: Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[str] additional_path_vpnv6: Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[int] adv_additional_path: Number of IPv4 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] adv_additional_path6: Number of IPv6 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] adv_additional_path_vpnv4: Number of VPNv4 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] adv_additional_path_vpnv6: Number of VPNv6 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] advertisement_interval: Minimum interval (sec) between sending updates.
        :param pulumi.Input[int] allowas_in: IPv4 The maximum number of occurrence of my AS number allowed.
        :param pulumi.Input[int] allowas_in6: IPv6 The maximum number of occurrence of my AS number allowed.
        :param pulumi.Input[str] allowas_in_enable: Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable6: Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable_evpn: Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable_vpnv4: Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable_vpnv6: Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] allowas_in_evpn: The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        :param pulumi.Input[int] allowas_in_vpnv4: The maximum number of occurrence of my AS number allowed for VPNv4 route.
        :param pulumi.Input[int] allowas_in_vpnv6: The maximum number of occurrence of my AS number allowed for VPNv6 route.
        :param pulumi.Input[str] as_override: Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] as_override6: Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] attribute_unchanged: IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] attribute_unchanged6: IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] attribute_unchanged_vpnv4: List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] attribute_unchanged_vpnv6: List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] auth_options: Key-chain name for TCP authentication options.
        :param pulumi.Input[str] bfd: Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_default_originate: Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_default_originate6: Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_dynamic: Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart: Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart6: Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart_evpn: Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart_vpnv4: Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart_vpnv6: Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_orf: Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param pulumi.Input[str] capability_orf6: Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param pulumi.Input[str] capability_route_refresh: Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NeighborConditionalAdvertise6Args']]]] conditional_advertise6s: IPv6 conditional advertisement. The structure of `conditional_advertise6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NeighborConditionalAdvertiseArgs']]]] conditional_advertises: Conditional advertisement. The structure of `conditional_advertise` block is documented below.
        :param pulumi.Input[int] connect_timer: Interval (sec) for connect timer.
        :param pulumi.Input[str] default_originate_routemap: Route map to specify criteria to originate IPv4 default.
        :param pulumi.Input[str] default_originate_routemap6: Route map to specify criteria to originate IPv6 default.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] distribute_list_in: Filter for IPv4 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_in6: Filter for IPv6 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_in_vpnv4: Filter for VPNv4 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_in_vpnv6: Filter for VPNv6 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_out: Filter for IPv4 updates to this neighbor.
        :param pulumi.Input[str] distribute_list_out6: Filter for IPv6 updates to this neighbor.
        :param pulumi.Input[str] distribute_list_out_vpnv4: Filter for VPNv4 updates to this neighbor.
        :param pulumi.Input[str] distribute_list_out_vpnv6: Filter for VPNv6 updates to this neighbor.
        :param pulumi.Input[str] dont_capability_negotiate: Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ebgp_enforce_multihop: Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ebgp_multihop_ttl: EBGP multihop TTL for this peer.
        :param pulumi.Input[str] filter_list_in: BGP filter for IPv4 inbound routes.
        :param pulumi.Input[str] filter_list_in6: BGP filter for IPv6 inbound routes.
        :param pulumi.Input[str] filter_list_in_vpnv4: BGP filter for VPNv4 inbound routes.
        :param pulumi.Input[str] filter_list_in_vpnv6: BGP filter for VPNv6 inbound routes.
        :param pulumi.Input[str] filter_list_out: BGP filter for IPv4 outbound routes.
        :param pulumi.Input[str] filter_list_out6: BGP filter for IPv6 outbound routes.
        :param pulumi.Input[str] filter_list_out_vpnv4: BGP filter for VPNv4 outbound routes.
        :param pulumi.Input[str] filter_list_out_vpnv6: BGP filter for VPNv6 outbound routes.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] holdtime_timer: Interval (sec) before peer considered dead.
        :param pulumi.Input[str] interface: Interface
        :param pulumi.Input[str] ip: IP/IPv6 address of neighbor.
        :param pulumi.Input[int] keep_alive_timer: Keep alive timer interval (sec).
        :param pulumi.Input[str] link_down_failover: Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] local_as: Local AS number of neighbor.
        :param pulumi.Input[str] local_as_no_prepend: Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_as_replace_as: Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] maximum_prefix: Maximum number of IPv4 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix6: Maximum number of IPv6 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix_evpn: Maximum number of L2VPN EVPN prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix_threshold: Maximum IPv4 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold6: Maximum IPv6 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold_evpn: Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold_vpnv4: Maximum VPNv4 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold_vpnv6: Maximum VPNv6 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_vpnv4: Maximum number of VPNv4 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix_vpnv6: Maximum number of VPNv6 prefixes to accept from this peer.
        :param pulumi.Input[str] maximum_prefix_warning_only: Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only6: Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only_evpn: Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only_vpnv4: Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only_vpnv6: Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self: Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self6: Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_rr: Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_rr6: Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_vpnv4: Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_vpnv6: Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_capability: Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] passive: Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] password: Password used in MD5 authentication.
        :param pulumi.Input[str] prefix_list_in: IPv4 Inbound filter for updates from this neighbor.
        :param pulumi.Input[str] prefix_list_in6: IPv6 Inbound filter for updates from this neighbor.
        :param pulumi.Input[str] prefix_list_in_vpnv4: Inbound filter for VPNv4 updates from this neighbor.
        :param pulumi.Input[str] prefix_list_in_vpnv6: Inbound filter for VPNv6 updates from this neighbor.
        :param pulumi.Input[str] prefix_list_out: IPv4 Outbound filter for updates to this neighbor.
        :param pulumi.Input[str] prefix_list_out6: IPv6 Outbound filter for updates to this neighbor.
        :param pulumi.Input[str] prefix_list_out_vpnv4: Outbound filter for VPNv4 updates to this neighbor.
        :param pulumi.Input[str] prefix_list_out_vpnv6: Outbound filter for VPNv6 updates to this neighbor.
        :param pulumi.Input[int] remote_as: AS number of neighbor.
        :param pulumi.Input[str] remove_private_as: Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as6: Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as_evpn: Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as_vpnv4: Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as_vpnv6: Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] restart_time: Graceful restart delay time (sec, 0 = global default).
        :param pulumi.Input[int] retain_stale_time: Time to retain stale routes.
        :param pulumi.Input[str] route_map_in: IPv4 Inbound route map filter.
        :param pulumi.Input[str] route_map_in6: IPv6 Inbound route map filter.
        :param pulumi.Input[str] route_map_in_evpn: L2VPN EVPN inbound route map filter.
        :param pulumi.Input[str] route_map_in_vpnv4: VPNv4 inbound route map filter.
        :param pulumi.Input[str] route_map_in_vpnv6: VPNv6 inbound route map filter.
        :param pulumi.Input[str] route_map_out: IPv4 Outbound route map filter.
        :param pulumi.Input[str] route_map_out6: IPv6 Outbound route map filter.
        :param pulumi.Input[str] route_map_out6_preferable: IPv6 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_map_out_evpn: L2VPN EVPN outbound route map filter.
        :param pulumi.Input[str] route_map_out_preferable: IPv4 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_map_out_vpnv4: VPNv4 outbound route map filter.
        :param pulumi.Input[str] route_map_out_vpnv4_preferable: VPNv4 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_map_out_vpnv6: VPNv6 outbound route map filter.
        :param pulumi.Input[str] route_map_out_vpnv6_preferable: VPNv6 outbound route map filter if this neighbor is preferred.
        :param pulumi.Input[str] route_reflector_client: Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client6: Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client_evpn: Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client_vpnv4: Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client_vpnv6: Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client: Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client6: Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client_evpn: Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client_vpnv4: Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client_vpnv6: Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] send_community: IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community6: IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community_evpn: Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community_vpnv4: Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community_vpnv6: Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] shutdown: Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration: Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration6: Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration_evpn: Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration_vpnv4: Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration_vpnv6: Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] stale_route: Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_capability_match: Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unsuppress_map: IPv4 Route map to selectively unsuppress suppressed routes.
        :param pulumi.Input[str] unsuppress_map6: IPv6 Route map to selectively unsuppress suppressed routes.
        :param pulumi.Input[str] update_source: Interface to use as source IP/IPv6 address of TCP connections.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] weight: Neighbor weight.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NeighborState.__new__(_NeighborState)

        __props__.__dict__["activate"] = activate
        __props__.__dict__["activate6"] = activate6
        __props__.__dict__["activate_evpn"] = activate_evpn
        __props__.__dict__["activate_vpnv4"] = activate_vpnv4
        __props__.__dict__["activate_vpnv6"] = activate_vpnv6
        __props__.__dict__["additional_path"] = additional_path
        __props__.__dict__["additional_path6"] = additional_path6
        __props__.__dict__["additional_path_vpnv4"] = additional_path_vpnv4
        __props__.__dict__["additional_path_vpnv6"] = additional_path_vpnv6
        __props__.__dict__["adv_additional_path"] = adv_additional_path
        __props__.__dict__["adv_additional_path6"] = adv_additional_path6
        __props__.__dict__["adv_additional_path_vpnv4"] = adv_additional_path_vpnv4
        __props__.__dict__["adv_additional_path_vpnv6"] = adv_additional_path_vpnv6
        __props__.__dict__["advertisement_interval"] = advertisement_interval
        __props__.__dict__["allowas_in"] = allowas_in
        __props__.__dict__["allowas_in6"] = allowas_in6
        __props__.__dict__["allowas_in_enable"] = allowas_in_enable
        __props__.__dict__["allowas_in_enable6"] = allowas_in_enable6
        __props__.__dict__["allowas_in_enable_evpn"] = allowas_in_enable_evpn
        __props__.__dict__["allowas_in_enable_vpnv4"] = allowas_in_enable_vpnv4
        __props__.__dict__["allowas_in_enable_vpnv6"] = allowas_in_enable_vpnv6
        __props__.__dict__["allowas_in_evpn"] = allowas_in_evpn
        __props__.__dict__["allowas_in_vpnv4"] = allowas_in_vpnv4
        __props__.__dict__["allowas_in_vpnv6"] = allowas_in_vpnv6
        __props__.__dict__["as_override"] = as_override
        __props__.__dict__["as_override6"] = as_override6
        __props__.__dict__["attribute_unchanged"] = attribute_unchanged
        __props__.__dict__["attribute_unchanged6"] = attribute_unchanged6
        __props__.__dict__["attribute_unchanged_vpnv4"] = attribute_unchanged_vpnv4
        __props__.__dict__["attribute_unchanged_vpnv6"] = attribute_unchanged_vpnv6
        __props__.__dict__["auth_options"] = auth_options
        __props__.__dict__["bfd"] = bfd
        __props__.__dict__["capability_default_originate"] = capability_default_originate
        __props__.__dict__["capability_default_originate6"] = capability_default_originate6
        __props__.__dict__["capability_dynamic"] = capability_dynamic
        __props__.__dict__["capability_graceful_restart"] = capability_graceful_restart
        __props__.__dict__["capability_graceful_restart6"] = capability_graceful_restart6
        __props__.__dict__["capability_graceful_restart_evpn"] = capability_graceful_restart_evpn
        __props__.__dict__["capability_graceful_restart_vpnv4"] = capability_graceful_restart_vpnv4
        __props__.__dict__["capability_graceful_restart_vpnv6"] = capability_graceful_restart_vpnv6
        __props__.__dict__["capability_orf"] = capability_orf
        __props__.__dict__["capability_orf6"] = capability_orf6
        __props__.__dict__["capability_route_refresh"] = capability_route_refresh
        __props__.__dict__["conditional_advertise6s"] = conditional_advertise6s
        __props__.__dict__["conditional_advertises"] = conditional_advertises
        __props__.__dict__["connect_timer"] = connect_timer
        __props__.__dict__["default_originate_routemap"] = default_originate_routemap
        __props__.__dict__["default_originate_routemap6"] = default_originate_routemap6
        __props__.__dict__["description"] = description
        __props__.__dict__["distribute_list_in"] = distribute_list_in
        __props__.__dict__["distribute_list_in6"] = distribute_list_in6
        __props__.__dict__["distribute_list_in_vpnv4"] = distribute_list_in_vpnv4
        __props__.__dict__["distribute_list_in_vpnv6"] = distribute_list_in_vpnv6
        __props__.__dict__["distribute_list_out"] = distribute_list_out
        __props__.__dict__["distribute_list_out6"] = distribute_list_out6
        __props__.__dict__["distribute_list_out_vpnv4"] = distribute_list_out_vpnv4
        __props__.__dict__["distribute_list_out_vpnv6"] = distribute_list_out_vpnv6
        __props__.__dict__["dont_capability_negotiate"] = dont_capability_negotiate
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["ebgp_enforce_multihop"] = ebgp_enforce_multihop
        __props__.__dict__["ebgp_multihop_ttl"] = ebgp_multihop_ttl
        __props__.__dict__["filter_list_in"] = filter_list_in
        __props__.__dict__["filter_list_in6"] = filter_list_in6
        __props__.__dict__["filter_list_in_vpnv4"] = filter_list_in_vpnv4
        __props__.__dict__["filter_list_in_vpnv6"] = filter_list_in_vpnv6
        __props__.__dict__["filter_list_out"] = filter_list_out
        __props__.__dict__["filter_list_out6"] = filter_list_out6
        __props__.__dict__["filter_list_out_vpnv4"] = filter_list_out_vpnv4
        __props__.__dict__["filter_list_out_vpnv6"] = filter_list_out_vpnv6
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["holdtime_timer"] = holdtime_timer
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ip"] = ip
        __props__.__dict__["keep_alive_timer"] = keep_alive_timer
        __props__.__dict__["link_down_failover"] = link_down_failover
        __props__.__dict__["local_as"] = local_as
        __props__.__dict__["local_as_no_prepend"] = local_as_no_prepend
        __props__.__dict__["local_as_replace_as"] = local_as_replace_as
        __props__.__dict__["maximum_prefix"] = maximum_prefix
        __props__.__dict__["maximum_prefix6"] = maximum_prefix6
        __props__.__dict__["maximum_prefix_evpn"] = maximum_prefix_evpn
        __props__.__dict__["maximum_prefix_threshold"] = maximum_prefix_threshold
        __props__.__dict__["maximum_prefix_threshold6"] = maximum_prefix_threshold6
        __props__.__dict__["maximum_prefix_threshold_evpn"] = maximum_prefix_threshold_evpn
        __props__.__dict__["maximum_prefix_threshold_vpnv4"] = maximum_prefix_threshold_vpnv4
        __props__.__dict__["maximum_prefix_threshold_vpnv6"] = maximum_prefix_threshold_vpnv6
        __props__.__dict__["maximum_prefix_vpnv4"] = maximum_prefix_vpnv4
        __props__.__dict__["maximum_prefix_vpnv6"] = maximum_prefix_vpnv6
        __props__.__dict__["maximum_prefix_warning_only"] = maximum_prefix_warning_only
        __props__.__dict__["maximum_prefix_warning_only6"] = maximum_prefix_warning_only6
        __props__.__dict__["maximum_prefix_warning_only_evpn"] = maximum_prefix_warning_only_evpn
        __props__.__dict__["maximum_prefix_warning_only_vpnv4"] = maximum_prefix_warning_only_vpnv4
        __props__.__dict__["maximum_prefix_warning_only_vpnv6"] = maximum_prefix_warning_only_vpnv6
        __props__.__dict__["next_hop_self"] = next_hop_self
        __props__.__dict__["next_hop_self6"] = next_hop_self6
        __props__.__dict__["next_hop_self_rr"] = next_hop_self_rr
        __props__.__dict__["next_hop_self_rr6"] = next_hop_self_rr6
        __props__.__dict__["next_hop_self_vpnv4"] = next_hop_self_vpnv4
        __props__.__dict__["next_hop_self_vpnv6"] = next_hop_self_vpnv6
        __props__.__dict__["override_capability"] = override_capability
        __props__.__dict__["passive"] = passive
        __props__.__dict__["password"] = password
        __props__.__dict__["prefix_list_in"] = prefix_list_in
        __props__.__dict__["prefix_list_in6"] = prefix_list_in6
        __props__.__dict__["prefix_list_in_vpnv4"] = prefix_list_in_vpnv4
        __props__.__dict__["prefix_list_in_vpnv6"] = prefix_list_in_vpnv6
        __props__.__dict__["prefix_list_out"] = prefix_list_out
        __props__.__dict__["prefix_list_out6"] = prefix_list_out6
        __props__.__dict__["prefix_list_out_vpnv4"] = prefix_list_out_vpnv4
        __props__.__dict__["prefix_list_out_vpnv6"] = prefix_list_out_vpnv6
        __props__.__dict__["remote_as"] = remote_as
        __props__.__dict__["remove_private_as"] = remove_private_as
        __props__.__dict__["remove_private_as6"] = remove_private_as6
        __props__.__dict__["remove_private_as_evpn"] = remove_private_as_evpn
        __props__.__dict__["remove_private_as_vpnv4"] = remove_private_as_vpnv4
        __props__.__dict__["remove_private_as_vpnv6"] = remove_private_as_vpnv6
        __props__.__dict__["restart_time"] = restart_time
        __props__.__dict__["retain_stale_time"] = retain_stale_time
        __props__.__dict__["route_map_in"] = route_map_in
        __props__.__dict__["route_map_in6"] = route_map_in6
        __props__.__dict__["route_map_in_evpn"] = route_map_in_evpn
        __props__.__dict__["route_map_in_vpnv4"] = route_map_in_vpnv4
        __props__.__dict__["route_map_in_vpnv6"] = route_map_in_vpnv6
        __props__.__dict__["route_map_out"] = route_map_out
        __props__.__dict__["route_map_out6"] = route_map_out6
        __props__.__dict__["route_map_out6_preferable"] = route_map_out6_preferable
        __props__.__dict__["route_map_out_evpn"] = route_map_out_evpn
        __props__.__dict__["route_map_out_preferable"] = route_map_out_preferable
        __props__.__dict__["route_map_out_vpnv4"] = route_map_out_vpnv4
        __props__.__dict__["route_map_out_vpnv4_preferable"] = route_map_out_vpnv4_preferable
        __props__.__dict__["route_map_out_vpnv6"] = route_map_out_vpnv6
        __props__.__dict__["route_map_out_vpnv6_preferable"] = route_map_out_vpnv6_preferable
        __props__.__dict__["route_reflector_client"] = route_reflector_client
        __props__.__dict__["route_reflector_client6"] = route_reflector_client6
        __props__.__dict__["route_reflector_client_evpn"] = route_reflector_client_evpn
        __props__.__dict__["route_reflector_client_vpnv4"] = route_reflector_client_vpnv4
        __props__.__dict__["route_reflector_client_vpnv6"] = route_reflector_client_vpnv6
        __props__.__dict__["route_server_client"] = route_server_client
        __props__.__dict__["route_server_client6"] = route_server_client6
        __props__.__dict__["route_server_client_evpn"] = route_server_client_evpn
        __props__.__dict__["route_server_client_vpnv4"] = route_server_client_vpnv4
        __props__.__dict__["route_server_client_vpnv6"] = route_server_client_vpnv6
        __props__.__dict__["send_community"] = send_community
        __props__.__dict__["send_community6"] = send_community6
        __props__.__dict__["send_community_evpn"] = send_community_evpn
        __props__.__dict__["send_community_vpnv4"] = send_community_vpnv4
        __props__.__dict__["send_community_vpnv6"] = send_community_vpnv6
        __props__.__dict__["shutdown"] = shutdown
        __props__.__dict__["soft_reconfiguration"] = soft_reconfiguration
        __props__.__dict__["soft_reconfiguration6"] = soft_reconfiguration6
        __props__.__dict__["soft_reconfiguration_evpn"] = soft_reconfiguration_evpn
        __props__.__dict__["soft_reconfiguration_vpnv4"] = soft_reconfiguration_vpnv4
        __props__.__dict__["soft_reconfiguration_vpnv6"] = soft_reconfiguration_vpnv6
        __props__.__dict__["stale_route"] = stale_route
        __props__.__dict__["strict_capability_match"] = strict_capability_match
        __props__.__dict__["unsuppress_map"] = unsuppress_map
        __props__.__dict__["unsuppress_map6"] = unsuppress_map6
        __props__.__dict__["update_source"] = update_source
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["weight"] = weight
        return Neighbor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def activate(self) -> pulumi.Output[str]:
        """
        Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter
    def activate6(self) -> pulumi.Output[str]:
        """
        Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate6")

    @property
    @pulumi.getter(name="activateEvpn")
    def activate_evpn(self) -> pulumi.Output[str]:
        """
        Enable/disable address family L2VPN EVPN for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_evpn")

    @property
    @pulumi.getter(name="activateVpnv4")
    def activate_vpnv4(self) -> pulumi.Output[str]:
        """
        Enable/disable address family VPNv4 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_vpnv4")

    @property
    @pulumi.getter(name="activateVpnv6")
    def activate_vpnv6(self) -> pulumi.Output[str]:
        """
        Enable/disable address family VPNv6 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate_vpnv6")

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path")

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path6")

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> pulumi.Output[str]:
        """
        Enable/disable VPNv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv4")

    @property
    @pulumi.getter(name="additionalPathVpnv6")
    def additional_path_vpnv6(self) -> pulumi.Output[str]:
        """
        Enable/disable VPNv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv6")

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> pulumi.Output[int]:
        """
        Number of IPv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path")

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> pulumi.Output[int]:
        """
        Number of IPv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path6")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv4")
    def adv_additional_path_vpnv4(self) -> pulumi.Output[int]:
        """
        Number of VPNv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv4")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv6")
    def adv_additional_path_vpnv6(self) -> pulumi.Output[int]:
        """
        Number of VPNv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv6")

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> pulumi.Output[int]:
        """
        Minimum interval (sec) between sending updates.
        """
        return pulumi.get(self, "advertisement_interval")

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> pulumi.Output[int]:
        """
        IPv4 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in")

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> pulumi.Output[int]:
        """
        IPv6 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in6")

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable")

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable6")

    @property
    @pulumi.getter(name="allowasInEnableEvpn")
    def allowas_in_enable_evpn(self) -> pulumi.Output[str]:
        """
        Enable/disable to allow my AS in AS path for L2VPN EVPN route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_evpn")

    @property
    @pulumi.getter(name="allowasInEnableVpnv4")
    def allowas_in_enable_vpnv4(self) -> pulumi.Output[str]:
        """
        Enable/disable to allow my AS in AS path for VPNv4 route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv4")

    @property
    @pulumi.getter(name="allowasInEnableVpnv6")
    def allowas_in_enable_vpnv6(self) -> pulumi.Output[str]:
        """
        Enable/disable use of my AS in AS path for VPNv6 route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv6")

    @property
    @pulumi.getter(name="allowasInEvpn")
    def allowas_in_evpn(self) -> pulumi.Output[int]:
        """
        The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        """
        return pulumi.get(self, "allowas_in_evpn")

    @property
    @pulumi.getter(name="allowasInVpnv4")
    def allowas_in_vpnv4(self) -> pulumi.Output[int]:
        """
        The maximum number of occurrence of my AS number allowed for VPNv4 route.
        """
        return pulumi.get(self, "allowas_in_vpnv4")

    @property
    @pulumi.getter(name="allowasInVpnv6")
    def allowas_in_vpnv6(self) -> pulumi.Output[int]:
        """
        The maximum number of occurrence of my AS number allowed for VPNv6 route.
        """
        return pulumi.get(self, "allowas_in_vpnv6")

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> pulumi.Output[str]:
        """
        Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_override")

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> pulumi.Output[str]:
        """
        Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_override6")

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> pulumi.Output[str]:
        """
        IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged")

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> pulumi.Output[str]:
        """
        IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged6")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv4")
    def attribute_unchanged_vpnv4(self) -> pulumi.Output[str]:
        """
        List of attributes that should be unchanged for VPNv4 route. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv4")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv6")
    def attribute_unchanged_vpnv6(self) -> pulumi.Output[str]:
        """
        List of attributes that should not be changed for VPNv6 route. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv6")

    @property
    @pulumi.getter(name="authOptions")
    def auth_options(self) -> pulumi.Output[str]:
        """
        Key-chain name for TCP authentication options.
        """
        return pulumi.get(self, "auth_options")

    @property
    @pulumi.getter
    def bfd(self) -> pulumi.Output[str]:
        """
        Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> pulumi.Output[str]:
        """
        Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_default_originate")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> pulumi.Output[str]:
        """
        Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_default_originate6")

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> pulumi.Output[str]:
        """
        Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_dynamic")

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> pulumi.Output[str]:
        """
        Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart")

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> pulumi.Output[str]:
        """
        Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart6")

    @property
    @pulumi.getter(name="capabilityGracefulRestartEvpn")
    def capability_graceful_restart_evpn(self) -> pulumi.Output[str]:
        """
        Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_evpn")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv4")
    def capability_graceful_restart_vpnv4(self) -> pulumi.Output[str]:
        """
        Enable/disable advertise VPNv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv4")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv6")
    def capability_graceful_restart_vpnv6(self) -> pulumi.Output[str]:
        """
        Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv6")

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> pulumi.Output[str]:
        """
        Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        """
        return pulumi.get(self, "capability_orf")

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> pulumi.Output[str]:
        """
        Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        """
        return pulumi.get(self, "capability_orf6")

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> pulumi.Output[str]:
        """
        Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_route_refresh")

    @property
    @pulumi.getter(name="conditionalAdvertise6s")
    def conditional_advertise6s(self) -> pulumi.Output[Optional[Sequence['outputs.NeighborConditionalAdvertise6']]]:
        """
        IPv6 conditional advertisement. The structure of `conditional_advertise6` block is documented below.
        """
        return pulumi.get(self, "conditional_advertise6s")

    @property
    @pulumi.getter(name="conditionalAdvertises")
    def conditional_advertises(self) -> pulumi.Output[Optional[Sequence['outputs.NeighborConditionalAdvertise']]]:
        """
        Conditional advertisement. The structure of `conditional_advertise` block is documented below.
        """
        return pulumi.get(self, "conditional_advertises")

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> pulumi.Output[int]:
        """
        Interval (sec) for connect timer.
        """
        return pulumi.get(self, "connect_timer")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> pulumi.Output[str]:
        """
        Route map to specify criteria to originate IPv4 default.
        """
        return pulumi.get(self, "default_originate_routemap")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> pulumi.Output[str]:
        """
        Route map to specify criteria to originate IPv6 default.
        """
        return pulumi.get(self, "default_originate_routemap6")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> pulumi.Output[str]:
        """
        Filter for IPv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in")

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> pulumi.Output[str]:
        """
        Filter for IPv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in6")

    @property
    @pulumi.getter(name="distributeListInVpnv4")
    def distribute_list_in_vpnv4(self) -> pulumi.Output[str]:
        """
        Filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv4")

    @property
    @pulumi.getter(name="distributeListInVpnv6")
    def distribute_list_in_vpnv6(self) -> pulumi.Output[str]:
        """
        Filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv6")

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> pulumi.Output[str]:
        """
        Filter for IPv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out")

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> pulumi.Output[str]:
        """
        Filter for IPv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out6")

    @property
    @pulumi.getter(name="distributeListOutVpnv4")
    def distribute_list_out_vpnv4(self) -> pulumi.Output[str]:
        """
        Filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv4")

    @property
    @pulumi.getter(name="distributeListOutVpnv6")
    def distribute_list_out_vpnv6(self) -> pulumi.Output[str]:
        """
        Filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv6")

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> pulumi.Output[str]:
        """
        Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_capability_negotiate")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> pulumi.Output[str]:
        """
        Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ebgp_enforce_multihop")

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> pulumi.Output[int]:
        """
        EBGP multihop TTL for this peer.
        """
        return pulumi.get(self, "ebgp_multihop_ttl")

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> pulumi.Output[str]:
        """
        BGP filter for IPv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in")

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> pulumi.Output[str]:
        """
        BGP filter for IPv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in6")

    @property
    @pulumi.getter(name="filterListInVpnv4")
    def filter_list_in_vpnv4(self) -> pulumi.Output[str]:
        """
        BGP filter for VPNv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv4")

    @property
    @pulumi.getter(name="filterListInVpnv6")
    def filter_list_in_vpnv6(self) -> pulumi.Output[str]:
        """
        BGP filter for VPNv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv6")

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> pulumi.Output[str]:
        """
        BGP filter for IPv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out")

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> pulumi.Output[str]:
        """
        BGP filter for IPv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out6")

    @property
    @pulumi.getter(name="filterListOutVpnv4")
    def filter_list_out_vpnv4(self) -> pulumi.Output[str]:
        """
        BGP filter for VPNv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv4")

    @property
    @pulumi.getter(name="filterListOutVpnv6")
    def filter_list_out_vpnv6(self) -> pulumi.Output[str]:
        """
        BGP filter for VPNv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv6")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> pulumi.Output[int]:
        """
        Interval (sec) before peer considered dead.
        """
        return pulumi.get(self, "holdtime_timer")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Interface
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        """
        IP/IPv6 address of neighbor.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> pulumi.Output[int]:
        """
        Keep alive timer interval (sec).
        """
        return pulumi.get(self, "keep_alive_timer")

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> pulumi.Output[str]:
        """
        Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_down_failover")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> pulumi.Output[int]:
        """
        Local AS number of neighbor.
        """
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> pulumi.Output[str]:
        """
        Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_as_no_prepend")

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> pulumi.Output[str]:
        """
        Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_as_replace_as")

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> pulumi.Output[int]:
        """
        Maximum number of IPv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix")

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> pulumi.Output[int]:
        """
        Maximum number of IPv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix6")

    @property
    @pulumi.getter(name="maximumPrefixEvpn")
    def maximum_prefix_evpn(self) -> pulumi.Output[int]:
        """
        Maximum number of L2VPN EVPN prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> pulumi.Output[int]:
        """
        Maximum IPv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold")

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> pulumi.Output[int]:
        """
        Maximum IPv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold6")

    @property
    @pulumi.getter(name="maximumPrefixThresholdEvpn")
    def maximum_prefix_threshold_evpn(self) -> pulumi.Output[int]:
        """
        Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv4")
    def maximum_prefix_threshold_vpnv4(self) -> pulumi.Output[int]:
        """
        Maximum VPNv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv6")
    def maximum_prefix_threshold_vpnv6(self) -> pulumi.Output[int]:
        """
        Maximum VPNv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv6")

    @property
    @pulumi.getter(name="maximumPrefixVpnv4")
    def maximum_prefix_vpnv4(self) -> pulumi.Output[int]:
        """
        Maximum number of VPNv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixVpnv6")
    def maximum_prefix_vpnv6(self) -> pulumi.Output[int]:
        """
        Maximum number of VPNv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyEvpn")
    def maximum_prefix_warning_only_evpn(self) -> pulumi.Output[str]:
        """
        Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_evpn")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv4")
    def maximum_prefix_warning_only_vpnv4(self) -> pulumi.Output[str]:
        """
        Enable/disable only giving warning message when limit is exceeded for VPNv4 routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv6")
    def maximum_prefix_warning_only_vpnv6(self) -> pulumi.Output[str]:
        """
        Enable/disable warning message when limit is exceeded for VPNv6 routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv6")

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self")

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self6")

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> pulumi.Output[str]:
        """
        Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_rr")

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> pulumi.Output[str]:
        """
        Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_rr6")

    @property
    @pulumi.getter(name="nextHopSelfVpnv4")
    def next_hop_self_vpnv4(self) -> pulumi.Output[str]:
        """
        Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_vpnv4")

    @property
    @pulumi.getter(name="nextHopSelfVpnv6")
    def next_hop_self_vpnv6(self) -> pulumi.Output[str]:
        """
        Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_vpnv6")

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> pulumi.Output[str]:
        """
        Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_capability")

    @property
    @pulumi.getter
    def passive(self) -> pulumi.Output[str]:
        """
        Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password used in MD5 authentication.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> pulumi.Output[str]:
        """
        IPv4 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in")

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> pulumi.Output[str]:
        """
        IPv6 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in6")

    @property
    @pulumi.getter(name="prefixListInVpnv4")
    def prefix_list_in_vpnv4(self) -> pulumi.Output[str]:
        """
        Inbound filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv4")

    @property
    @pulumi.getter(name="prefixListInVpnv6")
    def prefix_list_in_vpnv6(self) -> pulumi.Output[str]:
        """
        Inbound filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv6")

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> pulumi.Output[str]:
        """
        IPv4 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out")

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> pulumi.Output[str]:
        """
        IPv6 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out6")

    @property
    @pulumi.getter(name="prefixListOutVpnv4")
    def prefix_list_out_vpnv4(self) -> pulumi.Output[str]:
        """
        Outbound filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv4")

    @property
    @pulumi.getter(name="prefixListOutVpnv6")
    def prefix_list_out_vpnv6(self) -> pulumi.Output[str]:
        """
        Outbound filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv6")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> pulumi.Output[int]:
        """
        AS number of neighbor.
        """
        return pulumi.get(self, "remote_as")

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> pulumi.Output[str]:
        """
        Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as")

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> pulumi.Output[str]:
        """
        Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as6")

    @property
    @pulumi.getter(name="removePrivateAsEvpn")
    def remove_private_as_evpn(self) -> pulumi.Output[str]:
        """
        Enable/disable removing private AS number from L2VPN EVPN outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_evpn")

    @property
    @pulumi.getter(name="removePrivateAsVpnv4")
    def remove_private_as_vpnv4(self) -> pulumi.Output[str]:
        """
        Enable/disable remove private AS number from VPNv4 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_vpnv4")

    @property
    @pulumi.getter(name="removePrivateAsVpnv6")
    def remove_private_as_vpnv6(self) -> pulumi.Output[str]:
        """
        Enable/disable to remove private AS number from VPNv6 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as_vpnv6")

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> pulumi.Output[int]:
        """
        Graceful restart delay time (sec, 0 = global default).
        """
        return pulumi.get(self, "restart_time")

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> pulumi.Output[int]:
        """
        Time to retain stale routes.
        """
        return pulumi.get(self, "retain_stale_time")

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> pulumi.Output[str]:
        """
        IPv4 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in")

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> pulumi.Output[str]:
        """
        IPv6 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in6")

    @property
    @pulumi.getter(name="routeMapInEvpn")
    def route_map_in_evpn(self) -> pulumi.Output[str]:
        """
        L2VPN EVPN inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_evpn")

    @property
    @pulumi.getter(name="routeMapInVpnv4")
    def route_map_in_vpnv4(self) -> pulumi.Output[str]:
        """
        VPNv4 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv4")

    @property
    @pulumi.getter(name="routeMapInVpnv6")
    def route_map_in_vpnv6(self) -> pulumi.Output[str]:
        """
        VPNv6 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv6")

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> pulumi.Output[str]:
        """
        IPv4 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out")

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> pulumi.Output[str]:
        """
        IPv6 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out6")

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> pulumi.Output[str]:
        """
        IPv6 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out6_preferable")

    @property
    @pulumi.getter(name="routeMapOutEvpn")
    def route_map_out_evpn(self) -> pulumi.Output[str]:
        """
        L2VPN EVPN outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_evpn")

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> pulumi.Output[str]:
        """
        IPv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv4")
    def route_map_out_vpnv4(self) -> pulumi.Output[str]:
        """
        VPNv4 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv4")

    @property
    @pulumi.getter(name="routeMapOutVpnv4Preferable")
    def route_map_out_vpnv4_preferable(self) -> pulumi.Output[str]:
        """
        VPNv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv4_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv6")
    def route_map_out_vpnv6(self) -> pulumi.Output[str]:
        """
        VPNv6 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv6")

    @property
    @pulumi.getter(name="routeMapOutVpnv6Preferable")
    def route_map_out_vpnv6_preferable(self) -> pulumi.Output[str]:
        """
        VPNv6 outbound route map filter if this neighbor is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv6_preferable")

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client")

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client6")

    @property
    @pulumi.getter(name="routeReflectorClientEvpn")
    def route_reflector_client_evpn(self) -> pulumi.Output[str]:
        """
        Enable/disable L2VPN EVPN AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_evpn")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv4")
    def route_reflector_client_vpnv4(self) -> pulumi.Output[str]:
        """
        Enable/disable VPNv4 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_vpnv4")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv6")
    def route_reflector_client_vpnv6(self) -> pulumi.Output[str]:
        """
        Enable/disable VPNv6 AS route reflector client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client_vpnv6")

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client")

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client6")

    @property
    @pulumi.getter(name="routeServerClientEvpn")
    def route_server_client_evpn(self) -> pulumi.Output[str]:
        """
        Enable/disable L2VPN EVPN AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_evpn")

    @property
    @pulumi.getter(name="routeServerClientVpnv4")
    def route_server_client_vpnv4(self) -> pulumi.Output[str]:
        """
        Enable/disable VPNv4 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_vpnv4")

    @property
    @pulumi.getter(name="routeServerClientVpnv6")
    def route_server_client_vpnv6(self) -> pulumi.Output[str]:
        """
        Enable/disable VPNv6 AS route server client for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client_vpnv6")

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> pulumi.Output[str]:
        """
        IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community")

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> pulumi.Output[str]:
        """
        IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community6")

    @property
    @pulumi.getter(name="sendCommunityEvpn")
    def send_community_evpn(self) -> pulumi.Output[str]:
        """
        Enable/disable sending community attribute to neighbor for L2VPN EVPN address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_evpn")

    @property
    @pulumi.getter(name="sendCommunityVpnv4")
    def send_community_vpnv4(self) -> pulumi.Output[str]:
        """
        Send community attribute to neighbor for VPNv4 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_vpnv4")

    @property
    @pulumi.getter(name="sendCommunityVpnv6")
    def send_community_vpnv6(self) -> pulumi.Output[str]:
        """
        Enable/disable sending community attribute to this neighbor for VPNv6 address family. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community_vpnv6")

    @property
    @pulumi.getter
    def shutdown(self) -> pulumi.Output[str]:
        """
        Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> pulumi.Output[str]:
        """
        Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration")

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> pulumi.Output[str]:
        """
        Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration6")

    @property
    @pulumi.getter(name="softReconfigurationEvpn")
    def soft_reconfiguration_evpn(self) -> pulumi.Output[str]:
        """
        Enable/disable L2VPN EVPN inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_evpn")

    @property
    @pulumi.getter(name="softReconfigurationVpnv4")
    def soft_reconfiguration_vpnv4(self) -> pulumi.Output[str]:
        """
        Enable/disable allow VPNv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv4")

    @property
    @pulumi.getter(name="softReconfigurationVpnv6")
    def soft_reconfiguration_vpnv6(self) -> pulumi.Output[str]:
        """
        Enable/disable VPNv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv6")

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> pulumi.Output[str]:
        """
        Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "stale_route")

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> pulumi.Output[str]:
        """
        Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_capability_match")

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> pulumi.Output[str]:
        """
        IPv4 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map")

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> pulumi.Output[str]:
        """
        IPv6 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map6")

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> pulumi.Output[str]:
        """
        Interface to use as source IP/IPv6 address of TCP connections.
        """
        return pulumi.get(self, "update_source")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Output[int]:
        """
        Neighbor weight.
        """
        return pulumi.get(self, "weight")

