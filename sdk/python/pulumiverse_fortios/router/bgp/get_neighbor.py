# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetNeighborResult',
    'AwaitableGetNeighborResult',
    'get_neighbor',
    'get_neighbor_output',
]

@pulumi.output_type
class GetNeighborResult:
    """
    A collection of values returned by getNeighbor.
    """
    def __init__(__self__, activate=None, activate6=None, activate_evpn=None, activate_vpnv4=None, activate_vpnv6=None, additional_path=None, additional_path6=None, additional_path_vpnv4=None, additional_path_vpnv6=None, adv_additional_path=None, adv_additional_path6=None, adv_additional_path_vpnv4=None, adv_additional_path_vpnv6=None, advertisement_interval=None, allowas_in=None, allowas_in6=None, allowas_in_enable=None, allowas_in_enable6=None, allowas_in_enable_evpn=None, allowas_in_enable_vpnv4=None, allowas_in_enable_vpnv6=None, allowas_in_evpn=None, allowas_in_vpnv4=None, allowas_in_vpnv6=None, as_override=None, as_override6=None, attribute_unchanged=None, attribute_unchanged6=None, attribute_unchanged_vpnv4=None, attribute_unchanged_vpnv6=None, auth_options=None, bfd=None, capability_default_originate=None, capability_default_originate6=None, capability_dynamic=None, capability_graceful_restart=None, capability_graceful_restart6=None, capability_graceful_restart_evpn=None, capability_graceful_restart_vpnv4=None, capability_graceful_restart_vpnv6=None, capability_orf=None, capability_orf6=None, capability_route_refresh=None, conditional_advertise6s=None, conditional_advertises=None, connect_timer=None, default_originate_routemap=None, default_originate_routemap6=None, description=None, distribute_list_in=None, distribute_list_in6=None, distribute_list_in_vpnv4=None, distribute_list_in_vpnv6=None, distribute_list_out=None, distribute_list_out6=None, distribute_list_out_vpnv4=None, distribute_list_out_vpnv6=None, dont_capability_negotiate=None, ebgp_enforce_multihop=None, ebgp_multihop_ttl=None, filter_list_in=None, filter_list_in6=None, filter_list_in_vpnv4=None, filter_list_in_vpnv6=None, filter_list_out=None, filter_list_out6=None, filter_list_out_vpnv4=None, filter_list_out_vpnv6=None, holdtime_timer=None, id=None, interface=None, ip=None, keep_alive_timer=None, link_down_failover=None, local_as=None, local_as_no_prepend=None, local_as_replace_as=None, maximum_prefix=None, maximum_prefix6=None, maximum_prefix_evpn=None, maximum_prefix_threshold=None, maximum_prefix_threshold6=None, maximum_prefix_threshold_evpn=None, maximum_prefix_threshold_vpnv4=None, maximum_prefix_threshold_vpnv6=None, maximum_prefix_vpnv4=None, maximum_prefix_vpnv6=None, maximum_prefix_warning_only=None, maximum_prefix_warning_only6=None, maximum_prefix_warning_only_evpn=None, maximum_prefix_warning_only_vpnv4=None, maximum_prefix_warning_only_vpnv6=None, next_hop_self=None, next_hop_self6=None, next_hop_self_rr=None, next_hop_self_rr6=None, next_hop_self_vpnv4=None, next_hop_self_vpnv6=None, override_capability=None, passive=None, password=None, prefix_list_in=None, prefix_list_in6=None, prefix_list_in_vpnv4=None, prefix_list_in_vpnv6=None, prefix_list_out=None, prefix_list_out6=None, prefix_list_out_vpnv4=None, prefix_list_out_vpnv6=None, remote_as=None, remove_private_as=None, remove_private_as6=None, remove_private_as_evpn=None, remove_private_as_vpnv4=None, remove_private_as_vpnv6=None, restart_time=None, retain_stale_time=None, route_map_in=None, route_map_in6=None, route_map_in_evpn=None, route_map_in_vpnv4=None, route_map_in_vpnv6=None, route_map_out=None, route_map_out6=None, route_map_out6_preferable=None, route_map_out_evpn=None, route_map_out_preferable=None, route_map_out_vpnv4=None, route_map_out_vpnv4_preferable=None, route_map_out_vpnv6=None, route_map_out_vpnv6_preferable=None, route_reflector_client=None, route_reflector_client6=None, route_reflector_client_evpn=None, route_reflector_client_vpnv4=None, route_reflector_client_vpnv6=None, route_server_client=None, route_server_client6=None, route_server_client_evpn=None, route_server_client_vpnv4=None, route_server_client_vpnv6=None, send_community=None, send_community6=None, send_community_evpn=None, send_community_vpnv4=None, send_community_vpnv6=None, shutdown=None, soft_reconfiguration=None, soft_reconfiguration6=None, soft_reconfiguration_evpn=None, soft_reconfiguration_vpnv4=None, soft_reconfiguration_vpnv6=None, stale_route=None, strict_capability_match=None, unsuppress_map=None, unsuppress_map6=None, update_source=None, vdomparam=None, weight=None):
        if activate and not isinstance(activate, str):
            raise TypeError("Expected argument 'activate' to be a str")
        pulumi.set(__self__, "activate", activate)
        if activate6 and not isinstance(activate6, str):
            raise TypeError("Expected argument 'activate6' to be a str")
        pulumi.set(__self__, "activate6", activate6)
        if activate_evpn and not isinstance(activate_evpn, str):
            raise TypeError("Expected argument 'activate_evpn' to be a str")
        pulumi.set(__self__, "activate_evpn", activate_evpn)
        if activate_vpnv4 and not isinstance(activate_vpnv4, str):
            raise TypeError("Expected argument 'activate_vpnv4' to be a str")
        pulumi.set(__self__, "activate_vpnv4", activate_vpnv4)
        if activate_vpnv6 and not isinstance(activate_vpnv6, str):
            raise TypeError("Expected argument 'activate_vpnv6' to be a str")
        pulumi.set(__self__, "activate_vpnv6", activate_vpnv6)
        if additional_path and not isinstance(additional_path, str):
            raise TypeError("Expected argument 'additional_path' to be a str")
        pulumi.set(__self__, "additional_path", additional_path)
        if additional_path6 and not isinstance(additional_path6, str):
            raise TypeError("Expected argument 'additional_path6' to be a str")
        pulumi.set(__self__, "additional_path6", additional_path6)
        if additional_path_vpnv4 and not isinstance(additional_path_vpnv4, str):
            raise TypeError("Expected argument 'additional_path_vpnv4' to be a str")
        pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        if additional_path_vpnv6 and not isinstance(additional_path_vpnv6, str):
            raise TypeError("Expected argument 'additional_path_vpnv6' to be a str")
        pulumi.set(__self__, "additional_path_vpnv6", additional_path_vpnv6)
        if adv_additional_path and not isinstance(adv_additional_path, int):
            raise TypeError("Expected argument 'adv_additional_path' to be a int")
        pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        if adv_additional_path6 and not isinstance(adv_additional_path6, int):
            raise TypeError("Expected argument 'adv_additional_path6' to be a int")
        pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        if adv_additional_path_vpnv4 and not isinstance(adv_additional_path_vpnv4, int):
            raise TypeError("Expected argument 'adv_additional_path_vpnv4' to be a int")
        pulumi.set(__self__, "adv_additional_path_vpnv4", adv_additional_path_vpnv4)
        if adv_additional_path_vpnv6 and not isinstance(adv_additional_path_vpnv6, int):
            raise TypeError("Expected argument 'adv_additional_path_vpnv6' to be a int")
        pulumi.set(__self__, "adv_additional_path_vpnv6", adv_additional_path_vpnv6)
        if advertisement_interval and not isinstance(advertisement_interval, int):
            raise TypeError("Expected argument 'advertisement_interval' to be a int")
        pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        if allowas_in and not isinstance(allowas_in, int):
            raise TypeError("Expected argument 'allowas_in' to be a int")
        pulumi.set(__self__, "allowas_in", allowas_in)
        if allowas_in6 and not isinstance(allowas_in6, int):
            raise TypeError("Expected argument 'allowas_in6' to be a int")
        pulumi.set(__self__, "allowas_in6", allowas_in6)
        if allowas_in_enable and not isinstance(allowas_in_enable, str):
            raise TypeError("Expected argument 'allowas_in_enable' to be a str")
        pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        if allowas_in_enable6 and not isinstance(allowas_in_enable6, str):
            raise TypeError("Expected argument 'allowas_in_enable6' to be a str")
        pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        if allowas_in_enable_evpn and not isinstance(allowas_in_enable_evpn, str):
            raise TypeError("Expected argument 'allowas_in_enable_evpn' to be a str")
        pulumi.set(__self__, "allowas_in_enable_evpn", allowas_in_enable_evpn)
        if allowas_in_enable_vpnv4 and not isinstance(allowas_in_enable_vpnv4, str):
            raise TypeError("Expected argument 'allowas_in_enable_vpnv4' to be a str")
        pulumi.set(__self__, "allowas_in_enable_vpnv4", allowas_in_enable_vpnv4)
        if allowas_in_enable_vpnv6 and not isinstance(allowas_in_enable_vpnv6, str):
            raise TypeError("Expected argument 'allowas_in_enable_vpnv6' to be a str")
        pulumi.set(__self__, "allowas_in_enable_vpnv6", allowas_in_enable_vpnv6)
        if allowas_in_evpn and not isinstance(allowas_in_evpn, int):
            raise TypeError("Expected argument 'allowas_in_evpn' to be a int")
        pulumi.set(__self__, "allowas_in_evpn", allowas_in_evpn)
        if allowas_in_vpnv4 and not isinstance(allowas_in_vpnv4, int):
            raise TypeError("Expected argument 'allowas_in_vpnv4' to be a int")
        pulumi.set(__self__, "allowas_in_vpnv4", allowas_in_vpnv4)
        if allowas_in_vpnv6 and not isinstance(allowas_in_vpnv6, int):
            raise TypeError("Expected argument 'allowas_in_vpnv6' to be a int")
        pulumi.set(__self__, "allowas_in_vpnv6", allowas_in_vpnv6)
        if as_override and not isinstance(as_override, str):
            raise TypeError("Expected argument 'as_override' to be a str")
        pulumi.set(__self__, "as_override", as_override)
        if as_override6 and not isinstance(as_override6, str):
            raise TypeError("Expected argument 'as_override6' to be a str")
        pulumi.set(__self__, "as_override6", as_override6)
        if attribute_unchanged and not isinstance(attribute_unchanged, str):
            raise TypeError("Expected argument 'attribute_unchanged' to be a str")
        pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        if attribute_unchanged6 and not isinstance(attribute_unchanged6, str):
            raise TypeError("Expected argument 'attribute_unchanged6' to be a str")
        pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        if attribute_unchanged_vpnv4 and not isinstance(attribute_unchanged_vpnv4, str):
            raise TypeError("Expected argument 'attribute_unchanged_vpnv4' to be a str")
        pulumi.set(__self__, "attribute_unchanged_vpnv4", attribute_unchanged_vpnv4)
        if attribute_unchanged_vpnv6 and not isinstance(attribute_unchanged_vpnv6, str):
            raise TypeError("Expected argument 'attribute_unchanged_vpnv6' to be a str")
        pulumi.set(__self__, "attribute_unchanged_vpnv6", attribute_unchanged_vpnv6)
        if auth_options and not isinstance(auth_options, str):
            raise TypeError("Expected argument 'auth_options' to be a str")
        pulumi.set(__self__, "auth_options", auth_options)
        if bfd and not isinstance(bfd, str):
            raise TypeError("Expected argument 'bfd' to be a str")
        pulumi.set(__self__, "bfd", bfd)
        if capability_default_originate and not isinstance(capability_default_originate, str):
            raise TypeError("Expected argument 'capability_default_originate' to be a str")
        pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        if capability_default_originate6 and not isinstance(capability_default_originate6, str):
            raise TypeError("Expected argument 'capability_default_originate6' to be a str")
        pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        if capability_dynamic and not isinstance(capability_dynamic, str):
            raise TypeError("Expected argument 'capability_dynamic' to be a str")
        pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        if capability_graceful_restart and not isinstance(capability_graceful_restart, str):
            raise TypeError("Expected argument 'capability_graceful_restart' to be a str")
        pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        if capability_graceful_restart6 and not isinstance(capability_graceful_restart6, str):
            raise TypeError("Expected argument 'capability_graceful_restart6' to be a str")
        pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        if capability_graceful_restart_evpn and not isinstance(capability_graceful_restart_evpn, str):
            raise TypeError("Expected argument 'capability_graceful_restart_evpn' to be a str")
        pulumi.set(__self__, "capability_graceful_restart_evpn", capability_graceful_restart_evpn)
        if capability_graceful_restart_vpnv4 and not isinstance(capability_graceful_restart_vpnv4, str):
            raise TypeError("Expected argument 'capability_graceful_restart_vpnv4' to be a str")
        pulumi.set(__self__, "capability_graceful_restart_vpnv4", capability_graceful_restart_vpnv4)
        if capability_graceful_restart_vpnv6 and not isinstance(capability_graceful_restart_vpnv6, str):
            raise TypeError("Expected argument 'capability_graceful_restart_vpnv6' to be a str")
        pulumi.set(__self__, "capability_graceful_restart_vpnv6", capability_graceful_restart_vpnv6)
        if capability_orf and not isinstance(capability_orf, str):
            raise TypeError("Expected argument 'capability_orf' to be a str")
        pulumi.set(__self__, "capability_orf", capability_orf)
        if capability_orf6 and not isinstance(capability_orf6, str):
            raise TypeError("Expected argument 'capability_orf6' to be a str")
        pulumi.set(__self__, "capability_orf6", capability_orf6)
        if capability_route_refresh and not isinstance(capability_route_refresh, str):
            raise TypeError("Expected argument 'capability_route_refresh' to be a str")
        pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        if conditional_advertise6s and not isinstance(conditional_advertise6s, list):
            raise TypeError("Expected argument 'conditional_advertise6s' to be a list")
        pulumi.set(__self__, "conditional_advertise6s", conditional_advertise6s)
        if conditional_advertises and not isinstance(conditional_advertises, list):
            raise TypeError("Expected argument 'conditional_advertises' to be a list")
        pulumi.set(__self__, "conditional_advertises", conditional_advertises)
        if connect_timer and not isinstance(connect_timer, int):
            raise TypeError("Expected argument 'connect_timer' to be a int")
        pulumi.set(__self__, "connect_timer", connect_timer)
        if default_originate_routemap and not isinstance(default_originate_routemap, str):
            raise TypeError("Expected argument 'default_originate_routemap' to be a str")
        pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        if default_originate_routemap6 and not isinstance(default_originate_routemap6, str):
            raise TypeError("Expected argument 'default_originate_routemap6' to be a str")
        pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if distribute_list_in and not isinstance(distribute_list_in, str):
            raise TypeError("Expected argument 'distribute_list_in' to be a str")
        pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        if distribute_list_in6 and not isinstance(distribute_list_in6, str):
            raise TypeError("Expected argument 'distribute_list_in6' to be a str")
        pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        if distribute_list_in_vpnv4 and not isinstance(distribute_list_in_vpnv4, str):
            raise TypeError("Expected argument 'distribute_list_in_vpnv4' to be a str")
        pulumi.set(__self__, "distribute_list_in_vpnv4", distribute_list_in_vpnv4)
        if distribute_list_in_vpnv6 and not isinstance(distribute_list_in_vpnv6, str):
            raise TypeError("Expected argument 'distribute_list_in_vpnv6' to be a str")
        pulumi.set(__self__, "distribute_list_in_vpnv6", distribute_list_in_vpnv6)
        if distribute_list_out and not isinstance(distribute_list_out, str):
            raise TypeError("Expected argument 'distribute_list_out' to be a str")
        pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        if distribute_list_out6 and not isinstance(distribute_list_out6, str):
            raise TypeError("Expected argument 'distribute_list_out6' to be a str")
        pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        if distribute_list_out_vpnv4 and not isinstance(distribute_list_out_vpnv4, str):
            raise TypeError("Expected argument 'distribute_list_out_vpnv4' to be a str")
        pulumi.set(__self__, "distribute_list_out_vpnv4", distribute_list_out_vpnv4)
        if distribute_list_out_vpnv6 and not isinstance(distribute_list_out_vpnv6, str):
            raise TypeError("Expected argument 'distribute_list_out_vpnv6' to be a str")
        pulumi.set(__self__, "distribute_list_out_vpnv6", distribute_list_out_vpnv6)
        if dont_capability_negotiate and not isinstance(dont_capability_negotiate, str):
            raise TypeError("Expected argument 'dont_capability_negotiate' to be a str")
        pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        if ebgp_enforce_multihop and not isinstance(ebgp_enforce_multihop, str):
            raise TypeError("Expected argument 'ebgp_enforce_multihop' to be a str")
        pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        if ebgp_multihop_ttl and not isinstance(ebgp_multihop_ttl, int):
            raise TypeError("Expected argument 'ebgp_multihop_ttl' to be a int")
        pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        if filter_list_in and not isinstance(filter_list_in, str):
            raise TypeError("Expected argument 'filter_list_in' to be a str")
        pulumi.set(__self__, "filter_list_in", filter_list_in)
        if filter_list_in6 and not isinstance(filter_list_in6, str):
            raise TypeError("Expected argument 'filter_list_in6' to be a str")
        pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        if filter_list_in_vpnv4 and not isinstance(filter_list_in_vpnv4, str):
            raise TypeError("Expected argument 'filter_list_in_vpnv4' to be a str")
        pulumi.set(__self__, "filter_list_in_vpnv4", filter_list_in_vpnv4)
        if filter_list_in_vpnv6 and not isinstance(filter_list_in_vpnv6, str):
            raise TypeError("Expected argument 'filter_list_in_vpnv6' to be a str")
        pulumi.set(__self__, "filter_list_in_vpnv6", filter_list_in_vpnv6)
        if filter_list_out and not isinstance(filter_list_out, str):
            raise TypeError("Expected argument 'filter_list_out' to be a str")
        pulumi.set(__self__, "filter_list_out", filter_list_out)
        if filter_list_out6 and not isinstance(filter_list_out6, str):
            raise TypeError("Expected argument 'filter_list_out6' to be a str")
        pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        if filter_list_out_vpnv4 and not isinstance(filter_list_out_vpnv4, str):
            raise TypeError("Expected argument 'filter_list_out_vpnv4' to be a str")
        pulumi.set(__self__, "filter_list_out_vpnv4", filter_list_out_vpnv4)
        if filter_list_out_vpnv6 and not isinstance(filter_list_out_vpnv6, str):
            raise TypeError("Expected argument 'filter_list_out_vpnv6' to be a str")
        pulumi.set(__self__, "filter_list_out_vpnv6", filter_list_out_vpnv6)
        if holdtime_timer and not isinstance(holdtime_timer, int):
            raise TypeError("Expected argument 'holdtime_timer' to be a int")
        pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface and not isinstance(interface, str):
            raise TypeError("Expected argument 'interface' to be a str")
        pulumi.set(__self__, "interface", interface)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if keep_alive_timer and not isinstance(keep_alive_timer, int):
            raise TypeError("Expected argument 'keep_alive_timer' to be a int")
        pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        if link_down_failover and not isinstance(link_down_failover, str):
            raise TypeError("Expected argument 'link_down_failover' to be a str")
        pulumi.set(__self__, "link_down_failover", link_down_failover)
        if local_as and not isinstance(local_as, int):
            raise TypeError("Expected argument 'local_as' to be a int")
        pulumi.set(__self__, "local_as", local_as)
        if local_as_no_prepend and not isinstance(local_as_no_prepend, str):
            raise TypeError("Expected argument 'local_as_no_prepend' to be a str")
        pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        if local_as_replace_as and not isinstance(local_as_replace_as, str):
            raise TypeError("Expected argument 'local_as_replace_as' to be a str")
        pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        if maximum_prefix and not isinstance(maximum_prefix, int):
            raise TypeError("Expected argument 'maximum_prefix' to be a int")
        pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        if maximum_prefix6 and not isinstance(maximum_prefix6, int):
            raise TypeError("Expected argument 'maximum_prefix6' to be a int")
        pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        if maximum_prefix_evpn and not isinstance(maximum_prefix_evpn, int):
            raise TypeError("Expected argument 'maximum_prefix_evpn' to be a int")
        pulumi.set(__self__, "maximum_prefix_evpn", maximum_prefix_evpn)
        if maximum_prefix_threshold and not isinstance(maximum_prefix_threshold, int):
            raise TypeError("Expected argument 'maximum_prefix_threshold' to be a int")
        pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        if maximum_prefix_threshold6 and not isinstance(maximum_prefix_threshold6, int):
            raise TypeError("Expected argument 'maximum_prefix_threshold6' to be a int")
        pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        if maximum_prefix_threshold_evpn and not isinstance(maximum_prefix_threshold_evpn, int):
            raise TypeError("Expected argument 'maximum_prefix_threshold_evpn' to be a int")
        pulumi.set(__self__, "maximum_prefix_threshold_evpn", maximum_prefix_threshold_evpn)
        if maximum_prefix_threshold_vpnv4 and not isinstance(maximum_prefix_threshold_vpnv4, int):
            raise TypeError("Expected argument 'maximum_prefix_threshold_vpnv4' to be a int")
        pulumi.set(__self__, "maximum_prefix_threshold_vpnv4", maximum_prefix_threshold_vpnv4)
        if maximum_prefix_threshold_vpnv6 and not isinstance(maximum_prefix_threshold_vpnv6, int):
            raise TypeError("Expected argument 'maximum_prefix_threshold_vpnv6' to be a int")
        pulumi.set(__self__, "maximum_prefix_threshold_vpnv6", maximum_prefix_threshold_vpnv6)
        if maximum_prefix_vpnv4 and not isinstance(maximum_prefix_vpnv4, int):
            raise TypeError("Expected argument 'maximum_prefix_vpnv4' to be a int")
        pulumi.set(__self__, "maximum_prefix_vpnv4", maximum_prefix_vpnv4)
        if maximum_prefix_vpnv6 and not isinstance(maximum_prefix_vpnv6, int):
            raise TypeError("Expected argument 'maximum_prefix_vpnv6' to be a int")
        pulumi.set(__self__, "maximum_prefix_vpnv6", maximum_prefix_vpnv6)
        if maximum_prefix_warning_only and not isinstance(maximum_prefix_warning_only, str):
            raise TypeError("Expected argument 'maximum_prefix_warning_only' to be a str")
        pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        if maximum_prefix_warning_only6 and not isinstance(maximum_prefix_warning_only6, str):
            raise TypeError("Expected argument 'maximum_prefix_warning_only6' to be a str")
        pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        if maximum_prefix_warning_only_evpn and not isinstance(maximum_prefix_warning_only_evpn, str):
            raise TypeError("Expected argument 'maximum_prefix_warning_only_evpn' to be a str")
        pulumi.set(__self__, "maximum_prefix_warning_only_evpn", maximum_prefix_warning_only_evpn)
        if maximum_prefix_warning_only_vpnv4 and not isinstance(maximum_prefix_warning_only_vpnv4, str):
            raise TypeError("Expected argument 'maximum_prefix_warning_only_vpnv4' to be a str")
        pulumi.set(__self__, "maximum_prefix_warning_only_vpnv4", maximum_prefix_warning_only_vpnv4)
        if maximum_prefix_warning_only_vpnv6 and not isinstance(maximum_prefix_warning_only_vpnv6, str):
            raise TypeError("Expected argument 'maximum_prefix_warning_only_vpnv6' to be a str")
        pulumi.set(__self__, "maximum_prefix_warning_only_vpnv6", maximum_prefix_warning_only_vpnv6)
        if next_hop_self and not isinstance(next_hop_self, str):
            raise TypeError("Expected argument 'next_hop_self' to be a str")
        pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self6 and not isinstance(next_hop_self6, str):
            raise TypeError("Expected argument 'next_hop_self6' to be a str")
        pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        if next_hop_self_rr and not isinstance(next_hop_self_rr, str):
            raise TypeError("Expected argument 'next_hop_self_rr' to be a str")
        pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        if next_hop_self_rr6 and not isinstance(next_hop_self_rr6, str):
            raise TypeError("Expected argument 'next_hop_self_rr6' to be a str")
        pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        if next_hop_self_vpnv4 and not isinstance(next_hop_self_vpnv4, str):
            raise TypeError("Expected argument 'next_hop_self_vpnv4' to be a str")
        pulumi.set(__self__, "next_hop_self_vpnv4", next_hop_self_vpnv4)
        if next_hop_self_vpnv6 and not isinstance(next_hop_self_vpnv6, str):
            raise TypeError("Expected argument 'next_hop_self_vpnv6' to be a str")
        pulumi.set(__self__, "next_hop_self_vpnv6", next_hop_self_vpnv6)
        if override_capability and not isinstance(override_capability, str):
            raise TypeError("Expected argument 'override_capability' to be a str")
        pulumi.set(__self__, "override_capability", override_capability)
        if passive and not isinstance(passive, str):
            raise TypeError("Expected argument 'passive' to be a str")
        pulumi.set(__self__, "passive", passive)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if prefix_list_in and not isinstance(prefix_list_in, str):
            raise TypeError("Expected argument 'prefix_list_in' to be a str")
        pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        if prefix_list_in6 and not isinstance(prefix_list_in6, str):
            raise TypeError("Expected argument 'prefix_list_in6' to be a str")
        pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        if prefix_list_in_vpnv4 and not isinstance(prefix_list_in_vpnv4, str):
            raise TypeError("Expected argument 'prefix_list_in_vpnv4' to be a str")
        pulumi.set(__self__, "prefix_list_in_vpnv4", prefix_list_in_vpnv4)
        if prefix_list_in_vpnv6 and not isinstance(prefix_list_in_vpnv6, str):
            raise TypeError("Expected argument 'prefix_list_in_vpnv6' to be a str")
        pulumi.set(__self__, "prefix_list_in_vpnv6", prefix_list_in_vpnv6)
        if prefix_list_out and not isinstance(prefix_list_out, str):
            raise TypeError("Expected argument 'prefix_list_out' to be a str")
        pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        if prefix_list_out6 and not isinstance(prefix_list_out6, str):
            raise TypeError("Expected argument 'prefix_list_out6' to be a str")
        pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        if prefix_list_out_vpnv4 and not isinstance(prefix_list_out_vpnv4, str):
            raise TypeError("Expected argument 'prefix_list_out_vpnv4' to be a str")
        pulumi.set(__self__, "prefix_list_out_vpnv4", prefix_list_out_vpnv4)
        if prefix_list_out_vpnv6 and not isinstance(prefix_list_out_vpnv6, str):
            raise TypeError("Expected argument 'prefix_list_out_vpnv6' to be a str")
        pulumi.set(__self__, "prefix_list_out_vpnv6", prefix_list_out_vpnv6)
        if remote_as and not isinstance(remote_as, int):
            raise TypeError("Expected argument 'remote_as' to be a int")
        pulumi.set(__self__, "remote_as", remote_as)
        if remove_private_as and not isinstance(remove_private_as, str):
            raise TypeError("Expected argument 'remove_private_as' to be a str")
        pulumi.set(__self__, "remove_private_as", remove_private_as)
        if remove_private_as6 and not isinstance(remove_private_as6, str):
            raise TypeError("Expected argument 'remove_private_as6' to be a str")
        pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        if remove_private_as_evpn and not isinstance(remove_private_as_evpn, str):
            raise TypeError("Expected argument 'remove_private_as_evpn' to be a str")
        pulumi.set(__self__, "remove_private_as_evpn", remove_private_as_evpn)
        if remove_private_as_vpnv4 and not isinstance(remove_private_as_vpnv4, str):
            raise TypeError("Expected argument 'remove_private_as_vpnv4' to be a str")
        pulumi.set(__self__, "remove_private_as_vpnv4", remove_private_as_vpnv4)
        if remove_private_as_vpnv6 and not isinstance(remove_private_as_vpnv6, str):
            raise TypeError("Expected argument 'remove_private_as_vpnv6' to be a str")
        pulumi.set(__self__, "remove_private_as_vpnv6", remove_private_as_vpnv6)
        if restart_time and not isinstance(restart_time, int):
            raise TypeError("Expected argument 'restart_time' to be a int")
        pulumi.set(__self__, "restart_time", restart_time)
        if retain_stale_time and not isinstance(retain_stale_time, int):
            raise TypeError("Expected argument 'retain_stale_time' to be a int")
        pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        if route_map_in and not isinstance(route_map_in, str):
            raise TypeError("Expected argument 'route_map_in' to be a str")
        pulumi.set(__self__, "route_map_in", route_map_in)
        if route_map_in6 and not isinstance(route_map_in6, str):
            raise TypeError("Expected argument 'route_map_in6' to be a str")
        pulumi.set(__self__, "route_map_in6", route_map_in6)
        if route_map_in_evpn and not isinstance(route_map_in_evpn, str):
            raise TypeError("Expected argument 'route_map_in_evpn' to be a str")
        pulumi.set(__self__, "route_map_in_evpn", route_map_in_evpn)
        if route_map_in_vpnv4 and not isinstance(route_map_in_vpnv4, str):
            raise TypeError("Expected argument 'route_map_in_vpnv4' to be a str")
        pulumi.set(__self__, "route_map_in_vpnv4", route_map_in_vpnv4)
        if route_map_in_vpnv6 and not isinstance(route_map_in_vpnv6, str):
            raise TypeError("Expected argument 'route_map_in_vpnv6' to be a str")
        pulumi.set(__self__, "route_map_in_vpnv6", route_map_in_vpnv6)
        if route_map_out and not isinstance(route_map_out, str):
            raise TypeError("Expected argument 'route_map_out' to be a str")
        pulumi.set(__self__, "route_map_out", route_map_out)
        if route_map_out6 and not isinstance(route_map_out6, str):
            raise TypeError("Expected argument 'route_map_out6' to be a str")
        pulumi.set(__self__, "route_map_out6", route_map_out6)
        if route_map_out6_preferable and not isinstance(route_map_out6_preferable, str):
            raise TypeError("Expected argument 'route_map_out6_preferable' to be a str")
        pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        if route_map_out_evpn and not isinstance(route_map_out_evpn, str):
            raise TypeError("Expected argument 'route_map_out_evpn' to be a str")
        pulumi.set(__self__, "route_map_out_evpn", route_map_out_evpn)
        if route_map_out_preferable and not isinstance(route_map_out_preferable, str):
            raise TypeError("Expected argument 'route_map_out_preferable' to be a str")
        pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        if route_map_out_vpnv4 and not isinstance(route_map_out_vpnv4, str):
            raise TypeError("Expected argument 'route_map_out_vpnv4' to be a str")
        pulumi.set(__self__, "route_map_out_vpnv4", route_map_out_vpnv4)
        if route_map_out_vpnv4_preferable and not isinstance(route_map_out_vpnv4_preferable, str):
            raise TypeError("Expected argument 'route_map_out_vpnv4_preferable' to be a str")
        pulumi.set(__self__, "route_map_out_vpnv4_preferable", route_map_out_vpnv4_preferable)
        if route_map_out_vpnv6 and not isinstance(route_map_out_vpnv6, str):
            raise TypeError("Expected argument 'route_map_out_vpnv6' to be a str")
        pulumi.set(__self__, "route_map_out_vpnv6", route_map_out_vpnv6)
        if route_map_out_vpnv6_preferable and not isinstance(route_map_out_vpnv6_preferable, str):
            raise TypeError("Expected argument 'route_map_out_vpnv6_preferable' to be a str")
        pulumi.set(__self__, "route_map_out_vpnv6_preferable", route_map_out_vpnv6_preferable)
        if route_reflector_client and not isinstance(route_reflector_client, str):
            raise TypeError("Expected argument 'route_reflector_client' to be a str")
        pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        if route_reflector_client6 and not isinstance(route_reflector_client6, str):
            raise TypeError("Expected argument 'route_reflector_client6' to be a str")
        pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        if route_reflector_client_evpn and not isinstance(route_reflector_client_evpn, str):
            raise TypeError("Expected argument 'route_reflector_client_evpn' to be a str")
        pulumi.set(__self__, "route_reflector_client_evpn", route_reflector_client_evpn)
        if route_reflector_client_vpnv4 and not isinstance(route_reflector_client_vpnv4, str):
            raise TypeError("Expected argument 'route_reflector_client_vpnv4' to be a str")
        pulumi.set(__self__, "route_reflector_client_vpnv4", route_reflector_client_vpnv4)
        if route_reflector_client_vpnv6 and not isinstance(route_reflector_client_vpnv6, str):
            raise TypeError("Expected argument 'route_reflector_client_vpnv6' to be a str")
        pulumi.set(__self__, "route_reflector_client_vpnv6", route_reflector_client_vpnv6)
        if route_server_client and not isinstance(route_server_client, str):
            raise TypeError("Expected argument 'route_server_client' to be a str")
        pulumi.set(__self__, "route_server_client", route_server_client)
        if route_server_client6 and not isinstance(route_server_client6, str):
            raise TypeError("Expected argument 'route_server_client6' to be a str")
        pulumi.set(__self__, "route_server_client6", route_server_client6)
        if route_server_client_evpn and not isinstance(route_server_client_evpn, str):
            raise TypeError("Expected argument 'route_server_client_evpn' to be a str")
        pulumi.set(__self__, "route_server_client_evpn", route_server_client_evpn)
        if route_server_client_vpnv4 and not isinstance(route_server_client_vpnv4, str):
            raise TypeError("Expected argument 'route_server_client_vpnv4' to be a str")
        pulumi.set(__self__, "route_server_client_vpnv4", route_server_client_vpnv4)
        if route_server_client_vpnv6 and not isinstance(route_server_client_vpnv6, str):
            raise TypeError("Expected argument 'route_server_client_vpnv6' to be a str")
        pulumi.set(__self__, "route_server_client_vpnv6", route_server_client_vpnv6)
        if send_community and not isinstance(send_community, str):
            raise TypeError("Expected argument 'send_community' to be a str")
        pulumi.set(__self__, "send_community", send_community)
        if send_community6 and not isinstance(send_community6, str):
            raise TypeError("Expected argument 'send_community6' to be a str")
        pulumi.set(__self__, "send_community6", send_community6)
        if send_community_evpn and not isinstance(send_community_evpn, str):
            raise TypeError("Expected argument 'send_community_evpn' to be a str")
        pulumi.set(__self__, "send_community_evpn", send_community_evpn)
        if send_community_vpnv4 and not isinstance(send_community_vpnv4, str):
            raise TypeError("Expected argument 'send_community_vpnv4' to be a str")
        pulumi.set(__self__, "send_community_vpnv4", send_community_vpnv4)
        if send_community_vpnv6 and not isinstance(send_community_vpnv6, str):
            raise TypeError("Expected argument 'send_community_vpnv6' to be a str")
        pulumi.set(__self__, "send_community_vpnv6", send_community_vpnv6)
        if shutdown and not isinstance(shutdown, str):
            raise TypeError("Expected argument 'shutdown' to be a str")
        pulumi.set(__self__, "shutdown", shutdown)
        if soft_reconfiguration and not isinstance(soft_reconfiguration, str):
            raise TypeError("Expected argument 'soft_reconfiguration' to be a str")
        pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        if soft_reconfiguration6 and not isinstance(soft_reconfiguration6, str):
            raise TypeError("Expected argument 'soft_reconfiguration6' to be a str")
        pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        if soft_reconfiguration_evpn and not isinstance(soft_reconfiguration_evpn, str):
            raise TypeError("Expected argument 'soft_reconfiguration_evpn' to be a str")
        pulumi.set(__self__, "soft_reconfiguration_evpn", soft_reconfiguration_evpn)
        if soft_reconfiguration_vpnv4 and not isinstance(soft_reconfiguration_vpnv4, str):
            raise TypeError("Expected argument 'soft_reconfiguration_vpnv4' to be a str")
        pulumi.set(__self__, "soft_reconfiguration_vpnv4", soft_reconfiguration_vpnv4)
        if soft_reconfiguration_vpnv6 and not isinstance(soft_reconfiguration_vpnv6, str):
            raise TypeError("Expected argument 'soft_reconfiguration_vpnv6' to be a str")
        pulumi.set(__self__, "soft_reconfiguration_vpnv6", soft_reconfiguration_vpnv6)
        if stale_route and not isinstance(stale_route, str):
            raise TypeError("Expected argument 'stale_route' to be a str")
        pulumi.set(__self__, "stale_route", stale_route)
        if strict_capability_match and not isinstance(strict_capability_match, str):
            raise TypeError("Expected argument 'strict_capability_match' to be a str")
        pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        if unsuppress_map and not isinstance(unsuppress_map, str):
            raise TypeError("Expected argument 'unsuppress_map' to be a str")
        pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        if unsuppress_map6 and not isinstance(unsuppress_map6, str):
            raise TypeError("Expected argument 'unsuppress_map6' to be a str")
        pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        if update_source and not isinstance(update_source, str):
            raise TypeError("Expected argument 'update_source' to be a str")
        pulumi.set(__self__, "update_source", update_source)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if weight and not isinstance(weight, int):
            raise TypeError("Expected argument 'weight' to be a int")
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activate(self) -> str:
        """
        Enable/disable address family IPv4 for this neighbor.
        """
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter
    def activate6(self) -> str:
        """
        Enable/disable address family IPv6 for this neighbor.
        """
        return pulumi.get(self, "activate6")

    @property
    @pulumi.getter(name="activateEvpn")
    def activate_evpn(self) -> str:
        """
        Enable/disable address family L2VPN EVPN for this neighbor.
        """
        return pulumi.get(self, "activate_evpn")

    @property
    @pulumi.getter(name="activateVpnv4")
    def activate_vpnv4(self) -> str:
        """
        Enable/disable address family VPNv4 for this neighbor.
        """
        return pulumi.get(self, "activate_vpnv4")

    @property
    @pulumi.getter(name="activateVpnv6")
    def activate_vpnv6(self) -> str:
        """
        Enable/disable address family VPNv6 for this neighbor.
        """
        return pulumi.get(self, "activate_vpnv6")

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> str:
        """
        Enable/disable IPv4 additional-path capability.
        """
        return pulumi.get(self, "additional_path")

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> str:
        """
        Enable/disable IPv6 additional-path capability.
        """
        return pulumi.get(self, "additional_path6")

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> str:
        """
        Enable/disable VPNv4 additional-path capability.
        """
        return pulumi.get(self, "additional_path_vpnv4")

    @property
    @pulumi.getter(name="additionalPathVpnv6")
    def additional_path_vpnv6(self) -> str:
        """
        Enable/disable VPNv6 additional-path capability.
        """
        return pulumi.get(self, "additional_path_vpnv6")

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> int:
        """
        Number of IPv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path")

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> int:
        """
        Number of IPv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path6")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv4")
    def adv_additional_path_vpnv4(self) -> int:
        """
        Number of VPNv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv4")

    @property
    @pulumi.getter(name="advAdditionalPathVpnv6")
    def adv_additional_path_vpnv6(self) -> int:
        """
        Number of VPNv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path_vpnv6")

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> int:
        """
        Minimum interval (sec) between sending updates.
        """
        return pulumi.get(self, "advertisement_interval")

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> int:
        """
        IPv4 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in")

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> int:
        """
        IPv6 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in6")

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> str:
        """
        Enable/disable IPv4 Enable to allow my AS in AS path.
        """
        return pulumi.get(self, "allowas_in_enable")

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> str:
        """
        Enable/disable IPv6 Enable to allow my AS in AS path.
        """
        return pulumi.get(self, "allowas_in_enable6")

    @property
    @pulumi.getter(name="allowasInEnableEvpn")
    def allowas_in_enable_evpn(self) -> str:
        """
        Enable/disable to allow my AS in AS path for L2VPN EVPN route.
        """
        return pulumi.get(self, "allowas_in_enable_evpn")

    @property
    @pulumi.getter(name="allowasInEnableVpnv4")
    def allowas_in_enable_vpnv4(self) -> str:
        """
        Enable/disable to allow my AS in AS path for VPNv4 route.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv4")

    @property
    @pulumi.getter(name="allowasInEnableVpnv6")
    def allowas_in_enable_vpnv6(self) -> str:
        """
        Enable/disable use of my AS in AS path for VPNv6 route.
        """
        return pulumi.get(self, "allowas_in_enable_vpnv6")

    @property
    @pulumi.getter(name="allowasInEvpn")
    def allowas_in_evpn(self) -> int:
        """
        The maximum number of occurrence of my AS number allowed for L2VPN EVPN route.
        """
        return pulumi.get(self, "allowas_in_evpn")

    @property
    @pulumi.getter(name="allowasInVpnv4")
    def allowas_in_vpnv4(self) -> int:
        """
        The maximum number of occurrence of my AS number allowed for VPNv4 route.
        """
        return pulumi.get(self, "allowas_in_vpnv4")

    @property
    @pulumi.getter(name="allowasInVpnv6")
    def allowas_in_vpnv6(self) -> int:
        """
        The maximum number of occurrence of my AS number allowed for VPNv6 route.
        """
        return pulumi.get(self, "allowas_in_vpnv6")

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> str:
        """
        Enable/disable replace peer AS with own AS for IPv4.
        """
        return pulumi.get(self, "as_override")

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> str:
        """
        Enable/disable replace peer AS with own AS for IPv6.
        """
        return pulumi.get(self, "as_override6")

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> str:
        """
        IPv4 List of attributes that should be unchanged.
        """
        return pulumi.get(self, "attribute_unchanged")

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> str:
        """
        IPv6 List of attributes that should be unchanged.
        """
        return pulumi.get(self, "attribute_unchanged6")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv4")
    def attribute_unchanged_vpnv4(self) -> str:
        """
        List of attributes that should be unchanged for VPNv4 route.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv4")

    @property
    @pulumi.getter(name="attributeUnchangedVpnv6")
    def attribute_unchanged_vpnv6(self) -> str:
        """
        List of attributes that should not be changed for VPNv6 route.
        """
        return pulumi.get(self, "attribute_unchanged_vpnv6")

    @property
    @pulumi.getter(name="authOptions")
    def auth_options(self) -> str:
        """
        Key-chain name for TCP authentication options.
        """
        return pulumi.get(self, "auth_options")

    @property
    @pulumi.getter
    def bfd(self) -> str:
        """
        Enable/disable BFD for this neighbor.
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> str:
        """
        Enable/disable advertise default IPv4 route to this neighbor.
        """
        return pulumi.get(self, "capability_default_originate")

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> str:
        """
        Enable/disable advertise default IPv6 route to this neighbor.
        """
        return pulumi.get(self, "capability_default_originate6")

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> str:
        """
        Enable/disable advertise dynamic capability to this neighbor.
        """
        return pulumi.get(self, "capability_dynamic")

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> str:
        """
        Enable/disable advertise IPv4 graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart")

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> str:
        """
        Enable/disable advertise IPv6 graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart6")

    @property
    @pulumi.getter(name="capabilityGracefulRestartEvpn")
    def capability_graceful_restart_evpn(self) -> str:
        """
        Enable/disable advertisement of L2VPN EVPN graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart_evpn")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv4")
    def capability_graceful_restart_vpnv4(self) -> str:
        """
        Enable/disable advertise VPNv4 graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv4")

    @property
    @pulumi.getter(name="capabilityGracefulRestartVpnv6")
    def capability_graceful_restart_vpnv6(self) -> str:
        """
        Enable/disable advertisement of VPNv6 graceful restart capability to this neighbor.
        """
        return pulumi.get(self, "capability_graceful_restart_vpnv6")

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> str:
        """
        Accept/Send IPv4 ORF lists to/from this neighbor.
        """
        return pulumi.get(self, "capability_orf")

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> str:
        """
        Accept/Send IPv6 ORF lists to/from this neighbor.
        """
        return pulumi.get(self, "capability_orf6")

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> str:
        """
        Enable/disable advertise route refresh capability to this neighbor.
        """
        return pulumi.get(self, "capability_route_refresh")

    @property
    @pulumi.getter(name="conditionalAdvertise6s")
    def conditional_advertise6s(self) -> Sequence['outputs.GetNeighborConditionalAdvertise6Result']:
        """
        IPv6 conditional advertisement. The structure of `conditional_advertise6` block is documented below.
        """
        return pulumi.get(self, "conditional_advertise6s")

    @property
    @pulumi.getter(name="conditionalAdvertises")
    def conditional_advertises(self) -> Sequence['outputs.GetNeighborConditionalAdvertiseResult']:
        """
        Conditional advertisement. The structure of `conditional_advertise` block is documented below.
        """
        return pulumi.get(self, "conditional_advertises")

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> int:
        """
        Interval (sec) for connect timer.
        """
        return pulumi.get(self, "connect_timer")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> str:
        """
        Route map to specify criteria to originate IPv4 default.
        """
        return pulumi.get(self, "default_originate_routemap")

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> str:
        """
        Route map to specify criteria to originate IPv6 default.
        """
        return pulumi.get(self, "default_originate_routemap6")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> str:
        """
        Filter for IPv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in")

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> str:
        """
        Filter for IPv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in6")

    @property
    @pulumi.getter(name="distributeListInVpnv4")
    def distribute_list_in_vpnv4(self) -> str:
        """
        Filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv4")

    @property
    @pulumi.getter(name="distributeListInVpnv6")
    def distribute_list_in_vpnv6(self) -> str:
        """
        Filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in_vpnv6")

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> str:
        """
        Filter for IPv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out")

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> str:
        """
        Filter for IPv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out6")

    @property
    @pulumi.getter(name="distributeListOutVpnv4")
    def distribute_list_out_vpnv4(self) -> str:
        """
        Filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv4")

    @property
    @pulumi.getter(name="distributeListOutVpnv6")
    def distribute_list_out_vpnv6(self) -> str:
        """
        Filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out_vpnv6")

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> str:
        """
        Don't negotiate capabilities with this neighbor
        """
        return pulumi.get(self, "dont_capability_negotiate")

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> str:
        """
        Enable/disable allow multi-hop EBGP neighbors.
        """
        return pulumi.get(self, "ebgp_enforce_multihop")

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> int:
        """
        EBGP multihop TTL for this peer.
        """
        return pulumi.get(self, "ebgp_multihop_ttl")

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> str:
        """
        BGP filter for IPv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in")

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> str:
        """
        BGP filter for IPv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in6")

    @property
    @pulumi.getter(name="filterListInVpnv4")
    def filter_list_in_vpnv4(self) -> str:
        """
        BGP filter for VPNv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv4")

    @property
    @pulumi.getter(name="filterListInVpnv6")
    def filter_list_in_vpnv6(self) -> str:
        """
        BGP filter for VPNv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in_vpnv6")

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> str:
        """
        BGP filter for IPv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out")

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> str:
        """
        BGP filter for IPv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out6")

    @property
    @pulumi.getter(name="filterListOutVpnv4")
    def filter_list_out_vpnv4(self) -> str:
        """
        BGP filter for VPNv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv4")

    @property
    @pulumi.getter(name="filterListOutVpnv6")
    def filter_list_out_vpnv6(self) -> str:
        """
        BGP filter for VPNv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out_vpnv6")

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> int:
        """
        Interval (sec) before peer considered dead.
        """
        return pulumi.get(self, "holdtime_timer")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        Interface
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP/IPv6 address of neighbor.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> int:
        """
        Keep alive timer interval (sec).
        """
        return pulumi.get(self, "keep_alive_timer")

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> str:
        """
        Enable/disable failover upon link down.
        """
        return pulumi.get(self, "link_down_failover")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> int:
        """
        Local AS number of neighbor.
        """
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> str:
        """
        Do not prepend local-as to incoming updates.
        """
        return pulumi.get(self, "local_as_no_prepend")

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> str:
        """
        Replace real AS with local-as in outgoing updates.
        """
        return pulumi.get(self, "local_as_replace_as")

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> int:
        """
        Maximum number of IPv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix")

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> int:
        """
        Maximum number of IPv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix6")

    @property
    @pulumi.getter(name="maximumPrefixEvpn")
    def maximum_prefix_evpn(self) -> int:
        """
        Maximum number of L2VPN EVPN prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> int:
        """
        Maximum IPv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold")

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> int:
        """
        Maximum IPv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold6")

    @property
    @pulumi.getter(name="maximumPrefixThresholdEvpn")
    def maximum_prefix_threshold_evpn(self) -> int:
        """
        Maximum L2VPN EVPN prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_evpn")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv4")
    def maximum_prefix_threshold_vpnv4(self) -> int:
        """
        Maximum VPNv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixThresholdVpnv6")
    def maximum_prefix_threshold_vpnv6(self) -> int:
        """
        Maximum VPNv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold_vpnv6")

    @property
    @pulumi.getter(name="maximumPrefixVpnv4")
    def maximum_prefix_vpnv4(self) -> int:
        """
        Maximum number of VPNv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixVpnv6")
    def maximum_prefix_vpnv6(self) -> int:
        """
        Maximum number of VPNv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix_vpnv6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> str:
        """
        Enable/disable IPv4 Only give warning message when limit is exceeded.
        """
        return pulumi.get(self, "maximum_prefix_warning_only")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> str:
        """
        Enable/disable IPv6 Only give warning message when limit is exceeded.
        """
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyEvpn")
    def maximum_prefix_warning_only_evpn(self) -> str:
        """
        Enable/disable only sending warning message when exceeding limit of L2VPN EVPN routes.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_evpn")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv4")
    def maximum_prefix_warning_only_vpnv4(self) -> str:
        """
        Enable/disable only giving warning message when limit is exceeded for VPNv4 routes.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv4")

    @property
    @pulumi.getter(name="maximumPrefixWarningOnlyVpnv6")
    def maximum_prefix_warning_only_vpnv6(self) -> str:
        """
        Enable/disable warning message when limit is exceeded for VPNv6 routes.
        """
        return pulumi.get(self, "maximum_prefix_warning_only_vpnv6")

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> str:
        """
        Enable/disable IPv4 next-hop calculation for this neighbor.
        """
        return pulumi.get(self, "next_hop_self")

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> str:
        """
        Enable/disable IPv6 next-hop calculation for this neighbor.
        """
        return pulumi.get(self, "next_hop_self6")

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> str:
        """
        Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes.
        """
        return pulumi.get(self, "next_hop_self_rr")

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> str:
        """
        Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes.
        """
        return pulumi.get(self, "next_hop_self_rr6")

    @property
    @pulumi.getter(name="nextHopSelfVpnv4")
    def next_hop_self_vpnv4(self) -> str:
        """
        Enable/disable setting VPNv4 next-hop to interface's IP address for this neighbor.
        """
        return pulumi.get(self, "next_hop_self_vpnv4")

    @property
    @pulumi.getter(name="nextHopSelfVpnv6")
    def next_hop_self_vpnv6(self) -> str:
        """
        Enable/disable use of outgoing interface's IP address as VPNv6 next-hop for this neighbor.
        """
        return pulumi.get(self, "next_hop_self_vpnv6")

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> str:
        """
        Enable/disable override result of capability negotiation.
        """
        return pulumi.get(self, "override_capability")

    @property
    @pulumi.getter
    def passive(self) -> str:
        """
        Enable/disable sending of open messages to this neighbor.
        """
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password used in MD5 authentication.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> str:
        """
        IPv4 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in")

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> str:
        """
        IPv6 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in6")

    @property
    @pulumi.getter(name="prefixListInVpnv4")
    def prefix_list_in_vpnv4(self) -> str:
        """
        Inbound filter for VPNv4 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv4")

    @property
    @pulumi.getter(name="prefixListInVpnv6")
    def prefix_list_in_vpnv6(self) -> str:
        """
        Inbound filter for VPNv6 updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in_vpnv6")

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> str:
        """
        IPv4 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out")

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> str:
        """
        IPv6 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out6")

    @property
    @pulumi.getter(name="prefixListOutVpnv4")
    def prefix_list_out_vpnv4(self) -> str:
        """
        Outbound filter for VPNv4 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv4")

    @property
    @pulumi.getter(name="prefixListOutVpnv6")
    def prefix_list_out_vpnv6(self) -> str:
        """
        Outbound filter for VPNv6 updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out_vpnv6")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> int:
        """
        AS number of neighbor.
        """
        return pulumi.get(self, "remote_as")

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> str:
        """
        Enable/disable remove private AS number from IPv4 outbound updates.
        """
        return pulumi.get(self, "remove_private_as")

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> str:
        """
        Enable/disable remove private AS number from IPv6 outbound updates.
        """
        return pulumi.get(self, "remove_private_as6")

    @property
    @pulumi.getter(name="removePrivateAsEvpn")
    def remove_private_as_evpn(self) -> str:
        """
        Enable/disable removing private AS number from L2VPN EVPN outbound updates.
        """
        return pulumi.get(self, "remove_private_as_evpn")

    @property
    @pulumi.getter(name="removePrivateAsVpnv4")
    def remove_private_as_vpnv4(self) -> str:
        """
        Enable/disable remove private AS number from VPNv4 outbound updates.
        """
        return pulumi.get(self, "remove_private_as_vpnv4")

    @property
    @pulumi.getter(name="removePrivateAsVpnv6")
    def remove_private_as_vpnv6(self) -> str:
        """
        Enable/disable to remove private AS number from VPNv6 outbound updates.
        """
        return pulumi.get(self, "remove_private_as_vpnv6")

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> int:
        """
        Graceful restart delay time (sec, 0 = global default).
        """
        return pulumi.get(self, "restart_time")

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> int:
        """
        Time to retain stale routes.
        """
        return pulumi.get(self, "retain_stale_time")

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> str:
        """
        IPv4 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in")

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> str:
        """
        IPv6 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in6")

    @property
    @pulumi.getter(name="routeMapInEvpn")
    def route_map_in_evpn(self) -> str:
        """
        L2VPN EVPN inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_evpn")

    @property
    @pulumi.getter(name="routeMapInVpnv4")
    def route_map_in_vpnv4(self) -> str:
        """
        VPNv4 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv4")

    @property
    @pulumi.getter(name="routeMapInVpnv6")
    def route_map_in_vpnv6(self) -> str:
        """
        VPNv6 inbound route map filter.
        """
        return pulumi.get(self, "route_map_in_vpnv6")

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> str:
        """
        IPv4 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out")

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> str:
        """
        IPv6 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out6")

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> str:
        """
        IPv6 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out6_preferable")

    @property
    @pulumi.getter(name="routeMapOutEvpn")
    def route_map_out_evpn(self) -> str:
        """
        L2VPN EVPN outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_evpn")

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> str:
        """
        IPv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv4")
    def route_map_out_vpnv4(self) -> str:
        """
        VPNv4 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv4")

    @property
    @pulumi.getter(name="routeMapOutVpnv4Preferable")
    def route_map_out_vpnv4_preferable(self) -> str:
        """
        VPNv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv4_preferable")

    @property
    @pulumi.getter(name="routeMapOutVpnv6")
    def route_map_out_vpnv6(self) -> str:
        """
        VPNv6 outbound route map filter.
        """
        return pulumi.get(self, "route_map_out_vpnv6")

    @property
    @pulumi.getter(name="routeMapOutVpnv6Preferable")
    def route_map_out_vpnv6_preferable(self) -> str:
        """
        VPNv6 outbound route map filter if this neighbor is preferred.
        """
        return pulumi.get(self, "route_map_out_vpnv6_preferable")

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> str:
        """
        Enable/disable IPv4 AS route reflector client.
        """
        return pulumi.get(self, "route_reflector_client")

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> str:
        """
        Enable/disable IPv6 AS route reflector client.
        """
        return pulumi.get(self, "route_reflector_client6")

    @property
    @pulumi.getter(name="routeReflectorClientEvpn")
    def route_reflector_client_evpn(self) -> str:
        """
        Enable/disable L2VPN EVPN AS route reflector client for this neighbor.
        """
        return pulumi.get(self, "route_reflector_client_evpn")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv4")
    def route_reflector_client_vpnv4(self) -> str:
        """
        Enable/disable VPNv4 AS route reflector client for this neighbor.
        """
        return pulumi.get(self, "route_reflector_client_vpnv4")

    @property
    @pulumi.getter(name="routeReflectorClientVpnv6")
    def route_reflector_client_vpnv6(self) -> str:
        """
        Enable/disable VPNv6 AS route reflector client for this neighbor.
        """
        return pulumi.get(self, "route_reflector_client_vpnv6")

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> str:
        """
        Enable/disable IPv4 AS route server client.
        """
        return pulumi.get(self, "route_server_client")

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> str:
        """
        Enable/disable IPv6 AS route server client.
        """
        return pulumi.get(self, "route_server_client6")

    @property
    @pulumi.getter(name="routeServerClientEvpn")
    def route_server_client_evpn(self) -> str:
        """
        Enable/disable L2VPN EVPN AS route server client for this neighbor.
        """
        return pulumi.get(self, "route_server_client_evpn")

    @property
    @pulumi.getter(name="routeServerClientVpnv4")
    def route_server_client_vpnv4(self) -> str:
        """
        Enable/disable VPNv4 AS route server client for this neighbor.
        """
        return pulumi.get(self, "route_server_client_vpnv4")

    @property
    @pulumi.getter(name="routeServerClientVpnv6")
    def route_server_client_vpnv6(self) -> str:
        """
        Enable/disable VPNv6 AS route server client for this neighbor.
        """
        return pulumi.get(self, "route_server_client_vpnv6")

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> str:
        """
        IPv4 Send community attribute to neighbor.
        """
        return pulumi.get(self, "send_community")

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> str:
        """
        IPv6 Send community attribute to neighbor.
        """
        return pulumi.get(self, "send_community6")

    @property
    @pulumi.getter(name="sendCommunityEvpn")
    def send_community_evpn(self) -> str:
        """
        Enable/disable sending community attribute to neighbor for L2VPN EVPN address family.
        """
        return pulumi.get(self, "send_community_evpn")

    @property
    @pulumi.getter(name="sendCommunityVpnv4")
    def send_community_vpnv4(self) -> str:
        """
        Send community attribute to neighbor for VPNv4 address family.
        """
        return pulumi.get(self, "send_community_vpnv4")

    @property
    @pulumi.getter(name="sendCommunityVpnv6")
    def send_community_vpnv6(self) -> str:
        """
        Enable/disable sending community attribute to this neighbor for VPNv6 address family.
        """
        return pulumi.get(self, "send_community_vpnv6")

    @property
    @pulumi.getter
    def shutdown(self) -> str:
        """
        Enable/disable shutdown this neighbor.
        """
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> str:
        """
        Enable/disable allow IPv4 inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration")

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> str:
        """
        Enable/disable allow IPv6 inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration6")

    @property
    @pulumi.getter(name="softReconfigurationEvpn")
    def soft_reconfiguration_evpn(self) -> str:
        """
        Enable/disable L2VPN EVPN inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration_evpn")

    @property
    @pulumi.getter(name="softReconfigurationVpnv4")
    def soft_reconfiguration_vpnv4(self) -> str:
        """
        Enable/disable allow VPNv4 inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv4")

    @property
    @pulumi.getter(name="softReconfigurationVpnv6")
    def soft_reconfiguration_vpnv6(self) -> str:
        """
        Enable/disable VPNv6 inbound soft reconfiguration.
        """
        return pulumi.get(self, "soft_reconfiguration_vpnv6")

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> str:
        """
        Enable/disable stale route after neighbor down.
        """
        return pulumi.get(self, "stale_route")

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> str:
        """
        Enable/disable strict capability matching.
        """
        return pulumi.get(self, "strict_capability_match")

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> str:
        """
        IPv4 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map")

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> str:
        """
        IPv6 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map6")

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> str:
        """
        Interface to use as source IP/IPv6 address of TCP connections.
        """
        return pulumi.get(self, "update_source")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Neighbor weight.
        """
        return pulumi.get(self, "weight")


class AwaitableGetNeighborResult(GetNeighborResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNeighborResult(
            activate=self.activate,
            activate6=self.activate6,
            activate_evpn=self.activate_evpn,
            activate_vpnv4=self.activate_vpnv4,
            activate_vpnv6=self.activate_vpnv6,
            additional_path=self.additional_path,
            additional_path6=self.additional_path6,
            additional_path_vpnv4=self.additional_path_vpnv4,
            additional_path_vpnv6=self.additional_path_vpnv6,
            adv_additional_path=self.adv_additional_path,
            adv_additional_path6=self.adv_additional_path6,
            adv_additional_path_vpnv4=self.adv_additional_path_vpnv4,
            adv_additional_path_vpnv6=self.adv_additional_path_vpnv6,
            advertisement_interval=self.advertisement_interval,
            allowas_in=self.allowas_in,
            allowas_in6=self.allowas_in6,
            allowas_in_enable=self.allowas_in_enable,
            allowas_in_enable6=self.allowas_in_enable6,
            allowas_in_enable_evpn=self.allowas_in_enable_evpn,
            allowas_in_enable_vpnv4=self.allowas_in_enable_vpnv4,
            allowas_in_enable_vpnv6=self.allowas_in_enable_vpnv6,
            allowas_in_evpn=self.allowas_in_evpn,
            allowas_in_vpnv4=self.allowas_in_vpnv4,
            allowas_in_vpnv6=self.allowas_in_vpnv6,
            as_override=self.as_override,
            as_override6=self.as_override6,
            attribute_unchanged=self.attribute_unchanged,
            attribute_unchanged6=self.attribute_unchanged6,
            attribute_unchanged_vpnv4=self.attribute_unchanged_vpnv4,
            attribute_unchanged_vpnv6=self.attribute_unchanged_vpnv6,
            auth_options=self.auth_options,
            bfd=self.bfd,
            capability_default_originate=self.capability_default_originate,
            capability_default_originate6=self.capability_default_originate6,
            capability_dynamic=self.capability_dynamic,
            capability_graceful_restart=self.capability_graceful_restart,
            capability_graceful_restart6=self.capability_graceful_restart6,
            capability_graceful_restart_evpn=self.capability_graceful_restart_evpn,
            capability_graceful_restart_vpnv4=self.capability_graceful_restart_vpnv4,
            capability_graceful_restart_vpnv6=self.capability_graceful_restart_vpnv6,
            capability_orf=self.capability_orf,
            capability_orf6=self.capability_orf6,
            capability_route_refresh=self.capability_route_refresh,
            conditional_advertise6s=self.conditional_advertise6s,
            conditional_advertises=self.conditional_advertises,
            connect_timer=self.connect_timer,
            default_originate_routemap=self.default_originate_routemap,
            default_originate_routemap6=self.default_originate_routemap6,
            description=self.description,
            distribute_list_in=self.distribute_list_in,
            distribute_list_in6=self.distribute_list_in6,
            distribute_list_in_vpnv4=self.distribute_list_in_vpnv4,
            distribute_list_in_vpnv6=self.distribute_list_in_vpnv6,
            distribute_list_out=self.distribute_list_out,
            distribute_list_out6=self.distribute_list_out6,
            distribute_list_out_vpnv4=self.distribute_list_out_vpnv4,
            distribute_list_out_vpnv6=self.distribute_list_out_vpnv6,
            dont_capability_negotiate=self.dont_capability_negotiate,
            ebgp_enforce_multihop=self.ebgp_enforce_multihop,
            ebgp_multihop_ttl=self.ebgp_multihop_ttl,
            filter_list_in=self.filter_list_in,
            filter_list_in6=self.filter_list_in6,
            filter_list_in_vpnv4=self.filter_list_in_vpnv4,
            filter_list_in_vpnv6=self.filter_list_in_vpnv6,
            filter_list_out=self.filter_list_out,
            filter_list_out6=self.filter_list_out6,
            filter_list_out_vpnv4=self.filter_list_out_vpnv4,
            filter_list_out_vpnv6=self.filter_list_out_vpnv6,
            holdtime_timer=self.holdtime_timer,
            id=self.id,
            interface=self.interface,
            ip=self.ip,
            keep_alive_timer=self.keep_alive_timer,
            link_down_failover=self.link_down_failover,
            local_as=self.local_as,
            local_as_no_prepend=self.local_as_no_prepend,
            local_as_replace_as=self.local_as_replace_as,
            maximum_prefix=self.maximum_prefix,
            maximum_prefix6=self.maximum_prefix6,
            maximum_prefix_evpn=self.maximum_prefix_evpn,
            maximum_prefix_threshold=self.maximum_prefix_threshold,
            maximum_prefix_threshold6=self.maximum_prefix_threshold6,
            maximum_prefix_threshold_evpn=self.maximum_prefix_threshold_evpn,
            maximum_prefix_threshold_vpnv4=self.maximum_prefix_threshold_vpnv4,
            maximum_prefix_threshold_vpnv6=self.maximum_prefix_threshold_vpnv6,
            maximum_prefix_vpnv4=self.maximum_prefix_vpnv4,
            maximum_prefix_vpnv6=self.maximum_prefix_vpnv6,
            maximum_prefix_warning_only=self.maximum_prefix_warning_only,
            maximum_prefix_warning_only6=self.maximum_prefix_warning_only6,
            maximum_prefix_warning_only_evpn=self.maximum_prefix_warning_only_evpn,
            maximum_prefix_warning_only_vpnv4=self.maximum_prefix_warning_only_vpnv4,
            maximum_prefix_warning_only_vpnv6=self.maximum_prefix_warning_only_vpnv6,
            next_hop_self=self.next_hop_self,
            next_hop_self6=self.next_hop_self6,
            next_hop_self_rr=self.next_hop_self_rr,
            next_hop_self_rr6=self.next_hop_self_rr6,
            next_hop_self_vpnv4=self.next_hop_self_vpnv4,
            next_hop_self_vpnv6=self.next_hop_self_vpnv6,
            override_capability=self.override_capability,
            passive=self.passive,
            password=self.password,
            prefix_list_in=self.prefix_list_in,
            prefix_list_in6=self.prefix_list_in6,
            prefix_list_in_vpnv4=self.prefix_list_in_vpnv4,
            prefix_list_in_vpnv6=self.prefix_list_in_vpnv6,
            prefix_list_out=self.prefix_list_out,
            prefix_list_out6=self.prefix_list_out6,
            prefix_list_out_vpnv4=self.prefix_list_out_vpnv4,
            prefix_list_out_vpnv6=self.prefix_list_out_vpnv6,
            remote_as=self.remote_as,
            remove_private_as=self.remove_private_as,
            remove_private_as6=self.remove_private_as6,
            remove_private_as_evpn=self.remove_private_as_evpn,
            remove_private_as_vpnv4=self.remove_private_as_vpnv4,
            remove_private_as_vpnv6=self.remove_private_as_vpnv6,
            restart_time=self.restart_time,
            retain_stale_time=self.retain_stale_time,
            route_map_in=self.route_map_in,
            route_map_in6=self.route_map_in6,
            route_map_in_evpn=self.route_map_in_evpn,
            route_map_in_vpnv4=self.route_map_in_vpnv4,
            route_map_in_vpnv6=self.route_map_in_vpnv6,
            route_map_out=self.route_map_out,
            route_map_out6=self.route_map_out6,
            route_map_out6_preferable=self.route_map_out6_preferable,
            route_map_out_evpn=self.route_map_out_evpn,
            route_map_out_preferable=self.route_map_out_preferable,
            route_map_out_vpnv4=self.route_map_out_vpnv4,
            route_map_out_vpnv4_preferable=self.route_map_out_vpnv4_preferable,
            route_map_out_vpnv6=self.route_map_out_vpnv6,
            route_map_out_vpnv6_preferable=self.route_map_out_vpnv6_preferable,
            route_reflector_client=self.route_reflector_client,
            route_reflector_client6=self.route_reflector_client6,
            route_reflector_client_evpn=self.route_reflector_client_evpn,
            route_reflector_client_vpnv4=self.route_reflector_client_vpnv4,
            route_reflector_client_vpnv6=self.route_reflector_client_vpnv6,
            route_server_client=self.route_server_client,
            route_server_client6=self.route_server_client6,
            route_server_client_evpn=self.route_server_client_evpn,
            route_server_client_vpnv4=self.route_server_client_vpnv4,
            route_server_client_vpnv6=self.route_server_client_vpnv6,
            send_community=self.send_community,
            send_community6=self.send_community6,
            send_community_evpn=self.send_community_evpn,
            send_community_vpnv4=self.send_community_vpnv4,
            send_community_vpnv6=self.send_community_vpnv6,
            shutdown=self.shutdown,
            soft_reconfiguration=self.soft_reconfiguration,
            soft_reconfiguration6=self.soft_reconfiguration6,
            soft_reconfiguration_evpn=self.soft_reconfiguration_evpn,
            soft_reconfiguration_vpnv4=self.soft_reconfiguration_vpnv4,
            soft_reconfiguration_vpnv6=self.soft_reconfiguration_vpnv6,
            stale_route=self.stale_route,
            strict_capability_match=self.strict_capability_match,
            unsuppress_map=self.unsuppress_map,
            unsuppress_map6=self.unsuppress_map6,
            update_source=self.update_source,
            vdomparam=self.vdomparam,
            weight=self.weight)


def get_neighbor(ip: Optional[str] = None,
                 vdomparam: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNeighborResult:
    """
    Use this data source to get information on an fortios routerbgp neighbor

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_fortios as fortios

    sample1 = fortios.router.bgp.get_neighbor(ip="21.1.1.12")
    pulumi.export("output1", sample1)
    ```
    <!--End PulumiCodeChooser -->


    :param str ip: Specify the ip of the desired routerbgp neighbor.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['ip'] = ip
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:router/bgp/getNeighbor:getNeighbor', __args__, opts=opts, typ=GetNeighborResult).value

    return AwaitableGetNeighborResult(
        activate=pulumi.get(__ret__, 'activate'),
        activate6=pulumi.get(__ret__, 'activate6'),
        activate_evpn=pulumi.get(__ret__, 'activate_evpn'),
        activate_vpnv4=pulumi.get(__ret__, 'activate_vpnv4'),
        activate_vpnv6=pulumi.get(__ret__, 'activate_vpnv6'),
        additional_path=pulumi.get(__ret__, 'additional_path'),
        additional_path6=pulumi.get(__ret__, 'additional_path6'),
        additional_path_vpnv4=pulumi.get(__ret__, 'additional_path_vpnv4'),
        additional_path_vpnv6=pulumi.get(__ret__, 'additional_path_vpnv6'),
        adv_additional_path=pulumi.get(__ret__, 'adv_additional_path'),
        adv_additional_path6=pulumi.get(__ret__, 'adv_additional_path6'),
        adv_additional_path_vpnv4=pulumi.get(__ret__, 'adv_additional_path_vpnv4'),
        adv_additional_path_vpnv6=pulumi.get(__ret__, 'adv_additional_path_vpnv6'),
        advertisement_interval=pulumi.get(__ret__, 'advertisement_interval'),
        allowas_in=pulumi.get(__ret__, 'allowas_in'),
        allowas_in6=pulumi.get(__ret__, 'allowas_in6'),
        allowas_in_enable=pulumi.get(__ret__, 'allowas_in_enable'),
        allowas_in_enable6=pulumi.get(__ret__, 'allowas_in_enable6'),
        allowas_in_enable_evpn=pulumi.get(__ret__, 'allowas_in_enable_evpn'),
        allowas_in_enable_vpnv4=pulumi.get(__ret__, 'allowas_in_enable_vpnv4'),
        allowas_in_enable_vpnv6=pulumi.get(__ret__, 'allowas_in_enable_vpnv6'),
        allowas_in_evpn=pulumi.get(__ret__, 'allowas_in_evpn'),
        allowas_in_vpnv4=pulumi.get(__ret__, 'allowas_in_vpnv4'),
        allowas_in_vpnv6=pulumi.get(__ret__, 'allowas_in_vpnv6'),
        as_override=pulumi.get(__ret__, 'as_override'),
        as_override6=pulumi.get(__ret__, 'as_override6'),
        attribute_unchanged=pulumi.get(__ret__, 'attribute_unchanged'),
        attribute_unchanged6=pulumi.get(__ret__, 'attribute_unchanged6'),
        attribute_unchanged_vpnv4=pulumi.get(__ret__, 'attribute_unchanged_vpnv4'),
        attribute_unchanged_vpnv6=pulumi.get(__ret__, 'attribute_unchanged_vpnv6'),
        auth_options=pulumi.get(__ret__, 'auth_options'),
        bfd=pulumi.get(__ret__, 'bfd'),
        capability_default_originate=pulumi.get(__ret__, 'capability_default_originate'),
        capability_default_originate6=pulumi.get(__ret__, 'capability_default_originate6'),
        capability_dynamic=pulumi.get(__ret__, 'capability_dynamic'),
        capability_graceful_restart=pulumi.get(__ret__, 'capability_graceful_restart'),
        capability_graceful_restart6=pulumi.get(__ret__, 'capability_graceful_restart6'),
        capability_graceful_restart_evpn=pulumi.get(__ret__, 'capability_graceful_restart_evpn'),
        capability_graceful_restart_vpnv4=pulumi.get(__ret__, 'capability_graceful_restart_vpnv4'),
        capability_graceful_restart_vpnv6=pulumi.get(__ret__, 'capability_graceful_restart_vpnv6'),
        capability_orf=pulumi.get(__ret__, 'capability_orf'),
        capability_orf6=pulumi.get(__ret__, 'capability_orf6'),
        capability_route_refresh=pulumi.get(__ret__, 'capability_route_refresh'),
        conditional_advertise6s=pulumi.get(__ret__, 'conditional_advertise6s'),
        conditional_advertises=pulumi.get(__ret__, 'conditional_advertises'),
        connect_timer=pulumi.get(__ret__, 'connect_timer'),
        default_originate_routemap=pulumi.get(__ret__, 'default_originate_routemap'),
        default_originate_routemap6=pulumi.get(__ret__, 'default_originate_routemap6'),
        description=pulumi.get(__ret__, 'description'),
        distribute_list_in=pulumi.get(__ret__, 'distribute_list_in'),
        distribute_list_in6=pulumi.get(__ret__, 'distribute_list_in6'),
        distribute_list_in_vpnv4=pulumi.get(__ret__, 'distribute_list_in_vpnv4'),
        distribute_list_in_vpnv6=pulumi.get(__ret__, 'distribute_list_in_vpnv6'),
        distribute_list_out=pulumi.get(__ret__, 'distribute_list_out'),
        distribute_list_out6=pulumi.get(__ret__, 'distribute_list_out6'),
        distribute_list_out_vpnv4=pulumi.get(__ret__, 'distribute_list_out_vpnv4'),
        distribute_list_out_vpnv6=pulumi.get(__ret__, 'distribute_list_out_vpnv6'),
        dont_capability_negotiate=pulumi.get(__ret__, 'dont_capability_negotiate'),
        ebgp_enforce_multihop=pulumi.get(__ret__, 'ebgp_enforce_multihop'),
        ebgp_multihop_ttl=pulumi.get(__ret__, 'ebgp_multihop_ttl'),
        filter_list_in=pulumi.get(__ret__, 'filter_list_in'),
        filter_list_in6=pulumi.get(__ret__, 'filter_list_in6'),
        filter_list_in_vpnv4=pulumi.get(__ret__, 'filter_list_in_vpnv4'),
        filter_list_in_vpnv6=pulumi.get(__ret__, 'filter_list_in_vpnv6'),
        filter_list_out=pulumi.get(__ret__, 'filter_list_out'),
        filter_list_out6=pulumi.get(__ret__, 'filter_list_out6'),
        filter_list_out_vpnv4=pulumi.get(__ret__, 'filter_list_out_vpnv4'),
        filter_list_out_vpnv6=pulumi.get(__ret__, 'filter_list_out_vpnv6'),
        holdtime_timer=pulumi.get(__ret__, 'holdtime_timer'),
        id=pulumi.get(__ret__, 'id'),
        interface=pulumi.get(__ret__, 'interface'),
        ip=pulumi.get(__ret__, 'ip'),
        keep_alive_timer=pulumi.get(__ret__, 'keep_alive_timer'),
        link_down_failover=pulumi.get(__ret__, 'link_down_failover'),
        local_as=pulumi.get(__ret__, 'local_as'),
        local_as_no_prepend=pulumi.get(__ret__, 'local_as_no_prepend'),
        local_as_replace_as=pulumi.get(__ret__, 'local_as_replace_as'),
        maximum_prefix=pulumi.get(__ret__, 'maximum_prefix'),
        maximum_prefix6=pulumi.get(__ret__, 'maximum_prefix6'),
        maximum_prefix_evpn=pulumi.get(__ret__, 'maximum_prefix_evpn'),
        maximum_prefix_threshold=pulumi.get(__ret__, 'maximum_prefix_threshold'),
        maximum_prefix_threshold6=pulumi.get(__ret__, 'maximum_prefix_threshold6'),
        maximum_prefix_threshold_evpn=pulumi.get(__ret__, 'maximum_prefix_threshold_evpn'),
        maximum_prefix_threshold_vpnv4=pulumi.get(__ret__, 'maximum_prefix_threshold_vpnv4'),
        maximum_prefix_threshold_vpnv6=pulumi.get(__ret__, 'maximum_prefix_threshold_vpnv6'),
        maximum_prefix_vpnv4=pulumi.get(__ret__, 'maximum_prefix_vpnv4'),
        maximum_prefix_vpnv6=pulumi.get(__ret__, 'maximum_prefix_vpnv6'),
        maximum_prefix_warning_only=pulumi.get(__ret__, 'maximum_prefix_warning_only'),
        maximum_prefix_warning_only6=pulumi.get(__ret__, 'maximum_prefix_warning_only6'),
        maximum_prefix_warning_only_evpn=pulumi.get(__ret__, 'maximum_prefix_warning_only_evpn'),
        maximum_prefix_warning_only_vpnv4=pulumi.get(__ret__, 'maximum_prefix_warning_only_vpnv4'),
        maximum_prefix_warning_only_vpnv6=pulumi.get(__ret__, 'maximum_prefix_warning_only_vpnv6'),
        next_hop_self=pulumi.get(__ret__, 'next_hop_self'),
        next_hop_self6=pulumi.get(__ret__, 'next_hop_self6'),
        next_hop_self_rr=pulumi.get(__ret__, 'next_hop_self_rr'),
        next_hop_self_rr6=pulumi.get(__ret__, 'next_hop_self_rr6'),
        next_hop_self_vpnv4=pulumi.get(__ret__, 'next_hop_self_vpnv4'),
        next_hop_self_vpnv6=pulumi.get(__ret__, 'next_hop_self_vpnv6'),
        override_capability=pulumi.get(__ret__, 'override_capability'),
        passive=pulumi.get(__ret__, 'passive'),
        password=pulumi.get(__ret__, 'password'),
        prefix_list_in=pulumi.get(__ret__, 'prefix_list_in'),
        prefix_list_in6=pulumi.get(__ret__, 'prefix_list_in6'),
        prefix_list_in_vpnv4=pulumi.get(__ret__, 'prefix_list_in_vpnv4'),
        prefix_list_in_vpnv6=pulumi.get(__ret__, 'prefix_list_in_vpnv6'),
        prefix_list_out=pulumi.get(__ret__, 'prefix_list_out'),
        prefix_list_out6=pulumi.get(__ret__, 'prefix_list_out6'),
        prefix_list_out_vpnv4=pulumi.get(__ret__, 'prefix_list_out_vpnv4'),
        prefix_list_out_vpnv6=pulumi.get(__ret__, 'prefix_list_out_vpnv6'),
        remote_as=pulumi.get(__ret__, 'remote_as'),
        remove_private_as=pulumi.get(__ret__, 'remove_private_as'),
        remove_private_as6=pulumi.get(__ret__, 'remove_private_as6'),
        remove_private_as_evpn=pulumi.get(__ret__, 'remove_private_as_evpn'),
        remove_private_as_vpnv4=pulumi.get(__ret__, 'remove_private_as_vpnv4'),
        remove_private_as_vpnv6=pulumi.get(__ret__, 'remove_private_as_vpnv6'),
        restart_time=pulumi.get(__ret__, 'restart_time'),
        retain_stale_time=pulumi.get(__ret__, 'retain_stale_time'),
        route_map_in=pulumi.get(__ret__, 'route_map_in'),
        route_map_in6=pulumi.get(__ret__, 'route_map_in6'),
        route_map_in_evpn=pulumi.get(__ret__, 'route_map_in_evpn'),
        route_map_in_vpnv4=pulumi.get(__ret__, 'route_map_in_vpnv4'),
        route_map_in_vpnv6=pulumi.get(__ret__, 'route_map_in_vpnv6'),
        route_map_out=pulumi.get(__ret__, 'route_map_out'),
        route_map_out6=pulumi.get(__ret__, 'route_map_out6'),
        route_map_out6_preferable=pulumi.get(__ret__, 'route_map_out6_preferable'),
        route_map_out_evpn=pulumi.get(__ret__, 'route_map_out_evpn'),
        route_map_out_preferable=pulumi.get(__ret__, 'route_map_out_preferable'),
        route_map_out_vpnv4=pulumi.get(__ret__, 'route_map_out_vpnv4'),
        route_map_out_vpnv4_preferable=pulumi.get(__ret__, 'route_map_out_vpnv4_preferable'),
        route_map_out_vpnv6=pulumi.get(__ret__, 'route_map_out_vpnv6'),
        route_map_out_vpnv6_preferable=pulumi.get(__ret__, 'route_map_out_vpnv6_preferable'),
        route_reflector_client=pulumi.get(__ret__, 'route_reflector_client'),
        route_reflector_client6=pulumi.get(__ret__, 'route_reflector_client6'),
        route_reflector_client_evpn=pulumi.get(__ret__, 'route_reflector_client_evpn'),
        route_reflector_client_vpnv4=pulumi.get(__ret__, 'route_reflector_client_vpnv4'),
        route_reflector_client_vpnv6=pulumi.get(__ret__, 'route_reflector_client_vpnv6'),
        route_server_client=pulumi.get(__ret__, 'route_server_client'),
        route_server_client6=pulumi.get(__ret__, 'route_server_client6'),
        route_server_client_evpn=pulumi.get(__ret__, 'route_server_client_evpn'),
        route_server_client_vpnv4=pulumi.get(__ret__, 'route_server_client_vpnv4'),
        route_server_client_vpnv6=pulumi.get(__ret__, 'route_server_client_vpnv6'),
        send_community=pulumi.get(__ret__, 'send_community'),
        send_community6=pulumi.get(__ret__, 'send_community6'),
        send_community_evpn=pulumi.get(__ret__, 'send_community_evpn'),
        send_community_vpnv4=pulumi.get(__ret__, 'send_community_vpnv4'),
        send_community_vpnv6=pulumi.get(__ret__, 'send_community_vpnv6'),
        shutdown=pulumi.get(__ret__, 'shutdown'),
        soft_reconfiguration=pulumi.get(__ret__, 'soft_reconfiguration'),
        soft_reconfiguration6=pulumi.get(__ret__, 'soft_reconfiguration6'),
        soft_reconfiguration_evpn=pulumi.get(__ret__, 'soft_reconfiguration_evpn'),
        soft_reconfiguration_vpnv4=pulumi.get(__ret__, 'soft_reconfiguration_vpnv4'),
        soft_reconfiguration_vpnv6=pulumi.get(__ret__, 'soft_reconfiguration_vpnv6'),
        stale_route=pulumi.get(__ret__, 'stale_route'),
        strict_capability_match=pulumi.get(__ret__, 'strict_capability_match'),
        unsuppress_map=pulumi.get(__ret__, 'unsuppress_map'),
        unsuppress_map6=pulumi.get(__ret__, 'unsuppress_map6'),
        update_source=pulumi.get(__ret__, 'update_source'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        weight=pulumi.get(__ret__, 'weight'))


@_utilities.lift_output_func(get_neighbor)
def get_neighbor_output(ip: Optional[pulumi.Input[str]] = None,
                        vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNeighborResult]:
    """
    Use this data source to get information on an fortios routerbgp neighbor

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_fortios as fortios

    sample1 = fortios.router.bgp.get_neighbor(ip="21.1.1.12")
    pulumi.export("output1", sample1)
    ```
    <!--End PulumiCodeChooser -->


    :param str ip: Specify the ip of the desired routerbgp neighbor.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
