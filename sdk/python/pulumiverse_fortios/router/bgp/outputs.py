# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'NeighborConditionalAdvertise6',
    'NeighborConditionalAdvertise',
    'GetNeighborConditionalAdvertise6Result',
    'GetNeighborConditionalAdvertiseResult',
]

@pulumi.output_type
class NeighborConditionalAdvertise6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertiseRoutemap":
            suggest = "advertise_routemap"
        elif key == "conditionRoutemap":
            suggest = "condition_routemap"
        elif key == "conditionType":
            suggest = "condition_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NeighborConditionalAdvertise6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NeighborConditionalAdvertise6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NeighborConditionalAdvertise6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertise_routemap: Optional[str] = None,
                 condition_routemap: Optional[str] = None,
                 condition_type: Optional[str] = None):
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[str]:
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[str]:
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[str]:
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class NeighborConditionalAdvertise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertiseRoutemap":
            suggest = "advertise_routemap"
        elif key == "conditionRoutemap":
            suggest = "condition_routemap"
        elif key == "conditionType":
            suggest = "condition_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NeighborConditionalAdvertise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NeighborConditionalAdvertise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NeighborConditionalAdvertise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertise_routemap: Optional[str] = None,
                 condition_routemap: Optional[str] = None,
                 condition_type: Optional[str] = None):
        """
        :param str advertise_routemap: Name of advertising route map.
        :param str condition_routemap: Name of condition route map.
        :param str condition_type: Type of condition. Valid values: `exist`, `non-exist`.
        """
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[str]:
        """
        Name of advertising route map.
        """
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[str]:
        """
        Name of condition route map.
        """
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[str]:
        """
        Type of condition. Valid values: `exist`, `non-exist`.
        """
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class GetNeighborConditionalAdvertise6Result(dict):
    def __init__(__self__, *,
                 advertise_routemap: str,
                 condition_routemap: str,
                 condition_type: str):
        """
        :param str advertise_routemap: Name of advertising route map.
        :param str condition_routemap: Name of condition route map.
        :param str condition_type: Type of condition.
        """
        pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        pulumi.set(__self__, "condition_routemap", condition_routemap)
        pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> str:
        """
        Name of advertising route map.
        """
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> str:
        """
        Name of condition route map.
        """
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        """
        Type of condition.
        """
        return pulumi.get(self, "condition_type")


@pulumi.output_type
class GetNeighborConditionalAdvertiseResult(dict):
    def __init__(__self__, *,
                 advertise_routemap: str,
                 condition_routemap: str,
                 condition_type: str):
        """
        :param str advertise_routemap: Name of advertising route map.
        :param str condition_routemap: Name of condition route map.
        :param str condition_type: Type of condition.
        """
        pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        pulumi.set(__self__, "condition_routemap", condition_routemap)
        pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> str:
        """
        Name of advertising route map.
        """
        return pulumi.get(self, "advertise_routemap")

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> str:
        """
        Name of condition route map.
        """
        return pulumi.get(self, "condition_routemap")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> str:
        """
        Type of condition.
        """
        return pulumi.get(self, "condition_type")


