# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BgpArgs', 'Bgp']

@pulumi.input_type
class BgpArgs:
    def __init__(__self__, *,
                 as_: pulumi.Input[int],
                 additional_path: Optional[pulumi.Input[str]] = None,
                 additional_path6: Optional[pulumi.Input[str]] = None,
                 additional_path_select: Optional[pulumi.Input[int]] = None,
                 additional_path_select6: Optional[pulumi.Input[int]] = None,
                 additional_path_select_vpnv4: Optional[pulumi.Input[int]] = None,
                 additional_path_select_vpnv6: Optional[pulumi.Input[int]] = None,
                 additional_path_vpnv4: Optional[pulumi.Input[str]] = None,
                 additional_path_vpnv6: Optional[pulumi.Input[str]] = None,
                 admin_distances: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAdminDistanceArgs']]]] = None,
                 aggregate_address6s: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddress6Args']]]] = None,
                 aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddressArgs']]]] = None,
                 always_compare_med: Optional[pulumi.Input[str]] = None,
                 as_string: Optional[pulumi.Input[str]] = None,
                 bestpath_as_path_ignore: Optional[pulumi.Input[str]] = None,
                 bestpath_cmp_confed_aspath: Optional[pulumi.Input[str]] = None,
                 bestpath_cmp_routerid: Optional[pulumi.Input[str]] = None,
                 bestpath_med_confed: Optional[pulumi.Input[str]] = None,
                 bestpath_med_missing_as_worst: Optional[pulumi.Input[str]] = None,
                 client_to_client_reflection: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 confederation_identifier: Optional[pulumi.Input[int]] = None,
                 confederation_peers: Optional[pulumi.Input[Sequence[pulumi.Input['BgpConfederationPeerArgs']]]] = None,
                 cross_family_conditional_adv: Optional[pulumi.Input[str]] = None,
                 dampening: Optional[pulumi.Input[str]] = None,
                 dampening_max_suppress_time: Optional[pulumi.Input[int]] = None,
                 dampening_reachability_half_life: Optional[pulumi.Input[int]] = None,
                 dampening_reuse: Optional[pulumi.Input[int]] = None,
                 dampening_route_map: Optional[pulumi.Input[str]] = None,
                 dampening_suppress: Optional[pulumi.Input[int]] = None,
                 dampening_unreachability_half_life: Optional[pulumi.Input[int]] = None,
                 default_local_preference: Optional[pulumi.Input[int]] = None,
                 deterministic_med: Optional[pulumi.Input[str]] = None,
                 distance_external: Optional[pulumi.Input[int]] = None,
                 distance_internal: Optional[pulumi.Input[int]] = None,
                 distance_local: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ebgp_multipath: Optional[pulumi.Input[str]] = None,
                 enforce_first_as: Optional[pulumi.Input[str]] = None,
                 fast_external_failover: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 graceful_end_on_timer: Optional[pulumi.Input[str]] = None,
                 graceful_restart: Optional[pulumi.Input[str]] = None,
                 graceful_restart_time: Optional[pulumi.Input[int]] = None,
                 graceful_stalepath_time: Optional[pulumi.Input[int]] = None,
                 graceful_update_delay: Optional[pulumi.Input[int]] = None,
                 holdtime_timer: Optional[pulumi.Input[int]] = None,
                 ibgp_multipath: Optional[pulumi.Input[str]] = None,
                 ignore_optional_capability: Optional[pulumi.Input[str]] = None,
                 keepalive_timer: Optional[pulumi.Input[int]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 multipath_recursive_distance: Optional[pulumi.Input[str]] = None,
                 neighbor_groups: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborGroupArgs']]]] = None,
                 neighbor_range6s: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborRange6Args']]]] = None,
                 neighbor_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborRangeArgs']]]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborArgs']]]] = None,
                 network6s: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNetwork6Args']]]] = None,
                 network_import_check: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNetworkArgs']]]] = None,
                 recursive_inherit_priority: Optional[pulumi.Input[str]] = None,
                 recursive_next_hop: Optional[pulumi.Input[str]] = None,
                 redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input['BgpRedistribute6Args']]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['BgpRedistributeArgs']]]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 scan_time: Optional[pulumi.Input[int]] = None,
                 synchronization: Optional[pulumi.Input[str]] = None,
                 tag_resolve_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vrf6s: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrf6Args']]]] = None,
                 vrf_leak6s: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfLeak6Args']]]] = None,
                 vrf_leaks: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfLeakArgs']]]] = None,
                 vrves: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfArgs']]]] = None):
        """
        The set of arguments for constructing a Bgp resource.
        :param pulumi.Input[int] as_: Router AS number, valid from 1 to 4294967295, 0 to disable BGP.
        :param pulumi.Input[str] additional_path: Enable/disable selection of BGP IPv4 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] additional_path6: Enable/disable selection of BGP IPv6 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] additional_path_select: Number of additional paths to be selected for each IPv4 NLRI.
        :param pulumi.Input[int] additional_path_select6: Number of additional paths to be selected for each IPv6 NLRI.
        :param pulumi.Input[int] additional_path_select_vpnv4: Number of additional paths to be selected for each VPNv4 NLRI.
        :param pulumi.Input[int] additional_path_select_vpnv6: Number of additional paths to be selected for each VPNv6 NLRI.
        :param pulumi.Input[str] additional_path_vpnv4: Enable/disable selection of BGP VPNv4 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] additional_path_vpnv6: Enable/disable selection of BGP VPNv6 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['BgpAdminDistanceArgs']]] admin_distances: Administrative distance modifications. The structure of `admin_distance` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddress6Args']]] aggregate_address6s: BGP IPv6 aggregate address table. The structure of `aggregate_address6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddressArgs']]] aggregate_addresses: BGP aggregate address table. The structure of `aggregate_address` block is documented below.
        :param pulumi.Input[str] always_compare_med: Enable/disable always compare MED. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] as_string: Router AS number, asplain/asdot/asdot+ format, 0 to disable BGP.
        :param pulumi.Input[str] bestpath_as_path_ignore: Enable/disable ignore AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_cmp_confed_aspath: Enable/disable compare federation AS path length. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_cmp_routerid: Enable/disable compare router ID for identical EBGP paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_med_confed: Enable/disable compare MED among confederation paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_med_missing_as_worst: Enable/disable treat missing MED as least preferred. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] client_to_client_reflection: Enable/disable client-to-client route reflection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cluster_id: Route reflector cluster ID.
        :param pulumi.Input[int] confederation_identifier: Confederation identifier.
        :param pulumi.Input[Sequence[pulumi.Input['BgpConfederationPeerArgs']]] confederation_peers: Confederation peers. The structure of `confederation_peers` block is documented below.
        :param pulumi.Input[str] cross_family_conditional_adv: Enable/disable cross address family conditional advertisement. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dampening: Enable/disable route-flap dampening. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] dampening_max_suppress_time: Maximum minutes a route can be suppressed.
        :param pulumi.Input[int] dampening_reachability_half_life: Reachability half-life time for penalty (min).
        :param pulumi.Input[int] dampening_reuse: Threshold to reuse routes.
        :param pulumi.Input[str] dampening_route_map: Criteria for dampening.
        :param pulumi.Input[int] dampening_suppress: Threshold to suppress routes.
        :param pulumi.Input[int] dampening_unreachability_half_life: Unreachability half-life time for penalty (min).
        :param pulumi.Input[int] default_local_preference: Default local preference.
        :param pulumi.Input[str] deterministic_med: Enable/disable enforce deterministic comparison of MED. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] distance_external: Distance for routes external to the AS.
        :param pulumi.Input[int] distance_internal: Distance for routes internal to the AS.
        :param pulumi.Input[int] distance_local: Distance for routes local to the AS.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ebgp_multipath: Enable/disable EBGP multi-path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] enforce_first_as: Enable/disable enforce first AS for EBGP routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fast_external_failover: Enable/disable reset peer BGP session if link goes down. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] graceful_end_on_timer: Enable/disable to exit graceful restart on timer only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] graceful_restart: Enable/disable BGP graceful restart capabilities. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] graceful_restart_time: Time needed for neighbors to restart (sec).
        :param pulumi.Input[int] graceful_stalepath_time: Time to hold stale paths of restarting neighbor (sec).
        :param pulumi.Input[int] graceful_update_delay: Route advertisement/selection delay after restart (sec).
        :param pulumi.Input[int] holdtime_timer: Number of seconds to mark peer as dead.
        :param pulumi.Input[str] ibgp_multipath: Enable/disable IBGP multi-path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ignore_optional_capability: Don't send unknown optional capability notification message Valid values: `enable`, `disable`.
        :param pulumi.Input[int] keepalive_timer: Frequency to send keep alive requests.
        :param pulumi.Input[str] log_neighbour_changes: Enable logging of BGP neighbour's changes Valid values: `enable`, `disable`.
        :param pulumi.Input[str] multipath_recursive_distance: Enable/disable use of recursive distance to select multipath. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['BgpNeighborGroupArgs']]] neighbor_groups: BGP neighbor group table. The structure of `neighbor_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpNeighborRange6Args']]] neighbor_range6s: BGP IPv6 neighbor range table. The structure of `neighbor_range6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpNeighborRangeArgs']]] neighbor_ranges: BGP neighbor range table. The structure of `neighbor_range` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpNeighborArgs']]] neighbors: BGP neighbor table. The structure of `neighbor` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpNetwork6Args']]] network6s: BGP IPv6 network table. The structure of `network6` block is documented below.
        :param pulumi.Input[str] network_import_check: Enable/disable ensure BGP network route exists in IGP. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['BgpNetworkArgs']]] networks: BGP network table. The structure of `network` block is documented below.
        :param pulumi.Input[str] recursive_inherit_priority: Enable/disable priority inheritance for recursive resolution. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] recursive_next_hop: Enable/disable recursive resolution of next-hop using BGP route. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['BgpRedistribute6Args']]] redistribute6s: BGP IPv6 redistribute table. The structure of `redistribute6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpRedistributeArgs']]] redistributes: BGP IPv4 redistribute table. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] router_id: Router ID.
        :param pulumi.Input[int] scan_time: Background scanner interval (sec), 0 to disable it.
        :param pulumi.Input[str] synchronization: Enable/disable only advertise routes from iBGP if routes present in an IGP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tag_resolve_mode: Configure tag-match mode. Resolves BGP routes with other routes containing the same tag. Valid values: `disable`, `preferred`, `merge`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input['BgpVrf6Args']]] vrf6s: BGP IPv6 VRF leaking table. The structure of `vrf6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpVrfLeak6Args']]] vrf_leak6s: BGP IPv6 VRF leaking table. The structure of `vrf_leak6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpVrfLeakArgs']]] vrf_leaks: BGP VRF leaking table. The structure of `vrf_leak` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpVrfArgs']]] vrves: BGP VRF leaking table. The structure of `vrf` block is documented below.
        """
        pulumi.set(__self__, "as_", as_)
        if additional_path is not None:
            pulumi.set(__self__, "additional_path", additional_path)
        if additional_path6 is not None:
            pulumi.set(__self__, "additional_path6", additional_path6)
        if additional_path_select is not None:
            pulumi.set(__self__, "additional_path_select", additional_path_select)
        if additional_path_select6 is not None:
            pulumi.set(__self__, "additional_path_select6", additional_path_select6)
        if additional_path_select_vpnv4 is not None:
            pulumi.set(__self__, "additional_path_select_vpnv4", additional_path_select_vpnv4)
        if additional_path_select_vpnv6 is not None:
            pulumi.set(__self__, "additional_path_select_vpnv6", additional_path_select_vpnv6)
        if additional_path_vpnv4 is not None:
            pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        if additional_path_vpnv6 is not None:
            pulumi.set(__self__, "additional_path_vpnv6", additional_path_vpnv6)
        if admin_distances is not None:
            pulumi.set(__self__, "admin_distances", admin_distances)
        if aggregate_address6s is not None:
            pulumi.set(__self__, "aggregate_address6s", aggregate_address6s)
        if aggregate_addresses is not None:
            pulumi.set(__self__, "aggregate_addresses", aggregate_addresses)
        if always_compare_med is not None:
            pulumi.set(__self__, "always_compare_med", always_compare_med)
        if as_string is not None:
            pulumi.set(__self__, "as_string", as_string)
        if bestpath_as_path_ignore is not None:
            pulumi.set(__self__, "bestpath_as_path_ignore", bestpath_as_path_ignore)
        if bestpath_cmp_confed_aspath is not None:
            pulumi.set(__self__, "bestpath_cmp_confed_aspath", bestpath_cmp_confed_aspath)
        if bestpath_cmp_routerid is not None:
            pulumi.set(__self__, "bestpath_cmp_routerid", bestpath_cmp_routerid)
        if bestpath_med_confed is not None:
            pulumi.set(__self__, "bestpath_med_confed", bestpath_med_confed)
        if bestpath_med_missing_as_worst is not None:
            pulumi.set(__self__, "bestpath_med_missing_as_worst", bestpath_med_missing_as_worst)
        if client_to_client_reflection is not None:
            pulumi.set(__self__, "client_to_client_reflection", client_to_client_reflection)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if confederation_identifier is not None:
            pulumi.set(__self__, "confederation_identifier", confederation_identifier)
        if confederation_peers is not None:
            pulumi.set(__self__, "confederation_peers", confederation_peers)
        if cross_family_conditional_adv is not None:
            pulumi.set(__self__, "cross_family_conditional_adv", cross_family_conditional_adv)
        if dampening is not None:
            pulumi.set(__self__, "dampening", dampening)
        if dampening_max_suppress_time is not None:
            pulumi.set(__self__, "dampening_max_suppress_time", dampening_max_suppress_time)
        if dampening_reachability_half_life is not None:
            pulumi.set(__self__, "dampening_reachability_half_life", dampening_reachability_half_life)
        if dampening_reuse is not None:
            pulumi.set(__self__, "dampening_reuse", dampening_reuse)
        if dampening_route_map is not None:
            pulumi.set(__self__, "dampening_route_map", dampening_route_map)
        if dampening_suppress is not None:
            pulumi.set(__self__, "dampening_suppress", dampening_suppress)
        if dampening_unreachability_half_life is not None:
            pulumi.set(__self__, "dampening_unreachability_half_life", dampening_unreachability_half_life)
        if default_local_preference is not None:
            pulumi.set(__self__, "default_local_preference", default_local_preference)
        if deterministic_med is not None:
            pulumi.set(__self__, "deterministic_med", deterministic_med)
        if distance_external is not None:
            pulumi.set(__self__, "distance_external", distance_external)
        if distance_internal is not None:
            pulumi.set(__self__, "distance_internal", distance_internal)
        if distance_local is not None:
            pulumi.set(__self__, "distance_local", distance_local)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ebgp_multipath is not None:
            pulumi.set(__self__, "ebgp_multipath", ebgp_multipath)
        if enforce_first_as is not None:
            pulumi.set(__self__, "enforce_first_as", enforce_first_as)
        if fast_external_failover is not None:
            pulumi.set(__self__, "fast_external_failover", fast_external_failover)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if graceful_end_on_timer is not None:
            pulumi.set(__self__, "graceful_end_on_timer", graceful_end_on_timer)
        if graceful_restart is not None:
            pulumi.set(__self__, "graceful_restart", graceful_restart)
        if graceful_restart_time is not None:
            pulumi.set(__self__, "graceful_restart_time", graceful_restart_time)
        if graceful_stalepath_time is not None:
            pulumi.set(__self__, "graceful_stalepath_time", graceful_stalepath_time)
        if graceful_update_delay is not None:
            pulumi.set(__self__, "graceful_update_delay", graceful_update_delay)
        if holdtime_timer is not None:
            pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        if ibgp_multipath is not None:
            pulumi.set(__self__, "ibgp_multipath", ibgp_multipath)
        if ignore_optional_capability is not None:
            pulumi.set(__self__, "ignore_optional_capability", ignore_optional_capability)
        if keepalive_timer is not None:
            pulumi.set(__self__, "keepalive_timer", keepalive_timer)
        if log_neighbour_changes is not None:
            pulumi.set(__self__, "log_neighbour_changes", log_neighbour_changes)
        if multipath_recursive_distance is not None:
            pulumi.set(__self__, "multipath_recursive_distance", multipath_recursive_distance)
        if neighbor_groups is not None:
            pulumi.set(__self__, "neighbor_groups", neighbor_groups)
        if neighbor_range6s is not None:
            pulumi.set(__self__, "neighbor_range6s", neighbor_range6s)
        if neighbor_ranges is not None:
            pulumi.set(__self__, "neighbor_ranges", neighbor_ranges)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if network6s is not None:
            pulumi.set(__self__, "network6s", network6s)
        if network_import_check is not None:
            pulumi.set(__self__, "network_import_check", network_import_check)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if recursive_inherit_priority is not None:
            pulumi.set(__self__, "recursive_inherit_priority", recursive_inherit_priority)
        if recursive_next_hop is not None:
            pulumi.set(__self__, "recursive_next_hop", recursive_next_hop)
        if redistribute6s is not None:
            pulumi.set(__self__, "redistribute6s", redistribute6s)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if scan_time is not None:
            pulumi.set(__self__, "scan_time", scan_time)
        if synchronization is not None:
            pulumi.set(__self__, "synchronization", synchronization)
        if tag_resolve_mode is not None:
            pulumi.set(__self__, "tag_resolve_mode", tag_resolve_mode)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vrf6s is not None:
            pulumi.set(__self__, "vrf6s", vrf6s)
        if vrf_leak6s is not None:
            pulumi.set(__self__, "vrf_leak6s", vrf_leak6s)
        if vrf_leaks is not None:
            pulumi.set(__self__, "vrf_leaks", vrf_leaks)
        if vrves is not None:
            pulumi.set(__self__, "vrves", vrves)

    @property
    @pulumi.getter(name="as")
    def as_(self) -> pulumi.Input[int]:
        """
        Router AS number, valid from 1 to 4294967295, 0 to disable BGP.
        """
        return pulumi.get(self, "as_")

    @as_.setter
    def as_(self, value: pulumi.Input[int]):
        pulumi.set(self, "as_", value)

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable selection of BGP IPv4 additional paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "additional_path")

    @additional_path.setter
    def additional_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path", value)

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable selection of BGP IPv6 additional paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "additional_path6")

    @additional_path6.setter
    def additional_path6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path6", value)

    @property
    @pulumi.getter(name="additionalPathSelect")
    def additional_path_select(self) -> Optional[pulumi.Input[int]]:
        """
        Number of additional paths to be selected for each IPv4 NLRI.
        """
        return pulumi.get(self, "additional_path_select")

    @additional_path_select.setter
    def additional_path_select(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "additional_path_select", value)

    @property
    @pulumi.getter(name="additionalPathSelect6")
    def additional_path_select6(self) -> Optional[pulumi.Input[int]]:
        """
        Number of additional paths to be selected for each IPv6 NLRI.
        """
        return pulumi.get(self, "additional_path_select6")

    @additional_path_select6.setter
    def additional_path_select6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "additional_path_select6", value)

    @property
    @pulumi.getter(name="additionalPathSelectVpnv4")
    def additional_path_select_vpnv4(self) -> Optional[pulumi.Input[int]]:
        """
        Number of additional paths to be selected for each VPNv4 NLRI.
        """
        return pulumi.get(self, "additional_path_select_vpnv4")

    @additional_path_select_vpnv4.setter
    def additional_path_select_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "additional_path_select_vpnv4", value)

    @property
    @pulumi.getter(name="additionalPathSelectVpnv6")
    def additional_path_select_vpnv6(self) -> Optional[pulumi.Input[int]]:
        """
        Number of additional paths to be selected for each VPNv6 NLRI.
        """
        return pulumi.get(self, "additional_path_select_vpnv6")

    @additional_path_select_vpnv6.setter
    def additional_path_select_vpnv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "additional_path_select_vpnv6", value)

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable selection of BGP VPNv4 additional paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv4")

    @additional_path_vpnv4.setter
    def additional_path_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path_vpnv4", value)

    @property
    @pulumi.getter(name="additionalPathVpnv6")
    def additional_path_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable selection of BGP VPNv6 additional paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv6")

    @additional_path_vpnv6.setter
    def additional_path_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path_vpnv6", value)

    @property
    @pulumi.getter(name="adminDistances")
    def admin_distances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpAdminDistanceArgs']]]]:
        """
        Administrative distance modifications. The structure of `admin_distance` block is documented below.
        """
        return pulumi.get(self, "admin_distances")

    @admin_distances.setter
    def admin_distances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAdminDistanceArgs']]]]):
        pulumi.set(self, "admin_distances", value)

    @property
    @pulumi.getter(name="aggregateAddress6s")
    def aggregate_address6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddress6Args']]]]:
        """
        BGP IPv6 aggregate address table. The structure of `aggregate_address6` block is documented below.
        """
        return pulumi.get(self, "aggregate_address6s")

    @aggregate_address6s.setter
    def aggregate_address6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddress6Args']]]]):
        pulumi.set(self, "aggregate_address6s", value)

    @property
    @pulumi.getter(name="aggregateAddresses")
    def aggregate_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddressArgs']]]]:
        """
        BGP aggregate address table. The structure of `aggregate_address` block is documented below.
        """
        return pulumi.get(self, "aggregate_addresses")

    @aggregate_addresses.setter
    def aggregate_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddressArgs']]]]):
        pulumi.set(self, "aggregate_addresses", value)

    @property
    @pulumi.getter(name="alwaysCompareMed")
    def always_compare_med(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable always compare MED. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "always_compare_med")

    @always_compare_med.setter
    def always_compare_med(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "always_compare_med", value)

    @property
    @pulumi.getter(name="asString")
    def as_string(self) -> Optional[pulumi.Input[str]]:
        """
        Router AS number, asplain/asdot/asdot+ format, 0 to disable BGP.
        """
        return pulumi.get(self, "as_string")

    @as_string.setter
    def as_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_string", value)

    @property
    @pulumi.getter(name="bestpathAsPathIgnore")
    def bestpath_as_path_ignore(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ignore AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_as_path_ignore")

    @bestpath_as_path_ignore.setter
    def bestpath_as_path_ignore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bestpath_as_path_ignore", value)

    @property
    @pulumi.getter(name="bestpathCmpConfedAspath")
    def bestpath_cmp_confed_aspath(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable compare federation AS path length. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_cmp_confed_aspath")

    @bestpath_cmp_confed_aspath.setter
    def bestpath_cmp_confed_aspath(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bestpath_cmp_confed_aspath", value)

    @property
    @pulumi.getter(name="bestpathCmpRouterid")
    def bestpath_cmp_routerid(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable compare router ID for identical EBGP paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_cmp_routerid")

    @bestpath_cmp_routerid.setter
    def bestpath_cmp_routerid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bestpath_cmp_routerid", value)

    @property
    @pulumi.getter(name="bestpathMedConfed")
    def bestpath_med_confed(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable compare MED among confederation paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_med_confed")

    @bestpath_med_confed.setter
    def bestpath_med_confed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bestpath_med_confed", value)

    @property
    @pulumi.getter(name="bestpathMedMissingAsWorst")
    def bestpath_med_missing_as_worst(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable treat missing MED as least preferred. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_med_missing_as_worst")

    @bestpath_med_missing_as_worst.setter
    def bestpath_med_missing_as_worst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bestpath_med_missing_as_worst", value)

    @property
    @pulumi.getter(name="clientToClientReflection")
    def client_to_client_reflection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable client-to-client route reflection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "client_to_client_reflection")

    @client_to_client_reflection.setter
    def client_to_client_reflection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_to_client_reflection", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Route reflector cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="confederationIdentifier")
    def confederation_identifier(self) -> Optional[pulumi.Input[int]]:
        """
        Confederation identifier.
        """
        return pulumi.get(self, "confederation_identifier")

    @confederation_identifier.setter
    def confederation_identifier(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "confederation_identifier", value)

    @property
    @pulumi.getter(name="confederationPeers")
    def confederation_peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpConfederationPeerArgs']]]]:
        """
        Confederation peers. The structure of `confederation_peers` block is documented below.
        """
        return pulumi.get(self, "confederation_peers")

    @confederation_peers.setter
    def confederation_peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpConfederationPeerArgs']]]]):
        pulumi.set(self, "confederation_peers", value)

    @property
    @pulumi.getter(name="crossFamilyConditionalAdv")
    def cross_family_conditional_adv(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable cross address family conditional advertisement. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cross_family_conditional_adv")

    @cross_family_conditional_adv.setter
    def cross_family_conditional_adv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cross_family_conditional_adv", value)

    @property
    @pulumi.getter
    def dampening(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable route-flap dampening. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dampening")

    @dampening.setter
    def dampening(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dampening", value)

    @property
    @pulumi.getter(name="dampeningMaxSuppressTime")
    def dampening_max_suppress_time(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum minutes a route can be suppressed.
        """
        return pulumi.get(self, "dampening_max_suppress_time")

    @dampening_max_suppress_time.setter
    def dampening_max_suppress_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dampening_max_suppress_time", value)

    @property
    @pulumi.getter(name="dampeningReachabilityHalfLife")
    def dampening_reachability_half_life(self) -> Optional[pulumi.Input[int]]:
        """
        Reachability half-life time for penalty (min).
        """
        return pulumi.get(self, "dampening_reachability_half_life")

    @dampening_reachability_half_life.setter
    def dampening_reachability_half_life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dampening_reachability_half_life", value)

    @property
    @pulumi.getter(name="dampeningReuse")
    def dampening_reuse(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold to reuse routes.
        """
        return pulumi.get(self, "dampening_reuse")

    @dampening_reuse.setter
    def dampening_reuse(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dampening_reuse", value)

    @property
    @pulumi.getter(name="dampeningRouteMap")
    def dampening_route_map(self) -> Optional[pulumi.Input[str]]:
        """
        Criteria for dampening.
        """
        return pulumi.get(self, "dampening_route_map")

    @dampening_route_map.setter
    def dampening_route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dampening_route_map", value)

    @property
    @pulumi.getter(name="dampeningSuppress")
    def dampening_suppress(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold to suppress routes.
        """
        return pulumi.get(self, "dampening_suppress")

    @dampening_suppress.setter
    def dampening_suppress(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dampening_suppress", value)

    @property
    @pulumi.getter(name="dampeningUnreachabilityHalfLife")
    def dampening_unreachability_half_life(self) -> Optional[pulumi.Input[int]]:
        """
        Unreachability half-life time for penalty (min).
        """
        return pulumi.get(self, "dampening_unreachability_half_life")

    @dampening_unreachability_half_life.setter
    def dampening_unreachability_half_life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dampening_unreachability_half_life", value)

    @property
    @pulumi.getter(name="defaultLocalPreference")
    def default_local_preference(self) -> Optional[pulumi.Input[int]]:
        """
        Default local preference.
        """
        return pulumi.get(self, "default_local_preference")

    @default_local_preference.setter
    def default_local_preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_local_preference", value)

    @property
    @pulumi.getter(name="deterministicMed")
    def deterministic_med(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforce deterministic comparison of MED. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "deterministic_med")

    @deterministic_med.setter
    def deterministic_med(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deterministic_med", value)

    @property
    @pulumi.getter(name="distanceExternal")
    def distance_external(self) -> Optional[pulumi.Input[int]]:
        """
        Distance for routes external to the AS.
        """
        return pulumi.get(self, "distance_external")

    @distance_external.setter
    def distance_external(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance_external", value)

    @property
    @pulumi.getter(name="distanceInternal")
    def distance_internal(self) -> Optional[pulumi.Input[int]]:
        """
        Distance for routes internal to the AS.
        """
        return pulumi.get(self, "distance_internal")

    @distance_internal.setter
    def distance_internal(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance_internal", value)

    @property
    @pulumi.getter(name="distanceLocal")
    def distance_local(self) -> Optional[pulumi.Input[int]]:
        """
        Distance for routes local to the AS.
        """
        return pulumi.get(self, "distance_local")

    @distance_local.setter
    def distance_local(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance_local", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="ebgpMultipath")
    def ebgp_multipath(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable EBGP multi-path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ebgp_multipath")

    @ebgp_multipath.setter
    def ebgp_multipath(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ebgp_multipath", value)

    @property
    @pulumi.getter(name="enforceFirstAs")
    def enforce_first_as(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforce first AS for EBGP routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "enforce_first_as")

    @enforce_first_as.setter
    def enforce_first_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_first_as", value)

    @property
    @pulumi.getter(name="fastExternalFailover")
    def fast_external_failover(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable reset peer BGP session if link goes down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fast_external_failover")

    @fast_external_failover.setter
    def fast_external_failover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fast_external_failover", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="gracefulEndOnTimer")
    def graceful_end_on_timer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to exit graceful restart on timer only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "graceful_end_on_timer")

    @graceful_end_on_timer.setter
    def graceful_end_on_timer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graceful_end_on_timer", value)

    @property
    @pulumi.getter(name="gracefulRestart")
    def graceful_restart(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable BGP graceful restart capabilities. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "graceful_restart")

    @graceful_restart.setter
    def graceful_restart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graceful_restart", value)

    @property
    @pulumi.getter(name="gracefulRestartTime")
    def graceful_restart_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time needed for neighbors to restart (sec).
        """
        return pulumi.get(self, "graceful_restart_time")

    @graceful_restart_time.setter
    def graceful_restart_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "graceful_restart_time", value)

    @property
    @pulumi.getter(name="gracefulStalepathTime")
    def graceful_stalepath_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time to hold stale paths of restarting neighbor (sec).
        """
        return pulumi.get(self, "graceful_stalepath_time")

    @graceful_stalepath_time.setter
    def graceful_stalepath_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "graceful_stalepath_time", value)

    @property
    @pulumi.getter(name="gracefulUpdateDelay")
    def graceful_update_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Route advertisement/selection delay after restart (sec).
        """
        return pulumi.get(self, "graceful_update_delay")

    @graceful_update_delay.setter
    def graceful_update_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "graceful_update_delay", value)

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds to mark peer as dead.
        """
        return pulumi.get(self, "holdtime_timer")

    @holdtime_timer.setter
    def holdtime_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holdtime_timer", value)

    @property
    @pulumi.getter(name="ibgpMultipath")
    def ibgp_multipath(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IBGP multi-path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ibgp_multipath")

    @ibgp_multipath.setter
    def ibgp_multipath(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibgp_multipath", value)

    @property
    @pulumi.getter(name="ignoreOptionalCapability")
    def ignore_optional_capability(self) -> Optional[pulumi.Input[str]]:
        """
        Don't send unknown optional capability notification message Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ignore_optional_capability")

    @ignore_optional_capability.setter
    def ignore_optional_capability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_optional_capability", value)

    @property
    @pulumi.getter(name="keepaliveTimer")
    def keepalive_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency to send keep alive requests.
        """
        return pulumi.get(self, "keepalive_timer")

    @keepalive_timer.setter
    def keepalive_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive_timer", value)

    @property
    @pulumi.getter(name="logNeighbourChanges")
    def log_neighbour_changes(self) -> Optional[pulumi.Input[str]]:
        """
        Enable logging of BGP neighbour's changes Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_neighbour_changes")

    @log_neighbour_changes.setter
    def log_neighbour_changes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_neighbour_changes", value)

    @property
    @pulumi.getter(name="multipathRecursiveDistance")
    def multipath_recursive_distance(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of recursive distance to select multipath. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "multipath_recursive_distance")

    @multipath_recursive_distance.setter
    def multipath_recursive_distance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multipath_recursive_distance", value)

    @property
    @pulumi.getter(name="neighborGroups")
    def neighbor_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborGroupArgs']]]]:
        """
        BGP neighbor group table. The structure of `neighbor_group` block is documented below.
        """
        return pulumi.get(self, "neighbor_groups")

    @neighbor_groups.setter
    def neighbor_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborGroupArgs']]]]):
        pulumi.set(self, "neighbor_groups", value)

    @property
    @pulumi.getter(name="neighborRange6s")
    def neighbor_range6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborRange6Args']]]]:
        """
        BGP IPv6 neighbor range table. The structure of `neighbor_range6` block is documented below.
        """
        return pulumi.get(self, "neighbor_range6s")

    @neighbor_range6s.setter
    def neighbor_range6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborRange6Args']]]]):
        pulumi.set(self, "neighbor_range6s", value)

    @property
    @pulumi.getter(name="neighborRanges")
    def neighbor_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborRangeArgs']]]]:
        """
        BGP neighbor range table. The structure of `neighbor_range` block is documented below.
        """
        return pulumi.get(self, "neighbor_ranges")

    @neighbor_ranges.setter
    def neighbor_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborRangeArgs']]]]):
        pulumi.set(self, "neighbor_ranges", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborArgs']]]]:
        """
        BGP neighbor table. The structure of `neighbor` block is documented below.
        """
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter
    def network6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpNetwork6Args']]]]:
        """
        BGP IPv6 network table. The structure of `network6` block is documented below.
        """
        return pulumi.get(self, "network6s")

    @network6s.setter
    def network6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNetwork6Args']]]]):
        pulumi.set(self, "network6s", value)

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ensure BGP network route exists in IGP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "network_import_check")

    @network_import_check.setter
    def network_import_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_import_check", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpNetworkArgs']]]]:
        """
        BGP network table. The structure of `network` block is documented below.
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="recursiveInheritPriority")
    def recursive_inherit_priority(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable priority inheritance for recursive resolution. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "recursive_inherit_priority")

    @recursive_inherit_priority.setter
    def recursive_inherit_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recursive_inherit_priority", value)

    @property
    @pulumi.getter(name="recursiveNextHop")
    def recursive_next_hop(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable recursive resolution of next-hop using BGP route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "recursive_next_hop")

    @recursive_next_hop.setter
    def recursive_next_hop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recursive_next_hop", value)

    @property
    @pulumi.getter
    def redistribute6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpRedistribute6Args']]]]:
        """
        BGP IPv6 redistribute table. The structure of `redistribute6` block is documented below.
        """
        return pulumi.get(self, "redistribute6s")

    @redistribute6s.setter
    def redistribute6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpRedistribute6Args']]]]):
        pulumi.set(self, "redistribute6s", value)

    @property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpRedistributeArgs']]]]:
        """
        BGP IPv4 redistribute table. The structure of `redistribute` block is documented below.
        """
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        Router ID.
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="scanTime")
    def scan_time(self) -> Optional[pulumi.Input[int]]:
        """
        Background scanner interval (sec), 0 to disable it.
        """
        return pulumi.get(self, "scan_time")

    @scan_time.setter
    def scan_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scan_time", value)

    @property
    @pulumi.getter
    def synchronization(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable only advertise routes from iBGP if routes present in an IGP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "synchronization")

    @synchronization.setter
    def synchronization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "synchronization", value)

    @property
    @pulumi.getter(name="tagResolveMode")
    def tag_resolve_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure tag-match mode. Resolves BGP routes with other routes containing the same tag. Valid values: `disable`, `preferred`, `merge`.
        """
        return pulumi.get(self, "tag_resolve_mode")

    @tag_resolve_mode.setter
    def tag_resolve_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_resolve_mode", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vrf6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrf6Args']]]]:
        """
        BGP IPv6 VRF leaking table. The structure of `vrf6` block is documented below.
        """
        return pulumi.get(self, "vrf6s")

    @vrf6s.setter
    def vrf6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrf6Args']]]]):
        pulumi.set(self, "vrf6s", value)

    @property
    @pulumi.getter(name="vrfLeak6s")
    def vrf_leak6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfLeak6Args']]]]:
        """
        BGP IPv6 VRF leaking table. The structure of `vrf_leak6` block is documented below.
        """
        return pulumi.get(self, "vrf_leak6s")

    @vrf_leak6s.setter
    def vrf_leak6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfLeak6Args']]]]):
        pulumi.set(self, "vrf_leak6s", value)

    @property
    @pulumi.getter(name="vrfLeaks")
    def vrf_leaks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfLeakArgs']]]]:
        """
        BGP VRF leaking table. The structure of `vrf_leak` block is documented below.
        """
        return pulumi.get(self, "vrf_leaks")

    @vrf_leaks.setter
    def vrf_leaks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfLeakArgs']]]]):
        pulumi.set(self, "vrf_leaks", value)

    @property
    @pulumi.getter
    def vrves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfArgs']]]]:
        """
        BGP VRF leaking table. The structure of `vrf` block is documented below.
        """
        return pulumi.get(self, "vrves")

    @vrves.setter
    def vrves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfArgs']]]]):
        pulumi.set(self, "vrves", value)


@pulumi.input_type
class _BgpState:
    def __init__(__self__, *,
                 additional_path: Optional[pulumi.Input[str]] = None,
                 additional_path6: Optional[pulumi.Input[str]] = None,
                 additional_path_select: Optional[pulumi.Input[int]] = None,
                 additional_path_select6: Optional[pulumi.Input[int]] = None,
                 additional_path_select_vpnv4: Optional[pulumi.Input[int]] = None,
                 additional_path_select_vpnv6: Optional[pulumi.Input[int]] = None,
                 additional_path_vpnv4: Optional[pulumi.Input[str]] = None,
                 additional_path_vpnv6: Optional[pulumi.Input[str]] = None,
                 admin_distances: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAdminDistanceArgs']]]] = None,
                 aggregate_address6s: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddress6Args']]]] = None,
                 aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddressArgs']]]] = None,
                 always_compare_med: Optional[pulumi.Input[str]] = None,
                 as_: Optional[pulumi.Input[int]] = None,
                 as_string: Optional[pulumi.Input[str]] = None,
                 bestpath_as_path_ignore: Optional[pulumi.Input[str]] = None,
                 bestpath_cmp_confed_aspath: Optional[pulumi.Input[str]] = None,
                 bestpath_cmp_routerid: Optional[pulumi.Input[str]] = None,
                 bestpath_med_confed: Optional[pulumi.Input[str]] = None,
                 bestpath_med_missing_as_worst: Optional[pulumi.Input[str]] = None,
                 client_to_client_reflection: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 confederation_identifier: Optional[pulumi.Input[int]] = None,
                 confederation_peers: Optional[pulumi.Input[Sequence[pulumi.Input['BgpConfederationPeerArgs']]]] = None,
                 cross_family_conditional_adv: Optional[pulumi.Input[str]] = None,
                 dampening: Optional[pulumi.Input[str]] = None,
                 dampening_max_suppress_time: Optional[pulumi.Input[int]] = None,
                 dampening_reachability_half_life: Optional[pulumi.Input[int]] = None,
                 dampening_reuse: Optional[pulumi.Input[int]] = None,
                 dampening_route_map: Optional[pulumi.Input[str]] = None,
                 dampening_suppress: Optional[pulumi.Input[int]] = None,
                 dampening_unreachability_half_life: Optional[pulumi.Input[int]] = None,
                 default_local_preference: Optional[pulumi.Input[int]] = None,
                 deterministic_med: Optional[pulumi.Input[str]] = None,
                 distance_external: Optional[pulumi.Input[int]] = None,
                 distance_internal: Optional[pulumi.Input[int]] = None,
                 distance_local: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ebgp_multipath: Optional[pulumi.Input[str]] = None,
                 enforce_first_as: Optional[pulumi.Input[str]] = None,
                 fast_external_failover: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 graceful_end_on_timer: Optional[pulumi.Input[str]] = None,
                 graceful_restart: Optional[pulumi.Input[str]] = None,
                 graceful_restart_time: Optional[pulumi.Input[int]] = None,
                 graceful_stalepath_time: Optional[pulumi.Input[int]] = None,
                 graceful_update_delay: Optional[pulumi.Input[int]] = None,
                 holdtime_timer: Optional[pulumi.Input[int]] = None,
                 ibgp_multipath: Optional[pulumi.Input[str]] = None,
                 ignore_optional_capability: Optional[pulumi.Input[str]] = None,
                 keepalive_timer: Optional[pulumi.Input[int]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 multipath_recursive_distance: Optional[pulumi.Input[str]] = None,
                 neighbor_groups: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborGroupArgs']]]] = None,
                 neighbor_range6s: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborRange6Args']]]] = None,
                 neighbor_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborRangeArgs']]]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborArgs']]]] = None,
                 network6s: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNetwork6Args']]]] = None,
                 network_import_check: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNetworkArgs']]]] = None,
                 recursive_inherit_priority: Optional[pulumi.Input[str]] = None,
                 recursive_next_hop: Optional[pulumi.Input[str]] = None,
                 redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input['BgpRedistribute6Args']]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['BgpRedistributeArgs']]]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 scan_time: Optional[pulumi.Input[int]] = None,
                 synchronization: Optional[pulumi.Input[str]] = None,
                 tag_resolve_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vrf6s: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrf6Args']]]] = None,
                 vrf_leak6s: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfLeak6Args']]]] = None,
                 vrf_leaks: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfLeakArgs']]]] = None,
                 vrves: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfArgs']]]] = None):
        """
        Input properties used for looking up and filtering Bgp resources.
        :param pulumi.Input[str] additional_path: Enable/disable selection of BGP IPv4 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] additional_path6: Enable/disable selection of BGP IPv6 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] additional_path_select: Number of additional paths to be selected for each IPv4 NLRI.
        :param pulumi.Input[int] additional_path_select6: Number of additional paths to be selected for each IPv6 NLRI.
        :param pulumi.Input[int] additional_path_select_vpnv4: Number of additional paths to be selected for each VPNv4 NLRI.
        :param pulumi.Input[int] additional_path_select_vpnv6: Number of additional paths to be selected for each VPNv6 NLRI.
        :param pulumi.Input[str] additional_path_vpnv4: Enable/disable selection of BGP VPNv4 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] additional_path_vpnv6: Enable/disable selection of BGP VPNv6 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['BgpAdminDistanceArgs']]] admin_distances: Administrative distance modifications. The structure of `admin_distance` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddress6Args']]] aggregate_address6s: BGP IPv6 aggregate address table. The structure of `aggregate_address6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddressArgs']]] aggregate_addresses: BGP aggregate address table. The structure of `aggregate_address` block is documented below.
        :param pulumi.Input[str] always_compare_med: Enable/disable always compare MED. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] as_: Router AS number, valid from 1 to 4294967295, 0 to disable BGP.
        :param pulumi.Input[str] as_string: Router AS number, asplain/asdot/asdot+ format, 0 to disable BGP.
        :param pulumi.Input[str] bestpath_as_path_ignore: Enable/disable ignore AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_cmp_confed_aspath: Enable/disable compare federation AS path length. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_cmp_routerid: Enable/disable compare router ID for identical EBGP paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_med_confed: Enable/disable compare MED among confederation paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_med_missing_as_worst: Enable/disable treat missing MED as least preferred. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] client_to_client_reflection: Enable/disable client-to-client route reflection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cluster_id: Route reflector cluster ID.
        :param pulumi.Input[int] confederation_identifier: Confederation identifier.
        :param pulumi.Input[Sequence[pulumi.Input['BgpConfederationPeerArgs']]] confederation_peers: Confederation peers. The structure of `confederation_peers` block is documented below.
        :param pulumi.Input[str] cross_family_conditional_adv: Enable/disable cross address family conditional advertisement. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dampening: Enable/disable route-flap dampening. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] dampening_max_suppress_time: Maximum minutes a route can be suppressed.
        :param pulumi.Input[int] dampening_reachability_half_life: Reachability half-life time for penalty (min).
        :param pulumi.Input[int] dampening_reuse: Threshold to reuse routes.
        :param pulumi.Input[str] dampening_route_map: Criteria for dampening.
        :param pulumi.Input[int] dampening_suppress: Threshold to suppress routes.
        :param pulumi.Input[int] dampening_unreachability_half_life: Unreachability half-life time for penalty (min).
        :param pulumi.Input[int] default_local_preference: Default local preference.
        :param pulumi.Input[str] deterministic_med: Enable/disable enforce deterministic comparison of MED. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] distance_external: Distance for routes external to the AS.
        :param pulumi.Input[int] distance_internal: Distance for routes internal to the AS.
        :param pulumi.Input[int] distance_local: Distance for routes local to the AS.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ebgp_multipath: Enable/disable EBGP multi-path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] enforce_first_as: Enable/disable enforce first AS for EBGP routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fast_external_failover: Enable/disable reset peer BGP session if link goes down. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] graceful_end_on_timer: Enable/disable to exit graceful restart on timer only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] graceful_restart: Enable/disable BGP graceful restart capabilities. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] graceful_restart_time: Time needed for neighbors to restart (sec).
        :param pulumi.Input[int] graceful_stalepath_time: Time to hold stale paths of restarting neighbor (sec).
        :param pulumi.Input[int] graceful_update_delay: Route advertisement/selection delay after restart (sec).
        :param pulumi.Input[int] holdtime_timer: Number of seconds to mark peer as dead.
        :param pulumi.Input[str] ibgp_multipath: Enable/disable IBGP multi-path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ignore_optional_capability: Don't send unknown optional capability notification message Valid values: `enable`, `disable`.
        :param pulumi.Input[int] keepalive_timer: Frequency to send keep alive requests.
        :param pulumi.Input[str] log_neighbour_changes: Enable logging of BGP neighbour's changes Valid values: `enable`, `disable`.
        :param pulumi.Input[str] multipath_recursive_distance: Enable/disable use of recursive distance to select multipath. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['BgpNeighborGroupArgs']]] neighbor_groups: BGP neighbor group table. The structure of `neighbor_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpNeighborRange6Args']]] neighbor_range6s: BGP IPv6 neighbor range table. The structure of `neighbor_range6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpNeighborRangeArgs']]] neighbor_ranges: BGP neighbor range table. The structure of `neighbor_range` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpNeighborArgs']]] neighbors: BGP neighbor table. The structure of `neighbor` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpNetwork6Args']]] network6s: BGP IPv6 network table. The structure of `network6` block is documented below.
        :param pulumi.Input[str] network_import_check: Enable/disable ensure BGP network route exists in IGP. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['BgpNetworkArgs']]] networks: BGP network table. The structure of `network` block is documented below.
        :param pulumi.Input[str] recursive_inherit_priority: Enable/disable priority inheritance for recursive resolution. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] recursive_next_hop: Enable/disable recursive resolution of next-hop using BGP route. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['BgpRedistribute6Args']]] redistribute6s: BGP IPv6 redistribute table. The structure of `redistribute6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpRedistributeArgs']]] redistributes: BGP IPv4 redistribute table. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] router_id: Router ID.
        :param pulumi.Input[int] scan_time: Background scanner interval (sec), 0 to disable it.
        :param pulumi.Input[str] synchronization: Enable/disable only advertise routes from iBGP if routes present in an IGP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tag_resolve_mode: Configure tag-match mode. Resolves BGP routes with other routes containing the same tag. Valid values: `disable`, `preferred`, `merge`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input['BgpVrf6Args']]] vrf6s: BGP IPv6 VRF leaking table. The structure of `vrf6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpVrfLeak6Args']]] vrf_leak6s: BGP IPv6 VRF leaking table. The structure of `vrf_leak6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpVrfLeakArgs']]] vrf_leaks: BGP VRF leaking table. The structure of `vrf_leak` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['BgpVrfArgs']]] vrves: BGP VRF leaking table. The structure of `vrf` block is documented below.
        """
        if additional_path is not None:
            pulumi.set(__self__, "additional_path", additional_path)
        if additional_path6 is not None:
            pulumi.set(__self__, "additional_path6", additional_path6)
        if additional_path_select is not None:
            pulumi.set(__self__, "additional_path_select", additional_path_select)
        if additional_path_select6 is not None:
            pulumi.set(__self__, "additional_path_select6", additional_path_select6)
        if additional_path_select_vpnv4 is not None:
            pulumi.set(__self__, "additional_path_select_vpnv4", additional_path_select_vpnv4)
        if additional_path_select_vpnv6 is not None:
            pulumi.set(__self__, "additional_path_select_vpnv6", additional_path_select_vpnv6)
        if additional_path_vpnv4 is not None:
            pulumi.set(__self__, "additional_path_vpnv4", additional_path_vpnv4)
        if additional_path_vpnv6 is not None:
            pulumi.set(__self__, "additional_path_vpnv6", additional_path_vpnv6)
        if admin_distances is not None:
            pulumi.set(__self__, "admin_distances", admin_distances)
        if aggregate_address6s is not None:
            pulumi.set(__self__, "aggregate_address6s", aggregate_address6s)
        if aggregate_addresses is not None:
            pulumi.set(__self__, "aggregate_addresses", aggregate_addresses)
        if always_compare_med is not None:
            pulumi.set(__self__, "always_compare_med", always_compare_med)
        if as_ is not None:
            pulumi.set(__self__, "as_", as_)
        if as_string is not None:
            pulumi.set(__self__, "as_string", as_string)
        if bestpath_as_path_ignore is not None:
            pulumi.set(__self__, "bestpath_as_path_ignore", bestpath_as_path_ignore)
        if bestpath_cmp_confed_aspath is not None:
            pulumi.set(__self__, "bestpath_cmp_confed_aspath", bestpath_cmp_confed_aspath)
        if bestpath_cmp_routerid is not None:
            pulumi.set(__self__, "bestpath_cmp_routerid", bestpath_cmp_routerid)
        if bestpath_med_confed is not None:
            pulumi.set(__self__, "bestpath_med_confed", bestpath_med_confed)
        if bestpath_med_missing_as_worst is not None:
            pulumi.set(__self__, "bestpath_med_missing_as_worst", bestpath_med_missing_as_worst)
        if client_to_client_reflection is not None:
            pulumi.set(__self__, "client_to_client_reflection", client_to_client_reflection)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if confederation_identifier is not None:
            pulumi.set(__self__, "confederation_identifier", confederation_identifier)
        if confederation_peers is not None:
            pulumi.set(__self__, "confederation_peers", confederation_peers)
        if cross_family_conditional_adv is not None:
            pulumi.set(__self__, "cross_family_conditional_adv", cross_family_conditional_adv)
        if dampening is not None:
            pulumi.set(__self__, "dampening", dampening)
        if dampening_max_suppress_time is not None:
            pulumi.set(__self__, "dampening_max_suppress_time", dampening_max_suppress_time)
        if dampening_reachability_half_life is not None:
            pulumi.set(__self__, "dampening_reachability_half_life", dampening_reachability_half_life)
        if dampening_reuse is not None:
            pulumi.set(__self__, "dampening_reuse", dampening_reuse)
        if dampening_route_map is not None:
            pulumi.set(__self__, "dampening_route_map", dampening_route_map)
        if dampening_suppress is not None:
            pulumi.set(__self__, "dampening_suppress", dampening_suppress)
        if dampening_unreachability_half_life is not None:
            pulumi.set(__self__, "dampening_unreachability_half_life", dampening_unreachability_half_life)
        if default_local_preference is not None:
            pulumi.set(__self__, "default_local_preference", default_local_preference)
        if deterministic_med is not None:
            pulumi.set(__self__, "deterministic_med", deterministic_med)
        if distance_external is not None:
            pulumi.set(__self__, "distance_external", distance_external)
        if distance_internal is not None:
            pulumi.set(__self__, "distance_internal", distance_internal)
        if distance_local is not None:
            pulumi.set(__self__, "distance_local", distance_local)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ebgp_multipath is not None:
            pulumi.set(__self__, "ebgp_multipath", ebgp_multipath)
        if enforce_first_as is not None:
            pulumi.set(__self__, "enforce_first_as", enforce_first_as)
        if fast_external_failover is not None:
            pulumi.set(__self__, "fast_external_failover", fast_external_failover)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if graceful_end_on_timer is not None:
            pulumi.set(__self__, "graceful_end_on_timer", graceful_end_on_timer)
        if graceful_restart is not None:
            pulumi.set(__self__, "graceful_restart", graceful_restart)
        if graceful_restart_time is not None:
            pulumi.set(__self__, "graceful_restart_time", graceful_restart_time)
        if graceful_stalepath_time is not None:
            pulumi.set(__self__, "graceful_stalepath_time", graceful_stalepath_time)
        if graceful_update_delay is not None:
            pulumi.set(__self__, "graceful_update_delay", graceful_update_delay)
        if holdtime_timer is not None:
            pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        if ibgp_multipath is not None:
            pulumi.set(__self__, "ibgp_multipath", ibgp_multipath)
        if ignore_optional_capability is not None:
            pulumi.set(__self__, "ignore_optional_capability", ignore_optional_capability)
        if keepalive_timer is not None:
            pulumi.set(__self__, "keepalive_timer", keepalive_timer)
        if log_neighbour_changes is not None:
            pulumi.set(__self__, "log_neighbour_changes", log_neighbour_changes)
        if multipath_recursive_distance is not None:
            pulumi.set(__self__, "multipath_recursive_distance", multipath_recursive_distance)
        if neighbor_groups is not None:
            pulumi.set(__self__, "neighbor_groups", neighbor_groups)
        if neighbor_range6s is not None:
            pulumi.set(__self__, "neighbor_range6s", neighbor_range6s)
        if neighbor_ranges is not None:
            pulumi.set(__self__, "neighbor_ranges", neighbor_ranges)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if network6s is not None:
            pulumi.set(__self__, "network6s", network6s)
        if network_import_check is not None:
            pulumi.set(__self__, "network_import_check", network_import_check)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if recursive_inherit_priority is not None:
            pulumi.set(__self__, "recursive_inherit_priority", recursive_inherit_priority)
        if recursive_next_hop is not None:
            pulumi.set(__self__, "recursive_next_hop", recursive_next_hop)
        if redistribute6s is not None:
            pulumi.set(__self__, "redistribute6s", redistribute6s)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if scan_time is not None:
            pulumi.set(__self__, "scan_time", scan_time)
        if synchronization is not None:
            pulumi.set(__self__, "synchronization", synchronization)
        if tag_resolve_mode is not None:
            pulumi.set(__self__, "tag_resolve_mode", tag_resolve_mode)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vrf6s is not None:
            pulumi.set(__self__, "vrf6s", vrf6s)
        if vrf_leak6s is not None:
            pulumi.set(__self__, "vrf_leak6s", vrf_leak6s)
        if vrf_leaks is not None:
            pulumi.set(__self__, "vrf_leaks", vrf_leaks)
        if vrves is not None:
            pulumi.set(__self__, "vrves", vrves)

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable selection of BGP IPv4 additional paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "additional_path")

    @additional_path.setter
    def additional_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path", value)

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable selection of BGP IPv6 additional paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "additional_path6")

    @additional_path6.setter
    def additional_path6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path6", value)

    @property
    @pulumi.getter(name="additionalPathSelect")
    def additional_path_select(self) -> Optional[pulumi.Input[int]]:
        """
        Number of additional paths to be selected for each IPv4 NLRI.
        """
        return pulumi.get(self, "additional_path_select")

    @additional_path_select.setter
    def additional_path_select(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "additional_path_select", value)

    @property
    @pulumi.getter(name="additionalPathSelect6")
    def additional_path_select6(self) -> Optional[pulumi.Input[int]]:
        """
        Number of additional paths to be selected for each IPv6 NLRI.
        """
        return pulumi.get(self, "additional_path_select6")

    @additional_path_select6.setter
    def additional_path_select6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "additional_path_select6", value)

    @property
    @pulumi.getter(name="additionalPathSelectVpnv4")
    def additional_path_select_vpnv4(self) -> Optional[pulumi.Input[int]]:
        """
        Number of additional paths to be selected for each VPNv4 NLRI.
        """
        return pulumi.get(self, "additional_path_select_vpnv4")

    @additional_path_select_vpnv4.setter
    def additional_path_select_vpnv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "additional_path_select_vpnv4", value)

    @property
    @pulumi.getter(name="additionalPathSelectVpnv6")
    def additional_path_select_vpnv6(self) -> Optional[pulumi.Input[int]]:
        """
        Number of additional paths to be selected for each VPNv6 NLRI.
        """
        return pulumi.get(self, "additional_path_select_vpnv6")

    @additional_path_select_vpnv6.setter
    def additional_path_select_vpnv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "additional_path_select_vpnv6", value)

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable selection of BGP VPNv4 additional paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv4")

    @additional_path_vpnv4.setter
    def additional_path_vpnv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path_vpnv4", value)

    @property
    @pulumi.getter(name="additionalPathVpnv6")
    def additional_path_vpnv6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable selection of BGP VPNv6 additional paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv6")

    @additional_path_vpnv6.setter
    def additional_path_vpnv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path_vpnv6", value)

    @property
    @pulumi.getter(name="adminDistances")
    def admin_distances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpAdminDistanceArgs']]]]:
        """
        Administrative distance modifications. The structure of `admin_distance` block is documented below.
        """
        return pulumi.get(self, "admin_distances")

    @admin_distances.setter
    def admin_distances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAdminDistanceArgs']]]]):
        pulumi.set(self, "admin_distances", value)

    @property
    @pulumi.getter(name="aggregateAddress6s")
    def aggregate_address6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddress6Args']]]]:
        """
        BGP IPv6 aggregate address table. The structure of `aggregate_address6` block is documented below.
        """
        return pulumi.get(self, "aggregate_address6s")

    @aggregate_address6s.setter
    def aggregate_address6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddress6Args']]]]):
        pulumi.set(self, "aggregate_address6s", value)

    @property
    @pulumi.getter(name="aggregateAddresses")
    def aggregate_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddressArgs']]]]:
        """
        BGP aggregate address table. The structure of `aggregate_address` block is documented below.
        """
        return pulumi.get(self, "aggregate_addresses")

    @aggregate_addresses.setter
    def aggregate_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAggregateAddressArgs']]]]):
        pulumi.set(self, "aggregate_addresses", value)

    @property
    @pulumi.getter(name="alwaysCompareMed")
    def always_compare_med(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable always compare MED. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "always_compare_med")

    @always_compare_med.setter
    def always_compare_med(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "always_compare_med", value)

    @property
    @pulumi.getter(name="as")
    def as_(self) -> Optional[pulumi.Input[int]]:
        """
        Router AS number, valid from 1 to 4294967295, 0 to disable BGP.
        """
        return pulumi.get(self, "as_")

    @as_.setter
    def as_(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "as_", value)

    @property
    @pulumi.getter(name="asString")
    def as_string(self) -> Optional[pulumi.Input[str]]:
        """
        Router AS number, asplain/asdot/asdot+ format, 0 to disable BGP.
        """
        return pulumi.get(self, "as_string")

    @as_string.setter
    def as_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_string", value)

    @property
    @pulumi.getter(name="bestpathAsPathIgnore")
    def bestpath_as_path_ignore(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ignore AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_as_path_ignore")

    @bestpath_as_path_ignore.setter
    def bestpath_as_path_ignore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bestpath_as_path_ignore", value)

    @property
    @pulumi.getter(name="bestpathCmpConfedAspath")
    def bestpath_cmp_confed_aspath(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable compare federation AS path length. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_cmp_confed_aspath")

    @bestpath_cmp_confed_aspath.setter
    def bestpath_cmp_confed_aspath(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bestpath_cmp_confed_aspath", value)

    @property
    @pulumi.getter(name="bestpathCmpRouterid")
    def bestpath_cmp_routerid(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable compare router ID for identical EBGP paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_cmp_routerid")

    @bestpath_cmp_routerid.setter
    def bestpath_cmp_routerid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bestpath_cmp_routerid", value)

    @property
    @pulumi.getter(name="bestpathMedConfed")
    def bestpath_med_confed(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable compare MED among confederation paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_med_confed")

    @bestpath_med_confed.setter
    def bestpath_med_confed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bestpath_med_confed", value)

    @property
    @pulumi.getter(name="bestpathMedMissingAsWorst")
    def bestpath_med_missing_as_worst(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable treat missing MED as least preferred. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_med_missing_as_worst")

    @bestpath_med_missing_as_worst.setter
    def bestpath_med_missing_as_worst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bestpath_med_missing_as_worst", value)

    @property
    @pulumi.getter(name="clientToClientReflection")
    def client_to_client_reflection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable client-to-client route reflection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "client_to_client_reflection")

    @client_to_client_reflection.setter
    def client_to_client_reflection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_to_client_reflection", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Route reflector cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="confederationIdentifier")
    def confederation_identifier(self) -> Optional[pulumi.Input[int]]:
        """
        Confederation identifier.
        """
        return pulumi.get(self, "confederation_identifier")

    @confederation_identifier.setter
    def confederation_identifier(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "confederation_identifier", value)

    @property
    @pulumi.getter(name="confederationPeers")
    def confederation_peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpConfederationPeerArgs']]]]:
        """
        Confederation peers. The structure of `confederation_peers` block is documented below.
        """
        return pulumi.get(self, "confederation_peers")

    @confederation_peers.setter
    def confederation_peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpConfederationPeerArgs']]]]):
        pulumi.set(self, "confederation_peers", value)

    @property
    @pulumi.getter(name="crossFamilyConditionalAdv")
    def cross_family_conditional_adv(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable cross address family conditional advertisement. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cross_family_conditional_adv")

    @cross_family_conditional_adv.setter
    def cross_family_conditional_adv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cross_family_conditional_adv", value)

    @property
    @pulumi.getter
    def dampening(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable route-flap dampening. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dampening")

    @dampening.setter
    def dampening(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dampening", value)

    @property
    @pulumi.getter(name="dampeningMaxSuppressTime")
    def dampening_max_suppress_time(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum minutes a route can be suppressed.
        """
        return pulumi.get(self, "dampening_max_suppress_time")

    @dampening_max_suppress_time.setter
    def dampening_max_suppress_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dampening_max_suppress_time", value)

    @property
    @pulumi.getter(name="dampeningReachabilityHalfLife")
    def dampening_reachability_half_life(self) -> Optional[pulumi.Input[int]]:
        """
        Reachability half-life time for penalty (min).
        """
        return pulumi.get(self, "dampening_reachability_half_life")

    @dampening_reachability_half_life.setter
    def dampening_reachability_half_life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dampening_reachability_half_life", value)

    @property
    @pulumi.getter(name="dampeningReuse")
    def dampening_reuse(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold to reuse routes.
        """
        return pulumi.get(self, "dampening_reuse")

    @dampening_reuse.setter
    def dampening_reuse(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dampening_reuse", value)

    @property
    @pulumi.getter(name="dampeningRouteMap")
    def dampening_route_map(self) -> Optional[pulumi.Input[str]]:
        """
        Criteria for dampening.
        """
        return pulumi.get(self, "dampening_route_map")

    @dampening_route_map.setter
    def dampening_route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dampening_route_map", value)

    @property
    @pulumi.getter(name="dampeningSuppress")
    def dampening_suppress(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold to suppress routes.
        """
        return pulumi.get(self, "dampening_suppress")

    @dampening_suppress.setter
    def dampening_suppress(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dampening_suppress", value)

    @property
    @pulumi.getter(name="dampeningUnreachabilityHalfLife")
    def dampening_unreachability_half_life(self) -> Optional[pulumi.Input[int]]:
        """
        Unreachability half-life time for penalty (min).
        """
        return pulumi.get(self, "dampening_unreachability_half_life")

    @dampening_unreachability_half_life.setter
    def dampening_unreachability_half_life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dampening_unreachability_half_life", value)

    @property
    @pulumi.getter(name="defaultLocalPreference")
    def default_local_preference(self) -> Optional[pulumi.Input[int]]:
        """
        Default local preference.
        """
        return pulumi.get(self, "default_local_preference")

    @default_local_preference.setter
    def default_local_preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_local_preference", value)

    @property
    @pulumi.getter(name="deterministicMed")
    def deterministic_med(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforce deterministic comparison of MED. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "deterministic_med")

    @deterministic_med.setter
    def deterministic_med(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deterministic_med", value)

    @property
    @pulumi.getter(name="distanceExternal")
    def distance_external(self) -> Optional[pulumi.Input[int]]:
        """
        Distance for routes external to the AS.
        """
        return pulumi.get(self, "distance_external")

    @distance_external.setter
    def distance_external(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance_external", value)

    @property
    @pulumi.getter(name="distanceInternal")
    def distance_internal(self) -> Optional[pulumi.Input[int]]:
        """
        Distance for routes internal to the AS.
        """
        return pulumi.get(self, "distance_internal")

    @distance_internal.setter
    def distance_internal(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance_internal", value)

    @property
    @pulumi.getter(name="distanceLocal")
    def distance_local(self) -> Optional[pulumi.Input[int]]:
        """
        Distance for routes local to the AS.
        """
        return pulumi.get(self, "distance_local")

    @distance_local.setter
    def distance_local(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance_local", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="ebgpMultipath")
    def ebgp_multipath(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable EBGP multi-path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ebgp_multipath")

    @ebgp_multipath.setter
    def ebgp_multipath(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ebgp_multipath", value)

    @property
    @pulumi.getter(name="enforceFirstAs")
    def enforce_first_as(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforce first AS for EBGP routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "enforce_first_as")

    @enforce_first_as.setter
    def enforce_first_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_first_as", value)

    @property
    @pulumi.getter(name="fastExternalFailover")
    def fast_external_failover(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable reset peer BGP session if link goes down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fast_external_failover")

    @fast_external_failover.setter
    def fast_external_failover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fast_external_failover", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="gracefulEndOnTimer")
    def graceful_end_on_timer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable to exit graceful restart on timer only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "graceful_end_on_timer")

    @graceful_end_on_timer.setter
    def graceful_end_on_timer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graceful_end_on_timer", value)

    @property
    @pulumi.getter(name="gracefulRestart")
    def graceful_restart(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable BGP graceful restart capabilities. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "graceful_restart")

    @graceful_restart.setter
    def graceful_restart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graceful_restart", value)

    @property
    @pulumi.getter(name="gracefulRestartTime")
    def graceful_restart_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time needed for neighbors to restart (sec).
        """
        return pulumi.get(self, "graceful_restart_time")

    @graceful_restart_time.setter
    def graceful_restart_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "graceful_restart_time", value)

    @property
    @pulumi.getter(name="gracefulStalepathTime")
    def graceful_stalepath_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time to hold stale paths of restarting neighbor (sec).
        """
        return pulumi.get(self, "graceful_stalepath_time")

    @graceful_stalepath_time.setter
    def graceful_stalepath_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "graceful_stalepath_time", value)

    @property
    @pulumi.getter(name="gracefulUpdateDelay")
    def graceful_update_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Route advertisement/selection delay after restart (sec).
        """
        return pulumi.get(self, "graceful_update_delay")

    @graceful_update_delay.setter
    def graceful_update_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "graceful_update_delay", value)

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds to mark peer as dead.
        """
        return pulumi.get(self, "holdtime_timer")

    @holdtime_timer.setter
    def holdtime_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holdtime_timer", value)

    @property
    @pulumi.getter(name="ibgpMultipath")
    def ibgp_multipath(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IBGP multi-path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ibgp_multipath")

    @ibgp_multipath.setter
    def ibgp_multipath(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibgp_multipath", value)

    @property
    @pulumi.getter(name="ignoreOptionalCapability")
    def ignore_optional_capability(self) -> Optional[pulumi.Input[str]]:
        """
        Don't send unknown optional capability notification message Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ignore_optional_capability")

    @ignore_optional_capability.setter
    def ignore_optional_capability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_optional_capability", value)

    @property
    @pulumi.getter(name="keepaliveTimer")
    def keepalive_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency to send keep alive requests.
        """
        return pulumi.get(self, "keepalive_timer")

    @keepalive_timer.setter
    def keepalive_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive_timer", value)

    @property
    @pulumi.getter(name="logNeighbourChanges")
    def log_neighbour_changes(self) -> Optional[pulumi.Input[str]]:
        """
        Enable logging of BGP neighbour's changes Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_neighbour_changes")

    @log_neighbour_changes.setter
    def log_neighbour_changes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_neighbour_changes", value)

    @property
    @pulumi.getter(name="multipathRecursiveDistance")
    def multipath_recursive_distance(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of recursive distance to select multipath. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "multipath_recursive_distance")

    @multipath_recursive_distance.setter
    def multipath_recursive_distance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multipath_recursive_distance", value)

    @property
    @pulumi.getter(name="neighborGroups")
    def neighbor_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborGroupArgs']]]]:
        """
        BGP neighbor group table. The structure of `neighbor_group` block is documented below.
        """
        return pulumi.get(self, "neighbor_groups")

    @neighbor_groups.setter
    def neighbor_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborGroupArgs']]]]):
        pulumi.set(self, "neighbor_groups", value)

    @property
    @pulumi.getter(name="neighborRange6s")
    def neighbor_range6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborRange6Args']]]]:
        """
        BGP IPv6 neighbor range table. The structure of `neighbor_range6` block is documented below.
        """
        return pulumi.get(self, "neighbor_range6s")

    @neighbor_range6s.setter
    def neighbor_range6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborRange6Args']]]]):
        pulumi.set(self, "neighbor_range6s", value)

    @property
    @pulumi.getter(name="neighborRanges")
    def neighbor_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborRangeArgs']]]]:
        """
        BGP neighbor range table. The structure of `neighbor_range` block is documented below.
        """
        return pulumi.get(self, "neighbor_ranges")

    @neighbor_ranges.setter
    def neighbor_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborRangeArgs']]]]):
        pulumi.set(self, "neighbor_ranges", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborArgs']]]]:
        """
        BGP neighbor table. The structure of `neighbor` block is documented below.
        """
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNeighborArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter
    def network6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpNetwork6Args']]]]:
        """
        BGP IPv6 network table. The structure of `network6` block is documented below.
        """
        return pulumi.get(self, "network6s")

    @network6s.setter
    def network6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNetwork6Args']]]]):
        pulumi.set(self, "network6s", value)

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ensure BGP network route exists in IGP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "network_import_check")

    @network_import_check.setter
    def network_import_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_import_check", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpNetworkArgs']]]]:
        """
        BGP network table. The structure of `network` block is documented below.
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="recursiveInheritPriority")
    def recursive_inherit_priority(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable priority inheritance for recursive resolution. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "recursive_inherit_priority")

    @recursive_inherit_priority.setter
    def recursive_inherit_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recursive_inherit_priority", value)

    @property
    @pulumi.getter(name="recursiveNextHop")
    def recursive_next_hop(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable recursive resolution of next-hop using BGP route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "recursive_next_hop")

    @recursive_next_hop.setter
    def recursive_next_hop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recursive_next_hop", value)

    @property
    @pulumi.getter
    def redistribute6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpRedistribute6Args']]]]:
        """
        BGP IPv6 redistribute table. The structure of `redistribute6` block is documented below.
        """
        return pulumi.get(self, "redistribute6s")

    @redistribute6s.setter
    def redistribute6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpRedistribute6Args']]]]):
        pulumi.set(self, "redistribute6s", value)

    @property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpRedistributeArgs']]]]:
        """
        BGP IPv4 redistribute table. The structure of `redistribute` block is documented below.
        """
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        Router ID.
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="scanTime")
    def scan_time(self) -> Optional[pulumi.Input[int]]:
        """
        Background scanner interval (sec), 0 to disable it.
        """
        return pulumi.get(self, "scan_time")

    @scan_time.setter
    def scan_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scan_time", value)

    @property
    @pulumi.getter
    def synchronization(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable only advertise routes from iBGP if routes present in an IGP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "synchronization")

    @synchronization.setter
    def synchronization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "synchronization", value)

    @property
    @pulumi.getter(name="tagResolveMode")
    def tag_resolve_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure tag-match mode. Resolves BGP routes with other routes containing the same tag. Valid values: `disable`, `preferred`, `merge`.
        """
        return pulumi.get(self, "tag_resolve_mode")

    @tag_resolve_mode.setter
    def tag_resolve_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_resolve_mode", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vrf6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrf6Args']]]]:
        """
        BGP IPv6 VRF leaking table. The structure of `vrf6` block is documented below.
        """
        return pulumi.get(self, "vrf6s")

    @vrf6s.setter
    def vrf6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrf6Args']]]]):
        pulumi.set(self, "vrf6s", value)

    @property
    @pulumi.getter(name="vrfLeak6s")
    def vrf_leak6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfLeak6Args']]]]:
        """
        BGP IPv6 VRF leaking table. The structure of `vrf_leak6` block is documented below.
        """
        return pulumi.get(self, "vrf_leak6s")

    @vrf_leak6s.setter
    def vrf_leak6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfLeak6Args']]]]):
        pulumi.set(self, "vrf_leak6s", value)

    @property
    @pulumi.getter(name="vrfLeaks")
    def vrf_leaks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfLeakArgs']]]]:
        """
        BGP VRF leaking table. The structure of `vrf_leak` block is documented below.
        """
        return pulumi.get(self, "vrf_leaks")

    @vrf_leaks.setter
    def vrf_leaks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfLeakArgs']]]]):
        pulumi.set(self, "vrf_leaks", value)

    @property
    @pulumi.getter
    def vrves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfArgs']]]]:
        """
        BGP VRF leaking table. The structure of `vrf` block is documented below.
        """
        return pulumi.get(self, "vrves")

    @vrves.setter
    def vrves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpVrfArgs']]]]):
        pulumi.set(self, "vrves", value)


class Bgp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_path: Optional[pulumi.Input[str]] = None,
                 additional_path6: Optional[pulumi.Input[str]] = None,
                 additional_path_select: Optional[pulumi.Input[int]] = None,
                 additional_path_select6: Optional[pulumi.Input[int]] = None,
                 additional_path_select_vpnv4: Optional[pulumi.Input[int]] = None,
                 additional_path_select_vpnv6: Optional[pulumi.Input[int]] = None,
                 additional_path_vpnv4: Optional[pulumi.Input[str]] = None,
                 additional_path_vpnv6: Optional[pulumi.Input[str]] = None,
                 admin_distances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAdminDistanceArgs']]]]] = None,
                 aggregate_address6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAggregateAddress6Args']]]]] = None,
                 aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAggregateAddressArgs']]]]] = None,
                 always_compare_med: Optional[pulumi.Input[str]] = None,
                 as_: Optional[pulumi.Input[int]] = None,
                 as_string: Optional[pulumi.Input[str]] = None,
                 bestpath_as_path_ignore: Optional[pulumi.Input[str]] = None,
                 bestpath_cmp_confed_aspath: Optional[pulumi.Input[str]] = None,
                 bestpath_cmp_routerid: Optional[pulumi.Input[str]] = None,
                 bestpath_med_confed: Optional[pulumi.Input[str]] = None,
                 bestpath_med_missing_as_worst: Optional[pulumi.Input[str]] = None,
                 client_to_client_reflection: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 confederation_identifier: Optional[pulumi.Input[int]] = None,
                 confederation_peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpConfederationPeerArgs']]]]] = None,
                 cross_family_conditional_adv: Optional[pulumi.Input[str]] = None,
                 dampening: Optional[pulumi.Input[str]] = None,
                 dampening_max_suppress_time: Optional[pulumi.Input[int]] = None,
                 dampening_reachability_half_life: Optional[pulumi.Input[int]] = None,
                 dampening_reuse: Optional[pulumi.Input[int]] = None,
                 dampening_route_map: Optional[pulumi.Input[str]] = None,
                 dampening_suppress: Optional[pulumi.Input[int]] = None,
                 dampening_unreachability_half_life: Optional[pulumi.Input[int]] = None,
                 default_local_preference: Optional[pulumi.Input[int]] = None,
                 deterministic_med: Optional[pulumi.Input[str]] = None,
                 distance_external: Optional[pulumi.Input[int]] = None,
                 distance_internal: Optional[pulumi.Input[int]] = None,
                 distance_local: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ebgp_multipath: Optional[pulumi.Input[str]] = None,
                 enforce_first_as: Optional[pulumi.Input[str]] = None,
                 fast_external_failover: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 graceful_end_on_timer: Optional[pulumi.Input[str]] = None,
                 graceful_restart: Optional[pulumi.Input[str]] = None,
                 graceful_restart_time: Optional[pulumi.Input[int]] = None,
                 graceful_stalepath_time: Optional[pulumi.Input[int]] = None,
                 graceful_update_delay: Optional[pulumi.Input[int]] = None,
                 holdtime_timer: Optional[pulumi.Input[int]] = None,
                 ibgp_multipath: Optional[pulumi.Input[str]] = None,
                 ignore_optional_capability: Optional[pulumi.Input[str]] = None,
                 keepalive_timer: Optional[pulumi.Input[int]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 multipath_recursive_distance: Optional[pulumi.Input[str]] = None,
                 neighbor_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborGroupArgs']]]]] = None,
                 neighbor_range6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborRange6Args']]]]] = None,
                 neighbor_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborRangeArgs']]]]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborArgs']]]]] = None,
                 network6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNetwork6Args']]]]] = None,
                 network_import_check: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNetworkArgs']]]]] = None,
                 recursive_inherit_priority: Optional[pulumi.Input[str]] = None,
                 recursive_next_hop: Optional[pulumi.Input[str]] = None,
                 redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpRedistribute6Args']]]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpRedistributeArgs']]]]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 scan_time: Optional[pulumi.Input[int]] = None,
                 synchronization: Optional[pulumi.Input[str]] = None,
                 tag_resolve_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vrf6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrf6Args']]]]] = None,
                 vrf_leak6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfLeak6Args']]]]] = None,
                 vrf_leaks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfLeakArgs']]]]] = None,
                 vrves: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfArgs']]]]] = None,
                 __props__=None):
        """
        Configure BGP.

        > The provider supports the definition of Neighbor in Router Bgp `router.Bgp`, and also allows the definition of separate Neighbor resources `router/bgp.Neighbor`, but do not use a `router.Bgp` with in-line Neighbor in conjunction with any `router/bgp.Neighbor` resources, otherwise conflicts and overwrite will occur.

        > The provider supports the definition of Network in Router Bgp `router.Bgp`, and also allows the definition of separate Network resources `router/bgp.Network`, but do not use a `router.Bgp` with in-line Network in conjunction with any `router/bgp.Network` resources, otherwise conflicts and overwrite will occur.

        > The provider supports the definition of Network6 in Router Bgp `router.Bgp`, and also allows the definition of separate Network6 resources `router/bgp.Network6`, but do not use a `router.Bgp` with in-line Network6 in conjunction with any `router/bgp.Network6` resources, otherwise conflicts and overwrite will occur.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.router.Bgp("trname",
            additional_path_select=2,
            additional_path_select6=2,
            always_compare_med="disable",
            as_=0,
            client_to_client_reflection="enable",
            cluster_id="0.0.0.0",
            dampening="disable",
            dampening_max_suppress_time=60,
            dampening_reachability_half_life=15,
            dampening_reuse=750,
            dampening_suppress=2000,
            dampening_unreachability_half_life=15,
            default_local_preference=100,
            deterministic_med="disable",
            distance_external=20,
            distance_internal=200,
            distance_local=200,
            graceful_restart_time=120,
            graceful_stalepath_time=360,
            graceful_update_delay=120,
            holdtime_timer=180,
            ibgp_multipath="disable",
            ignore_optional_capability="enable",
            keepalive_timer=60,
            log_neighbour_changes="enable",
            network_import_check="enable",
            redistributes=[
                fortios.router.BgpRedistributeArgs(
                    name="connected",
                    status="disable",
                ),
                fortios.router.BgpRedistributeArgs(
                    name="rip",
                    status="disable",
                ),
                fortios.router.BgpRedistributeArgs(
                    name="ospf",
                    status="disable",
                ),
                fortios.router.BgpRedistributeArgs(
                    name="static",
                    status="disable",
                ),
                fortios.router.BgpRedistributeArgs(
                    name="isis",
                    status="disable",
                ),
            ],
            redistribute6s=[
                fortios.router.BgpRedistribute6Args(
                    name="connected",
                    status="disable",
                ),
                fortios.router.BgpRedistribute6Args(
                    name="rip",
                    status="disable",
                ),
                fortios.router.BgpRedistribute6Args(
                    name="ospf",
                    status="disable",
                ),
                fortios.router.BgpRedistribute6Args(
                    name="static",
                    status="disable",
                ),
                fortios.router.BgpRedistribute6Args(
                    name="isis",
                    status="disable",
                ),
            ],
            scan_time=60,
            synchronization="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Router Bgp can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:router/bgp:Bgp labelname RouterBgp
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:router/bgp:Bgp labelname RouterBgp
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] additional_path: Enable/disable selection of BGP IPv4 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] additional_path6: Enable/disable selection of BGP IPv6 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] additional_path_select: Number of additional paths to be selected for each IPv4 NLRI.
        :param pulumi.Input[int] additional_path_select6: Number of additional paths to be selected for each IPv6 NLRI.
        :param pulumi.Input[int] additional_path_select_vpnv4: Number of additional paths to be selected for each VPNv4 NLRI.
        :param pulumi.Input[int] additional_path_select_vpnv6: Number of additional paths to be selected for each VPNv6 NLRI.
        :param pulumi.Input[str] additional_path_vpnv4: Enable/disable selection of BGP VPNv4 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] additional_path_vpnv6: Enable/disable selection of BGP VPNv6 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAdminDistanceArgs']]]] admin_distances: Administrative distance modifications. The structure of `admin_distance` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAggregateAddress6Args']]]] aggregate_address6s: BGP IPv6 aggregate address table. The structure of `aggregate_address6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAggregateAddressArgs']]]] aggregate_addresses: BGP aggregate address table. The structure of `aggregate_address` block is documented below.
        :param pulumi.Input[str] always_compare_med: Enable/disable always compare MED. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] as_: Router AS number, valid from 1 to 4294967295, 0 to disable BGP.
        :param pulumi.Input[str] as_string: Router AS number, asplain/asdot/asdot+ format, 0 to disable BGP.
        :param pulumi.Input[str] bestpath_as_path_ignore: Enable/disable ignore AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_cmp_confed_aspath: Enable/disable compare federation AS path length. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_cmp_routerid: Enable/disable compare router ID for identical EBGP paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_med_confed: Enable/disable compare MED among confederation paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_med_missing_as_worst: Enable/disable treat missing MED as least preferred. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] client_to_client_reflection: Enable/disable client-to-client route reflection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cluster_id: Route reflector cluster ID.
        :param pulumi.Input[int] confederation_identifier: Confederation identifier.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpConfederationPeerArgs']]]] confederation_peers: Confederation peers. The structure of `confederation_peers` block is documented below.
        :param pulumi.Input[str] cross_family_conditional_adv: Enable/disable cross address family conditional advertisement. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dampening: Enable/disable route-flap dampening. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] dampening_max_suppress_time: Maximum minutes a route can be suppressed.
        :param pulumi.Input[int] dampening_reachability_half_life: Reachability half-life time for penalty (min).
        :param pulumi.Input[int] dampening_reuse: Threshold to reuse routes.
        :param pulumi.Input[str] dampening_route_map: Criteria for dampening.
        :param pulumi.Input[int] dampening_suppress: Threshold to suppress routes.
        :param pulumi.Input[int] dampening_unreachability_half_life: Unreachability half-life time for penalty (min).
        :param pulumi.Input[int] default_local_preference: Default local preference.
        :param pulumi.Input[str] deterministic_med: Enable/disable enforce deterministic comparison of MED. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] distance_external: Distance for routes external to the AS.
        :param pulumi.Input[int] distance_internal: Distance for routes internal to the AS.
        :param pulumi.Input[int] distance_local: Distance for routes local to the AS.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ebgp_multipath: Enable/disable EBGP multi-path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] enforce_first_as: Enable/disable enforce first AS for EBGP routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fast_external_failover: Enable/disable reset peer BGP session if link goes down. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] graceful_end_on_timer: Enable/disable to exit graceful restart on timer only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] graceful_restart: Enable/disable BGP graceful restart capabilities. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] graceful_restart_time: Time needed for neighbors to restart (sec).
        :param pulumi.Input[int] graceful_stalepath_time: Time to hold stale paths of restarting neighbor (sec).
        :param pulumi.Input[int] graceful_update_delay: Route advertisement/selection delay after restart (sec).
        :param pulumi.Input[int] holdtime_timer: Number of seconds to mark peer as dead.
        :param pulumi.Input[str] ibgp_multipath: Enable/disable IBGP multi-path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ignore_optional_capability: Don't send unknown optional capability notification message Valid values: `enable`, `disable`.
        :param pulumi.Input[int] keepalive_timer: Frequency to send keep alive requests.
        :param pulumi.Input[str] log_neighbour_changes: Enable logging of BGP neighbour's changes Valid values: `enable`, `disable`.
        :param pulumi.Input[str] multipath_recursive_distance: Enable/disable use of recursive distance to select multipath. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborGroupArgs']]]] neighbor_groups: BGP neighbor group table. The structure of `neighbor_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborRange6Args']]]] neighbor_range6s: BGP IPv6 neighbor range table. The structure of `neighbor_range6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborRangeArgs']]]] neighbor_ranges: BGP neighbor range table. The structure of `neighbor_range` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborArgs']]]] neighbors: BGP neighbor table. The structure of `neighbor` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNetwork6Args']]]] network6s: BGP IPv6 network table. The structure of `network6` block is documented below.
        :param pulumi.Input[str] network_import_check: Enable/disable ensure BGP network route exists in IGP. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNetworkArgs']]]] networks: BGP network table. The structure of `network` block is documented below.
        :param pulumi.Input[str] recursive_inherit_priority: Enable/disable priority inheritance for recursive resolution. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] recursive_next_hop: Enable/disable recursive resolution of next-hop using BGP route. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpRedistribute6Args']]]] redistribute6s: BGP IPv6 redistribute table. The structure of `redistribute6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpRedistributeArgs']]]] redistributes: BGP IPv4 redistribute table. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] router_id: Router ID.
        :param pulumi.Input[int] scan_time: Background scanner interval (sec), 0 to disable it.
        :param pulumi.Input[str] synchronization: Enable/disable only advertise routes from iBGP if routes present in an IGP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tag_resolve_mode: Configure tag-match mode. Resolves BGP routes with other routes containing the same tag. Valid values: `disable`, `preferred`, `merge`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrf6Args']]]] vrf6s: BGP IPv6 VRF leaking table. The structure of `vrf6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfLeak6Args']]]] vrf_leak6s: BGP IPv6 VRF leaking table. The structure of `vrf_leak6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfLeakArgs']]]] vrf_leaks: BGP VRF leaking table. The structure of `vrf_leak` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfArgs']]]] vrves: BGP VRF leaking table. The structure of `vrf` block is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BgpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure BGP.

        > The provider supports the definition of Neighbor in Router Bgp `router.Bgp`, and also allows the definition of separate Neighbor resources `router/bgp.Neighbor`, but do not use a `router.Bgp` with in-line Neighbor in conjunction with any `router/bgp.Neighbor` resources, otherwise conflicts and overwrite will occur.

        > The provider supports the definition of Network in Router Bgp `router.Bgp`, and also allows the definition of separate Network resources `router/bgp.Network`, but do not use a `router.Bgp` with in-line Network in conjunction with any `router/bgp.Network` resources, otherwise conflicts and overwrite will occur.

        > The provider supports the definition of Network6 in Router Bgp `router.Bgp`, and also allows the definition of separate Network6 resources `router/bgp.Network6`, but do not use a `router.Bgp` with in-line Network6 in conjunction with any `router/bgp.Network6` resources, otherwise conflicts and overwrite will occur.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.router.Bgp("trname",
            additional_path_select=2,
            additional_path_select6=2,
            always_compare_med="disable",
            as_=0,
            client_to_client_reflection="enable",
            cluster_id="0.0.0.0",
            dampening="disable",
            dampening_max_suppress_time=60,
            dampening_reachability_half_life=15,
            dampening_reuse=750,
            dampening_suppress=2000,
            dampening_unreachability_half_life=15,
            default_local_preference=100,
            deterministic_med="disable",
            distance_external=20,
            distance_internal=200,
            distance_local=200,
            graceful_restart_time=120,
            graceful_stalepath_time=360,
            graceful_update_delay=120,
            holdtime_timer=180,
            ibgp_multipath="disable",
            ignore_optional_capability="enable",
            keepalive_timer=60,
            log_neighbour_changes="enable",
            network_import_check="enable",
            redistributes=[
                fortios.router.BgpRedistributeArgs(
                    name="connected",
                    status="disable",
                ),
                fortios.router.BgpRedistributeArgs(
                    name="rip",
                    status="disable",
                ),
                fortios.router.BgpRedistributeArgs(
                    name="ospf",
                    status="disable",
                ),
                fortios.router.BgpRedistributeArgs(
                    name="static",
                    status="disable",
                ),
                fortios.router.BgpRedistributeArgs(
                    name="isis",
                    status="disable",
                ),
            ],
            redistribute6s=[
                fortios.router.BgpRedistribute6Args(
                    name="connected",
                    status="disable",
                ),
                fortios.router.BgpRedistribute6Args(
                    name="rip",
                    status="disable",
                ),
                fortios.router.BgpRedistribute6Args(
                    name="ospf",
                    status="disable",
                ),
                fortios.router.BgpRedistribute6Args(
                    name="static",
                    status="disable",
                ),
                fortios.router.BgpRedistribute6Args(
                    name="isis",
                    status="disable",
                ),
            ],
            scan_time=60,
            synchronization="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Router Bgp can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:router/bgp:Bgp labelname RouterBgp
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:router/bgp:Bgp labelname RouterBgp
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param BgpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BgpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_path: Optional[pulumi.Input[str]] = None,
                 additional_path6: Optional[pulumi.Input[str]] = None,
                 additional_path_select: Optional[pulumi.Input[int]] = None,
                 additional_path_select6: Optional[pulumi.Input[int]] = None,
                 additional_path_select_vpnv4: Optional[pulumi.Input[int]] = None,
                 additional_path_select_vpnv6: Optional[pulumi.Input[int]] = None,
                 additional_path_vpnv4: Optional[pulumi.Input[str]] = None,
                 additional_path_vpnv6: Optional[pulumi.Input[str]] = None,
                 admin_distances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAdminDistanceArgs']]]]] = None,
                 aggregate_address6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAggregateAddress6Args']]]]] = None,
                 aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAggregateAddressArgs']]]]] = None,
                 always_compare_med: Optional[pulumi.Input[str]] = None,
                 as_: Optional[pulumi.Input[int]] = None,
                 as_string: Optional[pulumi.Input[str]] = None,
                 bestpath_as_path_ignore: Optional[pulumi.Input[str]] = None,
                 bestpath_cmp_confed_aspath: Optional[pulumi.Input[str]] = None,
                 bestpath_cmp_routerid: Optional[pulumi.Input[str]] = None,
                 bestpath_med_confed: Optional[pulumi.Input[str]] = None,
                 bestpath_med_missing_as_worst: Optional[pulumi.Input[str]] = None,
                 client_to_client_reflection: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 confederation_identifier: Optional[pulumi.Input[int]] = None,
                 confederation_peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpConfederationPeerArgs']]]]] = None,
                 cross_family_conditional_adv: Optional[pulumi.Input[str]] = None,
                 dampening: Optional[pulumi.Input[str]] = None,
                 dampening_max_suppress_time: Optional[pulumi.Input[int]] = None,
                 dampening_reachability_half_life: Optional[pulumi.Input[int]] = None,
                 dampening_reuse: Optional[pulumi.Input[int]] = None,
                 dampening_route_map: Optional[pulumi.Input[str]] = None,
                 dampening_suppress: Optional[pulumi.Input[int]] = None,
                 dampening_unreachability_half_life: Optional[pulumi.Input[int]] = None,
                 default_local_preference: Optional[pulumi.Input[int]] = None,
                 deterministic_med: Optional[pulumi.Input[str]] = None,
                 distance_external: Optional[pulumi.Input[int]] = None,
                 distance_internal: Optional[pulumi.Input[int]] = None,
                 distance_local: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ebgp_multipath: Optional[pulumi.Input[str]] = None,
                 enforce_first_as: Optional[pulumi.Input[str]] = None,
                 fast_external_failover: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 graceful_end_on_timer: Optional[pulumi.Input[str]] = None,
                 graceful_restart: Optional[pulumi.Input[str]] = None,
                 graceful_restart_time: Optional[pulumi.Input[int]] = None,
                 graceful_stalepath_time: Optional[pulumi.Input[int]] = None,
                 graceful_update_delay: Optional[pulumi.Input[int]] = None,
                 holdtime_timer: Optional[pulumi.Input[int]] = None,
                 ibgp_multipath: Optional[pulumi.Input[str]] = None,
                 ignore_optional_capability: Optional[pulumi.Input[str]] = None,
                 keepalive_timer: Optional[pulumi.Input[int]] = None,
                 log_neighbour_changes: Optional[pulumi.Input[str]] = None,
                 multipath_recursive_distance: Optional[pulumi.Input[str]] = None,
                 neighbor_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborGroupArgs']]]]] = None,
                 neighbor_range6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborRange6Args']]]]] = None,
                 neighbor_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborRangeArgs']]]]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborArgs']]]]] = None,
                 network6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNetwork6Args']]]]] = None,
                 network_import_check: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNetworkArgs']]]]] = None,
                 recursive_inherit_priority: Optional[pulumi.Input[str]] = None,
                 recursive_next_hop: Optional[pulumi.Input[str]] = None,
                 redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpRedistribute6Args']]]]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpRedistributeArgs']]]]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 scan_time: Optional[pulumi.Input[int]] = None,
                 synchronization: Optional[pulumi.Input[str]] = None,
                 tag_resolve_mode: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vrf6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrf6Args']]]]] = None,
                 vrf_leak6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfLeak6Args']]]]] = None,
                 vrf_leaks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfLeakArgs']]]]] = None,
                 vrves: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BgpArgs.__new__(BgpArgs)

            __props__.__dict__["additional_path"] = additional_path
            __props__.__dict__["additional_path6"] = additional_path6
            __props__.__dict__["additional_path_select"] = additional_path_select
            __props__.__dict__["additional_path_select6"] = additional_path_select6
            __props__.__dict__["additional_path_select_vpnv4"] = additional_path_select_vpnv4
            __props__.__dict__["additional_path_select_vpnv6"] = additional_path_select_vpnv6
            __props__.__dict__["additional_path_vpnv4"] = additional_path_vpnv4
            __props__.__dict__["additional_path_vpnv6"] = additional_path_vpnv6
            __props__.__dict__["admin_distances"] = admin_distances
            __props__.__dict__["aggregate_address6s"] = aggregate_address6s
            __props__.__dict__["aggregate_addresses"] = aggregate_addresses
            __props__.__dict__["always_compare_med"] = always_compare_med
            if as_ is None and not opts.urn:
                raise TypeError("Missing required property 'as_'")
            __props__.__dict__["as_"] = as_
            __props__.__dict__["as_string"] = as_string
            __props__.__dict__["bestpath_as_path_ignore"] = bestpath_as_path_ignore
            __props__.__dict__["bestpath_cmp_confed_aspath"] = bestpath_cmp_confed_aspath
            __props__.__dict__["bestpath_cmp_routerid"] = bestpath_cmp_routerid
            __props__.__dict__["bestpath_med_confed"] = bestpath_med_confed
            __props__.__dict__["bestpath_med_missing_as_worst"] = bestpath_med_missing_as_worst
            __props__.__dict__["client_to_client_reflection"] = client_to_client_reflection
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["confederation_identifier"] = confederation_identifier
            __props__.__dict__["confederation_peers"] = confederation_peers
            __props__.__dict__["cross_family_conditional_adv"] = cross_family_conditional_adv
            __props__.__dict__["dampening"] = dampening
            __props__.__dict__["dampening_max_suppress_time"] = dampening_max_suppress_time
            __props__.__dict__["dampening_reachability_half_life"] = dampening_reachability_half_life
            __props__.__dict__["dampening_reuse"] = dampening_reuse
            __props__.__dict__["dampening_route_map"] = dampening_route_map
            __props__.__dict__["dampening_suppress"] = dampening_suppress
            __props__.__dict__["dampening_unreachability_half_life"] = dampening_unreachability_half_life
            __props__.__dict__["default_local_preference"] = default_local_preference
            __props__.__dict__["deterministic_med"] = deterministic_med
            __props__.__dict__["distance_external"] = distance_external
            __props__.__dict__["distance_internal"] = distance_internal
            __props__.__dict__["distance_local"] = distance_local
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["ebgp_multipath"] = ebgp_multipath
            __props__.__dict__["enforce_first_as"] = enforce_first_as
            __props__.__dict__["fast_external_failover"] = fast_external_failover
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["graceful_end_on_timer"] = graceful_end_on_timer
            __props__.__dict__["graceful_restart"] = graceful_restart
            __props__.__dict__["graceful_restart_time"] = graceful_restart_time
            __props__.__dict__["graceful_stalepath_time"] = graceful_stalepath_time
            __props__.__dict__["graceful_update_delay"] = graceful_update_delay
            __props__.__dict__["holdtime_timer"] = holdtime_timer
            __props__.__dict__["ibgp_multipath"] = ibgp_multipath
            __props__.__dict__["ignore_optional_capability"] = ignore_optional_capability
            __props__.__dict__["keepalive_timer"] = keepalive_timer
            __props__.__dict__["log_neighbour_changes"] = log_neighbour_changes
            __props__.__dict__["multipath_recursive_distance"] = multipath_recursive_distance
            __props__.__dict__["neighbor_groups"] = neighbor_groups
            __props__.__dict__["neighbor_range6s"] = neighbor_range6s
            __props__.__dict__["neighbor_ranges"] = neighbor_ranges
            __props__.__dict__["neighbors"] = neighbors
            __props__.__dict__["network6s"] = network6s
            __props__.__dict__["network_import_check"] = network_import_check
            __props__.__dict__["networks"] = networks
            __props__.__dict__["recursive_inherit_priority"] = recursive_inherit_priority
            __props__.__dict__["recursive_next_hop"] = recursive_next_hop
            __props__.__dict__["redistribute6s"] = redistribute6s
            __props__.__dict__["redistributes"] = redistributes
            __props__.__dict__["router_id"] = router_id
            __props__.__dict__["scan_time"] = scan_time
            __props__.__dict__["synchronization"] = synchronization
            __props__.__dict__["tag_resolve_mode"] = tag_resolve_mode
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vrf6s"] = vrf6s
            __props__.__dict__["vrf_leak6s"] = vrf_leak6s
            __props__.__dict__["vrf_leaks"] = vrf_leaks
            __props__.__dict__["vrves"] = vrves
        super(Bgp, __self__).__init__(
            'fortios:router/bgp:Bgp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_path: Optional[pulumi.Input[str]] = None,
            additional_path6: Optional[pulumi.Input[str]] = None,
            additional_path_select: Optional[pulumi.Input[int]] = None,
            additional_path_select6: Optional[pulumi.Input[int]] = None,
            additional_path_select_vpnv4: Optional[pulumi.Input[int]] = None,
            additional_path_select_vpnv6: Optional[pulumi.Input[int]] = None,
            additional_path_vpnv4: Optional[pulumi.Input[str]] = None,
            additional_path_vpnv6: Optional[pulumi.Input[str]] = None,
            admin_distances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAdminDistanceArgs']]]]] = None,
            aggregate_address6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAggregateAddress6Args']]]]] = None,
            aggregate_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAggregateAddressArgs']]]]] = None,
            always_compare_med: Optional[pulumi.Input[str]] = None,
            as_: Optional[pulumi.Input[int]] = None,
            as_string: Optional[pulumi.Input[str]] = None,
            bestpath_as_path_ignore: Optional[pulumi.Input[str]] = None,
            bestpath_cmp_confed_aspath: Optional[pulumi.Input[str]] = None,
            bestpath_cmp_routerid: Optional[pulumi.Input[str]] = None,
            bestpath_med_confed: Optional[pulumi.Input[str]] = None,
            bestpath_med_missing_as_worst: Optional[pulumi.Input[str]] = None,
            client_to_client_reflection: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            confederation_identifier: Optional[pulumi.Input[int]] = None,
            confederation_peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpConfederationPeerArgs']]]]] = None,
            cross_family_conditional_adv: Optional[pulumi.Input[str]] = None,
            dampening: Optional[pulumi.Input[str]] = None,
            dampening_max_suppress_time: Optional[pulumi.Input[int]] = None,
            dampening_reachability_half_life: Optional[pulumi.Input[int]] = None,
            dampening_reuse: Optional[pulumi.Input[int]] = None,
            dampening_route_map: Optional[pulumi.Input[str]] = None,
            dampening_suppress: Optional[pulumi.Input[int]] = None,
            dampening_unreachability_half_life: Optional[pulumi.Input[int]] = None,
            default_local_preference: Optional[pulumi.Input[int]] = None,
            deterministic_med: Optional[pulumi.Input[str]] = None,
            distance_external: Optional[pulumi.Input[int]] = None,
            distance_internal: Optional[pulumi.Input[int]] = None,
            distance_local: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            ebgp_multipath: Optional[pulumi.Input[str]] = None,
            enforce_first_as: Optional[pulumi.Input[str]] = None,
            fast_external_failover: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            graceful_end_on_timer: Optional[pulumi.Input[str]] = None,
            graceful_restart: Optional[pulumi.Input[str]] = None,
            graceful_restart_time: Optional[pulumi.Input[int]] = None,
            graceful_stalepath_time: Optional[pulumi.Input[int]] = None,
            graceful_update_delay: Optional[pulumi.Input[int]] = None,
            holdtime_timer: Optional[pulumi.Input[int]] = None,
            ibgp_multipath: Optional[pulumi.Input[str]] = None,
            ignore_optional_capability: Optional[pulumi.Input[str]] = None,
            keepalive_timer: Optional[pulumi.Input[int]] = None,
            log_neighbour_changes: Optional[pulumi.Input[str]] = None,
            multipath_recursive_distance: Optional[pulumi.Input[str]] = None,
            neighbor_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborGroupArgs']]]]] = None,
            neighbor_range6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborRange6Args']]]]] = None,
            neighbor_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborRangeArgs']]]]] = None,
            neighbors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborArgs']]]]] = None,
            network6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNetwork6Args']]]]] = None,
            network_import_check: Optional[pulumi.Input[str]] = None,
            networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNetworkArgs']]]]] = None,
            recursive_inherit_priority: Optional[pulumi.Input[str]] = None,
            recursive_next_hop: Optional[pulumi.Input[str]] = None,
            redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpRedistribute6Args']]]]] = None,
            redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpRedistributeArgs']]]]] = None,
            router_id: Optional[pulumi.Input[str]] = None,
            scan_time: Optional[pulumi.Input[int]] = None,
            synchronization: Optional[pulumi.Input[str]] = None,
            tag_resolve_mode: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vrf6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrf6Args']]]]] = None,
            vrf_leak6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfLeak6Args']]]]] = None,
            vrf_leaks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfLeakArgs']]]]] = None,
            vrves: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfArgs']]]]] = None) -> 'Bgp':
        """
        Get an existing Bgp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] additional_path: Enable/disable selection of BGP IPv4 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] additional_path6: Enable/disable selection of BGP IPv6 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] additional_path_select: Number of additional paths to be selected for each IPv4 NLRI.
        :param pulumi.Input[int] additional_path_select6: Number of additional paths to be selected for each IPv6 NLRI.
        :param pulumi.Input[int] additional_path_select_vpnv4: Number of additional paths to be selected for each VPNv4 NLRI.
        :param pulumi.Input[int] additional_path_select_vpnv6: Number of additional paths to be selected for each VPNv6 NLRI.
        :param pulumi.Input[str] additional_path_vpnv4: Enable/disable selection of BGP VPNv4 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] additional_path_vpnv6: Enable/disable selection of BGP VPNv6 additional paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAdminDistanceArgs']]]] admin_distances: Administrative distance modifications. The structure of `admin_distance` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAggregateAddress6Args']]]] aggregate_address6s: BGP IPv6 aggregate address table. The structure of `aggregate_address6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpAggregateAddressArgs']]]] aggregate_addresses: BGP aggregate address table. The structure of `aggregate_address` block is documented below.
        :param pulumi.Input[str] always_compare_med: Enable/disable always compare MED. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] as_: Router AS number, valid from 1 to 4294967295, 0 to disable BGP.
        :param pulumi.Input[str] as_string: Router AS number, asplain/asdot/asdot+ format, 0 to disable BGP.
        :param pulumi.Input[str] bestpath_as_path_ignore: Enable/disable ignore AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_cmp_confed_aspath: Enable/disable compare federation AS path length. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_cmp_routerid: Enable/disable compare router ID for identical EBGP paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_med_confed: Enable/disable compare MED among confederation paths. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bestpath_med_missing_as_worst: Enable/disable treat missing MED as least preferred. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] client_to_client_reflection: Enable/disable client-to-client route reflection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cluster_id: Route reflector cluster ID.
        :param pulumi.Input[int] confederation_identifier: Confederation identifier.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpConfederationPeerArgs']]]] confederation_peers: Confederation peers. The structure of `confederation_peers` block is documented below.
        :param pulumi.Input[str] cross_family_conditional_adv: Enable/disable cross address family conditional advertisement. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dampening: Enable/disable route-flap dampening. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] dampening_max_suppress_time: Maximum minutes a route can be suppressed.
        :param pulumi.Input[int] dampening_reachability_half_life: Reachability half-life time for penalty (min).
        :param pulumi.Input[int] dampening_reuse: Threshold to reuse routes.
        :param pulumi.Input[str] dampening_route_map: Criteria for dampening.
        :param pulumi.Input[int] dampening_suppress: Threshold to suppress routes.
        :param pulumi.Input[int] dampening_unreachability_half_life: Unreachability half-life time for penalty (min).
        :param pulumi.Input[int] default_local_preference: Default local preference.
        :param pulumi.Input[str] deterministic_med: Enable/disable enforce deterministic comparison of MED. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] distance_external: Distance for routes external to the AS.
        :param pulumi.Input[int] distance_internal: Distance for routes internal to the AS.
        :param pulumi.Input[int] distance_local: Distance for routes local to the AS.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ebgp_multipath: Enable/disable EBGP multi-path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] enforce_first_as: Enable/disable enforce first AS for EBGP routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fast_external_failover: Enable/disable reset peer BGP session if link goes down. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] graceful_end_on_timer: Enable/disable to exit graceful restart on timer only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] graceful_restart: Enable/disable BGP graceful restart capabilities. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] graceful_restart_time: Time needed for neighbors to restart (sec).
        :param pulumi.Input[int] graceful_stalepath_time: Time to hold stale paths of restarting neighbor (sec).
        :param pulumi.Input[int] graceful_update_delay: Route advertisement/selection delay after restart (sec).
        :param pulumi.Input[int] holdtime_timer: Number of seconds to mark peer as dead.
        :param pulumi.Input[str] ibgp_multipath: Enable/disable IBGP multi-path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ignore_optional_capability: Don't send unknown optional capability notification message Valid values: `enable`, `disable`.
        :param pulumi.Input[int] keepalive_timer: Frequency to send keep alive requests.
        :param pulumi.Input[str] log_neighbour_changes: Enable logging of BGP neighbour's changes Valid values: `enable`, `disable`.
        :param pulumi.Input[str] multipath_recursive_distance: Enable/disable use of recursive distance to select multipath. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborGroupArgs']]]] neighbor_groups: BGP neighbor group table. The structure of `neighbor_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborRange6Args']]]] neighbor_range6s: BGP IPv6 neighbor range table. The structure of `neighbor_range6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborRangeArgs']]]] neighbor_ranges: BGP neighbor range table. The structure of `neighbor_range` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNeighborArgs']]]] neighbors: BGP neighbor table. The structure of `neighbor` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNetwork6Args']]]] network6s: BGP IPv6 network table. The structure of `network6` block is documented below.
        :param pulumi.Input[str] network_import_check: Enable/disable ensure BGP network route exists in IGP. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpNetworkArgs']]]] networks: BGP network table. The structure of `network` block is documented below.
        :param pulumi.Input[str] recursive_inherit_priority: Enable/disable priority inheritance for recursive resolution. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] recursive_next_hop: Enable/disable recursive resolution of next-hop using BGP route. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpRedistribute6Args']]]] redistribute6s: BGP IPv6 redistribute table. The structure of `redistribute6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpRedistributeArgs']]]] redistributes: BGP IPv4 redistribute table. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] router_id: Router ID.
        :param pulumi.Input[int] scan_time: Background scanner interval (sec), 0 to disable it.
        :param pulumi.Input[str] synchronization: Enable/disable only advertise routes from iBGP if routes present in an IGP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tag_resolve_mode: Configure tag-match mode. Resolves BGP routes with other routes containing the same tag. Valid values: `disable`, `preferred`, `merge`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrf6Args']]]] vrf6s: BGP IPv6 VRF leaking table. The structure of `vrf6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfLeak6Args']]]] vrf_leak6s: BGP IPv6 VRF leaking table. The structure of `vrf_leak6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfLeakArgs']]]] vrf_leaks: BGP VRF leaking table. The structure of `vrf_leak` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BgpVrfArgs']]]] vrves: BGP VRF leaking table. The structure of `vrf` block is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BgpState.__new__(_BgpState)

        __props__.__dict__["additional_path"] = additional_path
        __props__.__dict__["additional_path6"] = additional_path6
        __props__.__dict__["additional_path_select"] = additional_path_select
        __props__.__dict__["additional_path_select6"] = additional_path_select6
        __props__.__dict__["additional_path_select_vpnv4"] = additional_path_select_vpnv4
        __props__.__dict__["additional_path_select_vpnv6"] = additional_path_select_vpnv6
        __props__.__dict__["additional_path_vpnv4"] = additional_path_vpnv4
        __props__.__dict__["additional_path_vpnv6"] = additional_path_vpnv6
        __props__.__dict__["admin_distances"] = admin_distances
        __props__.__dict__["aggregate_address6s"] = aggregate_address6s
        __props__.__dict__["aggregate_addresses"] = aggregate_addresses
        __props__.__dict__["always_compare_med"] = always_compare_med
        __props__.__dict__["as_"] = as_
        __props__.__dict__["as_string"] = as_string
        __props__.__dict__["bestpath_as_path_ignore"] = bestpath_as_path_ignore
        __props__.__dict__["bestpath_cmp_confed_aspath"] = bestpath_cmp_confed_aspath
        __props__.__dict__["bestpath_cmp_routerid"] = bestpath_cmp_routerid
        __props__.__dict__["bestpath_med_confed"] = bestpath_med_confed
        __props__.__dict__["bestpath_med_missing_as_worst"] = bestpath_med_missing_as_worst
        __props__.__dict__["client_to_client_reflection"] = client_to_client_reflection
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["confederation_identifier"] = confederation_identifier
        __props__.__dict__["confederation_peers"] = confederation_peers
        __props__.__dict__["cross_family_conditional_adv"] = cross_family_conditional_adv
        __props__.__dict__["dampening"] = dampening
        __props__.__dict__["dampening_max_suppress_time"] = dampening_max_suppress_time
        __props__.__dict__["dampening_reachability_half_life"] = dampening_reachability_half_life
        __props__.__dict__["dampening_reuse"] = dampening_reuse
        __props__.__dict__["dampening_route_map"] = dampening_route_map
        __props__.__dict__["dampening_suppress"] = dampening_suppress
        __props__.__dict__["dampening_unreachability_half_life"] = dampening_unreachability_half_life
        __props__.__dict__["default_local_preference"] = default_local_preference
        __props__.__dict__["deterministic_med"] = deterministic_med
        __props__.__dict__["distance_external"] = distance_external
        __props__.__dict__["distance_internal"] = distance_internal
        __props__.__dict__["distance_local"] = distance_local
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["ebgp_multipath"] = ebgp_multipath
        __props__.__dict__["enforce_first_as"] = enforce_first_as
        __props__.__dict__["fast_external_failover"] = fast_external_failover
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["graceful_end_on_timer"] = graceful_end_on_timer
        __props__.__dict__["graceful_restart"] = graceful_restart
        __props__.__dict__["graceful_restart_time"] = graceful_restart_time
        __props__.__dict__["graceful_stalepath_time"] = graceful_stalepath_time
        __props__.__dict__["graceful_update_delay"] = graceful_update_delay
        __props__.__dict__["holdtime_timer"] = holdtime_timer
        __props__.__dict__["ibgp_multipath"] = ibgp_multipath
        __props__.__dict__["ignore_optional_capability"] = ignore_optional_capability
        __props__.__dict__["keepalive_timer"] = keepalive_timer
        __props__.__dict__["log_neighbour_changes"] = log_neighbour_changes
        __props__.__dict__["multipath_recursive_distance"] = multipath_recursive_distance
        __props__.__dict__["neighbor_groups"] = neighbor_groups
        __props__.__dict__["neighbor_range6s"] = neighbor_range6s
        __props__.__dict__["neighbor_ranges"] = neighbor_ranges
        __props__.__dict__["neighbors"] = neighbors
        __props__.__dict__["network6s"] = network6s
        __props__.__dict__["network_import_check"] = network_import_check
        __props__.__dict__["networks"] = networks
        __props__.__dict__["recursive_inherit_priority"] = recursive_inherit_priority
        __props__.__dict__["recursive_next_hop"] = recursive_next_hop
        __props__.__dict__["redistribute6s"] = redistribute6s
        __props__.__dict__["redistributes"] = redistributes
        __props__.__dict__["router_id"] = router_id
        __props__.__dict__["scan_time"] = scan_time
        __props__.__dict__["synchronization"] = synchronization
        __props__.__dict__["tag_resolve_mode"] = tag_resolve_mode
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vrf6s"] = vrf6s
        __props__.__dict__["vrf_leak6s"] = vrf_leak6s
        __props__.__dict__["vrf_leaks"] = vrf_leaks
        __props__.__dict__["vrves"] = vrves
        return Bgp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> pulumi.Output[str]:
        """
        Enable/disable selection of BGP IPv4 additional paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "additional_path")

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> pulumi.Output[str]:
        """
        Enable/disable selection of BGP IPv6 additional paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "additional_path6")

    @property
    @pulumi.getter(name="additionalPathSelect")
    def additional_path_select(self) -> pulumi.Output[int]:
        """
        Number of additional paths to be selected for each IPv4 NLRI.
        """
        return pulumi.get(self, "additional_path_select")

    @property
    @pulumi.getter(name="additionalPathSelect6")
    def additional_path_select6(self) -> pulumi.Output[int]:
        """
        Number of additional paths to be selected for each IPv6 NLRI.
        """
        return pulumi.get(self, "additional_path_select6")

    @property
    @pulumi.getter(name="additionalPathSelectVpnv4")
    def additional_path_select_vpnv4(self) -> pulumi.Output[int]:
        """
        Number of additional paths to be selected for each VPNv4 NLRI.
        """
        return pulumi.get(self, "additional_path_select_vpnv4")

    @property
    @pulumi.getter(name="additionalPathSelectVpnv6")
    def additional_path_select_vpnv6(self) -> pulumi.Output[int]:
        """
        Number of additional paths to be selected for each VPNv6 NLRI.
        """
        return pulumi.get(self, "additional_path_select_vpnv6")

    @property
    @pulumi.getter(name="additionalPathVpnv4")
    def additional_path_vpnv4(self) -> pulumi.Output[str]:
        """
        Enable/disable selection of BGP VPNv4 additional paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv4")

    @property
    @pulumi.getter(name="additionalPathVpnv6")
    def additional_path_vpnv6(self) -> pulumi.Output[str]:
        """
        Enable/disable selection of BGP VPNv6 additional paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "additional_path_vpnv6")

    @property
    @pulumi.getter(name="adminDistances")
    def admin_distances(self) -> pulumi.Output[Optional[Sequence['outputs.BgpAdminDistance']]]:
        """
        Administrative distance modifications. The structure of `admin_distance` block is documented below.
        """
        return pulumi.get(self, "admin_distances")

    @property
    @pulumi.getter(name="aggregateAddress6s")
    def aggregate_address6s(self) -> pulumi.Output[Optional[Sequence['outputs.BgpAggregateAddress6']]]:
        """
        BGP IPv6 aggregate address table. The structure of `aggregate_address6` block is documented below.
        """
        return pulumi.get(self, "aggregate_address6s")

    @property
    @pulumi.getter(name="aggregateAddresses")
    def aggregate_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.BgpAggregateAddress']]]:
        """
        BGP aggregate address table. The structure of `aggregate_address` block is documented below.
        """
        return pulumi.get(self, "aggregate_addresses")

    @property
    @pulumi.getter(name="alwaysCompareMed")
    def always_compare_med(self) -> pulumi.Output[str]:
        """
        Enable/disable always compare MED. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "always_compare_med")

    @property
    @pulumi.getter(name="as")
    def as_(self) -> pulumi.Output[int]:
        """
        Router AS number, valid from 1 to 4294967295, 0 to disable BGP.
        """
        return pulumi.get(self, "as_")

    @property
    @pulumi.getter(name="asString")
    def as_string(self) -> pulumi.Output[str]:
        """
        Router AS number, asplain/asdot/asdot+ format, 0 to disable BGP.
        """
        return pulumi.get(self, "as_string")

    @property
    @pulumi.getter(name="bestpathAsPathIgnore")
    def bestpath_as_path_ignore(self) -> pulumi.Output[str]:
        """
        Enable/disable ignore AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_as_path_ignore")

    @property
    @pulumi.getter(name="bestpathCmpConfedAspath")
    def bestpath_cmp_confed_aspath(self) -> pulumi.Output[str]:
        """
        Enable/disable compare federation AS path length. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_cmp_confed_aspath")

    @property
    @pulumi.getter(name="bestpathCmpRouterid")
    def bestpath_cmp_routerid(self) -> pulumi.Output[str]:
        """
        Enable/disable compare router ID for identical EBGP paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_cmp_routerid")

    @property
    @pulumi.getter(name="bestpathMedConfed")
    def bestpath_med_confed(self) -> pulumi.Output[str]:
        """
        Enable/disable compare MED among confederation paths. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_med_confed")

    @property
    @pulumi.getter(name="bestpathMedMissingAsWorst")
    def bestpath_med_missing_as_worst(self) -> pulumi.Output[str]:
        """
        Enable/disable treat missing MED as least preferred. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bestpath_med_missing_as_worst")

    @property
    @pulumi.getter(name="clientToClientReflection")
    def client_to_client_reflection(self) -> pulumi.Output[str]:
        """
        Enable/disable client-to-client route reflection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "client_to_client_reflection")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Route reflector cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="confederationIdentifier")
    def confederation_identifier(self) -> pulumi.Output[int]:
        """
        Confederation identifier.
        """
        return pulumi.get(self, "confederation_identifier")

    @property
    @pulumi.getter(name="confederationPeers")
    def confederation_peers(self) -> pulumi.Output[Optional[Sequence['outputs.BgpConfederationPeer']]]:
        """
        Confederation peers. The structure of `confederation_peers` block is documented below.
        """
        return pulumi.get(self, "confederation_peers")

    @property
    @pulumi.getter(name="crossFamilyConditionalAdv")
    def cross_family_conditional_adv(self) -> pulumi.Output[str]:
        """
        Enable/disable cross address family conditional advertisement. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cross_family_conditional_adv")

    @property
    @pulumi.getter
    def dampening(self) -> pulumi.Output[str]:
        """
        Enable/disable route-flap dampening. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dampening")

    @property
    @pulumi.getter(name="dampeningMaxSuppressTime")
    def dampening_max_suppress_time(self) -> pulumi.Output[int]:
        """
        Maximum minutes a route can be suppressed.
        """
        return pulumi.get(self, "dampening_max_suppress_time")

    @property
    @pulumi.getter(name="dampeningReachabilityHalfLife")
    def dampening_reachability_half_life(self) -> pulumi.Output[int]:
        """
        Reachability half-life time for penalty (min).
        """
        return pulumi.get(self, "dampening_reachability_half_life")

    @property
    @pulumi.getter(name="dampeningReuse")
    def dampening_reuse(self) -> pulumi.Output[int]:
        """
        Threshold to reuse routes.
        """
        return pulumi.get(self, "dampening_reuse")

    @property
    @pulumi.getter(name="dampeningRouteMap")
    def dampening_route_map(self) -> pulumi.Output[str]:
        """
        Criteria for dampening.
        """
        return pulumi.get(self, "dampening_route_map")

    @property
    @pulumi.getter(name="dampeningSuppress")
    def dampening_suppress(self) -> pulumi.Output[int]:
        """
        Threshold to suppress routes.
        """
        return pulumi.get(self, "dampening_suppress")

    @property
    @pulumi.getter(name="dampeningUnreachabilityHalfLife")
    def dampening_unreachability_half_life(self) -> pulumi.Output[int]:
        """
        Unreachability half-life time for penalty (min).
        """
        return pulumi.get(self, "dampening_unreachability_half_life")

    @property
    @pulumi.getter(name="defaultLocalPreference")
    def default_local_preference(self) -> pulumi.Output[int]:
        """
        Default local preference.
        """
        return pulumi.get(self, "default_local_preference")

    @property
    @pulumi.getter(name="deterministicMed")
    def deterministic_med(self) -> pulumi.Output[str]:
        """
        Enable/disable enforce deterministic comparison of MED. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "deterministic_med")

    @property
    @pulumi.getter(name="distanceExternal")
    def distance_external(self) -> pulumi.Output[int]:
        """
        Distance for routes external to the AS.
        """
        return pulumi.get(self, "distance_external")

    @property
    @pulumi.getter(name="distanceInternal")
    def distance_internal(self) -> pulumi.Output[int]:
        """
        Distance for routes internal to the AS.
        """
        return pulumi.get(self, "distance_internal")

    @property
    @pulumi.getter(name="distanceLocal")
    def distance_local(self) -> pulumi.Output[int]:
        """
        Distance for routes local to the AS.
        """
        return pulumi.get(self, "distance_local")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="ebgpMultipath")
    def ebgp_multipath(self) -> pulumi.Output[str]:
        """
        Enable/disable EBGP multi-path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ebgp_multipath")

    @property
    @pulumi.getter(name="enforceFirstAs")
    def enforce_first_as(self) -> pulumi.Output[str]:
        """
        Enable/disable enforce first AS for EBGP routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "enforce_first_as")

    @property
    @pulumi.getter(name="fastExternalFailover")
    def fast_external_failover(self) -> pulumi.Output[str]:
        """
        Enable/disable reset peer BGP session if link goes down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fast_external_failover")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="gracefulEndOnTimer")
    def graceful_end_on_timer(self) -> pulumi.Output[str]:
        """
        Enable/disable to exit graceful restart on timer only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "graceful_end_on_timer")

    @property
    @pulumi.getter(name="gracefulRestart")
    def graceful_restart(self) -> pulumi.Output[str]:
        """
        Enable/disable BGP graceful restart capabilities. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "graceful_restart")

    @property
    @pulumi.getter(name="gracefulRestartTime")
    def graceful_restart_time(self) -> pulumi.Output[int]:
        """
        Time needed for neighbors to restart (sec).
        """
        return pulumi.get(self, "graceful_restart_time")

    @property
    @pulumi.getter(name="gracefulStalepathTime")
    def graceful_stalepath_time(self) -> pulumi.Output[int]:
        """
        Time to hold stale paths of restarting neighbor (sec).
        """
        return pulumi.get(self, "graceful_stalepath_time")

    @property
    @pulumi.getter(name="gracefulUpdateDelay")
    def graceful_update_delay(self) -> pulumi.Output[int]:
        """
        Route advertisement/selection delay after restart (sec).
        """
        return pulumi.get(self, "graceful_update_delay")

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> pulumi.Output[int]:
        """
        Number of seconds to mark peer as dead.
        """
        return pulumi.get(self, "holdtime_timer")

    @property
    @pulumi.getter(name="ibgpMultipath")
    def ibgp_multipath(self) -> pulumi.Output[str]:
        """
        Enable/disable IBGP multi-path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ibgp_multipath")

    @property
    @pulumi.getter(name="ignoreOptionalCapability")
    def ignore_optional_capability(self) -> pulumi.Output[str]:
        """
        Don't send unknown optional capability notification message Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ignore_optional_capability")

    @property
    @pulumi.getter(name="keepaliveTimer")
    def keepalive_timer(self) -> pulumi.Output[int]:
        """
        Frequency to send keep alive requests.
        """
        return pulumi.get(self, "keepalive_timer")

    @property
    @pulumi.getter(name="logNeighbourChanges")
    def log_neighbour_changes(self) -> pulumi.Output[str]:
        """
        Enable logging of BGP neighbour's changes Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_neighbour_changes")

    @property
    @pulumi.getter(name="multipathRecursiveDistance")
    def multipath_recursive_distance(self) -> pulumi.Output[str]:
        """
        Enable/disable use of recursive distance to select multipath. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "multipath_recursive_distance")

    @property
    @pulumi.getter(name="neighborGroups")
    def neighbor_groups(self) -> pulumi.Output[Sequence['outputs.BgpNeighborGroup']]:
        """
        BGP neighbor group table. The structure of `neighbor_group` block is documented below.
        """
        return pulumi.get(self, "neighbor_groups")

    @property
    @pulumi.getter(name="neighborRange6s")
    def neighbor_range6s(self) -> pulumi.Output[Optional[Sequence['outputs.BgpNeighborRange6']]]:
        """
        BGP IPv6 neighbor range table. The structure of `neighbor_range6` block is documented below.
        """
        return pulumi.get(self, "neighbor_range6s")

    @property
    @pulumi.getter(name="neighborRanges")
    def neighbor_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.BgpNeighborRange']]]:
        """
        BGP neighbor range table. The structure of `neighbor_range` block is documented below.
        """
        return pulumi.get(self, "neighbor_ranges")

    @property
    @pulumi.getter
    def neighbors(self) -> pulumi.Output[Sequence['outputs.BgpNeighbor']]:
        """
        BGP neighbor table. The structure of `neighbor` block is documented below.
        """
        return pulumi.get(self, "neighbors")

    @property
    @pulumi.getter
    def network6s(self) -> pulumi.Output[Optional[Sequence['outputs.BgpNetwork6']]]:
        """
        BGP IPv6 network table. The structure of `network6` block is documented below.
        """
        return pulumi.get(self, "network6s")

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> pulumi.Output[str]:
        """
        Enable/disable ensure BGP network route exists in IGP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "network_import_check")

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Output[Optional[Sequence['outputs.BgpNetwork']]]:
        """
        BGP network table. The structure of `network` block is documented below.
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="recursiveInheritPriority")
    def recursive_inherit_priority(self) -> pulumi.Output[str]:
        """
        Enable/disable priority inheritance for recursive resolution. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "recursive_inherit_priority")

    @property
    @pulumi.getter(name="recursiveNextHop")
    def recursive_next_hop(self) -> pulumi.Output[str]:
        """
        Enable/disable recursive resolution of next-hop using BGP route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "recursive_next_hop")

    @property
    @pulumi.getter
    def redistribute6s(self) -> pulumi.Output[Optional[Sequence['outputs.BgpRedistribute6']]]:
        """
        BGP IPv6 redistribute table. The structure of `redistribute6` block is documented below.
        """
        return pulumi.get(self, "redistribute6s")

    @property
    @pulumi.getter
    def redistributes(self) -> pulumi.Output[Optional[Sequence['outputs.BgpRedistribute']]]:
        """
        BGP IPv4 redistribute table. The structure of `redistribute` block is documented below.
        """
        return pulumi.get(self, "redistributes")

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Output[str]:
        """
        Router ID.
        """
        return pulumi.get(self, "router_id")

    @property
    @pulumi.getter(name="scanTime")
    def scan_time(self) -> pulumi.Output[int]:
        """
        Background scanner interval (sec), 0 to disable it.
        """
        return pulumi.get(self, "scan_time")

    @property
    @pulumi.getter
    def synchronization(self) -> pulumi.Output[str]:
        """
        Enable/disable only advertise routes from iBGP if routes present in an IGP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "synchronization")

    @property
    @pulumi.getter(name="tagResolveMode")
    def tag_resolve_mode(self) -> pulumi.Output[str]:
        """
        Configure tag-match mode. Resolves BGP routes with other routes containing the same tag. Valid values: `disable`, `preferred`, `merge`.
        """
        return pulumi.get(self, "tag_resolve_mode")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vrf6s(self) -> pulumi.Output[Optional[Sequence['outputs.BgpVrf6']]]:
        """
        BGP IPv6 VRF leaking table. The structure of `vrf6` block is documented below.
        """
        return pulumi.get(self, "vrf6s")

    @property
    @pulumi.getter(name="vrfLeak6s")
    def vrf_leak6s(self) -> pulumi.Output[Optional[Sequence['outputs.BgpVrfLeak6']]]:
        """
        BGP IPv6 VRF leaking table. The structure of `vrf_leak6` block is documented below.
        """
        return pulumi.get(self, "vrf_leak6s")

    @property
    @pulumi.getter(name="vrfLeaks")
    def vrf_leaks(self) -> pulumi.Output[Optional[Sequence['outputs.BgpVrfLeak']]]:
        """
        BGP VRF leaking table. The structure of `vrf_leak` block is documented below.
        """
        return pulumi.get(self, "vrf_leaks")

    @property
    @pulumi.getter
    def vrves(self) -> pulumi.Output[Optional[Sequence['outputs.BgpVrf']]]:
        """
        BGP VRF leaking table. The structure of `vrf` block is documented below.
        """
        return pulumi.get(self, "vrves")

