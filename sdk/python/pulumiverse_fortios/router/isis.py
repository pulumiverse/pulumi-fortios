# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IsisArgs', 'Isis']

@pulumi.input_type
class IsisArgs:
    def __init__(__self__, *,
                 adjacency_check: Optional[pulumi.Input[str]] = None,
                 adjacency_check6: Optional[pulumi.Input[str]] = None,
                 adv_passive_only: Optional[pulumi.Input[str]] = None,
                 adv_passive_only6: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l1: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l2: Optional[pulumi.Input[str]] = None,
                 auth_mode_l1: Optional[pulumi.Input[str]] = None,
                 auth_mode_l2: Optional[pulumi.Input[str]] = None,
                 auth_password_l1: Optional[pulumi.Input[str]] = None,
                 auth_password_l2: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l1: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l2: Optional[pulumi.Input[str]] = None,
                 default_originate: Optional[pulumi.Input[str]] = None,
                 default_originate6: Optional[pulumi.Input[str]] = None,
                 dynamic_hostname: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ignore_lsp_errors: Optional[pulumi.Input[str]] = None,
                 is_type: Optional[pulumi.Input[str]] = None,
                 isis_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['IsisIsisInterfaceArgs']]]] = None,
                 isis_nets: Optional[pulumi.Input[Sequence[pulumi.Input['IsisIsisNetArgs']]]] = None,
                 lsp_gen_interval_l1: Optional[pulumi.Input[int]] = None,
                 lsp_gen_interval_l2: Optional[pulumi.Input[int]] = None,
                 lsp_refresh_interval: Optional[pulumi.Input[int]] = None,
                 max_lsp_lifetime: Optional[pulumi.Input[int]] = None,
                 metric_style: Optional[pulumi.Input[str]] = None,
                 overload_bit: Optional[pulumi.Input[str]] = None,
                 overload_bit_on_startup: Optional[pulumi.Input[int]] = None,
                 overload_bit_suppress: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2_list: Optional[pulumi.Input[str]] = None,
                 redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input['IsisRedistribute6Args']]]] = None,
                 redistribute_l1: Optional[pulumi.Input[str]] = None,
                 redistribute_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute_l2: Optional[pulumi.Input[str]] = None,
                 redistribute_l2_list: Optional[pulumi.Input[str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['IsisRedistributeArgs']]]] = None,
                 spf_interval_exp_l1: Optional[pulumi.Input[str]] = None,
                 spf_interval_exp_l2: Optional[pulumi.Input[str]] = None,
                 summary_address6s: Optional[pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddress6Args']]]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddressArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Isis resource.
        :param pulumi.Input[str] adjacency_check: Enable/disable adjacency check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] adjacency_check6: Enable/disable IPv6 adjacency check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] adv_passive_only: Enable/disable IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] adv_passive_only6: Enable/disable IPv6 IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_keychain_l1: Authentication key-chain for level 1 PDUs.
        :param pulumi.Input[str] auth_keychain_l2: Authentication key-chain for level 2 PDUs.
        :param pulumi.Input[str] auth_mode_l1: Level 1 authentication mode. Valid values: `password`, `md5`.
        :param pulumi.Input[str] auth_mode_l2: Level 2 authentication mode. Valid values: `password`, `md5`.
        :param pulumi.Input[str] auth_password_l1: Authentication password for level 1 PDUs.
        :param pulumi.Input[str] auth_password_l2: Authentication password for level 2 PDUs.
        :param pulumi.Input[str] auth_sendonly_l1: Enable/disable level 1 authentication send-only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_sendonly_l2: Enable/disable level 2 authentication send-only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] default_originate: Enable/disable distribution of default route information. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] default_originate6: Enable/disable distribution of default IPv6 route information. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_hostname: Enable/disable dynamic hostname. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ignore_lsp_errors: Enable/disable ignoring of LSP errors with bad checksums. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] is_type: IS type. Valid values: `level-1-2`, `level-1`, `level-2-only`.
        :param pulumi.Input[Sequence[pulumi.Input['IsisIsisInterfaceArgs']]] isis_interfaces: IS-IS interface configuration. The structure of `isis_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['IsisIsisNetArgs']]] isis_nets: IS-IS net configuration. The structure of `isis_net` block is documented below.
        :param pulumi.Input[int] lsp_gen_interval_l1: Minimum interval for level 1 LSP regenerating.
        :param pulumi.Input[int] lsp_gen_interval_l2: Minimum interval for level 2 LSP regenerating.
        :param pulumi.Input[int] lsp_refresh_interval: LSP refresh time in seconds.
        :param pulumi.Input[int] max_lsp_lifetime: Maximum LSP lifetime in seconds.
        :param pulumi.Input[str] metric_style: Use old-style (ISO 10589) or new-style packet formats Valid values: `narrow`, `wide`, `transition`, `narrow-transition`, `narrow-transition-l1`, `narrow-transition-l2`, `wide-l1`, `wide-l2`, `wide-transition`, `wide-transition-l1`, `wide-transition-l2`, `transition-l1`, `transition-l2`.
        :param pulumi.Input[str] overload_bit: Enable/disable signal other routers not to use us in SPF. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] overload_bit_on_startup: Overload-bit only temporarily after reboot.
        :param pulumi.Input[str] overload_bit_suppress: Suppress overload-bit for the specific prefixes. Valid values: `external`, `interlevel`.
        :param pulumi.Input[str] redistribute6_l1: Enable/disable redistribution of level 1 IPv6 routes into level 2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute6_l1_list: Access-list for IPv6 route redistribution from l1 to l2.
        :param pulumi.Input[str] redistribute6_l2: Enable/disable redistribution of level 2 IPv6 routes into level 1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute6_l2_list: Access-list for IPv6 route redistribution from l2 to l1.
        :param pulumi.Input[Sequence[pulumi.Input['IsisRedistribute6Args']]] redistribute6s: IS-IS IPv6 redistribution for routing protocols. The structure of `redistribute6` block is documented below.
        :param pulumi.Input[str] redistribute_l1: Enable/disable redistribution of level 1 routes into level 2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute_l1_list: Access-list for route redistribution from l1 to l2.
        :param pulumi.Input[str] redistribute_l2: Enable/disable redistribution of level 2 routes into level 1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute_l2_list: Access-list for route redistribution from l2 to l1.
        :param pulumi.Input[Sequence[pulumi.Input['IsisRedistributeArgs']]] redistributes: IS-IS redistribute protocols. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] spf_interval_exp_l1: Level 1 SPF calculation delay.
        :param pulumi.Input[str] spf_interval_exp_l2: Level 2 SPF calculation delay.
        :param pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddress6Args']]] summary_address6s: IS-IS IPv6 summary address. The structure of `summary_address6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddressArgs']]] summary_addresses: IS-IS summary addresses. The structure of `summary_address` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if adjacency_check is not None:
            pulumi.set(__self__, "adjacency_check", adjacency_check)
        if adjacency_check6 is not None:
            pulumi.set(__self__, "adjacency_check6", adjacency_check6)
        if adv_passive_only is not None:
            pulumi.set(__self__, "adv_passive_only", adv_passive_only)
        if adv_passive_only6 is not None:
            pulumi.set(__self__, "adv_passive_only6", adv_passive_only6)
        if auth_keychain_l1 is not None:
            pulumi.set(__self__, "auth_keychain_l1", auth_keychain_l1)
        if auth_keychain_l2 is not None:
            pulumi.set(__self__, "auth_keychain_l2", auth_keychain_l2)
        if auth_mode_l1 is not None:
            pulumi.set(__self__, "auth_mode_l1", auth_mode_l1)
        if auth_mode_l2 is not None:
            pulumi.set(__self__, "auth_mode_l2", auth_mode_l2)
        if auth_password_l1 is not None:
            pulumi.set(__self__, "auth_password_l1", auth_password_l1)
        if auth_password_l2 is not None:
            pulumi.set(__self__, "auth_password_l2", auth_password_l2)
        if auth_sendonly_l1 is not None:
            pulumi.set(__self__, "auth_sendonly_l1", auth_sendonly_l1)
        if auth_sendonly_l2 is not None:
            pulumi.set(__self__, "auth_sendonly_l2", auth_sendonly_l2)
        if default_originate is not None:
            pulumi.set(__self__, "default_originate", default_originate)
        if default_originate6 is not None:
            pulumi.set(__self__, "default_originate6", default_originate6)
        if dynamic_hostname is not None:
            pulumi.set(__self__, "dynamic_hostname", dynamic_hostname)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ignore_lsp_errors is not None:
            pulumi.set(__self__, "ignore_lsp_errors", ignore_lsp_errors)
        if is_type is not None:
            pulumi.set(__self__, "is_type", is_type)
        if isis_interfaces is not None:
            pulumi.set(__self__, "isis_interfaces", isis_interfaces)
        if isis_nets is not None:
            pulumi.set(__self__, "isis_nets", isis_nets)
        if lsp_gen_interval_l1 is not None:
            pulumi.set(__self__, "lsp_gen_interval_l1", lsp_gen_interval_l1)
        if lsp_gen_interval_l2 is not None:
            pulumi.set(__self__, "lsp_gen_interval_l2", lsp_gen_interval_l2)
        if lsp_refresh_interval is not None:
            pulumi.set(__self__, "lsp_refresh_interval", lsp_refresh_interval)
        if max_lsp_lifetime is not None:
            pulumi.set(__self__, "max_lsp_lifetime", max_lsp_lifetime)
        if metric_style is not None:
            pulumi.set(__self__, "metric_style", metric_style)
        if overload_bit is not None:
            pulumi.set(__self__, "overload_bit", overload_bit)
        if overload_bit_on_startup is not None:
            pulumi.set(__self__, "overload_bit_on_startup", overload_bit_on_startup)
        if overload_bit_suppress is not None:
            pulumi.set(__self__, "overload_bit_suppress", overload_bit_suppress)
        if redistribute6_l1 is not None:
            pulumi.set(__self__, "redistribute6_l1", redistribute6_l1)
        if redistribute6_l1_list is not None:
            pulumi.set(__self__, "redistribute6_l1_list", redistribute6_l1_list)
        if redistribute6_l2 is not None:
            pulumi.set(__self__, "redistribute6_l2", redistribute6_l2)
        if redistribute6_l2_list is not None:
            pulumi.set(__self__, "redistribute6_l2_list", redistribute6_l2_list)
        if redistribute6s is not None:
            pulumi.set(__self__, "redistribute6s", redistribute6s)
        if redistribute_l1 is not None:
            pulumi.set(__self__, "redistribute_l1", redistribute_l1)
        if redistribute_l1_list is not None:
            pulumi.set(__self__, "redistribute_l1_list", redistribute_l1_list)
        if redistribute_l2 is not None:
            pulumi.set(__self__, "redistribute_l2", redistribute_l2)
        if redistribute_l2_list is not None:
            pulumi.set(__self__, "redistribute_l2_list", redistribute_l2_list)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if spf_interval_exp_l1 is not None:
            pulumi.set(__self__, "spf_interval_exp_l1", spf_interval_exp_l1)
        if spf_interval_exp_l2 is not None:
            pulumi.set(__self__, "spf_interval_exp_l2", spf_interval_exp_l2)
        if summary_address6s is not None:
            pulumi.set(__self__, "summary_address6s", summary_address6s)
        if summary_addresses is not None:
            pulumi.set(__self__, "summary_addresses", summary_addresses)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="adjacencyCheck")
    def adjacency_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adjacency check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adjacency_check")

    @adjacency_check.setter
    def adjacency_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adjacency_check", value)

    @property
    @pulumi.getter(name="adjacencyCheck6")
    def adjacency_check6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 adjacency check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adjacency_check6")

    @adjacency_check6.setter
    def adjacency_check6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adjacency_check6", value)

    @property
    @pulumi.getter(name="advPassiveOnly")
    def adv_passive_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adv_passive_only")

    @adv_passive_only.setter
    def adv_passive_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adv_passive_only", value)

    @property
    @pulumi.getter(name="advPassiveOnly6")
    def adv_passive_only6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adv_passive_only6")

    @adv_passive_only6.setter
    def adv_passive_only6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adv_passive_only6", value)

    @property
    @pulumi.getter(name="authKeychainL1")
    def auth_keychain_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key-chain for level 1 PDUs.
        """
        return pulumi.get(self, "auth_keychain_l1")

    @auth_keychain_l1.setter
    def auth_keychain_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keychain_l1", value)

    @property
    @pulumi.getter(name="authKeychainL2")
    def auth_keychain_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key-chain for level 2 PDUs.
        """
        return pulumi.get(self, "auth_keychain_l2")

    @auth_keychain_l2.setter
    def auth_keychain_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keychain_l2", value)

    @property
    @pulumi.getter(name="authModeL1")
    def auth_mode_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Level 1 authentication mode. Valid values: `password`, `md5`.
        """
        return pulumi.get(self, "auth_mode_l1")

    @auth_mode_l1.setter
    def auth_mode_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode_l1", value)

    @property
    @pulumi.getter(name="authModeL2")
    def auth_mode_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Level 2 authentication mode. Valid values: `password`, `md5`.
        """
        return pulumi.get(self, "auth_mode_l2")

    @auth_mode_l2.setter
    def auth_mode_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode_l2", value)

    @property
    @pulumi.getter(name="authPasswordL1")
    def auth_password_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password for level 1 PDUs.
        """
        return pulumi.get(self, "auth_password_l1")

    @auth_password_l1.setter
    def auth_password_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password_l1", value)

    @property
    @pulumi.getter(name="authPasswordL2")
    def auth_password_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password for level 2 PDUs.
        """
        return pulumi.get(self, "auth_password_l2")

    @auth_password_l2.setter
    def auth_password_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password_l2", value)

    @property
    @pulumi.getter(name="authSendonlyL1")
    def auth_sendonly_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable level 1 authentication send-only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_sendonly_l1")

    @auth_sendonly_l1.setter
    def auth_sendonly_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_sendonly_l1", value)

    @property
    @pulumi.getter(name="authSendonlyL2")
    def auth_sendonly_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable level 2 authentication send-only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_sendonly_l2")

    @auth_sendonly_l2.setter
    def auth_sendonly_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_sendonly_l2", value)

    @property
    @pulumi.getter(name="defaultOriginate")
    def default_originate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable distribution of default route information. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default_originate")

    @default_originate.setter
    def default_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate", value)

    @property
    @pulumi.getter(name="defaultOriginate6")
    def default_originate6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable distribution of default IPv6 route information. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default_originate6")

    @default_originate6.setter
    def default_originate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate6", value)

    @property
    @pulumi.getter(name="dynamicHostname")
    def dynamic_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic hostname. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dynamic_hostname")

    @dynamic_hostname.setter
    def dynamic_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_hostname", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ignoreLspErrors")
    def ignore_lsp_errors(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ignoring of LSP errors with bad checksums. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ignore_lsp_errors")

    @ignore_lsp_errors.setter
    def ignore_lsp_errors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_lsp_errors", value)

    @property
    @pulumi.getter(name="isType")
    def is_type(self) -> Optional[pulumi.Input[str]]:
        """
        IS type. Valid values: `level-1-2`, `level-1`, `level-2-only`.
        """
        return pulumi.get(self, "is_type")

    @is_type.setter
    def is_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_type", value)

    @property
    @pulumi.getter(name="isisInterfaces")
    def isis_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsisIsisInterfaceArgs']]]]:
        """
        IS-IS interface configuration. The structure of `isis_interface` block is documented below.
        """
        return pulumi.get(self, "isis_interfaces")

    @isis_interfaces.setter
    def isis_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsisIsisInterfaceArgs']]]]):
        pulumi.set(self, "isis_interfaces", value)

    @property
    @pulumi.getter(name="isisNets")
    def isis_nets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsisIsisNetArgs']]]]:
        """
        IS-IS net configuration. The structure of `isis_net` block is documented below.
        """
        return pulumi.get(self, "isis_nets")

    @isis_nets.setter
    def isis_nets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsisIsisNetArgs']]]]):
        pulumi.set(self, "isis_nets", value)

    @property
    @pulumi.getter(name="lspGenIntervalL1")
    def lsp_gen_interval_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum interval for level 1 LSP regenerating.
        """
        return pulumi.get(self, "lsp_gen_interval_l1")

    @lsp_gen_interval_l1.setter
    def lsp_gen_interval_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_gen_interval_l1", value)

    @property
    @pulumi.getter(name="lspGenIntervalL2")
    def lsp_gen_interval_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum interval for level 2 LSP regenerating.
        """
        return pulumi.get(self, "lsp_gen_interval_l2")

    @lsp_gen_interval_l2.setter
    def lsp_gen_interval_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_gen_interval_l2", value)

    @property
    @pulumi.getter(name="lspRefreshInterval")
    def lsp_refresh_interval(self) -> Optional[pulumi.Input[int]]:
        """
        LSP refresh time in seconds.
        """
        return pulumi.get(self, "lsp_refresh_interval")

    @lsp_refresh_interval.setter
    def lsp_refresh_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_refresh_interval", value)

    @property
    @pulumi.getter(name="maxLspLifetime")
    def max_lsp_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum LSP lifetime in seconds.
        """
        return pulumi.get(self, "max_lsp_lifetime")

    @max_lsp_lifetime.setter
    def max_lsp_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_lsp_lifetime", value)

    @property
    @pulumi.getter(name="metricStyle")
    def metric_style(self) -> Optional[pulumi.Input[str]]:
        """
        Use old-style (ISO 10589) or new-style packet formats Valid values: `narrow`, `wide`, `transition`, `narrow-transition`, `narrow-transition-l1`, `narrow-transition-l2`, `wide-l1`, `wide-l2`, `wide-transition`, `wide-transition-l1`, `wide-transition-l2`, `transition-l1`, `transition-l2`.
        """
        return pulumi.get(self, "metric_style")

    @metric_style.setter
    def metric_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_style", value)

    @property
    @pulumi.getter(name="overloadBit")
    def overload_bit(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable signal other routers not to use us in SPF. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "overload_bit")

    @overload_bit.setter
    def overload_bit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overload_bit", value)

    @property
    @pulumi.getter(name="overloadBitOnStartup")
    def overload_bit_on_startup(self) -> Optional[pulumi.Input[int]]:
        """
        Overload-bit only temporarily after reboot.
        """
        return pulumi.get(self, "overload_bit_on_startup")

    @overload_bit_on_startup.setter
    def overload_bit_on_startup(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "overload_bit_on_startup", value)

    @property
    @pulumi.getter(name="overloadBitSuppress")
    def overload_bit_suppress(self) -> Optional[pulumi.Input[str]]:
        """
        Suppress overload-bit for the specific prefixes. Valid values: `external`, `interlevel`.
        """
        return pulumi.get(self, "overload_bit_suppress")

    @overload_bit_suppress.setter
    def overload_bit_suppress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overload_bit_suppress", value)

    @property
    @pulumi.getter(name="redistribute6L1")
    def redistribute6_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redistribution of level 1 IPv6 routes into level 2. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "redistribute6_l1")

    @redistribute6_l1.setter
    def redistribute6_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l1", value)

    @property
    @pulumi.getter(name="redistribute6L1List")
    def redistribute6_l1_list(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list for IPv6 route redistribution from l1 to l2.
        """
        return pulumi.get(self, "redistribute6_l1_list")

    @redistribute6_l1_list.setter
    def redistribute6_l1_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l1_list", value)

    @property
    @pulumi.getter(name="redistribute6L2")
    def redistribute6_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redistribution of level 2 IPv6 routes into level 1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "redistribute6_l2")

    @redistribute6_l2.setter
    def redistribute6_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l2", value)

    @property
    @pulumi.getter(name="redistribute6L2List")
    def redistribute6_l2_list(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list for IPv6 route redistribution from l2 to l1.
        """
        return pulumi.get(self, "redistribute6_l2_list")

    @redistribute6_l2_list.setter
    def redistribute6_l2_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l2_list", value)

    @property
    @pulumi.getter
    def redistribute6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsisRedistribute6Args']]]]:
        """
        IS-IS IPv6 redistribution for routing protocols. The structure of `redistribute6` block is documented below.
        """
        return pulumi.get(self, "redistribute6s")

    @redistribute6s.setter
    def redistribute6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsisRedistribute6Args']]]]):
        pulumi.set(self, "redistribute6s", value)

    @property
    @pulumi.getter(name="redistributeL1")
    def redistribute_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redistribution of level 1 routes into level 2. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "redistribute_l1")

    @redistribute_l1.setter
    def redistribute_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l1", value)

    @property
    @pulumi.getter(name="redistributeL1List")
    def redistribute_l1_list(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list for route redistribution from l1 to l2.
        """
        return pulumi.get(self, "redistribute_l1_list")

    @redistribute_l1_list.setter
    def redistribute_l1_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l1_list", value)

    @property
    @pulumi.getter(name="redistributeL2")
    def redistribute_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redistribution of level 2 routes into level 1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "redistribute_l2")

    @redistribute_l2.setter
    def redistribute_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l2", value)

    @property
    @pulumi.getter(name="redistributeL2List")
    def redistribute_l2_list(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list for route redistribution from l2 to l1.
        """
        return pulumi.get(self, "redistribute_l2_list")

    @redistribute_l2_list.setter
    def redistribute_l2_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l2_list", value)

    @property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsisRedistributeArgs']]]]:
        """
        IS-IS redistribute protocols. The structure of `redistribute` block is documented below.
        """
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsisRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @property
    @pulumi.getter(name="spfIntervalExpL1")
    def spf_interval_exp_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Level 1 SPF calculation delay.
        """
        return pulumi.get(self, "spf_interval_exp_l1")

    @spf_interval_exp_l1.setter
    def spf_interval_exp_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spf_interval_exp_l1", value)

    @property
    @pulumi.getter(name="spfIntervalExpL2")
    def spf_interval_exp_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Level 2 SPF calculation delay.
        """
        return pulumi.get(self, "spf_interval_exp_l2")

    @spf_interval_exp_l2.setter
    def spf_interval_exp_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spf_interval_exp_l2", value)

    @property
    @pulumi.getter(name="summaryAddress6s")
    def summary_address6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddress6Args']]]]:
        """
        IS-IS IPv6 summary address. The structure of `summary_address6` block is documented below.
        """
        return pulumi.get(self, "summary_address6s")

    @summary_address6s.setter
    def summary_address6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddress6Args']]]]):
        pulumi.set(self, "summary_address6s", value)

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddressArgs']]]]:
        """
        IS-IS summary addresses. The structure of `summary_address` block is documented below.
        """
        return pulumi.get(self, "summary_addresses")

    @summary_addresses.setter
    def summary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddressArgs']]]]):
        pulumi.set(self, "summary_addresses", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _IsisState:
    def __init__(__self__, *,
                 adjacency_check: Optional[pulumi.Input[str]] = None,
                 adjacency_check6: Optional[pulumi.Input[str]] = None,
                 adv_passive_only: Optional[pulumi.Input[str]] = None,
                 adv_passive_only6: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l1: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l2: Optional[pulumi.Input[str]] = None,
                 auth_mode_l1: Optional[pulumi.Input[str]] = None,
                 auth_mode_l2: Optional[pulumi.Input[str]] = None,
                 auth_password_l1: Optional[pulumi.Input[str]] = None,
                 auth_password_l2: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l1: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l2: Optional[pulumi.Input[str]] = None,
                 default_originate: Optional[pulumi.Input[str]] = None,
                 default_originate6: Optional[pulumi.Input[str]] = None,
                 dynamic_hostname: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ignore_lsp_errors: Optional[pulumi.Input[str]] = None,
                 is_type: Optional[pulumi.Input[str]] = None,
                 isis_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['IsisIsisInterfaceArgs']]]] = None,
                 isis_nets: Optional[pulumi.Input[Sequence[pulumi.Input['IsisIsisNetArgs']]]] = None,
                 lsp_gen_interval_l1: Optional[pulumi.Input[int]] = None,
                 lsp_gen_interval_l2: Optional[pulumi.Input[int]] = None,
                 lsp_refresh_interval: Optional[pulumi.Input[int]] = None,
                 max_lsp_lifetime: Optional[pulumi.Input[int]] = None,
                 metric_style: Optional[pulumi.Input[str]] = None,
                 overload_bit: Optional[pulumi.Input[str]] = None,
                 overload_bit_on_startup: Optional[pulumi.Input[int]] = None,
                 overload_bit_suppress: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2_list: Optional[pulumi.Input[str]] = None,
                 redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input['IsisRedistribute6Args']]]] = None,
                 redistribute_l1: Optional[pulumi.Input[str]] = None,
                 redistribute_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute_l2: Optional[pulumi.Input[str]] = None,
                 redistribute_l2_list: Optional[pulumi.Input[str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input['IsisRedistributeArgs']]]] = None,
                 spf_interval_exp_l1: Optional[pulumi.Input[str]] = None,
                 spf_interval_exp_l2: Optional[pulumi.Input[str]] = None,
                 summary_address6s: Optional[pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddress6Args']]]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddressArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Isis resources.
        :param pulumi.Input[str] adjacency_check: Enable/disable adjacency check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] adjacency_check6: Enable/disable IPv6 adjacency check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] adv_passive_only: Enable/disable IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] adv_passive_only6: Enable/disable IPv6 IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_keychain_l1: Authentication key-chain for level 1 PDUs.
        :param pulumi.Input[str] auth_keychain_l2: Authentication key-chain for level 2 PDUs.
        :param pulumi.Input[str] auth_mode_l1: Level 1 authentication mode. Valid values: `password`, `md5`.
        :param pulumi.Input[str] auth_mode_l2: Level 2 authentication mode. Valid values: `password`, `md5`.
        :param pulumi.Input[str] auth_password_l1: Authentication password for level 1 PDUs.
        :param pulumi.Input[str] auth_password_l2: Authentication password for level 2 PDUs.
        :param pulumi.Input[str] auth_sendonly_l1: Enable/disable level 1 authentication send-only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_sendonly_l2: Enable/disable level 2 authentication send-only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] default_originate: Enable/disable distribution of default route information. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] default_originate6: Enable/disable distribution of default IPv6 route information. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_hostname: Enable/disable dynamic hostname. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ignore_lsp_errors: Enable/disable ignoring of LSP errors with bad checksums. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] is_type: IS type. Valid values: `level-1-2`, `level-1`, `level-2-only`.
        :param pulumi.Input[Sequence[pulumi.Input['IsisIsisInterfaceArgs']]] isis_interfaces: IS-IS interface configuration. The structure of `isis_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['IsisIsisNetArgs']]] isis_nets: IS-IS net configuration. The structure of `isis_net` block is documented below.
        :param pulumi.Input[int] lsp_gen_interval_l1: Minimum interval for level 1 LSP regenerating.
        :param pulumi.Input[int] lsp_gen_interval_l2: Minimum interval for level 2 LSP regenerating.
        :param pulumi.Input[int] lsp_refresh_interval: LSP refresh time in seconds.
        :param pulumi.Input[int] max_lsp_lifetime: Maximum LSP lifetime in seconds.
        :param pulumi.Input[str] metric_style: Use old-style (ISO 10589) or new-style packet formats Valid values: `narrow`, `wide`, `transition`, `narrow-transition`, `narrow-transition-l1`, `narrow-transition-l2`, `wide-l1`, `wide-l2`, `wide-transition`, `wide-transition-l1`, `wide-transition-l2`, `transition-l1`, `transition-l2`.
        :param pulumi.Input[str] overload_bit: Enable/disable signal other routers not to use us in SPF. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] overload_bit_on_startup: Overload-bit only temporarily after reboot.
        :param pulumi.Input[str] overload_bit_suppress: Suppress overload-bit for the specific prefixes. Valid values: `external`, `interlevel`.
        :param pulumi.Input[str] redistribute6_l1: Enable/disable redistribution of level 1 IPv6 routes into level 2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute6_l1_list: Access-list for IPv6 route redistribution from l1 to l2.
        :param pulumi.Input[str] redistribute6_l2: Enable/disable redistribution of level 2 IPv6 routes into level 1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute6_l2_list: Access-list for IPv6 route redistribution from l2 to l1.
        :param pulumi.Input[Sequence[pulumi.Input['IsisRedistribute6Args']]] redistribute6s: IS-IS IPv6 redistribution for routing protocols. The structure of `redistribute6` block is documented below.
        :param pulumi.Input[str] redistribute_l1: Enable/disable redistribution of level 1 routes into level 2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute_l1_list: Access-list for route redistribution from l1 to l2.
        :param pulumi.Input[str] redistribute_l2: Enable/disable redistribution of level 2 routes into level 1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute_l2_list: Access-list for route redistribution from l2 to l1.
        :param pulumi.Input[Sequence[pulumi.Input['IsisRedistributeArgs']]] redistributes: IS-IS redistribute protocols. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] spf_interval_exp_l1: Level 1 SPF calculation delay.
        :param pulumi.Input[str] spf_interval_exp_l2: Level 2 SPF calculation delay.
        :param pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddress6Args']]] summary_address6s: IS-IS IPv6 summary address. The structure of `summary_address6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddressArgs']]] summary_addresses: IS-IS summary addresses. The structure of `summary_address` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if adjacency_check is not None:
            pulumi.set(__self__, "adjacency_check", adjacency_check)
        if adjacency_check6 is not None:
            pulumi.set(__self__, "adjacency_check6", adjacency_check6)
        if adv_passive_only is not None:
            pulumi.set(__self__, "adv_passive_only", adv_passive_only)
        if adv_passive_only6 is not None:
            pulumi.set(__self__, "adv_passive_only6", adv_passive_only6)
        if auth_keychain_l1 is not None:
            pulumi.set(__self__, "auth_keychain_l1", auth_keychain_l1)
        if auth_keychain_l2 is not None:
            pulumi.set(__self__, "auth_keychain_l2", auth_keychain_l2)
        if auth_mode_l1 is not None:
            pulumi.set(__self__, "auth_mode_l1", auth_mode_l1)
        if auth_mode_l2 is not None:
            pulumi.set(__self__, "auth_mode_l2", auth_mode_l2)
        if auth_password_l1 is not None:
            pulumi.set(__self__, "auth_password_l1", auth_password_l1)
        if auth_password_l2 is not None:
            pulumi.set(__self__, "auth_password_l2", auth_password_l2)
        if auth_sendonly_l1 is not None:
            pulumi.set(__self__, "auth_sendonly_l1", auth_sendonly_l1)
        if auth_sendonly_l2 is not None:
            pulumi.set(__self__, "auth_sendonly_l2", auth_sendonly_l2)
        if default_originate is not None:
            pulumi.set(__self__, "default_originate", default_originate)
        if default_originate6 is not None:
            pulumi.set(__self__, "default_originate6", default_originate6)
        if dynamic_hostname is not None:
            pulumi.set(__self__, "dynamic_hostname", dynamic_hostname)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ignore_lsp_errors is not None:
            pulumi.set(__self__, "ignore_lsp_errors", ignore_lsp_errors)
        if is_type is not None:
            pulumi.set(__self__, "is_type", is_type)
        if isis_interfaces is not None:
            pulumi.set(__self__, "isis_interfaces", isis_interfaces)
        if isis_nets is not None:
            pulumi.set(__self__, "isis_nets", isis_nets)
        if lsp_gen_interval_l1 is not None:
            pulumi.set(__self__, "lsp_gen_interval_l1", lsp_gen_interval_l1)
        if lsp_gen_interval_l2 is not None:
            pulumi.set(__self__, "lsp_gen_interval_l2", lsp_gen_interval_l2)
        if lsp_refresh_interval is not None:
            pulumi.set(__self__, "lsp_refresh_interval", lsp_refresh_interval)
        if max_lsp_lifetime is not None:
            pulumi.set(__self__, "max_lsp_lifetime", max_lsp_lifetime)
        if metric_style is not None:
            pulumi.set(__self__, "metric_style", metric_style)
        if overload_bit is not None:
            pulumi.set(__self__, "overload_bit", overload_bit)
        if overload_bit_on_startup is not None:
            pulumi.set(__self__, "overload_bit_on_startup", overload_bit_on_startup)
        if overload_bit_suppress is not None:
            pulumi.set(__self__, "overload_bit_suppress", overload_bit_suppress)
        if redistribute6_l1 is not None:
            pulumi.set(__self__, "redistribute6_l1", redistribute6_l1)
        if redistribute6_l1_list is not None:
            pulumi.set(__self__, "redistribute6_l1_list", redistribute6_l1_list)
        if redistribute6_l2 is not None:
            pulumi.set(__self__, "redistribute6_l2", redistribute6_l2)
        if redistribute6_l2_list is not None:
            pulumi.set(__self__, "redistribute6_l2_list", redistribute6_l2_list)
        if redistribute6s is not None:
            pulumi.set(__self__, "redistribute6s", redistribute6s)
        if redistribute_l1 is not None:
            pulumi.set(__self__, "redistribute_l1", redistribute_l1)
        if redistribute_l1_list is not None:
            pulumi.set(__self__, "redistribute_l1_list", redistribute_l1_list)
        if redistribute_l2 is not None:
            pulumi.set(__self__, "redistribute_l2", redistribute_l2)
        if redistribute_l2_list is not None:
            pulumi.set(__self__, "redistribute_l2_list", redistribute_l2_list)
        if redistributes is not None:
            pulumi.set(__self__, "redistributes", redistributes)
        if spf_interval_exp_l1 is not None:
            pulumi.set(__self__, "spf_interval_exp_l1", spf_interval_exp_l1)
        if spf_interval_exp_l2 is not None:
            pulumi.set(__self__, "spf_interval_exp_l2", spf_interval_exp_l2)
        if summary_address6s is not None:
            pulumi.set(__self__, "summary_address6s", summary_address6s)
        if summary_addresses is not None:
            pulumi.set(__self__, "summary_addresses", summary_addresses)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="adjacencyCheck")
    def adjacency_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adjacency check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adjacency_check")

    @adjacency_check.setter
    def adjacency_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adjacency_check", value)

    @property
    @pulumi.getter(name="adjacencyCheck6")
    def adjacency_check6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 adjacency check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adjacency_check6")

    @adjacency_check6.setter
    def adjacency_check6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adjacency_check6", value)

    @property
    @pulumi.getter(name="advPassiveOnly")
    def adv_passive_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adv_passive_only")

    @adv_passive_only.setter
    def adv_passive_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adv_passive_only", value)

    @property
    @pulumi.getter(name="advPassiveOnly6")
    def adv_passive_only6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adv_passive_only6")

    @adv_passive_only6.setter
    def adv_passive_only6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adv_passive_only6", value)

    @property
    @pulumi.getter(name="authKeychainL1")
    def auth_keychain_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key-chain for level 1 PDUs.
        """
        return pulumi.get(self, "auth_keychain_l1")

    @auth_keychain_l1.setter
    def auth_keychain_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keychain_l1", value)

    @property
    @pulumi.getter(name="authKeychainL2")
    def auth_keychain_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key-chain for level 2 PDUs.
        """
        return pulumi.get(self, "auth_keychain_l2")

    @auth_keychain_l2.setter
    def auth_keychain_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keychain_l2", value)

    @property
    @pulumi.getter(name="authModeL1")
    def auth_mode_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Level 1 authentication mode. Valid values: `password`, `md5`.
        """
        return pulumi.get(self, "auth_mode_l1")

    @auth_mode_l1.setter
    def auth_mode_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode_l1", value)

    @property
    @pulumi.getter(name="authModeL2")
    def auth_mode_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Level 2 authentication mode. Valid values: `password`, `md5`.
        """
        return pulumi.get(self, "auth_mode_l2")

    @auth_mode_l2.setter
    def auth_mode_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode_l2", value)

    @property
    @pulumi.getter(name="authPasswordL1")
    def auth_password_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password for level 1 PDUs.
        """
        return pulumi.get(self, "auth_password_l1")

    @auth_password_l1.setter
    def auth_password_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password_l1", value)

    @property
    @pulumi.getter(name="authPasswordL2")
    def auth_password_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password for level 2 PDUs.
        """
        return pulumi.get(self, "auth_password_l2")

    @auth_password_l2.setter
    def auth_password_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password_l2", value)

    @property
    @pulumi.getter(name="authSendonlyL1")
    def auth_sendonly_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable level 1 authentication send-only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_sendonly_l1")

    @auth_sendonly_l1.setter
    def auth_sendonly_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_sendonly_l1", value)

    @property
    @pulumi.getter(name="authSendonlyL2")
    def auth_sendonly_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable level 2 authentication send-only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_sendonly_l2")

    @auth_sendonly_l2.setter
    def auth_sendonly_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_sendonly_l2", value)

    @property
    @pulumi.getter(name="defaultOriginate")
    def default_originate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable distribution of default route information. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default_originate")

    @default_originate.setter
    def default_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate", value)

    @property
    @pulumi.getter(name="defaultOriginate6")
    def default_originate6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable distribution of default IPv6 route information. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default_originate6")

    @default_originate6.setter
    def default_originate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate6", value)

    @property
    @pulumi.getter(name="dynamicHostname")
    def dynamic_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic hostname. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dynamic_hostname")

    @dynamic_hostname.setter
    def dynamic_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_hostname", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ignoreLspErrors")
    def ignore_lsp_errors(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ignoring of LSP errors with bad checksums. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ignore_lsp_errors")

    @ignore_lsp_errors.setter
    def ignore_lsp_errors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_lsp_errors", value)

    @property
    @pulumi.getter(name="isType")
    def is_type(self) -> Optional[pulumi.Input[str]]:
        """
        IS type. Valid values: `level-1-2`, `level-1`, `level-2-only`.
        """
        return pulumi.get(self, "is_type")

    @is_type.setter
    def is_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_type", value)

    @property
    @pulumi.getter(name="isisInterfaces")
    def isis_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsisIsisInterfaceArgs']]]]:
        """
        IS-IS interface configuration. The structure of `isis_interface` block is documented below.
        """
        return pulumi.get(self, "isis_interfaces")

    @isis_interfaces.setter
    def isis_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsisIsisInterfaceArgs']]]]):
        pulumi.set(self, "isis_interfaces", value)

    @property
    @pulumi.getter(name="isisNets")
    def isis_nets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsisIsisNetArgs']]]]:
        """
        IS-IS net configuration. The structure of `isis_net` block is documented below.
        """
        return pulumi.get(self, "isis_nets")

    @isis_nets.setter
    def isis_nets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsisIsisNetArgs']]]]):
        pulumi.set(self, "isis_nets", value)

    @property
    @pulumi.getter(name="lspGenIntervalL1")
    def lsp_gen_interval_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum interval for level 1 LSP regenerating.
        """
        return pulumi.get(self, "lsp_gen_interval_l1")

    @lsp_gen_interval_l1.setter
    def lsp_gen_interval_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_gen_interval_l1", value)

    @property
    @pulumi.getter(name="lspGenIntervalL2")
    def lsp_gen_interval_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum interval for level 2 LSP regenerating.
        """
        return pulumi.get(self, "lsp_gen_interval_l2")

    @lsp_gen_interval_l2.setter
    def lsp_gen_interval_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_gen_interval_l2", value)

    @property
    @pulumi.getter(name="lspRefreshInterval")
    def lsp_refresh_interval(self) -> Optional[pulumi.Input[int]]:
        """
        LSP refresh time in seconds.
        """
        return pulumi.get(self, "lsp_refresh_interval")

    @lsp_refresh_interval.setter
    def lsp_refresh_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_refresh_interval", value)

    @property
    @pulumi.getter(name="maxLspLifetime")
    def max_lsp_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum LSP lifetime in seconds.
        """
        return pulumi.get(self, "max_lsp_lifetime")

    @max_lsp_lifetime.setter
    def max_lsp_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_lsp_lifetime", value)

    @property
    @pulumi.getter(name="metricStyle")
    def metric_style(self) -> Optional[pulumi.Input[str]]:
        """
        Use old-style (ISO 10589) or new-style packet formats Valid values: `narrow`, `wide`, `transition`, `narrow-transition`, `narrow-transition-l1`, `narrow-transition-l2`, `wide-l1`, `wide-l2`, `wide-transition`, `wide-transition-l1`, `wide-transition-l2`, `transition-l1`, `transition-l2`.
        """
        return pulumi.get(self, "metric_style")

    @metric_style.setter
    def metric_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_style", value)

    @property
    @pulumi.getter(name="overloadBit")
    def overload_bit(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable signal other routers not to use us in SPF. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "overload_bit")

    @overload_bit.setter
    def overload_bit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overload_bit", value)

    @property
    @pulumi.getter(name="overloadBitOnStartup")
    def overload_bit_on_startup(self) -> Optional[pulumi.Input[int]]:
        """
        Overload-bit only temporarily after reboot.
        """
        return pulumi.get(self, "overload_bit_on_startup")

    @overload_bit_on_startup.setter
    def overload_bit_on_startup(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "overload_bit_on_startup", value)

    @property
    @pulumi.getter(name="overloadBitSuppress")
    def overload_bit_suppress(self) -> Optional[pulumi.Input[str]]:
        """
        Suppress overload-bit for the specific prefixes. Valid values: `external`, `interlevel`.
        """
        return pulumi.get(self, "overload_bit_suppress")

    @overload_bit_suppress.setter
    def overload_bit_suppress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overload_bit_suppress", value)

    @property
    @pulumi.getter(name="redistribute6L1")
    def redistribute6_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redistribution of level 1 IPv6 routes into level 2. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "redistribute6_l1")

    @redistribute6_l1.setter
    def redistribute6_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l1", value)

    @property
    @pulumi.getter(name="redistribute6L1List")
    def redistribute6_l1_list(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list for IPv6 route redistribution from l1 to l2.
        """
        return pulumi.get(self, "redistribute6_l1_list")

    @redistribute6_l1_list.setter
    def redistribute6_l1_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l1_list", value)

    @property
    @pulumi.getter(name="redistribute6L2")
    def redistribute6_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redistribution of level 2 IPv6 routes into level 1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "redistribute6_l2")

    @redistribute6_l2.setter
    def redistribute6_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l2", value)

    @property
    @pulumi.getter(name="redistribute6L2List")
    def redistribute6_l2_list(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list for IPv6 route redistribution from l2 to l1.
        """
        return pulumi.get(self, "redistribute6_l2_list")

    @redistribute6_l2_list.setter
    def redistribute6_l2_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute6_l2_list", value)

    @property
    @pulumi.getter
    def redistribute6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsisRedistribute6Args']]]]:
        """
        IS-IS IPv6 redistribution for routing protocols. The structure of `redistribute6` block is documented below.
        """
        return pulumi.get(self, "redistribute6s")

    @redistribute6s.setter
    def redistribute6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsisRedistribute6Args']]]]):
        pulumi.set(self, "redistribute6s", value)

    @property
    @pulumi.getter(name="redistributeL1")
    def redistribute_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redistribution of level 1 routes into level 2. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "redistribute_l1")

    @redistribute_l1.setter
    def redistribute_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l1", value)

    @property
    @pulumi.getter(name="redistributeL1List")
    def redistribute_l1_list(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list for route redistribution from l1 to l2.
        """
        return pulumi.get(self, "redistribute_l1_list")

    @redistribute_l1_list.setter
    def redistribute_l1_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l1_list", value)

    @property
    @pulumi.getter(name="redistributeL2")
    def redistribute_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redistribution of level 2 routes into level 1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "redistribute_l2")

    @redistribute_l2.setter
    def redistribute_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l2", value)

    @property
    @pulumi.getter(name="redistributeL2List")
    def redistribute_l2_list(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list for route redistribution from l2 to l1.
        """
        return pulumi.get(self, "redistribute_l2_list")

    @redistribute_l2_list.setter
    def redistribute_l2_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redistribute_l2_list", value)

    @property
    @pulumi.getter
    def redistributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsisRedistributeArgs']]]]:
        """
        IS-IS redistribute protocols. The structure of `redistribute` block is documented below.
        """
        return pulumi.get(self, "redistributes")

    @redistributes.setter
    def redistributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsisRedistributeArgs']]]]):
        pulumi.set(self, "redistributes", value)

    @property
    @pulumi.getter(name="spfIntervalExpL1")
    def spf_interval_exp_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Level 1 SPF calculation delay.
        """
        return pulumi.get(self, "spf_interval_exp_l1")

    @spf_interval_exp_l1.setter
    def spf_interval_exp_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spf_interval_exp_l1", value)

    @property
    @pulumi.getter(name="spfIntervalExpL2")
    def spf_interval_exp_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Level 2 SPF calculation delay.
        """
        return pulumi.get(self, "spf_interval_exp_l2")

    @spf_interval_exp_l2.setter
    def spf_interval_exp_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spf_interval_exp_l2", value)

    @property
    @pulumi.getter(name="summaryAddress6s")
    def summary_address6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddress6Args']]]]:
        """
        IS-IS IPv6 summary address. The structure of `summary_address6` block is documented below.
        """
        return pulumi.get(self, "summary_address6s")

    @summary_address6s.setter
    def summary_address6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddress6Args']]]]):
        pulumi.set(self, "summary_address6s", value)

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddressArgs']]]]:
        """
        IS-IS summary addresses. The structure of `summary_address` block is documented below.
        """
        return pulumi.get(self, "summary_addresses")

    @summary_addresses.setter
    def summary_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IsisSummaryAddressArgs']]]]):
        pulumi.set(self, "summary_addresses", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Isis(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adjacency_check: Optional[pulumi.Input[str]] = None,
                 adjacency_check6: Optional[pulumi.Input[str]] = None,
                 adv_passive_only: Optional[pulumi.Input[str]] = None,
                 adv_passive_only6: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l1: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l2: Optional[pulumi.Input[str]] = None,
                 auth_mode_l1: Optional[pulumi.Input[str]] = None,
                 auth_mode_l2: Optional[pulumi.Input[str]] = None,
                 auth_password_l1: Optional[pulumi.Input[str]] = None,
                 auth_password_l2: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l1: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l2: Optional[pulumi.Input[str]] = None,
                 default_originate: Optional[pulumi.Input[str]] = None,
                 default_originate6: Optional[pulumi.Input[str]] = None,
                 dynamic_hostname: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ignore_lsp_errors: Optional[pulumi.Input[str]] = None,
                 is_type: Optional[pulumi.Input[str]] = None,
                 isis_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisIsisInterfaceArgs']]]]] = None,
                 isis_nets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisIsisNetArgs']]]]] = None,
                 lsp_gen_interval_l1: Optional[pulumi.Input[int]] = None,
                 lsp_gen_interval_l2: Optional[pulumi.Input[int]] = None,
                 lsp_refresh_interval: Optional[pulumi.Input[int]] = None,
                 max_lsp_lifetime: Optional[pulumi.Input[int]] = None,
                 metric_style: Optional[pulumi.Input[str]] = None,
                 overload_bit: Optional[pulumi.Input[str]] = None,
                 overload_bit_on_startup: Optional[pulumi.Input[int]] = None,
                 overload_bit_suppress: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2_list: Optional[pulumi.Input[str]] = None,
                 redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisRedistribute6Args']]]]] = None,
                 redistribute_l1: Optional[pulumi.Input[str]] = None,
                 redistribute_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute_l2: Optional[pulumi.Input[str]] = None,
                 redistribute_l2_list: Optional[pulumi.Input[str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisRedistributeArgs']]]]] = None,
                 spf_interval_exp_l1: Optional[pulumi.Input[str]] = None,
                 spf_interval_exp_l2: Optional[pulumi.Input[str]] = None,
                 summary_address6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisSummaryAddress6Args']]]]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisSummaryAddressArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure IS-IS.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.router.Isis("trname",
            adjacency_check="disable",
            adjacency_check6="disable",
            adv_passive_only="disable",
            adv_passive_only6="disable",
            auth_mode_l1="password",
            auth_mode_l2="password",
            auth_sendonly_l1="disable",
            auth_sendonly_l2="disable",
            default_originate="disable",
            default_originate6="disable",
            dynamic_hostname="disable",
            ignore_lsp_errors="disable",
            is_type="level-1-2",
            lsp_gen_interval_l1=30,
            lsp_gen_interval_l2=30,
            lsp_refresh_interval=900,
            max_lsp_lifetime=1200,
            metric_style="narrow",
            overload_bit="disable",
            redistribute6_l1="disable",
            redistribute6_l2="disable",
            redistribute_l1="disable",
            redistribute_l2="disable",
            spf_interval_exp_l1="500 50000",
            spf_interval_exp_l2="500 50000")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Router Isis can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:router/isis:Isis labelname RouterIsis
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:router/isis:Isis labelname RouterIsis
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adjacency_check: Enable/disable adjacency check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] adjacency_check6: Enable/disable IPv6 adjacency check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] adv_passive_only: Enable/disable IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] adv_passive_only6: Enable/disable IPv6 IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_keychain_l1: Authentication key-chain for level 1 PDUs.
        :param pulumi.Input[str] auth_keychain_l2: Authentication key-chain for level 2 PDUs.
        :param pulumi.Input[str] auth_mode_l1: Level 1 authentication mode. Valid values: `password`, `md5`.
        :param pulumi.Input[str] auth_mode_l2: Level 2 authentication mode. Valid values: `password`, `md5`.
        :param pulumi.Input[str] auth_password_l1: Authentication password for level 1 PDUs.
        :param pulumi.Input[str] auth_password_l2: Authentication password for level 2 PDUs.
        :param pulumi.Input[str] auth_sendonly_l1: Enable/disable level 1 authentication send-only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_sendonly_l2: Enable/disable level 2 authentication send-only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] default_originate: Enable/disable distribution of default route information. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] default_originate6: Enable/disable distribution of default IPv6 route information. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_hostname: Enable/disable dynamic hostname. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ignore_lsp_errors: Enable/disable ignoring of LSP errors with bad checksums. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] is_type: IS type. Valid values: `level-1-2`, `level-1`, `level-2-only`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisIsisInterfaceArgs']]]] isis_interfaces: IS-IS interface configuration. The structure of `isis_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisIsisNetArgs']]]] isis_nets: IS-IS net configuration. The structure of `isis_net` block is documented below.
        :param pulumi.Input[int] lsp_gen_interval_l1: Minimum interval for level 1 LSP regenerating.
        :param pulumi.Input[int] lsp_gen_interval_l2: Minimum interval for level 2 LSP regenerating.
        :param pulumi.Input[int] lsp_refresh_interval: LSP refresh time in seconds.
        :param pulumi.Input[int] max_lsp_lifetime: Maximum LSP lifetime in seconds.
        :param pulumi.Input[str] metric_style: Use old-style (ISO 10589) or new-style packet formats Valid values: `narrow`, `wide`, `transition`, `narrow-transition`, `narrow-transition-l1`, `narrow-transition-l2`, `wide-l1`, `wide-l2`, `wide-transition`, `wide-transition-l1`, `wide-transition-l2`, `transition-l1`, `transition-l2`.
        :param pulumi.Input[str] overload_bit: Enable/disable signal other routers not to use us in SPF. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] overload_bit_on_startup: Overload-bit only temporarily after reboot.
        :param pulumi.Input[str] overload_bit_suppress: Suppress overload-bit for the specific prefixes. Valid values: `external`, `interlevel`.
        :param pulumi.Input[str] redistribute6_l1: Enable/disable redistribution of level 1 IPv6 routes into level 2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute6_l1_list: Access-list for IPv6 route redistribution from l1 to l2.
        :param pulumi.Input[str] redistribute6_l2: Enable/disable redistribution of level 2 IPv6 routes into level 1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute6_l2_list: Access-list for IPv6 route redistribution from l2 to l1.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisRedistribute6Args']]]] redistribute6s: IS-IS IPv6 redistribution for routing protocols. The structure of `redistribute6` block is documented below.
        :param pulumi.Input[str] redistribute_l1: Enable/disable redistribution of level 1 routes into level 2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute_l1_list: Access-list for route redistribution from l1 to l2.
        :param pulumi.Input[str] redistribute_l2: Enable/disable redistribution of level 2 routes into level 1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute_l2_list: Access-list for route redistribution from l2 to l1.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisRedistributeArgs']]]] redistributes: IS-IS redistribute protocols. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] spf_interval_exp_l1: Level 1 SPF calculation delay.
        :param pulumi.Input[str] spf_interval_exp_l2: Level 2 SPF calculation delay.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisSummaryAddress6Args']]]] summary_address6s: IS-IS IPv6 summary address. The structure of `summary_address6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisSummaryAddressArgs']]]] summary_addresses: IS-IS summary addresses. The structure of `summary_address` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IsisArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure IS-IS.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.router.Isis("trname",
            adjacency_check="disable",
            adjacency_check6="disable",
            adv_passive_only="disable",
            adv_passive_only6="disable",
            auth_mode_l1="password",
            auth_mode_l2="password",
            auth_sendonly_l1="disable",
            auth_sendonly_l2="disable",
            default_originate="disable",
            default_originate6="disable",
            dynamic_hostname="disable",
            ignore_lsp_errors="disable",
            is_type="level-1-2",
            lsp_gen_interval_l1=30,
            lsp_gen_interval_l2=30,
            lsp_refresh_interval=900,
            max_lsp_lifetime=1200,
            metric_style="narrow",
            overload_bit="disable",
            redistribute6_l1="disable",
            redistribute6_l2="disable",
            redistribute_l1="disable",
            redistribute_l2="disable",
            spf_interval_exp_l1="500 50000",
            spf_interval_exp_l2="500 50000")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Router Isis can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:router/isis:Isis labelname RouterIsis
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:router/isis:Isis labelname RouterIsis
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param IsisArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IsisArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adjacency_check: Optional[pulumi.Input[str]] = None,
                 adjacency_check6: Optional[pulumi.Input[str]] = None,
                 adv_passive_only: Optional[pulumi.Input[str]] = None,
                 adv_passive_only6: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l1: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l2: Optional[pulumi.Input[str]] = None,
                 auth_mode_l1: Optional[pulumi.Input[str]] = None,
                 auth_mode_l2: Optional[pulumi.Input[str]] = None,
                 auth_password_l1: Optional[pulumi.Input[str]] = None,
                 auth_password_l2: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l1: Optional[pulumi.Input[str]] = None,
                 auth_sendonly_l2: Optional[pulumi.Input[str]] = None,
                 default_originate: Optional[pulumi.Input[str]] = None,
                 default_originate6: Optional[pulumi.Input[str]] = None,
                 dynamic_hostname: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ignore_lsp_errors: Optional[pulumi.Input[str]] = None,
                 is_type: Optional[pulumi.Input[str]] = None,
                 isis_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisIsisInterfaceArgs']]]]] = None,
                 isis_nets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisIsisNetArgs']]]]] = None,
                 lsp_gen_interval_l1: Optional[pulumi.Input[int]] = None,
                 lsp_gen_interval_l2: Optional[pulumi.Input[int]] = None,
                 lsp_refresh_interval: Optional[pulumi.Input[int]] = None,
                 max_lsp_lifetime: Optional[pulumi.Input[int]] = None,
                 metric_style: Optional[pulumi.Input[str]] = None,
                 overload_bit: Optional[pulumi.Input[str]] = None,
                 overload_bit_on_startup: Optional[pulumi.Input[int]] = None,
                 overload_bit_suppress: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1: Optional[pulumi.Input[str]] = None,
                 redistribute6_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2: Optional[pulumi.Input[str]] = None,
                 redistribute6_l2_list: Optional[pulumi.Input[str]] = None,
                 redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisRedistribute6Args']]]]] = None,
                 redistribute_l1: Optional[pulumi.Input[str]] = None,
                 redistribute_l1_list: Optional[pulumi.Input[str]] = None,
                 redistribute_l2: Optional[pulumi.Input[str]] = None,
                 redistribute_l2_list: Optional[pulumi.Input[str]] = None,
                 redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisRedistributeArgs']]]]] = None,
                 spf_interval_exp_l1: Optional[pulumi.Input[str]] = None,
                 spf_interval_exp_l2: Optional[pulumi.Input[str]] = None,
                 summary_address6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisSummaryAddress6Args']]]]] = None,
                 summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisSummaryAddressArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IsisArgs.__new__(IsisArgs)

            __props__.__dict__["adjacency_check"] = adjacency_check
            __props__.__dict__["adjacency_check6"] = adjacency_check6
            __props__.__dict__["adv_passive_only"] = adv_passive_only
            __props__.__dict__["adv_passive_only6"] = adv_passive_only6
            __props__.__dict__["auth_keychain_l1"] = auth_keychain_l1
            __props__.__dict__["auth_keychain_l2"] = auth_keychain_l2
            __props__.__dict__["auth_mode_l1"] = auth_mode_l1
            __props__.__dict__["auth_mode_l2"] = auth_mode_l2
            __props__.__dict__["auth_password_l1"] = None if auth_password_l1 is None else pulumi.Output.secret(auth_password_l1)
            __props__.__dict__["auth_password_l2"] = None if auth_password_l2 is None else pulumi.Output.secret(auth_password_l2)
            __props__.__dict__["auth_sendonly_l1"] = auth_sendonly_l1
            __props__.__dict__["auth_sendonly_l2"] = auth_sendonly_l2
            __props__.__dict__["default_originate"] = default_originate
            __props__.__dict__["default_originate6"] = default_originate6
            __props__.__dict__["dynamic_hostname"] = dynamic_hostname
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["ignore_lsp_errors"] = ignore_lsp_errors
            __props__.__dict__["is_type"] = is_type
            __props__.__dict__["isis_interfaces"] = isis_interfaces
            __props__.__dict__["isis_nets"] = isis_nets
            __props__.__dict__["lsp_gen_interval_l1"] = lsp_gen_interval_l1
            __props__.__dict__["lsp_gen_interval_l2"] = lsp_gen_interval_l2
            __props__.__dict__["lsp_refresh_interval"] = lsp_refresh_interval
            __props__.__dict__["max_lsp_lifetime"] = max_lsp_lifetime
            __props__.__dict__["metric_style"] = metric_style
            __props__.__dict__["overload_bit"] = overload_bit
            __props__.__dict__["overload_bit_on_startup"] = overload_bit_on_startup
            __props__.__dict__["overload_bit_suppress"] = overload_bit_suppress
            __props__.__dict__["redistribute6_l1"] = redistribute6_l1
            __props__.__dict__["redistribute6_l1_list"] = redistribute6_l1_list
            __props__.__dict__["redistribute6_l2"] = redistribute6_l2
            __props__.__dict__["redistribute6_l2_list"] = redistribute6_l2_list
            __props__.__dict__["redistribute6s"] = redistribute6s
            __props__.__dict__["redistribute_l1"] = redistribute_l1
            __props__.__dict__["redistribute_l1_list"] = redistribute_l1_list
            __props__.__dict__["redistribute_l2"] = redistribute_l2
            __props__.__dict__["redistribute_l2_list"] = redistribute_l2_list
            __props__.__dict__["redistributes"] = redistributes
            __props__.__dict__["spf_interval_exp_l1"] = spf_interval_exp_l1
            __props__.__dict__["spf_interval_exp_l2"] = spf_interval_exp_l2
            __props__.__dict__["summary_address6s"] = summary_address6s
            __props__.__dict__["summary_addresses"] = summary_addresses
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authPasswordL1", "authPasswordL2"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Isis, __self__).__init__(
            'fortios:router/isis:Isis',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adjacency_check: Optional[pulumi.Input[str]] = None,
            adjacency_check6: Optional[pulumi.Input[str]] = None,
            adv_passive_only: Optional[pulumi.Input[str]] = None,
            adv_passive_only6: Optional[pulumi.Input[str]] = None,
            auth_keychain_l1: Optional[pulumi.Input[str]] = None,
            auth_keychain_l2: Optional[pulumi.Input[str]] = None,
            auth_mode_l1: Optional[pulumi.Input[str]] = None,
            auth_mode_l2: Optional[pulumi.Input[str]] = None,
            auth_password_l1: Optional[pulumi.Input[str]] = None,
            auth_password_l2: Optional[pulumi.Input[str]] = None,
            auth_sendonly_l1: Optional[pulumi.Input[str]] = None,
            auth_sendonly_l2: Optional[pulumi.Input[str]] = None,
            default_originate: Optional[pulumi.Input[str]] = None,
            default_originate6: Optional[pulumi.Input[str]] = None,
            dynamic_hostname: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ignore_lsp_errors: Optional[pulumi.Input[str]] = None,
            is_type: Optional[pulumi.Input[str]] = None,
            isis_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisIsisInterfaceArgs']]]]] = None,
            isis_nets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisIsisNetArgs']]]]] = None,
            lsp_gen_interval_l1: Optional[pulumi.Input[int]] = None,
            lsp_gen_interval_l2: Optional[pulumi.Input[int]] = None,
            lsp_refresh_interval: Optional[pulumi.Input[int]] = None,
            max_lsp_lifetime: Optional[pulumi.Input[int]] = None,
            metric_style: Optional[pulumi.Input[str]] = None,
            overload_bit: Optional[pulumi.Input[str]] = None,
            overload_bit_on_startup: Optional[pulumi.Input[int]] = None,
            overload_bit_suppress: Optional[pulumi.Input[str]] = None,
            redistribute6_l1: Optional[pulumi.Input[str]] = None,
            redistribute6_l1_list: Optional[pulumi.Input[str]] = None,
            redistribute6_l2: Optional[pulumi.Input[str]] = None,
            redistribute6_l2_list: Optional[pulumi.Input[str]] = None,
            redistribute6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisRedistribute6Args']]]]] = None,
            redistribute_l1: Optional[pulumi.Input[str]] = None,
            redistribute_l1_list: Optional[pulumi.Input[str]] = None,
            redistribute_l2: Optional[pulumi.Input[str]] = None,
            redistribute_l2_list: Optional[pulumi.Input[str]] = None,
            redistributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisRedistributeArgs']]]]] = None,
            spf_interval_exp_l1: Optional[pulumi.Input[str]] = None,
            spf_interval_exp_l2: Optional[pulumi.Input[str]] = None,
            summary_address6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisSummaryAddress6Args']]]]] = None,
            summary_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisSummaryAddressArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Isis':
        """
        Get an existing Isis resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adjacency_check: Enable/disable adjacency check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] adjacency_check6: Enable/disable IPv6 adjacency check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] adv_passive_only: Enable/disable IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] adv_passive_only6: Enable/disable IPv6 IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_keychain_l1: Authentication key-chain for level 1 PDUs.
        :param pulumi.Input[str] auth_keychain_l2: Authentication key-chain for level 2 PDUs.
        :param pulumi.Input[str] auth_mode_l1: Level 1 authentication mode. Valid values: `password`, `md5`.
        :param pulumi.Input[str] auth_mode_l2: Level 2 authentication mode. Valid values: `password`, `md5`.
        :param pulumi.Input[str] auth_password_l1: Authentication password for level 1 PDUs.
        :param pulumi.Input[str] auth_password_l2: Authentication password for level 2 PDUs.
        :param pulumi.Input[str] auth_sendonly_l1: Enable/disable level 1 authentication send-only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_sendonly_l2: Enable/disable level 2 authentication send-only. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] default_originate: Enable/disable distribution of default route information. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] default_originate6: Enable/disable distribution of default IPv6 route information. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_hostname: Enable/disable dynamic hostname. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ignore_lsp_errors: Enable/disable ignoring of LSP errors with bad checksums. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] is_type: IS type. Valid values: `level-1-2`, `level-1`, `level-2-only`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisIsisInterfaceArgs']]]] isis_interfaces: IS-IS interface configuration. The structure of `isis_interface` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisIsisNetArgs']]]] isis_nets: IS-IS net configuration. The structure of `isis_net` block is documented below.
        :param pulumi.Input[int] lsp_gen_interval_l1: Minimum interval for level 1 LSP regenerating.
        :param pulumi.Input[int] lsp_gen_interval_l2: Minimum interval for level 2 LSP regenerating.
        :param pulumi.Input[int] lsp_refresh_interval: LSP refresh time in seconds.
        :param pulumi.Input[int] max_lsp_lifetime: Maximum LSP lifetime in seconds.
        :param pulumi.Input[str] metric_style: Use old-style (ISO 10589) or new-style packet formats Valid values: `narrow`, `wide`, `transition`, `narrow-transition`, `narrow-transition-l1`, `narrow-transition-l2`, `wide-l1`, `wide-l2`, `wide-transition`, `wide-transition-l1`, `wide-transition-l2`, `transition-l1`, `transition-l2`.
        :param pulumi.Input[str] overload_bit: Enable/disable signal other routers not to use us in SPF. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] overload_bit_on_startup: Overload-bit only temporarily after reboot.
        :param pulumi.Input[str] overload_bit_suppress: Suppress overload-bit for the specific prefixes. Valid values: `external`, `interlevel`.
        :param pulumi.Input[str] redistribute6_l1: Enable/disable redistribution of level 1 IPv6 routes into level 2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute6_l1_list: Access-list for IPv6 route redistribution from l1 to l2.
        :param pulumi.Input[str] redistribute6_l2: Enable/disable redistribution of level 2 IPv6 routes into level 1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute6_l2_list: Access-list for IPv6 route redistribution from l2 to l1.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisRedistribute6Args']]]] redistribute6s: IS-IS IPv6 redistribution for routing protocols. The structure of `redistribute6` block is documented below.
        :param pulumi.Input[str] redistribute_l1: Enable/disable redistribution of level 1 routes into level 2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute_l1_list: Access-list for route redistribution from l1 to l2.
        :param pulumi.Input[str] redistribute_l2: Enable/disable redistribution of level 2 routes into level 1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] redistribute_l2_list: Access-list for route redistribution from l2 to l1.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisRedistributeArgs']]]] redistributes: IS-IS redistribute protocols. The structure of `redistribute` block is documented below.
        :param pulumi.Input[str] spf_interval_exp_l1: Level 1 SPF calculation delay.
        :param pulumi.Input[str] spf_interval_exp_l2: Level 2 SPF calculation delay.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisSummaryAddress6Args']]]] summary_address6s: IS-IS IPv6 summary address. The structure of `summary_address6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IsisSummaryAddressArgs']]]] summary_addresses: IS-IS summary addresses. The structure of `summary_address` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IsisState.__new__(_IsisState)

        __props__.__dict__["adjacency_check"] = adjacency_check
        __props__.__dict__["adjacency_check6"] = adjacency_check6
        __props__.__dict__["adv_passive_only"] = adv_passive_only
        __props__.__dict__["adv_passive_only6"] = adv_passive_only6
        __props__.__dict__["auth_keychain_l1"] = auth_keychain_l1
        __props__.__dict__["auth_keychain_l2"] = auth_keychain_l2
        __props__.__dict__["auth_mode_l1"] = auth_mode_l1
        __props__.__dict__["auth_mode_l2"] = auth_mode_l2
        __props__.__dict__["auth_password_l1"] = auth_password_l1
        __props__.__dict__["auth_password_l2"] = auth_password_l2
        __props__.__dict__["auth_sendonly_l1"] = auth_sendonly_l1
        __props__.__dict__["auth_sendonly_l2"] = auth_sendonly_l2
        __props__.__dict__["default_originate"] = default_originate
        __props__.__dict__["default_originate6"] = default_originate6
        __props__.__dict__["dynamic_hostname"] = dynamic_hostname
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ignore_lsp_errors"] = ignore_lsp_errors
        __props__.__dict__["is_type"] = is_type
        __props__.__dict__["isis_interfaces"] = isis_interfaces
        __props__.__dict__["isis_nets"] = isis_nets
        __props__.__dict__["lsp_gen_interval_l1"] = lsp_gen_interval_l1
        __props__.__dict__["lsp_gen_interval_l2"] = lsp_gen_interval_l2
        __props__.__dict__["lsp_refresh_interval"] = lsp_refresh_interval
        __props__.__dict__["max_lsp_lifetime"] = max_lsp_lifetime
        __props__.__dict__["metric_style"] = metric_style
        __props__.__dict__["overload_bit"] = overload_bit
        __props__.__dict__["overload_bit_on_startup"] = overload_bit_on_startup
        __props__.__dict__["overload_bit_suppress"] = overload_bit_suppress
        __props__.__dict__["redistribute6_l1"] = redistribute6_l1
        __props__.__dict__["redistribute6_l1_list"] = redistribute6_l1_list
        __props__.__dict__["redistribute6_l2"] = redistribute6_l2
        __props__.__dict__["redistribute6_l2_list"] = redistribute6_l2_list
        __props__.__dict__["redistribute6s"] = redistribute6s
        __props__.__dict__["redistribute_l1"] = redistribute_l1
        __props__.__dict__["redistribute_l1_list"] = redistribute_l1_list
        __props__.__dict__["redistribute_l2"] = redistribute_l2
        __props__.__dict__["redistribute_l2_list"] = redistribute_l2_list
        __props__.__dict__["redistributes"] = redistributes
        __props__.__dict__["spf_interval_exp_l1"] = spf_interval_exp_l1
        __props__.__dict__["spf_interval_exp_l2"] = spf_interval_exp_l2
        __props__.__dict__["summary_address6s"] = summary_address6s
        __props__.__dict__["summary_addresses"] = summary_addresses
        __props__.__dict__["vdomparam"] = vdomparam
        return Isis(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adjacencyCheck")
    def adjacency_check(self) -> pulumi.Output[str]:
        """
        Enable/disable adjacency check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adjacency_check")

    @property
    @pulumi.getter(name="adjacencyCheck6")
    def adjacency_check6(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv6 adjacency check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adjacency_check6")

    @property
    @pulumi.getter(name="advPassiveOnly")
    def adv_passive_only(self) -> pulumi.Output[str]:
        """
        Enable/disable IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adv_passive_only")

    @property
    @pulumi.getter(name="advPassiveOnly6")
    def adv_passive_only6(self) -> pulumi.Output[str]:
        """
        Enable/disable IPv6 IS-IS advertisement of passive interfaces only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adv_passive_only6")

    @property
    @pulumi.getter(name="authKeychainL1")
    def auth_keychain_l1(self) -> pulumi.Output[str]:
        """
        Authentication key-chain for level 1 PDUs.
        """
        return pulumi.get(self, "auth_keychain_l1")

    @property
    @pulumi.getter(name="authKeychainL2")
    def auth_keychain_l2(self) -> pulumi.Output[str]:
        """
        Authentication key-chain for level 2 PDUs.
        """
        return pulumi.get(self, "auth_keychain_l2")

    @property
    @pulumi.getter(name="authModeL1")
    def auth_mode_l1(self) -> pulumi.Output[str]:
        """
        Level 1 authentication mode. Valid values: `password`, `md5`.
        """
        return pulumi.get(self, "auth_mode_l1")

    @property
    @pulumi.getter(name="authModeL2")
    def auth_mode_l2(self) -> pulumi.Output[str]:
        """
        Level 2 authentication mode. Valid values: `password`, `md5`.
        """
        return pulumi.get(self, "auth_mode_l2")

    @property
    @pulumi.getter(name="authPasswordL1")
    def auth_password_l1(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication password for level 1 PDUs.
        """
        return pulumi.get(self, "auth_password_l1")

    @property
    @pulumi.getter(name="authPasswordL2")
    def auth_password_l2(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication password for level 2 PDUs.
        """
        return pulumi.get(self, "auth_password_l2")

    @property
    @pulumi.getter(name="authSendonlyL1")
    def auth_sendonly_l1(self) -> pulumi.Output[str]:
        """
        Enable/disable level 1 authentication send-only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_sendonly_l1")

    @property
    @pulumi.getter(name="authSendonlyL2")
    def auth_sendonly_l2(self) -> pulumi.Output[str]:
        """
        Enable/disable level 2 authentication send-only. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_sendonly_l2")

    @property
    @pulumi.getter(name="defaultOriginate")
    def default_originate(self) -> pulumi.Output[str]:
        """
        Enable/disable distribution of default route information. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default_originate")

    @property
    @pulumi.getter(name="defaultOriginate6")
    def default_originate6(self) -> pulumi.Output[str]:
        """
        Enable/disable distribution of default IPv6 route information. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default_originate6")

    @property
    @pulumi.getter(name="dynamicHostname")
    def dynamic_hostname(self) -> pulumi.Output[str]:
        """
        Enable/disable dynamic hostname. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dynamic_hostname")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="ignoreLspErrors")
    def ignore_lsp_errors(self) -> pulumi.Output[str]:
        """
        Enable/disable ignoring of LSP errors with bad checksums. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ignore_lsp_errors")

    @property
    @pulumi.getter(name="isType")
    def is_type(self) -> pulumi.Output[str]:
        """
        IS type. Valid values: `level-1-2`, `level-1`, `level-2-only`.
        """
        return pulumi.get(self, "is_type")

    @property
    @pulumi.getter(name="isisInterfaces")
    def isis_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.IsisIsisInterface']]]:
        """
        IS-IS interface configuration. The structure of `isis_interface` block is documented below.
        """
        return pulumi.get(self, "isis_interfaces")

    @property
    @pulumi.getter(name="isisNets")
    def isis_nets(self) -> pulumi.Output[Optional[Sequence['outputs.IsisIsisNet']]]:
        """
        IS-IS net configuration. The structure of `isis_net` block is documented below.
        """
        return pulumi.get(self, "isis_nets")

    @property
    @pulumi.getter(name="lspGenIntervalL1")
    def lsp_gen_interval_l1(self) -> pulumi.Output[int]:
        """
        Minimum interval for level 1 LSP regenerating.
        """
        return pulumi.get(self, "lsp_gen_interval_l1")

    @property
    @pulumi.getter(name="lspGenIntervalL2")
    def lsp_gen_interval_l2(self) -> pulumi.Output[int]:
        """
        Minimum interval for level 2 LSP regenerating.
        """
        return pulumi.get(self, "lsp_gen_interval_l2")

    @property
    @pulumi.getter(name="lspRefreshInterval")
    def lsp_refresh_interval(self) -> pulumi.Output[int]:
        """
        LSP refresh time in seconds.
        """
        return pulumi.get(self, "lsp_refresh_interval")

    @property
    @pulumi.getter(name="maxLspLifetime")
    def max_lsp_lifetime(self) -> pulumi.Output[int]:
        """
        Maximum LSP lifetime in seconds.
        """
        return pulumi.get(self, "max_lsp_lifetime")

    @property
    @pulumi.getter(name="metricStyle")
    def metric_style(self) -> pulumi.Output[str]:
        """
        Use old-style (ISO 10589) or new-style packet formats Valid values: `narrow`, `wide`, `transition`, `narrow-transition`, `narrow-transition-l1`, `narrow-transition-l2`, `wide-l1`, `wide-l2`, `wide-transition`, `wide-transition-l1`, `wide-transition-l2`, `transition-l1`, `transition-l2`.
        """
        return pulumi.get(self, "metric_style")

    @property
    @pulumi.getter(name="overloadBit")
    def overload_bit(self) -> pulumi.Output[str]:
        """
        Enable/disable signal other routers not to use us in SPF. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "overload_bit")

    @property
    @pulumi.getter(name="overloadBitOnStartup")
    def overload_bit_on_startup(self) -> pulumi.Output[int]:
        """
        Overload-bit only temporarily after reboot.
        """
        return pulumi.get(self, "overload_bit_on_startup")

    @property
    @pulumi.getter(name="overloadBitSuppress")
    def overload_bit_suppress(self) -> pulumi.Output[str]:
        """
        Suppress overload-bit for the specific prefixes. Valid values: `external`, `interlevel`.
        """
        return pulumi.get(self, "overload_bit_suppress")

    @property
    @pulumi.getter(name="redistribute6L1")
    def redistribute6_l1(self) -> pulumi.Output[str]:
        """
        Enable/disable redistribution of level 1 IPv6 routes into level 2. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "redistribute6_l1")

    @property
    @pulumi.getter(name="redistribute6L1List")
    def redistribute6_l1_list(self) -> pulumi.Output[str]:
        """
        Access-list for IPv6 route redistribution from l1 to l2.
        """
        return pulumi.get(self, "redistribute6_l1_list")

    @property
    @pulumi.getter(name="redistribute6L2")
    def redistribute6_l2(self) -> pulumi.Output[str]:
        """
        Enable/disable redistribution of level 2 IPv6 routes into level 1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "redistribute6_l2")

    @property
    @pulumi.getter(name="redistribute6L2List")
    def redistribute6_l2_list(self) -> pulumi.Output[str]:
        """
        Access-list for IPv6 route redistribution from l2 to l1.
        """
        return pulumi.get(self, "redistribute6_l2_list")

    @property
    @pulumi.getter
    def redistribute6s(self) -> pulumi.Output[Optional[Sequence['outputs.IsisRedistribute6']]]:
        """
        IS-IS IPv6 redistribution for routing protocols. The structure of `redistribute6` block is documented below.
        """
        return pulumi.get(self, "redistribute6s")

    @property
    @pulumi.getter(name="redistributeL1")
    def redistribute_l1(self) -> pulumi.Output[str]:
        """
        Enable/disable redistribution of level 1 routes into level 2. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "redistribute_l1")

    @property
    @pulumi.getter(name="redistributeL1List")
    def redistribute_l1_list(self) -> pulumi.Output[str]:
        """
        Access-list for route redistribution from l1 to l2.
        """
        return pulumi.get(self, "redistribute_l1_list")

    @property
    @pulumi.getter(name="redistributeL2")
    def redistribute_l2(self) -> pulumi.Output[str]:
        """
        Enable/disable redistribution of level 2 routes into level 1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "redistribute_l2")

    @property
    @pulumi.getter(name="redistributeL2List")
    def redistribute_l2_list(self) -> pulumi.Output[str]:
        """
        Access-list for route redistribution from l2 to l1.
        """
        return pulumi.get(self, "redistribute_l2_list")

    @property
    @pulumi.getter
    def redistributes(self) -> pulumi.Output[Optional[Sequence['outputs.IsisRedistribute']]]:
        """
        IS-IS redistribute protocols. The structure of `redistribute` block is documented below.
        """
        return pulumi.get(self, "redistributes")

    @property
    @pulumi.getter(name="spfIntervalExpL1")
    def spf_interval_exp_l1(self) -> pulumi.Output[str]:
        """
        Level 1 SPF calculation delay.
        """
        return pulumi.get(self, "spf_interval_exp_l1")

    @property
    @pulumi.getter(name="spfIntervalExpL2")
    def spf_interval_exp_l2(self) -> pulumi.Output[str]:
        """
        Level 2 SPF calculation delay.
        """
        return pulumi.get(self, "spf_interval_exp_l2")

    @property
    @pulumi.getter(name="summaryAddress6s")
    def summary_address6s(self) -> pulumi.Output[Optional[Sequence['outputs.IsisSummaryAddress6']]]:
        """
        IS-IS IPv6 summary address. The structure of `summary_address6` block is documented below.
        """
        return pulumi.get(self, "summary_address6s")

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.IsisSummaryAddress']]]:
        """
        IS-IS summary addresses. The structure of `summary_address` block is documented below.
        """
        return pulumi.get(self, "summary_addresses")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

