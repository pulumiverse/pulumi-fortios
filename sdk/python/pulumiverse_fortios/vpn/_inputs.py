# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'KmipserverServerListArgs',
    'OcvpnForticlientAccessArgs',
    'OcvpnForticlientAccessAuthGroupArgs',
    'OcvpnForticlientAccessAuthGroupOverlayArgs',
    'OcvpnOverlayArgs',
    'OcvpnOverlaySubnetArgs',
    'OcvpnWanInterfaceArgs',
    'QkdCertificateArgs',
]

@pulumi.input_type
class KmipserverServerListArgs:
    def __init__(__self__, *,
                 cert: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert: Client certificate to use for connectivity to the KMIP server.
        :param pulumi.Input[int] id: ID
        :param pulumi.Input[int] port: KMIP server port.
        :param pulumi.Input[str] server: KMIP server FQDN or IP address.
        :param pulumi.Input[str] status: Enable/disable KMIP server. Valid values: `enable`, `disable`.
        """
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        Client certificate to use for connectivity to the KMIP server.
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        KMIP server port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        KMIP server FQDN or IP address.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable KMIP server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class OcvpnForticlientAccessArgs:
    def __init__(__self__, *,
                 auth_groups: Optional[pulumi.Input[Sequence[pulumi.Input['OcvpnForticlientAccessAuthGroupArgs']]]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OcvpnForticlientAccessAuthGroupArgs']]] auth_groups: FortiClient user authentication groups. The structure of `auth_groups` block is documented below.
        :param pulumi.Input[str] psksecret: Pre-shared secret for FortiClient PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[str] status: Enable/disable FortiClient to access OCVPN networks. Valid values: `enable`, `disable`.
        """
        if auth_groups is not None:
            pulumi.set(__self__, "auth_groups", auth_groups)
        if psksecret is not None:
            pulumi.set(__self__, "psksecret", psksecret)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="authGroups")
    def auth_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OcvpnForticlientAccessAuthGroupArgs']]]]:
        """
        FortiClient user authentication groups. The structure of `auth_groups` block is documented below.
        """
        return pulumi.get(self, "auth_groups")

    @auth_groups.setter
    def auth_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OcvpnForticlientAccessAuthGroupArgs']]]]):
        pulumi.set(self, "auth_groups", value)

    @property
    @pulumi.getter
    def psksecret(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared secret for FortiClient PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        """
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient to access OCVPN networks. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class OcvpnForticlientAccessAuthGroupArgs:
    def __init__(__self__, *,
                 auth_group: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overlays: Optional[pulumi.Input[Sequence[pulumi.Input['OcvpnForticlientAccessAuthGroupOverlayArgs']]]] = None):
        """
        :param pulumi.Input[str] auth_group: Authentication user group for FortiClient access.
        :param pulumi.Input[str] name: Group name.
        :param pulumi.Input[Sequence[pulumi.Input['OcvpnForticlientAccessAuthGroupOverlayArgs']]] overlays: OCVPN overlays to allow access to. The structure of `overlays` block is documented below.
        """
        if auth_group is not None:
            pulumi.set(__self__, "auth_group", auth_group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overlays is not None:
            pulumi.set(__self__, "overlays", overlays)

    @property
    @pulumi.getter(name="authGroup")
    def auth_group(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication user group for FortiClient access.
        """
        return pulumi.get(self, "auth_group")

    @auth_group.setter
    def auth_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_group", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def overlays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OcvpnForticlientAccessAuthGroupOverlayArgs']]]]:
        """
        OCVPN overlays to allow access to. The structure of `overlays` block is documented below.
        """
        return pulumi.get(self, "overlays")

    @overlays.setter
    def overlays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OcvpnForticlientAccessAuthGroupOverlayArgs']]]]):
        pulumi.set(self, "overlays", value)


@pulumi.input_type
class OcvpnForticlientAccessAuthGroupOverlayArgs:
    def __init__(__self__, *,
                 overlay_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] overlay_name: Overlay name.
        """
        if overlay_name is not None:
            pulumi.set(__self__, "overlay_name", overlay_name)

    @property
    @pulumi.getter(name="overlayName")
    def overlay_name(self) -> Optional[pulumi.Input[str]]:
        """
        Overlay name.
        """
        return pulumi.get(self, "overlay_name")

    @overlay_name.setter
    def overlay_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overlay_name", value)


@pulumi.input_type
class OcvpnOverlayArgs:
    def __init__(__self__, *,
                 assign_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 inter_overlay: Optional[pulumi.Input[str]] = None,
                 ipv4_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_start_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overlay_name: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['OcvpnOverlaySubnetArgs']]]] = None):
        """
        :param pulumi.Input[str] assign_ip: Enable/disable client address assignment. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] inter_overlay: Allow or deny traffic from other overlays. Valid values: `allow`, `deny`.
        :param pulumi.Input[str] ipv4_end_ip: End of client IPv4 range.
        :param pulumi.Input[str] ipv4_start_ip: Start of client IPv4 range.
        :param pulumi.Input[str] name: Overlay name.
        :param pulumi.Input[str] overlay_name: Overlay name.
        :param pulumi.Input[Sequence[pulumi.Input['OcvpnOverlaySubnetArgs']]] subnets: Internal subnets to register with OCVPN service. The structure of `subnets` block is documented below.
        """
        if assign_ip is not None:
            pulumi.set(__self__, "assign_ip", assign_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inter_overlay is not None:
            pulumi.set(__self__, "inter_overlay", inter_overlay)
        if ipv4_end_ip is not None:
            pulumi.set(__self__, "ipv4_end_ip", ipv4_end_ip)
        if ipv4_start_ip is not None:
            pulumi.set(__self__, "ipv4_start_ip", ipv4_start_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overlay_name is not None:
            pulumi.set(__self__, "overlay_name", overlay_name)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="assignIp")
    def assign_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable client address assignment. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "assign_ip")

    @assign_ip.setter
    def assign_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="interOverlay")
    def inter_overlay(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or deny traffic from other overlays. Valid values: `allow`, `deny`.
        """
        return pulumi.get(self, "inter_overlay")

    @inter_overlay.setter
    def inter_overlay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inter_overlay", value)

    @property
    @pulumi.getter(name="ipv4EndIp")
    def ipv4_end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End of client IPv4 range.
        """
        return pulumi.get(self, "ipv4_end_ip")

    @ipv4_end_ip.setter
    def ipv4_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_end_ip", value)

    @property
    @pulumi.getter(name="ipv4StartIp")
    def ipv4_start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start of client IPv4 range.
        """
        return pulumi.get(self, "ipv4_start_ip")

    @ipv4_start_ip.setter
    def ipv4_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_start_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Overlay name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overlayName")
    def overlay_name(self) -> Optional[pulumi.Input[str]]:
        """
        Overlay name.
        """
        return pulumi.get(self, "overlay_name")

    @overlay_name.setter
    def overlay_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overlay_name", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OcvpnOverlaySubnetArgs']]]]:
        """
        Internal subnets to register with OCVPN service. The structure of `subnets` block is documented below.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OcvpnOverlaySubnetArgs']]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class OcvpnOverlaySubnetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] interface: LAN interface.
        :param pulumi.Input[str] subnet: IPv4 address and subnet mask.
        :param pulumi.Input[str] type: Subnet type. Valid values: `subnet`, `interface`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        LAN interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address and subnet mask.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet type. Valid values: `subnet`, `interface`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class OcvpnWanInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class QkdCertificateArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Certificate name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


