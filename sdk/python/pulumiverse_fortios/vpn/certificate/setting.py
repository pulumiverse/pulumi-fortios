# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SettingArgs', 'Setting']

@pulumi.input_type
class SettingArgs:
    def __init__(__self__, *,
                 certname_dsa1024: pulumi.Input[str],
                 certname_dsa2048: pulumi.Input[str],
                 certname_ecdsa256: pulumi.Input[str],
                 certname_ecdsa384: pulumi.Input[str],
                 certname_rsa1024: pulumi.Input[str],
                 certname_rsa2048: pulumi.Input[str],
                 cert_expire_warning: Optional[pulumi.Input[int]] = None,
                 certname_ecdsa521: Optional[pulumi.Input[str]] = None,
                 certname_ed25519: Optional[pulumi.Input[str]] = None,
                 certname_ed448: Optional[pulumi.Input[str]] = None,
                 certname_rsa4096: Optional[pulumi.Input[str]] = None,
                 check_ca_cert: Optional[pulumi.Input[str]] = None,
                 check_ca_chain: Optional[pulumi.Input[str]] = None,
                 cmp_key_usage_checking: Optional[pulumi.Input[str]] = None,
                 cmp_save_extra_certs: Optional[pulumi.Input[str]] = None,
                 cn_allow_multi: Optional[pulumi.Input[str]] = None,
                 cn_match: Optional[pulumi.Input[str]] = None,
                 crl_verification: Optional[pulumi.Input['SettingCrlVerificationArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ocsp_default_server: Optional[pulumi.Input[str]] = None,
                 ocsp_option: Optional[pulumi.Input[str]] = None,
                 ocsp_status: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 proxy_password: Optional[pulumi.Input[str]] = None,
                 proxy_port: Optional[pulumi.Input[int]] = None,
                 proxy_username: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 ssl_ocsp_source_ip: Optional[pulumi.Input[str]] = None,
                 strict_crl_check: Optional[pulumi.Input[str]] = None,
                 strict_ocsp_check: Optional[pulumi.Input[str]] = None,
                 subject_match: Optional[pulumi.Input[str]] = None,
                 subject_set: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Setting resource.
        :param pulumi.Input[str] certname_dsa1024: 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_dsa2048: 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ecdsa256: 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ecdsa384: 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_rsa1024: 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_rsa2048: 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[int] cert_expire_warning: Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
        :param pulumi.Input[str] certname_ecdsa521: 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ed25519: 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ed448: 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_rsa4096: 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] check_ca_cert: Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] check_ca_chain: Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cmp_key_usage_checking: Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cmp_save_extra_certs: Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cn_allow_multi: When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] cn_match: When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
        :param pulumi.Input['SettingCrlVerificationArgs'] crl_verification: CRL verification options. The structure of `crl_verification` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ocsp_default_server: Default OCSP server.
        :param pulumi.Input[str] ocsp_option: Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
        :param pulumi.Input[str] ocsp_status: Enable/disable receiving certificates using the OCSP.
        :param pulumi.Input[str] proxy: Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
        :param pulumi.Input[str] proxy_password: Proxy server password.
        :param pulumi.Input[int] proxy_port: Proxy server port (1 - 65535, default = 8080).
        :param pulumi.Input[str] proxy_username: Proxy server user name.
        :param pulumi.Input[str] source_ip: Source IP address for dynamic AIA and OCSP queries.
        :param pulumi.Input[str] ssl_min_proto_version: Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        :param pulumi.Input[str] ssl_ocsp_source_ip: Source IP address to use to communicate with the OCSP server.
        :param pulumi.Input[str] strict_crl_check: Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_ocsp_check: Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] subject_match: When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
        :param pulumi.Input[str] subject_set: When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "certname_dsa1024", certname_dsa1024)
        pulumi.set(__self__, "certname_dsa2048", certname_dsa2048)
        pulumi.set(__self__, "certname_ecdsa256", certname_ecdsa256)
        pulumi.set(__self__, "certname_ecdsa384", certname_ecdsa384)
        pulumi.set(__self__, "certname_rsa1024", certname_rsa1024)
        pulumi.set(__self__, "certname_rsa2048", certname_rsa2048)
        if cert_expire_warning is not None:
            pulumi.set(__self__, "cert_expire_warning", cert_expire_warning)
        if certname_ecdsa521 is not None:
            pulumi.set(__self__, "certname_ecdsa521", certname_ecdsa521)
        if certname_ed25519 is not None:
            pulumi.set(__self__, "certname_ed25519", certname_ed25519)
        if certname_ed448 is not None:
            pulumi.set(__self__, "certname_ed448", certname_ed448)
        if certname_rsa4096 is not None:
            pulumi.set(__self__, "certname_rsa4096", certname_rsa4096)
        if check_ca_cert is not None:
            pulumi.set(__self__, "check_ca_cert", check_ca_cert)
        if check_ca_chain is not None:
            pulumi.set(__self__, "check_ca_chain", check_ca_chain)
        if cmp_key_usage_checking is not None:
            pulumi.set(__self__, "cmp_key_usage_checking", cmp_key_usage_checking)
        if cmp_save_extra_certs is not None:
            pulumi.set(__self__, "cmp_save_extra_certs", cmp_save_extra_certs)
        if cn_allow_multi is not None:
            pulumi.set(__self__, "cn_allow_multi", cn_allow_multi)
        if cn_match is not None:
            pulumi.set(__self__, "cn_match", cn_match)
        if crl_verification is not None:
            pulumi.set(__self__, "crl_verification", crl_verification)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ocsp_default_server is not None:
            pulumi.set(__self__, "ocsp_default_server", ocsp_default_server)
        if ocsp_option is not None:
            pulumi.set(__self__, "ocsp_option", ocsp_option)
        if ocsp_status is not None:
            pulumi.set(__self__, "ocsp_status", ocsp_status)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if proxy_password is not None:
            pulumi.set(__self__, "proxy_password", proxy_password)
        if proxy_port is not None:
            pulumi.set(__self__, "proxy_port", proxy_port)
        if proxy_username is not None:
            pulumi.set(__self__, "proxy_username", proxy_username)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if ssl_min_proto_version is not None:
            pulumi.set(__self__, "ssl_min_proto_version", ssl_min_proto_version)
        if ssl_ocsp_source_ip is not None:
            pulumi.set(__self__, "ssl_ocsp_source_ip", ssl_ocsp_source_ip)
        if strict_crl_check is not None:
            pulumi.set(__self__, "strict_crl_check", strict_crl_check)
        if strict_ocsp_check is not None:
            pulumi.set(__self__, "strict_ocsp_check", strict_ocsp_check)
        if subject_match is not None:
            pulumi.set(__self__, "subject_match", subject_match)
        if subject_set is not None:
            pulumi.set(__self__, "subject_set", subject_set)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="certnameDsa1024")
    def certname_dsa1024(self) -> pulumi.Input[str]:
        """
        1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_dsa1024")

    @certname_dsa1024.setter
    def certname_dsa1024(self, value: pulumi.Input[str]):
        pulumi.set(self, "certname_dsa1024", value)

    @property
    @pulumi.getter(name="certnameDsa2048")
    def certname_dsa2048(self) -> pulumi.Input[str]:
        """
        2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_dsa2048")

    @certname_dsa2048.setter
    def certname_dsa2048(self, value: pulumi.Input[str]):
        pulumi.set(self, "certname_dsa2048", value)

    @property
    @pulumi.getter(name="certnameEcdsa256")
    def certname_ecdsa256(self) -> pulumi.Input[str]:
        """
        256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ecdsa256")

    @certname_ecdsa256.setter
    def certname_ecdsa256(self, value: pulumi.Input[str]):
        pulumi.set(self, "certname_ecdsa256", value)

    @property
    @pulumi.getter(name="certnameEcdsa384")
    def certname_ecdsa384(self) -> pulumi.Input[str]:
        """
        384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ecdsa384")

    @certname_ecdsa384.setter
    def certname_ecdsa384(self, value: pulumi.Input[str]):
        pulumi.set(self, "certname_ecdsa384", value)

    @property
    @pulumi.getter(name="certnameRsa1024")
    def certname_rsa1024(self) -> pulumi.Input[str]:
        """
        1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_rsa1024")

    @certname_rsa1024.setter
    def certname_rsa1024(self, value: pulumi.Input[str]):
        pulumi.set(self, "certname_rsa1024", value)

    @property
    @pulumi.getter(name="certnameRsa2048")
    def certname_rsa2048(self) -> pulumi.Input[str]:
        """
        2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_rsa2048")

    @certname_rsa2048.setter
    def certname_rsa2048(self, value: pulumi.Input[str]):
        pulumi.set(self, "certname_rsa2048", value)

    @property
    @pulumi.getter(name="certExpireWarning")
    def cert_expire_warning(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
        """
        return pulumi.get(self, "cert_expire_warning")

    @cert_expire_warning.setter
    def cert_expire_warning(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cert_expire_warning", value)

    @property
    @pulumi.getter(name="certnameEcdsa521")
    def certname_ecdsa521(self) -> Optional[pulumi.Input[str]]:
        """
        521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ecdsa521")

    @certname_ecdsa521.setter
    def certname_ecdsa521(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certname_ecdsa521", value)

    @property
    @pulumi.getter(name="certnameEd25519")
    def certname_ed25519(self) -> Optional[pulumi.Input[str]]:
        """
        253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ed25519")

    @certname_ed25519.setter
    def certname_ed25519(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certname_ed25519", value)

    @property
    @pulumi.getter(name="certnameEd448")
    def certname_ed448(self) -> Optional[pulumi.Input[str]]:
        """
        456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ed448")

    @certname_ed448.setter
    def certname_ed448(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certname_ed448", value)

    @property
    @pulumi.getter(name="certnameRsa4096")
    def certname_rsa4096(self) -> Optional[pulumi.Input[str]]:
        """
        4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_rsa4096")

    @certname_rsa4096.setter
    def certname_rsa4096(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certname_rsa4096", value)

    @property
    @pulumi.getter(name="checkCaCert")
    def check_ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_ca_cert")

    @check_ca_cert.setter
    def check_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_ca_cert", value)

    @property
    @pulumi.getter(name="checkCaChain")
    def check_ca_chain(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_ca_chain")

    @check_ca_chain.setter
    def check_ca_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_ca_chain", value)

    @property
    @pulumi.getter(name="cmpKeyUsageChecking")
    def cmp_key_usage_checking(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cmp_key_usage_checking")

    @cmp_key_usage_checking.setter
    def cmp_key_usage_checking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmp_key_usage_checking", value)

    @property
    @pulumi.getter(name="cmpSaveExtraCerts")
    def cmp_save_extra_certs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cmp_save_extra_certs")

    @cmp_save_extra_certs.setter
    def cmp_save_extra_certs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmp_save_extra_certs", value)

    @property
    @pulumi.getter(name="cnAllowMulti")
    def cn_allow_multi(self) -> Optional[pulumi.Input[str]]:
        """
        When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "cn_allow_multi")

    @cn_allow_multi.setter
    def cn_allow_multi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cn_allow_multi", value)

    @property
    @pulumi.getter(name="cnMatch")
    def cn_match(self) -> Optional[pulumi.Input[str]]:
        """
        When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
        """
        return pulumi.get(self, "cn_match")

    @cn_match.setter
    def cn_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cn_match", value)

    @property
    @pulumi.getter(name="crlVerification")
    def crl_verification(self) -> Optional[pulumi.Input['SettingCrlVerificationArgs']]:
        """
        CRL verification options. The structure of `crl_verification` block is documented below.
        """
        return pulumi.get(self, "crl_verification")

    @crl_verification.setter
    def crl_verification(self, value: Optional[pulumi.Input['SettingCrlVerificationArgs']]):
        pulumi.set(self, "crl_verification", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ocspDefaultServer")
    def ocsp_default_server(self) -> Optional[pulumi.Input[str]]:
        """
        Default OCSP server.
        """
        return pulumi.get(self, "ocsp_default_server")

    @ocsp_default_server.setter
    def ocsp_default_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_default_server", value)

    @property
    @pulumi.getter(name="ocspOption")
    def ocsp_option(self) -> Optional[pulumi.Input[str]]:
        """
        Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
        """
        return pulumi.get(self, "ocsp_option")

    @ocsp_option.setter
    def ocsp_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_option", value)

    @property
    @pulumi.getter(name="ocspStatus")
    def ocsp_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable receiving certificates using the OCSP.
        """
        return pulumi.get(self, "ocsp_status")

    @ocsp_status.setter
    def ocsp_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_status", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="proxyPassword")
    def proxy_password(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy server password.
        """
        return pulumi.get(self, "proxy_password")

    @proxy_password.setter
    def proxy_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_password", value)

    @property
    @pulumi.getter(name="proxyPort")
    def proxy_port(self) -> Optional[pulumi.Input[int]]:
        """
        Proxy server port (1 - 65535, default = 8080).
        """
        return pulumi.get(self, "proxy_port")

    @proxy_port.setter
    def proxy_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_port", value)

    @property
    @pulumi.getter(name="proxyUsername")
    def proxy_username(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy server user name.
        """
        return pulumi.get(self, "proxy_username")

    @proxy_username.setter
    def proxy_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_username", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address for dynamic AIA and OCSP queries.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        """
        return pulumi.get(self, "ssl_min_proto_version")

    @ssl_min_proto_version.setter
    def ssl_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_proto_version", value)

    @property
    @pulumi.getter(name="sslOcspSourceIp")
    def ssl_ocsp_source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address to use to communicate with the OCSP server.
        """
        return pulumi.get(self, "ssl_ocsp_source_ip")

    @ssl_ocsp_source_ip.setter
    def ssl_ocsp_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ocsp_source_ip", value)

    @property
    @pulumi.getter(name="strictCrlCheck")
    def strict_crl_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_crl_check")

    @strict_crl_check.setter
    def strict_crl_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_crl_check", value)

    @property
    @pulumi.getter(name="strictOcspCheck")
    def strict_ocsp_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_ocsp_check")

    @strict_ocsp_check.setter
    def strict_ocsp_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_ocsp_check", value)

    @property
    @pulumi.getter(name="subjectMatch")
    def subject_match(self) -> Optional[pulumi.Input[str]]:
        """
        When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
        """
        return pulumi.get(self, "subject_match")

    @subject_match.setter
    def subject_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_match", value)

    @property
    @pulumi.getter(name="subjectSet")
    def subject_set(self) -> Optional[pulumi.Input[str]]:
        """
        When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
        """
        return pulumi.get(self, "subject_set")

    @subject_set.setter
    def subject_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_set", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SettingState:
    def __init__(__self__, *,
                 cert_expire_warning: Optional[pulumi.Input[int]] = None,
                 certname_dsa1024: Optional[pulumi.Input[str]] = None,
                 certname_dsa2048: Optional[pulumi.Input[str]] = None,
                 certname_ecdsa256: Optional[pulumi.Input[str]] = None,
                 certname_ecdsa384: Optional[pulumi.Input[str]] = None,
                 certname_ecdsa521: Optional[pulumi.Input[str]] = None,
                 certname_ed25519: Optional[pulumi.Input[str]] = None,
                 certname_ed448: Optional[pulumi.Input[str]] = None,
                 certname_rsa1024: Optional[pulumi.Input[str]] = None,
                 certname_rsa2048: Optional[pulumi.Input[str]] = None,
                 certname_rsa4096: Optional[pulumi.Input[str]] = None,
                 check_ca_cert: Optional[pulumi.Input[str]] = None,
                 check_ca_chain: Optional[pulumi.Input[str]] = None,
                 cmp_key_usage_checking: Optional[pulumi.Input[str]] = None,
                 cmp_save_extra_certs: Optional[pulumi.Input[str]] = None,
                 cn_allow_multi: Optional[pulumi.Input[str]] = None,
                 cn_match: Optional[pulumi.Input[str]] = None,
                 crl_verification: Optional[pulumi.Input['SettingCrlVerificationArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ocsp_default_server: Optional[pulumi.Input[str]] = None,
                 ocsp_option: Optional[pulumi.Input[str]] = None,
                 ocsp_status: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 proxy_password: Optional[pulumi.Input[str]] = None,
                 proxy_port: Optional[pulumi.Input[int]] = None,
                 proxy_username: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 ssl_ocsp_source_ip: Optional[pulumi.Input[str]] = None,
                 strict_crl_check: Optional[pulumi.Input[str]] = None,
                 strict_ocsp_check: Optional[pulumi.Input[str]] = None,
                 subject_match: Optional[pulumi.Input[str]] = None,
                 subject_set: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Setting resources.
        :param pulumi.Input[int] cert_expire_warning: Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
        :param pulumi.Input[str] certname_dsa1024: 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_dsa2048: 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ecdsa256: 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ecdsa384: 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ecdsa521: 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ed25519: 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ed448: 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_rsa1024: 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_rsa2048: 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_rsa4096: 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] check_ca_cert: Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] check_ca_chain: Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cmp_key_usage_checking: Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cmp_save_extra_certs: Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cn_allow_multi: When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] cn_match: When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
        :param pulumi.Input['SettingCrlVerificationArgs'] crl_verification: CRL verification options. The structure of `crl_verification` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ocsp_default_server: Default OCSP server.
        :param pulumi.Input[str] ocsp_option: Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
        :param pulumi.Input[str] ocsp_status: Enable/disable receiving certificates using the OCSP.
        :param pulumi.Input[str] proxy: Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
        :param pulumi.Input[str] proxy_password: Proxy server password.
        :param pulumi.Input[int] proxy_port: Proxy server port (1 - 65535, default = 8080).
        :param pulumi.Input[str] proxy_username: Proxy server user name.
        :param pulumi.Input[str] source_ip: Source IP address for dynamic AIA and OCSP queries.
        :param pulumi.Input[str] ssl_min_proto_version: Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        :param pulumi.Input[str] ssl_ocsp_source_ip: Source IP address to use to communicate with the OCSP server.
        :param pulumi.Input[str] strict_crl_check: Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_ocsp_check: Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] subject_match: When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
        :param pulumi.Input[str] subject_set: When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if cert_expire_warning is not None:
            pulumi.set(__self__, "cert_expire_warning", cert_expire_warning)
        if certname_dsa1024 is not None:
            pulumi.set(__self__, "certname_dsa1024", certname_dsa1024)
        if certname_dsa2048 is not None:
            pulumi.set(__self__, "certname_dsa2048", certname_dsa2048)
        if certname_ecdsa256 is not None:
            pulumi.set(__self__, "certname_ecdsa256", certname_ecdsa256)
        if certname_ecdsa384 is not None:
            pulumi.set(__self__, "certname_ecdsa384", certname_ecdsa384)
        if certname_ecdsa521 is not None:
            pulumi.set(__self__, "certname_ecdsa521", certname_ecdsa521)
        if certname_ed25519 is not None:
            pulumi.set(__self__, "certname_ed25519", certname_ed25519)
        if certname_ed448 is not None:
            pulumi.set(__self__, "certname_ed448", certname_ed448)
        if certname_rsa1024 is not None:
            pulumi.set(__self__, "certname_rsa1024", certname_rsa1024)
        if certname_rsa2048 is not None:
            pulumi.set(__self__, "certname_rsa2048", certname_rsa2048)
        if certname_rsa4096 is not None:
            pulumi.set(__self__, "certname_rsa4096", certname_rsa4096)
        if check_ca_cert is not None:
            pulumi.set(__self__, "check_ca_cert", check_ca_cert)
        if check_ca_chain is not None:
            pulumi.set(__self__, "check_ca_chain", check_ca_chain)
        if cmp_key_usage_checking is not None:
            pulumi.set(__self__, "cmp_key_usage_checking", cmp_key_usage_checking)
        if cmp_save_extra_certs is not None:
            pulumi.set(__self__, "cmp_save_extra_certs", cmp_save_extra_certs)
        if cn_allow_multi is not None:
            pulumi.set(__self__, "cn_allow_multi", cn_allow_multi)
        if cn_match is not None:
            pulumi.set(__self__, "cn_match", cn_match)
        if crl_verification is not None:
            pulumi.set(__self__, "crl_verification", crl_verification)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ocsp_default_server is not None:
            pulumi.set(__self__, "ocsp_default_server", ocsp_default_server)
        if ocsp_option is not None:
            pulumi.set(__self__, "ocsp_option", ocsp_option)
        if ocsp_status is not None:
            pulumi.set(__self__, "ocsp_status", ocsp_status)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if proxy_password is not None:
            pulumi.set(__self__, "proxy_password", proxy_password)
        if proxy_port is not None:
            pulumi.set(__self__, "proxy_port", proxy_port)
        if proxy_username is not None:
            pulumi.set(__self__, "proxy_username", proxy_username)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if ssl_min_proto_version is not None:
            pulumi.set(__self__, "ssl_min_proto_version", ssl_min_proto_version)
        if ssl_ocsp_source_ip is not None:
            pulumi.set(__self__, "ssl_ocsp_source_ip", ssl_ocsp_source_ip)
        if strict_crl_check is not None:
            pulumi.set(__self__, "strict_crl_check", strict_crl_check)
        if strict_ocsp_check is not None:
            pulumi.set(__self__, "strict_ocsp_check", strict_ocsp_check)
        if subject_match is not None:
            pulumi.set(__self__, "subject_match", subject_match)
        if subject_set is not None:
            pulumi.set(__self__, "subject_set", subject_set)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="certExpireWarning")
    def cert_expire_warning(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
        """
        return pulumi.get(self, "cert_expire_warning")

    @cert_expire_warning.setter
    def cert_expire_warning(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cert_expire_warning", value)

    @property
    @pulumi.getter(name="certnameDsa1024")
    def certname_dsa1024(self) -> Optional[pulumi.Input[str]]:
        """
        1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_dsa1024")

    @certname_dsa1024.setter
    def certname_dsa1024(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certname_dsa1024", value)

    @property
    @pulumi.getter(name="certnameDsa2048")
    def certname_dsa2048(self) -> Optional[pulumi.Input[str]]:
        """
        2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_dsa2048")

    @certname_dsa2048.setter
    def certname_dsa2048(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certname_dsa2048", value)

    @property
    @pulumi.getter(name="certnameEcdsa256")
    def certname_ecdsa256(self) -> Optional[pulumi.Input[str]]:
        """
        256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ecdsa256")

    @certname_ecdsa256.setter
    def certname_ecdsa256(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certname_ecdsa256", value)

    @property
    @pulumi.getter(name="certnameEcdsa384")
    def certname_ecdsa384(self) -> Optional[pulumi.Input[str]]:
        """
        384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ecdsa384")

    @certname_ecdsa384.setter
    def certname_ecdsa384(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certname_ecdsa384", value)

    @property
    @pulumi.getter(name="certnameEcdsa521")
    def certname_ecdsa521(self) -> Optional[pulumi.Input[str]]:
        """
        521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ecdsa521")

    @certname_ecdsa521.setter
    def certname_ecdsa521(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certname_ecdsa521", value)

    @property
    @pulumi.getter(name="certnameEd25519")
    def certname_ed25519(self) -> Optional[pulumi.Input[str]]:
        """
        253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ed25519")

    @certname_ed25519.setter
    def certname_ed25519(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certname_ed25519", value)

    @property
    @pulumi.getter(name="certnameEd448")
    def certname_ed448(self) -> Optional[pulumi.Input[str]]:
        """
        456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ed448")

    @certname_ed448.setter
    def certname_ed448(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certname_ed448", value)

    @property
    @pulumi.getter(name="certnameRsa1024")
    def certname_rsa1024(self) -> Optional[pulumi.Input[str]]:
        """
        1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_rsa1024")

    @certname_rsa1024.setter
    def certname_rsa1024(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certname_rsa1024", value)

    @property
    @pulumi.getter(name="certnameRsa2048")
    def certname_rsa2048(self) -> Optional[pulumi.Input[str]]:
        """
        2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_rsa2048")

    @certname_rsa2048.setter
    def certname_rsa2048(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certname_rsa2048", value)

    @property
    @pulumi.getter(name="certnameRsa4096")
    def certname_rsa4096(self) -> Optional[pulumi.Input[str]]:
        """
        4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_rsa4096")

    @certname_rsa4096.setter
    def certname_rsa4096(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certname_rsa4096", value)

    @property
    @pulumi.getter(name="checkCaCert")
    def check_ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_ca_cert")

    @check_ca_cert.setter
    def check_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_ca_cert", value)

    @property
    @pulumi.getter(name="checkCaChain")
    def check_ca_chain(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_ca_chain")

    @check_ca_chain.setter
    def check_ca_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_ca_chain", value)

    @property
    @pulumi.getter(name="cmpKeyUsageChecking")
    def cmp_key_usage_checking(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cmp_key_usage_checking")

    @cmp_key_usage_checking.setter
    def cmp_key_usage_checking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmp_key_usage_checking", value)

    @property
    @pulumi.getter(name="cmpSaveExtraCerts")
    def cmp_save_extra_certs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cmp_save_extra_certs")

    @cmp_save_extra_certs.setter
    def cmp_save_extra_certs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmp_save_extra_certs", value)

    @property
    @pulumi.getter(name="cnAllowMulti")
    def cn_allow_multi(self) -> Optional[pulumi.Input[str]]:
        """
        When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "cn_allow_multi")

    @cn_allow_multi.setter
    def cn_allow_multi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cn_allow_multi", value)

    @property
    @pulumi.getter(name="cnMatch")
    def cn_match(self) -> Optional[pulumi.Input[str]]:
        """
        When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
        """
        return pulumi.get(self, "cn_match")

    @cn_match.setter
    def cn_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cn_match", value)

    @property
    @pulumi.getter(name="crlVerification")
    def crl_verification(self) -> Optional[pulumi.Input['SettingCrlVerificationArgs']]:
        """
        CRL verification options. The structure of `crl_verification` block is documented below.
        """
        return pulumi.get(self, "crl_verification")

    @crl_verification.setter
    def crl_verification(self, value: Optional[pulumi.Input['SettingCrlVerificationArgs']]):
        pulumi.set(self, "crl_verification", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ocspDefaultServer")
    def ocsp_default_server(self) -> Optional[pulumi.Input[str]]:
        """
        Default OCSP server.
        """
        return pulumi.get(self, "ocsp_default_server")

    @ocsp_default_server.setter
    def ocsp_default_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_default_server", value)

    @property
    @pulumi.getter(name="ocspOption")
    def ocsp_option(self) -> Optional[pulumi.Input[str]]:
        """
        Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
        """
        return pulumi.get(self, "ocsp_option")

    @ocsp_option.setter
    def ocsp_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_option", value)

    @property
    @pulumi.getter(name="ocspStatus")
    def ocsp_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable receiving certificates using the OCSP.
        """
        return pulumi.get(self, "ocsp_status")

    @ocsp_status.setter
    def ocsp_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_status", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="proxyPassword")
    def proxy_password(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy server password.
        """
        return pulumi.get(self, "proxy_password")

    @proxy_password.setter
    def proxy_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_password", value)

    @property
    @pulumi.getter(name="proxyPort")
    def proxy_port(self) -> Optional[pulumi.Input[int]]:
        """
        Proxy server port (1 - 65535, default = 8080).
        """
        return pulumi.get(self, "proxy_port")

    @proxy_port.setter
    def proxy_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_port", value)

    @property
    @pulumi.getter(name="proxyUsername")
    def proxy_username(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy server user name.
        """
        return pulumi.get(self, "proxy_username")

    @proxy_username.setter
    def proxy_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_username", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address for dynamic AIA and OCSP queries.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        """
        return pulumi.get(self, "ssl_min_proto_version")

    @ssl_min_proto_version.setter
    def ssl_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_proto_version", value)

    @property
    @pulumi.getter(name="sslOcspSourceIp")
    def ssl_ocsp_source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address to use to communicate with the OCSP server.
        """
        return pulumi.get(self, "ssl_ocsp_source_ip")

    @ssl_ocsp_source_ip.setter
    def ssl_ocsp_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_ocsp_source_ip", value)

    @property
    @pulumi.getter(name="strictCrlCheck")
    def strict_crl_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_crl_check")

    @strict_crl_check.setter
    def strict_crl_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_crl_check", value)

    @property
    @pulumi.getter(name="strictOcspCheck")
    def strict_ocsp_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_ocsp_check")

    @strict_ocsp_check.setter
    def strict_ocsp_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_ocsp_check", value)

    @property
    @pulumi.getter(name="subjectMatch")
    def subject_match(self) -> Optional[pulumi.Input[str]]:
        """
        When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
        """
        return pulumi.get(self, "subject_match")

    @subject_match.setter
    def subject_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_match", value)

    @property
    @pulumi.getter(name="subjectSet")
    def subject_set(self) -> Optional[pulumi.Input[str]]:
        """
        When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
        """
        return pulumi.get(self, "subject_set")

    @subject_set.setter
    def subject_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject_set", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Setting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cert_expire_warning: Optional[pulumi.Input[int]] = None,
                 certname_dsa1024: Optional[pulumi.Input[str]] = None,
                 certname_dsa2048: Optional[pulumi.Input[str]] = None,
                 certname_ecdsa256: Optional[pulumi.Input[str]] = None,
                 certname_ecdsa384: Optional[pulumi.Input[str]] = None,
                 certname_ecdsa521: Optional[pulumi.Input[str]] = None,
                 certname_ed25519: Optional[pulumi.Input[str]] = None,
                 certname_ed448: Optional[pulumi.Input[str]] = None,
                 certname_rsa1024: Optional[pulumi.Input[str]] = None,
                 certname_rsa2048: Optional[pulumi.Input[str]] = None,
                 certname_rsa4096: Optional[pulumi.Input[str]] = None,
                 check_ca_cert: Optional[pulumi.Input[str]] = None,
                 check_ca_chain: Optional[pulumi.Input[str]] = None,
                 cmp_key_usage_checking: Optional[pulumi.Input[str]] = None,
                 cmp_save_extra_certs: Optional[pulumi.Input[str]] = None,
                 cn_allow_multi: Optional[pulumi.Input[str]] = None,
                 cn_match: Optional[pulumi.Input[str]] = None,
                 crl_verification: Optional[pulumi.Input[pulumi.InputType['SettingCrlVerificationArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ocsp_default_server: Optional[pulumi.Input[str]] = None,
                 ocsp_option: Optional[pulumi.Input[str]] = None,
                 ocsp_status: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 proxy_password: Optional[pulumi.Input[str]] = None,
                 proxy_port: Optional[pulumi.Input[int]] = None,
                 proxy_username: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 ssl_ocsp_source_ip: Optional[pulumi.Input[str]] = None,
                 strict_crl_check: Optional[pulumi.Input[str]] = None,
                 strict_ocsp_check: Optional[pulumi.Input[str]] = None,
                 subject_match: Optional[pulumi.Input[str]] = None,
                 subject_set: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        VPN certificate setting.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.vpn.certificate.Setting("trname",
            certname_dsa1024="Fortinet_SSL_DSA1024",
            certname_dsa2048="Fortinet_SSL_DSA2048",
            certname_ecdsa256="Fortinet_SSL_ECDSA256",
            certname_ecdsa384="Fortinet_SSL_ECDSA384",
            certname_rsa1024="Fortinet_SSL_RSA1024",
            certname_rsa2048="Fortinet_SSL_RSA2048",
            check_ca_cert="enable",
            check_ca_chain="disable",
            cmp_save_extra_certs="disable",
            cn_match="substring",
            ocsp_option="server",
            ocsp_status="disable",
            ssl_min_proto_version="default",
            strict_crl_check="disable",
            strict_ocsp_check="disable",
            subject_match="substring")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        VpnCertificate Setting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:vpn/certificate/setting:Setting labelname VpnCertificateSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:vpn/certificate/setting:Setting labelname VpnCertificateSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cert_expire_warning: Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
        :param pulumi.Input[str] certname_dsa1024: 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_dsa2048: 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ecdsa256: 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ecdsa384: 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ecdsa521: 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ed25519: 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ed448: 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_rsa1024: 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_rsa2048: 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_rsa4096: 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] check_ca_cert: Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] check_ca_chain: Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cmp_key_usage_checking: Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cmp_save_extra_certs: Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cn_allow_multi: When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] cn_match: When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
        :param pulumi.Input[pulumi.InputType['SettingCrlVerificationArgs']] crl_verification: CRL verification options. The structure of `crl_verification` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ocsp_default_server: Default OCSP server.
        :param pulumi.Input[str] ocsp_option: Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
        :param pulumi.Input[str] ocsp_status: Enable/disable receiving certificates using the OCSP.
        :param pulumi.Input[str] proxy: Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
        :param pulumi.Input[str] proxy_password: Proxy server password.
        :param pulumi.Input[int] proxy_port: Proxy server port (1 - 65535, default = 8080).
        :param pulumi.Input[str] proxy_username: Proxy server user name.
        :param pulumi.Input[str] source_ip: Source IP address for dynamic AIA and OCSP queries.
        :param pulumi.Input[str] ssl_min_proto_version: Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        :param pulumi.Input[str] ssl_ocsp_source_ip: Source IP address to use to communicate with the OCSP server.
        :param pulumi.Input[str] strict_crl_check: Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_ocsp_check: Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] subject_match: When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
        :param pulumi.Input[str] subject_set: When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SettingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        VPN certificate setting.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.vpn.certificate.Setting("trname",
            certname_dsa1024="Fortinet_SSL_DSA1024",
            certname_dsa2048="Fortinet_SSL_DSA2048",
            certname_ecdsa256="Fortinet_SSL_ECDSA256",
            certname_ecdsa384="Fortinet_SSL_ECDSA384",
            certname_rsa1024="Fortinet_SSL_RSA1024",
            certname_rsa2048="Fortinet_SSL_RSA2048",
            check_ca_cert="enable",
            check_ca_chain="disable",
            cmp_save_extra_certs="disable",
            cn_match="substring",
            ocsp_option="server",
            ocsp_status="disable",
            ssl_min_proto_version="default",
            strict_crl_check="disable",
            strict_ocsp_check="disable",
            subject_match="substring")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        VpnCertificate Setting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:vpn/certificate/setting:Setting labelname VpnCertificateSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:vpn/certificate/setting:Setting labelname VpnCertificateSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cert_expire_warning: Optional[pulumi.Input[int]] = None,
                 certname_dsa1024: Optional[pulumi.Input[str]] = None,
                 certname_dsa2048: Optional[pulumi.Input[str]] = None,
                 certname_ecdsa256: Optional[pulumi.Input[str]] = None,
                 certname_ecdsa384: Optional[pulumi.Input[str]] = None,
                 certname_ecdsa521: Optional[pulumi.Input[str]] = None,
                 certname_ed25519: Optional[pulumi.Input[str]] = None,
                 certname_ed448: Optional[pulumi.Input[str]] = None,
                 certname_rsa1024: Optional[pulumi.Input[str]] = None,
                 certname_rsa2048: Optional[pulumi.Input[str]] = None,
                 certname_rsa4096: Optional[pulumi.Input[str]] = None,
                 check_ca_cert: Optional[pulumi.Input[str]] = None,
                 check_ca_chain: Optional[pulumi.Input[str]] = None,
                 cmp_key_usage_checking: Optional[pulumi.Input[str]] = None,
                 cmp_save_extra_certs: Optional[pulumi.Input[str]] = None,
                 cn_allow_multi: Optional[pulumi.Input[str]] = None,
                 cn_match: Optional[pulumi.Input[str]] = None,
                 crl_verification: Optional[pulumi.Input[pulumi.InputType['SettingCrlVerificationArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ocsp_default_server: Optional[pulumi.Input[str]] = None,
                 ocsp_option: Optional[pulumi.Input[str]] = None,
                 ocsp_status: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 proxy_password: Optional[pulumi.Input[str]] = None,
                 proxy_port: Optional[pulumi.Input[int]] = None,
                 proxy_username: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 ssl_ocsp_source_ip: Optional[pulumi.Input[str]] = None,
                 strict_crl_check: Optional[pulumi.Input[str]] = None,
                 strict_ocsp_check: Optional[pulumi.Input[str]] = None,
                 subject_match: Optional[pulumi.Input[str]] = None,
                 subject_set: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingArgs.__new__(SettingArgs)

            __props__.__dict__["cert_expire_warning"] = cert_expire_warning
            if certname_dsa1024 is None and not opts.urn:
                raise TypeError("Missing required property 'certname_dsa1024'")
            __props__.__dict__["certname_dsa1024"] = certname_dsa1024
            if certname_dsa2048 is None and not opts.urn:
                raise TypeError("Missing required property 'certname_dsa2048'")
            __props__.__dict__["certname_dsa2048"] = certname_dsa2048
            if certname_ecdsa256 is None and not opts.urn:
                raise TypeError("Missing required property 'certname_ecdsa256'")
            __props__.__dict__["certname_ecdsa256"] = certname_ecdsa256
            if certname_ecdsa384 is None and not opts.urn:
                raise TypeError("Missing required property 'certname_ecdsa384'")
            __props__.__dict__["certname_ecdsa384"] = certname_ecdsa384
            __props__.__dict__["certname_ecdsa521"] = certname_ecdsa521
            __props__.__dict__["certname_ed25519"] = certname_ed25519
            __props__.__dict__["certname_ed448"] = certname_ed448
            if certname_rsa1024 is None and not opts.urn:
                raise TypeError("Missing required property 'certname_rsa1024'")
            __props__.__dict__["certname_rsa1024"] = certname_rsa1024
            if certname_rsa2048 is None and not opts.urn:
                raise TypeError("Missing required property 'certname_rsa2048'")
            __props__.__dict__["certname_rsa2048"] = certname_rsa2048
            __props__.__dict__["certname_rsa4096"] = certname_rsa4096
            __props__.__dict__["check_ca_cert"] = check_ca_cert
            __props__.__dict__["check_ca_chain"] = check_ca_chain
            __props__.__dict__["cmp_key_usage_checking"] = cmp_key_usage_checking
            __props__.__dict__["cmp_save_extra_certs"] = cmp_save_extra_certs
            __props__.__dict__["cn_allow_multi"] = cn_allow_multi
            __props__.__dict__["cn_match"] = cn_match
            __props__.__dict__["crl_verification"] = crl_verification
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interface_select_method"] = interface_select_method
            __props__.__dict__["ocsp_default_server"] = ocsp_default_server
            __props__.__dict__["ocsp_option"] = ocsp_option
            __props__.__dict__["ocsp_status"] = ocsp_status
            __props__.__dict__["proxy"] = proxy
            __props__.__dict__["proxy_password"] = proxy_password
            __props__.__dict__["proxy_port"] = proxy_port
            __props__.__dict__["proxy_username"] = proxy_username
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["ssl_min_proto_version"] = ssl_min_proto_version
            __props__.__dict__["ssl_ocsp_source_ip"] = ssl_ocsp_source_ip
            __props__.__dict__["strict_crl_check"] = strict_crl_check
            __props__.__dict__["strict_ocsp_check"] = strict_ocsp_check
            __props__.__dict__["subject_match"] = subject_match
            __props__.__dict__["subject_set"] = subject_set
            __props__.__dict__["vdomparam"] = vdomparam
        super(Setting, __self__).__init__(
            'fortios:vpn/certificate/setting:Setting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cert_expire_warning: Optional[pulumi.Input[int]] = None,
            certname_dsa1024: Optional[pulumi.Input[str]] = None,
            certname_dsa2048: Optional[pulumi.Input[str]] = None,
            certname_ecdsa256: Optional[pulumi.Input[str]] = None,
            certname_ecdsa384: Optional[pulumi.Input[str]] = None,
            certname_ecdsa521: Optional[pulumi.Input[str]] = None,
            certname_ed25519: Optional[pulumi.Input[str]] = None,
            certname_ed448: Optional[pulumi.Input[str]] = None,
            certname_rsa1024: Optional[pulumi.Input[str]] = None,
            certname_rsa2048: Optional[pulumi.Input[str]] = None,
            certname_rsa4096: Optional[pulumi.Input[str]] = None,
            check_ca_cert: Optional[pulumi.Input[str]] = None,
            check_ca_chain: Optional[pulumi.Input[str]] = None,
            cmp_key_usage_checking: Optional[pulumi.Input[str]] = None,
            cmp_save_extra_certs: Optional[pulumi.Input[str]] = None,
            cn_allow_multi: Optional[pulumi.Input[str]] = None,
            cn_match: Optional[pulumi.Input[str]] = None,
            crl_verification: Optional[pulumi.Input[pulumi.InputType['SettingCrlVerificationArgs']]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interface_select_method: Optional[pulumi.Input[str]] = None,
            ocsp_default_server: Optional[pulumi.Input[str]] = None,
            ocsp_option: Optional[pulumi.Input[str]] = None,
            ocsp_status: Optional[pulumi.Input[str]] = None,
            proxy: Optional[pulumi.Input[str]] = None,
            proxy_password: Optional[pulumi.Input[str]] = None,
            proxy_port: Optional[pulumi.Input[int]] = None,
            proxy_username: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
            ssl_ocsp_source_ip: Optional[pulumi.Input[str]] = None,
            strict_crl_check: Optional[pulumi.Input[str]] = None,
            strict_ocsp_check: Optional[pulumi.Input[str]] = None,
            subject_match: Optional[pulumi.Input[str]] = None,
            subject_set: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Setting':
        """
        Get an existing Setting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cert_expire_warning: Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
        :param pulumi.Input[str] certname_dsa1024: 1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_dsa2048: 2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ecdsa256: 256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ecdsa384: 384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ecdsa521: 521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ed25519: 253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_ed448: 456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_rsa1024: 1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_rsa2048: 2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] certname_rsa4096: 4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
        :param pulumi.Input[str] check_ca_cert: Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] check_ca_chain: Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cmp_key_usage_checking: Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cmp_save_extra_certs: Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cn_allow_multi: When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] cn_match: When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
        :param pulumi.Input[pulumi.InputType['SettingCrlVerificationArgs']] crl_verification: CRL verification options. The structure of `crl_verification` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ocsp_default_server: Default OCSP server.
        :param pulumi.Input[str] ocsp_option: Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
        :param pulumi.Input[str] ocsp_status: Enable/disable receiving certificates using the OCSP.
        :param pulumi.Input[str] proxy: Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
        :param pulumi.Input[str] proxy_password: Proxy server password.
        :param pulumi.Input[int] proxy_port: Proxy server port (1 - 65535, default = 8080).
        :param pulumi.Input[str] proxy_username: Proxy server user name.
        :param pulumi.Input[str] source_ip: Source IP address for dynamic AIA and OCSP queries.
        :param pulumi.Input[str] ssl_min_proto_version: Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        :param pulumi.Input[str] ssl_ocsp_source_ip: Source IP address to use to communicate with the OCSP server.
        :param pulumi.Input[str] strict_crl_check: Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_ocsp_check: Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] subject_match: When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
        :param pulumi.Input[str] subject_set: When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingState.__new__(_SettingState)

        __props__.__dict__["cert_expire_warning"] = cert_expire_warning
        __props__.__dict__["certname_dsa1024"] = certname_dsa1024
        __props__.__dict__["certname_dsa2048"] = certname_dsa2048
        __props__.__dict__["certname_ecdsa256"] = certname_ecdsa256
        __props__.__dict__["certname_ecdsa384"] = certname_ecdsa384
        __props__.__dict__["certname_ecdsa521"] = certname_ecdsa521
        __props__.__dict__["certname_ed25519"] = certname_ed25519
        __props__.__dict__["certname_ed448"] = certname_ed448
        __props__.__dict__["certname_rsa1024"] = certname_rsa1024
        __props__.__dict__["certname_rsa2048"] = certname_rsa2048
        __props__.__dict__["certname_rsa4096"] = certname_rsa4096
        __props__.__dict__["check_ca_cert"] = check_ca_cert
        __props__.__dict__["check_ca_chain"] = check_ca_chain
        __props__.__dict__["cmp_key_usage_checking"] = cmp_key_usage_checking
        __props__.__dict__["cmp_save_extra_certs"] = cmp_save_extra_certs
        __props__.__dict__["cn_allow_multi"] = cn_allow_multi
        __props__.__dict__["cn_match"] = cn_match
        __props__.__dict__["crl_verification"] = crl_verification
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interface_select_method"] = interface_select_method
        __props__.__dict__["ocsp_default_server"] = ocsp_default_server
        __props__.__dict__["ocsp_option"] = ocsp_option
        __props__.__dict__["ocsp_status"] = ocsp_status
        __props__.__dict__["proxy"] = proxy
        __props__.__dict__["proxy_password"] = proxy_password
        __props__.__dict__["proxy_port"] = proxy_port
        __props__.__dict__["proxy_username"] = proxy_username
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["ssl_min_proto_version"] = ssl_min_proto_version
        __props__.__dict__["ssl_ocsp_source_ip"] = ssl_ocsp_source_ip
        __props__.__dict__["strict_crl_check"] = strict_crl_check
        __props__.__dict__["strict_ocsp_check"] = strict_ocsp_check
        __props__.__dict__["subject_match"] = subject_match
        __props__.__dict__["subject_set"] = subject_set
        __props__.__dict__["vdomparam"] = vdomparam
        return Setting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certExpireWarning")
    def cert_expire_warning(self) -> pulumi.Output[int]:
        """
        Number of days before a certificate expires to send a warning. Set to 0 to disable sending of the warning (0 - 100, default = 14).
        """
        return pulumi.get(self, "cert_expire_warning")

    @property
    @pulumi.getter(name="certnameDsa1024")
    def certname_dsa1024(self) -> pulumi.Output[str]:
        """
        1024 bit DSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_dsa1024")

    @property
    @pulumi.getter(name="certnameDsa2048")
    def certname_dsa2048(self) -> pulumi.Output[str]:
        """
        2048 bit DSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_dsa2048")

    @property
    @pulumi.getter(name="certnameEcdsa256")
    def certname_ecdsa256(self) -> pulumi.Output[str]:
        """
        256 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ecdsa256")

    @property
    @pulumi.getter(name="certnameEcdsa384")
    def certname_ecdsa384(self) -> pulumi.Output[str]:
        """
        384 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ecdsa384")

    @property
    @pulumi.getter(name="certnameEcdsa521")
    def certname_ecdsa521(self) -> pulumi.Output[str]:
        """
        521 bit ECDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ecdsa521")

    @property
    @pulumi.getter(name="certnameEd25519")
    def certname_ed25519(self) -> pulumi.Output[str]:
        """
        253 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ed25519")

    @property
    @pulumi.getter(name="certnameEd448")
    def certname_ed448(self) -> pulumi.Output[str]:
        """
        456 bit EdDSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_ed448")

    @property
    @pulumi.getter(name="certnameRsa1024")
    def certname_rsa1024(self) -> pulumi.Output[str]:
        """
        1024 bit RSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_rsa1024")

    @property
    @pulumi.getter(name="certnameRsa2048")
    def certname_rsa2048(self) -> pulumi.Output[str]:
        """
        2048 bit RSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_rsa2048")

    @property
    @pulumi.getter(name="certnameRsa4096")
    def certname_rsa4096(self) -> pulumi.Output[str]:
        """
        4096 bit RSA key certificate for re-signing server certificates for SSL inspection.
        """
        return pulumi.get(self, "certname_rsa4096")

    @property
    @pulumi.getter(name="checkCaCert")
    def check_ca_cert(self) -> pulumi.Output[str]:
        """
        Enable/disable verification of the user certificate and pass authentication if any CA in the chain is trusted (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_ca_cert")

    @property
    @pulumi.getter(name="checkCaChain")
    def check_ca_chain(self) -> pulumi.Output[str]:
        """
        Enable/disable verification of the entire certificate chain and pass authentication only if the chain is complete and all of the CAs in the chain are trusted (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_ca_chain")

    @property
    @pulumi.getter(name="cmpKeyUsageChecking")
    def cmp_key_usage_checking(self) -> pulumi.Output[str]:
        """
        Enable/disable server certificate key usage checking in CMP mode (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cmp_key_usage_checking")

    @property
    @pulumi.getter(name="cmpSaveExtraCerts")
    def cmp_save_extra_certs(self) -> pulumi.Output[str]:
        """
        Enable/disable saving extra certificates in CMP mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cmp_save_extra_certs")

    @property
    @pulumi.getter(name="cnAllowMulti")
    def cn_allow_multi(self) -> pulumi.Output[str]:
        """
        When searching for a matching certificate, allow mutliple CN fields in certificate subject name (default = enable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "cn_allow_multi")

    @property
    @pulumi.getter(name="cnMatch")
    def cn_match(self) -> pulumi.Output[str]:
        """
        When searching for a matching certificate, control how to find matches in the cn attribute of the certificate subject name. Valid values: `substring`, `value`.
        """
        return pulumi.get(self, "cn_match")

    @property
    @pulumi.getter(name="crlVerification")
    def crl_verification(self) -> pulumi.Output['outputs.SettingCrlVerification']:
        """
        CRL verification options. The structure of `crl_verification` block is documented below.
        """
        return pulumi.get(self, "crl_verification")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> pulumi.Output[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="ocspDefaultServer")
    def ocsp_default_server(self) -> pulumi.Output[str]:
        """
        Default OCSP server.
        """
        return pulumi.get(self, "ocsp_default_server")

    @property
    @pulumi.getter(name="ocspOption")
    def ocsp_option(self) -> pulumi.Output[str]:
        """
        Specify whether the OCSP URL is from certificate or configured OCSP server. Valid values: `certificate`, `server`.
        """
        return pulumi.get(self, "ocsp_option")

    @property
    @pulumi.getter(name="ocspStatus")
    def ocsp_status(self) -> pulumi.Output[str]:
        """
        Enable/disable receiving certificates using the OCSP.
        """
        return pulumi.get(self, "ocsp_status")

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Output[str]:
        """
        Proxy server FQDN or IP for OCSP/CA queries during certificate verification.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter(name="proxyPassword")
    def proxy_password(self) -> pulumi.Output[Optional[str]]:
        """
        Proxy server password.
        """
        return pulumi.get(self, "proxy_password")

    @property
    @pulumi.getter(name="proxyPort")
    def proxy_port(self) -> pulumi.Output[int]:
        """
        Proxy server port (1 - 65535, default = 8080).
        """
        return pulumi.get(self, "proxy_port")

    @property
    @pulumi.getter(name="proxyUsername")
    def proxy_username(self) -> pulumi.Output[str]:
        """
        Proxy server user name.
        """
        return pulumi.get(self, "proxy_username")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        """
        Source IP address for dynamic AIA and OCSP queries.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> pulumi.Output[str]:
        """
        Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        """
        return pulumi.get(self, "ssl_min_proto_version")

    @property
    @pulumi.getter(name="sslOcspSourceIp")
    def ssl_ocsp_source_ip(self) -> pulumi.Output[str]:
        """
        Source IP address to use to communicate with the OCSP server.
        """
        return pulumi.get(self, "ssl_ocsp_source_ip")

    @property
    @pulumi.getter(name="strictCrlCheck")
    def strict_crl_check(self) -> pulumi.Output[str]:
        """
        Enable/disable strict mode CRL checking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_crl_check")

    @property
    @pulumi.getter(name="strictOcspCheck")
    def strict_ocsp_check(self) -> pulumi.Output[str]:
        """
        Enable/disable strict mode OCSP checking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_ocsp_check")

    @property
    @pulumi.getter(name="subjectMatch")
    def subject_match(self) -> pulumi.Output[str]:
        """
        When searching for a matching certificate, control how to find matches in the certificate subject name. Valid values: `substring`, `value`.
        """
        return pulumi.get(self, "subject_match")

    @property
    @pulumi.getter(name="subjectSet")
    def subject_set(self) -> pulumi.Output[str]:
        """
        When searching for a matching certificate, control how to do RDN set matching with certificate subject name (default = subset). Valid values: `subset`, `superset`.
        """
        return pulumi.get(self, "subject_set")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

