# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = ['LocalArgs', 'Local']

@pulumi.input_type
class LocalArgs:
    def __init__(__self__, *,
                 acme_ca_url: Optional[pulumi.Input[str]] = None,
                 acme_domain: Optional[pulumi.Input[str]] = None,
                 acme_email: Optional[pulumi.Input[str]] = None,
                 acme_renew_window: Optional[pulumi.Input[int]] = None,
                 acme_rsa_key_size: Optional[pulumi.Input[int]] = None,
                 auto_regenerate_days: Optional[pulumi.Input[int]] = None,
                 auto_regenerate_days_warning: Optional[pulumi.Input[int]] = None,
                 ca_identifier: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 cmp_path: Optional[pulumi.Input[str]] = None,
                 cmp_regeneration_method: Optional[pulumi.Input[str]] = None,
                 cmp_server: Optional[pulumi.Input[str]] = None,
                 cmp_server_cert: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 csr: Optional[pulumi.Input[str]] = None,
                 enroll_protocol: Optional[pulumi.Input[str]] = None,
                 est_ca_id: Optional[pulumi.Input[str]] = None,
                 est_client_cert: Optional[pulumi.Input[str]] = None,
                 est_http_password: Optional[pulumi.Input[str]] = None,
                 est_http_username: Optional[pulumi.Input[str]] = None,
                 est_server: Optional[pulumi.Input[str]] = None,
                 est_server_cert: Optional[pulumi.Input[str]] = None,
                 est_srp_password: Optional[pulumi.Input[str]] = None,
                 est_srp_username: Optional[pulumi.Input[str]] = None,
                 ike_localid: Optional[pulumi.Input[str]] = None,
                 ike_localid_type: Optional[pulumi.Input[str]] = None,
                 last_updated: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_encoding: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 private_key_retain: Optional[pulumi.Input[str]] = None,
                 range: Optional[pulumi.Input[str]] = None,
                 scep_password: Optional[pulumi.Input[str]] = None,
                 scep_url: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Local resource.
        :param pulumi.Input[str] acme_ca_url: The URL for the ACME CA server (Let's Encrypt is the default provider).
        :param pulumi.Input[str] acme_domain: A valid domain that resolves to this Fortigate.
        :param pulumi.Input[str] acme_email: Contact email address that is required by some CAs like LetsEncrypt.
        :param pulumi.Input[int] acme_renew_window: Beginning of the renewal window (in days before certificate expiration, 30 by default).
        :param pulumi.Input[int] acme_rsa_key_size: Length of the RSA private key of the generated cert (Minimum 2048 bits).
        :param pulumi.Input[int] auto_regenerate_days: Number of days to wait before expiry of an updated local certificate is requested (0 = disabled).
        :param pulumi.Input[int] auto_regenerate_days_warning: Number of days to wait before an expiry warning message is generated (0 = disabled).
        :param pulumi.Input[str] ca_identifier: CA identifier of the CA server for signing via SCEP.
        :param pulumi.Input[str] certificate: PEM format certificate.
        :param pulumi.Input[str] cmp_path: Path location inside CMP server.
        :param pulumi.Input[str] cmp_regeneration_method: CMP auto-regeneration method. Valid values: `keyupate`, `renewal`.
        :param pulumi.Input[str] cmp_server: 'ADDRESS:PORT' for CMP server.
        :param pulumi.Input[str] cmp_server_cert: CMP server certificate.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] csr: Certificate Signing Request.
        :param pulumi.Input[str] enroll_protocol: Certificate enrollment protocol.
        :param pulumi.Input[str] est_ca_id: CA identifier of the CA server for signing via EST.
        :param pulumi.Input[str] est_client_cert: Certificate used to authenticate this FortiGate to EST server.
        :param pulumi.Input[str] est_http_password: HTTP Authentication password for signing via EST.
        :param pulumi.Input[str] est_http_username: HTTP Authentication username for signing via EST.
        :param pulumi.Input[str] est_server: Address and port for EST server (e.g. https://example.com:1234).
        :param pulumi.Input[str] est_server_cert: EST server's certificate must be verifiable by this certificate to be authenticated.
        :param pulumi.Input[str] est_srp_password: EST SRP authentication password.
        :param pulumi.Input[str] est_srp_username: EST SRP authentication username.
        :param pulumi.Input[str] ike_localid: Local ID the FortiGate uses for authentication as a VPN client.
        :param pulumi.Input[str] ike_localid_type: IKE local ID type. Valid values: `asn1dn`, `fqdn`.
        :param pulumi.Input[int] last_updated: Time at which certificate was last updated.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] name_encoding: Name encoding method for auto-regeneration. Valid values: `printable`, `utf8`.
        :param pulumi.Input[str] password: Password as a PEM file.
        :param pulumi.Input[str] private_key: PEM format key, encrypted with a password.
        :param pulumi.Input[str] private_key_retain: Enable/disable retention of private key during SCEP renewal (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] range: Either a global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
        :param pulumi.Input[str] scep_password: SCEP server challenge password for auto-regeneration.
        :param pulumi.Input[str] scep_url: SCEP server URL.
        :param pulumi.Input[str] source: Certificate source type.
        :param pulumi.Input[str] source_ip: Source IP address for communications to the SCEP server.
        :param pulumi.Input[str] state: Certificate Signing Request State.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if acme_ca_url is not None:
            pulumi.set(__self__, "acme_ca_url", acme_ca_url)
        if acme_domain is not None:
            pulumi.set(__self__, "acme_domain", acme_domain)
        if acme_email is not None:
            pulumi.set(__self__, "acme_email", acme_email)
        if acme_renew_window is not None:
            pulumi.set(__self__, "acme_renew_window", acme_renew_window)
        if acme_rsa_key_size is not None:
            pulumi.set(__self__, "acme_rsa_key_size", acme_rsa_key_size)
        if auto_regenerate_days is not None:
            pulumi.set(__self__, "auto_regenerate_days", auto_regenerate_days)
        if auto_regenerate_days_warning is not None:
            pulumi.set(__self__, "auto_regenerate_days_warning", auto_regenerate_days_warning)
        if ca_identifier is not None:
            pulumi.set(__self__, "ca_identifier", ca_identifier)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if cmp_path is not None:
            pulumi.set(__self__, "cmp_path", cmp_path)
        if cmp_regeneration_method is not None:
            pulumi.set(__self__, "cmp_regeneration_method", cmp_regeneration_method)
        if cmp_server is not None:
            pulumi.set(__self__, "cmp_server", cmp_server)
        if cmp_server_cert is not None:
            pulumi.set(__self__, "cmp_server_cert", cmp_server_cert)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if csr is not None:
            pulumi.set(__self__, "csr", csr)
        if enroll_protocol is not None:
            pulumi.set(__self__, "enroll_protocol", enroll_protocol)
        if est_ca_id is not None:
            pulumi.set(__self__, "est_ca_id", est_ca_id)
        if est_client_cert is not None:
            pulumi.set(__self__, "est_client_cert", est_client_cert)
        if est_http_password is not None:
            pulumi.set(__self__, "est_http_password", est_http_password)
        if est_http_username is not None:
            pulumi.set(__self__, "est_http_username", est_http_username)
        if est_server is not None:
            pulumi.set(__self__, "est_server", est_server)
        if est_server_cert is not None:
            pulumi.set(__self__, "est_server_cert", est_server_cert)
        if est_srp_password is not None:
            pulumi.set(__self__, "est_srp_password", est_srp_password)
        if est_srp_username is not None:
            pulumi.set(__self__, "est_srp_username", est_srp_username)
        if ike_localid is not None:
            pulumi.set(__self__, "ike_localid", ike_localid)
        if ike_localid_type is not None:
            pulumi.set(__self__, "ike_localid_type", ike_localid_type)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_encoding is not None:
            pulumi.set(__self__, "name_encoding", name_encoding)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_retain is not None:
            pulumi.set(__self__, "private_key_retain", private_key_retain)
        if range is not None:
            pulumi.set(__self__, "range", range)
        if scep_password is not None:
            pulumi.set(__self__, "scep_password", scep_password)
        if scep_url is not None:
            pulumi.set(__self__, "scep_url", scep_url)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="acmeCaUrl")
    def acme_ca_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL for the ACME CA server (Let's Encrypt is the default provider).
        """
        return pulumi.get(self, "acme_ca_url")

    @acme_ca_url.setter
    def acme_ca_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acme_ca_url", value)

    @property
    @pulumi.getter(name="acmeDomain")
    def acme_domain(self) -> Optional[pulumi.Input[str]]:
        """
        A valid domain that resolves to this Fortigate.
        """
        return pulumi.get(self, "acme_domain")

    @acme_domain.setter
    def acme_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acme_domain", value)

    @property
    @pulumi.getter(name="acmeEmail")
    def acme_email(self) -> Optional[pulumi.Input[str]]:
        """
        Contact email address that is required by some CAs like LetsEncrypt.
        """
        return pulumi.get(self, "acme_email")

    @acme_email.setter
    def acme_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acme_email", value)

    @property
    @pulumi.getter(name="acmeRenewWindow")
    def acme_renew_window(self) -> Optional[pulumi.Input[int]]:
        """
        Beginning of the renewal window (in days before certificate expiration, 30 by default).
        """
        return pulumi.get(self, "acme_renew_window")

    @acme_renew_window.setter
    def acme_renew_window(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "acme_renew_window", value)

    @property
    @pulumi.getter(name="acmeRsaKeySize")
    def acme_rsa_key_size(self) -> Optional[pulumi.Input[int]]:
        """
        Length of the RSA private key of the generated cert (Minimum 2048 bits).
        """
        return pulumi.get(self, "acme_rsa_key_size")

    @acme_rsa_key_size.setter
    def acme_rsa_key_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "acme_rsa_key_size", value)

    @property
    @pulumi.getter(name="autoRegenerateDays")
    def auto_regenerate_days(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days to wait before expiry of an updated local certificate is requested (0 = disabled).
        """
        return pulumi.get(self, "auto_regenerate_days")

    @auto_regenerate_days.setter
    def auto_regenerate_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_regenerate_days", value)

    @property
    @pulumi.getter(name="autoRegenerateDaysWarning")
    def auto_regenerate_days_warning(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days to wait before an expiry warning message is generated (0 = disabled).
        """
        return pulumi.get(self, "auto_regenerate_days_warning")

    @auto_regenerate_days_warning.setter
    def auto_regenerate_days_warning(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_regenerate_days_warning", value)

    @property
    @pulumi.getter(name="caIdentifier")
    def ca_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        CA identifier of the CA server for signing via SCEP.
        """
        return pulumi.get(self, "ca_identifier")

    @ca_identifier.setter
    def ca_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_identifier", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        PEM format certificate.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="cmpPath")
    def cmp_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path location inside CMP server.
        """
        return pulumi.get(self, "cmp_path")

    @cmp_path.setter
    def cmp_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmp_path", value)

    @property
    @pulumi.getter(name="cmpRegenerationMethod")
    def cmp_regeneration_method(self) -> Optional[pulumi.Input[str]]:
        """
        CMP auto-regeneration method. Valid values: `keyupate`, `renewal`.
        """
        return pulumi.get(self, "cmp_regeneration_method")

    @cmp_regeneration_method.setter
    def cmp_regeneration_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmp_regeneration_method", value)

    @property
    @pulumi.getter(name="cmpServer")
    def cmp_server(self) -> Optional[pulumi.Input[str]]:
        """
        'ADDRESS:PORT' for CMP server.
        """
        return pulumi.get(self, "cmp_server")

    @cmp_server.setter
    def cmp_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmp_server", value)

    @property
    @pulumi.getter(name="cmpServerCert")
    def cmp_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        CMP server certificate.
        """
        return pulumi.get(self, "cmp_server_cert")

    @cmp_server_cert.setter
    def cmp_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmp_server_cert", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def csr(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate Signing Request.
        """
        return pulumi.get(self, "csr")

    @csr.setter
    def csr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr", value)

    @property
    @pulumi.getter(name="enrollProtocol")
    def enroll_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate enrollment protocol.
        """
        return pulumi.get(self, "enroll_protocol")

    @enroll_protocol.setter
    def enroll_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enroll_protocol", value)

    @property
    @pulumi.getter(name="estCaId")
    def est_ca_id(self) -> Optional[pulumi.Input[str]]:
        """
        CA identifier of the CA server for signing via EST.
        """
        return pulumi.get(self, "est_ca_id")

    @est_ca_id.setter
    def est_ca_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_ca_id", value)

    @property
    @pulumi.getter(name="estClientCert")
    def est_client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate used to authenticate this FortiGate to EST server.
        """
        return pulumi.get(self, "est_client_cert")

    @est_client_cert.setter
    def est_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_client_cert", value)

    @property
    @pulumi.getter(name="estHttpPassword")
    def est_http_password(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP Authentication password for signing via EST.
        """
        return pulumi.get(self, "est_http_password")

    @est_http_password.setter
    def est_http_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_http_password", value)

    @property
    @pulumi.getter(name="estHttpUsername")
    def est_http_username(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP Authentication username for signing via EST.
        """
        return pulumi.get(self, "est_http_username")

    @est_http_username.setter
    def est_http_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_http_username", value)

    @property
    @pulumi.getter(name="estServer")
    def est_server(self) -> Optional[pulumi.Input[str]]:
        """
        Address and port for EST server (e.g. https://example.com:1234).
        """
        return pulumi.get(self, "est_server")

    @est_server.setter
    def est_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_server", value)

    @property
    @pulumi.getter(name="estServerCert")
    def est_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        EST server's certificate must be verifiable by this certificate to be authenticated.
        """
        return pulumi.get(self, "est_server_cert")

    @est_server_cert.setter
    def est_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_server_cert", value)

    @property
    @pulumi.getter(name="estSrpPassword")
    def est_srp_password(self) -> Optional[pulumi.Input[str]]:
        """
        EST SRP authentication password.
        """
        return pulumi.get(self, "est_srp_password")

    @est_srp_password.setter
    def est_srp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_srp_password", value)

    @property
    @pulumi.getter(name="estSrpUsername")
    def est_srp_username(self) -> Optional[pulumi.Input[str]]:
        """
        EST SRP authentication username.
        """
        return pulumi.get(self, "est_srp_username")

    @est_srp_username.setter
    def est_srp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_srp_username", value)

    @property
    @pulumi.getter(name="ikeLocalid")
    def ike_localid(self) -> Optional[pulumi.Input[str]]:
        """
        Local ID the FortiGate uses for authentication as a VPN client.
        """
        return pulumi.get(self, "ike_localid")

    @ike_localid.setter
    def ike_localid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_localid", value)

    @property
    @pulumi.getter(name="ikeLocalidType")
    def ike_localid_type(self) -> Optional[pulumi.Input[str]]:
        """
        IKE local ID type. Valid values: `asn1dn`, `fqdn`.
        """
        return pulumi.get(self, "ike_localid_type")

    @ike_localid_type.setter
    def ike_localid_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_localid_type", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[int]]:
        """
        Time at which certificate was last updated.
        """
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameEncoding")
    def name_encoding(self) -> Optional[pulumi.Input[str]]:
        """
        Name encoding method for auto-regeneration. Valid values: `printable`, `utf8`.
        """
        return pulumi.get(self, "name_encoding")

    @name_encoding.setter
    def name_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_encoding", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password as a PEM file.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        PEM format key, encrypted with a password.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="privateKeyRetain")
    def private_key_retain(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable retention of private key during SCEP renewal (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "private_key_retain")

    @private_key_retain.setter
    def private_key_retain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_retain", value)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        """
        Either a global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
        """
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter(name="scepPassword")
    def scep_password(self) -> Optional[pulumi.Input[str]]:
        """
        SCEP server challenge password for auto-regeneration.
        """
        return pulumi.get(self, "scep_password")

    @scep_password.setter
    def scep_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scep_password", value)

    @property
    @pulumi.getter(name="scepUrl")
    def scep_url(self) -> Optional[pulumi.Input[str]]:
        """
        SCEP server URL.
        """
        return pulumi.get(self, "scep_url")

    @scep_url.setter
    def scep_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scep_url", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate source type.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address for communications to the SCEP server.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate Signing Request State.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _LocalState:
    def __init__(__self__, *,
                 acme_ca_url: Optional[pulumi.Input[str]] = None,
                 acme_domain: Optional[pulumi.Input[str]] = None,
                 acme_email: Optional[pulumi.Input[str]] = None,
                 acme_renew_window: Optional[pulumi.Input[int]] = None,
                 acme_rsa_key_size: Optional[pulumi.Input[int]] = None,
                 auto_regenerate_days: Optional[pulumi.Input[int]] = None,
                 auto_regenerate_days_warning: Optional[pulumi.Input[int]] = None,
                 ca_identifier: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 cmp_path: Optional[pulumi.Input[str]] = None,
                 cmp_regeneration_method: Optional[pulumi.Input[str]] = None,
                 cmp_server: Optional[pulumi.Input[str]] = None,
                 cmp_server_cert: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 csr: Optional[pulumi.Input[str]] = None,
                 enroll_protocol: Optional[pulumi.Input[str]] = None,
                 est_ca_id: Optional[pulumi.Input[str]] = None,
                 est_client_cert: Optional[pulumi.Input[str]] = None,
                 est_http_password: Optional[pulumi.Input[str]] = None,
                 est_http_username: Optional[pulumi.Input[str]] = None,
                 est_server: Optional[pulumi.Input[str]] = None,
                 est_server_cert: Optional[pulumi.Input[str]] = None,
                 est_srp_password: Optional[pulumi.Input[str]] = None,
                 est_srp_username: Optional[pulumi.Input[str]] = None,
                 ike_localid: Optional[pulumi.Input[str]] = None,
                 ike_localid_type: Optional[pulumi.Input[str]] = None,
                 last_updated: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_encoding: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 private_key_retain: Optional[pulumi.Input[str]] = None,
                 range: Optional[pulumi.Input[str]] = None,
                 scep_password: Optional[pulumi.Input[str]] = None,
                 scep_url: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Local resources.
        :param pulumi.Input[str] acme_ca_url: The URL for the ACME CA server (Let's Encrypt is the default provider).
        :param pulumi.Input[str] acme_domain: A valid domain that resolves to this Fortigate.
        :param pulumi.Input[str] acme_email: Contact email address that is required by some CAs like LetsEncrypt.
        :param pulumi.Input[int] acme_renew_window: Beginning of the renewal window (in days before certificate expiration, 30 by default).
        :param pulumi.Input[int] acme_rsa_key_size: Length of the RSA private key of the generated cert (Minimum 2048 bits).
        :param pulumi.Input[int] auto_regenerate_days: Number of days to wait before expiry of an updated local certificate is requested (0 = disabled).
        :param pulumi.Input[int] auto_regenerate_days_warning: Number of days to wait before an expiry warning message is generated (0 = disabled).
        :param pulumi.Input[str] ca_identifier: CA identifier of the CA server for signing via SCEP.
        :param pulumi.Input[str] certificate: PEM format certificate.
        :param pulumi.Input[str] cmp_path: Path location inside CMP server.
        :param pulumi.Input[str] cmp_regeneration_method: CMP auto-regeneration method. Valid values: `keyupate`, `renewal`.
        :param pulumi.Input[str] cmp_server: 'ADDRESS:PORT' for CMP server.
        :param pulumi.Input[str] cmp_server_cert: CMP server certificate.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] csr: Certificate Signing Request.
        :param pulumi.Input[str] enroll_protocol: Certificate enrollment protocol.
        :param pulumi.Input[str] est_ca_id: CA identifier of the CA server for signing via EST.
        :param pulumi.Input[str] est_client_cert: Certificate used to authenticate this FortiGate to EST server.
        :param pulumi.Input[str] est_http_password: HTTP Authentication password for signing via EST.
        :param pulumi.Input[str] est_http_username: HTTP Authentication username for signing via EST.
        :param pulumi.Input[str] est_server: Address and port for EST server (e.g. https://example.com:1234).
        :param pulumi.Input[str] est_server_cert: EST server's certificate must be verifiable by this certificate to be authenticated.
        :param pulumi.Input[str] est_srp_password: EST SRP authentication password.
        :param pulumi.Input[str] est_srp_username: EST SRP authentication username.
        :param pulumi.Input[str] ike_localid: Local ID the FortiGate uses for authentication as a VPN client.
        :param pulumi.Input[str] ike_localid_type: IKE local ID type. Valid values: `asn1dn`, `fqdn`.
        :param pulumi.Input[int] last_updated: Time at which certificate was last updated.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] name_encoding: Name encoding method for auto-regeneration. Valid values: `printable`, `utf8`.
        :param pulumi.Input[str] password: Password as a PEM file.
        :param pulumi.Input[str] private_key: PEM format key, encrypted with a password.
        :param pulumi.Input[str] private_key_retain: Enable/disable retention of private key during SCEP renewal (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] range: Either a global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
        :param pulumi.Input[str] scep_password: SCEP server challenge password for auto-regeneration.
        :param pulumi.Input[str] scep_url: SCEP server URL.
        :param pulumi.Input[str] source: Certificate source type.
        :param pulumi.Input[str] source_ip: Source IP address for communications to the SCEP server.
        :param pulumi.Input[str] state: Certificate Signing Request State.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if acme_ca_url is not None:
            pulumi.set(__self__, "acme_ca_url", acme_ca_url)
        if acme_domain is not None:
            pulumi.set(__self__, "acme_domain", acme_domain)
        if acme_email is not None:
            pulumi.set(__self__, "acme_email", acme_email)
        if acme_renew_window is not None:
            pulumi.set(__self__, "acme_renew_window", acme_renew_window)
        if acme_rsa_key_size is not None:
            pulumi.set(__self__, "acme_rsa_key_size", acme_rsa_key_size)
        if auto_regenerate_days is not None:
            pulumi.set(__self__, "auto_regenerate_days", auto_regenerate_days)
        if auto_regenerate_days_warning is not None:
            pulumi.set(__self__, "auto_regenerate_days_warning", auto_regenerate_days_warning)
        if ca_identifier is not None:
            pulumi.set(__self__, "ca_identifier", ca_identifier)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if cmp_path is not None:
            pulumi.set(__self__, "cmp_path", cmp_path)
        if cmp_regeneration_method is not None:
            pulumi.set(__self__, "cmp_regeneration_method", cmp_regeneration_method)
        if cmp_server is not None:
            pulumi.set(__self__, "cmp_server", cmp_server)
        if cmp_server_cert is not None:
            pulumi.set(__self__, "cmp_server_cert", cmp_server_cert)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if csr is not None:
            pulumi.set(__self__, "csr", csr)
        if enroll_protocol is not None:
            pulumi.set(__self__, "enroll_protocol", enroll_protocol)
        if est_ca_id is not None:
            pulumi.set(__self__, "est_ca_id", est_ca_id)
        if est_client_cert is not None:
            pulumi.set(__self__, "est_client_cert", est_client_cert)
        if est_http_password is not None:
            pulumi.set(__self__, "est_http_password", est_http_password)
        if est_http_username is not None:
            pulumi.set(__self__, "est_http_username", est_http_username)
        if est_server is not None:
            pulumi.set(__self__, "est_server", est_server)
        if est_server_cert is not None:
            pulumi.set(__self__, "est_server_cert", est_server_cert)
        if est_srp_password is not None:
            pulumi.set(__self__, "est_srp_password", est_srp_password)
        if est_srp_username is not None:
            pulumi.set(__self__, "est_srp_username", est_srp_username)
        if ike_localid is not None:
            pulumi.set(__self__, "ike_localid", ike_localid)
        if ike_localid_type is not None:
            pulumi.set(__self__, "ike_localid_type", ike_localid_type)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_encoding is not None:
            pulumi.set(__self__, "name_encoding", name_encoding)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_retain is not None:
            pulumi.set(__self__, "private_key_retain", private_key_retain)
        if range is not None:
            pulumi.set(__self__, "range", range)
        if scep_password is not None:
            pulumi.set(__self__, "scep_password", scep_password)
        if scep_url is not None:
            pulumi.set(__self__, "scep_url", scep_url)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="acmeCaUrl")
    def acme_ca_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL for the ACME CA server (Let's Encrypt is the default provider).
        """
        return pulumi.get(self, "acme_ca_url")

    @acme_ca_url.setter
    def acme_ca_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acme_ca_url", value)

    @property
    @pulumi.getter(name="acmeDomain")
    def acme_domain(self) -> Optional[pulumi.Input[str]]:
        """
        A valid domain that resolves to this Fortigate.
        """
        return pulumi.get(self, "acme_domain")

    @acme_domain.setter
    def acme_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acme_domain", value)

    @property
    @pulumi.getter(name="acmeEmail")
    def acme_email(self) -> Optional[pulumi.Input[str]]:
        """
        Contact email address that is required by some CAs like LetsEncrypt.
        """
        return pulumi.get(self, "acme_email")

    @acme_email.setter
    def acme_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acme_email", value)

    @property
    @pulumi.getter(name="acmeRenewWindow")
    def acme_renew_window(self) -> Optional[pulumi.Input[int]]:
        """
        Beginning of the renewal window (in days before certificate expiration, 30 by default).
        """
        return pulumi.get(self, "acme_renew_window")

    @acme_renew_window.setter
    def acme_renew_window(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "acme_renew_window", value)

    @property
    @pulumi.getter(name="acmeRsaKeySize")
    def acme_rsa_key_size(self) -> Optional[pulumi.Input[int]]:
        """
        Length of the RSA private key of the generated cert (Minimum 2048 bits).
        """
        return pulumi.get(self, "acme_rsa_key_size")

    @acme_rsa_key_size.setter
    def acme_rsa_key_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "acme_rsa_key_size", value)

    @property
    @pulumi.getter(name="autoRegenerateDays")
    def auto_regenerate_days(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days to wait before expiry of an updated local certificate is requested (0 = disabled).
        """
        return pulumi.get(self, "auto_regenerate_days")

    @auto_regenerate_days.setter
    def auto_regenerate_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_regenerate_days", value)

    @property
    @pulumi.getter(name="autoRegenerateDaysWarning")
    def auto_regenerate_days_warning(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days to wait before an expiry warning message is generated (0 = disabled).
        """
        return pulumi.get(self, "auto_regenerate_days_warning")

    @auto_regenerate_days_warning.setter
    def auto_regenerate_days_warning(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_regenerate_days_warning", value)

    @property
    @pulumi.getter(name="caIdentifier")
    def ca_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        CA identifier of the CA server for signing via SCEP.
        """
        return pulumi.get(self, "ca_identifier")

    @ca_identifier.setter
    def ca_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_identifier", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        PEM format certificate.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="cmpPath")
    def cmp_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path location inside CMP server.
        """
        return pulumi.get(self, "cmp_path")

    @cmp_path.setter
    def cmp_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmp_path", value)

    @property
    @pulumi.getter(name="cmpRegenerationMethod")
    def cmp_regeneration_method(self) -> Optional[pulumi.Input[str]]:
        """
        CMP auto-regeneration method. Valid values: `keyupate`, `renewal`.
        """
        return pulumi.get(self, "cmp_regeneration_method")

    @cmp_regeneration_method.setter
    def cmp_regeneration_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmp_regeneration_method", value)

    @property
    @pulumi.getter(name="cmpServer")
    def cmp_server(self) -> Optional[pulumi.Input[str]]:
        """
        'ADDRESS:PORT' for CMP server.
        """
        return pulumi.get(self, "cmp_server")

    @cmp_server.setter
    def cmp_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmp_server", value)

    @property
    @pulumi.getter(name="cmpServerCert")
    def cmp_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        CMP server certificate.
        """
        return pulumi.get(self, "cmp_server_cert")

    @cmp_server_cert.setter
    def cmp_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmp_server_cert", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def csr(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate Signing Request.
        """
        return pulumi.get(self, "csr")

    @csr.setter
    def csr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr", value)

    @property
    @pulumi.getter(name="enrollProtocol")
    def enroll_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate enrollment protocol.
        """
        return pulumi.get(self, "enroll_protocol")

    @enroll_protocol.setter
    def enroll_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enroll_protocol", value)

    @property
    @pulumi.getter(name="estCaId")
    def est_ca_id(self) -> Optional[pulumi.Input[str]]:
        """
        CA identifier of the CA server for signing via EST.
        """
        return pulumi.get(self, "est_ca_id")

    @est_ca_id.setter
    def est_ca_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_ca_id", value)

    @property
    @pulumi.getter(name="estClientCert")
    def est_client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate used to authenticate this FortiGate to EST server.
        """
        return pulumi.get(self, "est_client_cert")

    @est_client_cert.setter
    def est_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_client_cert", value)

    @property
    @pulumi.getter(name="estHttpPassword")
    def est_http_password(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP Authentication password for signing via EST.
        """
        return pulumi.get(self, "est_http_password")

    @est_http_password.setter
    def est_http_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_http_password", value)

    @property
    @pulumi.getter(name="estHttpUsername")
    def est_http_username(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP Authentication username for signing via EST.
        """
        return pulumi.get(self, "est_http_username")

    @est_http_username.setter
    def est_http_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_http_username", value)

    @property
    @pulumi.getter(name="estServer")
    def est_server(self) -> Optional[pulumi.Input[str]]:
        """
        Address and port for EST server (e.g. https://example.com:1234).
        """
        return pulumi.get(self, "est_server")

    @est_server.setter
    def est_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_server", value)

    @property
    @pulumi.getter(name="estServerCert")
    def est_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        EST server's certificate must be verifiable by this certificate to be authenticated.
        """
        return pulumi.get(self, "est_server_cert")

    @est_server_cert.setter
    def est_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_server_cert", value)

    @property
    @pulumi.getter(name="estSrpPassword")
    def est_srp_password(self) -> Optional[pulumi.Input[str]]:
        """
        EST SRP authentication password.
        """
        return pulumi.get(self, "est_srp_password")

    @est_srp_password.setter
    def est_srp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_srp_password", value)

    @property
    @pulumi.getter(name="estSrpUsername")
    def est_srp_username(self) -> Optional[pulumi.Input[str]]:
        """
        EST SRP authentication username.
        """
        return pulumi.get(self, "est_srp_username")

    @est_srp_username.setter
    def est_srp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "est_srp_username", value)

    @property
    @pulumi.getter(name="ikeLocalid")
    def ike_localid(self) -> Optional[pulumi.Input[str]]:
        """
        Local ID the FortiGate uses for authentication as a VPN client.
        """
        return pulumi.get(self, "ike_localid")

    @ike_localid.setter
    def ike_localid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_localid", value)

    @property
    @pulumi.getter(name="ikeLocalidType")
    def ike_localid_type(self) -> Optional[pulumi.Input[str]]:
        """
        IKE local ID type. Valid values: `asn1dn`, `fqdn`.
        """
        return pulumi.get(self, "ike_localid_type")

    @ike_localid_type.setter
    def ike_localid_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_localid_type", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[int]]:
        """
        Time at which certificate was last updated.
        """
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameEncoding")
    def name_encoding(self) -> Optional[pulumi.Input[str]]:
        """
        Name encoding method for auto-regeneration. Valid values: `printable`, `utf8`.
        """
        return pulumi.get(self, "name_encoding")

    @name_encoding.setter
    def name_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_encoding", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password as a PEM file.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        PEM format key, encrypted with a password.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="privateKeyRetain")
    def private_key_retain(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable retention of private key during SCEP renewal (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "private_key_retain")

    @private_key_retain.setter
    def private_key_retain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_retain", value)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        """
        Either a global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
        """
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter(name="scepPassword")
    def scep_password(self) -> Optional[pulumi.Input[str]]:
        """
        SCEP server challenge password for auto-regeneration.
        """
        return pulumi.get(self, "scep_password")

    @scep_password.setter
    def scep_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scep_password", value)

    @property
    @pulumi.getter(name="scepUrl")
    def scep_url(self) -> Optional[pulumi.Input[str]]:
        """
        SCEP server URL.
        """
        return pulumi.get(self, "scep_url")

    @scep_url.setter
    def scep_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scep_url", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate source type.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address for communications to the SCEP server.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate Signing Request State.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Local(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acme_ca_url: Optional[pulumi.Input[str]] = None,
                 acme_domain: Optional[pulumi.Input[str]] = None,
                 acme_email: Optional[pulumi.Input[str]] = None,
                 acme_renew_window: Optional[pulumi.Input[int]] = None,
                 acme_rsa_key_size: Optional[pulumi.Input[int]] = None,
                 auto_regenerate_days: Optional[pulumi.Input[int]] = None,
                 auto_regenerate_days_warning: Optional[pulumi.Input[int]] = None,
                 ca_identifier: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 cmp_path: Optional[pulumi.Input[str]] = None,
                 cmp_regeneration_method: Optional[pulumi.Input[str]] = None,
                 cmp_server: Optional[pulumi.Input[str]] = None,
                 cmp_server_cert: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 csr: Optional[pulumi.Input[str]] = None,
                 enroll_protocol: Optional[pulumi.Input[str]] = None,
                 est_ca_id: Optional[pulumi.Input[str]] = None,
                 est_client_cert: Optional[pulumi.Input[str]] = None,
                 est_http_password: Optional[pulumi.Input[str]] = None,
                 est_http_username: Optional[pulumi.Input[str]] = None,
                 est_server: Optional[pulumi.Input[str]] = None,
                 est_server_cert: Optional[pulumi.Input[str]] = None,
                 est_srp_password: Optional[pulumi.Input[str]] = None,
                 est_srp_username: Optional[pulumi.Input[str]] = None,
                 ike_localid: Optional[pulumi.Input[str]] = None,
                 ike_localid_type: Optional[pulumi.Input[str]] = None,
                 last_updated: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_encoding: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 private_key_retain: Optional[pulumi.Input[str]] = None,
                 range: Optional[pulumi.Input[str]] = None,
                 scep_password: Optional[pulumi.Input[str]] = None,
                 scep_url: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Local keys and certificates.

        ## Import

        VpnCertificate Local can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:vpn/certificate/local:Local labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:vpn/certificate/local:Local labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acme_ca_url: The URL for the ACME CA server (Let's Encrypt is the default provider).
        :param pulumi.Input[str] acme_domain: A valid domain that resolves to this Fortigate.
        :param pulumi.Input[str] acme_email: Contact email address that is required by some CAs like LetsEncrypt.
        :param pulumi.Input[int] acme_renew_window: Beginning of the renewal window (in days before certificate expiration, 30 by default).
        :param pulumi.Input[int] acme_rsa_key_size: Length of the RSA private key of the generated cert (Minimum 2048 bits).
        :param pulumi.Input[int] auto_regenerate_days: Number of days to wait before expiry of an updated local certificate is requested (0 = disabled).
        :param pulumi.Input[int] auto_regenerate_days_warning: Number of days to wait before an expiry warning message is generated (0 = disabled).
        :param pulumi.Input[str] ca_identifier: CA identifier of the CA server for signing via SCEP.
        :param pulumi.Input[str] certificate: PEM format certificate.
        :param pulumi.Input[str] cmp_path: Path location inside CMP server.
        :param pulumi.Input[str] cmp_regeneration_method: CMP auto-regeneration method. Valid values: `keyupate`, `renewal`.
        :param pulumi.Input[str] cmp_server: 'ADDRESS:PORT' for CMP server.
        :param pulumi.Input[str] cmp_server_cert: CMP server certificate.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] csr: Certificate Signing Request.
        :param pulumi.Input[str] enroll_protocol: Certificate enrollment protocol.
        :param pulumi.Input[str] est_ca_id: CA identifier of the CA server for signing via EST.
        :param pulumi.Input[str] est_client_cert: Certificate used to authenticate this FortiGate to EST server.
        :param pulumi.Input[str] est_http_password: HTTP Authentication password for signing via EST.
        :param pulumi.Input[str] est_http_username: HTTP Authentication username for signing via EST.
        :param pulumi.Input[str] est_server: Address and port for EST server (e.g. https://example.com:1234).
        :param pulumi.Input[str] est_server_cert: EST server's certificate must be verifiable by this certificate to be authenticated.
        :param pulumi.Input[str] est_srp_password: EST SRP authentication password.
        :param pulumi.Input[str] est_srp_username: EST SRP authentication username.
        :param pulumi.Input[str] ike_localid: Local ID the FortiGate uses for authentication as a VPN client.
        :param pulumi.Input[str] ike_localid_type: IKE local ID type. Valid values: `asn1dn`, `fqdn`.
        :param pulumi.Input[int] last_updated: Time at which certificate was last updated.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] name_encoding: Name encoding method for auto-regeneration. Valid values: `printable`, `utf8`.
        :param pulumi.Input[str] password: Password as a PEM file.
        :param pulumi.Input[str] private_key: PEM format key, encrypted with a password.
        :param pulumi.Input[str] private_key_retain: Enable/disable retention of private key during SCEP renewal (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] range: Either a global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
        :param pulumi.Input[str] scep_password: SCEP server challenge password for auto-regeneration.
        :param pulumi.Input[str] scep_url: SCEP server URL.
        :param pulumi.Input[str] source: Certificate source type.
        :param pulumi.Input[str] source_ip: Source IP address for communications to the SCEP server.
        :param pulumi.Input[str] state: Certificate Signing Request State.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LocalArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Local keys and certificates.

        ## Import

        VpnCertificate Local can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:vpn/certificate/local:Local labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:vpn/certificate/local:Local labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param LocalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LocalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acme_ca_url: Optional[pulumi.Input[str]] = None,
                 acme_domain: Optional[pulumi.Input[str]] = None,
                 acme_email: Optional[pulumi.Input[str]] = None,
                 acme_renew_window: Optional[pulumi.Input[int]] = None,
                 acme_rsa_key_size: Optional[pulumi.Input[int]] = None,
                 auto_regenerate_days: Optional[pulumi.Input[int]] = None,
                 auto_regenerate_days_warning: Optional[pulumi.Input[int]] = None,
                 ca_identifier: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 cmp_path: Optional[pulumi.Input[str]] = None,
                 cmp_regeneration_method: Optional[pulumi.Input[str]] = None,
                 cmp_server: Optional[pulumi.Input[str]] = None,
                 cmp_server_cert: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 csr: Optional[pulumi.Input[str]] = None,
                 enroll_protocol: Optional[pulumi.Input[str]] = None,
                 est_ca_id: Optional[pulumi.Input[str]] = None,
                 est_client_cert: Optional[pulumi.Input[str]] = None,
                 est_http_password: Optional[pulumi.Input[str]] = None,
                 est_http_username: Optional[pulumi.Input[str]] = None,
                 est_server: Optional[pulumi.Input[str]] = None,
                 est_server_cert: Optional[pulumi.Input[str]] = None,
                 est_srp_password: Optional[pulumi.Input[str]] = None,
                 est_srp_username: Optional[pulumi.Input[str]] = None,
                 ike_localid: Optional[pulumi.Input[str]] = None,
                 ike_localid_type: Optional[pulumi.Input[str]] = None,
                 last_updated: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_encoding: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 private_key_retain: Optional[pulumi.Input[str]] = None,
                 range: Optional[pulumi.Input[str]] = None,
                 scep_password: Optional[pulumi.Input[str]] = None,
                 scep_url: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LocalArgs.__new__(LocalArgs)

            __props__.__dict__["acme_ca_url"] = acme_ca_url
            __props__.__dict__["acme_domain"] = acme_domain
            __props__.__dict__["acme_email"] = acme_email
            __props__.__dict__["acme_renew_window"] = acme_renew_window
            __props__.__dict__["acme_rsa_key_size"] = acme_rsa_key_size
            __props__.__dict__["auto_regenerate_days"] = auto_regenerate_days
            __props__.__dict__["auto_regenerate_days_warning"] = auto_regenerate_days_warning
            __props__.__dict__["ca_identifier"] = ca_identifier
            __props__.__dict__["certificate"] = None if certificate is None else pulumi.Output.secret(certificate)
            __props__.__dict__["cmp_path"] = cmp_path
            __props__.__dict__["cmp_regeneration_method"] = cmp_regeneration_method
            __props__.__dict__["cmp_server"] = cmp_server
            __props__.__dict__["cmp_server_cert"] = cmp_server_cert
            __props__.__dict__["comments"] = comments
            __props__.__dict__["csr"] = csr
            __props__.__dict__["enroll_protocol"] = enroll_protocol
            __props__.__dict__["est_ca_id"] = est_ca_id
            __props__.__dict__["est_client_cert"] = est_client_cert
            __props__.__dict__["est_http_password"] = est_http_password
            __props__.__dict__["est_http_username"] = est_http_username
            __props__.__dict__["est_server"] = est_server
            __props__.__dict__["est_server_cert"] = est_server_cert
            __props__.__dict__["est_srp_password"] = est_srp_password
            __props__.__dict__["est_srp_username"] = est_srp_username
            __props__.__dict__["ike_localid"] = ike_localid
            __props__.__dict__["ike_localid_type"] = ike_localid_type
            __props__.__dict__["last_updated"] = last_updated
            __props__.__dict__["name"] = name
            __props__.__dict__["name_encoding"] = name_encoding
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["private_key"] = None if private_key is None else pulumi.Output.secret(private_key)
            __props__.__dict__["private_key_retain"] = private_key_retain
            __props__.__dict__["range"] = range
            __props__.__dict__["scep_password"] = None if scep_password is None else pulumi.Output.secret(scep_password)
            __props__.__dict__["scep_url"] = scep_url
            __props__.__dict__["source"] = source
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["state"] = state
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["certificate", "password", "privateKey", "scepPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Local, __self__).__init__(
            'fortios:vpn/certificate/local:Local',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acme_ca_url: Optional[pulumi.Input[str]] = None,
            acme_domain: Optional[pulumi.Input[str]] = None,
            acme_email: Optional[pulumi.Input[str]] = None,
            acme_renew_window: Optional[pulumi.Input[int]] = None,
            acme_rsa_key_size: Optional[pulumi.Input[int]] = None,
            auto_regenerate_days: Optional[pulumi.Input[int]] = None,
            auto_regenerate_days_warning: Optional[pulumi.Input[int]] = None,
            ca_identifier: Optional[pulumi.Input[str]] = None,
            certificate: Optional[pulumi.Input[str]] = None,
            cmp_path: Optional[pulumi.Input[str]] = None,
            cmp_regeneration_method: Optional[pulumi.Input[str]] = None,
            cmp_server: Optional[pulumi.Input[str]] = None,
            cmp_server_cert: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            csr: Optional[pulumi.Input[str]] = None,
            enroll_protocol: Optional[pulumi.Input[str]] = None,
            est_ca_id: Optional[pulumi.Input[str]] = None,
            est_client_cert: Optional[pulumi.Input[str]] = None,
            est_http_password: Optional[pulumi.Input[str]] = None,
            est_http_username: Optional[pulumi.Input[str]] = None,
            est_server: Optional[pulumi.Input[str]] = None,
            est_server_cert: Optional[pulumi.Input[str]] = None,
            est_srp_password: Optional[pulumi.Input[str]] = None,
            est_srp_username: Optional[pulumi.Input[str]] = None,
            ike_localid: Optional[pulumi.Input[str]] = None,
            ike_localid_type: Optional[pulumi.Input[str]] = None,
            last_updated: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            name_encoding: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            private_key: Optional[pulumi.Input[str]] = None,
            private_key_retain: Optional[pulumi.Input[str]] = None,
            range: Optional[pulumi.Input[str]] = None,
            scep_password: Optional[pulumi.Input[str]] = None,
            scep_url: Optional[pulumi.Input[str]] = None,
            source: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Local':
        """
        Get an existing Local resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acme_ca_url: The URL for the ACME CA server (Let's Encrypt is the default provider).
        :param pulumi.Input[str] acme_domain: A valid domain that resolves to this Fortigate.
        :param pulumi.Input[str] acme_email: Contact email address that is required by some CAs like LetsEncrypt.
        :param pulumi.Input[int] acme_renew_window: Beginning of the renewal window (in days before certificate expiration, 30 by default).
        :param pulumi.Input[int] acme_rsa_key_size: Length of the RSA private key of the generated cert (Minimum 2048 bits).
        :param pulumi.Input[int] auto_regenerate_days: Number of days to wait before expiry of an updated local certificate is requested (0 = disabled).
        :param pulumi.Input[int] auto_regenerate_days_warning: Number of days to wait before an expiry warning message is generated (0 = disabled).
        :param pulumi.Input[str] ca_identifier: CA identifier of the CA server for signing via SCEP.
        :param pulumi.Input[str] certificate: PEM format certificate.
        :param pulumi.Input[str] cmp_path: Path location inside CMP server.
        :param pulumi.Input[str] cmp_regeneration_method: CMP auto-regeneration method. Valid values: `keyupate`, `renewal`.
        :param pulumi.Input[str] cmp_server: 'ADDRESS:PORT' for CMP server.
        :param pulumi.Input[str] cmp_server_cert: CMP server certificate.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] csr: Certificate Signing Request.
        :param pulumi.Input[str] enroll_protocol: Certificate enrollment protocol.
        :param pulumi.Input[str] est_ca_id: CA identifier of the CA server for signing via EST.
        :param pulumi.Input[str] est_client_cert: Certificate used to authenticate this FortiGate to EST server.
        :param pulumi.Input[str] est_http_password: HTTP Authentication password for signing via EST.
        :param pulumi.Input[str] est_http_username: HTTP Authentication username for signing via EST.
        :param pulumi.Input[str] est_server: Address and port for EST server (e.g. https://example.com:1234).
        :param pulumi.Input[str] est_server_cert: EST server's certificate must be verifiable by this certificate to be authenticated.
        :param pulumi.Input[str] est_srp_password: EST SRP authentication password.
        :param pulumi.Input[str] est_srp_username: EST SRP authentication username.
        :param pulumi.Input[str] ike_localid: Local ID the FortiGate uses for authentication as a VPN client.
        :param pulumi.Input[str] ike_localid_type: IKE local ID type. Valid values: `asn1dn`, `fqdn`.
        :param pulumi.Input[int] last_updated: Time at which certificate was last updated.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] name_encoding: Name encoding method for auto-regeneration. Valid values: `printable`, `utf8`.
        :param pulumi.Input[str] password: Password as a PEM file.
        :param pulumi.Input[str] private_key: PEM format key, encrypted with a password.
        :param pulumi.Input[str] private_key_retain: Enable/disable retention of private key during SCEP renewal (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] range: Either a global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
        :param pulumi.Input[str] scep_password: SCEP server challenge password for auto-regeneration.
        :param pulumi.Input[str] scep_url: SCEP server URL.
        :param pulumi.Input[str] source: Certificate source type.
        :param pulumi.Input[str] source_ip: Source IP address for communications to the SCEP server.
        :param pulumi.Input[str] state: Certificate Signing Request State.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LocalState.__new__(_LocalState)

        __props__.__dict__["acme_ca_url"] = acme_ca_url
        __props__.__dict__["acme_domain"] = acme_domain
        __props__.__dict__["acme_email"] = acme_email
        __props__.__dict__["acme_renew_window"] = acme_renew_window
        __props__.__dict__["acme_rsa_key_size"] = acme_rsa_key_size
        __props__.__dict__["auto_regenerate_days"] = auto_regenerate_days
        __props__.__dict__["auto_regenerate_days_warning"] = auto_regenerate_days_warning
        __props__.__dict__["ca_identifier"] = ca_identifier
        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["cmp_path"] = cmp_path
        __props__.__dict__["cmp_regeneration_method"] = cmp_regeneration_method
        __props__.__dict__["cmp_server"] = cmp_server
        __props__.__dict__["cmp_server_cert"] = cmp_server_cert
        __props__.__dict__["comments"] = comments
        __props__.__dict__["csr"] = csr
        __props__.__dict__["enroll_protocol"] = enroll_protocol
        __props__.__dict__["est_ca_id"] = est_ca_id
        __props__.__dict__["est_client_cert"] = est_client_cert
        __props__.__dict__["est_http_password"] = est_http_password
        __props__.__dict__["est_http_username"] = est_http_username
        __props__.__dict__["est_server"] = est_server
        __props__.__dict__["est_server_cert"] = est_server_cert
        __props__.__dict__["est_srp_password"] = est_srp_password
        __props__.__dict__["est_srp_username"] = est_srp_username
        __props__.__dict__["ike_localid"] = ike_localid
        __props__.__dict__["ike_localid_type"] = ike_localid_type
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["name"] = name
        __props__.__dict__["name_encoding"] = name_encoding
        __props__.__dict__["password"] = password
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["private_key_retain"] = private_key_retain
        __props__.__dict__["range"] = range
        __props__.__dict__["scep_password"] = scep_password
        __props__.__dict__["scep_url"] = scep_url
        __props__.__dict__["source"] = source
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["state"] = state
        __props__.__dict__["vdomparam"] = vdomparam
        return Local(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acmeCaUrl")
    def acme_ca_url(self) -> pulumi.Output[str]:
        """
        The URL for the ACME CA server (Let's Encrypt is the default provider).
        """
        return pulumi.get(self, "acme_ca_url")

    @property
    @pulumi.getter(name="acmeDomain")
    def acme_domain(self) -> pulumi.Output[str]:
        """
        A valid domain that resolves to this Fortigate.
        """
        return pulumi.get(self, "acme_domain")

    @property
    @pulumi.getter(name="acmeEmail")
    def acme_email(self) -> pulumi.Output[str]:
        """
        Contact email address that is required by some CAs like LetsEncrypt.
        """
        return pulumi.get(self, "acme_email")

    @property
    @pulumi.getter(name="acmeRenewWindow")
    def acme_renew_window(self) -> pulumi.Output[int]:
        """
        Beginning of the renewal window (in days before certificate expiration, 30 by default).
        """
        return pulumi.get(self, "acme_renew_window")

    @property
    @pulumi.getter(name="acmeRsaKeySize")
    def acme_rsa_key_size(self) -> pulumi.Output[int]:
        """
        Length of the RSA private key of the generated cert (Minimum 2048 bits).
        """
        return pulumi.get(self, "acme_rsa_key_size")

    @property
    @pulumi.getter(name="autoRegenerateDays")
    def auto_regenerate_days(self) -> pulumi.Output[int]:
        """
        Number of days to wait before expiry of an updated local certificate is requested (0 = disabled).
        """
        return pulumi.get(self, "auto_regenerate_days")

    @property
    @pulumi.getter(name="autoRegenerateDaysWarning")
    def auto_regenerate_days_warning(self) -> pulumi.Output[int]:
        """
        Number of days to wait before an expiry warning message is generated (0 = disabled).
        """
        return pulumi.get(self, "auto_regenerate_days_warning")

    @property
    @pulumi.getter(name="caIdentifier")
    def ca_identifier(self) -> pulumi.Output[str]:
        """
        CA identifier of the CA server for signing via SCEP.
        """
        return pulumi.get(self, "ca_identifier")

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[str]:
        """
        PEM format certificate.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="cmpPath")
    def cmp_path(self) -> pulumi.Output[str]:
        """
        Path location inside CMP server.
        """
        return pulumi.get(self, "cmp_path")

    @property
    @pulumi.getter(name="cmpRegenerationMethod")
    def cmp_regeneration_method(self) -> pulumi.Output[str]:
        """
        CMP auto-regeneration method. Valid values: `keyupate`, `renewal`.
        """
        return pulumi.get(self, "cmp_regeneration_method")

    @property
    @pulumi.getter(name="cmpServer")
    def cmp_server(self) -> pulumi.Output[str]:
        """
        'ADDRESS:PORT' for CMP server.
        """
        return pulumi.get(self, "cmp_server")

    @property
    @pulumi.getter(name="cmpServerCert")
    def cmp_server_cert(self) -> pulumi.Output[str]:
        """
        CMP server certificate.
        """
        return pulumi.get(self, "cmp_server_cert")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[str]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def csr(self) -> pulumi.Output[str]:
        """
        Certificate Signing Request.
        """
        return pulumi.get(self, "csr")

    @property
    @pulumi.getter(name="enrollProtocol")
    def enroll_protocol(self) -> pulumi.Output[str]:
        """
        Certificate enrollment protocol.
        """
        return pulumi.get(self, "enroll_protocol")

    @property
    @pulumi.getter(name="estCaId")
    def est_ca_id(self) -> pulumi.Output[str]:
        """
        CA identifier of the CA server for signing via EST.
        """
        return pulumi.get(self, "est_ca_id")

    @property
    @pulumi.getter(name="estClientCert")
    def est_client_cert(self) -> pulumi.Output[str]:
        """
        Certificate used to authenticate this FortiGate to EST server.
        """
        return pulumi.get(self, "est_client_cert")

    @property
    @pulumi.getter(name="estHttpPassword")
    def est_http_password(self) -> pulumi.Output[str]:
        """
        HTTP Authentication password for signing via EST.
        """
        return pulumi.get(self, "est_http_password")

    @property
    @pulumi.getter(name="estHttpUsername")
    def est_http_username(self) -> pulumi.Output[str]:
        """
        HTTP Authentication username for signing via EST.
        """
        return pulumi.get(self, "est_http_username")

    @property
    @pulumi.getter(name="estServer")
    def est_server(self) -> pulumi.Output[str]:
        """
        Address and port for EST server (e.g. https://example.com:1234).
        """
        return pulumi.get(self, "est_server")

    @property
    @pulumi.getter(name="estServerCert")
    def est_server_cert(self) -> pulumi.Output[str]:
        """
        EST server's certificate must be verifiable by this certificate to be authenticated.
        """
        return pulumi.get(self, "est_server_cert")

    @property
    @pulumi.getter(name="estSrpPassword")
    def est_srp_password(self) -> pulumi.Output[str]:
        """
        EST SRP authentication password.
        """
        return pulumi.get(self, "est_srp_password")

    @property
    @pulumi.getter(name="estSrpUsername")
    def est_srp_username(self) -> pulumi.Output[str]:
        """
        EST SRP authentication username.
        """
        return pulumi.get(self, "est_srp_username")

    @property
    @pulumi.getter(name="ikeLocalid")
    def ike_localid(self) -> pulumi.Output[str]:
        """
        Local ID the FortiGate uses for authentication as a VPN client.
        """
        return pulumi.get(self, "ike_localid")

    @property
    @pulumi.getter(name="ikeLocalidType")
    def ike_localid_type(self) -> pulumi.Output[str]:
        """
        IKE local ID type. Valid values: `asn1dn`, `fqdn`.
        """
        return pulumi.get(self, "ike_localid_type")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[int]:
        """
        Time at which certificate was last updated.
        """
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameEncoding")
    def name_encoding(self) -> pulumi.Output[str]:
        """
        Name encoding method for auto-regeneration. Valid values: `printable`, `utf8`.
        """
        return pulumi.get(self, "name_encoding")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password as a PEM file.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[str]:
        """
        PEM format key, encrypted with a password.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyRetain")
    def private_key_retain(self) -> pulumi.Output[str]:
        """
        Enable/disable retention of private key during SCEP renewal (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "private_key_retain")

    @property
    @pulumi.getter
    def range(self) -> pulumi.Output[str]:
        """
        Either a global or VDOM IP address range for the certificate. Valid values: `global`, `vdom`.
        """
        return pulumi.get(self, "range")

    @property
    @pulumi.getter(name="scepPassword")
    def scep_password(self) -> pulumi.Output[Optional[str]]:
        """
        SCEP server challenge password for auto-regeneration.
        """
        return pulumi.get(self, "scep_password")

    @property
    @pulumi.getter(name="scepUrl")
    def scep_url(self) -> pulumi.Output[str]:
        """
        SCEP server URL.
        """
        return pulumi.get(self, "scep_url")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        """
        Certificate source type.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        """
        Source IP address for communications to the SCEP server.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Certificate Signing Request State.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

