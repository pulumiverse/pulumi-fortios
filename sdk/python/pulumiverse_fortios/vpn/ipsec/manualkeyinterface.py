# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = ['ManualkeyinterfaceArgs', 'Manualkeyinterface']

@pulumi.input_type
class ManualkeyinterfaceArgs:
    def __init__(__self__, *,
                 auth_alg: pulumi.Input[str],
                 enc_alg: pulumi.Input[str],
                 interface: pulumi.Input[str],
                 remote_gw: pulumi.Input[str],
                 remote_gw6: pulumi.Input[str],
                 addr_type: Optional[pulumi.Input[str]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 local_spi: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 remote_spi: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Manualkeyinterface resource.
        :param pulumi.Input[str] auth_alg: Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        :param pulumi.Input[str] enc_alg: Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
        :param pulumi.Input[str] interface: Name of the physical, aggregate, or VLAN interface.
        :param pulumi.Input[str] remote_gw: IPv4 address of the remote gateway's external interface.
        :param pulumi.Input[str] remote_gw6: Remote IPv6 address of VPN gateway.
        :param pulumi.Input[str] addr_type: IP version to use for IP packets. Valid values: `4`, `6`.
        :param pulumi.Input[str] auth_key: Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
        :param pulumi.Input[str] enc_key: Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
        :param pulumi.Input[str] ip_version: IP version to use for VPN interface. Valid values: `4`, `6`.
        :param pulumi.Input[str] local_gw: IPv4 address of the local gateway's external interface.
        :param pulumi.Input[str] local_gw6: Local IPv6 address of VPN gateway.
        :param pulumi.Input[str] local_spi: Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
        :param pulumi.Input[str] name: IPsec tunnel name.
        :param pulumi.Input[str] npu_offload: Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_spi: Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "auth_alg", auth_alg)
        pulumi.set(__self__, "enc_alg", enc_alg)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "remote_gw", remote_gw)
        pulumi.set(__self__, "remote_gw6", remote_gw6)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if local_gw is not None:
            pulumi.set(__self__, "local_gw", local_gw)
        if local_gw6 is not None:
            pulumi.set(__self__, "local_gw6", local_gw6)
        if local_spi is not None:
            pulumi.set(__self__, "local_spi", local_spi)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if npu_offload is not None:
            pulumi.set(__self__, "npu_offload", npu_offload)
        if remote_spi is not None:
            pulumi.set(__self__, "remote_spi", remote_spi)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="authAlg")
    def auth_alg(self) -> pulumi.Input[str]:
        """
        Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        """
        return pulumi.get(self, "auth_alg")

    @auth_alg.setter
    def auth_alg(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_alg", value)

    @property
    @pulumi.getter(name="encAlg")
    def enc_alg(self) -> pulumi.Input[str]:
        """
        Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
        """
        return pulumi.get(self, "enc_alg")

    @enc_alg.setter
    def enc_alg(self, value: pulumi.Input[str]):
        pulumi.set(self, "enc_alg", value)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        """
        Name of the physical, aggregate, or VLAN interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> pulumi.Input[str]:
        """
        IPv4 address of the remote gateway's external interface.
        """
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> pulumi.Input[str]:
        """
        Remote IPv6 address of VPN gateway.
        """
        return pulumi.get(self, "remote_gw6")

    @remote_gw6.setter
    def remote_gw6(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_gw6", value)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        IP version to use for IP packets. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        """
        Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
        """
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[pulumi.Input[str]]:
        """
        Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
        """
        return pulumi.get(self, "enc_key")

    @enc_key.setter
    def enc_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_key", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        IP version to use for VPN interface. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the local gateway's external interface.
        """
        return pulumi.get(self, "local_gw")

    @local_gw.setter
    def local_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw", value)

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        Local IPv6 address of VPN gateway.
        """
        return pulumi.get(self, "local_gw6")

    @local_gw6.setter
    def local_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw6", value)

    @property
    @pulumi.getter(name="localSpi")
    def local_spi(self) -> Optional[pulumi.Input[str]]:
        """
        Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
        """
        return pulumi.get(self, "local_spi")

    @local_spi.setter
    def local_spi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_spi", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec tunnel name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "npu_offload")

    @npu_offload.setter
    def npu_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npu_offload", value)

    @property
    @pulumi.getter(name="remoteSpi")
    def remote_spi(self) -> Optional[pulumi.Input[str]]:
        """
        Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
        """
        return pulumi.get(self, "remote_spi")

    @remote_spi.setter
    def remote_spi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_spi", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ManualkeyinterfaceState:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 auth_alg: Optional[pulumi.Input[str]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_alg: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 local_spi: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 remote_spi: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Manualkeyinterface resources.
        :param pulumi.Input[str] addr_type: IP version to use for IP packets. Valid values: `4`, `6`.
        :param pulumi.Input[str] auth_alg: Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        :param pulumi.Input[str] auth_key: Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
        :param pulumi.Input[str] enc_alg: Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
        :param pulumi.Input[str] enc_key: Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
        :param pulumi.Input[str] interface: Name of the physical, aggregate, or VLAN interface.
        :param pulumi.Input[str] ip_version: IP version to use for VPN interface. Valid values: `4`, `6`.
        :param pulumi.Input[str] local_gw: IPv4 address of the local gateway's external interface.
        :param pulumi.Input[str] local_gw6: Local IPv6 address of VPN gateway.
        :param pulumi.Input[str] local_spi: Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
        :param pulumi.Input[str] name: IPsec tunnel name.
        :param pulumi.Input[str] npu_offload: Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_gw: IPv4 address of the remote gateway's external interface.
        :param pulumi.Input[str] remote_gw6: Remote IPv6 address of VPN gateway.
        :param pulumi.Input[str] remote_spi: Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if auth_alg is not None:
            pulumi.set(__self__, "auth_alg", auth_alg)
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_alg is not None:
            pulumi.set(__self__, "enc_alg", enc_alg)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if local_gw is not None:
            pulumi.set(__self__, "local_gw", local_gw)
        if local_gw6 is not None:
            pulumi.set(__self__, "local_gw6", local_gw6)
        if local_spi is not None:
            pulumi.set(__self__, "local_spi", local_spi)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if npu_offload is not None:
            pulumi.set(__self__, "npu_offload", npu_offload)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if remote_gw6 is not None:
            pulumi.set(__self__, "remote_gw6", remote_gw6)
        if remote_spi is not None:
            pulumi.set(__self__, "remote_spi", remote_spi)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        IP version to use for IP packets. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="authAlg")
    def auth_alg(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        """
        return pulumi.get(self, "auth_alg")

    @auth_alg.setter
    def auth_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_alg", value)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        """
        Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
        """
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="encAlg")
    def enc_alg(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
        """
        return pulumi.get(self, "enc_alg")

    @enc_alg.setter
    def enc_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_alg", value)

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[pulumi.Input[str]]:
        """
        Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
        """
        return pulumi.get(self, "enc_key")

    @enc_key.setter
    def enc_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_key", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the physical, aggregate, or VLAN interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        IP version to use for VPN interface. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the local gateway's external interface.
        """
        return pulumi.get(self, "local_gw")

    @local_gw.setter
    def local_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw", value)

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        Local IPv6 address of VPN gateway.
        """
        return pulumi.get(self, "local_gw6")

    @local_gw6.setter
    def local_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw6", value)

    @property
    @pulumi.getter(name="localSpi")
    def local_spi(self) -> Optional[pulumi.Input[str]]:
        """
        Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
        """
        return pulumi.get(self, "local_spi")

    @local_spi.setter
    def local_spi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_spi", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec tunnel name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "npu_offload")

    @npu_offload.setter
    def npu_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npu_offload", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the remote gateway's external interface.
        """
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        Remote IPv6 address of VPN gateway.
        """
        return pulumi.get(self, "remote_gw6")

    @remote_gw6.setter
    def remote_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw6", value)

    @property
    @pulumi.getter(name="remoteSpi")
    def remote_spi(self) -> Optional[pulumi.Input[str]]:
        """
        Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
        """
        return pulumi.get(self, "remote_spi")

    @remote_spi.setter
    def remote_spi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_spi", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Manualkeyinterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 auth_alg: Optional[pulumi.Input[str]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_alg: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 local_spi: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 remote_spi: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure IPsec manual keys.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.vpn.ipsec.Manualkeyinterface("trname",
            addr_type="4",
            auth_alg="null",
            auth_key="-",
            enc_alg="des",
            enc_key="CECA2184ACADAEEF",
            interface="port3",
            ip_version="4",
            local_gw="0.0.0.0",
            local_gw6="::",
            local_spi="0x100",
            remote_gw="2.2.2.2",
            remote_gw6="::",
            remote_spi="0x100")
        ```

        ## Import

        VpnIpsec ManualkeyInterface can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:vpn/ipsec/manualkeyinterface:Manualkeyinterface labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:vpn/ipsec/manualkeyinterface:Manualkeyinterface labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addr_type: IP version to use for IP packets. Valid values: `4`, `6`.
        :param pulumi.Input[str] auth_alg: Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        :param pulumi.Input[str] auth_key: Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
        :param pulumi.Input[str] enc_alg: Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
        :param pulumi.Input[str] enc_key: Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
        :param pulumi.Input[str] interface: Name of the physical, aggregate, or VLAN interface.
        :param pulumi.Input[str] ip_version: IP version to use for VPN interface. Valid values: `4`, `6`.
        :param pulumi.Input[str] local_gw: IPv4 address of the local gateway's external interface.
        :param pulumi.Input[str] local_gw6: Local IPv6 address of VPN gateway.
        :param pulumi.Input[str] local_spi: Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
        :param pulumi.Input[str] name: IPsec tunnel name.
        :param pulumi.Input[str] npu_offload: Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_gw: IPv4 address of the remote gateway's external interface.
        :param pulumi.Input[str] remote_gw6: Remote IPv6 address of VPN gateway.
        :param pulumi.Input[str] remote_spi: Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ManualkeyinterfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure IPsec manual keys.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.vpn.ipsec.Manualkeyinterface("trname",
            addr_type="4",
            auth_alg="null",
            auth_key="-",
            enc_alg="des",
            enc_key="CECA2184ACADAEEF",
            interface="port3",
            ip_version="4",
            local_gw="0.0.0.0",
            local_gw6="::",
            local_spi="0x100",
            remote_gw="2.2.2.2",
            remote_gw6="::",
            remote_spi="0x100")
        ```

        ## Import

        VpnIpsec ManualkeyInterface can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:vpn/ipsec/manualkeyinterface:Manualkeyinterface labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:vpn/ipsec/manualkeyinterface:Manualkeyinterface labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ManualkeyinterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ManualkeyinterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 auth_alg: Optional[pulumi.Input[str]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_alg: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 local_spi: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 remote_spi: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ManualkeyinterfaceArgs.__new__(ManualkeyinterfaceArgs)

            __props__.__dict__["addr_type"] = addr_type
            if auth_alg is None and not opts.urn:
                raise TypeError("Missing required property 'auth_alg'")
            __props__.__dict__["auth_alg"] = auth_alg
            __props__.__dict__["auth_key"] = None if auth_key is None else pulumi.Output.secret(auth_key)
            if enc_alg is None and not opts.urn:
                raise TypeError("Missing required property 'enc_alg'")
            __props__.__dict__["enc_alg"] = enc_alg
            __props__.__dict__["enc_key"] = None if enc_key is None else pulumi.Output.secret(enc_key)
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ip_version"] = ip_version
            __props__.__dict__["local_gw"] = local_gw
            __props__.__dict__["local_gw6"] = local_gw6
            __props__.__dict__["local_spi"] = local_spi
            __props__.__dict__["name"] = name
            __props__.__dict__["npu_offload"] = npu_offload
            if remote_gw is None and not opts.urn:
                raise TypeError("Missing required property 'remote_gw'")
            __props__.__dict__["remote_gw"] = remote_gw
            if remote_gw6 is None and not opts.urn:
                raise TypeError("Missing required property 'remote_gw6'")
            __props__.__dict__["remote_gw6"] = remote_gw6
            __props__.__dict__["remote_spi"] = remote_spi
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authKey", "encKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Manualkeyinterface, __self__).__init__(
            'fortios:vpn/ipsec/manualkeyinterface:Manualkeyinterface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addr_type: Optional[pulumi.Input[str]] = None,
            auth_alg: Optional[pulumi.Input[str]] = None,
            auth_key: Optional[pulumi.Input[str]] = None,
            enc_alg: Optional[pulumi.Input[str]] = None,
            enc_key: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ip_version: Optional[pulumi.Input[str]] = None,
            local_gw: Optional[pulumi.Input[str]] = None,
            local_gw6: Optional[pulumi.Input[str]] = None,
            local_spi: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            npu_offload: Optional[pulumi.Input[str]] = None,
            remote_gw: Optional[pulumi.Input[str]] = None,
            remote_gw6: Optional[pulumi.Input[str]] = None,
            remote_spi: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Manualkeyinterface':
        """
        Get an existing Manualkeyinterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] addr_type: IP version to use for IP packets. Valid values: `4`, `6`.
        :param pulumi.Input[str] auth_alg: Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        :param pulumi.Input[str] auth_key: Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
        :param pulumi.Input[str] enc_alg: Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
        :param pulumi.Input[str] enc_key: Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
        :param pulumi.Input[str] interface: Name of the physical, aggregate, or VLAN interface.
        :param pulumi.Input[str] ip_version: IP version to use for VPN interface. Valid values: `4`, `6`.
        :param pulumi.Input[str] local_gw: IPv4 address of the local gateway's external interface.
        :param pulumi.Input[str] local_gw6: Local IPv6 address of VPN gateway.
        :param pulumi.Input[str] local_spi: Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
        :param pulumi.Input[str] name: IPsec tunnel name.
        :param pulumi.Input[str] npu_offload: Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_gw: IPv4 address of the remote gateway's external interface.
        :param pulumi.Input[str] remote_gw6: Remote IPv6 address of VPN gateway.
        :param pulumi.Input[str] remote_spi: Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ManualkeyinterfaceState.__new__(_ManualkeyinterfaceState)

        __props__.__dict__["addr_type"] = addr_type
        __props__.__dict__["auth_alg"] = auth_alg
        __props__.__dict__["auth_key"] = auth_key
        __props__.__dict__["enc_alg"] = enc_alg
        __props__.__dict__["enc_key"] = enc_key
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["local_gw"] = local_gw
        __props__.__dict__["local_gw6"] = local_gw6
        __props__.__dict__["local_spi"] = local_spi
        __props__.__dict__["name"] = name
        __props__.__dict__["npu_offload"] = npu_offload
        __props__.__dict__["remote_gw"] = remote_gw
        __props__.__dict__["remote_gw6"] = remote_gw6
        __props__.__dict__["remote_spi"] = remote_spi
        __props__.__dict__["vdomparam"] = vdomparam
        return Manualkeyinterface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> pulumi.Output[str]:
        """
        IP version to use for IP packets. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "addr_type")

    @property
    @pulumi.getter(name="authAlg")
    def auth_alg(self) -> pulumi.Output[str]:
        """
        Authentication algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        """
        return pulumi.get(self, "auth_alg")

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> pulumi.Output[str]:
        """
        Hexadecimal authentication key in 16-digit (8-byte) segments separated by hyphens.
        """
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="encAlg")
    def enc_alg(self) -> pulumi.Output[str]:
        """
        Encryption algorithm. Must be the same for both ends of the tunnel. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`, `aria128`, `aria192`, `aria256`, `seed`.
        """
        return pulumi.get(self, "enc_alg")

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> pulumi.Output[str]:
        """
        Hexadecimal encryption key in 16-digit (8-byte) segments separated by hyphens.
        """
        return pulumi.get(self, "enc_key")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Name of the physical, aggregate, or VLAN interface.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[str]:
        """
        IP version to use for VPN interface. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> pulumi.Output[str]:
        """
        IPv4 address of the local gateway's external interface.
        """
        return pulumi.get(self, "local_gw")

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> pulumi.Output[str]:
        """
        Local IPv6 address of VPN gateway.
        """
        return pulumi.get(self, "local_gw6")

    @property
    @pulumi.getter(name="localSpi")
    def local_spi(self) -> pulumi.Output[str]:
        """
        Local SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
        """
        return pulumi.get(self, "local_spi")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        IPsec tunnel name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> pulumi.Output[str]:
        """
        Enable/disable offloading IPsec VPN manual key sessions to NPUs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "npu_offload")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> pulumi.Output[str]:
        """
        IPv4 address of the remote gateway's external interface.
        """
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> pulumi.Output[str]:
        """
        Remote IPv6 address of VPN gateway.
        """
        return pulumi.get(self, "remote_gw6")

    @property
    @pulumi.getter(name="remoteSpi")
    def remote_spi(self) -> pulumi.Output[str]:
        """
        Remote SPI, a hexadecimal 8-digit (4-byte) tag. Discerns between two traffic streams with different encryption rules.
        """
        return pulumi.get(self, "remote_spi")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

