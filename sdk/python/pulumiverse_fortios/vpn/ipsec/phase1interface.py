# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Phase1interfaceArgs', 'Phase1interface']

@pulumi.input_type
class Phase1interfaceArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str],
                 proposal: pulumi.Input[str],
                 acct_verify: Optional[pulumi.Input[str]] = None,
                 add_gw_route: Optional[pulumi.Input[str]] = None,
                 add_route: Optional[pulumi.Input[str]] = None,
                 aggregate_member: Optional[pulumi.Input[str]] = None,
                 aggregate_weight: Optional[pulumi.Input[int]] = None,
                 assign_ip: Optional[pulumi.Input[str]] = None,
                 assign_ip_from: Optional[pulumi.Input[str]] = None,
                 authmethod: Optional[pulumi.Input[str]] = None,
                 authmethod_remote: Optional[pulumi.Input[str]] = None,
                 authpasswd: Optional[pulumi.Input[str]] = None,
                 authusr: Optional[pulumi.Input[str]] = None,
                 authusrgrp: Optional[pulumi.Input[str]] = None,
                 auto_discovery_crossover: Optional[pulumi.Input[str]] = None,
                 auto_discovery_forwarder: Optional[pulumi.Input[str]] = None,
                 auto_discovery_offer_interval: Optional[pulumi.Input[int]] = None,
                 auto_discovery_psk: Optional[pulumi.Input[str]] = None,
                 auto_discovery_receiver: Optional[pulumi.Input[str]] = None,
                 auto_discovery_sender: Optional[pulumi.Input[str]] = None,
                 auto_discovery_shortcuts: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 azure_ad_autoconnect: Optional[pulumi.Input[str]] = None,
                 backup_gateways: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceBackupGatewayArgs']]]] = None,
                 banner: Optional[pulumi.Input[str]] = None,
                 cert_id_validation: Optional[pulumi.Input[str]] = None,
                 cert_trust_store: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceCertificateArgs']]]] = None,
                 childless_ike: Optional[pulumi.Input[str]] = None,
                 client_auto_negotiate: Optional[pulumi.Input[str]] = None,
                 client_keep_alive: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 default_gw: Optional[pulumi.Input[str]] = None,
                 default_gw_priority: Optional[pulumi.Input[int]] = None,
                 dev_id: Optional[pulumi.Input[str]] = None,
                 dev_id_notification: Optional[pulumi.Input[str]] = None,
                 dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
                 dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 digital_signature_auth: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dns_mode: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dpd: Optional[pulumi.Input[str]] = None,
                 dpd_retrycount: Optional[pulumi.Input[int]] = None,
                 dpd_retryinterval: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eap: Optional[pulumi.Input[str]] = None,
                 eap_cert_auth: Optional[pulumi.Input[str]] = None,
                 eap_exclude_peergrp: Optional[pulumi.Input[str]] = None,
                 eap_identity: Optional[pulumi.Input[str]] = None,
                 ems_sn_check: Optional[pulumi.Input[str]] = None,
                 encap_local_gw4: Optional[pulumi.Input[str]] = None,
                 encap_local_gw6: Optional[pulumi.Input[str]] = None,
                 encap_remote_gw4: Optional[pulumi.Input[str]] = None,
                 encap_remote_gw6: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 encapsulation_address: Optional[pulumi.Input[str]] = None,
                 enforce_unique_id: Optional[pulumi.Input[str]] = None,
                 esn: Optional[pulumi.Input[str]] = None,
                 exchange_fgt_device_id: Optional[pulumi.Input[str]] = None,
                 exchange_interface_ip: Optional[pulumi.Input[str]] = None,
                 exchange_ip_addr4: Optional[pulumi.Input[str]] = None,
                 exchange_ip_addr6: Optional[pulumi.Input[str]] = None,
                 fallback_tcp_threshold: Optional[pulumi.Input[int]] = None,
                 fec_base: Optional[pulumi.Input[int]] = None,
                 fec_codec: Optional[pulumi.Input[int]] = None,
                 fec_codec_string: Optional[pulumi.Input[str]] = None,
                 fec_egress: Optional[pulumi.Input[str]] = None,
                 fec_health_check: Optional[pulumi.Input[str]] = None,
                 fec_ingress: Optional[pulumi.Input[str]] = None,
                 fec_mapping_profile: Optional[pulumi.Input[str]] = None,
                 fec_receive_timeout: Optional[pulumi.Input[int]] = None,
                 fec_redundant: Optional[pulumi.Input[int]] = None,
                 fec_send_timeout: Optional[pulumi.Input[int]] = None,
                 fgsp_sync: Optional[pulumi.Input[str]] = None,
                 forticlient_enforcement: Optional[pulumi.Input[str]] = None,
                 fortinet_esp: Optional[pulumi.Input[str]] = None,
                 fragmentation: Optional[pulumi.Input[str]] = None,
                 fragmentation_mtu: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_authentication: Optional[pulumi.Input[str]] = None,
                 group_authentication_secret: Optional[pulumi.Input[str]] = None,
                 ha_sync_esp_seqno: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[str]] = None,
                 idle_timeoutinterval: Optional[pulumi.Input[int]] = None,
                 ike_version: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 include_local_lan: Optional[pulumi.Input[str]] = None,
                 internal_domain_lists: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceInternalDomainListArgs']]]] = None,
                 ip_delay_interval: Optional[pulumi.Input[int]] = None,
                 ip_fragmentation: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv4_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv4ExcludeRangeArgs']]]] = None,
                 ipv4_name: Optional[pulumi.Input[str]] = None,
                 ipv4_netmask: Optional[pulumi.Input[str]] = None,
                 ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv4_split_include: Optional[pulumi.Input[str]] = None,
                 ipv4_start_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv6_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv6_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv6ExcludeRangeArgs']]]] = None,
                 ipv6_name: Optional[pulumi.Input[str]] = None,
                 ipv6_prefix: Optional[pulumi.Input[int]] = None,
                 ipv6_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv6_split_include: Optional[pulumi.Input[str]] = None,
                 ipv6_start_ip: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[int]] = None,
                 keylife: Optional[pulumi.Input[int]] = None,
                 kms: Optional[pulumi.Input[str]] = None,
                 link_cost: Optional[pulumi.Input[int]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 localid: Optional[pulumi.Input[str]] = None,
                 localid_type: Optional[pulumi.Input[str]] = None,
                 loopback_asymroute: Optional[pulumi.Input[str]] = None,
                 mesh_selector_type: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mode_cfg: Optional[pulumi.Input[str]] = None,
                 mode_cfg_allow_client_selector: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 monitor_hold_down_delay: Optional[pulumi.Input[int]] = None,
                 monitor_hold_down_time: Optional[pulumi.Input[str]] = None,
                 monitor_hold_down_type: Optional[pulumi.Input[str]] = None,
                 monitor_hold_down_weekday: Optional[pulumi.Input[str]] = None,
                 monitor_min: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nattraversal: Optional[pulumi.Input[str]] = None,
                 negotiate_timeout: Optional[pulumi.Input[int]] = None,
                 net_device: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[int]] = None,
                 network_overlay: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 packet_redistribution: Optional[pulumi.Input[str]] = None,
                 passive_mode: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 peergrp: Optional[pulumi.Input[str]] = None,
                 peerid: Optional[pulumi.Input[str]] = None,
                 peertype: Optional[pulumi.Input[str]] = None,
                 ppk: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 psksecret_remote: Optional[pulumi.Input[str]] = None,
                 qkd: Optional[pulumi.Input[str]] = None,
                 qkd_profile: Optional[pulumi.Input[str]] = None,
                 reauth: Optional[pulumi.Input[str]] = None,
                 rekey: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 remotegw_ddns: Optional[pulumi.Input[str]] = None,
                 rsa_signature_format: Optional[pulumi.Input[str]] = None,
                 rsa_signature_hash_override: Optional[pulumi.Input[str]] = None,
                 save_password: Optional[pulumi.Input[str]] = None,
                 send_cert_chain: Optional[pulumi.Input[str]] = None,
                 signature_hash_alg: Optional[pulumi.Input[str]] = None,
                 split_include_service: Optional[pulumi.Input[str]] = None,
                 suite_b: Optional[pulumi.Input[str]] = None,
                 transport: Optional[pulumi.Input[str]] = None,
                 tunnel_search: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unity_support: Optional[pulumi.Input[str]] = None,
                 usrgrp: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vni: Optional[pulumi.Input[int]] = None,
                 wizard_type: Optional[pulumi.Input[str]] = None,
                 xauthtype: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Phase1interface resource.
        :param pulumi.Input[str] interface: Local physical, aggregate, or VLAN outgoing interface.
        :param pulumi.Input[str] proposal: Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        :param pulumi.Input[str] acct_verify: Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] add_gw_route: Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] add_route: Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] aggregate_member: Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] aggregate_weight: Link weight for aggregate.
        :param pulumi.Input[str] assign_ip: Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] assign_ip_from: Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
        :param pulumi.Input[str] authmethod: Authentication method. Valid values: `psk`, `signature`.
        :param pulumi.Input[str] authmethod_remote: Authentication method (remote side). Valid values: `psk`, `signature`.
        :param pulumi.Input[str] authpasswd: XAuth password (max 35 characters).
        :param pulumi.Input[str] authusr: XAuth user name.
        :param pulumi.Input[str] authusrgrp: Authentication user group.
        :param pulumi.Input[str] auto_discovery_crossover: Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
        :param pulumi.Input[str] auto_discovery_forwarder: Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_discovery_offer_interval: Interval between shortcut offer messages in seconds (1 - 300, default = 5).
        :param pulumi.Input[str] auto_discovery_psk: Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_receiver: Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_sender: Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_shortcuts: Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
        :param pulumi.Input[str] auto_negotiate: Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] azure_ad_autoconnect: Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['Phase1interfaceBackupGatewayArgs']]] backup_gateways: Instruct unity clients about the backup gateway address(es). The structure of `backup_gateway` block is documented below.
        :param pulumi.Input[str] banner: Message that unity client should display after connecting.
        :param pulumi.Input[str] cert_id_validation: Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cert_trust_store: CA certificate trust store. Valid values: `local`, `ems`.
        :param pulumi.Input[Sequence[pulumi.Input['Phase1interfaceCertificateArgs']]] certificates: The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
        :param pulumi.Input[str] childless_ike: Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] client_auto_negotiate: Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] client_keep_alive: Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] default_gw: IPv4 address of default route gateway to use for traffic exiting the interface.
        :param pulumi.Input[int] default_gw_priority: Priority for default gateway route. A higher priority number signifies a less preferred route.
        :param pulumi.Input[str] dev_id: Device ID carried by the device ID notification.
        :param pulumi.Input[str] dev_id_notification: Enable/disable device ID notification. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp6_ra_linkaddr: Relay agent IPv6 link address to use in DHCP6 requests.
        :param pulumi.Input[str] dhcp_ra_giaddr: Relay agent gateway IP address to use in the giaddr field of DHCP requests.
        :param pulumi.Input[str] dhgrp: DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        :param pulumi.Input[str] digital_signature_auth: Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] distance: Distance for routes added by IKE (1 - 255).
        :param pulumi.Input[str] dns_mode: DNS server mode. Valid values: `manual`, `auto`.
        :param pulumi.Input[str] domain: Instruct unity clients about the default DNS domain.
        :param pulumi.Input[str] dpd: Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
        :param pulumi.Input[int] dpd_retrycount: Number of DPD retry attempts.
        :param pulumi.Input[str] dpd_retryinterval: DPD retry interval.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] eap: Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] eap_cert_auth: Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] eap_exclude_peergrp: Peer group excluded from EAP authentication.
        :param pulumi.Input[str] eap_identity: IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
        :param pulumi.Input[str] ems_sn_check: Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] encap_local_gw4: Local IPv4 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encap_local_gw6: Local IPv6 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encap_remote_gw4: Remote IPv4 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encap_remote_gw6: Remote IPv6 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encapsulation: Enable/disable GRE/VXLAN encapsulation.
        :param pulumi.Input[str] encapsulation_address: Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
        :param pulumi.Input[str] enforce_unique_id: Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
        :param pulumi.Input[str] esn: Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
        :param pulumi.Input[str] exchange_fgt_device_id: Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] exchange_interface_ip: Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] exchange_ip_addr4: IPv4 address to exchange with peers.
        :param pulumi.Input[str] exchange_ip_addr6: IPv6 address to exchange with peers
        :param pulumi.Input[int] fallback_tcp_threshold: Timeout in seconds before falling back IKE/IPsec traffic to tcp.
        :param pulumi.Input[int] fec_base: Number of base Forward Error Correction packets (1 - 100).
        :param pulumi.Input[int] fec_codec: ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
        :param pulumi.Input[str] fec_codec_string: Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
        :param pulumi.Input[str] fec_egress: Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fec_health_check: SD-WAN health check.
        :param pulumi.Input[str] fec_ingress: Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fec_mapping_profile: Forward Error Correction (FEC) mapping profile.
        :param pulumi.Input[int] fec_receive_timeout: Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
        :param pulumi.Input[int] fec_redundant: Number of redundant Forward Error Correction packets (1 - 100).
        :param pulumi.Input[int] fec_send_timeout: Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
        :param pulumi.Input[str] fgsp_sync: Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_enforcement: Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortinet_esp: Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fragmentation: Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fragmentation_mtu: IKE fragmentation MTU (500 - 16000).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_authentication: Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] group_authentication_secret: Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
        :param pulumi.Input[str] ha_sync_esp_seqno: Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] idle_timeout: Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] idle_timeoutinterval: IPsec tunnel idle timeout in minutes (5 - 43200).
        :param pulumi.Input[str] ike_version: IKE protocol version. Valid values: `1`, `2`.
        :param pulumi.Input[str] inbound_dscp_copy: Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] include_local_lan: Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['Phase1interfaceInternalDomainListArgs']]] internal_domain_lists: One or more internal domain names in quotes separated by spaces. The structure of `internal_domain_list` block is documented below.
        :param pulumi.Input[int] ip_delay_interval: IP address reuse delay interval in seconds (0 - 28800).
        :param pulumi.Input[str] ip_fragmentation: Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
        :param pulumi.Input[str] ip_version: IP version to use for VPN interface. Valid values: `4`, `6`.
        :param pulumi.Input[str] ipv4_dns_server1: IPv4 DNS server 1.
        :param pulumi.Input[str] ipv4_dns_server2: IPv4 DNS server 2.
        :param pulumi.Input[str] ipv4_dns_server3: IPv4 DNS server 3.
        :param pulumi.Input[str] ipv4_end_ip: End of IPv4 range.
        :param pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv4ExcludeRangeArgs']]] ipv4_exclude_ranges: Configuration Method IPv4 exclude ranges. The structure of `ipv4_exclude_range` block is documented below.
        :param pulumi.Input[str] ipv4_name: IPv4 address name.
        :param pulumi.Input[str] ipv4_netmask: IPv4 Netmask.
        :param pulumi.Input[str] ipv4_split_exclude: IPv4 subnets that should not be sent over the IPsec tunnel.
        :param pulumi.Input[str] ipv4_split_include: IPv4 split-include subnets.
        :param pulumi.Input[str] ipv4_start_ip: Start of IPv4 range.
        :param pulumi.Input[str] ipv4_wins_server1: WINS server 1.
        :param pulumi.Input[str] ipv4_wins_server2: WINS server 2.
        :param pulumi.Input[str] ipv6_dns_server1: IPv6 DNS server 1.
        :param pulumi.Input[str] ipv6_dns_server2: IPv6 DNS server 2.
        :param pulumi.Input[str] ipv6_dns_server3: IPv6 DNS server 3.
        :param pulumi.Input[str] ipv6_end_ip: End of IPv6 range.
        :param pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv6ExcludeRangeArgs']]] ipv6_exclude_ranges: Configuration method IPv6 exclude ranges. The structure of `ipv6_exclude_range` block is documented below.
        :param pulumi.Input[str] ipv6_name: IPv6 address name.
        :param pulumi.Input[int] ipv6_prefix: IPv6 prefix.
        :param pulumi.Input[str] ipv6_split_exclude: IPv6 subnets that should not be sent over the IPsec tunnel.
        :param pulumi.Input[str] ipv6_split_include: IPv6 split-include subnets.
        :param pulumi.Input[str] ipv6_start_ip: Start of IPv6 range.
        :param pulumi.Input[int] keepalive: NAT-T keep alive interval.
        :param pulumi.Input[int] keylife: Time to wait in seconds before phase 1 encryption key expires.
        :param pulumi.Input[str] kms: Key Management Services server.
        :param pulumi.Input[int] link_cost: VPN tunnel underlay link cost.
        :param pulumi.Input[str] local_gw: IPv4 address of the local gateway's external interface.
        :param pulumi.Input[str] local_gw6: IPv6 address of the local gateway's external interface.
        :param pulumi.Input[str] localid: Local ID.
        :param pulumi.Input[str] localid_type: Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
        :param pulumi.Input[str] loopback_asymroute: Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mesh_selector_type: Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
        :param pulumi.Input[str] mode: The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
        :param pulumi.Input[str] mode_cfg: Enable/disable configuration method. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] mode_cfg_allow_client_selector: Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] monitor: IPsec interface as backup for primary interface.
        :param pulumi.Input[int] monitor_hold_down_delay: Time to wait in seconds before recovery once primary re-establishes.
        :param pulumi.Input[str] monitor_hold_down_time: Time of day at which to fail back to primary after it re-establishes.
        :param pulumi.Input[str] monitor_hold_down_type: Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
        :param pulumi.Input[str] monitor_hold_down_weekday: Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[int] monitor_min: Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
        :param pulumi.Input[str] name: IPsec remote gateway name.
        :param pulumi.Input[str] nattraversal: Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
        :param pulumi.Input[int] negotiate_timeout: IKE SA negotiation timeout in seconds (1 - 300).
        :param pulumi.Input[str] net_device: Enable/disable kernel device creation. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] network_id: VPN gateway network ID.
        :param pulumi.Input[str] network_overlay: Enable/disable network overlays. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] npu_offload: Enable/disable offloading NPU. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] packet_redistribution: Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] passive_mode: Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] peer: Accept this peer certificate.
        :param pulumi.Input[str] peergrp: Accept this peer certificate group.
        :param pulumi.Input[str] peerid: Accept this peer identity.
        :param pulumi.Input[str] peertype: Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
        :param pulumi.Input[str] ppk: Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
        :param pulumi.Input[str] ppk_identity: IKEv2 Postquantum Preshared Key Identity.
        :param pulumi.Input[str] ppk_secret: IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[int] priority: Priority for routes added by IKE (0 - 4294967295).
        :param pulumi.Input[str] psksecret: Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[str] psksecret_remote: Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[str] qkd: Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
        :param pulumi.Input[str] qkd_profile: Quantum Key Distribution (QKD) server profile.
        :param pulumi.Input[str] reauth: Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] rekey: Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_gw: IPv4 address of the remote gateway's external interface.
        :param pulumi.Input[str] remote_gw6: IPv6 address of the remote gateway's external interface.
        :param pulumi.Input[str] remotegw_ddns: Domain name of remote gateway (eg. name.DDNS.com).
        :param pulumi.Input[str] rsa_signature_format: Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
        :param pulumi.Input[str] rsa_signature_hash_override: Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] save_password: Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] send_cert_chain: Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] signature_hash_alg: Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
        :param pulumi.Input[str] split_include_service: Split-include services.
        :param pulumi.Input[str] suite_b: Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
        :param pulumi.Input[str] transport: Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
        :param pulumi.Input[str] tunnel_search: Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
        :param pulumi.Input[str] type: Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
        :param pulumi.Input[str] unity_support: Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] usrgrp: User group name for dialup peers.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] vni: VNI of VXLAN tunnel.
        :param pulumi.Input[str] wizard_type: GUI VPN Wizard Type.
        :param pulumi.Input[str] xauthtype: XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
        """
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "proposal", proposal)
        if acct_verify is not None:
            pulumi.set(__self__, "acct_verify", acct_verify)
        if add_gw_route is not None:
            pulumi.set(__self__, "add_gw_route", add_gw_route)
        if add_route is not None:
            pulumi.set(__self__, "add_route", add_route)
        if aggregate_member is not None:
            pulumi.set(__self__, "aggregate_member", aggregate_member)
        if aggregate_weight is not None:
            pulumi.set(__self__, "aggregate_weight", aggregate_weight)
        if assign_ip is not None:
            pulumi.set(__self__, "assign_ip", assign_ip)
        if assign_ip_from is not None:
            pulumi.set(__self__, "assign_ip_from", assign_ip_from)
        if authmethod is not None:
            pulumi.set(__self__, "authmethod", authmethod)
        if authmethod_remote is not None:
            pulumi.set(__self__, "authmethod_remote", authmethod_remote)
        if authpasswd is not None:
            pulumi.set(__self__, "authpasswd", authpasswd)
        if authusr is not None:
            pulumi.set(__self__, "authusr", authusr)
        if authusrgrp is not None:
            pulumi.set(__self__, "authusrgrp", authusrgrp)
        if auto_discovery_crossover is not None:
            pulumi.set(__self__, "auto_discovery_crossover", auto_discovery_crossover)
        if auto_discovery_forwarder is not None:
            pulumi.set(__self__, "auto_discovery_forwarder", auto_discovery_forwarder)
        if auto_discovery_offer_interval is not None:
            pulumi.set(__self__, "auto_discovery_offer_interval", auto_discovery_offer_interval)
        if auto_discovery_psk is not None:
            pulumi.set(__self__, "auto_discovery_psk", auto_discovery_psk)
        if auto_discovery_receiver is not None:
            pulumi.set(__self__, "auto_discovery_receiver", auto_discovery_receiver)
        if auto_discovery_sender is not None:
            pulumi.set(__self__, "auto_discovery_sender", auto_discovery_sender)
        if auto_discovery_shortcuts is not None:
            pulumi.set(__self__, "auto_discovery_shortcuts", auto_discovery_shortcuts)
        if auto_negotiate is not None:
            pulumi.set(__self__, "auto_negotiate", auto_negotiate)
        if azure_ad_autoconnect is not None:
            pulumi.set(__self__, "azure_ad_autoconnect", azure_ad_autoconnect)
        if backup_gateways is not None:
            pulumi.set(__self__, "backup_gateways", backup_gateways)
        if banner is not None:
            pulumi.set(__self__, "banner", banner)
        if cert_id_validation is not None:
            pulumi.set(__self__, "cert_id_validation", cert_id_validation)
        if cert_trust_store is not None:
            pulumi.set(__self__, "cert_trust_store", cert_trust_store)
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if childless_ike is not None:
            pulumi.set(__self__, "childless_ike", childless_ike)
        if client_auto_negotiate is not None:
            pulumi.set(__self__, "client_auto_negotiate", client_auto_negotiate)
        if client_keep_alive is not None:
            pulumi.set(__self__, "client_keep_alive", client_keep_alive)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if default_gw is not None:
            pulumi.set(__self__, "default_gw", default_gw)
        if default_gw_priority is not None:
            pulumi.set(__self__, "default_gw_priority", default_gw_priority)
        if dev_id is not None:
            pulumi.set(__self__, "dev_id", dev_id)
        if dev_id_notification is not None:
            pulumi.set(__self__, "dev_id_notification", dev_id_notification)
        if dhcp6_ra_linkaddr is not None:
            pulumi.set(__self__, "dhcp6_ra_linkaddr", dhcp6_ra_linkaddr)
        if dhcp_ra_giaddr is not None:
            pulumi.set(__self__, "dhcp_ra_giaddr", dhcp_ra_giaddr)
        if dhgrp is not None:
            pulumi.set(__self__, "dhgrp", dhgrp)
        if digital_signature_auth is not None:
            pulumi.set(__self__, "digital_signature_auth", digital_signature_auth)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dns_mode is not None:
            pulumi.set(__self__, "dns_mode", dns_mode)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dpd is not None:
            pulumi.set(__self__, "dpd", dpd)
        if dpd_retrycount is not None:
            pulumi.set(__self__, "dpd_retrycount", dpd_retrycount)
        if dpd_retryinterval is not None:
            pulumi.set(__self__, "dpd_retryinterval", dpd_retryinterval)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if eap is not None:
            pulumi.set(__self__, "eap", eap)
        if eap_cert_auth is not None:
            pulumi.set(__self__, "eap_cert_auth", eap_cert_auth)
        if eap_exclude_peergrp is not None:
            pulumi.set(__self__, "eap_exclude_peergrp", eap_exclude_peergrp)
        if eap_identity is not None:
            pulumi.set(__self__, "eap_identity", eap_identity)
        if ems_sn_check is not None:
            pulumi.set(__self__, "ems_sn_check", ems_sn_check)
        if encap_local_gw4 is not None:
            pulumi.set(__self__, "encap_local_gw4", encap_local_gw4)
        if encap_local_gw6 is not None:
            pulumi.set(__self__, "encap_local_gw6", encap_local_gw6)
        if encap_remote_gw4 is not None:
            pulumi.set(__self__, "encap_remote_gw4", encap_remote_gw4)
        if encap_remote_gw6 is not None:
            pulumi.set(__self__, "encap_remote_gw6", encap_remote_gw6)
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if encapsulation_address is not None:
            pulumi.set(__self__, "encapsulation_address", encapsulation_address)
        if enforce_unique_id is not None:
            pulumi.set(__self__, "enforce_unique_id", enforce_unique_id)
        if esn is not None:
            pulumi.set(__self__, "esn", esn)
        if exchange_fgt_device_id is not None:
            pulumi.set(__self__, "exchange_fgt_device_id", exchange_fgt_device_id)
        if exchange_interface_ip is not None:
            pulumi.set(__self__, "exchange_interface_ip", exchange_interface_ip)
        if exchange_ip_addr4 is not None:
            pulumi.set(__self__, "exchange_ip_addr4", exchange_ip_addr4)
        if exchange_ip_addr6 is not None:
            pulumi.set(__self__, "exchange_ip_addr6", exchange_ip_addr6)
        if fallback_tcp_threshold is not None:
            pulumi.set(__self__, "fallback_tcp_threshold", fallback_tcp_threshold)
        if fec_base is not None:
            pulumi.set(__self__, "fec_base", fec_base)
        if fec_codec is not None:
            pulumi.set(__self__, "fec_codec", fec_codec)
        if fec_codec_string is not None:
            pulumi.set(__self__, "fec_codec_string", fec_codec_string)
        if fec_egress is not None:
            pulumi.set(__self__, "fec_egress", fec_egress)
        if fec_health_check is not None:
            pulumi.set(__self__, "fec_health_check", fec_health_check)
        if fec_ingress is not None:
            pulumi.set(__self__, "fec_ingress", fec_ingress)
        if fec_mapping_profile is not None:
            pulumi.set(__self__, "fec_mapping_profile", fec_mapping_profile)
        if fec_receive_timeout is not None:
            pulumi.set(__self__, "fec_receive_timeout", fec_receive_timeout)
        if fec_redundant is not None:
            pulumi.set(__self__, "fec_redundant", fec_redundant)
        if fec_send_timeout is not None:
            pulumi.set(__self__, "fec_send_timeout", fec_send_timeout)
        if fgsp_sync is not None:
            pulumi.set(__self__, "fgsp_sync", fgsp_sync)
        if forticlient_enforcement is not None:
            pulumi.set(__self__, "forticlient_enforcement", forticlient_enforcement)
        if fortinet_esp is not None:
            pulumi.set(__self__, "fortinet_esp", fortinet_esp)
        if fragmentation is not None:
            pulumi.set(__self__, "fragmentation", fragmentation)
        if fragmentation_mtu is not None:
            pulumi.set(__self__, "fragmentation_mtu", fragmentation_mtu)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_authentication is not None:
            pulumi.set(__self__, "group_authentication", group_authentication)
        if group_authentication_secret is not None:
            pulumi.set(__self__, "group_authentication_secret", group_authentication_secret)
        if ha_sync_esp_seqno is not None:
            pulumi.set(__self__, "ha_sync_esp_seqno", ha_sync_esp_seqno)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if idle_timeoutinterval is not None:
            pulumi.set(__self__, "idle_timeoutinterval", idle_timeoutinterval)
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if inbound_dscp_copy is not None:
            pulumi.set(__self__, "inbound_dscp_copy", inbound_dscp_copy)
        if include_local_lan is not None:
            pulumi.set(__self__, "include_local_lan", include_local_lan)
        if internal_domain_lists is not None:
            pulumi.set(__self__, "internal_domain_lists", internal_domain_lists)
        if ip_delay_interval is not None:
            pulumi.set(__self__, "ip_delay_interval", ip_delay_interval)
        if ip_fragmentation is not None:
            pulumi.set(__self__, "ip_fragmentation", ip_fragmentation)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if ipv4_dns_server1 is not None:
            pulumi.set(__self__, "ipv4_dns_server1", ipv4_dns_server1)
        if ipv4_dns_server2 is not None:
            pulumi.set(__self__, "ipv4_dns_server2", ipv4_dns_server2)
        if ipv4_dns_server3 is not None:
            pulumi.set(__self__, "ipv4_dns_server3", ipv4_dns_server3)
        if ipv4_end_ip is not None:
            pulumi.set(__self__, "ipv4_end_ip", ipv4_end_ip)
        if ipv4_exclude_ranges is not None:
            pulumi.set(__self__, "ipv4_exclude_ranges", ipv4_exclude_ranges)
        if ipv4_name is not None:
            pulumi.set(__self__, "ipv4_name", ipv4_name)
        if ipv4_netmask is not None:
            pulumi.set(__self__, "ipv4_netmask", ipv4_netmask)
        if ipv4_split_exclude is not None:
            pulumi.set(__self__, "ipv4_split_exclude", ipv4_split_exclude)
        if ipv4_split_include is not None:
            pulumi.set(__self__, "ipv4_split_include", ipv4_split_include)
        if ipv4_start_ip is not None:
            pulumi.set(__self__, "ipv4_start_ip", ipv4_start_ip)
        if ipv4_wins_server1 is not None:
            pulumi.set(__self__, "ipv4_wins_server1", ipv4_wins_server1)
        if ipv4_wins_server2 is not None:
            pulumi.set(__self__, "ipv4_wins_server2", ipv4_wins_server2)
        if ipv6_dns_server1 is not None:
            pulumi.set(__self__, "ipv6_dns_server1", ipv6_dns_server1)
        if ipv6_dns_server2 is not None:
            pulumi.set(__self__, "ipv6_dns_server2", ipv6_dns_server2)
        if ipv6_dns_server3 is not None:
            pulumi.set(__self__, "ipv6_dns_server3", ipv6_dns_server3)
        if ipv6_end_ip is not None:
            pulumi.set(__self__, "ipv6_end_ip", ipv6_end_ip)
        if ipv6_exclude_ranges is not None:
            pulumi.set(__self__, "ipv6_exclude_ranges", ipv6_exclude_ranges)
        if ipv6_name is not None:
            pulumi.set(__self__, "ipv6_name", ipv6_name)
        if ipv6_prefix is not None:
            pulumi.set(__self__, "ipv6_prefix", ipv6_prefix)
        if ipv6_split_exclude is not None:
            pulumi.set(__self__, "ipv6_split_exclude", ipv6_split_exclude)
        if ipv6_split_include is not None:
            pulumi.set(__self__, "ipv6_split_include", ipv6_split_include)
        if ipv6_start_ip is not None:
            pulumi.set(__self__, "ipv6_start_ip", ipv6_start_ip)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if keylife is not None:
            pulumi.set(__self__, "keylife", keylife)
        if kms is not None:
            pulumi.set(__self__, "kms", kms)
        if link_cost is not None:
            pulumi.set(__self__, "link_cost", link_cost)
        if local_gw is not None:
            pulumi.set(__self__, "local_gw", local_gw)
        if local_gw6 is not None:
            pulumi.set(__self__, "local_gw6", local_gw6)
        if localid is not None:
            pulumi.set(__self__, "localid", localid)
        if localid_type is not None:
            pulumi.set(__self__, "localid_type", localid_type)
        if loopback_asymroute is not None:
            pulumi.set(__self__, "loopback_asymroute", loopback_asymroute)
        if mesh_selector_type is not None:
            pulumi.set(__self__, "mesh_selector_type", mesh_selector_type)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mode_cfg is not None:
            pulumi.set(__self__, "mode_cfg", mode_cfg)
        if mode_cfg_allow_client_selector is not None:
            pulumi.set(__self__, "mode_cfg_allow_client_selector", mode_cfg_allow_client_selector)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if monitor_hold_down_delay is not None:
            pulumi.set(__self__, "monitor_hold_down_delay", monitor_hold_down_delay)
        if monitor_hold_down_time is not None:
            pulumi.set(__self__, "monitor_hold_down_time", monitor_hold_down_time)
        if monitor_hold_down_type is not None:
            pulumi.set(__self__, "monitor_hold_down_type", monitor_hold_down_type)
        if monitor_hold_down_weekday is not None:
            pulumi.set(__self__, "monitor_hold_down_weekday", monitor_hold_down_weekday)
        if monitor_min is not None:
            pulumi.set(__self__, "monitor_min", monitor_min)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nattraversal is not None:
            pulumi.set(__self__, "nattraversal", nattraversal)
        if negotiate_timeout is not None:
            pulumi.set(__self__, "negotiate_timeout", negotiate_timeout)
        if net_device is not None:
            pulumi.set(__self__, "net_device", net_device)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if network_overlay is not None:
            pulumi.set(__self__, "network_overlay", network_overlay)
        if npu_offload is not None:
            pulumi.set(__self__, "npu_offload", npu_offload)
        if packet_redistribution is not None:
            pulumi.set(__self__, "packet_redistribution", packet_redistribution)
        if passive_mode is not None:
            pulumi.set(__self__, "passive_mode", passive_mode)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if peergrp is not None:
            pulumi.set(__self__, "peergrp", peergrp)
        if peerid is not None:
            pulumi.set(__self__, "peerid", peerid)
        if peertype is not None:
            pulumi.set(__self__, "peertype", peertype)
        if ppk is not None:
            pulumi.set(__self__, "ppk", ppk)
        if ppk_identity is not None:
            pulumi.set(__self__, "ppk_identity", ppk_identity)
        if ppk_secret is not None:
            pulumi.set(__self__, "ppk_secret", ppk_secret)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if psksecret is not None:
            pulumi.set(__self__, "psksecret", psksecret)
        if psksecret_remote is not None:
            pulumi.set(__self__, "psksecret_remote", psksecret_remote)
        if qkd is not None:
            pulumi.set(__self__, "qkd", qkd)
        if qkd_profile is not None:
            pulumi.set(__self__, "qkd_profile", qkd_profile)
        if reauth is not None:
            pulumi.set(__self__, "reauth", reauth)
        if rekey is not None:
            pulumi.set(__self__, "rekey", rekey)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if remote_gw6 is not None:
            pulumi.set(__self__, "remote_gw6", remote_gw6)
        if remotegw_ddns is not None:
            pulumi.set(__self__, "remotegw_ddns", remotegw_ddns)
        if rsa_signature_format is not None:
            pulumi.set(__self__, "rsa_signature_format", rsa_signature_format)
        if rsa_signature_hash_override is not None:
            pulumi.set(__self__, "rsa_signature_hash_override", rsa_signature_hash_override)
        if save_password is not None:
            pulumi.set(__self__, "save_password", save_password)
        if send_cert_chain is not None:
            pulumi.set(__self__, "send_cert_chain", send_cert_chain)
        if signature_hash_alg is not None:
            pulumi.set(__self__, "signature_hash_alg", signature_hash_alg)
        if split_include_service is not None:
            pulumi.set(__self__, "split_include_service", split_include_service)
        if suite_b is not None:
            pulumi.set(__self__, "suite_b", suite_b)
        if transport is not None:
            pulumi.set(__self__, "transport", transport)
        if tunnel_search is not None:
            pulumi.set(__self__, "tunnel_search", tunnel_search)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unity_support is not None:
            pulumi.set(__self__, "unity_support", unity_support)
        if usrgrp is not None:
            pulumi.set(__self__, "usrgrp", usrgrp)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vni is not None:
            pulumi.set(__self__, "vni", vni)
        if wizard_type is not None:
            pulumi.set(__self__, "wizard_type", wizard_type)
        if xauthtype is not None:
            pulumi.set(__self__, "xauthtype", xauthtype)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        """
        Local physical, aggregate, or VLAN outgoing interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def proposal(self) -> pulumi.Input[str]:
        """
        Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        """
        return pulumi.get(self, "proposal")

    @proposal.setter
    def proposal(self, value: pulumi.Input[str]):
        pulumi.set(self, "proposal", value)

    @property
    @pulumi.getter(name="acctVerify")
    def acct_verify(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "acct_verify")

    @acct_verify.setter
    def acct_verify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acct_verify", value)

    @property
    @pulumi.getter(name="addGwRoute")
    def add_gw_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "add_gw_route")

    @add_gw_route.setter
    def add_gw_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_gw_route", value)

    @property
    @pulumi.getter(name="addRoute")
    def add_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "add_route")

    @add_route.setter
    def add_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_route", value)

    @property
    @pulumi.getter(name="aggregateMember")
    def aggregate_member(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "aggregate_member")

    @aggregate_member.setter
    def aggregate_member(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregate_member", value)

    @property
    @pulumi.getter(name="aggregateWeight")
    def aggregate_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Link weight for aggregate.
        """
        return pulumi.get(self, "aggregate_weight")

    @aggregate_weight.setter
    def aggregate_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aggregate_weight", value)

    @property
    @pulumi.getter(name="assignIp")
    def assign_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "assign_ip")

    @assign_ip.setter
    def assign_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_ip", value)

    @property
    @pulumi.getter(name="assignIpFrom")
    def assign_ip_from(self) -> Optional[pulumi.Input[str]]:
        """
        Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
        """
        return pulumi.get(self, "assign_ip_from")

    @assign_ip_from.setter
    def assign_ip_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_ip_from", value)

    @property
    @pulumi.getter
    def authmethod(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method. Valid values: `psk`, `signature`.
        """
        return pulumi.get(self, "authmethod")

    @authmethod.setter
    def authmethod(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authmethod", value)

    @property
    @pulumi.getter(name="authmethodRemote")
    def authmethod_remote(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method (remote side). Valid values: `psk`, `signature`.
        """
        return pulumi.get(self, "authmethod_remote")

    @authmethod_remote.setter
    def authmethod_remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authmethod_remote", value)

    @property
    @pulumi.getter
    def authpasswd(self) -> Optional[pulumi.Input[str]]:
        """
        XAuth password (max 35 characters).
        """
        return pulumi.get(self, "authpasswd")

    @authpasswd.setter
    def authpasswd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authpasswd", value)

    @property
    @pulumi.getter
    def authusr(self) -> Optional[pulumi.Input[str]]:
        """
        XAuth user name.
        """
        return pulumi.get(self, "authusr")

    @authusr.setter
    def authusr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authusr", value)

    @property
    @pulumi.getter
    def authusrgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication user group.
        """
        return pulumi.get(self, "authusrgrp")

    @authusrgrp.setter
    def authusrgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authusrgrp", value)

    @property
    @pulumi.getter(name="autoDiscoveryCrossover")
    def auto_discovery_crossover(self) -> Optional[pulumi.Input[str]]:
        """
        Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "auto_discovery_crossover")

    @auto_discovery_crossover.setter
    def auto_discovery_crossover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_crossover", value)

    @property
    @pulumi.getter(name="autoDiscoveryForwarder")
    def auto_discovery_forwarder(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_forwarder")

    @auto_discovery_forwarder.setter
    def auto_discovery_forwarder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_forwarder", value)

    @property
    @pulumi.getter(name="autoDiscoveryOfferInterval")
    def auto_discovery_offer_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between shortcut offer messages in seconds (1 - 300, default = 5).
        """
        return pulumi.get(self, "auto_discovery_offer_interval")

    @auto_discovery_offer_interval.setter
    def auto_discovery_offer_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_discovery_offer_interval", value)

    @property
    @pulumi.getter(name="autoDiscoveryPsk")
    def auto_discovery_psk(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_psk")

    @auto_discovery_psk.setter
    def auto_discovery_psk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_psk", value)

    @property
    @pulumi.getter(name="autoDiscoveryReceiver")
    def auto_discovery_receiver(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_receiver")

    @auto_discovery_receiver.setter
    def auto_discovery_receiver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_receiver", value)

    @property
    @pulumi.getter(name="autoDiscoverySender")
    def auto_discovery_sender(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_sender")

    @auto_discovery_sender.setter
    def auto_discovery_sender(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_sender", value)

    @property
    @pulumi.getter(name="autoDiscoveryShortcuts")
    def auto_discovery_shortcuts(self) -> Optional[pulumi.Input[str]]:
        """
        Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
        """
        return pulumi.get(self, "auto_discovery_shortcuts")

    @auto_discovery_shortcuts.setter
    def auto_discovery_shortcuts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_shortcuts", value)

    @property
    @pulumi.getter(name="autoNegotiate")
    def auto_negotiate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_negotiate")

    @auto_negotiate.setter
    def auto_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_negotiate", value)

    @property
    @pulumi.getter(name="azureAdAutoconnect")
    def azure_ad_autoconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "azure_ad_autoconnect")

    @azure_ad_autoconnect.setter
    def azure_ad_autoconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_ad_autoconnect", value)

    @property
    @pulumi.getter(name="backupGateways")
    def backup_gateways(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceBackupGatewayArgs']]]]:
        """
        Instruct unity clients about the backup gateway address(es). The structure of `backup_gateway` block is documented below.
        """
        return pulumi.get(self, "backup_gateways")

    @backup_gateways.setter
    def backup_gateways(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceBackupGatewayArgs']]]]):
        pulumi.set(self, "backup_gateways", value)

    @property
    @pulumi.getter
    def banner(self) -> Optional[pulumi.Input[str]]:
        """
        Message that unity client should display after connecting.
        """
        return pulumi.get(self, "banner")

    @banner.setter
    def banner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "banner", value)

    @property
    @pulumi.getter(name="certIdValidation")
    def cert_id_validation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cert_id_validation")

    @cert_id_validation.setter
    def cert_id_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_id_validation", value)

    @property
    @pulumi.getter(name="certTrustStore")
    def cert_trust_store(self) -> Optional[pulumi.Input[str]]:
        """
        CA certificate trust store. Valid values: `local`, `ems`.
        """
        return pulumi.get(self, "cert_trust_store")

    @cert_trust_store.setter
    def cert_trust_store(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_trust_store", value)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceCertificateArgs']]]]:
        """
        The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
        """
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceCertificateArgs']]]]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter(name="childlessIke")
    def childless_ike(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "childless_ike")

    @childless_ike.setter
    def childless_ike(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "childless_ike", value)

    @property
    @pulumi.getter(name="clientAutoNegotiate")
    def client_auto_negotiate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "client_auto_negotiate")

    @client_auto_negotiate.setter
    def client_auto_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_auto_negotiate", value)

    @property
    @pulumi.getter(name="clientKeepAlive")
    def client_keep_alive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "client_keep_alive")

    @client_keep_alive.setter
    def client_keep_alive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_keep_alive", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="defaultGw")
    def default_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of default route gateway to use for traffic exiting the interface.
        """
        return pulumi.get(self, "default_gw")

    @default_gw.setter
    def default_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_gw", value)

    @property
    @pulumi.getter(name="defaultGwPriority")
    def default_gw_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority for default gateway route. A higher priority number signifies a less preferred route.
        """
        return pulumi.get(self, "default_gw_priority")

    @default_gw_priority.setter
    def default_gw_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_gw_priority", value)

    @property
    @pulumi.getter(name="devId")
    def dev_id(self) -> Optional[pulumi.Input[str]]:
        """
        Device ID carried by the device ID notification.
        """
        return pulumi.get(self, "dev_id")

    @dev_id.setter
    def dev_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dev_id", value)

    @property
    @pulumi.getter(name="devIdNotification")
    def dev_id_notification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable device ID notification. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dev_id_notification")

    @dev_id_notification.setter
    def dev_id_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dev_id_notification", value)

    @property
    @pulumi.getter(name="dhcp6RaLinkaddr")
    def dhcp6_ra_linkaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Relay agent IPv6 link address to use in DHCP6 requests.
        """
        return pulumi.get(self, "dhcp6_ra_linkaddr")

    @dhcp6_ra_linkaddr.setter
    def dhcp6_ra_linkaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_ra_linkaddr", value)

    @property
    @pulumi.getter(name="dhcpRaGiaddr")
    def dhcp_ra_giaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Relay agent gateway IP address to use in the giaddr field of DHCP requests.
        """
        return pulumi.get(self, "dhcp_ra_giaddr")

    @dhcp_ra_giaddr.setter
    def dhcp_ra_giaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_ra_giaddr", value)

    @property
    @pulumi.getter
    def dhgrp(self) -> Optional[pulumi.Input[str]]:
        """
        DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        """
        return pulumi.get(self, "dhgrp")

    @dhgrp.setter
    def dhgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhgrp", value)

    @property
    @pulumi.getter(name="digitalSignatureAuth")
    def digital_signature_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "digital_signature_auth")

    @digital_signature_auth.setter
    def digital_signature_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digital_signature_auth", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Distance for routes added by IKE (1 - 255).
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="dnsMode")
    def dns_mode(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server mode. Valid values: `manual`, `auto`.
        """
        return pulumi.get(self, "dns_mode")

    @dns_mode.setter
    def dns_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_mode", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Instruct unity clients about the default DNS domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def dpd(self) -> Optional[pulumi.Input[str]]:
        """
        Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
        """
        return pulumi.get(self, "dpd")

    @dpd.setter
    def dpd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dpd", value)

    @property
    @pulumi.getter(name="dpdRetrycount")
    def dpd_retrycount(self) -> Optional[pulumi.Input[int]]:
        """
        Number of DPD retry attempts.
        """
        return pulumi.get(self, "dpd_retrycount")

    @dpd_retrycount.setter
    def dpd_retrycount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dpd_retrycount", value)

    @property
    @pulumi.getter(name="dpdRetryinterval")
    def dpd_retryinterval(self) -> Optional[pulumi.Input[str]]:
        """
        DPD retry interval.
        """
        return pulumi.get(self, "dpd_retryinterval")

    @dpd_retryinterval.setter
    def dpd_retryinterval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dpd_retryinterval", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def eap(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eap")

    @eap.setter
    def eap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap", value)

    @property
    @pulumi.getter(name="eapCertAuth")
    def eap_cert_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eap_cert_auth")

    @eap_cert_auth.setter
    def eap_cert_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_cert_auth", value)

    @property
    @pulumi.getter(name="eapExcludePeergrp")
    def eap_exclude_peergrp(self) -> Optional[pulumi.Input[str]]:
        """
        Peer group excluded from EAP authentication.
        """
        return pulumi.get(self, "eap_exclude_peergrp")

    @eap_exclude_peergrp.setter
    def eap_exclude_peergrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_exclude_peergrp", value)

    @property
    @pulumi.getter(name="eapIdentity")
    def eap_identity(self) -> Optional[pulumi.Input[str]]:
        """
        IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
        """
        return pulumi.get(self, "eap_identity")

    @eap_identity.setter
    def eap_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_identity", value)

    @property
    @pulumi.getter(name="emsSnCheck")
    def ems_sn_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ems_sn_check")

    @ems_sn_check.setter
    def ems_sn_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ems_sn_check", value)

    @property
    @pulumi.getter(name="encapLocalGw4")
    def encap_local_gw4(self) -> Optional[pulumi.Input[str]]:
        """
        Local IPv4 address of GRE/VXLAN tunnel.
        """
        return pulumi.get(self, "encap_local_gw4")

    @encap_local_gw4.setter
    def encap_local_gw4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encap_local_gw4", value)

    @property
    @pulumi.getter(name="encapLocalGw6")
    def encap_local_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        Local IPv6 address of GRE/VXLAN tunnel.
        """
        return pulumi.get(self, "encap_local_gw6")

    @encap_local_gw6.setter
    def encap_local_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encap_local_gw6", value)

    @property
    @pulumi.getter(name="encapRemoteGw4")
    def encap_remote_gw4(self) -> Optional[pulumi.Input[str]]:
        """
        Remote IPv4 address of GRE/VXLAN tunnel.
        """
        return pulumi.get(self, "encap_remote_gw4")

    @encap_remote_gw4.setter
    def encap_remote_gw4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encap_remote_gw4", value)

    @property
    @pulumi.getter(name="encapRemoteGw6")
    def encap_remote_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        Remote IPv6 address of GRE/VXLAN tunnel.
        """
        return pulumi.get(self, "encap_remote_gw6")

    @encap_remote_gw6.setter
    def encap_remote_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encap_remote_gw6", value)

    @property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable GRE/VXLAN encapsulation.
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encapsulation", value)

    @property
    @pulumi.getter(name="encapsulationAddress")
    def encapsulation_address(self) -> Optional[pulumi.Input[str]]:
        """
        Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "encapsulation_address")

    @encapsulation_address.setter
    def encapsulation_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encapsulation_address", value)

    @property
    @pulumi.getter(name="enforceUniqueId")
    def enforce_unique_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
        """
        return pulumi.get(self, "enforce_unique_id")

    @enforce_unique_id.setter
    def enforce_unique_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_unique_id", value)

    @property
    @pulumi.getter
    def esn(self) -> Optional[pulumi.Input[str]]:
        """
        Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
        """
        return pulumi.get(self, "esn")

    @esn.setter
    def esn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "esn", value)

    @property
    @pulumi.getter(name="exchangeFgtDeviceId")
    def exchange_fgt_device_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "exchange_fgt_device_id")

    @exchange_fgt_device_id.setter
    def exchange_fgt_device_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exchange_fgt_device_id", value)

    @property
    @pulumi.getter(name="exchangeInterfaceIp")
    def exchange_interface_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "exchange_interface_ip")

    @exchange_interface_ip.setter
    def exchange_interface_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exchange_interface_ip", value)

    @property
    @pulumi.getter(name="exchangeIpAddr4")
    def exchange_ip_addr4(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address to exchange with peers.
        """
        return pulumi.get(self, "exchange_ip_addr4")

    @exchange_ip_addr4.setter
    def exchange_ip_addr4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exchange_ip_addr4", value)

    @property
    @pulumi.getter(name="exchangeIpAddr6")
    def exchange_ip_addr6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address to exchange with peers
        """
        return pulumi.get(self, "exchange_ip_addr6")

    @exchange_ip_addr6.setter
    def exchange_ip_addr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exchange_ip_addr6", value)

    @property
    @pulumi.getter(name="fallbackTcpThreshold")
    def fallback_tcp_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout in seconds before falling back IKE/IPsec traffic to tcp.
        """
        return pulumi.get(self, "fallback_tcp_threshold")

    @fallback_tcp_threshold.setter
    def fallback_tcp_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fallback_tcp_threshold", value)

    @property
    @pulumi.getter(name="fecBase")
    def fec_base(self) -> Optional[pulumi.Input[int]]:
        """
        Number of base Forward Error Correction packets (1 - 100).
        """
        return pulumi.get(self, "fec_base")

    @fec_base.setter
    def fec_base(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_base", value)

    @property
    @pulumi.getter(name="fecCodec")
    def fec_codec(self) -> Optional[pulumi.Input[int]]:
        """
        ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
        """
        return pulumi.get(self, "fec_codec")

    @fec_codec.setter
    def fec_codec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_codec", value)

    @property
    @pulumi.getter(name="fecCodecString")
    def fec_codec_string(self) -> Optional[pulumi.Input[str]]:
        """
        Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
        """
        return pulumi.get(self, "fec_codec_string")

    @fec_codec_string.setter
    def fec_codec_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_codec_string", value)

    @property
    @pulumi.getter(name="fecEgress")
    def fec_egress(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fec_egress")

    @fec_egress.setter
    def fec_egress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_egress", value)

    @property
    @pulumi.getter(name="fecHealthCheck")
    def fec_health_check(self) -> Optional[pulumi.Input[str]]:
        """
        SD-WAN health check.
        """
        return pulumi.get(self, "fec_health_check")

    @fec_health_check.setter
    def fec_health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_health_check", value)

    @property
    @pulumi.getter(name="fecIngress")
    def fec_ingress(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fec_ingress")

    @fec_ingress.setter
    def fec_ingress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_ingress", value)

    @property
    @pulumi.getter(name="fecMappingProfile")
    def fec_mapping_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Forward Error Correction (FEC) mapping profile.
        """
        return pulumi.get(self, "fec_mapping_profile")

    @fec_mapping_profile.setter
    def fec_mapping_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_mapping_profile", value)

    @property
    @pulumi.getter(name="fecReceiveTimeout")
    def fec_receive_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
        """
        return pulumi.get(self, "fec_receive_timeout")

    @fec_receive_timeout.setter
    def fec_receive_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_receive_timeout", value)

    @property
    @pulumi.getter(name="fecRedundant")
    def fec_redundant(self) -> Optional[pulumi.Input[int]]:
        """
        Number of redundant Forward Error Correction packets (1 - 100).
        """
        return pulumi.get(self, "fec_redundant")

    @fec_redundant.setter
    def fec_redundant(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_redundant", value)

    @property
    @pulumi.getter(name="fecSendTimeout")
    def fec_send_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
        """
        return pulumi.get(self, "fec_send_timeout")

    @fec_send_timeout.setter
    def fec_send_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_send_timeout", value)

    @property
    @pulumi.getter(name="fgspSync")
    def fgsp_sync(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fgsp_sync")

    @fgsp_sync.setter
    def fgsp_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fgsp_sync", value)

    @property
    @pulumi.getter(name="forticlientEnforcement")
    def forticlient_enforcement(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_enforcement")

    @forticlient_enforcement.setter
    def forticlient_enforcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_enforcement", value)

    @property
    @pulumi.getter(name="fortinetEsp")
    def fortinet_esp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortinet_esp")

    @fortinet_esp.setter
    def fortinet_esp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortinet_esp", value)

    @property
    @pulumi.getter
    def fragmentation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fragmentation")

    @fragmentation.setter
    def fragmentation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fragmentation", value)

    @property
    @pulumi.getter(name="fragmentationMtu")
    def fragmentation_mtu(self) -> Optional[pulumi.Input[int]]:
        """
        IKE fragmentation MTU (500 - 16000).
        """
        return pulumi.get(self, "fragmentation_mtu")

    @fragmentation_mtu.setter
    def fragmentation_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fragmentation_mtu", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupAuthentication")
    def group_authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "group_authentication")

    @group_authentication.setter
    def group_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_authentication", value)

    @property
    @pulumi.getter(name="groupAuthenticationSecret")
    def group_authentication_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
        """
        return pulumi.get(self, "group_authentication_secret")

    @group_authentication_secret.setter
    def group_authentication_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_authentication_secret", value)

    @property
    @pulumi.getter(name="haSyncEspSeqno")
    def ha_sync_esp_seqno(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_sync_esp_seqno")

    @ha_sync_esp_seqno.setter
    def ha_sync_esp_seqno(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_sync_esp_seqno", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter(name="idleTimeoutinterval")
    def idle_timeoutinterval(self) -> Optional[pulumi.Input[int]]:
        """
        IPsec tunnel idle timeout in minutes (5 - 43200).
        """
        return pulumi.get(self, "idle_timeoutinterval")

    @idle_timeoutinterval.setter
    def idle_timeoutinterval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeoutinterval", value)

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[pulumi.Input[str]]:
        """
        IKE protocol version. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "ike_version")

    @ike_version.setter
    def ike_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_version", value)

    @property
    @pulumi.getter(name="inboundDscpCopy")
    def inbound_dscp_copy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inbound_dscp_copy")

    @inbound_dscp_copy.setter
    def inbound_dscp_copy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound_dscp_copy", value)

    @property
    @pulumi.getter(name="includeLocalLan")
    def include_local_lan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "include_local_lan")

    @include_local_lan.setter
    def include_local_lan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_local_lan", value)

    @property
    @pulumi.getter(name="internalDomainLists")
    def internal_domain_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceInternalDomainListArgs']]]]:
        """
        One or more internal domain names in quotes separated by spaces. The structure of `internal_domain_list` block is documented below.
        """
        return pulumi.get(self, "internal_domain_lists")

    @internal_domain_lists.setter
    def internal_domain_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceInternalDomainListArgs']]]]):
        pulumi.set(self, "internal_domain_lists", value)

    @property
    @pulumi.getter(name="ipDelayInterval")
    def ip_delay_interval(self) -> Optional[pulumi.Input[int]]:
        """
        IP address reuse delay interval in seconds (0 - 28800).
        """
        return pulumi.get(self, "ip_delay_interval")

    @ip_delay_interval.setter
    def ip_delay_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_delay_interval", value)

    @property
    @pulumi.getter(name="ipFragmentation")
    def ip_fragmentation(self) -> Optional[pulumi.Input[str]]:
        """
        Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
        """
        return pulumi.get(self, "ip_fragmentation")

    @ip_fragmentation.setter
    def ip_fragmentation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_fragmentation", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        IP version to use for VPN interface. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="ipv4DnsServer1")
    def ipv4_dns_server1(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 DNS server 1.
        """
        return pulumi.get(self, "ipv4_dns_server1")

    @ipv4_dns_server1.setter
    def ipv4_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_dns_server1", value)

    @property
    @pulumi.getter(name="ipv4DnsServer2")
    def ipv4_dns_server2(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 DNS server 2.
        """
        return pulumi.get(self, "ipv4_dns_server2")

    @ipv4_dns_server2.setter
    def ipv4_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_dns_server2", value)

    @property
    @pulumi.getter(name="ipv4DnsServer3")
    def ipv4_dns_server3(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 DNS server 3.
        """
        return pulumi.get(self, "ipv4_dns_server3")

    @ipv4_dns_server3.setter
    def ipv4_dns_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_dns_server3", value)

    @property
    @pulumi.getter(name="ipv4EndIp")
    def ipv4_end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End of IPv4 range.
        """
        return pulumi.get(self, "ipv4_end_ip")

    @ipv4_end_ip.setter
    def ipv4_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_end_ip", value)

    @property
    @pulumi.getter(name="ipv4ExcludeRanges")
    def ipv4_exclude_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv4ExcludeRangeArgs']]]]:
        """
        Configuration Method IPv4 exclude ranges. The structure of `ipv4_exclude_range` block is documented below.
        """
        return pulumi.get(self, "ipv4_exclude_ranges")

    @ipv4_exclude_ranges.setter
    def ipv4_exclude_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv4ExcludeRangeArgs']]]]):
        pulumi.set(self, "ipv4_exclude_ranges", value)

    @property
    @pulumi.getter(name="ipv4Name")
    def ipv4_name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address name.
        """
        return pulumi.get(self, "ipv4_name")

    @ipv4_name.setter
    def ipv4_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_name", value)

    @property
    @pulumi.getter(name="ipv4Netmask")
    def ipv4_netmask(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Netmask.
        """
        return pulumi.get(self, "ipv4_netmask")

    @ipv4_netmask.setter
    def ipv4_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_netmask", value)

    @property
    @pulumi.getter(name="ipv4SplitExclude")
    def ipv4_split_exclude(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 subnets that should not be sent over the IPsec tunnel.
        """
        return pulumi.get(self, "ipv4_split_exclude")

    @ipv4_split_exclude.setter
    def ipv4_split_exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_split_exclude", value)

    @property
    @pulumi.getter(name="ipv4SplitInclude")
    def ipv4_split_include(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 split-include subnets.
        """
        return pulumi.get(self, "ipv4_split_include")

    @ipv4_split_include.setter
    def ipv4_split_include(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_split_include", value)

    @property
    @pulumi.getter(name="ipv4StartIp")
    def ipv4_start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start of IPv4 range.
        """
        return pulumi.get(self, "ipv4_start_ip")

    @ipv4_start_ip.setter
    def ipv4_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_start_ip", value)

    @property
    @pulumi.getter(name="ipv4WinsServer1")
    def ipv4_wins_server1(self) -> Optional[pulumi.Input[str]]:
        """
        WINS server 1.
        """
        return pulumi.get(self, "ipv4_wins_server1")

    @ipv4_wins_server1.setter
    def ipv4_wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_wins_server1", value)

    @property
    @pulumi.getter(name="ipv4WinsServer2")
    def ipv4_wins_server2(self) -> Optional[pulumi.Input[str]]:
        """
        WINS server 2.
        """
        return pulumi.get(self, "ipv4_wins_server2")

    @ipv4_wins_server2.setter
    def ipv4_wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_wins_server2", value)

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 DNS server 1.
        """
        return pulumi.get(self, "ipv6_dns_server1")

    @ipv6_dns_server1.setter
    def ipv6_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server1", value)

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 DNS server 2.
        """
        return pulumi.get(self, "ipv6_dns_server2")

    @ipv6_dns_server2.setter
    def ipv6_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server2", value)

    @property
    @pulumi.getter(name="ipv6DnsServer3")
    def ipv6_dns_server3(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 DNS server 3.
        """
        return pulumi.get(self, "ipv6_dns_server3")

    @ipv6_dns_server3.setter
    def ipv6_dns_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server3", value)

    @property
    @pulumi.getter(name="ipv6EndIp")
    def ipv6_end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End of IPv6 range.
        """
        return pulumi.get(self, "ipv6_end_ip")

    @ipv6_end_ip.setter
    def ipv6_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_end_ip", value)

    @property
    @pulumi.getter(name="ipv6ExcludeRanges")
    def ipv6_exclude_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv6ExcludeRangeArgs']]]]:
        """
        Configuration method IPv6 exclude ranges. The structure of `ipv6_exclude_range` block is documented below.
        """
        return pulumi.get(self, "ipv6_exclude_ranges")

    @ipv6_exclude_ranges.setter
    def ipv6_exclude_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv6ExcludeRangeArgs']]]]):
        pulumi.set(self, "ipv6_exclude_ranges", value)

    @property
    @pulumi.getter(name="ipv6Name")
    def ipv6_name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address name.
        """
        return pulumi.get(self, "ipv6_name")

    @ipv6_name.setter
    def ipv6_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_name", value)

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "ipv6_prefix")

    @ipv6_prefix.setter
    def ipv6_prefix(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_prefix", value)

    @property
    @pulumi.getter(name="ipv6SplitExclude")
    def ipv6_split_exclude(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 subnets that should not be sent over the IPsec tunnel.
        """
        return pulumi.get(self, "ipv6_split_exclude")

    @ipv6_split_exclude.setter
    def ipv6_split_exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_split_exclude", value)

    @property
    @pulumi.getter(name="ipv6SplitInclude")
    def ipv6_split_include(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 split-include subnets.
        """
        return pulumi.get(self, "ipv6_split_include")

    @ipv6_split_include.setter
    def ipv6_split_include(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_split_include", value)

    @property
    @pulumi.getter(name="ipv6StartIp")
    def ipv6_start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start of IPv6 range.
        """
        return pulumi.get(self, "ipv6_start_ip")

    @ipv6_start_ip.setter
    def ipv6_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_start_ip", value)

    @property
    @pulumi.getter
    def keepalive(self) -> Optional[pulumi.Input[int]]:
        """
        NAT-T keep alive interval.
        """
        return pulumi.get(self, "keepalive")

    @keepalive.setter
    def keepalive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive", value)

    @property
    @pulumi.getter
    def keylife(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait in seconds before phase 1 encryption key expires.
        """
        return pulumi.get(self, "keylife")

    @keylife.setter
    def keylife(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keylife", value)

    @property
    @pulumi.getter
    def kms(self) -> Optional[pulumi.Input[str]]:
        """
        Key Management Services server.
        """
        return pulumi.get(self, "kms")

    @kms.setter
    def kms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms", value)

    @property
    @pulumi.getter(name="linkCost")
    def link_cost(self) -> Optional[pulumi.Input[int]]:
        """
        VPN tunnel underlay link cost.
        """
        return pulumi.get(self, "link_cost")

    @link_cost.setter
    def link_cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_cost", value)

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the local gateway's external interface.
        """
        return pulumi.get(self, "local_gw")

    @local_gw.setter
    def local_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw", value)

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the local gateway's external interface.
        """
        return pulumi.get(self, "local_gw6")

    @local_gw6.setter
    def local_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw6", value)

    @property
    @pulumi.getter
    def localid(self) -> Optional[pulumi.Input[str]]:
        """
        Local ID.
        """
        return pulumi.get(self, "localid")

    @localid.setter
    def localid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localid", value)

    @property
    @pulumi.getter(name="localidType")
    def localid_type(self) -> Optional[pulumi.Input[str]]:
        """
        Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
        """
        return pulumi.get(self, "localid_type")

    @localid_type.setter
    def localid_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localid_type", value)

    @property
    @pulumi.getter(name="loopbackAsymroute")
    def loopback_asymroute(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "loopback_asymroute")

    @loopback_asymroute.setter
    def loopback_asymroute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loopback_asymroute", value)

    @property
    @pulumi.getter(name="meshSelectorType")
    def mesh_selector_type(self) -> Optional[pulumi.Input[str]]:
        """
        Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
        """
        return pulumi.get(self, "mesh_selector_type")

    @mesh_selector_type.setter
    def mesh_selector_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_selector_type", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="modeCfg")
    def mode_cfg(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable configuration method. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mode_cfg")

    @mode_cfg.setter
    def mode_cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_cfg", value)

    @property
    @pulumi.getter(name="modeCfgAllowClientSelector")
    def mode_cfg_allow_client_selector(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mode_cfg_allow_client_selector")

    @mode_cfg_allow_client_selector.setter
    def mode_cfg_allow_client_selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_cfg_allow_client_selector", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec interface as backup for primary interface.
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter(name="monitorHoldDownDelay")
    def monitor_hold_down_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait in seconds before recovery once primary re-establishes.
        """
        return pulumi.get(self, "monitor_hold_down_delay")

    @monitor_hold_down_delay.setter
    def monitor_hold_down_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_hold_down_delay", value)

    @property
    @pulumi.getter(name="monitorHoldDownTime")
    def monitor_hold_down_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time of day at which to fail back to primary after it re-establishes.
        """
        return pulumi.get(self, "monitor_hold_down_time")

    @monitor_hold_down_time.setter
    def monitor_hold_down_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_hold_down_time", value)

    @property
    @pulumi.getter(name="monitorHoldDownType")
    def monitor_hold_down_type(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
        """
        return pulumi.get(self, "monitor_hold_down_type")

    @monitor_hold_down_type.setter
    def monitor_hold_down_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_hold_down_type", value)

    @property
    @pulumi.getter(name="monitorHoldDownWeekday")
    def monitor_hold_down_weekday(self) -> Optional[pulumi.Input[str]]:
        """
        Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "monitor_hold_down_weekday")

    @monitor_hold_down_weekday.setter
    def monitor_hold_down_weekday(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_hold_down_weekday", value)

    @property
    @pulumi.getter(name="monitorMin")
    def monitor_min(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
        """
        return pulumi.get(self, "monitor_min")

    @monitor_min.setter
    def monitor_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_min", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec remote gateway name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nattraversal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
        """
        return pulumi.get(self, "nattraversal")

    @nattraversal.setter
    def nattraversal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nattraversal", value)

    @property
    @pulumi.getter(name="negotiateTimeout")
    def negotiate_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        IKE SA negotiation timeout in seconds (1 - 300).
        """
        return pulumi.get(self, "negotiate_timeout")

    @negotiate_timeout.setter
    def negotiate_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "negotiate_timeout", value)

    @property
    @pulumi.getter(name="netDevice")
    def net_device(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable kernel device creation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "net_device")

    @net_device.setter
    def net_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_device", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[int]]:
        """
        VPN gateway network ID.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="networkOverlay")
    def network_overlay(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable network overlays. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "network_overlay")

    @network_overlay.setter
    def network_overlay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_overlay", value)

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable offloading NPU. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "npu_offload")

    @npu_offload.setter
    def npu_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npu_offload", value)

    @property
    @pulumi.getter(name="packetRedistribution")
    def packet_redistribution(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "packet_redistribution")

    @packet_redistribution.setter
    def packet_redistribution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_redistribution", value)

    @property
    @pulumi.getter(name="passiveMode")
    def passive_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive_mode")

    @passive_mode.setter
    def passive_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive_mode", value)

    @property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer certificate.
        """
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer", value)

    @property
    @pulumi.getter
    def peergrp(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer certificate group.
        """
        return pulumi.get(self, "peergrp")

    @peergrp.setter
    def peergrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peergrp", value)

    @property
    @pulumi.getter
    def peerid(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer identity.
        """
        return pulumi.get(self, "peerid")

    @peerid.setter
    def peerid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peerid", value)

    @property
    @pulumi.getter
    def peertype(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
        """
        return pulumi.get(self, "peertype")

    @peertype.setter
    def peertype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peertype", value)

    @property
    @pulumi.getter
    def ppk(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
        """
        return pulumi.get(self, "ppk")

    @ppk.setter
    def ppk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk", value)

    @property
    @pulumi.getter(name="ppkIdentity")
    def ppk_identity(self) -> Optional[pulumi.Input[str]]:
        """
        IKEv2 Postquantum Preshared Key Identity.
        """
        return pulumi.get(self, "ppk_identity")

    @ppk_identity.setter
    def ppk_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_identity", value)

    @property
    @pulumi.getter(name="ppkSecret")
    def ppk_secret(self) -> Optional[pulumi.Input[str]]:
        """
        IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        """
        return pulumi.get(self, "ppk_secret")

    @ppk_secret.setter
    def ppk_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_secret", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority for routes added by IKE (0 - 4294967295).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def psksecret(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        """
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter(name="psksecretRemote")
    def psksecret_remote(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        """
        return pulumi.get(self, "psksecret_remote")

    @psksecret_remote.setter
    def psksecret_remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret_remote", value)

    @property
    @pulumi.getter
    def qkd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
        """
        return pulumi.get(self, "qkd")

    @qkd.setter
    def qkd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qkd", value)

    @property
    @pulumi.getter(name="qkdProfile")
    def qkd_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Quantum Key Distribution (QKD) server profile.
        """
        return pulumi.get(self, "qkd_profile")

    @qkd_profile.setter
    def qkd_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qkd_profile", value)

    @property
    @pulumi.getter
    def reauth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "reauth")

    @reauth.setter
    def reauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reauth", value)

    @property
    @pulumi.getter
    def rekey(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rekey")

    @rekey.setter
    def rekey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rekey", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the remote gateway's external interface.
        """
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the remote gateway's external interface.
        """
        return pulumi.get(self, "remote_gw6")

    @remote_gw6.setter
    def remote_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw6", value)

    @property
    @pulumi.getter(name="remotegwDdns")
    def remotegw_ddns(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name of remote gateway (eg. name.DDNS.com).
        """
        return pulumi.get(self, "remotegw_ddns")

    @remotegw_ddns.setter
    def remotegw_ddns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remotegw_ddns", value)

    @property
    @pulumi.getter(name="rsaSignatureFormat")
    def rsa_signature_format(self) -> Optional[pulumi.Input[str]]:
        """
        Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
        """
        return pulumi.get(self, "rsa_signature_format")

    @rsa_signature_format.setter
    def rsa_signature_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsa_signature_format", value)

    @property
    @pulumi.getter(name="rsaSignatureHashOverride")
    def rsa_signature_hash_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rsa_signature_hash_override")

    @rsa_signature_hash_override.setter
    def rsa_signature_hash_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsa_signature_hash_override", value)

    @property
    @pulumi.getter(name="savePassword")
    def save_password(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "save_password")

    @save_password.setter
    def save_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "save_password", value)

    @property
    @pulumi.getter(name="sendCertChain")
    def send_cert_chain(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "send_cert_chain")

    @send_cert_chain.setter
    def send_cert_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_cert_chain", value)

    @property
    @pulumi.getter(name="signatureHashAlg")
    def signature_hash_alg(self) -> Optional[pulumi.Input[str]]:
        """
        Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
        """
        return pulumi.get(self, "signature_hash_alg")

    @signature_hash_alg.setter
    def signature_hash_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_hash_alg", value)

    @property
    @pulumi.getter(name="splitIncludeService")
    def split_include_service(self) -> Optional[pulumi.Input[str]]:
        """
        Split-include services.
        """
        return pulumi.get(self, "split_include_service")

    @split_include_service.setter
    def split_include_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_include_service", value)

    @property
    @pulumi.getter(name="suiteB")
    def suite_b(self) -> Optional[pulumi.Input[str]]:
        """
        Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
        """
        return pulumi.get(self, "suite_b")

    @suite_b.setter
    def suite_b(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suite_b", value)

    @property
    @pulumi.getter
    def transport(self) -> Optional[pulumi.Input[str]]:
        """
        Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
        """
        return pulumi.get(self, "transport")

    @transport.setter
    def transport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport", value)

    @property
    @pulumi.getter(name="tunnelSearch")
    def tunnel_search(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
        """
        return pulumi.get(self, "tunnel_search")

    @tunnel_search.setter
    def tunnel_search(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_search", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="unitySupport")
    def unity_support(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "unity_support")

    @unity_support.setter
    def unity_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unity_support", value)

    @property
    @pulumi.getter
    def usrgrp(self) -> Optional[pulumi.Input[str]]:
        """
        User group name for dialup peers.
        """
        return pulumi.get(self, "usrgrp")

    @usrgrp.setter
    def usrgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usrgrp", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vni(self) -> Optional[pulumi.Input[int]]:
        """
        VNI of VXLAN tunnel.
        """
        return pulumi.get(self, "vni")

    @vni.setter
    def vni(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vni", value)

    @property
    @pulumi.getter(name="wizardType")
    def wizard_type(self) -> Optional[pulumi.Input[str]]:
        """
        GUI VPN Wizard Type.
        """
        return pulumi.get(self, "wizard_type")

    @wizard_type.setter
    def wizard_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wizard_type", value)

    @property
    @pulumi.getter
    def xauthtype(self) -> Optional[pulumi.Input[str]]:
        """
        XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
        """
        return pulumi.get(self, "xauthtype")

    @xauthtype.setter
    def xauthtype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "xauthtype", value)


@pulumi.input_type
class _Phase1interfaceState:
    def __init__(__self__, *,
                 acct_verify: Optional[pulumi.Input[str]] = None,
                 add_gw_route: Optional[pulumi.Input[str]] = None,
                 add_route: Optional[pulumi.Input[str]] = None,
                 aggregate_member: Optional[pulumi.Input[str]] = None,
                 aggregate_weight: Optional[pulumi.Input[int]] = None,
                 assign_ip: Optional[pulumi.Input[str]] = None,
                 assign_ip_from: Optional[pulumi.Input[str]] = None,
                 authmethod: Optional[pulumi.Input[str]] = None,
                 authmethod_remote: Optional[pulumi.Input[str]] = None,
                 authpasswd: Optional[pulumi.Input[str]] = None,
                 authusr: Optional[pulumi.Input[str]] = None,
                 authusrgrp: Optional[pulumi.Input[str]] = None,
                 auto_discovery_crossover: Optional[pulumi.Input[str]] = None,
                 auto_discovery_forwarder: Optional[pulumi.Input[str]] = None,
                 auto_discovery_offer_interval: Optional[pulumi.Input[int]] = None,
                 auto_discovery_psk: Optional[pulumi.Input[str]] = None,
                 auto_discovery_receiver: Optional[pulumi.Input[str]] = None,
                 auto_discovery_sender: Optional[pulumi.Input[str]] = None,
                 auto_discovery_shortcuts: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 azure_ad_autoconnect: Optional[pulumi.Input[str]] = None,
                 backup_gateways: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceBackupGatewayArgs']]]] = None,
                 banner: Optional[pulumi.Input[str]] = None,
                 cert_id_validation: Optional[pulumi.Input[str]] = None,
                 cert_trust_store: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceCertificateArgs']]]] = None,
                 childless_ike: Optional[pulumi.Input[str]] = None,
                 client_auto_negotiate: Optional[pulumi.Input[str]] = None,
                 client_keep_alive: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 default_gw: Optional[pulumi.Input[str]] = None,
                 default_gw_priority: Optional[pulumi.Input[int]] = None,
                 dev_id: Optional[pulumi.Input[str]] = None,
                 dev_id_notification: Optional[pulumi.Input[str]] = None,
                 dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
                 dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 digital_signature_auth: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dns_mode: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dpd: Optional[pulumi.Input[str]] = None,
                 dpd_retrycount: Optional[pulumi.Input[int]] = None,
                 dpd_retryinterval: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eap: Optional[pulumi.Input[str]] = None,
                 eap_cert_auth: Optional[pulumi.Input[str]] = None,
                 eap_exclude_peergrp: Optional[pulumi.Input[str]] = None,
                 eap_identity: Optional[pulumi.Input[str]] = None,
                 ems_sn_check: Optional[pulumi.Input[str]] = None,
                 encap_local_gw4: Optional[pulumi.Input[str]] = None,
                 encap_local_gw6: Optional[pulumi.Input[str]] = None,
                 encap_remote_gw4: Optional[pulumi.Input[str]] = None,
                 encap_remote_gw6: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 encapsulation_address: Optional[pulumi.Input[str]] = None,
                 enforce_unique_id: Optional[pulumi.Input[str]] = None,
                 esn: Optional[pulumi.Input[str]] = None,
                 exchange_fgt_device_id: Optional[pulumi.Input[str]] = None,
                 exchange_interface_ip: Optional[pulumi.Input[str]] = None,
                 exchange_ip_addr4: Optional[pulumi.Input[str]] = None,
                 exchange_ip_addr6: Optional[pulumi.Input[str]] = None,
                 fallback_tcp_threshold: Optional[pulumi.Input[int]] = None,
                 fec_base: Optional[pulumi.Input[int]] = None,
                 fec_codec: Optional[pulumi.Input[int]] = None,
                 fec_codec_string: Optional[pulumi.Input[str]] = None,
                 fec_egress: Optional[pulumi.Input[str]] = None,
                 fec_health_check: Optional[pulumi.Input[str]] = None,
                 fec_ingress: Optional[pulumi.Input[str]] = None,
                 fec_mapping_profile: Optional[pulumi.Input[str]] = None,
                 fec_receive_timeout: Optional[pulumi.Input[int]] = None,
                 fec_redundant: Optional[pulumi.Input[int]] = None,
                 fec_send_timeout: Optional[pulumi.Input[int]] = None,
                 fgsp_sync: Optional[pulumi.Input[str]] = None,
                 forticlient_enforcement: Optional[pulumi.Input[str]] = None,
                 fortinet_esp: Optional[pulumi.Input[str]] = None,
                 fragmentation: Optional[pulumi.Input[str]] = None,
                 fragmentation_mtu: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_authentication: Optional[pulumi.Input[str]] = None,
                 group_authentication_secret: Optional[pulumi.Input[str]] = None,
                 ha_sync_esp_seqno: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[str]] = None,
                 idle_timeoutinterval: Optional[pulumi.Input[int]] = None,
                 ike_version: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 include_local_lan: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 internal_domain_lists: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceInternalDomainListArgs']]]] = None,
                 ip_delay_interval: Optional[pulumi.Input[int]] = None,
                 ip_fragmentation: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv4_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv4ExcludeRangeArgs']]]] = None,
                 ipv4_name: Optional[pulumi.Input[str]] = None,
                 ipv4_netmask: Optional[pulumi.Input[str]] = None,
                 ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv4_split_include: Optional[pulumi.Input[str]] = None,
                 ipv4_start_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv6_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv6_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv6ExcludeRangeArgs']]]] = None,
                 ipv6_name: Optional[pulumi.Input[str]] = None,
                 ipv6_prefix: Optional[pulumi.Input[int]] = None,
                 ipv6_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv6_split_include: Optional[pulumi.Input[str]] = None,
                 ipv6_start_ip: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[int]] = None,
                 keylife: Optional[pulumi.Input[int]] = None,
                 kms: Optional[pulumi.Input[str]] = None,
                 link_cost: Optional[pulumi.Input[int]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 localid: Optional[pulumi.Input[str]] = None,
                 localid_type: Optional[pulumi.Input[str]] = None,
                 loopback_asymroute: Optional[pulumi.Input[str]] = None,
                 mesh_selector_type: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mode_cfg: Optional[pulumi.Input[str]] = None,
                 mode_cfg_allow_client_selector: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 monitor_hold_down_delay: Optional[pulumi.Input[int]] = None,
                 monitor_hold_down_time: Optional[pulumi.Input[str]] = None,
                 monitor_hold_down_type: Optional[pulumi.Input[str]] = None,
                 monitor_hold_down_weekday: Optional[pulumi.Input[str]] = None,
                 monitor_min: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nattraversal: Optional[pulumi.Input[str]] = None,
                 negotiate_timeout: Optional[pulumi.Input[int]] = None,
                 net_device: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[int]] = None,
                 network_overlay: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 packet_redistribution: Optional[pulumi.Input[str]] = None,
                 passive_mode: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 peergrp: Optional[pulumi.Input[str]] = None,
                 peerid: Optional[pulumi.Input[str]] = None,
                 peertype: Optional[pulumi.Input[str]] = None,
                 ppk: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 psksecret_remote: Optional[pulumi.Input[str]] = None,
                 qkd: Optional[pulumi.Input[str]] = None,
                 qkd_profile: Optional[pulumi.Input[str]] = None,
                 reauth: Optional[pulumi.Input[str]] = None,
                 rekey: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 remotegw_ddns: Optional[pulumi.Input[str]] = None,
                 rsa_signature_format: Optional[pulumi.Input[str]] = None,
                 rsa_signature_hash_override: Optional[pulumi.Input[str]] = None,
                 save_password: Optional[pulumi.Input[str]] = None,
                 send_cert_chain: Optional[pulumi.Input[str]] = None,
                 signature_hash_alg: Optional[pulumi.Input[str]] = None,
                 split_include_service: Optional[pulumi.Input[str]] = None,
                 suite_b: Optional[pulumi.Input[str]] = None,
                 transport: Optional[pulumi.Input[str]] = None,
                 tunnel_search: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unity_support: Optional[pulumi.Input[str]] = None,
                 usrgrp: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vni: Optional[pulumi.Input[int]] = None,
                 wizard_type: Optional[pulumi.Input[str]] = None,
                 xauthtype: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Phase1interface resources.
        :param pulumi.Input[str] acct_verify: Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] add_gw_route: Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] add_route: Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] aggregate_member: Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] aggregate_weight: Link weight for aggregate.
        :param pulumi.Input[str] assign_ip: Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] assign_ip_from: Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
        :param pulumi.Input[str] authmethod: Authentication method. Valid values: `psk`, `signature`.
        :param pulumi.Input[str] authmethod_remote: Authentication method (remote side). Valid values: `psk`, `signature`.
        :param pulumi.Input[str] authpasswd: XAuth password (max 35 characters).
        :param pulumi.Input[str] authusr: XAuth user name.
        :param pulumi.Input[str] authusrgrp: Authentication user group.
        :param pulumi.Input[str] auto_discovery_crossover: Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
        :param pulumi.Input[str] auto_discovery_forwarder: Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_discovery_offer_interval: Interval between shortcut offer messages in seconds (1 - 300, default = 5).
        :param pulumi.Input[str] auto_discovery_psk: Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_receiver: Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_sender: Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_shortcuts: Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
        :param pulumi.Input[str] auto_negotiate: Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] azure_ad_autoconnect: Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['Phase1interfaceBackupGatewayArgs']]] backup_gateways: Instruct unity clients about the backup gateway address(es). The structure of `backup_gateway` block is documented below.
        :param pulumi.Input[str] banner: Message that unity client should display after connecting.
        :param pulumi.Input[str] cert_id_validation: Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cert_trust_store: CA certificate trust store. Valid values: `local`, `ems`.
        :param pulumi.Input[Sequence[pulumi.Input['Phase1interfaceCertificateArgs']]] certificates: The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
        :param pulumi.Input[str] childless_ike: Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] client_auto_negotiate: Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] client_keep_alive: Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] default_gw: IPv4 address of default route gateway to use for traffic exiting the interface.
        :param pulumi.Input[int] default_gw_priority: Priority for default gateway route. A higher priority number signifies a less preferred route.
        :param pulumi.Input[str] dev_id: Device ID carried by the device ID notification.
        :param pulumi.Input[str] dev_id_notification: Enable/disable device ID notification. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp6_ra_linkaddr: Relay agent IPv6 link address to use in DHCP6 requests.
        :param pulumi.Input[str] dhcp_ra_giaddr: Relay agent gateway IP address to use in the giaddr field of DHCP requests.
        :param pulumi.Input[str] dhgrp: DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        :param pulumi.Input[str] digital_signature_auth: Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] distance: Distance for routes added by IKE (1 - 255).
        :param pulumi.Input[str] dns_mode: DNS server mode. Valid values: `manual`, `auto`.
        :param pulumi.Input[str] domain: Instruct unity clients about the default DNS domain.
        :param pulumi.Input[str] dpd: Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
        :param pulumi.Input[int] dpd_retrycount: Number of DPD retry attempts.
        :param pulumi.Input[str] dpd_retryinterval: DPD retry interval.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] eap: Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] eap_cert_auth: Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] eap_exclude_peergrp: Peer group excluded from EAP authentication.
        :param pulumi.Input[str] eap_identity: IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
        :param pulumi.Input[str] ems_sn_check: Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] encap_local_gw4: Local IPv4 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encap_local_gw6: Local IPv6 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encap_remote_gw4: Remote IPv4 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encap_remote_gw6: Remote IPv6 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encapsulation: Enable/disable GRE/VXLAN encapsulation.
        :param pulumi.Input[str] encapsulation_address: Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
        :param pulumi.Input[str] enforce_unique_id: Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
        :param pulumi.Input[str] esn: Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
        :param pulumi.Input[str] exchange_fgt_device_id: Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] exchange_interface_ip: Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] exchange_ip_addr4: IPv4 address to exchange with peers.
        :param pulumi.Input[str] exchange_ip_addr6: IPv6 address to exchange with peers
        :param pulumi.Input[int] fallback_tcp_threshold: Timeout in seconds before falling back IKE/IPsec traffic to tcp.
        :param pulumi.Input[int] fec_base: Number of base Forward Error Correction packets (1 - 100).
        :param pulumi.Input[int] fec_codec: ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
        :param pulumi.Input[str] fec_codec_string: Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
        :param pulumi.Input[str] fec_egress: Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fec_health_check: SD-WAN health check.
        :param pulumi.Input[str] fec_ingress: Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fec_mapping_profile: Forward Error Correction (FEC) mapping profile.
        :param pulumi.Input[int] fec_receive_timeout: Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
        :param pulumi.Input[int] fec_redundant: Number of redundant Forward Error Correction packets (1 - 100).
        :param pulumi.Input[int] fec_send_timeout: Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
        :param pulumi.Input[str] fgsp_sync: Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_enforcement: Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortinet_esp: Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fragmentation: Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fragmentation_mtu: IKE fragmentation MTU (500 - 16000).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_authentication: Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] group_authentication_secret: Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
        :param pulumi.Input[str] ha_sync_esp_seqno: Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] idle_timeout: Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] idle_timeoutinterval: IPsec tunnel idle timeout in minutes (5 - 43200).
        :param pulumi.Input[str] ike_version: IKE protocol version. Valid values: `1`, `2`.
        :param pulumi.Input[str] inbound_dscp_copy: Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] include_local_lan: Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] interface: Local physical, aggregate, or VLAN outgoing interface.
        :param pulumi.Input[Sequence[pulumi.Input['Phase1interfaceInternalDomainListArgs']]] internal_domain_lists: One or more internal domain names in quotes separated by spaces. The structure of `internal_domain_list` block is documented below.
        :param pulumi.Input[int] ip_delay_interval: IP address reuse delay interval in seconds (0 - 28800).
        :param pulumi.Input[str] ip_fragmentation: Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
        :param pulumi.Input[str] ip_version: IP version to use for VPN interface. Valid values: `4`, `6`.
        :param pulumi.Input[str] ipv4_dns_server1: IPv4 DNS server 1.
        :param pulumi.Input[str] ipv4_dns_server2: IPv4 DNS server 2.
        :param pulumi.Input[str] ipv4_dns_server3: IPv4 DNS server 3.
        :param pulumi.Input[str] ipv4_end_ip: End of IPv4 range.
        :param pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv4ExcludeRangeArgs']]] ipv4_exclude_ranges: Configuration Method IPv4 exclude ranges. The structure of `ipv4_exclude_range` block is documented below.
        :param pulumi.Input[str] ipv4_name: IPv4 address name.
        :param pulumi.Input[str] ipv4_netmask: IPv4 Netmask.
        :param pulumi.Input[str] ipv4_split_exclude: IPv4 subnets that should not be sent over the IPsec tunnel.
        :param pulumi.Input[str] ipv4_split_include: IPv4 split-include subnets.
        :param pulumi.Input[str] ipv4_start_ip: Start of IPv4 range.
        :param pulumi.Input[str] ipv4_wins_server1: WINS server 1.
        :param pulumi.Input[str] ipv4_wins_server2: WINS server 2.
        :param pulumi.Input[str] ipv6_dns_server1: IPv6 DNS server 1.
        :param pulumi.Input[str] ipv6_dns_server2: IPv6 DNS server 2.
        :param pulumi.Input[str] ipv6_dns_server3: IPv6 DNS server 3.
        :param pulumi.Input[str] ipv6_end_ip: End of IPv6 range.
        :param pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv6ExcludeRangeArgs']]] ipv6_exclude_ranges: Configuration method IPv6 exclude ranges. The structure of `ipv6_exclude_range` block is documented below.
        :param pulumi.Input[str] ipv6_name: IPv6 address name.
        :param pulumi.Input[int] ipv6_prefix: IPv6 prefix.
        :param pulumi.Input[str] ipv6_split_exclude: IPv6 subnets that should not be sent over the IPsec tunnel.
        :param pulumi.Input[str] ipv6_split_include: IPv6 split-include subnets.
        :param pulumi.Input[str] ipv6_start_ip: Start of IPv6 range.
        :param pulumi.Input[int] keepalive: NAT-T keep alive interval.
        :param pulumi.Input[int] keylife: Time to wait in seconds before phase 1 encryption key expires.
        :param pulumi.Input[str] kms: Key Management Services server.
        :param pulumi.Input[int] link_cost: VPN tunnel underlay link cost.
        :param pulumi.Input[str] local_gw: IPv4 address of the local gateway's external interface.
        :param pulumi.Input[str] local_gw6: IPv6 address of the local gateway's external interface.
        :param pulumi.Input[str] localid: Local ID.
        :param pulumi.Input[str] localid_type: Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
        :param pulumi.Input[str] loopback_asymroute: Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mesh_selector_type: Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
        :param pulumi.Input[str] mode: The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
        :param pulumi.Input[str] mode_cfg: Enable/disable configuration method. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] mode_cfg_allow_client_selector: Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] monitor: IPsec interface as backup for primary interface.
        :param pulumi.Input[int] monitor_hold_down_delay: Time to wait in seconds before recovery once primary re-establishes.
        :param pulumi.Input[str] monitor_hold_down_time: Time of day at which to fail back to primary after it re-establishes.
        :param pulumi.Input[str] monitor_hold_down_type: Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
        :param pulumi.Input[str] monitor_hold_down_weekday: Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[int] monitor_min: Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
        :param pulumi.Input[str] name: IPsec remote gateway name.
        :param pulumi.Input[str] nattraversal: Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
        :param pulumi.Input[int] negotiate_timeout: IKE SA negotiation timeout in seconds (1 - 300).
        :param pulumi.Input[str] net_device: Enable/disable kernel device creation. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] network_id: VPN gateway network ID.
        :param pulumi.Input[str] network_overlay: Enable/disable network overlays. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] npu_offload: Enable/disable offloading NPU. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] packet_redistribution: Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] passive_mode: Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] peer: Accept this peer certificate.
        :param pulumi.Input[str] peergrp: Accept this peer certificate group.
        :param pulumi.Input[str] peerid: Accept this peer identity.
        :param pulumi.Input[str] peertype: Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
        :param pulumi.Input[str] ppk: Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
        :param pulumi.Input[str] ppk_identity: IKEv2 Postquantum Preshared Key Identity.
        :param pulumi.Input[str] ppk_secret: IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[int] priority: Priority for routes added by IKE (0 - 4294967295).
        :param pulumi.Input[str] proposal: Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        :param pulumi.Input[str] psksecret: Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[str] psksecret_remote: Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[str] qkd: Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
        :param pulumi.Input[str] qkd_profile: Quantum Key Distribution (QKD) server profile.
        :param pulumi.Input[str] reauth: Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] rekey: Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_gw: IPv4 address of the remote gateway's external interface.
        :param pulumi.Input[str] remote_gw6: IPv6 address of the remote gateway's external interface.
        :param pulumi.Input[str] remotegw_ddns: Domain name of remote gateway (eg. name.DDNS.com).
        :param pulumi.Input[str] rsa_signature_format: Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
        :param pulumi.Input[str] rsa_signature_hash_override: Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] save_password: Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] send_cert_chain: Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] signature_hash_alg: Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
        :param pulumi.Input[str] split_include_service: Split-include services.
        :param pulumi.Input[str] suite_b: Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
        :param pulumi.Input[str] transport: Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
        :param pulumi.Input[str] tunnel_search: Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
        :param pulumi.Input[str] type: Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
        :param pulumi.Input[str] unity_support: Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] usrgrp: User group name for dialup peers.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] vni: VNI of VXLAN tunnel.
        :param pulumi.Input[str] wizard_type: GUI VPN Wizard Type.
        :param pulumi.Input[str] xauthtype: XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
        """
        if acct_verify is not None:
            pulumi.set(__self__, "acct_verify", acct_verify)
        if add_gw_route is not None:
            pulumi.set(__self__, "add_gw_route", add_gw_route)
        if add_route is not None:
            pulumi.set(__self__, "add_route", add_route)
        if aggregate_member is not None:
            pulumi.set(__self__, "aggregate_member", aggregate_member)
        if aggregate_weight is not None:
            pulumi.set(__self__, "aggregate_weight", aggregate_weight)
        if assign_ip is not None:
            pulumi.set(__self__, "assign_ip", assign_ip)
        if assign_ip_from is not None:
            pulumi.set(__self__, "assign_ip_from", assign_ip_from)
        if authmethod is not None:
            pulumi.set(__self__, "authmethod", authmethod)
        if authmethod_remote is not None:
            pulumi.set(__self__, "authmethod_remote", authmethod_remote)
        if authpasswd is not None:
            pulumi.set(__self__, "authpasswd", authpasswd)
        if authusr is not None:
            pulumi.set(__self__, "authusr", authusr)
        if authusrgrp is not None:
            pulumi.set(__self__, "authusrgrp", authusrgrp)
        if auto_discovery_crossover is not None:
            pulumi.set(__self__, "auto_discovery_crossover", auto_discovery_crossover)
        if auto_discovery_forwarder is not None:
            pulumi.set(__self__, "auto_discovery_forwarder", auto_discovery_forwarder)
        if auto_discovery_offer_interval is not None:
            pulumi.set(__self__, "auto_discovery_offer_interval", auto_discovery_offer_interval)
        if auto_discovery_psk is not None:
            pulumi.set(__self__, "auto_discovery_psk", auto_discovery_psk)
        if auto_discovery_receiver is not None:
            pulumi.set(__self__, "auto_discovery_receiver", auto_discovery_receiver)
        if auto_discovery_sender is not None:
            pulumi.set(__self__, "auto_discovery_sender", auto_discovery_sender)
        if auto_discovery_shortcuts is not None:
            pulumi.set(__self__, "auto_discovery_shortcuts", auto_discovery_shortcuts)
        if auto_negotiate is not None:
            pulumi.set(__self__, "auto_negotiate", auto_negotiate)
        if azure_ad_autoconnect is not None:
            pulumi.set(__self__, "azure_ad_autoconnect", azure_ad_autoconnect)
        if backup_gateways is not None:
            pulumi.set(__self__, "backup_gateways", backup_gateways)
        if banner is not None:
            pulumi.set(__self__, "banner", banner)
        if cert_id_validation is not None:
            pulumi.set(__self__, "cert_id_validation", cert_id_validation)
        if cert_trust_store is not None:
            pulumi.set(__self__, "cert_trust_store", cert_trust_store)
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if childless_ike is not None:
            pulumi.set(__self__, "childless_ike", childless_ike)
        if client_auto_negotiate is not None:
            pulumi.set(__self__, "client_auto_negotiate", client_auto_negotiate)
        if client_keep_alive is not None:
            pulumi.set(__self__, "client_keep_alive", client_keep_alive)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if default_gw is not None:
            pulumi.set(__self__, "default_gw", default_gw)
        if default_gw_priority is not None:
            pulumi.set(__self__, "default_gw_priority", default_gw_priority)
        if dev_id is not None:
            pulumi.set(__self__, "dev_id", dev_id)
        if dev_id_notification is not None:
            pulumi.set(__self__, "dev_id_notification", dev_id_notification)
        if dhcp6_ra_linkaddr is not None:
            pulumi.set(__self__, "dhcp6_ra_linkaddr", dhcp6_ra_linkaddr)
        if dhcp_ra_giaddr is not None:
            pulumi.set(__self__, "dhcp_ra_giaddr", dhcp_ra_giaddr)
        if dhgrp is not None:
            pulumi.set(__self__, "dhgrp", dhgrp)
        if digital_signature_auth is not None:
            pulumi.set(__self__, "digital_signature_auth", digital_signature_auth)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dns_mode is not None:
            pulumi.set(__self__, "dns_mode", dns_mode)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dpd is not None:
            pulumi.set(__self__, "dpd", dpd)
        if dpd_retrycount is not None:
            pulumi.set(__self__, "dpd_retrycount", dpd_retrycount)
        if dpd_retryinterval is not None:
            pulumi.set(__self__, "dpd_retryinterval", dpd_retryinterval)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if eap is not None:
            pulumi.set(__self__, "eap", eap)
        if eap_cert_auth is not None:
            pulumi.set(__self__, "eap_cert_auth", eap_cert_auth)
        if eap_exclude_peergrp is not None:
            pulumi.set(__self__, "eap_exclude_peergrp", eap_exclude_peergrp)
        if eap_identity is not None:
            pulumi.set(__self__, "eap_identity", eap_identity)
        if ems_sn_check is not None:
            pulumi.set(__self__, "ems_sn_check", ems_sn_check)
        if encap_local_gw4 is not None:
            pulumi.set(__self__, "encap_local_gw4", encap_local_gw4)
        if encap_local_gw6 is not None:
            pulumi.set(__self__, "encap_local_gw6", encap_local_gw6)
        if encap_remote_gw4 is not None:
            pulumi.set(__self__, "encap_remote_gw4", encap_remote_gw4)
        if encap_remote_gw6 is not None:
            pulumi.set(__self__, "encap_remote_gw6", encap_remote_gw6)
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if encapsulation_address is not None:
            pulumi.set(__self__, "encapsulation_address", encapsulation_address)
        if enforce_unique_id is not None:
            pulumi.set(__self__, "enforce_unique_id", enforce_unique_id)
        if esn is not None:
            pulumi.set(__self__, "esn", esn)
        if exchange_fgt_device_id is not None:
            pulumi.set(__self__, "exchange_fgt_device_id", exchange_fgt_device_id)
        if exchange_interface_ip is not None:
            pulumi.set(__self__, "exchange_interface_ip", exchange_interface_ip)
        if exchange_ip_addr4 is not None:
            pulumi.set(__self__, "exchange_ip_addr4", exchange_ip_addr4)
        if exchange_ip_addr6 is not None:
            pulumi.set(__self__, "exchange_ip_addr6", exchange_ip_addr6)
        if fallback_tcp_threshold is not None:
            pulumi.set(__self__, "fallback_tcp_threshold", fallback_tcp_threshold)
        if fec_base is not None:
            pulumi.set(__self__, "fec_base", fec_base)
        if fec_codec is not None:
            pulumi.set(__self__, "fec_codec", fec_codec)
        if fec_codec_string is not None:
            pulumi.set(__self__, "fec_codec_string", fec_codec_string)
        if fec_egress is not None:
            pulumi.set(__self__, "fec_egress", fec_egress)
        if fec_health_check is not None:
            pulumi.set(__self__, "fec_health_check", fec_health_check)
        if fec_ingress is not None:
            pulumi.set(__self__, "fec_ingress", fec_ingress)
        if fec_mapping_profile is not None:
            pulumi.set(__self__, "fec_mapping_profile", fec_mapping_profile)
        if fec_receive_timeout is not None:
            pulumi.set(__self__, "fec_receive_timeout", fec_receive_timeout)
        if fec_redundant is not None:
            pulumi.set(__self__, "fec_redundant", fec_redundant)
        if fec_send_timeout is not None:
            pulumi.set(__self__, "fec_send_timeout", fec_send_timeout)
        if fgsp_sync is not None:
            pulumi.set(__self__, "fgsp_sync", fgsp_sync)
        if forticlient_enforcement is not None:
            pulumi.set(__self__, "forticlient_enforcement", forticlient_enforcement)
        if fortinet_esp is not None:
            pulumi.set(__self__, "fortinet_esp", fortinet_esp)
        if fragmentation is not None:
            pulumi.set(__self__, "fragmentation", fragmentation)
        if fragmentation_mtu is not None:
            pulumi.set(__self__, "fragmentation_mtu", fragmentation_mtu)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_authentication is not None:
            pulumi.set(__self__, "group_authentication", group_authentication)
        if group_authentication_secret is not None:
            pulumi.set(__self__, "group_authentication_secret", group_authentication_secret)
        if ha_sync_esp_seqno is not None:
            pulumi.set(__self__, "ha_sync_esp_seqno", ha_sync_esp_seqno)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if idle_timeoutinterval is not None:
            pulumi.set(__self__, "idle_timeoutinterval", idle_timeoutinterval)
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if inbound_dscp_copy is not None:
            pulumi.set(__self__, "inbound_dscp_copy", inbound_dscp_copy)
        if include_local_lan is not None:
            pulumi.set(__self__, "include_local_lan", include_local_lan)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if internal_domain_lists is not None:
            pulumi.set(__self__, "internal_domain_lists", internal_domain_lists)
        if ip_delay_interval is not None:
            pulumi.set(__self__, "ip_delay_interval", ip_delay_interval)
        if ip_fragmentation is not None:
            pulumi.set(__self__, "ip_fragmentation", ip_fragmentation)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if ipv4_dns_server1 is not None:
            pulumi.set(__self__, "ipv4_dns_server1", ipv4_dns_server1)
        if ipv4_dns_server2 is not None:
            pulumi.set(__self__, "ipv4_dns_server2", ipv4_dns_server2)
        if ipv4_dns_server3 is not None:
            pulumi.set(__self__, "ipv4_dns_server3", ipv4_dns_server3)
        if ipv4_end_ip is not None:
            pulumi.set(__self__, "ipv4_end_ip", ipv4_end_ip)
        if ipv4_exclude_ranges is not None:
            pulumi.set(__self__, "ipv4_exclude_ranges", ipv4_exclude_ranges)
        if ipv4_name is not None:
            pulumi.set(__self__, "ipv4_name", ipv4_name)
        if ipv4_netmask is not None:
            pulumi.set(__self__, "ipv4_netmask", ipv4_netmask)
        if ipv4_split_exclude is not None:
            pulumi.set(__self__, "ipv4_split_exclude", ipv4_split_exclude)
        if ipv4_split_include is not None:
            pulumi.set(__self__, "ipv4_split_include", ipv4_split_include)
        if ipv4_start_ip is not None:
            pulumi.set(__self__, "ipv4_start_ip", ipv4_start_ip)
        if ipv4_wins_server1 is not None:
            pulumi.set(__self__, "ipv4_wins_server1", ipv4_wins_server1)
        if ipv4_wins_server2 is not None:
            pulumi.set(__self__, "ipv4_wins_server2", ipv4_wins_server2)
        if ipv6_dns_server1 is not None:
            pulumi.set(__self__, "ipv6_dns_server1", ipv6_dns_server1)
        if ipv6_dns_server2 is not None:
            pulumi.set(__self__, "ipv6_dns_server2", ipv6_dns_server2)
        if ipv6_dns_server3 is not None:
            pulumi.set(__self__, "ipv6_dns_server3", ipv6_dns_server3)
        if ipv6_end_ip is not None:
            pulumi.set(__self__, "ipv6_end_ip", ipv6_end_ip)
        if ipv6_exclude_ranges is not None:
            pulumi.set(__self__, "ipv6_exclude_ranges", ipv6_exclude_ranges)
        if ipv6_name is not None:
            pulumi.set(__self__, "ipv6_name", ipv6_name)
        if ipv6_prefix is not None:
            pulumi.set(__self__, "ipv6_prefix", ipv6_prefix)
        if ipv6_split_exclude is not None:
            pulumi.set(__self__, "ipv6_split_exclude", ipv6_split_exclude)
        if ipv6_split_include is not None:
            pulumi.set(__self__, "ipv6_split_include", ipv6_split_include)
        if ipv6_start_ip is not None:
            pulumi.set(__self__, "ipv6_start_ip", ipv6_start_ip)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if keylife is not None:
            pulumi.set(__self__, "keylife", keylife)
        if kms is not None:
            pulumi.set(__self__, "kms", kms)
        if link_cost is not None:
            pulumi.set(__self__, "link_cost", link_cost)
        if local_gw is not None:
            pulumi.set(__self__, "local_gw", local_gw)
        if local_gw6 is not None:
            pulumi.set(__self__, "local_gw6", local_gw6)
        if localid is not None:
            pulumi.set(__self__, "localid", localid)
        if localid_type is not None:
            pulumi.set(__self__, "localid_type", localid_type)
        if loopback_asymroute is not None:
            pulumi.set(__self__, "loopback_asymroute", loopback_asymroute)
        if mesh_selector_type is not None:
            pulumi.set(__self__, "mesh_selector_type", mesh_selector_type)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mode_cfg is not None:
            pulumi.set(__self__, "mode_cfg", mode_cfg)
        if mode_cfg_allow_client_selector is not None:
            pulumi.set(__self__, "mode_cfg_allow_client_selector", mode_cfg_allow_client_selector)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if monitor_hold_down_delay is not None:
            pulumi.set(__self__, "monitor_hold_down_delay", monitor_hold_down_delay)
        if monitor_hold_down_time is not None:
            pulumi.set(__self__, "monitor_hold_down_time", monitor_hold_down_time)
        if monitor_hold_down_type is not None:
            pulumi.set(__self__, "monitor_hold_down_type", monitor_hold_down_type)
        if monitor_hold_down_weekday is not None:
            pulumi.set(__self__, "monitor_hold_down_weekday", monitor_hold_down_weekday)
        if monitor_min is not None:
            pulumi.set(__self__, "monitor_min", monitor_min)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nattraversal is not None:
            pulumi.set(__self__, "nattraversal", nattraversal)
        if negotiate_timeout is not None:
            pulumi.set(__self__, "negotiate_timeout", negotiate_timeout)
        if net_device is not None:
            pulumi.set(__self__, "net_device", net_device)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if network_overlay is not None:
            pulumi.set(__self__, "network_overlay", network_overlay)
        if npu_offload is not None:
            pulumi.set(__self__, "npu_offload", npu_offload)
        if packet_redistribution is not None:
            pulumi.set(__self__, "packet_redistribution", packet_redistribution)
        if passive_mode is not None:
            pulumi.set(__self__, "passive_mode", passive_mode)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if peergrp is not None:
            pulumi.set(__self__, "peergrp", peergrp)
        if peerid is not None:
            pulumi.set(__self__, "peerid", peerid)
        if peertype is not None:
            pulumi.set(__self__, "peertype", peertype)
        if ppk is not None:
            pulumi.set(__self__, "ppk", ppk)
        if ppk_identity is not None:
            pulumi.set(__self__, "ppk_identity", ppk_identity)
        if ppk_secret is not None:
            pulumi.set(__self__, "ppk_secret", ppk_secret)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if proposal is not None:
            pulumi.set(__self__, "proposal", proposal)
        if psksecret is not None:
            pulumi.set(__self__, "psksecret", psksecret)
        if psksecret_remote is not None:
            pulumi.set(__self__, "psksecret_remote", psksecret_remote)
        if qkd is not None:
            pulumi.set(__self__, "qkd", qkd)
        if qkd_profile is not None:
            pulumi.set(__self__, "qkd_profile", qkd_profile)
        if reauth is not None:
            pulumi.set(__self__, "reauth", reauth)
        if rekey is not None:
            pulumi.set(__self__, "rekey", rekey)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if remote_gw6 is not None:
            pulumi.set(__self__, "remote_gw6", remote_gw6)
        if remotegw_ddns is not None:
            pulumi.set(__self__, "remotegw_ddns", remotegw_ddns)
        if rsa_signature_format is not None:
            pulumi.set(__self__, "rsa_signature_format", rsa_signature_format)
        if rsa_signature_hash_override is not None:
            pulumi.set(__self__, "rsa_signature_hash_override", rsa_signature_hash_override)
        if save_password is not None:
            pulumi.set(__self__, "save_password", save_password)
        if send_cert_chain is not None:
            pulumi.set(__self__, "send_cert_chain", send_cert_chain)
        if signature_hash_alg is not None:
            pulumi.set(__self__, "signature_hash_alg", signature_hash_alg)
        if split_include_service is not None:
            pulumi.set(__self__, "split_include_service", split_include_service)
        if suite_b is not None:
            pulumi.set(__self__, "suite_b", suite_b)
        if transport is not None:
            pulumi.set(__self__, "transport", transport)
        if tunnel_search is not None:
            pulumi.set(__self__, "tunnel_search", tunnel_search)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unity_support is not None:
            pulumi.set(__self__, "unity_support", unity_support)
        if usrgrp is not None:
            pulumi.set(__self__, "usrgrp", usrgrp)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vni is not None:
            pulumi.set(__self__, "vni", vni)
        if wizard_type is not None:
            pulumi.set(__self__, "wizard_type", wizard_type)
        if xauthtype is not None:
            pulumi.set(__self__, "xauthtype", xauthtype)

    @property
    @pulumi.getter(name="acctVerify")
    def acct_verify(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "acct_verify")

    @acct_verify.setter
    def acct_verify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acct_verify", value)

    @property
    @pulumi.getter(name="addGwRoute")
    def add_gw_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "add_gw_route")

    @add_gw_route.setter
    def add_gw_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_gw_route", value)

    @property
    @pulumi.getter(name="addRoute")
    def add_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "add_route")

    @add_route.setter
    def add_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_route", value)

    @property
    @pulumi.getter(name="aggregateMember")
    def aggregate_member(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "aggregate_member")

    @aggregate_member.setter
    def aggregate_member(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregate_member", value)

    @property
    @pulumi.getter(name="aggregateWeight")
    def aggregate_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Link weight for aggregate.
        """
        return pulumi.get(self, "aggregate_weight")

    @aggregate_weight.setter
    def aggregate_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aggregate_weight", value)

    @property
    @pulumi.getter(name="assignIp")
    def assign_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "assign_ip")

    @assign_ip.setter
    def assign_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_ip", value)

    @property
    @pulumi.getter(name="assignIpFrom")
    def assign_ip_from(self) -> Optional[pulumi.Input[str]]:
        """
        Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
        """
        return pulumi.get(self, "assign_ip_from")

    @assign_ip_from.setter
    def assign_ip_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_ip_from", value)

    @property
    @pulumi.getter
    def authmethod(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method. Valid values: `psk`, `signature`.
        """
        return pulumi.get(self, "authmethod")

    @authmethod.setter
    def authmethod(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authmethod", value)

    @property
    @pulumi.getter(name="authmethodRemote")
    def authmethod_remote(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method (remote side). Valid values: `psk`, `signature`.
        """
        return pulumi.get(self, "authmethod_remote")

    @authmethod_remote.setter
    def authmethod_remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authmethod_remote", value)

    @property
    @pulumi.getter
    def authpasswd(self) -> Optional[pulumi.Input[str]]:
        """
        XAuth password (max 35 characters).
        """
        return pulumi.get(self, "authpasswd")

    @authpasswd.setter
    def authpasswd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authpasswd", value)

    @property
    @pulumi.getter
    def authusr(self) -> Optional[pulumi.Input[str]]:
        """
        XAuth user name.
        """
        return pulumi.get(self, "authusr")

    @authusr.setter
    def authusr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authusr", value)

    @property
    @pulumi.getter
    def authusrgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication user group.
        """
        return pulumi.get(self, "authusrgrp")

    @authusrgrp.setter
    def authusrgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authusrgrp", value)

    @property
    @pulumi.getter(name="autoDiscoveryCrossover")
    def auto_discovery_crossover(self) -> Optional[pulumi.Input[str]]:
        """
        Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "auto_discovery_crossover")

    @auto_discovery_crossover.setter
    def auto_discovery_crossover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_crossover", value)

    @property
    @pulumi.getter(name="autoDiscoveryForwarder")
    def auto_discovery_forwarder(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_forwarder")

    @auto_discovery_forwarder.setter
    def auto_discovery_forwarder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_forwarder", value)

    @property
    @pulumi.getter(name="autoDiscoveryOfferInterval")
    def auto_discovery_offer_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between shortcut offer messages in seconds (1 - 300, default = 5).
        """
        return pulumi.get(self, "auto_discovery_offer_interval")

    @auto_discovery_offer_interval.setter
    def auto_discovery_offer_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_discovery_offer_interval", value)

    @property
    @pulumi.getter(name="autoDiscoveryPsk")
    def auto_discovery_psk(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_psk")

    @auto_discovery_psk.setter
    def auto_discovery_psk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_psk", value)

    @property
    @pulumi.getter(name="autoDiscoveryReceiver")
    def auto_discovery_receiver(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_receiver")

    @auto_discovery_receiver.setter
    def auto_discovery_receiver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_receiver", value)

    @property
    @pulumi.getter(name="autoDiscoverySender")
    def auto_discovery_sender(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_sender")

    @auto_discovery_sender.setter
    def auto_discovery_sender(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_sender", value)

    @property
    @pulumi.getter(name="autoDiscoveryShortcuts")
    def auto_discovery_shortcuts(self) -> Optional[pulumi.Input[str]]:
        """
        Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
        """
        return pulumi.get(self, "auto_discovery_shortcuts")

    @auto_discovery_shortcuts.setter
    def auto_discovery_shortcuts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_shortcuts", value)

    @property
    @pulumi.getter(name="autoNegotiate")
    def auto_negotiate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_negotiate")

    @auto_negotiate.setter
    def auto_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_negotiate", value)

    @property
    @pulumi.getter(name="azureAdAutoconnect")
    def azure_ad_autoconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "azure_ad_autoconnect")

    @azure_ad_autoconnect.setter
    def azure_ad_autoconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_ad_autoconnect", value)

    @property
    @pulumi.getter(name="backupGateways")
    def backup_gateways(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceBackupGatewayArgs']]]]:
        """
        Instruct unity clients about the backup gateway address(es). The structure of `backup_gateway` block is documented below.
        """
        return pulumi.get(self, "backup_gateways")

    @backup_gateways.setter
    def backup_gateways(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceBackupGatewayArgs']]]]):
        pulumi.set(self, "backup_gateways", value)

    @property
    @pulumi.getter
    def banner(self) -> Optional[pulumi.Input[str]]:
        """
        Message that unity client should display after connecting.
        """
        return pulumi.get(self, "banner")

    @banner.setter
    def banner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "banner", value)

    @property
    @pulumi.getter(name="certIdValidation")
    def cert_id_validation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cert_id_validation")

    @cert_id_validation.setter
    def cert_id_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_id_validation", value)

    @property
    @pulumi.getter(name="certTrustStore")
    def cert_trust_store(self) -> Optional[pulumi.Input[str]]:
        """
        CA certificate trust store. Valid values: `local`, `ems`.
        """
        return pulumi.get(self, "cert_trust_store")

    @cert_trust_store.setter
    def cert_trust_store(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_trust_store", value)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceCertificateArgs']]]]:
        """
        The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
        """
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceCertificateArgs']]]]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter(name="childlessIke")
    def childless_ike(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "childless_ike")

    @childless_ike.setter
    def childless_ike(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "childless_ike", value)

    @property
    @pulumi.getter(name="clientAutoNegotiate")
    def client_auto_negotiate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "client_auto_negotiate")

    @client_auto_negotiate.setter
    def client_auto_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_auto_negotiate", value)

    @property
    @pulumi.getter(name="clientKeepAlive")
    def client_keep_alive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "client_keep_alive")

    @client_keep_alive.setter
    def client_keep_alive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_keep_alive", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="defaultGw")
    def default_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of default route gateway to use for traffic exiting the interface.
        """
        return pulumi.get(self, "default_gw")

    @default_gw.setter
    def default_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_gw", value)

    @property
    @pulumi.getter(name="defaultGwPriority")
    def default_gw_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority for default gateway route. A higher priority number signifies a less preferred route.
        """
        return pulumi.get(self, "default_gw_priority")

    @default_gw_priority.setter
    def default_gw_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_gw_priority", value)

    @property
    @pulumi.getter(name="devId")
    def dev_id(self) -> Optional[pulumi.Input[str]]:
        """
        Device ID carried by the device ID notification.
        """
        return pulumi.get(self, "dev_id")

    @dev_id.setter
    def dev_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dev_id", value)

    @property
    @pulumi.getter(name="devIdNotification")
    def dev_id_notification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable device ID notification. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dev_id_notification")

    @dev_id_notification.setter
    def dev_id_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dev_id_notification", value)

    @property
    @pulumi.getter(name="dhcp6RaLinkaddr")
    def dhcp6_ra_linkaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Relay agent IPv6 link address to use in DHCP6 requests.
        """
        return pulumi.get(self, "dhcp6_ra_linkaddr")

    @dhcp6_ra_linkaddr.setter
    def dhcp6_ra_linkaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_ra_linkaddr", value)

    @property
    @pulumi.getter(name="dhcpRaGiaddr")
    def dhcp_ra_giaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Relay agent gateway IP address to use in the giaddr field of DHCP requests.
        """
        return pulumi.get(self, "dhcp_ra_giaddr")

    @dhcp_ra_giaddr.setter
    def dhcp_ra_giaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_ra_giaddr", value)

    @property
    @pulumi.getter
    def dhgrp(self) -> Optional[pulumi.Input[str]]:
        """
        DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        """
        return pulumi.get(self, "dhgrp")

    @dhgrp.setter
    def dhgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhgrp", value)

    @property
    @pulumi.getter(name="digitalSignatureAuth")
    def digital_signature_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "digital_signature_auth")

    @digital_signature_auth.setter
    def digital_signature_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digital_signature_auth", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Distance for routes added by IKE (1 - 255).
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="dnsMode")
    def dns_mode(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server mode. Valid values: `manual`, `auto`.
        """
        return pulumi.get(self, "dns_mode")

    @dns_mode.setter
    def dns_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_mode", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Instruct unity clients about the default DNS domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def dpd(self) -> Optional[pulumi.Input[str]]:
        """
        Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
        """
        return pulumi.get(self, "dpd")

    @dpd.setter
    def dpd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dpd", value)

    @property
    @pulumi.getter(name="dpdRetrycount")
    def dpd_retrycount(self) -> Optional[pulumi.Input[int]]:
        """
        Number of DPD retry attempts.
        """
        return pulumi.get(self, "dpd_retrycount")

    @dpd_retrycount.setter
    def dpd_retrycount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dpd_retrycount", value)

    @property
    @pulumi.getter(name="dpdRetryinterval")
    def dpd_retryinterval(self) -> Optional[pulumi.Input[str]]:
        """
        DPD retry interval.
        """
        return pulumi.get(self, "dpd_retryinterval")

    @dpd_retryinterval.setter
    def dpd_retryinterval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dpd_retryinterval", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def eap(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eap")

    @eap.setter
    def eap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap", value)

    @property
    @pulumi.getter(name="eapCertAuth")
    def eap_cert_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eap_cert_auth")

    @eap_cert_auth.setter
    def eap_cert_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_cert_auth", value)

    @property
    @pulumi.getter(name="eapExcludePeergrp")
    def eap_exclude_peergrp(self) -> Optional[pulumi.Input[str]]:
        """
        Peer group excluded from EAP authentication.
        """
        return pulumi.get(self, "eap_exclude_peergrp")

    @eap_exclude_peergrp.setter
    def eap_exclude_peergrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_exclude_peergrp", value)

    @property
    @pulumi.getter(name="eapIdentity")
    def eap_identity(self) -> Optional[pulumi.Input[str]]:
        """
        IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
        """
        return pulumi.get(self, "eap_identity")

    @eap_identity.setter
    def eap_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eap_identity", value)

    @property
    @pulumi.getter(name="emsSnCheck")
    def ems_sn_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ems_sn_check")

    @ems_sn_check.setter
    def ems_sn_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ems_sn_check", value)

    @property
    @pulumi.getter(name="encapLocalGw4")
    def encap_local_gw4(self) -> Optional[pulumi.Input[str]]:
        """
        Local IPv4 address of GRE/VXLAN tunnel.
        """
        return pulumi.get(self, "encap_local_gw4")

    @encap_local_gw4.setter
    def encap_local_gw4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encap_local_gw4", value)

    @property
    @pulumi.getter(name="encapLocalGw6")
    def encap_local_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        Local IPv6 address of GRE/VXLAN tunnel.
        """
        return pulumi.get(self, "encap_local_gw6")

    @encap_local_gw6.setter
    def encap_local_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encap_local_gw6", value)

    @property
    @pulumi.getter(name="encapRemoteGw4")
    def encap_remote_gw4(self) -> Optional[pulumi.Input[str]]:
        """
        Remote IPv4 address of GRE/VXLAN tunnel.
        """
        return pulumi.get(self, "encap_remote_gw4")

    @encap_remote_gw4.setter
    def encap_remote_gw4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encap_remote_gw4", value)

    @property
    @pulumi.getter(name="encapRemoteGw6")
    def encap_remote_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        Remote IPv6 address of GRE/VXLAN tunnel.
        """
        return pulumi.get(self, "encap_remote_gw6")

    @encap_remote_gw6.setter
    def encap_remote_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encap_remote_gw6", value)

    @property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable GRE/VXLAN encapsulation.
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encapsulation", value)

    @property
    @pulumi.getter(name="encapsulationAddress")
    def encapsulation_address(self) -> Optional[pulumi.Input[str]]:
        """
        Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "encapsulation_address")

    @encapsulation_address.setter
    def encapsulation_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encapsulation_address", value)

    @property
    @pulumi.getter(name="enforceUniqueId")
    def enforce_unique_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
        """
        return pulumi.get(self, "enforce_unique_id")

    @enforce_unique_id.setter
    def enforce_unique_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_unique_id", value)

    @property
    @pulumi.getter
    def esn(self) -> Optional[pulumi.Input[str]]:
        """
        Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
        """
        return pulumi.get(self, "esn")

    @esn.setter
    def esn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "esn", value)

    @property
    @pulumi.getter(name="exchangeFgtDeviceId")
    def exchange_fgt_device_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "exchange_fgt_device_id")

    @exchange_fgt_device_id.setter
    def exchange_fgt_device_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exchange_fgt_device_id", value)

    @property
    @pulumi.getter(name="exchangeInterfaceIp")
    def exchange_interface_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "exchange_interface_ip")

    @exchange_interface_ip.setter
    def exchange_interface_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exchange_interface_ip", value)

    @property
    @pulumi.getter(name="exchangeIpAddr4")
    def exchange_ip_addr4(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address to exchange with peers.
        """
        return pulumi.get(self, "exchange_ip_addr4")

    @exchange_ip_addr4.setter
    def exchange_ip_addr4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exchange_ip_addr4", value)

    @property
    @pulumi.getter(name="exchangeIpAddr6")
    def exchange_ip_addr6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address to exchange with peers
        """
        return pulumi.get(self, "exchange_ip_addr6")

    @exchange_ip_addr6.setter
    def exchange_ip_addr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exchange_ip_addr6", value)

    @property
    @pulumi.getter(name="fallbackTcpThreshold")
    def fallback_tcp_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout in seconds before falling back IKE/IPsec traffic to tcp.
        """
        return pulumi.get(self, "fallback_tcp_threshold")

    @fallback_tcp_threshold.setter
    def fallback_tcp_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fallback_tcp_threshold", value)

    @property
    @pulumi.getter(name="fecBase")
    def fec_base(self) -> Optional[pulumi.Input[int]]:
        """
        Number of base Forward Error Correction packets (1 - 100).
        """
        return pulumi.get(self, "fec_base")

    @fec_base.setter
    def fec_base(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_base", value)

    @property
    @pulumi.getter(name="fecCodec")
    def fec_codec(self) -> Optional[pulumi.Input[int]]:
        """
        ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
        """
        return pulumi.get(self, "fec_codec")

    @fec_codec.setter
    def fec_codec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_codec", value)

    @property
    @pulumi.getter(name="fecCodecString")
    def fec_codec_string(self) -> Optional[pulumi.Input[str]]:
        """
        Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
        """
        return pulumi.get(self, "fec_codec_string")

    @fec_codec_string.setter
    def fec_codec_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_codec_string", value)

    @property
    @pulumi.getter(name="fecEgress")
    def fec_egress(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fec_egress")

    @fec_egress.setter
    def fec_egress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_egress", value)

    @property
    @pulumi.getter(name="fecHealthCheck")
    def fec_health_check(self) -> Optional[pulumi.Input[str]]:
        """
        SD-WAN health check.
        """
        return pulumi.get(self, "fec_health_check")

    @fec_health_check.setter
    def fec_health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_health_check", value)

    @property
    @pulumi.getter(name="fecIngress")
    def fec_ingress(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fec_ingress")

    @fec_ingress.setter
    def fec_ingress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_ingress", value)

    @property
    @pulumi.getter(name="fecMappingProfile")
    def fec_mapping_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Forward Error Correction (FEC) mapping profile.
        """
        return pulumi.get(self, "fec_mapping_profile")

    @fec_mapping_profile.setter
    def fec_mapping_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_mapping_profile", value)

    @property
    @pulumi.getter(name="fecReceiveTimeout")
    def fec_receive_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
        """
        return pulumi.get(self, "fec_receive_timeout")

    @fec_receive_timeout.setter
    def fec_receive_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_receive_timeout", value)

    @property
    @pulumi.getter(name="fecRedundant")
    def fec_redundant(self) -> Optional[pulumi.Input[int]]:
        """
        Number of redundant Forward Error Correction packets (1 - 100).
        """
        return pulumi.get(self, "fec_redundant")

    @fec_redundant.setter
    def fec_redundant(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_redundant", value)

    @property
    @pulumi.getter(name="fecSendTimeout")
    def fec_send_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
        """
        return pulumi.get(self, "fec_send_timeout")

    @fec_send_timeout.setter
    def fec_send_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_send_timeout", value)

    @property
    @pulumi.getter(name="fgspSync")
    def fgsp_sync(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fgsp_sync")

    @fgsp_sync.setter
    def fgsp_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fgsp_sync", value)

    @property
    @pulumi.getter(name="forticlientEnforcement")
    def forticlient_enforcement(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_enforcement")

    @forticlient_enforcement.setter
    def forticlient_enforcement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_enforcement", value)

    @property
    @pulumi.getter(name="fortinetEsp")
    def fortinet_esp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortinet_esp")

    @fortinet_esp.setter
    def fortinet_esp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortinet_esp", value)

    @property
    @pulumi.getter
    def fragmentation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fragmentation")

    @fragmentation.setter
    def fragmentation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fragmentation", value)

    @property
    @pulumi.getter(name="fragmentationMtu")
    def fragmentation_mtu(self) -> Optional[pulumi.Input[int]]:
        """
        IKE fragmentation MTU (500 - 16000).
        """
        return pulumi.get(self, "fragmentation_mtu")

    @fragmentation_mtu.setter
    def fragmentation_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fragmentation_mtu", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupAuthentication")
    def group_authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "group_authentication")

    @group_authentication.setter
    def group_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_authentication", value)

    @property
    @pulumi.getter(name="groupAuthenticationSecret")
    def group_authentication_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
        """
        return pulumi.get(self, "group_authentication_secret")

    @group_authentication_secret.setter
    def group_authentication_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_authentication_secret", value)

    @property
    @pulumi.getter(name="haSyncEspSeqno")
    def ha_sync_esp_seqno(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_sync_esp_seqno")

    @ha_sync_esp_seqno.setter
    def ha_sync_esp_seqno(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_sync_esp_seqno", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter(name="idleTimeoutinterval")
    def idle_timeoutinterval(self) -> Optional[pulumi.Input[int]]:
        """
        IPsec tunnel idle timeout in minutes (5 - 43200).
        """
        return pulumi.get(self, "idle_timeoutinterval")

    @idle_timeoutinterval.setter
    def idle_timeoutinterval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeoutinterval", value)

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[pulumi.Input[str]]:
        """
        IKE protocol version. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "ike_version")

    @ike_version.setter
    def ike_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_version", value)

    @property
    @pulumi.getter(name="inboundDscpCopy")
    def inbound_dscp_copy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inbound_dscp_copy")

    @inbound_dscp_copy.setter
    def inbound_dscp_copy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound_dscp_copy", value)

    @property
    @pulumi.getter(name="includeLocalLan")
    def include_local_lan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "include_local_lan")

    @include_local_lan.setter
    def include_local_lan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_local_lan", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Local physical, aggregate, or VLAN outgoing interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="internalDomainLists")
    def internal_domain_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceInternalDomainListArgs']]]]:
        """
        One or more internal domain names in quotes separated by spaces. The structure of `internal_domain_list` block is documented below.
        """
        return pulumi.get(self, "internal_domain_lists")

    @internal_domain_lists.setter
    def internal_domain_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceInternalDomainListArgs']]]]):
        pulumi.set(self, "internal_domain_lists", value)

    @property
    @pulumi.getter(name="ipDelayInterval")
    def ip_delay_interval(self) -> Optional[pulumi.Input[int]]:
        """
        IP address reuse delay interval in seconds (0 - 28800).
        """
        return pulumi.get(self, "ip_delay_interval")

    @ip_delay_interval.setter
    def ip_delay_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_delay_interval", value)

    @property
    @pulumi.getter(name="ipFragmentation")
    def ip_fragmentation(self) -> Optional[pulumi.Input[str]]:
        """
        Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
        """
        return pulumi.get(self, "ip_fragmentation")

    @ip_fragmentation.setter
    def ip_fragmentation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_fragmentation", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        IP version to use for VPN interface. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="ipv4DnsServer1")
    def ipv4_dns_server1(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 DNS server 1.
        """
        return pulumi.get(self, "ipv4_dns_server1")

    @ipv4_dns_server1.setter
    def ipv4_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_dns_server1", value)

    @property
    @pulumi.getter(name="ipv4DnsServer2")
    def ipv4_dns_server2(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 DNS server 2.
        """
        return pulumi.get(self, "ipv4_dns_server2")

    @ipv4_dns_server2.setter
    def ipv4_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_dns_server2", value)

    @property
    @pulumi.getter(name="ipv4DnsServer3")
    def ipv4_dns_server3(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 DNS server 3.
        """
        return pulumi.get(self, "ipv4_dns_server3")

    @ipv4_dns_server3.setter
    def ipv4_dns_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_dns_server3", value)

    @property
    @pulumi.getter(name="ipv4EndIp")
    def ipv4_end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End of IPv4 range.
        """
        return pulumi.get(self, "ipv4_end_ip")

    @ipv4_end_ip.setter
    def ipv4_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_end_ip", value)

    @property
    @pulumi.getter(name="ipv4ExcludeRanges")
    def ipv4_exclude_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv4ExcludeRangeArgs']]]]:
        """
        Configuration Method IPv4 exclude ranges. The structure of `ipv4_exclude_range` block is documented below.
        """
        return pulumi.get(self, "ipv4_exclude_ranges")

    @ipv4_exclude_ranges.setter
    def ipv4_exclude_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv4ExcludeRangeArgs']]]]):
        pulumi.set(self, "ipv4_exclude_ranges", value)

    @property
    @pulumi.getter(name="ipv4Name")
    def ipv4_name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address name.
        """
        return pulumi.get(self, "ipv4_name")

    @ipv4_name.setter
    def ipv4_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_name", value)

    @property
    @pulumi.getter(name="ipv4Netmask")
    def ipv4_netmask(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Netmask.
        """
        return pulumi.get(self, "ipv4_netmask")

    @ipv4_netmask.setter
    def ipv4_netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_netmask", value)

    @property
    @pulumi.getter(name="ipv4SplitExclude")
    def ipv4_split_exclude(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 subnets that should not be sent over the IPsec tunnel.
        """
        return pulumi.get(self, "ipv4_split_exclude")

    @ipv4_split_exclude.setter
    def ipv4_split_exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_split_exclude", value)

    @property
    @pulumi.getter(name="ipv4SplitInclude")
    def ipv4_split_include(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 split-include subnets.
        """
        return pulumi.get(self, "ipv4_split_include")

    @ipv4_split_include.setter
    def ipv4_split_include(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_split_include", value)

    @property
    @pulumi.getter(name="ipv4StartIp")
    def ipv4_start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start of IPv4 range.
        """
        return pulumi.get(self, "ipv4_start_ip")

    @ipv4_start_ip.setter
    def ipv4_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_start_ip", value)

    @property
    @pulumi.getter(name="ipv4WinsServer1")
    def ipv4_wins_server1(self) -> Optional[pulumi.Input[str]]:
        """
        WINS server 1.
        """
        return pulumi.get(self, "ipv4_wins_server1")

    @ipv4_wins_server1.setter
    def ipv4_wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_wins_server1", value)

    @property
    @pulumi.getter(name="ipv4WinsServer2")
    def ipv4_wins_server2(self) -> Optional[pulumi.Input[str]]:
        """
        WINS server 2.
        """
        return pulumi.get(self, "ipv4_wins_server2")

    @ipv4_wins_server2.setter
    def ipv4_wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_wins_server2", value)

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 DNS server 1.
        """
        return pulumi.get(self, "ipv6_dns_server1")

    @ipv6_dns_server1.setter
    def ipv6_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server1", value)

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 DNS server 2.
        """
        return pulumi.get(self, "ipv6_dns_server2")

    @ipv6_dns_server2.setter
    def ipv6_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server2", value)

    @property
    @pulumi.getter(name="ipv6DnsServer3")
    def ipv6_dns_server3(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 DNS server 3.
        """
        return pulumi.get(self, "ipv6_dns_server3")

    @ipv6_dns_server3.setter
    def ipv6_dns_server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server3", value)

    @property
    @pulumi.getter(name="ipv6EndIp")
    def ipv6_end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End of IPv6 range.
        """
        return pulumi.get(self, "ipv6_end_ip")

    @ipv6_end_ip.setter
    def ipv6_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_end_ip", value)

    @property
    @pulumi.getter(name="ipv6ExcludeRanges")
    def ipv6_exclude_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv6ExcludeRangeArgs']]]]:
        """
        Configuration method IPv6 exclude ranges. The structure of `ipv6_exclude_range` block is documented below.
        """
        return pulumi.get(self, "ipv6_exclude_ranges")

    @ipv6_exclude_ranges.setter
    def ipv6_exclude_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Phase1interfaceIpv6ExcludeRangeArgs']]]]):
        pulumi.set(self, "ipv6_exclude_ranges", value)

    @property
    @pulumi.getter(name="ipv6Name")
    def ipv6_name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address name.
        """
        return pulumi.get(self, "ipv6_name")

    @ipv6_name.setter
    def ipv6_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_name", value)

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "ipv6_prefix")

    @ipv6_prefix.setter
    def ipv6_prefix(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_prefix", value)

    @property
    @pulumi.getter(name="ipv6SplitExclude")
    def ipv6_split_exclude(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 subnets that should not be sent over the IPsec tunnel.
        """
        return pulumi.get(self, "ipv6_split_exclude")

    @ipv6_split_exclude.setter
    def ipv6_split_exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_split_exclude", value)

    @property
    @pulumi.getter(name="ipv6SplitInclude")
    def ipv6_split_include(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 split-include subnets.
        """
        return pulumi.get(self, "ipv6_split_include")

    @ipv6_split_include.setter
    def ipv6_split_include(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_split_include", value)

    @property
    @pulumi.getter(name="ipv6StartIp")
    def ipv6_start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start of IPv6 range.
        """
        return pulumi.get(self, "ipv6_start_ip")

    @ipv6_start_ip.setter
    def ipv6_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_start_ip", value)

    @property
    @pulumi.getter
    def keepalive(self) -> Optional[pulumi.Input[int]]:
        """
        NAT-T keep alive interval.
        """
        return pulumi.get(self, "keepalive")

    @keepalive.setter
    def keepalive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive", value)

    @property
    @pulumi.getter
    def keylife(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait in seconds before phase 1 encryption key expires.
        """
        return pulumi.get(self, "keylife")

    @keylife.setter
    def keylife(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keylife", value)

    @property
    @pulumi.getter
    def kms(self) -> Optional[pulumi.Input[str]]:
        """
        Key Management Services server.
        """
        return pulumi.get(self, "kms")

    @kms.setter
    def kms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms", value)

    @property
    @pulumi.getter(name="linkCost")
    def link_cost(self) -> Optional[pulumi.Input[int]]:
        """
        VPN tunnel underlay link cost.
        """
        return pulumi.get(self, "link_cost")

    @link_cost.setter
    def link_cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_cost", value)

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the local gateway's external interface.
        """
        return pulumi.get(self, "local_gw")

    @local_gw.setter
    def local_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw", value)

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the local gateway's external interface.
        """
        return pulumi.get(self, "local_gw6")

    @local_gw6.setter
    def local_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_gw6", value)

    @property
    @pulumi.getter
    def localid(self) -> Optional[pulumi.Input[str]]:
        """
        Local ID.
        """
        return pulumi.get(self, "localid")

    @localid.setter
    def localid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localid", value)

    @property
    @pulumi.getter(name="localidType")
    def localid_type(self) -> Optional[pulumi.Input[str]]:
        """
        Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
        """
        return pulumi.get(self, "localid_type")

    @localid_type.setter
    def localid_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "localid_type", value)

    @property
    @pulumi.getter(name="loopbackAsymroute")
    def loopback_asymroute(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "loopback_asymroute")

    @loopback_asymroute.setter
    def loopback_asymroute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loopback_asymroute", value)

    @property
    @pulumi.getter(name="meshSelectorType")
    def mesh_selector_type(self) -> Optional[pulumi.Input[str]]:
        """
        Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
        """
        return pulumi.get(self, "mesh_selector_type")

    @mesh_selector_type.setter
    def mesh_selector_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_selector_type", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="modeCfg")
    def mode_cfg(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable configuration method. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mode_cfg")

    @mode_cfg.setter
    def mode_cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_cfg", value)

    @property
    @pulumi.getter(name="modeCfgAllowClientSelector")
    def mode_cfg_allow_client_selector(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mode_cfg_allow_client_selector")

    @mode_cfg_allow_client_selector.setter
    def mode_cfg_allow_client_selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_cfg_allow_client_selector", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec interface as backup for primary interface.
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter(name="monitorHoldDownDelay")
    def monitor_hold_down_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait in seconds before recovery once primary re-establishes.
        """
        return pulumi.get(self, "monitor_hold_down_delay")

    @monitor_hold_down_delay.setter
    def monitor_hold_down_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_hold_down_delay", value)

    @property
    @pulumi.getter(name="monitorHoldDownTime")
    def monitor_hold_down_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time of day at which to fail back to primary after it re-establishes.
        """
        return pulumi.get(self, "monitor_hold_down_time")

    @monitor_hold_down_time.setter
    def monitor_hold_down_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_hold_down_time", value)

    @property
    @pulumi.getter(name="monitorHoldDownType")
    def monitor_hold_down_type(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
        """
        return pulumi.get(self, "monitor_hold_down_type")

    @monitor_hold_down_type.setter
    def monitor_hold_down_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_hold_down_type", value)

    @property
    @pulumi.getter(name="monitorHoldDownWeekday")
    def monitor_hold_down_weekday(self) -> Optional[pulumi.Input[str]]:
        """
        Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "monitor_hold_down_weekday")

    @monitor_hold_down_weekday.setter
    def monitor_hold_down_weekday(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_hold_down_weekday", value)

    @property
    @pulumi.getter(name="monitorMin")
    def monitor_min(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
        """
        return pulumi.get(self, "monitor_min")

    @monitor_min.setter
    def monitor_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_min", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec remote gateway name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nattraversal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
        """
        return pulumi.get(self, "nattraversal")

    @nattraversal.setter
    def nattraversal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nattraversal", value)

    @property
    @pulumi.getter(name="negotiateTimeout")
    def negotiate_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        IKE SA negotiation timeout in seconds (1 - 300).
        """
        return pulumi.get(self, "negotiate_timeout")

    @negotiate_timeout.setter
    def negotiate_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "negotiate_timeout", value)

    @property
    @pulumi.getter(name="netDevice")
    def net_device(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable kernel device creation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "net_device")

    @net_device.setter
    def net_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_device", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[int]]:
        """
        VPN gateway network ID.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="networkOverlay")
    def network_overlay(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable network overlays. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "network_overlay")

    @network_overlay.setter
    def network_overlay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_overlay", value)

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable offloading NPU. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "npu_offload")

    @npu_offload.setter
    def npu_offload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "npu_offload", value)

    @property
    @pulumi.getter(name="packetRedistribution")
    def packet_redistribution(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "packet_redistribution")

    @packet_redistribution.setter
    def packet_redistribution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_redistribution", value)

    @property
    @pulumi.getter(name="passiveMode")
    def passive_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive_mode")

    @passive_mode.setter
    def passive_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive_mode", value)

    @property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer certificate.
        """
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer", value)

    @property
    @pulumi.getter
    def peergrp(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer certificate group.
        """
        return pulumi.get(self, "peergrp")

    @peergrp.setter
    def peergrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peergrp", value)

    @property
    @pulumi.getter
    def peerid(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer identity.
        """
        return pulumi.get(self, "peerid")

    @peerid.setter
    def peerid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peerid", value)

    @property
    @pulumi.getter
    def peertype(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
        """
        return pulumi.get(self, "peertype")

    @peertype.setter
    def peertype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peertype", value)

    @property
    @pulumi.getter
    def ppk(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
        """
        return pulumi.get(self, "ppk")

    @ppk.setter
    def ppk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk", value)

    @property
    @pulumi.getter(name="ppkIdentity")
    def ppk_identity(self) -> Optional[pulumi.Input[str]]:
        """
        IKEv2 Postquantum Preshared Key Identity.
        """
        return pulumi.get(self, "ppk_identity")

    @ppk_identity.setter
    def ppk_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_identity", value)

    @property
    @pulumi.getter(name="ppkSecret")
    def ppk_secret(self) -> Optional[pulumi.Input[str]]:
        """
        IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        """
        return pulumi.get(self, "ppk_secret")

    @ppk_secret.setter
    def ppk_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_secret", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority for routes added by IKE (0 - 4294967295).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def proposal(self) -> Optional[pulumi.Input[str]]:
        """
        Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        """
        return pulumi.get(self, "proposal")

    @proposal.setter
    def proposal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proposal", value)

    @property
    @pulumi.getter
    def psksecret(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        """
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter(name="psksecretRemote")
    def psksecret_remote(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        """
        return pulumi.get(self, "psksecret_remote")

    @psksecret_remote.setter
    def psksecret_remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret_remote", value)

    @property
    @pulumi.getter
    def qkd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
        """
        return pulumi.get(self, "qkd")

    @qkd.setter
    def qkd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qkd", value)

    @property
    @pulumi.getter(name="qkdProfile")
    def qkd_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Quantum Key Distribution (QKD) server profile.
        """
        return pulumi.get(self, "qkd_profile")

    @qkd_profile.setter
    def qkd_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qkd_profile", value)

    @property
    @pulumi.getter
    def reauth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "reauth")

    @reauth.setter
    def reauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reauth", value)

    @property
    @pulumi.getter
    def rekey(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rekey")

    @rekey.setter
    def rekey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rekey", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the remote gateway's external interface.
        """
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the remote gateway's external interface.
        """
        return pulumi.get(self, "remote_gw6")

    @remote_gw6.setter
    def remote_gw6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw6", value)

    @property
    @pulumi.getter(name="remotegwDdns")
    def remotegw_ddns(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name of remote gateway (eg. name.DDNS.com).
        """
        return pulumi.get(self, "remotegw_ddns")

    @remotegw_ddns.setter
    def remotegw_ddns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remotegw_ddns", value)

    @property
    @pulumi.getter(name="rsaSignatureFormat")
    def rsa_signature_format(self) -> Optional[pulumi.Input[str]]:
        """
        Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
        """
        return pulumi.get(self, "rsa_signature_format")

    @rsa_signature_format.setter
    def rsa_signature_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsa_signature_format", value)

    @property
    @pulumi.getter(name="rsaSignatureHashOverride")
    def rsa_signature_hash_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rsa_signature_hash_override")

    @rsa_signature_hash_override.setter
    def rsa_signature_hash_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rsa_signature_hash_override", value)

    @property
    @pulumi.getter(name="savePassword")
    def save_password(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "save_password")

    @save_password.setter
    def save_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "save_password", value)

    @property
    @pulumi.getter(name="sendCertChain")
    def send_cert_chain(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "send_cert_chain")

    @send_cert_chain.setter
    def send_cert_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_cert_chain", value)

    @property
    @pulumi.getter(name="signatureHashAlg")
    def signature_hash_alg(self) -> Optional[pulumi.Input[str]]:
        """
        Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
        """
        return pulumi.get(self, "signature_hash_alg")

    @signature_hash_alg.setter
    def signature_hash_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_hash_alg", value)

    @property
    @pulumi.getter(name="splitIncludeService")
    def split_include_service(self) -> Optional[pulumi.Input[str]]:
        """
        Split-include services.
        """
        return pulumi.get(self, "split_include_service")

    @split_include_service.setter
    def split_include_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_include_service", value)

    @property
    @pulumi.getter(name="suiteB")
    def suite_b(self) -> Optional[pulumi.Input[str]]:
        """
        Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
        """
        return pulumi.get(self, "suite_b")

    @suite_b.setter
    def suite_b(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suite_b", value)

    @property
    @pulumi.getter
    def transport(self) -> Optional[pulumi.Input[str]]:
        """
        Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
        """
        return pulumi.get(self, "transport")

    @transport.setter
    def transport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport", value)

    @property
    @pulumi.getter(name="tunnelSearch")
    def tunnel_search(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
        """
        return pulumi.get(self, "tunnel_search")

    @tunnel_search.setter
    def tunnel_search(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_search", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="unitySupport")
    def unity_support(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "unity_support")

    @unity_support.setter
    def unity_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unity_support", value)

    @property
    @pulumi.getter
    def usrgrp(self) -> Optional[pulumi.Input[str]]:
        """
        User group name for dialup peers.
        """
        return pulumi.get(self, "usrgrp")

    @usrgrp.setter
    def usrgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usrgrp", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vni(self) -> Optional[pulumi.Input[int]]:
        """
        VNI of VXLAN tunnel.
        """
        return pulumi.get(self, "vni")

    @vni.setter
    def vni(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vni", value)

    @property
    @pulumi.getter(name="wizardType")
    def wizard_type(self) -> Optional[pulumi.Input[str]]:
        """
        GUI VPN Wizard Type.
        """
        return pulumi.get(self, "wizard_type")

    @wizard_type.setter
    def wizard_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wizard_type", value)

    @property
    @pulumi.getter
    def xauthtype(self) -> Optional[pulumi.Input[str]]:
        """
        XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
        """
        return pulumi.get(self, "xauthtype")

    @xauthtype.setter
    def xauthtype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "xauthtype", value)


class Phase1interface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acct_verify: Optional[pulumi.Input[str]] = None,
                 add_gw_route: Optional[pulumi.Input[str]] = None,
                 add_route: Optional[pulumi.Input[str]] = None,
                 aggregate_member: Optional[pulumi.Input[str]] = None,
                 aggregate_weight: Optional[pulumi.Input[int]] = None,
                 assign_ip: Optional[pulumi.Input[str]] = None,
                 assign_ip_from: Optional[pulumi.Input[str]] = None,
                 authmethod: Optional[pulumi.Input[str]] = None,
                 authmethod_remote: Optional[pulumi.Input[str]] = None,
                 authpasswd: Optional[pulumi.Input[str]] = None,
                 authusr: Optional[pulumi.Input[str]] = None,
                 authusrgrp: Optional[pulumi.Input[str]] = None,
                 auto_discovery_crossover: Optional[pulumi.Input[str]] = None,
                 auto_discovery_forwarder: Optional[pulumi.Input[str]] = None,
                 auto_discovery_offer_interval: Optional[pulumi.Input[int]] = None,
                 auto_discovery_psk: Optional[pulumi.Input[str]] = None,
                 auto_discovery_receiver: Optional[pulumi.Input[str]] = None,
                 auto_discovery_sender: Optional[pulumi.Input[str]] = None,
                 auto_discovery_shortcuts: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 azure_ad_autoconnect: Optional[pulumi.Input[str]] = None,
                 backup_gateways: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceBackupGatewayArgs']]]]] = None,
                 banner: Optional[pulumi.Input[str]] = None,
                 cert_id_validation: Optional[pulumi.Input[str]] = None,
                 cert_trust_store: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceCertificateArgs']]]]] = None,
                 childless_ike: Optional[pulumi.Input[str]] = None,
                 client_auto_negotiate: Optional[pulumi.Input[str]] = None,
                 client_keep_alive: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 default_gw: Optional[pulumi.Input[str]] = None,
                 default_gw_priority: Optional[pulumi.Input[int]] = None,
                 dev_id: Optional[pulumi.Input[str]] = None,
                 dev_id_notification: Optional[pulumi.Input[str]] = None,
                 dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
                 dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 digital_signature_auth: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dns_mode: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dpd: Optional[pulumi.Input[str]] = None,
                 dpd_retrycount: Optional[pulumi.Input[int]] = None,
                 dpd_retryinterval: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eap: Optional[pulumi.Input[str]] = None,
                 eap_cert_auth: Optional[pulumi.Input[str]] = None,
                 eap_exclude_peergrp: Optional[pulumi.Input[str]] = None,
                 eap_identity: Optional[pulumi.Input[str]] = None,
                 ems_sn_check: Optional[pulumi.Input[str]] = None,
                 encap_local_gw4: Optional[pulumi.Input[str]] = None,
                 encap_local_gw6: Optional[pulumi.Input[str]] = None,
                 encap_remote_gw4: Optional[pulumi.Input[str]] = None,
                 encap_remote_gw6: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 encapsulation_address: Optional[pulumi.Input[str]] = None,
                 enforce_unique_id: Optional[pulumi.Input[str]] = None,
                 esn: Optional[pulumi.Input[str]] = None,
                 exchange_fgt_device_id: Optional[pulumi.Input[str]] = None,
                 exchange_interface_ip: Optional[pulumi.Input[str]] = None,
                 exchange_ip_addr4: Optional[pulumi.Input[str]] = None,
                 exchange_ip_addr6: Optional[pulumi.Input[str]] = None,
                 fallback_tcp_threshold: Optional[pulumi.Input[int]] = None,
                 fec_base: Optional[pulumi.Input[int]] = None,
                 fec_codec: Optional[pulumi.Input[int]] = None,
                 fec_codec_string: Optional[pulumi.Input[str]] = None,
                 fec_egress: Optional[pulumi.Input[str]] = None,
                 fec_health_check: Optional[pulumi.Input[str]] = None,
                 fec_ingress: Optional[pulumi.Input[str]] = None,
                 fec_mapping_profile: Optional[pulumi.Input[str]] = None,
                 fec_receive_timeout: Optional[pulumi.Input[int]] = None,
                 fec_redundant: Optional[pulumi.Input[int]] = None,
                 fec_send_timeout: Optional[pulumi.Input[int]] = None,
                 fgsp_sync: Optional[pulumi.Input[str]] = None,
                 forticlient_enforcement: Optional[pulumi.Input[str]] = None,
                 fortinet_esp: Optional[pulumi.Input[str]] = None,
                 fragmentation: Optional[pulumi.Input[str]] = None,
                 fragmentation_mtu: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_authentication: Optional[pulumi.Input[str]] = None,
                 group_authentication_secret: Optional[pulumi.Input[str]] = None,
                 ha_sync_esp_seqno: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[str]] = None,
                 idle_timeoutinterval: Optional[pulumi.Input[int]] = None,
                 ike_version: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 include_local_lan: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 internal_domain_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceInternalDomainListArgs']]]]] = None,
                 ip_delay_interval: Optional[pulumi.Input[int]] = None,
                 ip_fragmentation: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv4_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceIpv4ExcludeRangeArgs']]]]] = None,
                 ipv4_name: Optional[pulumi.Input[str]] = None,
                 ipv4_netmask: Optional[pulumi.Input[str]] = None,
                 ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv4_split_include: Optional[pulumi.Input[str]] = None,
                 ipv4_start_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv6_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv6_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceIpv6ExcludeRangeArgs']]]]] = None,
                 ipv6_name: Optional[pulumi.Input[str]] = None,
                 ipv6_prefix: Optional[pulumi.Input[int]] = None,
                 ipv6_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv6_split_include: Optional[pulumi.Input[str]] = None,
                 ipv6_start_ip: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[int]] = None,
                 keylife: Optional[pulumi.Input[int]] = None,
                 kms: Optional[pulumi.Input[str]] = None,
                 link_cost: Optional[pulumi.Input[int]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 localid: Optional[pulumi.Input[str]] = None,
                 localid_type: Optional[pulumi.Input[str]] = None,
                 loopback_asymroute: Optional[pulumi.Input[str]] = None,
                 mesh_selector_type: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mode_cfg: Optional[pulumi.Input[str]] = None,
                 mode_cfg_allow_client_selector: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 monitor_hold_down_delay: Optional[pulumi.Input[int]] = None,
                 monitor_hold_down_time: Optional[pulumi.Input[str]] = None,
                 monitor_hold_down_type: Optional[pulumi.Input[str]] = None,
                 monitor_hold_down_weekday: Optional[pulumi.Input[str]] = None,
                 monitor_min: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nattraversal: Optional[pulumi.Input[str]] = None,
                 negotiate_timeout: Optional[pulumi.Input[int]] = None,
                 net_device: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[int]] = None,
                 network_overlay: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 packet_redistribution: Optional[pulumi.Input[str]] = None,
                 passive_mode: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 peergrp: Optional[pulumi.Input[str]] = None,
                 peerid: Optional[pulumi.Input[str]] = None,
                 peertype: Optional[pulumi.Input[str]] = None,
                 ppk: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 psksecret_remote: Optional[pulumi.Input[str]] = None,
                 qkd: Optional[pulumi.Input[str]] = None,
                 qkd_profile: Optional[pulumi.Input[str]] = None,
                 reauth: Optional[pulumi.Input[str]] = None,
                 rekey: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 remotegw_ddns: Optional[pulumi.Input[str]] = None,
                 rsa_signature_format: Optional[pulumi.Input[str]] = None,
                 rsa_signature_hash_override: Optional[pulumi.Input[str]] = None,
                 save_password: Optional[pulumi.Input[str]] = None,
                 send_cert_chain: Optional[pulumi.Input[str]] = None,
                 signature_hash_alg: Optional[pulumi.Input[str]] = None,
                 split_include_service: Optional[pulumi.Input[str]] = None,
                 suite_b: Optional[pulumi.Input[str]] = None,
                 transport: Optional[pulumi.Input[str]] = None,
                 tunnel_search: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unity_support: Optional[pulumi.Input[str]] = None,
                 usrgrp: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vni: Optional[pulumi.Input[int]] = None,
                 wizard_type: Optional[pulumi.Input[str]] = None,
                 xauthtype: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure VPN remote gateway.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname2 = fortios.vpn.ipsec.Phase1interface("trname2",
            acct_verify="disable",
            add_gw_route="disable",
            add_route="enable",
            assign_ip="enable",
            assign_ip_from="range",
            authmethod="psk",
            auto_discovery_forwarder="disable",
            auto_discovery_psk="disable",
            auto_discovery_receiver="disable",
            auto_discovery_sender="disable",
            auto_negotiate="enable",
            cert_id_validation="enable",
            childless_ike="disable",
            client_auto_negotiate="disable",
            client_keep_alive="disable",
            default_gw="0.0.0.0",
            default_gw_priority=0,
            dhgrp="14 5",
            digital_signature_auth="disable",
            distance=15,
            dns_mode="manual",
            dpd="on-demand",
            dpd_retrycount=3,
            dpd_retryinterval="20",
            eap="disable",
            eap_identity="use-id-payload",
            encap_local_gw4="0.0.0.0",
            encap_local_gw6="::",
            encap_remote_gw4="0.0.0.0",
            encap_remote_gw6="::",
            encapsulation="none",
            encapsulation_address="ike",
            enforce_unique_id="disable",
            exchange_interface_ip="disable",
            exchange_ip_addr4="0.0.0.0",
            exchange_ip_addr6="::",
            forticlient_enforcement="disable",
            fragmentation="enable",
            fragmentation_mtu=1200,
            group_authentication="disable",
            ha_sync_esp_seqno="enable",
            idle_timeout="disable",
            idle_timeoutinterval=15,
            ike_version="1",
            include_local_lan="disable",
            interface="port3",
            ip_version="4",
            ipv4_dns_server1="0.0.0.0",
            ipv4_dns_server2="0.0.0.0",
            ipv4_dns_server3="0.0.0.0",
            ipv4_end_ip="0.0.0.0",
            ipv4_netmask="255.255.255.255",
            ipv4_start_ip="0.0.0.0",
            ipv4_wins_server1="0.0.0.0",
            ipv4_wins_server2="0.0.0.0",
            ipv6_dns_server1="::",
            ipv6_dns_server2="::",
            ipv6_dns_server3="::",
            ipv6_end_ip="::",
            ipv6_prefix=128,
            ipv6_start_ip="::",
            keepalive=10,
            keylife=86400,
            local_gw="0.0.0.0",
            local_gw6="::",
            localid_type="auto",
            mesh_selector_type="disable",
            mode="main",
            mode_cfg="disable",
            monitor_hold_down_delay=0,
            monitor_hold_down_time="00:00",
            monitor_hold_down_type="immediate",
            monitor_hold_down_weekday="sunday",
            nattraversal="enable",
            negotiate_timeout=30,
            net_device="disable",
            passive_mode="disable",
            peertype="any",
            ppk="disable",
            priority=0,
            proposal="aes128-sha256 aes256-sha256 aes128-sha1 aes256-sha1",
            psksecret="eweeeeeeeecee",
            reauth="disable",
            rekey="enable",
            remote_gw="102.2.2.12",
            remote_gw6="::",
            rsa_signature_format="pkcs1",
            save_password="disable",
            send_cert_chain="enable",
            signature_hash_alg="sha2-512 sha2-384 sha2-256 sha1",
            suite_b="disable",
            tunnel_search="selectors",
            type="static",
            unity_support="enable",
            wizard_type="custom",
            xauthtype="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        VpnIpsec Phase1Interface can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:vpn/ipsec/phase1interface:Phase1interface labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:vpn/ipsec/phase1interface:Phase1interface labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acct_verify: Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] add_gw_route: Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] add_route: Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] aggregate_member: Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] aggregate_weight: Link weight for aggregate.
        :param pulumi.Input[str] assign_ip: Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] assign_ip_from: Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
        :param pulumi.Input[str] authmethod: Authentication method. Valid values: `psk`, `signature`.
        :param pulumi.Input[str] authmethod_remote: Authentication method (remote side). Valid values: `psk`, `signature`.
        :param pulumi.Input[str] authpasswd: XAuth password (max 35 characters).
        :param pulumi.Input[str] authusr: XAuth user name.
        :param pulumi.Input[str] authusrgrp: Authentication user group.
        :param pulumi.Input[str] auto_discovery_crossover: Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
        :param pulumi.Input[str] auto_discovery_forwarder: Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_discovery_offer_interval: Interval between shortcut offer messages in seconds (1 - 300, default = 5).
        :param pulumi.Input[str] auto_discovery_psk: Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_receiver: Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_sender: Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_shortcuts: Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
        :param pulumi.Input[str] auto_negotiate: Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] azure_ad_autoconnect: Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceBackupGatewayArgs']]]] backup_gateways: Instruct unity clients about the backup gateway address(es). The structure of `backup_gateway` block is documented below.
        :param pulumi.Input[str] banner: Message that unity client should display after connecting.
        :param pulumi.Input[str] cert_id_validation: Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cert_trust_store: CA certificate trust store. Valid values: `local`, `ems`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceCertificateArgs']]]] certificates: The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
        :param pulumi.Input[str] childless_ike: Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] client_auto_negotiate: Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] client_keep_alive: Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] default_gw: IPv4 address of default route gateway to use for traffic exiting the interface.
        :param pulumi.Input[int] default_gw_priority: Priority for default gateway route. A higher priority number signifies a less preferred route.
        :param pulumi.Input[str] dev_id: Device ID carried by the device ID notification.
        :param pulumi.Input[str] dev_id_notification: Enable/disable device ID notification. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp6_ra_linkaddr: Relay agent IPv6 link address to use in DHCP6 requests.
        :param pulumi.Input[str] dhcp_ra_giaddr: Relay agent gateway IP address to use in the giaddr field of DHCP requests.
        :param pulumi.Input[str] dhgrp: DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        :param pulumi.Input[str] digital_signature_auth: Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] distance: Distance for routes added by IKE (1 - 255).
        :param pulumi.Input[str] dns_mode: DNS server mode. Valid values: `manual`, `auto`.
        :param pulumi.Input[str] domain: Instruct unity clients about the default DNS domain.
        :param pulumi.Input[str] dpd: Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
        :param pulumi.Input[int] dpd_retrycount: Number of DPD retry attempts.
        :param pulumi.Input[str] dpd_retryinterval: DPD retry interval.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] eap: Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] eap_cert_auth: Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] eap_exclude_peergrp: Peer group excluded from EAP authentication.
        :param pulumi.Input[str] eap_identity: IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
        :param pulumi.Input[str] ems_sn_check: Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] encap_local_gw4: Local IPv4 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encap_local_gw6: Local IPv6 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encap_remote_gw4: Remote IPv4 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encap_remote_gw6: Remote IPv6 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encapsulation: Enable/disable GRE/VXLAN encapsulation.
        :param pulumi.Input[str] encapsulation_address: Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
        :param pulumi.Input[str] enforce_unique_id: Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
        :param pulumi.Input[str] esn: Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
        :param pulumi.Input[str] exchange_fgt_device_id: Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] exchange_interface_ip: Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] exchange_ip_addr4: IPv4 address to exchange with peers.
        :param pulumi.Input[str] exchange_ip_addr6: IPv6 address to exchange with peers
        :param pulumi.Input[int] fallback_tcp_threshold: Timeout in seconds before falling back IKE/IPsec traffic to tcp.
        :param pulumi.Input[int] fec_base: Number of base Forward Error Correction packets (1 - 100).
        :param pulumi.Input[int] fec_codec: ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
        :param pulumi.Input[str] fec_codec_string: Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
        :param pulumi.Input[str] fec_egress: Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fec_health_check: SD-WAN health check.
        :param pulumi.Input[str] fec_ingress: Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fec_mapping_profile: Forward Error Correction (FEC) mapping profile.
        :param pulumi.Input[int] fec_receive_timeout: Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
        :param pulumi.Input[int] fec_redundant: Number of redundant Forward Error Correction packets (1 - 100).
        :param pulumi.Input[int] fec_send_timeout: Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
        :param pulumi.Input[str] fgsp_sync: Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_enforcement: Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortinet_esp: Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fragmentation: Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fragmentation_mtu: IKE fragmentation MTU (500 - 16000).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_authentication: Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] group_authentication_secret: Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
        :param pulumi.Input[str] ha_sync_esp_seqno: Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] idle_timeout: Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] idle_timeoutinterval: IPsec tunnel idle timeout in minutes (5 - 43200).
        :param pulumi.Input[str] ike_version: IKE protocol version. Valid values: `1`, `2`.
        :param pulumi.Input[str] inbound_dscp_copy: Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] include_local_lan: Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] interface: Local physical, aggregate, or VLAN outgoing interface.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceInternalDomainListArgs']]]] internal_domain_lists: One or more internal domain names in quotes separated by spaces. The structure of `internal_domain_list` block is documented below.
        :param pulumi.Input[int] ip_delay_interval: IP address reuse delay interval in seconds (0 - 28800).
        :param pulumi.Input[str] ip_fragmentation: Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
        :param pulumi.Input[str] ip_version: IP version to use for VPN interface. Valid values: `4`, `6`.
        :param pulumi.Input[str] ipv4_dns_server1: IPv4 DNS server 1.
        :param pulumi.Input[str] ipv4_dns_server2: IPv4 DNS server 2.
        :param pulumi.Input[str] ipv4_dns_server3: IPv4 DNS server 3.
        :param pulumi.Input[str] ipv4_end_ip: End of IPv4 range.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceIpv4ExcludeRangeArgs']]]] ipv4_exclude_ranges: Configuration Method IPv4 exclude ranges. The structure of `ipv4_exclude_range` block is documented below.
        :param pulumi.Input[str] ipv4_name: IPv4 address name.
        :param pulumi.Input[str] ipv4_netmask: IPv4 Netmask.
        :param pulumi.Input[str] ipv4_split_exclude: IPv4 subnets that should not be sent over the IPsec tunnel.
        :param pulumi.Input[str] ipv4_split_include: IPv4 split-include subnets.
        :param pulumi.Input[str] ipv4_start_ip: Start of IPv4 range.
        :param pulumi.Input[str] ipv4_wins_server1: WINS server 1.
        :param pulumi.Input[str] ipv4_wins_server2: WINS server 2.
        :param pulumi.Input[str] ipv6_dns_server1: IPv6 DNS server 1.
        :param pulumi.Input[str] ipv6_dns_server2: IPv6 DNS server 2.
        :param pulumi.Input[str] ipv6_dns_server3: IPv6 DNS server 3.
        :param pulumi.Input[str] ipv6_end_ip: End of IPv6 range.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceIpv6ExcludeRangeArgs']]]] ipv6_exclude_ranges: Configuration method IPv6 exclude ranges. The structure of `ipv6_exclude_range` block is documented below.
        :param pulumi.Input[str] ipv6_name: IPv6 address name.
        :param pulumi.Input[int] ipv6_prefix: IPv6 prefix.
        :param pulumi.Input[str] ipv6_split_exclude: IPv6 subnets that should not be sent over the IPsec tunnel.
        :param pulumi.Input[str] ipv6_split_include: IPv6 split-include subnets.
        :param pulumi.Input[str] ipv6_start_ip: Start of IPv6 range.
        :param pulumi.Input[int] keepalive: NAT-T keep alive interval.
        :param pulumi.Input[int] keylife: Time to wait in seconds before phase 1 encryption key expires.
        :param pulumi.Input[str] kms: Key Management Services server.
        :param pulumi.Input[int] link_cost: VPN tunnel underlay link cost.
        :param pulumi.Input[str] local_gw: IPv4 address of the local gateway's external interface.
        :param pulumi.Input[str] local_gw6: IPv6 address of the local gateway's external interface.
        :param pulumi.Input[str] localid: Local ID.
        :param pulumi.Input[str] localid_type: Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
        :param pulumi.Input[str] loopback_asymroute: Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mesh_selector_type: Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
        :param pulumi.Input[str] mode: The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
        :param pulumi.Input[str] mode_cfg: Enable/disable configuration method. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] mode_cfg_allow_client_selector: Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] monitor: IPsec interface as backup for primary interface.
        :param pulumi.Input[int] monitor_hold_down_delay: Time to wait in seconds before recovery once primary re-establishes.
        :param pulumi.Input[str] monitor_hold_down_time: Time of day at which to fail back to primary after it re-establishes.
        :param pulumi.Input[str] monitor_hold_down_type: Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
        :param pulumi.Input[str] monitor_hold_down_weekday: Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[int] monitor_min: Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
        :param pulumi.Input[str] name: IPsec remote gateway name.
        :param pulumi.Input[str] nattraversal: Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
        :param pulumi.Input[int] negotiate_timeout: IKE SA negotiation timeout in seconds (1 - 300).
        :param pulumi.Input[str] net_device: Enable/disable kernel device creation. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] network_id: VPN gateway network ID.
        :param pulumi.Input[str] network_overlay: Enable/disable network overlays. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] npu_offload: Enable/disable offloading NPU. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] packet_redistribution: Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] passive_mode: Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] peer: Accept this peer certificate.
        :param pulumi.Input[str] peergrp: Accept this peer certificate group.
        :param pulumi.Input[str] peerid: Accept this peer identity.
        :param pulumi.Input[str] peertype: Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
        :param pulumi.Input[str] ppk: Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
        :param pulumi.Input[str] ppk_identity: IKEv2 Postquantum Preshared Key Identity.
        :param pulumi.Input[str] ppk_secret: IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[int] priority: Priority for routes added by IKE (0 - 4294967295).
        :param pulumi.Input[str] proposal: Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        :param pulumi.Input[str] psksecret: Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[str] psksecret_remote: Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[str] qkd: Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
        :param pulumi.Input[str] qkd_profile: Quantum Key Distribution (QKD) server profile.
        :param pulumi.Input[str] reauth: Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] rekey: Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_gw: IPv4 address of the remote gateway's external interface.
        :param pulumi.Input[str] remote_gw6: IPv6 address of the remote gateway's external interface.
        :param pulumi.Input[str] remotegw_ddns: Domain name of remote gateway (eg. name.DDNS.com).
        :param pulumi.Input[str] rsa_signature_format: Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
        :param pulumi.Input[str] rsa_signature_hash_override: Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] save_password: Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] send_cert_chain: Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] signature_hash_alg: Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
        :param pulumi.Input[str] split_include_service: Split-include services.
        :param pulumi.Input[str] suite_b: Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
        :param pulumi.Input[str] transport: Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
        :param pulumi.Input[str] tunnel_search: Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
        :param pulumi.Input[str] type: Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
        :param pulumi.Input[str] unity_support: Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] usrgrp: User group name for dialup peers.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] vni: VNI of VXLAN tunnel.
        :param pulumi.Input[str] wizard_type: GUI VPN Wizard Type.
        :param pulumi.Input[str] xauthtype: XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Phase1interfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure VPN remote gateway.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname2 = fortios.vpn.ipsec.Phase1interface("trname2",
            acct_verify="disable",
            add_gw_route="disable",
            add_route="enable",
            assign_ip="enable",
            assign_ip_from="range",
            authmethod="psk",
            auto_discovery_forwarder="disable",
            auto_discovery_psk="disable",
            auto_discovery_receiver="disable",
            auto_discovery_sender="disable",
            auto_negotiate="enable",
            cert_id_validation="enable",
            childless_ike="disable",
            client_auto_negotiate="disable",
            client_keep_alive="disable",
            default_gw="0.0.0.0",
            default_gw_priority=0,
            dhgrp="14 5",
            digital_signature_auth="disable",
            distance=15,
            dns_mode="manual",
            dpd="on-demand",
            dpd_retrycount=3,
            dpd_retryinterval="20",
            eap="disable",
            eap_identity="use-id-payload",
            encap_local_gw4="0.0.0.0",
            encap_local_gw6="::",
            encap_remote_gw4="0.0.0.0",
            encap_remote_gw6="::",
            encapsulation="none",
            encapsulation_address="ike",
            enforce_unique_id="disable",
            exchange_interface_ip="disable",
            exchange_ip_addr4="0.0.0.0",
            exchange_ip_addr6="::",
            forticlient_enforcement="disable",
            fragmentation="enable",
            fragmentation_mtu=1200,
            group_authentication="disable",
            ha_sync_esp_seqno="enable",
            idle_timeout="disable",
            idle_timeoutinterval=15,
            ike_version="1",
            include_local_lan="disable",
            interface="port3",
            ip_version="4",
            ipv4_dns_server1="0.0.0.0",
            ipv4_dns_server2="0.0.0.0",
            ipv4_dns_server3="0.0.0.0",
            ipv4_end_ip="0.0.0.0",
            ipv4_netmask="255.255.255.255",
            ipv4_start_ip="0.0.0.0",
            ipv4_wins_server1="0.0.0.0",
            ipv4_wins_server2="0.0.0.0",
            ipv6_dns_server1="::",
            ipv6_dns_server2="::",
            ipv6_dns_server3="::",
            ipv6_end_ip="::",
            ipv6_prefix=128,
            ipv6_start_ip="::",
            keepalive=10,
            keylife=86400,
            local_gw="0.0.0.0",
            local_gw6="::",
            localid_type="auto",
            mesh_selector_type="disable",
            mode="main",
            mode_cfg="disable",
            monitor_hold_down_delay=0,
            monitor_hold_down_time="00:00",
            monitor_hold_down_type="immediate",
            monitor_hold_down_weekday="sunday",
            nattraversal="enable",
            negotiate_timeout=30,
            net_device="disable",
            passive_mode="disable",
            peertype="any",
            ppk="disable",
            priority=0,
            proposal="aes128-sha256 aes256-sha256 aes128-sha1 aes256-sha1",
            psksecret="eweeeeeeeecee",
            reauth="disable",
            rekey="enable",
            remote_gw="102.2.2.12",
            remote_gw6="::",
            rsa_signature_format="pkcs1",
            save_password="disable",
            send_cert_chain="enable",
            signature_hash_alg="sha2-512 sha2-384 sha2-256 sha1",
            suite_b="disable",
            tunnel_search="selectors",
            type="static",
            unity_support="enable",
            wizard_type="custom",
            xauthtype="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        VpnIpsec Phase1Interface can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:vpn/ipsec/phase1interface:Phase1interface labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:vpn/ipsec/phase1interface:Phase1interface labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param Phase1interfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Phase1interfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acct_verify: Optional[pulumi.Input[str]] = None,
                 add_gw_route: Optional[pulumi.Input[str]] = None,
                 add_route: Optional[pulumi.Input[str]] = None,
                 aggregate_member: Optional[pulumi.Input[str]] = None,
                 aggregate_weight: Optional[pulumi.Input[int]] = None,
                 assign_ip: Optional[pulumi.Input[str]] = None,
                 assign_ip_from: Optional[pulumi.Input[str]] = None,
                 authmethod: Optional[pulumi.Input[str]] = None,
                 authmethod_remote: Optional[pulumi.Input[str]] = None,
                 authpasswd: Optional[pulumi.Input[str]] = None,
                 authusr: Optional[pulumi.Input[str]] = None,
                 authusrgrp: Optional[pulumi.Input[str]] = None,
                 auto_discovery_crossover: Optional[pulumi.Input[str]] = None,
                 auto_discovery_forwarder: Optional[pulumi.Input[str]] = None,
                 auto_discovery_offer_interval: Optional[pulumi.Input[int]] = None,
                 auto_discovery_psk: Optional[pulumi.Input[str]] = None,
                 auto_discovery_receiver: Optional[pulumi.Input[str]] = None,
                 auto_discovery_sender: Optional[pulumi.Input[str]] = None,
                 auto_discovery_shortcuts: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 azure_ad_autoconnect: Optional[pulumi.Input[str]] = None,
                 backup_gateways: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceBackupGatewayArgs']]]]] = None,
                 banner: Optional[pulumi.Input[str]] = None,
                 cert_id_validation: Optional[pulumi.Input[str]] = None,
                 cert_trust_store: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceCertificateArgs']]]]] = None,
                 childless_ike: Optional[pulumi.Input[str]] = None,
                 client_auto_negotiate: Optional[pulumi.Input[str]] = None,
                 client_keep_alive: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 default_gw: Optional[pulumi.Input[str]] = None,
                 default_gw_priority: Optional[pulumi.Input[int]] = None,
                 dev_id: Optional[pulumi.Input[str]] = None,
                 dev_id_notification: Optional[pulumi.Input[str]] = None,
                 dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
                 dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 digital_signature_auth: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 dns_mode: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dpd: Optional[pulumi.Input[str]] = None,
                 dpd_retrycount: Optional[pulumi.Input[int]] = None,
                 dpd_retryinterval: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 eap: Optional[pulumi.Input[str]] = None,
                 eap_cert_auth: Optional[pulumi.Input[str]] = None,
                 eap_exclude_peergrp: Optional[pulumi.Input[str]] = None,
                 eap_identity: Optional[pulumi.Input[str]] = None,
                 ems_sn_check: Optional[pulumi.Input[str]] = None,
                 encap_local_gw4: Optional[pulumi.Input[str]] = None,
                 encap_local_gw6: Optional[pulumi.Input[str]] = None,
                 encap_remote_gw4: Optional[pulumi.Input[str]] = None,
                 encap_remote_gw6: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 encapsulation_address: Optional[pulumi.Input[str]] = None,
                 enforce_unique_id: Optional[pulumi.Input[str]] = None,
                 esn: Optional[pulumi.Input[str]] = None,
                 exchange_fgt_device_id: Optional[pulumi.Input[str]] = None,
                 exchange_interface_ip: Optional[pulumi.Input[str]] = None,
                 exchange_ip_addr4: Optional[pulumi.Input[str]] = None,
                 exchange_ip_addr6: Optional[pulumi.Input[str]] = None,
                 fallback_tcp_threshold: Optional[pulumi.Input[int]] = None,
                 fec_base: Optional[pulumi.Input[int]] = None,
                 fec_codec: Optional[pulumi.Input[int]] = None,
                 fec_codec_string: Optional[pulumi.Input[str]] = None,
                 fec_egress: Optional[pulumi.Input[str]] = None,
                 fec_health_check: Optional[pulumi.Input[str]] = None,
                 fec_ingress: Optional[pulumi.Input[str]] = None,
                 fec_mapping_profile: Optional[pulumi.Input[str]] = None,
                 fec_receive_timeout: Optional[pulumi.Input[int]] = None,
                 fec_redundant: Optional[pulumi.Input[int]] = None,
                 fec_send_timeout: Optional[pulumi.Input[int]] = None,
                 fgsp_sync: Optional[pulumi.Input[str]] = None,
                 forticlient_enforcement: Optional[pulumi.Input[str]] = None,
                 fortinet_esp: Optional[pulumi.Input[str]] = None,
                 fragmentation: Optional[pulumi.Input[str]] = None,
                 fragmentation_mtu: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_authentication: Optional[pulumi.Input[str]] = None,
                 group_authentication_secret: Optional[pulumi.Input[str]] = None,
                 ha_sync_esp_seqno: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[str]] = None,
                 idle_timeoutinterval: Optional[pulumi.Input[int]] = None,
                 ike_version: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 include_local_lan: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 internal_domain_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceInternalDomainListArgs']]]]] = None,
                 ip_delay_interval: Optional[pulumi.Input[int]] = None,
                 ip_fragmentation: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv4_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv4_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceIpv4ExcludeRangeArgs']]]]] = None,
                 ipv4_name: Optional[pulumi.Input[str]] = None,
                 ipv4_netmask: Optional[pulumi.Input[str]] = None,
                 ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv4_split_include: Optional[pulumi.Input[str]] = None,
                 ipv4_start_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv4_wins_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server3: Optional[pulumi.Input[str]] = None,
                 ipv6_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv6_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceIpv6ExcludeRangeArgs']]]]] = None,
                 ipv6_name: Optional[pulumi.Input[str]] = None,
                 ipv6_prefix: Optional[pulumi.Input[int]] = None,
                 ipv6_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv6_split_include: Optional[pulumi.Input[str]] = None,
                 ipv6_start_ip: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[int]] = None,
                 keylife: Optional[pulumi.Input[int]] = None,
                 kms: Optional[pulumi.Input[str]] = None,
                 link_cost: Optional[pulumi.Input[int]] = None,
                 local_gw: Optional[pulumi.Input[str]] = None,
                 local_gw6: Optional[pulumi.Input[str]] = None,
                 localid: Optional[pulumi.Input[str]] = None,
                 localid_type: Optional[pulumi.Input[str]] = None,
                 loopback_asymroute: Optional[pulumi.Input[str]] = None,
                 mesh_selector_type: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mode_cfg: Optional[pulumi.Input[str]] = None,
                 mode_cfg_allow_client_selector: Optional[pulumi.Input[str]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 monitor_hold_down_delay: Optional[pulumi.Input[int]] = None,
                 monitor_hold_down_time: Optional[pulumi.Input[str]] = None,
                 monitor_hold_down_type: Optional[pulumi.Input[str]] = None,
                 monitor_hold_down_weekday: Optional[pulumi.Input[str]] = None,
                 monitor_min: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nattraversal: Optional[pulumi.Input[str]] = None,
                 negotiate_timeout: Optional[pulumi.Input[int]] = None,
                 net_device: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[int]] = None,
                 network_overlay: Optional[pulumi.Input[str]] = None,
                 npu_offload: Optional[pulumi.Input[str]] = None,
                 packet_redistribution: Optional[pulumi.Input[str]] = None,
                 passive_mode: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 peergrp: Optional[pulumi.Input[str]] = None,
                 peerid: Optional[pulumi.Input[str]] = None,
                 peertype: Optional[pulumi.Input[str]] = None,
                 ppk: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 psksecret_remote: Optional[pulumi.Input[str]] = None,
                 qkd: Optional[pulumi.Input[str]] = None,
                 qkd_profile: Optional[pulumi.Input[str]] = None,
                 reauth: Optional[pulumi.Input[str]] = None,
                 rekey: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 remote_gw6: Optional[pulumi.Input[str]] = None,
                 remotegw_ddns: Optional[pulumi.Input[str]] = None,
                 rsa_signature_format: Optional[pulumi.Input[str]] = None,
                 rsa_signature_hash_override: Optional[pulumi.Input[str]] = None,
                 save_password: Optional[pulumi.Input[str]] = None,
                 send_cert_chain: Optional[pulumi.Input[str]] = None,
                 signature_hash_alg: Optional[pulumi.Input[str]] = None,
                 split_include_service: Optional[pulumi.Input[str]] = None,
                 suite_b: Optional[pulumi.Input[str]] = None,
                 transport: Optional[pulumi.Input[str]] = None,
                 tunnel_search: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unity_support: Optional[pulumi.Input[str]] = None,
                 usrgrp: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vni: Optional[pulumi.Input[int]] = None,
                 wizard_type: Optional[pulumi.Input[str]] = None,
                 xauthtype: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Phase1interfaceArgs.__new__(Phase1interfaceArgs)

            __props__.__dict__["acct_verify"] = acct_verify
            __props__.__dict__["add_gw_route"] = add_gw_route
            __props__.__dict__["add_route"] = add_route
            __props__.__dict__["aggregate_member"] = aggregate_member
            __props__.__dict__["aggregate_weight"] = aggregate_weight
            __props__.__dict__["assign_ip"] = assign_ip
            __props__.__dict__["assign_ip_from"] = assign_ip_from
            __props__.__dict__["authmethod"] = authmethod
            __props__.__dict__["authmethod_remote"] = authmethod_remote
            __props__.__dict__["authpasswd"] = None if authpasswd is None else pulumi.Output.secret(authpasswd)
            __props__.__dict__["authusr"] = authusr
            __props__.__dict__["authusrgrp"] = authusrgrp
            __props__.__dict__["auto_discovery_crossover"] = auto_discovery_crossover
            __props__.__dict__["auto_discovery_forwarder"] = auto_discovery_forwarder
            __props__.__dict__["auto_discovery_offer_interval"] = auto_discovery_offer_interval
            __props__.__dict__["auto_discovery_psk"] = auto_discovery_psk
            __props__.__dict__["auto_discovery_receiver"] = auto_discovery_receiver
            __props__.__dict__["auto_discovery_sender"] = auto_discovery_sender
            __props__.__dict__["auto_discovery_shortcuts"] = auto_discovery_shortcuts
            __props__.__dict__["auto_negotiate"] = auto_negotiate
            __props__.__dict__["azure_ad_autoconnect"] = azure_ad_autoconnect
            __props__.__dict__["backup_gateways"] = backup_gateways
            __props__.__dict__["banner"] = banner
            __props__.__dict__["cert_id_validation"] = cert_id_validation
            __props__.__dict__["cert_trust_store"] = cert_trust_store
            __props__.__dict__["certificates"] = certificates
            __props__.__dict__["childless_ike"] = childless_ike
            __props__.__dict__["client_auto_negotiate"] = client_auto_negotiate
            __props__.__dict__["client_keep_alive"] = client_keep_alive
            __props__.__dict__["comments"] = comments
            __props__.__dict__["default_gw"] = default_gw
            __props__.__dict__["default_gw_priority"] = default_gw_priority
            __props__.__dict__["dev_id"] = dev_id
            __props__.__dict__["dev_id_notification"] = dev_id_notification
            __props__.__dict__["dhcp6_ra_linkaddr"] = dhcp6_ra_linkaddr
            __props__.__dict__["dhcp_ra_giaddr"] = dhcp_ra_giaddr
            __props__.__dict__["dhgrp"] = dhgrp
            __props__.__dict__["digital_signature_auth"] = digital_signature_auth
            __props__.__dict__["distance"] = distance
            __props__.__dict__["dns_mode"] = dns_mode
            __props__.__dict__["domain"] = domain
            __props__.__dict__["dpd"] = dpd
            __props__.__dict__["dpd_retrycount"] = dpd_retrycount
            __props__.__dict__["dpd_retryinterval"] = dpd_retryinterval
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["eap"] = eap
            __props__.__dict__["eap_cert_auth"] = eap_cert_auth
            __props__.__dict__["eap_exclude_peergrp"] = eap_exclude_peergrp
            __props__.__dict__["eap_identity"] = eap_identity
            __props__.__dict__["ems_sn_check"] = ems_sn_check
            __props__.__dict__["encap_local_gw4"] = encap_local_gw4
            __props__.__dict__["encap_local_gw6"] = encap_local_gw6
            __props__.__dict__["encap_remote_gw4"] = encap_remote_gw4
            __props__.__dict__["encap_remote_gw6"] = encap_remote_gw6
            __props__.__dict__["encapsulation"] = encapsulation
            __props__.__dict__["encapsulation_address"] = encapsulation_address
            __props__.__dict__["enforce_unique_id"] = enforce_unique_id
            __props__.__dict__["esn"] = esn
            __props__.__dict__["exchange_fgt_device_id"] = exchange_fgt_device_id
            __props__.__dict__["exchange_interface_ip"] = exchange_interface_ip
            __props__.__dict__["exchange_ip_addr4"] = exchange_ip_addr4
            __props__.__dict__["exchange_ip_addr6"] = exchange_ip_addr6
            __props__.__dict__["fallback_tcp_threshold"] = fallback_tcp_threshold
            __props__.__dict__["fec_base"] = fec_base
            __props__.__dict__["fec_codec"] = fec_codec
            __props__.__dict__["fec_codec_string"] = fec_codec_string
            __props__.__dict__["fec_egress"] = fec_egress
            __props__.__dict__["fec_health_check"] = fec_health_check
            __props__.__dict__["fec_ingress"] = fec_ingress
            __props__.__dict__["fec_mapping_profile"] = fec_mapping_profile
            __props__.__dict__["fec_receive_timeout"] = fec_receive_timeout
            __props__.__dict__["fec_redundant"] = fec_redundant
            __props__.__dict__["fec_send_timeout"] = fec_send_timeout
            __props__.__dict__["fgsp_sync"] = fgsp_sync
            __props__.__dict__["forticlient_enforcement"] = forticlient_enforcement
            __props__.__dict__["fortinet_esp"] = fortinet_esp
            __props__.__dict__["fragmentation"] = fragmentation
            __props__.__dict__["fragmentation_mtu"] = fragmentation_mtu
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["group_authentication"] = group_authentication
            __props__.__dict__["group_authentication_secret"] = None if group_authentication_secret is None else pulumi.Output.secret(group_authentication_secret)
            __props__.__dict__["ha_sync_esp_seqno"] = ha_sync_esp_seqno
            __props__.__dict__["idle_timeout"] = idle_timeout
            __props__.__dict__["idle_timeoutinterval"] = idle_timeoutinterval
            __props__.__dict__["ike_version"] = ike_version
            __props__.__dict__["inbound_dscp_copy"] = inbound_dscp_copy
            __props__.__dict__["include_local_lan"] = include_local_lan
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["internal_domain_lists"] = internal_domain_lists
            __props__.__dict__["ip_delay_interval"] = ip_delay_interval
            __props__.__dict__["ip_fragmentation"] = ip_fragmentation
            __props__.__dict__["ip_version"] = ip_version
            __props__.__dict__["ipv4_dns_server1"] = ipv4_dns_server1
            __props__.__dict__["ipv4_dns_server2"] = ipv4_dns_server2
            __props__.__dict__["ipv4_dns_server3"] = ipv4_dns_server3
            __props__.__dict__["ipv4_end_ip"] = ipv4_end_ip
            __props__.__dict__["ipv4_exclude_ranges"] = ipv4_exclude_ranges
            __props__.__dict__["ipv4_name"] = ipv4_name
            __props__.__dict__["ipv4_netmask"] = ipv4_netmask
            __props__.__dict__["ipv4_split_exclude"] = ipv4_split_exclude
            __props__.__dict__["ipv4_split_include"] = ipv4_split_include
            __props__.__dict__["ipv4_start_ip"] = ipv4_start_ip
            __props__.__dict__["ipv4_wins_server1"] = ipv4_wins_server1
            __props__.__dict__["ipv4_wins_server2"] = ipv4_wins_server2
            __props__.__dict__["ipv6_dns_server1"] = ipv6_dns_server1
            __props__.__dict__["ipv6_dns_server2"] = ipv6_dns_server2
            __props__.__dict__["ipv6_dns_server3"] = ipv6_dns_server3
            __props__.__dict__["ipv6_end_ip"] = ipv6_end_ip
            __props__.__dict__["ipv6_exclude_ranges"] = ipv6_exclude_ranges
            __props__.__dict__["ipv6_name"] = ipv6_name
            __props__.__dict__["ipv6_prefix"] = ipv6_prefix
            __props__.__dict__["ipv6_split_exclude"] = ipv6_split_exclude
            __props__.__dict__["ipv6_split_include"] = ipv6_split_include
            __props__.__dict__["ipv6_start_ip"] = ipv6_start_ip
            __props__.__dict__["keepalive"] = keepalive
            __props__.__dict__["keylife"] = keylife
            __props__.__dict__["kms"] = kms
            __props__.__dict__["link_cost"] = link_cost
            __props__.__dict__["local_gw"] = local_gw
            __props__.__dict__["local_gw6"] = local_gw6
            __props__.__dict__["localid"] = localid
            __props__.__dict__["localid_type"] = localid_type
            __props__.__dict__["loopback_asymroute"] = loopback_asymroute
            __props__.__dict__["mesh_selector_type"] = mesh_selector_type
            __props__.__dict__["mode"] = mode
            __props__.__dict__["mode_cfg"] = mode_cfg
            __props__.__dict__["mode_cfg_allow_client_selector"] = mode_cfg_allow_client_selector
            __props__.__dict__["monitor"] = monitor
            __props__.__dict__["monitor_hold_down_delay"] = monitor_hold_down_delay
            __props__.__dict__["monitor_hold_down_time"] = monitor_hold_down_time
            __props__.__dict__["monitor_hold_down_type"] = monitor_hold_down_type
            __props__.__dict__["monitor_hold_down_weekday"] = monitor_hold_down_weekday
            __props__.__dict__["monitor_min"] = monitor_min
            __props__.__dict__["name"] = name
            __props__.__dict__["nattraversal"] = nattraversal
            __props__.__dict__["negotiate_timeout"] = negotiate_timeout
            __props__.__dict__["net_device"] = net_device
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["network_overlay"] = network_overlay
            __props__.__dict__["npu_offload"] = npu_offload
            __props__.__dict__["packet_redistribution"] = packet_redistribution
            __props__.__dict__["passive_mode"] = passive_mode
            __props__.__dict__["peer"] = peer
            __props__.__dict__["peergrp"] = peergrp
            __props__.__dict__["peerid"] = peerid
            __props__.__dict__["peertype"] = peertype
            __props__.__dict__["ppk"] = ppk
            __props__.__dict__["ppk_identity"] = ppk_identity
            __props__.__dict__["ppk_secret"] = None if ppk_secret is None else pulumi.Output.secret(ppk_secret)
            __props__.__dict__["priority"] = priority
            if proposal is None and not opts.urn:
                raise TypeError("Missing required property 'proposal'")
            __props__.__dict__["proposal"] = proposal
            __props__.__dict__["psksecret"] = None if psksecret is None else pulumi.Output.secret(psksecret)
            __props__.__dict__["psksecret_remote"] = None if psksecret_remote is None else pulumi.Output.secret(psksecret_remote)
            __props__.__dict__["qkd"] = qkd
            __props__.__dict__["qkd_profile"] = qkd_profile
            __props__.__dict__["reauth"] = reauth
            __props__.__dict__["rekey"] = rekey
            __props__.__dict__["remote_gw"] = remote_gw
            __props__.__dict__["remote_gw6"] = remote_gw6
            __props__.__dict__["remotegw_ddns"] = remotegw_ddns
            __props__.__dict__["rsa_signature_format"] = rsa_signature_format
            __props__.__dict__["rsa_signature_hash_override"] = rsa_signature_hash_override
            __props__.__dict__["save_password"] = save_password
            __props__.__dict__["send_cert_chain"] = send_cert_chain
            __props__.__dict__["signature_hash_alg"] = signature_hash_alg
            __props__.__dict__["split_include_service"] = split_include_service
            __props__.__dict__["suite_b"] = suite_b
            __props__.__dict__["transport"] = transport
            __props__.__dict__["tunnel_search"] = tunnel_search
            __props__.__dict__["type"] = type
            __props__.__dict__["unity_support"] = unity_support
            __props__.__dict__["usrgrp"] = usrgrp
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vni"] = vni
            __props__.__dict__["wizard_type"] = wizard_type
            __props__.__dict__["xauthtype"] = xauthtype
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["authpasswd", "groupAuthenticationSecret", "ppkSecret", "psksecret", "psksecretRemote"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Phase1interface, __self__).__init__(
            'fortios:vpn/ipsec/phase1interface:Phase1interface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acct_verify: Optional[pulumi.Input[str]] = None,
            add_gw_route: Optional[pulumi.Input[str]] = None,
            add_route: Optional[pulumi.Input[str]] = None,
            aggregate_member: Optional[pulumi.Input[str]] = None,
            aggregate_weight: Optional[pulumi.Input[int]] = None,
            assign_ip: Optional[pulumi.Input[str]] = None,
            assign_ip_from: Optional[pulumi.Input[str]] = None,
            authmethod: Optional[pulumi.Input[str]] = None,
            authmethod_remote: Optional[pulumi.Input[str]] = None,
            authpasswd: Optional[pulumi.Input[str]] = None,
            authusr: Optional[pulumi.Input[str]] = None,
            authusrgrp: Optional[pulumi.Input[str]] = None,
            auto_discovery_crossover: Optional[pulumi.Input[str]] = None,
            auto_discovery_forwarder: Optional[pulumi.Input[str]] = None,
            auto_discovery_offer_interval: Optional[pulumi.Input[int]] = None,
            auto_discovery_psk: Optional[pulumi.Input[str]] = None,
            auto_discovery_receiver: Optional[pulumi.Input[str]] = None,
            auto_discovery_sender: Optional[pulumi.Input[str]] = None,
            auto_discovery_shortcuts: Optional[pulumi.Input[str]] = None,
            auto_negotiate: Optional[pulumi.Input[str]] = None,
            azure_ad_autoconnect: Optional[pulumi.Input[str]] = None,
            backup_gateways: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceBackupGatewayArgs']]]]] = None,
            banner: Optional[pulumi.Input[str]] = None,
            cert_id_validation: Optional[pulumi.Input[str]] = None,
            cert_trust_store: Optional[pulumi.Input[str]] = None,
            certificates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceCertificateArgs']]]]] = None,
            childless_ike: Optional[pulumi.Input[str]] = None,
            client_auto_negotiate: Optional[pulumi.Input[str]] = None,
            client_keep_alive: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            default_gw: Optional[pulumi.Input[str]] = None,
            default_gw_priority: Optional[pulumi.Input[int]] = None,
            dev_id: Optional[pulumi.Input[str]] = None,
            dev_id_notification: Optional[pulumi.Input[str]] = None,
            dhcp6_ra_linkaddr: Optional[pulumi.Input[str]] = None,
            dhcp_ra_giaddr: Optional[pulumi.Input[str]] = None,
            dhgrp: Optional[pulumi.Input[str]] = None,
            digital_signature_auth: Optional[pulumi.Input[str]] = None,
            distance: Optional[pulumi.Input[int]] = None,
            dns_mode: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            dpd: Optional[pulumi.Input[str]] = None,
            dpd_retrycount: Optional[pulumi.Input[int]] = None,
            dpd_retryinterval: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            eap: Optional[pulumi.Input[str]] = None,
            eap_cert_auth: Optional[pulumi.Input[str]] = None,
            eap_exclude_peergrp: Optional[pulumi.Input[str]] = None,
            eap_identity: Optional[pulumi.Input[str]] = None,
            ems_sn_check: Optional[pulumi.Input[str]] = None,
            encap_local_gw4: Optional[pulumi.Input[str]] = None,
            encap_local_gw6: Optional[pulumi.Input[str]] = None,
            encap_remote_gw4: Optional[pulumi.Input[str]] = None,
            encap_remote_gw6: Optional[pulumi.Input[str]] = None,
            encapsulation: Optional[pulumi.Input[str]] = None,
            encapsulation_address: Optional[pulumi.Input[str]] = None,
            enforce_unique_id: Optional[pulumi.Input[str]] = None,
            esn: Optional[pulumi.Input[str]] = None,
            exchange_fgt_device_id: Optional[pulumi.Input[str]] = None,
            exchange_interface_ip: Optional[pulumi.Input[str]] = None,
            exchange_ip_addr4: Optional[pulumi.Input[str]] = None,
            exchange_ip_addr6: Optional[pulumi.Input[str]] = None,
            fallback_tcp_threshold: Optional[pulumi.Input[int]] = None,
            fec_base: Optional[pulumi.Input[int]] = None,
            fec_codec: Optional[pulumi.Input[int]] = None,
            fec_codec_string: Optional[pulumi.Input[str]] = None,
            fec_egress: Optional[pulumi.Input[str]] = None,
            fec_health_check: Optional[pulumi.Input[str]] = None,
            fec_ingress: Optional[pulumi.Input[str]] = None,
            fec_mapping_profile: Optional[pulumi.Input[str]] = None,
            fec_receive_timeout: Optional[pulumi.Input[int]] = None,
            fec_redundant: Optional[pulumi.Input[int]] = None,
            fec_send_timeout: Optional[pulumi.Input[int]] = None,
            fgsp_sync: Optional[pulumi.Input[str]] = None,
            forticlient_enforcement: Optional[pulumi.Input[str]] = None,
            fortinet_esp: Optional[pulumi.Input[str]] = None,
            fragmentation: Optional[pulumi.Input[str]] = None,
            fragmentation_mtu: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            group_authentication: Optional[pulumi.Input[str]] = None,
            group_authentication_secret: Optional[pulumi.Input[str]] = None,
            ha_sync_esp_seqno: Optional[pulumi.Input[str]] = None,
            idle_timeout: Optional[pulumi.Input[str]] = None,
            idle_timeoutinterval: Optional[pulumi.Input[int]] = None,
            ike_version: Optional[pulumi.Input[str]] = None,
            inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
            include_local_lan: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            internal_domain_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceInternalDomainListArgs']]]]] = None,
            ip_delay_interval: Optional[pulumi.Input[int]] = None,
            ip_fragmentation: Optional[pulumi.Input[str]] = None,
            ip_version: Optional[pulumi.Input[str]] = None,
            ipv4_dns_server1: Optional[pulumi.Input[str]] = None,
            ipv4_dns_server2: Optional[pulumi.Input[str]] = None,
            ipv4_dns_server3: Optional[pulumi.Input[str]] = None,
            ipv4_end_ip: Optional[pulumi.Input[str]] = None,
            ipv4_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceIpv4ExcludeRangeArgs']]]]] = None,
            ipv4_name: Optional[pulumi.Input[str]] = None,
            ipv4_netmask: Optional[pulumi.Input[str]] = None,
            ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
            ipv4_split_include: Optional[pulumi.Input[str]] = None,
            ipv4_start_ip: Optional[pulumi.Input[str]] = None,
            ipv4_wins_server1: Optional[pulumi.Input[str]] = None,
            ipv4_wins_server2: Optional[pulumi.Input[str]] = None,
            ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
            ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
            ipv6_dns_server3: Optional[pulumi.Input[str]] = None,
            ipv6_end_ip: Optional[pulumi.Input[str]] = None,
            ipv6_exclude_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceIpv6ExcludeRangeArgs']]]]] = None,
            ipv6_name: Optional[pulumi.Input[str]] = None,
            ipv6_prefix: Optional[pulumi.Input[int]] = None,
            ipv6_split_exclude: Optional[pulumi.Input[str]] = None,
            ipv6_split_include: Optional[pulumi.Input[str]] = None,
            ipv6_start_ip: Optional[pulumi.Input[str]] = None,
            keepalive: Optional[pulumi.Input[int]] = None,
            keylife: Optional[pulumi.Input[int]] = None,
            kms: Optional[pulumi.Input[str]] = None,
            link_cost: Optional[pulumi.Input[int]] = None,
            local_gw: Optional[pulumi.Input[str]] = None,
            local_gw6: Optional[pulumi.Input[str]] = None,
            localid: Optional[pulumi.Input[str]] = None,
            localid_type: Optional[pulumi.Input[str]] = None,
            loopback_asymroute: Optional[pulumi.Input[str]] = None,
            mesh_selector_type: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            mode_cfg: Optional[pulumi.Input[str]] = None,
            mode_cfg_allow_client_selector: Optional[pulumi.Input[str]] = None,
            monitor: Optional[pulumi.Input[str]] = None,
            monitor_hold_down_delay: Optional[pulumi.Input[int]] = None,
            monitor_hold_down_time: Optional[pulumi.Input[str]] = None,
            monitor_hold_down_type: Optional[pulumi.Input[str]] = None,
            monitor_hold_down_weekday: Optional[pulumi.Input[str]] = None,
            monitor_min: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nattraversal: Optional[pulumi.Input[str]] = None,
            negotiate_timeout: Optional[pulumi.Input[int]] = None,
            net_device: Optional[pulumi.Input[str]] = None,
            network_id: Optional[pulumi.Input[int]] = None,
            network_overlay: Optional[pulumi.Input[str]] = None,
            npu_offload: Optional[pulumi.Input[str]] = None,
            packet_redistribution: Optional[pulumi.Input[str]] = None,
            passive_mode: Optional[pulumi.Input[str]] = None,
            peer: Optional[pulumi.Input[str]] = None,
            peergrp: Optional[pulumi.Input[str]] = None,
            peerid: Optional[pulumi.Input[str]] = None,
            peertype: Optional[pulumi.Input[str]] = None,
            ppk: Optional[pulumi.Input[str]] = None,
            ppk_identity: Optional[pulumi.Input[str]] = None,
            ppk_secret: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            proposal: Optional[pulumi.Input[str]] = None,
            psksecret: Optional[pulumi.Input[str]] = None,
            psksecret_remote: Optional[pulumi.Input[str]] = None,
            qkd: Optional[pulumi.Input[str]] = None,
            qkd_profile: Optional[pulumi.Input[str]] = None,
            reauth: Optional[pulumi.Input[str]] = None,
            rekey: Optional[pulumi.Input[str]] = None,
            remote_gw: Optional[pulumi.Input[str]] = None,
            remote_gw6: Optional[pulumi.Input[str]] = None,
            remotegw_ddns: Optional[pulumi.Input[str]] = None,
            rsa_signature_format: Optional[pulumi.Input[str]] = None,
            rsa_signature_hash_override: Optional[pulumi.Input[str]] = None,
            save_password: Optional[pulumi.Input[str]] = None,
            send_cert_chain: Optional[pulumi.Input[str]] = None,
            signature_hash_alg: Optional[pulumi.Input[str]] = None,
            split_include_service: Optional[pulumi.Input[str]] = None,
            suite_b: Optional[pulumi.Input[str]] = None,
            transport: Optional[pulumi.Input[str]] = None,
            tunnel_search: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            unity_support: Optional[pulumi.Input[str]] = None,
            usrgrp: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vni: Optional[pulumi.Input[int]] = None,
            wizard_type: Optional[pulumi.Input[str]] = None,
            xauthtype: Optional[pulumi.Input[str]] = None) -> 'Phase1interface':
        """
        Get an existing Phase1interface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acct_verify: Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] add_gw_route: Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] add_route: Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] aggregate_member: Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] aggregate_weight: Link weight for aggregate.
        :param pulumi.Input[str] assign_ip: Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] assign_ip_from: Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
        :param pulumi.Input[str] authmethod: Authentication method. Valid values: `psk`, `signature`.
        :param pulumi.Input[str] authmethod_remote: Authentication method (remote side). Valid values: `psk`, `signature`.
        :param pulumi.Input[str] authpasswd: XAuth password (max 35 characters).
        :param pulumi.Input[str] authusr: XAuth user name.
        :param pulumi.Input[str] authusrgrp: Authentication user group.
        :param pulumi.Input[str] auto_discovery_crossover: Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
        :param pulumi.Input[str] auto_discovery_forwarder: Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_discovery_offer_interval: Interval between shortcut offer messages in seconds (1 - 300, default = 5).
        :param pulumi.Input[str] auto_discovery_psk: Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_receiver: Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_sender: Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_shortcuts: Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
        :param pulumi.Input[str] auto_negotiate: Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] azure_ad_autoconnect: Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceBackupGatewayArgs']]]] backup_gateways: Instruct unity clients about the backup gateway address(es). The structure of `backup_gateway` block is documented below.
        :param pulumi.Input[str] banner: Message that unity client should display after connecting.
        :param pulumi.Input[str] cert_id_validation: Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cert_trust_store: CA certificate trust store. Valid values: `local`, `ems`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceCertificateArgs']]]] certificates: The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
        :param pulumi.Input[str] childless_ike: Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] client_auto_negotiate: Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] client_keep_alive: Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] default_gw: IPv4 address of default route gateway to use for traffic exiting the interface.
        :param pulumi.Input[int] default_gw_priority: Priority for default gateway route. A higher priority number signifies a less preferred route.
        :param pulumi.Input[str] dev_id: Device ID carried by the device ID notification.
        :param pulumi.Input[str] dev_id_notification: Enable/disable device ID notification. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp6_ra_linkaddr: Relay agent IPv6 link address to use in DHCP6 requests.
        :param pulumi.Input[str] dhcp_ra_giaddr: Relay agent gateway IP address to use in the giaddr field of DHCP requests.
        :param pulumi.Input[str] dhgrp: DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        :param pulumi.Input[str] digital_signature_auth: Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] distance: Distance for routes added by IKE (1 - 255).
        :param pulumi.Input[str] dns_mode: DNS server mode. Valid values: `manual`, `auto`.
        :param pulumi.Input[str] domain: Instruct unity clients about the default DNS domain.
        :param pulumi.Input[str] dpd: Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
        :param pulumi.Input[int] dpd_retrycount: Number of DPD retry attempts.
        :param pulumi.Input[str] dpd_retryinterval: DPD retry interval.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] eap: Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] eap_cert_auth: Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] eap_exclude_peergrp: Peer group excluded from EAP authentication.
        :param pulumi.Input[str] eap_identity: IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
        :param pulumi.Input[str] ems_sn_check: Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] encap_local_gw4: Local IPv4 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encap_local_gw6: Local IPv6 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encap_remote_gw4: Remote IPv4 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encap_remote_gw6: Remote IPv6 address of GRE/VXLAN tunnel.
        :param pulumi.Input[str] encapsulation: Enable/disable GRE/VXLAN encapsulation.
        :param pulumi.Input[str] encapsulation_address: Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
        :param pulumi.Input[str] enforce_unique_id: Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
        :param pulumi.Input[str] esn: Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
        :param pulumi.Input[str] exchange_fgt_device_id: Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] exchange_interface_ip: Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] exchange_ip_addr4: IPv4 address to exchange with peers.
        :param pulumi.Input[str] exchange_ip_addr6: IPv6 address to exchange with peers
        :param pulumi.Input[int] fallback_tcp_threshold: Timeout in seconds before falling back IKE/IPsec traffic to tcp.
        :param pulumi.Input[int] fec_base: Number of base Forward Error Correction packets (1 - 100).
        :param pulumi.Input[int] fec_codec: ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
        :param pulumi.Input[str] fec_codec_string: Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
        :param pulumi.Input[str] fec_egress: Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fec_health_check: SD-WAN health check.
        :param pulumi.Input[str] fec_ingress: Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fec_mapping_profile: Forward Error Correction (FEC) mapping profile.
        :param pulumi.Input[int] fec_receive_timeout: Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
        :param pulumi.Input[int] fec_redundant: Number of redundant Forward Error Correction packets (1 - 100).
        :param pulumi.Input[int] fec_send_timeout: Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
        :param pulumi.Input[str] fgsp_sync: Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_enforcement: Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortinet_esp: Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fragmentation: Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fragmentation_mtu: IKE fragmentation MTU (500 - 16000).
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_authentication: Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] group_authentication_secret: Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
        :param pulumi.Input[str] ha_sync_esp_seqno: Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] idle_timeout: Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] idle_timeoutinterval: IPsec tunnel idle timeout in minutes (5 - 43200).
        :param pulumi.Input[str] ike_version: IKE protocol version. Valid values: `1`, `2`.
        :param pulumi.Input[str] inbound_dscp_copy: Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] include_local_lan: Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] interface: Local physical, aggregate, or VLAN outgoing interface.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceInternalDomainListArgs']]]] internal_domain_lists: One or more internal domain names in quotes separated by spaces. The structure of `internal_domain_list` block is documented below.
        :param pulumi.Input[int] ip_delay_interval: IP address reuse delay interval in seconds (0 - 28800).
        :param pulumi.Input[str] ip_fragmentation: Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
        :param pulumi.Input[str] ip_version: IP version to use for VPN interface. Valid values: `4`, `6`.
        :param pulumi.Input[str] ipv4_dns_server1: IPv4 DNS server 1.
        :param pulumi.Input[str] ipv4_dns_server2: IPv4 DNS server 2.
        :param pulumi.Input[str] ipv4_dns_server3: IPv4 DNS server 3.
        :param pulumi.Input[str] ipv4_end_ip: End of IPv4 range.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceIpv4ExcludeRangeArgs']]]] ipv4_exclude_ranges: Configuration Method IPv4 exclude ranges. The structure of `ipv4_exclude_range` block is documented below.
        :param pulumi.Input[str] ipv4_name: IPv4 address name.
        :param pulumi.Input[str] ipv4_netmask: IPv4 Netmask.
        :param pulumi.Input[str] ipv4_split_exclude: IPv4 subnets that should not be sent over the IPsec tunnel.
        :param pulumi.Input[str] ipv4_split_include: IPv4 split-include subnets.
        :param pulumi.Input[str] ipv4_start_ip: Start of IPv4 range.
        :param pulumi.Input[str] ipv4_wins_server1: WINS server 1.
        :param pulumi.Input[str] ipv4_wins_server2: WINS server 2.
        :param pulumi.Input[str] ipv6_dns_server1: IPv6 DNS server 1.
        :param pulumi.Input[str] ipv6_dns_server2: IPv6 DNS server 2.
        :param pulumi.Input[str] ipv6_dns_server3: IPv6 DNS server 3.
        :param pulumi.Input[str] ipv6_end_ip: End of IPv6 range.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Phase1interfaceIpv6ExcludeRangeArgs']]]] ipv6_exclude_ranges: Configuration method IPv6 exclude ranges. The structure of `ipv6_exclude_range` block is documented below.
        :param pulumi.Input[str] ipv6_name: IPv6 address name.
        :param pulumi.Input[int] ipv6_prefix: IPv6 prefix.
        :param pulumi.Input[str] ipv6_split_exclude: IPv6 subnets that should not be sent over the IPsec tunnel.
        :param pulumi.Input[str] ipv6_split_include: IPv6 split-include subnets.
        :param pulumi.Input[str] ipv6_start_ip: Start of IPv6 range.
        :param pulumi.Input[int] keepalive: NAT-T keep alive interval.
        :param pulumi.Input[int] keylife: Time to wait in seconds before phase 1 encryption key expires.
        :param pulumi.Input[str] kms: Key Management Services server.
        :param pulumi.Input[int] link_cost: VPN tunnel underlay link cost.
        :param pulumi.Input[str] local_gw: IPv4 address of the local gateway's external interface.
        :param pulumi.Input[str] local_gw6: IPv6 address of the local gateway's external interface.
        :param pulumi.Input[str] localid: Local ID.
        :param pulumi.Input[str] localid_type: Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
        :param pulumi.Input[str] loopback_asymroute: Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mesh_selector_type: Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
        :param pulumi.Input[str] mode: The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
        :param pulumi.Input[str] mode_cfg: Enable/disable configuration method. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] mode_cfg_allow_client_selector: Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] monitor: IPsec interface as backup for primary interface.
        :param pulumi.Input[int] monitor_hold_down_delay: Time to wait in seconds before recovery once primary re-establishes.
        :param pulumi.Input[str] monitor_hold_down_time: Time of day at which to fail back to primary after it re-establishes.
        :param pulumi.Input[str] monitor_hold_down_type: Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
        :param pulumi.Input[str] monitor_hold_down_weekday: Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[int] monitor_min: Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
        :param pulumi.Input[str] name: IPsec remote gateway name.
        :param pulumi.Input[str] nattraversal: Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
        :param pulumi.Input[int] negotiate_timeout: IKE SA negotiation timeout in seconds (1 - 300).
        :param pulumi.Input[str] net_device: Enable/disable kernel device creation. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] network_id: VPN gateway network ID.
        :param pulumi.Input[str] network_overlay: Enable/disable network overlays. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] npu_offload: Enable/disable offloading NPU. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] packet_redistribution: Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] passive_mode: Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] peer: Accept this peer certificate.
        :param pulumi.Input[str] peergrp: Accept this peer certificate group.
        :param pulumi.Input[str] peerid: Accept this peer identity.
        :param pulumi.Input[str] peertype: Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
        :param pulumi.Input[str] ppk: Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
        :param pulumi.Input[str] ppk_identity: IKEv2 Postquantum Preshared Key Identity.
        :param pulumi.Input[str] ppk_secret: IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[int] priority: Priority for routes added by IKE (0 - 4294967295).
        :param pulumi.Input[str] proposal: Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        :param pulumi.Input[str] psksecret: Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[str] psksecret_remote: Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[str] qkd: Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
        :param pulumi.Input[str] qkd_profile: Quantum Key Distribution (QKD) server profile.
        :param pulumi.Input[str] reauth: Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] rekey: Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remote_gw: IPv4 address of the remote gateway's external interface.
        :param pulumi.Input[str] remote_gw6: IPv6 address of the remote gateway's external interface.
        :param pulumi.Input[str] remotegw_ddns: Domain name of remote gateway (eg. name.DDNS.com).
        :param pulumi.Input[str] rsa_signature_format: Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
        :param pulumi.Input[str] rsa_signature_hash_override: Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] save_password: Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] send_cert_chain: Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] signature_hash_alg: Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
        :param pulumi.Input[str] split_include_service: Split-include services.
        :param pulumi.Input[str] suite_b: Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
        :param pulumi.Input[str] transport: Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
        :param pulumi.Input[str] tunnel_search: Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
        :param pulumi.Input[str] type: Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
        :param pulumi.Input[str] unity_support: Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] usrgrp: User group name for dialup peers.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[int] vni: VNI of VXLAN tunnel.
        :param pulumi.Input[str] wizard_type: GUI VPN Wizard Type.
        :param pulumi.Input[str] xauthtype: XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Phase1interfaceState.__new__(_Phase1interfaceState)

        __props__.__dict__["acct_verify"] = acct_verify
        __props__.__dict__["add_gw_route"] = add_gw_route
        __props__.__dict__["add_route"] = add_route
        __props__.__dict__["aggregate_member"] = aggregate_member
        __props__.__dict__["aggregate_weight"] = aggregate_weight
        __props__.__dict__["assign_ip"] = assign_ip
        __props__.__dict__["assign_ip_from"] = assign_ip_from
        __props__.__dict__["authmethod"] = authmethod
        __props__.__dict__["authmethod_remote"] = authmethod_remote
        __props__.__dict__["authpasswd"] = authpasswd
        __props__.__dict__["authusr"] = authusr
        __props__.__dict__["authusrgrp"] = authusrgrp
        __props__.__dict__["auto_discovery_crossover"] = auto_discovery_crossover
        __props__.__dict__["auto_discovery_forwarder"] = auto_discovery_forwarder
        __props__.__dict__["auto_discovery_offer_interval"] = auto_discovery_offer_interval
        __props__.__dict__["auto_discovery_psk"] = auto_discovery_psk
        __props__.__dict__["auto_discovery_receiver"] = auto_discovery_receiver
        __props__.__dict__["auto_discovery_sender"] = auto_discovery_sender
        __props__.__dict__["auto_discovery_shortcuts"] = auto_discovery_shortcuts
        __props__.__dict__["auto_negotiate"] = auto_negotiate
        __props__.__dict__["azure_ad_autoconnect"] = azure_ad_autoconnect
        __props__.__dict__["backup_gateways"] = backup_gateways
        __props__.__dict__["banner"] = banner
        __props__.__dict__["cert_id_validation"] = cert_id_validation
        __props__.__dict__["cert_trust_store"] = cert_trust_store
        __props__.__dict__["certificates"] = certificates
        __props__.__dict__["childless_ike"] = childless_ike
        __props__.__dict__["client_auto_negotiate"] = client_auto_negotiate
        __props__.__dict__["client_keep_alive"] = client_keep_alive
        __props__.__dict__["comments"] = comments
        __props__.__dict__["default_gw"] = default_gw
        __props__.__dict__["default_gw_priority"] = default_gw_priority
        __props__.__dict__["dev_id"] = dev_id
        __props__.__dict__["dev_id_notification"] = dev_id_notification
        __props__.__dict__["dhcp6_ra_linkaddr"] = dhcp6_ra_linkaddr
        __props__.__dict__["dhcp_ra_giaddr"] = dhcp_ra_giaddr
        __props__.__dict__["dhgrp"] = dhgrp
        __props__.__dict__["digital_signature_auth"] = digital_signature_auth
        __props__.__dict__["distance"] = distance
        __props__.__dict__["dns_mode"] = dns_mode
        __props__.__dict__["domain"] = domain
        __props__.__dict__["dpd"] = dpd
        __props__.__dict__["dpd_retrycount"] = dpd_retrycount
        __props__.__dict__["dpd_retryinterval"] = dpd_retryinterval
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["eap"] = eap
        __props__.__dict__["eap_cert_auth"] = eap_cert_auth
        __props__.__dict__["eap_exclude_peergrp"] = eap_exclude_peergrp
        __props__.__dict__["eap_identity"] = eap_identity
        __props__.__dict__["ems_sn_check"] = ems_sn_check
        __props__.__dict__["encap_local_gw4"] = encap_local_gw4
        __props__.__dict__["encap_local_gw6"] = encap_local_gw6
        __props__.__dict__["encap_remote_gw4"] = encap_remote_gw4
        __props__.__dict__["encap_remote_gw6"] = encap_remote_gw6
        __props__.__dict__["encapsulation"] = encapsulation
        __props__.__dict__["encapsulation_address"] = encapsulation_address
        __props__.__dict__["enforce_unique_id"] = enforce_unique_id
        __props__.__dict__["esn"] = esn
        __props__.__dict__["exchange_fgt_device_id"] = exchange_fgt_device_id
        __props__.__dict__["exchange_interface_ip"] = exchange_interface_ip
        __props__.__dict__["exchange_ip_addr4"] = exchange_ip_addr4
        __props__.__dict__["exchange_ip_addr6"] = exchange_ip_addr6
        __props__.__dict__["fallback_tcp_threshold"] = fallback_tcp_threshold
        __props__.__dict__["fec_base"] = fec_base
        __props__.__dict__["fec_codec"] = fec_codec
        __props__.__dict__["fec_codec_string"] = fec_codec_string
        __props__.__dict__["fec_egress"] = fec_egress
        __props__.__dict__["fec_health_check"] = fec_health_check
        __props__.__dict__["fec_ingress"] = fec_ingress
        __props__.__dict__["fec_mapping_profile"] = fec_mapping_profile
        __props__.__dict__["fec_receive_timeout"] = fec_receive_timeout
        __props__.__dict__["fec_redundant"] = fec_redundant
        __props__.__dict__["fec_send_timeout"] = fec_send_timeout
        __props__.__dict__["fgsp_sync"] = fgsp_sync
        __props__.__dict__["forticlient_enforcement"] = forticlient_enforcement
        __props__.__dict__["fortinet_esp"] = fortinet_esp
        __props__.__dict__["fragmentation"] = fragmentation
        __props__.__dict__["fragmentation_mtu"] = fragmentation_mtu
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["group_authentication"] = group_authentication
        __props__.__dict__["group_authentication_secret"] = group_authentication_secret
        __props__.__dict__["ha_sync_esp_seqno"] = ha_sync_esp_seqno
        __props__.__dict__["idle_timeout"] = idle_timeout
        __props__.__dict__["idle_timeoutinterval"] = idle_timeoutinterval
        __props__.__dict__["ike_version"] = ike_version
        __props__.__dict__["inbound_dscp_copy"] = inbound_dscp_copy
        __props__.__dict__["include_local_lan"] = include_local_lan
        __props__.__dict__["interface"] = interface
        __props__.__dict__["internal_domain_lists"] = internal_domain_lists
        __props__.__dict__["ip_delay_interval"] = ip_delay_interval
        __props__.__dict__["ip_fragmentation"] = ip_fragmentation
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["ipv4_dns_server1"] = ipv4_dns_server1
        __props__.__dict__["ipv4_dns_server2"] = ipv4_dns_server2
        __props__.__dict__["ipv4_dns_server3"] = ipv4_dns_server3
        __props__.__dict__["ipv4_end_ip"] = ipv4_end_ip
        __props__.__dict__["ipv4_exclude_ranges"] = ipv4_exclude_ranges
        __props__.__dict__["ipv4_name"] = ipv4_name
        __props__.__dict__["ipv4_netmask"] = ipv4_netmask
        __props__.__dict__["ipv4_split_exclude"] = ipv4_split_exclude
        __props__.__dict__["ipv4_split_include"] = ipv4_split_include
        __props__.__dict__["ipv4_start_ip"] = ipv4_start_ip
        __props__.__dict__["ipv4_wins_server1"] = ipv4_wins_server1
        __props__.__dict__["ipv4_wins_server2"] = ipv4_wins_server2
        __props__.__dict__["ipv6_dns_server1"] = ipv6_dns_server1
        __props__.__dict__["ipv6_dns_server2"] = ipv6_dns_server2
        __props__.__dict__["ipv6_dns_server3"] = ipv6_dns_server3
        __props__.__dict__["ipv6_end_ip"] = ipv6_end_ip
        __props__.__dict__["ipv6_exclude_ranges"] = ipv6_exclude_ranges
        __props__.__dict__["ipv6_name"] = ipv6_name
        __props__.__dict__["ipv6_prefix"] = ipv6_prefix
        __props__.__dict__["ipv6_split_exclude"] = ipv6_split_exclude
        __props__.__dict__["ipv6_split_include"] = ipv6_split_include
        __props__.__dict__["ipv6_start_ip"] = ipv6_start_ip
        __props__.__dict__["keepalive"] = keepalive
        __props__.__dict__["keylife"] = keylife
        __props__.__dict__["kms"] = kms
        __props__.__dict__["link_cost"] = link_cost
        __props__.__dict__["local_gw"] = local_gw
        __props__.__dict__["local_gw6"] = local_gw6
        __props__.__dict__["localid"] = localid
        __props__.__dict__["localid_type"] = localid_type
        __props__.__dict__["loopback_asymroute"] = loopback_asymroute
        __props__.__dict__["mesh_selector_type"] = mesh_selector_type
        __props__.__dict__["mode"] = mode
        __props__.__dict__["mode_cfg"] = mode_cfg
        __props__.__dict__["mode_cfg_allow_client_selector"] = mode_cfg_allow_client_selector
        __props__.__dict__["monitor"] = monitor
        __props__.__dict__["monitor_hold_down_delay"] = monitor_hold_down_delay
        __props__.__dict__["monitor_hold_down_time"] = monitor_hold_down_time
        __props__.__dict__["monitor_hold_down_type"] = monitor_hold_down_type
        __props__.__dict__["monitor_hold_down_weekday"] = monitor_hold_down_weekday
        __props__.__dict__["monitor_min"] = monitor_min
        __props__.__dict__["name"] = name
        __props__.__dict__["nattraversal"] = nattraversal
        __props__.__dict__["negotiate_timeout"] = negotiate_timeout
        __props__.__dict__["net_device"] = net_device
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["network_overlay"] = network_overlay
        __props__.__dict__["npu_offload"] = npu_offload
        __props__.__dict__["packet_redistribution"] = packet_redistribution
        __props__.__dict__["passive_mode"] = passive_mode
        __props__.__dict__["peer"] = peer
        __props__.__dict__["peergrp"] = peergrp
        __props__.__dict__["peerid"] = peerid
        __props__.__dict__["peertype"] = peertype
        __props__.__dict__["ppk"] = ppk
        __props__.__dict__["ppk_identity"] = ppk_identity
        __props__.__dict__["ppk_secret"] = ppk_secret
        __props__.__dict__["priority"] = priority
        __props__.__dict__["proposal"] = proposal
        __props__.__dict__["psksecret"] = psksecret
        __props__.__dict__["psksecret_remote"] = psksecret_remote
        __props__.__dict__["qkd"] = qkd
        __props__.__dict__["qkd_profile"] = qkd_profile
        __props__.__dict__["reauth"] = reauth
        __props__.__dict__["rekey"] = rekey
        __props__.__dict__["remote_gw"] = remote_gw
        __props__.__dict__["remote_gw6"] = remote_gw6
        __props__.__dict__["remotegw_ddns"] = remotegw_ddns
        __props__.__dict__["rsa_signature_format"] = rsa_signature_format
        __props__.__dict__["rsa_signature_hash_override"] = rsa_signature_hash_override
        __props__.__dict__["save_password"] = save_password
        __props__.__dict__["send_cert_chain"] = send_cert_chain
        __props__.__dict__["signature_hash_alg"] = signature_hash_alg
        __props__.__dict__["split_include_service"] = split_include_service
        __props__.__dict__["suite_b"] = suite_b
        __props__.__dict__["transport"] = transport
        __props__.__dict__["tunnel_search"] = tunnel_search
        __props__.__dict__["type"] = type
        __props__.__dict__["unity_support"] = unity_support
        __props__.__dict__["usrgrp"] = usrgrp
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vni"] = vni
        __props__.__dict__["wizard_type"] = wizard_type
        __props__.__dict__["xauthtype"] = xauthtype
        return Phase1interface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acctVerify")
    def acct_verify(self) -> pulumi.Output[str]:
        """
        Enable/disable verification of RADIUS accounting record. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "acct_verify")

    @property
    @pulumi.getter(name="addGwRoute")
    def add_gw_route(self) -> pulumi.Output[str]:
        """
        Enable/disable automatically add a route to the remote gateway. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "add_gw_route")

    @property
    @pulumi.getter(name="addRoute")
    def add_route(self) -> pulumi.Output[str]:
        """
        Enable/disable control addition of a route to peer destination selector. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "add_route")

    @property
    @pulumi.getter(name="aggregateMember")
    def aggregate_member(self) -> pulumi.Output[str]:
        """
        Enable/disable use as an aggregate member. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "aggregate_member")

    @property
    @pulumi.getter(name="aggregateWeight")
    def aggregate_weight(self) -> pulumi.Output[int]:
        """
        Link weight for aggregate.
        """
        return pulumi.get(self, "aggregate_weight")

    @property
    @pulumi.getter(name="assignIp")
    def assign_ip(self) -> pulumi.Output[str]:
        """
        Enable/disable assignment of IP to IPsec interface via configuration method. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "assign_ip")

    @property
    @pulumi.getter(name="assignIpFrom")
    def assign_ip_from(self) -> pulumi.Output[str]:
        """
        Method by which the IP address will be assigned. Valid values: `range`, `usrgrp`, `dhcp`, `name`.
        """
        return pulumi.get(self, "assign_ip_from")

    @property
    @pulumi.getter
    def authmethod(self) -> pulumi.Output[str]:
        """
        Authentication method. Valid values: `psk`, `signature`.
        """
        return pulumi.get(self, "authmethod")

    @property
    @pulumi.getter(name="authmethodRemote")
    def authmethod_remote(self) -> pulumi.Output[str]:
        """
        Authentication method (remote side). Valid values: `psk`, `signature`.
        """
        return pulumi.get(self, "authmethod_remote")

    @property
    @pulumi.getter
    def authpasswd(self) -> pulumi.Output[Optional[str]]:
        """
        XAuth password (max 35 characters).
        """
        return pulumi.get(self, "authpasswd")

    @property
    @pulumi.getter
    def authusr(self) -> pulumi.Output[str]:
        """
        XAuth user name.
        """
        return pulumi.get(self, "authusr")

    @property
    @pulumi.getter
    def authusrgrp(self) -> pulumi.Output[str]:
        """
        Authentication user group.
        """
        return pulumi.get(self, "authusrgrp")

    @property
    @pulumi.getter(name="autoDiscoveryCrossover")
    def auto_discovery_crossover(self) -> pulumi.Output[str]:
        """
        Allow/block set-up of short-cut tunnels between different network IDs. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "auto_discovery_crossover")

    @property
    @pulumi.getter(name="autoDiscoveryForwarder")
    def auto_discovery_forwarder(self) -> pulumi.Output[str]:
        """
        Enable/disable forwarding auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_forwarder")

    @property
    @pulumi.getter(name="autoDiscoveryOfferInterval")
    def auto_discovery_offer_interval(self) -> pulumi.Output[int]:
        """
        Interval between shortcut offer messages in seconds (1 - 300, default = 5).
        """
        return pulumi.get(self, "auto_discovery_offer_interval")

    @property
    @pulumi.getter(name="autoDiscoveryPsk")
    def auto_discovery_psk(self) -> pulumi.Output[str]:
        """
        Enable/disable use of pre-shared secrets for authentication of auto-discovery tunnels. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_psk")

    @property
    @pulumi.getter(name="autoDiscoveryReceiver")
    def auto_discovery_receiver(self) -> pulumi.Output[str]:
        """
        Enable/disable accepting auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_receiver")

    @property
    @pulumi.getter(name="autoDiscoverySender")
    def auto_discovery_sender(self) -> pulumi.Output[str]:
        """
        Enable/disable sending auto-discovery short-cut messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_sender")

    @property
    @pulumi.getter(name="autoDiscoveryShortcuts")
    def auto_discovery_shortcuts(self) -> pulumi.Output[str]:
        """
        Control deletion of child short-cut tunnels when the parent tunnel goes down. Valid values: `independent`, `dependent`.
        """
        return pulumi.get(self, "auto_discovery_shortcuts")

    @property
    @pulumi.getter(name="autoNegotiate")
    def auto_negotiate(self) -> pulumi.Output[str]:
        """
        Enable/disable automatic initiation of IKE SA negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_negotiate")

    @property
    @pulumi.getter(name="azureAdAutoconnect")
    def azure_ad_autoconnect(self) -> pulumi.Output[str]:
        """
        Enable/disable Azure AD Auto-Connect for FortiClient. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "azure_ad_autoconnect")

    @property
    @pulumi.getter(name="backupGateways")
    def backup_gateways(self) -> pulumi.Output[Optional[Sequence['outputs.Phase1interfaceBackupGateway']]]:
        """
        Instruct unity clients about the backup gateway address(es). The structure of `backup_gateway` block is documented below.
        """
        return pulumi.get(self, "backup_gateways")

    @property
    @pulumi.getter
    def banner(self) -> pulumi.Output[Optional[str]]:
        """
        Message that unity client should display after connecting.
        """
        return pulumi.get(self, "banner")

    @property
    @pulumi.getter(name="certIdValidation")
    def cert_id_validation(self) -> pulumi.Output[str]:
        """
        Enable/disable cross validation of peer ID and the identity in the peer's certificate as specified in RFC 4945. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cert_id_validation")

    @property
    @pulumi.getter(name="certTrustStore")
    def cert_trust_store(self) -> pulumi.Output[str]:
        """
        CA certificate trust store. Valid values: `local`, `ems`.
        """
        return pulumi.get(self, "cert_trust_store")

    @property
    @pulumi.getter
    def certificates(self) -> pulumi.Output[Optional[Sequence['outputs.Phase1interfaceCertificate']]]:
        """
        The names of up to 4 signed personal certificates. The structure of `certificate` block is documented below.
        """
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter(name="childlessIke")
    def childless_ike(self) -> pulumi.Output[str]:
        """
        Enable/disable childless IKEv2 initiation (RFC 6023). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "childless_ike")

    @property
    @pulumi.getter(name="clientAutoNegotiate")
    def client_auto_negotiate(self) -> pulumi.Output[str]:
        """
        Enable/disable allowing the VPN client to bring up the tunnel when there is no traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "client_auto_negotiate")

    @property
    @pulumi.getter(name="clientKeepAlive")
    def client_keep_alive(self) -> pulumi.Output[str]:
        """
        Enable/disable allowing the VPN client to keep the tunnel up when there is no traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "client_keep_alive")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="defaultGw")
    def default_gw(self) -> pulumi.Output[str]:
        """
        IPv4 address of default route gateway to use for traffic exiting the interface.
        """
        return pulumi.get(self, "default_gw")

    @property
    @pulumi.getter(name="defaultGwPriority")
    def default_gw_priority(self) -> pulumi.Output[int]:
        """
        Priority for default gateway route. A higher priority number signifies a less preferred route.
        """
        return pulumi.get(self, "default_gw_priority")

    @property
    @pulumi.getter(name="devId")
    def dev_id(self) -> pulumi.Output[str]:
        """
        Device ID carried by the device ID notification.
        """
        return pulumi.get(self, "dev_id")

    @property
    @pulumi.getter(name="devIdNotification")
    def dev_id_notification(self) -> pulumi.Output[str]:
        """
        Enable/disable device ID notification. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dev_id_notification")

    @property
    @pulumi.getter(name="dhcp6RaLinkaddr")
    def dhcp6_ra_linkaddr(self) -> pulumi.Output[str]:
        """
        Relay agent IPv6 link address to use in DHCP6 requests.
        """
        return pulumi.get(self, "dhcp6_ra_linkaddr")

    @property
    @pulumi.getter(name="dhcpRaGiaddr")
    def dhcp_ra_giaddr(self) -> pulumi.Output[str]:
        """
        Relay agent gateway IP address to use in the giaddr field of DHCP requests.
        """
        return pulumi.get(self, "dhcp_ra_giaddr")

    @property
    @pulumi.getter
    def dhgrp(self) -> pulumi.Output[str]:
        """
        DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        """
        return pulumi.get(self, "dhgrp")

    @property
    @pulumi.getter(name="digitalSignatureAuth")
    def digital_signature_auth(self) -> pulumi.Output[str]:
        """
        Enable/disable IKEv2 Digital Signature Authentication (RFC 7427). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "digital_signature_auth")

    @property
    @pulumi.getter
    def distance(self) -> pulumi.Output[int]:
        """
        Distance for routes added by IKE (1 - 255).
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter(name="dnsMode")
    def dns_mode(self) -> pulumi.Output[str]:
        """
        DNS server mode. Valid values: `manual`, `auto`.
        """
        return pulumi.get(self, "dns_mode")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Instruct unity clients about the default DNS domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def dpd(self) -> pulumi.Output[str]:
        """
        Dead Peer Detection mode. Valid values: `disable`, `on-idle`, `on-demand`.
        """
        return pulumi.get(self, "dpd")

    @property
    @pulumi.getter(name="dpdRetrycount")
    def dpd_retrycount(self) -> pulumi.Output[int]:
        """
        Number of DPD retry attempts.
        """
        return pulumi.get(self, "dpd_retrycount")

    @property
    @pulumi.getter(name="dpdRetryinterval")
    def dpd_retryinterval(self) -> pulumi.Output[str]:
        """
        DPD retry interval.
        """
        return pulumi.get(self, "dpd_retryinterval")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def eap(self) -> pulumi.Output[str]:
        """
        Enable/disable IKEv2 EAP authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eap")

    @property
    @pulumi.getter(name="eapCertAuth")
    def eap_cert_auth(self) -> pulumi.Output[str]:
        """
        Enable/disable peer certificate authentication in addition to EAP if peer is a FortiClient endpoint. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "eap_cert_auth")

    @property
    @pulumi.getter(name="eapExcludePeergrp")
    def eap_exclude_peergrp(self) -> pulumi.Output[str]:
        """
        Peer group excluded from EAP authentication.
        """
        return pulumi.get(self, "eap_exclude_peergrp")

    @property
    @pulumi.getter(name="eapIdentity")
    def eap_identity(self) -> pulumi.Output[str]:
        """
        IKEv2 EAP peer identity type. Valid values: `use-id-payload`, `send-request`.
        """
        return pulumi.get(self, "eap_identity")

    @property
    @pulumi.getter(name="emsSnCheck")
    def ems_sn_check(self) -> pulumi.Output[str]:
        """
        Enable/disable verification of EMS serial number. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ems_sn_check")

    @property
    @pulumi.getter(name="encapLocalGw4")
    def encap_local_gw4(self) -> pulumi.Output[str]:
        """
        Local IPv4 address of GRE/VXLAN tunnel.
        """
        return pulumi.get(self, "encap_local_gw4")

    @property
    @pulumi.getter(name="encapLocalGw6")
    def encap_local_gw6(self) -> pulumi.Output[str]:
        """
        Local IPv6 address of GRE/VXLAN tunnel.
        """
        return pulumi.get(self, "encap_local_gw6")

    @property
    @pulumi.getter(name="encapRemoteGw4")
    def encap_remote_gw4(self) -> pulumi.Output[str]:
        """
        Remote IPv4 address of GRE/VXLAN tunnel.
        """
        return pulumi.get(self, "encap_remote_gw4")

    @property
    @pulumi.getter(name="encapRemoteGw6")
    def encap_remote_gw6(self) -> pulumi.Output[str]:
        """
        Remote IPv6 address of GRE/VXLAN tunnel.
        """
        return pulumi.get(self, "encap_remote_gw6")

    @property
    @pulumi.getter
    def encapsulation(self) -> pulumi.Output[str]:
        """
        Enable/disable GRE/VXLAN encapsulation.
        """
        return pulumi.get(self, "encapsulation")

    @property
    @pulumi.getter(name="encapsulationAddress")
    def encapsulation_address(self) -> pulumi.Output[str]:
        """
        Source for GRE/VXLAN tunnel address. Valid values: `ike`, `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "encapsulation_address")

    @property
    @pulumi.getter(name="enforceUniqueId")
    def enforce_unique_id(self) -> pulumi.Output[str]:
        """
        Enable/disable peer ID uniqueness check. Valid values: `disable`, `keep-new`, `keep-old`.
        """
        return pulumi.get(self, "enforce_unique_id")

    @property
    @pulumi.getter
    def esn(self) -> pulumi.Output[str]:
        """
        Extended sequence number (ESN) negotiation. Valid values: `require`, `allow`, `disable`.
        """
        return pulumi.get(self, "esn")

    @property
    @pulumi.getter(name="exchangeFgtDeviceId")
    def exchange_fgt_device_id(self) -> pulumi.Output[str]:
        """
        Enable/disable device identifier exchange with peer FortiGate units for use of VPN monitor data by FortiManager. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "exchange_fgt_device_id")

    @property
    @pulumi.getter(name="exchangeInterfaceIp")
    def exchange_interface_ip(self) -> pulumi.Output[str]:
        """
        Enable/disable exchange of IPsec interface IP address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "exchange_interface_ip")

    @property
    @pulumi.getter(name="exchangeIpAddr4")
    def exchange_ip_addr4(self) -> pulumi.Output[str]:
        """
        IPv4 address to exchange with peers.
        """
        return pulumi.get(self, "exchange_ip_addr4")

    @property
    @pulumi.getter(name="exchangeIpAddr6")
    def exchange_ip_addr6(self) -> pulumi.Output[str]:
        """
        IPv6 address to exchange with peers
        """
        return pulumi.get(self, "exchange_ip_addr6")

    @property
    @pulumi.getter(name="fallbackTcpThreshold")
    def fallback_tcp_threshold(self) -> pulumi.Output[int]:
        """
        Timeout in seconds before falling back IKE/IPsec traffic to tcp.
        """
        return pulumi.get(self, "fallback_tcp_threshold")

    @property
    @pulumi.getter(name="fecBase")
    def fec_base(self) -> pulumi.Output[int]:
        """
        Number of base Forward Error Correction packets (1 - 100).
        """
        return pulumi.get(self, "fec_base")

    @property
    @pulumi.getter(name="fecCodec")
    def fec_codec(self) -> pulumi.Output[int]:
        """
        ipsec fec encoding/decoding algorithm (0: reed-solomon, 1: xor).
        """
        return pulumi.get(self, "fec_codec")

    @property
    @pulumi.getter(name="fecCodecString")
    def fec_codec_string(self) -> pulumi.Output[str]:
        """
        Forward Error Correction encoding/decoding algorithm. Valid values: `rs`, `xor`.
        """
        return pulumi.get(self, "fec_codec_string")

    @property
    @pulumi.getter(name="fecEgress")
    def fec_egress(self) -> pulumi.Output[str]:
        """
        Enable/disable Forward Error Correction for egress IPsec traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fec_egress")

    @property
    @pulumi.getter(name="fecHealthCheck")
    def fec_health_check(self) -> pulumi.Output[str]:
        """
        SD-WAN health check.
        """
        return pulumi.get(self, "fec_health_check")

    @property
    @pulumi.getter(name="fecIngress")
    def fec_ingress(self) -> pulumi.Output[str]:
        """
        Enable/disable Forward Error Correction for ingress IPsec traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fec_ingress")

    @property
    @pulumi.getter(name="fecMappingProfile")
    def fec_mapping_profile(self) -> pulumi.Output[str]:
        """
        Forward Error Correction (FEC) mapping profile.
        """
        return pulumi.get(self, "fec_mapping_profile")

    @property
    @pulumi.getter(name="fecReceiveTimeout")
    def fec_receive_timeout(self) -> pulumi.Output[int]:
        """
        Timeout in milliseconds before dropping Forward Error Correction packets (1 - 10000).
        """
        return pulumi.get(self, "fec_receive_timeout")

    @property
    @pulumi.getter(name="fecRedundant")
    def fec_redundant(self) -> pulumi.Output[int]:
        """
        Number of redundant Forward Error Correction packets (1 - 100).
        """
        return pulumi.get(self, "fec_redundant")

    @property
    @pulumi.getter(name="fecSendTimeout")
    def fec_send_timeout(self) -> pulumi.Output[int]:
        """
        Timeout in milliseconds before sending Forward Error Correction packets (1 - 1000).
        """
        return pulumi.get(self, "fec_send_timeout")

    @property
    @pulumi.getter(name="fgspSync")
    def fgsp_sync(self) -> pulumi.Output[str]:
        """
        Enable/disable IPsec syncing of tunnels for FGSP IPsec. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fgsp_sync")

    @property
    @pulumi.getter(name="forticlientEnforcement")
    def forticlient_enforcement(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiClient enforcement. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_enforcement")

    @property
    @pulumi.getter(name="fortinetEsp")
    def fortinet_esp(self) -> pulumi.Output[str]:
        """
        Enable/disable Fortinet ESP encapsulaton. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortinet_esp")

    @property
    @pulumi.getter
    def fragmentation(self) -> pulumi.Output[str]:
        """
        Enable/disable fragment IKE message on re-transmission. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fragmentation")

    @property
    @pulumi.getter(name="fragmentationMtu")
    def fragmentation_mtu(self) -> pulumi.Output[int]:
        """
        IKE fragmentation MTU (500 - 16000).
        """
        return pulumi.get(self, "fragmentation_mtu")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="groupAuthentication")
    def group_authentication(self) -> pulumi.Output[str]:
        """
        Enable/disable IKEv2 IDi group authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "group_authentication")

    @property
    @pulumi.getter(name="groupAuthenticationSecret")
    def group_authentication_secret(self) -> pulumi.Output[Optional[str]]:
        """
        Password for IKEv2 IDi group authentication.  (ASCII string or hexadecimal indicated by a leading 0x.)
        """
        return pulumi.get(self, "group_authentication_secret")

    @property
    @pulumi.getter(name="haSyncEspSeqno")
    def ha_sync_esp_seqno(self) -> pulumi.Output[str]:
        """
        Enable/disable sequence number jump ahead for IPsec HA. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_sync_esp_seqno")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> pulumi.Output[str]:
        """
        Enable/disable IPsec tunnel idle timeout. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter(name="idleTimeoutinterval")
    def idle_timeoutinterval(self) -> pulumi.Output[int]:
        """
        IPsec tunnel idle timeout in minutes (5 - 43200).
        """
        return pulumi.get(self, "idle_timeoutinterval")

    @property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> pulumi.Output[str]:
        """
        IKE protocol version. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "ike_version")

    @property
    @pulumi.getter(name="inboundDscpCopy")
    def inbound_dscp_copy(self) -> pulumi.Output[str]:
        """
        Enable/disable copy the dscp in the ESP header to the inner IP Header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inbound_dscp_copy")

    @property
    @pulumi.getter(name="includeLocalLan")
    def include_local_lan(self) -> pulumi.Output[str]:
        """
        Enable/disable allow local LAN access on unity clients. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "include_local_lan")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Local physical, aggregate, or VLAN outgoing interface.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="internalDomainLists")
    def internal_domain_lists(self) -> pulumi.Output[Optional[Sequence['outputs.Phase1interfaceInternalDomainList']]]:
        """
        One or more internal domain names in quotes separated by spaces. The structure of `internal_domain_list` block is documented below.
        """
        return pulumi.get(self, "internal_domain_lists")

    @property
    @pulumi.getter(name="ipDelayInterval")
    def ip_delay_interval(self) -> pulumi.Output[int]:
        """
        IP address reuse delay interval in seconds (0 - 28800).
        """
        return pulumi.get(self, "ip_delay_interval")

    @property
    @pulumi.getter(name="ipFragmentation")
    def ip_fragmentation(self) -> pulumi.Output[str]:
        """
        Determine whether IP packets are fragmented before or after IPsec encapsulation. Valid values: `pre-encapsulation`, `post-encapsulation`.
        """
        return pulumi.get(self, "ip_fragmentation")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[str]:
        """
        IP version to use for VPN interface. Valid values: `4`, `6`.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="ipv4DnsServer1")
    def ipv4_dns_server1(self) -> pulumi.Output[str]:
        """
        IPv4 DNS server 1.
        """
        return pulumi.get(self, "ipv4_dns_server1")

    @property
    @pulumi.getter(name="ipv4DnsServer2")
    def ipv4_dns_server2(self) -> pulumi.Output[str]:
        """
        IPv4 DNS server 2.
        """
        return pulumi.get(self, "ipv4_dns_server2")

    @property
    @pulumi.getter(name="ipv4DnsServer3")
    def ipv4_dns_server3(self) -> pulumi.Output[str]:
        """
        IPv4 DNS server 3.
        """
        return pulumi.get(self, "ipv4_dns_server3")

    @property
    @pulumi.getter(name="ipv4EndIp")
    def ipv4_end_ip(self) -> pulumi.Output[str]:
        """
        End of IPv4 range.
        """
        return pulumi.get(self, "ipv4_end_ip")

    @property
    @pulumi.getter(name="ipv4ExcludeRanges")
    def ipv4_exclude_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.Phase1interfaceIpv4ExcludeRange']]]:
        """
        Configuration Method IPv4 exclude ranges. The structure of `ipv4_exclude_range` block is documented below.
        """
        return pulumi.get(self, "ipv4_exclude_ranges")

    @property
    @pulumi.getter(name="ipv4Name")
    def ipv4_name(self) -> pulumi.Output[str]:
        """
        IPv4 address name.
        """
        return pulumi.get(self, "ipv4_name")

    @property
    @pulumi.getter(name="ipv4Netmask")
    def ipv4_netmask(self) -> pulumi.Output[str]:
        """
        IPv4 Netmask.
        """
        return pulumi.get(self, "ipv4_netmask")

    @property
    @pulumi.getter(name="ipv4SplitExclude")
    def ipv4_split_exclude(self) -> pulumi.Output[str]:
        """
        IPv4 subnets that should not be sent over the IPsec tunnel.
        """
        return pulumi.get(self, "ipv4_split_exclude")

    @property
    @pulumi.getter(name="ipv4SplitInclude")
    def ipv4_split_include(self) -> pulumi.Output[str]:
        """
        IPv4 split-include subnets.
        """
        return pulumi.get(self, "ipv4_split_include")

    @property
    @pulumi.getter(name="ipv4StartIp")
    def ipv4_start_ip(self) -> pulumi.Output[str]:
        """
        Start of IPv4 range.
        """
        return pulumi.get(self, "ipv4_start_ip")

    @property
    @pulumi.getter(name="ipv4WinsServer1")
    def ipv4_wins_server1(self) -> pulumi.Output[str]:
        """
        WINS server 1.
        """
        return pulumi.get(self, "ipv4_wins_server1")

    @property
    @pulumi.getter(name="ipv4WinsServer2")
    def ipv4_wins_server2(self) -> pulumi.Output[str]:
        """
        WINS server 2.
        """
        return pulumi.get(self, "ipv4_wins_server2")

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> pulumi.Output[str]:
        """
        IPv6 DNS server 1.
        """
        return pulumi.get(self, "ipv6_dns_server1")

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> pulumi.Output[str]:
        """
        IPv6 DNS server 2.
        """
        return pulumi.get(self, "ipv6_dns_server2")

    @property
    @pulumi.getter(name="ipv6DnsServer3")
    def ipv6_dns_server3(self) -> pulumi.Output[str]:
        """
        IPv6 DNS server 3.
        """
        return pulumi.get(self, "ipv6_dns_server3")

    @property
    @pulumi.getter(name="ipv6EndIp")
    def ipv6_end_ip(self) -> pulumi.Output[str]:
        """
        End of IPv6 range.
        """
        return pulumi.get(self, "ipv6_end_ip")

    @property
    @pulumi.getter(name="ipv6ExcludeRanges")
    def ipv6_exclude_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.Phase1interfaceIpv6ExcludeRange']]]:
        """
        Configuration method IPv6 exclude ranges. The structure of `ipv6_exclude_range` block is documented below.
        """
        return pulumi.get(self, "ipv6_exclude_ranges")

    @property
    @pulumi.getter(name="ipv6Name")
    def ipv6_name(self) -> pulumi.Output[str]:
        """
        IPv6 address name.
        """
        return pulumi.get(self, "ipv6_name")

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> pulumi.Output[int]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "ipv6_prefix")

    @property
    @pulumi.getter(name="ipv6SplitExclude")
    def ipv6_split_exclude(self) -> pulumi.Output[str]:
        """
        IPv6 subnets that should not be sent over the IPsec tunnel.
        """
        return pulumi.get(self, "ipv6_split_exclude")

    @property
    @pulumi.getter(name="ipv6SplitInclude")
    def ipv6_split_include(self) -> pulumi.Output[str]:
        """
        IPv6 split-include subnets.
        """
        return pulumi.get(self, "ipv6_split_include")

    @property
    @pulumi.getter(name="ipv6StartIp")
    def ipv6_start_ip(self) -> pulumi.Output[str]:
        """
        Start of IPv6 range.
        """
        return pulumi.get(self, "ipv6_start_ip")

    @property
    @pulumi.getter
    def keepalive(self) -> pulumi.Output[int]:
        """
        NAT-T keep alive interval.
        """
        return pulumi.get(self, "keepalive")

    @property
    @pulumi.getter
    def keylife(self) -> pulumi.Output[int]:
        """
        Time to wait in seconds before phase 1 encryption key expires.
        """
        return pulumi.get(self, "keylife")

    @property
    @pulumi.getter
    def kms(self) -> pulumi.Output[str]:
        """
        Key Management Services server.
        """
        return pulumi.get(self, "kms")

    @property
    @pulumi.getter(name="linkCost")
    def link_cost(self) -> pulumi.Output[int]:
        """
        VPN tunnel underlay link cost.
        """
        return pulumi.get(self, "link_cost")

    @property
    @pulumi.getter(name="localGw")
    def local_gw(self) -> pulumi.Output[str]:
        """
        IPv4 address of the local gateway's external interface.
        """
        return pulumi.get(self, "local_gw")

    @property
    @pulumi.getter(name="localGw6")
    def local_gw6(self) -> pulumi.Output[str]:
        """
        IPv6 address of the local gateway's external interface.
        """
        return pulumi.get(self, "local_gw6")

    @property
    @pulumi.getter
    def localid(self) -> pulumi.Output[str]:
        """
        Local ID.
        """
        return pulumi.get(self, "localid")

    @property
    @pulumi.getter(name="localidType")
    def localid_type(self) -> pulumi.Output[str]:
        """
        Local ID type. Valid values: `auto`, `fqdn`, `user-fqdn`, `keyid`, `address`, `asn1dn`.
        """
        return pulumi.get(self, "localid_type")

    @property
    @pulumi.getter(name="loopbackAsymroute")
    def loopback_asymroute(self) -> pulumi.Output[str]:
        """
        Enable/disable asymmetric routing for IKE traffic on loopback interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "loopback_asymroute")

    @property
    @pulumi.getter(name="meshSelectorType")
    def mesh_selector_type(self) -> pulumi.Output[str]:
        """
        Add selectors containing subsets of the configuration depending on traffic. Valid values: `disable`, `subnet`, `host`.
        """
        return pulumi.get(self, "mesh_selector_type")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        The ID protection mode used to establish a secure channel. Valid values: `aggressive`, `main`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="modeCfg")
    def mode_cfg(self) -> pulumi.Output[str]:
        """
        Enable/disable configuration method. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mode_cfg")

    @property
    @pulumi.getter(name="modeCfgAllowClientSelector")
    def mode_cfg_allow_client_selector(self) -> pulumi.Output[str]:
        """
        Enable/disable mode-cfg client to use custom phase2 selectors. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mode_cfg_allow_client_selector")

    @property
    @pulumi.getter
    def monitor(self) -> pulumi.Output[str]:
        """
        IPsec interface as backup for primary interface.
        """
        return pulumi.get(self, "monitor")

    @property
    @pulumi.getter(name="monitorHoldDownDelay")
    def monitor_hold_down_delay(self) -> pulumi.Output[int]:
        """
        Time to wait in seconds before recovery once primary re-establishes.
        """
        return pulumi.get(self, "monitor_hold_down_delay")

    @property
    @pulumi.getter(name="monitorHoldDownTime")
    def monitor_hold_down_time(self) -> pulumi.Output[str]:
        """
        Time of day at which to fail back to primary after it re-establishes.
        """
        return pulumi.get(self, "monitor_hold_down_time")

    @property
    @pulumi.getter(name="monitorHoldDownType")
    def monitor_hold_down_type(self) -> pulumi.Output[str]:
        """
        Recovery time method when primary interface re-establishes. Valid values: `immediate`, `delay`, `time`.
        """
        return pulumi.get(self, "monitor_hold_down_type")

    @property
    @pulumi.getter(name="monitorHoldDownWeekday")
    def monitor_hold_down_weekday(self) -> pulumi.Output[str]:
        """
        Day of the week to recover once primary re-establishes. Valid values: `everyday`, `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "monitor_hold_down_weekday")

    @property
    @pulumi.getter(name="monitorMin")
    def monitor_min(self) -> pulumi.Output[int]:
        """
        Minimum number of links to become degraded before activating this interface.  Zero (0) means all links must be down before activating this interface.
        """
        return pulumi.get(self, "monitor_min")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        IPsec remote gateway name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nattraversal(self) -> pulumi.Output[str]:
        """
        Enable/disable NAT traversal. Valid values: `enable`, `disable`, `forced`.
        """
        return pulumi.get(self, "nattraversal")

    @property
    @pulumi.getter(name="negotiateTimeout")
    def negotiate_timeout(self) -> pulumi.Output[int]:
        """
        IKE SA negotiation timeout in seconds (1 - 300).
        """
        return pulumi.get(self, "negotiate_timeout")

    @property
    @pulumi.getter(name="netDevice")
    def net_device(self) -> pulumi.Output[str]:
        """
        Enable/disable kernel device creation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "net_device")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[int]:
        """
        VPN gateway network ID.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="networkOverlay")
    def network_overlay(self) -> pulumi.Output[str]:
        """
        Enable/disable network overlays. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "network_overlay")

    @property
    @pulumi.getter(name="npuOffload")
    def npu_offload(self) -> pulumi.Output[str]:
        """
        Enable/disable offloading NPU. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "npu_offload")

    @property
    @pulumi.getter(name="packetRedistribution")
    def packet_redistribution(self) -> pulumi.Output[str]:
        """
        Enable/disable packet distribution (RPS) on the IPsec interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "packet_redistribution")

    @property
    @pulumi.getter(name="passiveMode")
    def passive_mode(self) -> pulumi.Output[str]:
        """
        Enable/disable IPsec passive mode for static tunnels. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive_mode")

    @property
    @pulumi.getter
    def peer(self) -> pulumi.Output[str]:
        """
        Accept this peer certificate.
        """
        return pulumi.get(self, "peer")

    @property
    @pulumi.getter
    def peergrp(self) -> pulumi.Output[str]:
        """
        Accept this peer certificate group.
        """
        return pulumi.get(self, "peergrp")

    @property
    @pulumi.getter
    def peerid(self) -> pulumi.Output[str]:
        """
        Accept this peer identity.
        """
        return pulumi.get(self, "peerid")

    @property
    @pulumi.getter
    def peertype(self) -> pulumi.Output[str]:
        """
        Accept this peer type. Valid values: `any`, `one`, `dialup`, `peer`, `peergrp`.
        """
        return pulumi.get(self, "peertype")

    @property
    @pulumi.getter
    def ppk(self) -> pulumi.Output[str]:
        """
        Enable/disable IKEv2 Postquantum Preshared Key (PPK). Valid values: `disable`, `allow`, `require`.
        """
        return pulumi.get(self, "ppk")

    @property
    @pulumi.getter(name="ppkIdentity")
    def ppk_identity(self) -> pulumi.Output[str]:
        """
        IKEv2 Postquantum Preshared Key Identity.
        """
        return pulumi.get(self, "ppk_identity")

    @property
    @pulumi.getter(name="ppkSecret")
    def ppk_secret(self) -> pulumi.Output[Optional[str]]:
        """
        IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        """
        return pulumi.get(self, "ppk_secret")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Priority for routes added by IKE (0 - 4294967295).
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def proposal(self) -> pulumi.Output[str]:
        """
        Phase1 proposal. Valid values: `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm-prfsha1`, `aes128gcm-prfsha256`, `aes128gcm-prfsha384`, `aes128gcm-prfsha512`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm-prfsha1`, `aes256gcm-prfsha256`, `aes256gcm-prfsha384`, `aes256gcm-prfsha512`, `chacha20poly1305-prfsha1`, `chacha20poly1305-prfsha256`, `chacha20poly1305-prfsha384`, `chacha20poly1305-prfsha512`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        """
        return pulumi.get(self, "proposal")

    @property
    @pulumi.getter
    def psksecret(self) -> pulumi.Output[Optional[str]]:
        """
        Pre-shared secret for PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        """
        return pulumi.get(self, "psksecret")

    @property
    @pulumi.getter(name="psksecretRemote")
    def psksecret_remote(self) -> pulumi.Output[Optional[str]]:
        """
        Pre-shared secret for remote side PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        """
        return pulumi.get(self, "psksecret_remote")

    @property
    @pulumi.getter
    def qkd(self) -> pulumi.Output[str]:
        """
        Enable/disable use of Quantum Key Distribution (QKD) server. Valid values: `disable`, `allow`, `require`.
        """
        return pulumi.get(self, "qkd")

    @property
    @pulumi.getter(name="qkdProfile")
    def qkd_profile(self) -> pulumi.Output[str]:
        """
        Quantum Key Distribution (QKD) server profile.
        """
        return pulumi.get(self, "qkd_profile")

    @property
    @pulumi.getter
    def reauth(self) -> pulumi.Output[str]:
        """
        Enable/disable re-authentication upon IKE SA lifetime expiration. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "reauth")

    @property
    @pulumi.getter
    def rekey(self) -> pulumi.Output[str]:
        """
        Enable/disable phase1 rekey. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rekey")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> pulumi.Output[str]:
        """
        IPv4 address of the remote gateway's external interface.
        """
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter(name="remoteGw6")
    def remote_gw6(self) -> pulumi.Output[str]:
        """
        IPv6 address of the remote gateway's external interface.
        """
        return pulumi.get(self, "remote_gw6")

    @property
    @pulumi.getter(name="remotegwDdns")
    def remotegw_ddns(self) -> pulumi.Output[str]:
        """
        Domain name of remote gateway (eg. name.DDNS.com).
        """
        return pulumi.get(self, "remotegw_ddns")

    @property
    @pulumi.getter(name="rsaSignatureFormat")
    def rsa_signature_format(self) -> pulumi.Output[str]:
        """
        Digital Signature Authentication RSA signature format. Valid values: `pkcs1`, `pss`.
        """
        return pulumi.get(self, "rsa_signature_format")

    @property
    @pulumi.getter(name="rsaSignatureHashOverride")
    def rsa_signature_hash_override(self) -> pulumi.Output[str]:
        """
        Enable/disable IKEv2 RSA signature hash algorithm override. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rsa_signature_hash_override")

    @property
    @pulumi.getter(name="savePassword")
    def save_password(self) -> pulumi.Output[str]:
        """
        Enable/disable saving XAuth username and password on VPN clients. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "save_password")

    @property
    @pulumi.getter(name="sendCertChain")
    def send_cert_chain(self) -> pulumi.Output[str]:
        """
        Enable/disable sending certificate chain. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "send_cert_chain")

    @property
    @pulumi.getter(name="signatureHashAlg")
    def signature_hash_alg(self) -> pulumi.Output[str]:
        """
        Digital Signature Authentication hash algorithms. Valid values: `sha1`, `sha2-256`, `sha2-384`, `sha2-512`.
        """
        return pulumi.get(self, "signature_hash_alg")

    @property
    @pulumi.getter(name="splitIncludeService")
    def split_include_service(self) -> pulumi.Output[str]:
        """
        Split-include services.
        """
        return pulumi.get(self, "split_include_service")

    @property
    @pulumi.getter(name="suiteB")
    def suite_b(self) -> pulumi.Output[str]:
        """
        Use Suite-B. Valid values: `disable`, `suite-b-gcm-128`, `suite-b-gcm-256`.
        """
        return pulumi.get(self, "suite_b")

    @property
    @pulumi.getter
    def transport(self) -> pulumi.Output[str]:
        """
        Set IKE transport protocol. Valid values: `udp`, `udp-fallback-tcp`, `tcp`.
        """
        return pulumi.get(self, "transport")

    @property
    @pulumi.getter(name="tunnelSearch")
    def tunnel_search(self) -> pulumi.Output[str]:
        """
        Tunnel search method for when the interface is shared. Valid values: `selectors`, `nexthop`.
        """
        return pulumi.get(self, "tunnel_search")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Remote gateway type. Valid values: `static`, `dynamic`, `ddns`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="unitySupport")
    def unity_support(self) -> pulumi.Output[str]:
        """
        Enable/disable support for Cisco UNITY Configuration Method extensions. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "unity_support")

    @property
    @pulumi.getter
    def usrgrp(self) -> pulumi.Output[str]:
        """
        User group name for dialup peers.
        """
        return pulumi.get(self, "usrgrp")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vni(self) -> pulumi.Output[int]:
        """
        VNI of VXLAN tunnel.
        """
        return pulumi.get(self, "vni")

    @property
    @pulumi.getter(name="wizardType")
    def wizard_type(self) -> pulumi.Output[str]:
        """
        GUI VPN Wizard Type.
        """
        return pulumi.get(self, "wizard_type")

    @property
    @pulumi.getter
    def xauthtype(self) -> pulumi.Output[str]:
        """
        XAuth type. Valid values: `disable`, `client`, `pap`, `chap`, `auto`.
        """
        return pulumi.get(self, "xauthtype")

