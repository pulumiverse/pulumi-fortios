# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = ['Phase2interfaceArgs', 'Phase2interface']

@pulumi.input_type
class Phase2interfaceArgs:
    def __init__(__self__, *,
                 phase1name: pulumi.Input[str],
                 proposal: pulumi.Input[str],
                 add_route: Optional[pulumi.Input[str]] = None,
                 auto_discovery_forwarder: Optional[pulumi.Input[str]] = None,
                 auto_discovery_sender: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dhcp_ipsec: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dst_addr_type: Optional[pulumi.Input[str]] = None,
                 dst_end_ip: Optional[pulumi.Input[str]] = None,
                 dst_end_ip6: Optional[pulumi.Input[str]] = None,
                 dst_name: Optional[pulumi.Input[str]] = None,
                 dst_name6: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[int]] = None,
                 dst_start_ip: Optional[pulumi.Input[str]] = None,
                 dst_start_ip6: Optional[pulumi.Input[str]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 dst_subnet6: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 initiator_ts_narrow: Optional[pulumi.Input[str]] = None,
                 ipv4_df: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[str]] = None,
                 keylife_type: Optional[pulumi.Input[str]] = None,
                 keylifekbs: Optional[pulumi.Input[int]] = None,
                 keylifeseconds: Optional[pulumi.Input[int]] = None,
                 l2tp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pfs: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 replay: Optional[pulumi.Input[str]] = None,
                 route_overlap: Optional[pulumi.Input[str]] = None,
                 single_source: Optional[pulumi.Input[str]] = None,
                 src_addr_type: Optional[pulumi.Input[str]] = None,
                 src_end_ip: Optional[pulumi.Input[str]] = None,
                 src_end_ip6: Optional[pulumi.Input[str]] = None,
                 src_name: Optional[pulumi.Input[str]] = None,
                 src_name6: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[int]] = None,
                 src_start_ip: Optional[pulumi.Input[str]] = None,
                 src_start_ip6: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None,
                 src_subnet6: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Phase2interface resource.
        :param pulumi.Input[str] phase1name: Phase 1 determines the options required for phase 2.
        :param pulumi.Input[str] proposal: Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        :param pulumi.Input[str] add_route: Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_forwarder: Enable/disable forwarding short-cut messages. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_sender: Enable/disable sending short-cut messages. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] auto_negotiate: Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] dhcp_ipsec: Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhgrp: Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        :param pulumi.Input[str] diffserv: Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode: DSCP value to be applied to the IPsec tunnel outer IP header.
        :param pulumi.Input[str] dst_addr_type: Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
        :param pulumi.Input[str] dst_end_ip: Remote proxy ID IPv4 end.
        :param pulumi.Input[str] dst_end_ip6: Remote proxy ID IPv6 end.
        :param pulumi.Input[str] dst_name: Remote proxy ID name.
        :param pulumi.Input[str] dst_name6: Remote proxy ID name.
        :param pulumi.Input[int] dst_port: Quick mode destination port (1 - 65535 or 0 for all).
        :param pulumi.Input[str] dst_start_ip: Remote proxy ID IPv4 start.
        :param pulumi.Input[str] dst_start_ip6: Remote proxy ID IPv6 start.
        :param pulumi.Input[str] dst_subnet: Remote proxy ID IPv4 subnet.
        :param pulumi.Input[str] dst_subnet6: Remote proxy ID IPv6 subnet.
        :param pulumi.Input[str] encapsulation: ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
        :param pulumi.Input[str] inbound_dscp_copy: Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] initiator_ts_narrow: Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipv4_df: Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] keepalive: Enable/disable keep alive. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] keylife_type: Keylife type. Valid values: `seconds`, `kbs`, `both`.
        :param pulumi.Input[int] keylifekbs: Phase2 key life in number of bytes of traffic (5120 - 4294967295).
        :param pulumi.Input[int] keylifeseconds: Phase2 key life in time in seconds (120 - 172800).
        :param pulumi.Input[str] l2tp: Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: IPsec tunnel name.
        :param pulumi.Input[str] pfs: Enable/disable PFS feature. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] protocol: Quick mode protocol selector (1 - 255 or 0 for all).
        :param pulumi.Input[str] replay: Enable/disable replay detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_overlap: Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
        :param pulumi.Input[str] single_source: Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] src_addr_type: Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
        :param pulumi.Input[str] src_end_ip: Local proxy ID end.
        :param pulumi.Input[str] src_end_ip6: Local proxy ID IPv6 end.
        :param pulumi.Input[str] src_name: Local proxy ID name.
        :param pulumi.Input[str] src_name6: Local proxy ID name.
        :param pulumi.Input[int] src_port: Quick mode source port (1 - 65535 or 0 for all).
        :param pulumi.Input[str] src_start_ip: Local proxy ID start.
        :param pulumi.Input[str] src_start_ip6: Local proxy ID IPv6 start.
        :param pulumi.Input[str] src_subnet: Local proxy ID subnet.
        :param pulumi.Input[str] src_subnet6: Local proxy ID IPv6 subnet.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "phase1name", phase1name)
        pulumi.set(__self__, "proposal", proposal)
        if add_route is not None:
            pulumi.set(__self__, "add_route", add_route)
        if auto_discovery_forwarder is not None:
            pulumi.set(__self__, "auto_discovery_forwarder", auto_discovery_forwarder)
        if auto_discovery_sender is not None:
            pulumi.set(__self__, "auto_discovery_sender", auto_discovery_sender)
        if auto_negotiate is not None:
            pulumi.set(__self__, "auto_negotiate", auto_negotiate)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dhcp_ipsec is not None:
            pulumi.set(__self__, "dhcp_ipsec", dhcp_ipsec)
        if dhgrp is not None:
            pulumi.set(__self__, "dhgrp", dhgrp)
        if diffserv is not None:
            pulumi.set(__self__, "diffserv", diffserv)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dst_addr_type is not None:
            pulumi.set(__self__, "dst_addr_type", dst_addr_type)
        if dst_end_ip is not None:
            pulumi.set(__self__, "dst_end_ip", dst_end_ip)
        if dst_end_ip6 is not None:
            pulumi.set(__self__, "dst_end_ip6", dst_end_ip6)
        if dst_name is not None:
            pulumi.set(__self__, "dst_name", dst_name)
        if dst_name6 is not None:
            pulumi.set(__self__, "dst_name6", dst_name6)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if dst_start_ip is not None:
            pulumi.set(__self__, "dst_start_ip", dst_start_ip)
        if dst_start_ip6 is not None:
            pulumi.set(__self__, "dst_start_ip6", dst_start_ip6)
        if dst_subnet is not None:
            pulumi.set(__self__, "dst_subnet", dst_subnet)
        if dst_subnet6 is not None:
            pulumi.set(__self__, "dst_subnet6", dst_subnet6)
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if inbound_dscp_copy is not None:
            pulumi.set(__self__, "inbound_dscp_copy", inbound_dscp_copy)
        if initiator_ts_narrow is not None:
            pulumi.set(__self__, "initiator_ts_narrow", initiator_ts_narrow)
        if ipv4_df is not None:
            pulumi.set(__self__, "ipv4_df", ipv4_df)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if keylife_type is not None:
            pulumi.set(__self__, "keylife_type", keylife_type)
        if keylifekbs is not None:
            pulumi.set(__self__, "keylifekbs", keylifekbs)
        if keylifeseconds is not None:
            pulumi.set(__self__, "keylifeseconds", keylifeseconds)
        if l2tp is not None:
            pulumi.set(__self__, "l2tp", l2tp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pfs is not None:
            pulumi.set(__self__, "pfs", pfs)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if replay is not None:
            pulumi.set(__self__, "replay", replay)
        if route_overlap is not None:
            pulumi.set(__self__, "route_overlap", route_overlap)
        if single_source is not None:
            pulumi.set(__self__, "single_source", single_source)
        if src_addr_type is not None:
            pulumi.set(__self__, "src_addr_type", src_addr_type)
        if src_end_ip is not None:
            pulumi.set(__self__, "src_end_ip", src_end_ip)
        if src_end_ip6 is not None:
            pulumi.set(__self__, "src_end_ip6", src_end_ip6)
        if src_name is not None:
            pulumi.set(__self__, "src_name", src_name)
        if src_name6 is not None:
            pulumi.set(__self__, "src_name6", src_name6)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)
        if src_start_ip is not None:
            pulumi.set(__self__, "src_start_ip", src_start_ip)
        if src_start_ip6 is not None:
            pulumi.set(__self__, "src_start_ip6", src_start_ip6)
        if src_subnet is not None:
            pulumi.set(__self__, "src_subnet", src_subnet)
        if src_subnet6 is not None:
            pulumi.set(__self__, "src_subnet6", src_subnet6)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def phase1name(self) -> pulumi.Input[str]:
        """
        Phase 1 determines the options required for phase 2.
        """
        return pulumi.get(self, "phase1name")

    @phase1name.setter
    def phase1name(self, value: pulumi.Input[str]):
        pulumi.set(self, "phase1name", value)

    @property
    @pulumi.getter
    def proposal(self) -> pulumi.Input[str]:
        """
        Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        """
        return pulumi.get(self, "proposal")

    @proposal.setter
    def proposal(self, value: pulumi.Input[str]):
        pulumi.set(self, "proposal", value)

    @property
    @pulumi.getter(name="addRoute")
    def add_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
        """
        return pulumi.get(self, "add_route")

    @add_route.setter
    def add_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_route", value)

    @property
    @pulumi.getter(name="autoDiscoveryForwarder")
    def auto_discovery_forwarder(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forwarding short-cut messages. Valid values: `phase1`, `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_forwarder")

    @auto_discovery_forwarder.setter
    def auto_discovery_forwarder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_forwarder", value)

    @property
    @pulumi.getter(name="autoDiscoverySender")
    def auto_discovery_sender(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending short-cut messages. Valid values: `phase1`, `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_sender")

    @auto_discovery_sender.setter
    def auto_discovery_sender(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_sender", value)

    @property
    @pulumi.getter(name="autoNegotiate")
    def auto_negotiate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_negotiate")

    @auto_negotiate.setter
    def auto_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_negotiate", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dhcpIpsec")
    def dhcp_ipsec(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_ipsec")

    @dhcp_ipsec.setter
    def dhcp_ipsec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_ipsec", value)

    @property
    @pulumi.getter
    def dhgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        """
        return pulumi.get(self, "dhgrp")

    @dhgrp.setter
    def dhgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhgrp", value)

    @property
    @pulumi.getter
    def diffserv(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv")

    @diffserv.setter
    def diffserv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        """
        DSCP value to be applied to the IPsec tunnel outer IP header.
        """
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dstAddrType")
    def dst_addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
        """
        return pulumi.get(self, "dst_addr_type")

    @dst_addr_type.setter
    def dst_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_addr_type", value)

    @property
    @pulumi.getter(name="dstEndIp")
    def dst_end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID IPv4 end.
        """
        return pulumi.get(self, "dst_end_ip")

    @dst_end_ip.setter
    def dst_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_end_ip", value)

    @property
    @pulumi.getter(name="dstEndIp6")
    def dst_end_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID IPv6 end.
        """
        return pulumi.get(self, "dst_end_ip6")

    @dst_end_ip6.setter
    def dst_end_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_end_ip6", value)

    @property
    @pulumi.getter(name="dstName")
    def dst_name(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID name.
        """
        return pulumi.get(self, "dst_name")

    @dst_name.setter
    def dst_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_name", value)

    @property
    @pulumi.getter(name="dstName6")
    def dst_name6(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID name.
        """
        return pulumi.get(self, "dst_name6")

    @dst_name6.setter
    def dst_name6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_name6", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[int]]:
        """
        Quick mode destination port (1 - 65535 or 0 for all).
        """
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter(name="dstStartIp")
    def dst_start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID IPv4 start.
        """
        return pulumi.get(self, "dst_start_ip")

    @dst_start_ip.setter
    def dst_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_start_ip", value)

    @property
    @pulumi.getter(name="dstStartIp6")
    def dst_start_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID IPv6 start.
        """
        return pulumi.get(self, "dst_start_ip6")

    @dst_start_ip6.setter
    def dst_start_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_start_ip6", value)

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID IPv4 subnet.
        """
        return pulumi.get(self, "dst_subnet")

    @dst_subnet.setter
    def dst_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_subnet", value)

    @property
    @pulumi.getter(name="dstSubnet6")
    def dst_subnet6(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID IPv6 subnet.
        """
        return pulumi.get(self, "dst_subnet6")

    @dst_subnet6.setter
    def dst_subnet6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_subnet6", value)

    @property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[str]]:
        """
        ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encapsulation", value)

    @property
    @pulumi.getter(name="inboundDscpCopy")
    def inbound_dscp_copy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
        """
        return pulumi.get(self, "inbound_dscp_copy")

    @inbound_dscp_copy.setter
    def inbound_dscp_copy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound_dscp_copy", value)

    @property
    @pulumi.getter(name="initiatorTsNarrow")
    def initiator_ts_narrow(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "initiator_ts_narrow")

    @initiator_ts_narrow.setter
    def initiator_ts_narrow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initiator_ts_narrow", value)

    @property
    @pulumi.getter(name="ipv4Df")
    def ipv4_df(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipv4_df")

    @ipv4_df.setter
    def ipv4_df(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_df", value)

    @property
    @pulumi.getter
    def keepalive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable keep alive. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "keepalive")

    @keepalive.setter
    def keepalive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keepalive", value)

    @property
    @pulumi.getter(name="keylifeType")
    def keylife_type(self) -> Optional[pulumi.Input[str]]:
        """
        Keylife type. Valid values: `seconds`, `kbs`, `both`.
        """
        return pulumi.get(self, "keylife_type")

    @keylife_type.setter
    def keylife_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keylife_type", value)

    @property
    @pulumi.getter
    def keylifekbs(self) -> Optional[pulumi.Input[int]]:
        """
        Phase2 key life in number of bytes of traffic (5120 - 4294967295).
        """
        return pulumi.get(self, "keylifekbs")

    @keylifekbs.setter
    def keylifekbs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keylifekbs", value)

    @property
    @pulumi.getter
    def keylifeseconds(self) -> Optional[pulumi.Input[int]]:
        """
        Phase2 key life in time in seconds (120 - 172800).
        """
        return pulumi.get(self, "keylifeseconds")

    @keylifeseconds.setter
    def keylifeseconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keylifeseconds", value)

    @property
    @pulumi.getter
    def l2tp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "l2tp")

    @l2tp.setter
    def l2tp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l2tp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec tunnel name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pfs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PFS feature. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pfs")

    @pfs.setter
    def pfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pfs", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Quick mode protocol selector (1 - 255 or 0 for all).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def replay(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable replay detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "replay")

    @replay.setter
    def replay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replay", value)

    @property
    @pulumi.getter(name="routeOverlap")
    def route_overlap(self) -> Optional[pulumi.Input[str]]:
        """
        Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
        """
        return pulumi.get(self, "route_overlap")

    @route_overlap.setter
    def route_overlap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_overlap", value)

    @property
    @pulumi.getter(name="singleSource")
    def single_source(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "single_source")

    @single_source.setter
    def single_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_source", value)

    @property
    @pulumi.getter(name="srcAddrType")
    def src_addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
        """
        return pulumi.get(self, "src_addr_type")

    @src_addr_type.setter
    def src_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_addr_type", value)

    @property
    @pulumi.getter(name="srcEndIp")
    def src_end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID end.
        """
        return pulumi.get(self, "src_end_ip")

    @src_end_ip.setter
    def src_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_end_ip", value)

    @property
    @pulumi.getter(name="srcEndIp6")
    def src_end_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID IPv6 end.
        """
        return pulumi.get(self, "src_end_ip6")

    @src_end_ip6.setter
    def src_end_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_end_ip6", value)

    @property
    @pulumi.getter(name="srcName")
    def src_name(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID name.
        """
        return pulumi.get(self, "src_name")

    @src_name.setter
    def src_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_name", value)

    @property
    @pulumi.getter(name="srcName6")
    def src_name6(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID name.
        """
        return pulumi.get(self, "src_name6")

    @src_name6.setter
    def src_name6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_name6", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[int]]:
        """
        Quick mode source port (1 - 65535 or 0 for all).
        """
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "src_port", value)

    @property
    @pulumi.getter(name="srcStartIp")
    def src_start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID start.
        """
        return pulumi.get(self, "src_start_ip")

    @src_start_ip.setter
    def src_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_start_ip", value)

    @property
    @pulumi.getter(name="srcStartIp6")
    def src_start_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID IPv6 start.
        """
        return pulumi.get(self, "src_start_ip6")

    @src_start_ip6.setter
    def src_start_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_start_ip6", value)

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID subnet.
        """
        return pulumi.get(self, "src_subnet")

    @src_subnet.setter
    def src_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_subnet", value)

    @property
    @pulumi.getter(name="srcSubnet6")
    def src_subnet6(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID IPv6 subnet.
        """
        return pulumi.get(self, "src_subnet6")

    @src_subnet6.setter
    def src_subnet6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_subnet6", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _Phase2interfaceState:
    def __init__(__self__, *,
                 add_route: Optional[pulumi.Input[str]] = None,
                 auto_discovery_forwarder: Optional[pulumi.Input[str]] = None,
                 auto_discovery_sender: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dhcp_ipsec: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dst_addr_type: Optional[pulumi.Input[str]] = None,
                 dst_end_ip: Optional[pulumi.Input[str]] = None,
                 dst_end_ip6: Optional[pulumi.Input[str]] = None,
                 dst_name: Optional[pulumi.Input[str]] = None,
                 dst_name6: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[int]] = None,
                 dst_start_ip: Optional[pulumi.Input[str]] = None,
                 dst_start_ip6: Optional[pulumi.Input[str]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 dst_subnet6: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 initiator_ts_narrow: Optional[pulumi.Input[str]] = None,
                 ipv4_df: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[str]] = None,
                 keylife_type: Optional[pulumi.Input[str]] = None,
                 keylifekbs: Optional[pulumi.Input[int]] = None,
                 keylifeseconds: Optional[pulumi.Input[int]] = None,
                 l2tp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pfs: Optional[pulumi.Input[str]] = None,
                 phase1name: Optional[pulumi.Input[str]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 replay: Optional[pulumi.Input[str]] = None,
                 route_overlap: Optional[pulumi.Input[str]] = None,
                 single_source: Optional[pulumi.Input[str]] = None,
                 src_addr_type: Optional[pulumi.Input[str]] = None,
                 src_end_ip: Optional[pulumi.Input[str]] = None,
                 src_end_ip6: Optional[pulumi.Input[str]] = None,
                 src_name: Optional[pulumi.Input[str]] = None,
                 src_name6: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[int]] = None,
                 src_start_ip: Optional[pulumi.Input[str]] = None,
                 src_start_ip6: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None,
                 src_subnet6: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Phase2interface resources.
        :param pulumi.Input[str] add_route: Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_forwarder: Enable/disable forwarding short-cut messages. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_sender: Enable/disable sending short-cut messages. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] auto_negotiate: Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] dhcp_ipsec: Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhgrp: Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        :param pulumi.Input[str] diffserv: Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode: DSCP value to be applied to the IPsec tunnel outer IP header.
        :param pulumi.Input[str] dst_addr_type: Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
        :param pulumi.Input[str] dst_end_ip: Remote proxy ID IPv4 end.
        :param pulumi.Input[str] dst_end_ip6: Remote proxy ID IPv6 end.
        :param pulumi.Input[str] dst_name: Remote proxy ID name.
        :param pulumi.Input[str] dst_name6: Remote proxy ID name.
        :param pulumi.Input[int] dst_port: Quick mode destination port (1 - 65535 or 0 for all).
        :param pulumi.Input[str] dst_start_ip: Remote proxy ID IPv4 start.
        :param pulumi.Input[str] dst_start_ip6: Remote proxy ID IPv6 start.
        :param pulumi.Input[str] dst_subnet: Remote proxy ID IPv4 subnet.
        :param pulumi.Input[str] dst_subnet6: Remote proxy ID IPv6 subnet.
        :param pulumi.Input[str] encapsulation: ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
        :param pulumi.Input[str] inbound_dscp_copy: Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] initiator_ts_narrow: Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipv4_df: Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] keepalive: Enable/disable keep alive. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] keylife_type: Keylife type. Valid values: `seconds`, `kbs`, `both`.
        :param pulumi.Input[int] keylifekbs: Phase2 key life in number of bytes of traffic (5120 - 4294967295).
        :param pulumi.Input[int] keylifeseconds: Phase2 key life in time in seconds (120 - 172800).
        :param pulumi.Input[str] l2tp: Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: IPsec tunnel name.
        :param pulumi.Input[str] pfs: Enable/disable PFS feature. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] phase1name: Phase 1 determines the options required for phase 2.
        :param pulumi.Input[str] proposal: Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        :param pulumi.Input[int] protocol: Quick mode protocol selector (1 - 255 or 0 for all).
        :param pulumi.Input[str] replay: Enable/disable replay detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_overlap: Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
        :param pulumi.Input[str] single_source: Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] src_addr_type: Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
        :param pulumi.Input[str] src_end_ip: Local proxy ID end.
        :param pulumi.Input[str] src_end_ip6: Local proxy ID IPv6 end.
        :param pulumi.Input[str] src_name: Local proxy ID name.
        :param pulumi.Input[str] src_name6: Local proxy ID name.
        :param pulumi.Input[int] src_port: Quick mode source port (1 - 65535 or 0 for all).
        :param pulumi.Input[str] src_start_ip: Local proxy ID start.
        :param pulumi.Input[str] src_start_ip6: Local proxy ID IPv6 start.
        :param pulumi.Input[str] src_subnet: Local proxy ID subnet.
        :param pulumi.Input[str] src_subnet6: Local proxy ID IPv6 subnet.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if add_route is not None:
            pulumi.set(__self__, "add_route", add_route)
        if auto_discovery_forwarder is not None:
            pulumi.set(__self__, "auto_discovery_forwarder", auto_discovery_forwarder)
        if auto_discovery_sender is not None:
            pulumi.set(__self__, "auto_discovery_sender", auto_discovery_sender)
        if auto_negotiate is not None:
            pulumi.set(__self__, "auto_negotiate", auto_negotiate)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dhcp_ipsec is not None:
            pulumi.set(__self__, "dhcp_ipsec", dhcp_ipsec)
        if dhgrp is not None:
            pulumi.set(__self__, "dhgrp", dhgrp)
        if diffserv is not None:
            pulumi.set(__self__, "diffserv", diffserv)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dst_addr_type is not None:
            pulumi.set(__self__, "dst_addr_type", dst_addr_type)
        if dst_end_ip is not None:
            pulumi.set(__self__, "dst_end_ip", dst_end_ip)
        if dst_end_ip6 is not None:
            pulumi.set(__self__, "dst_end_ip6", dst_end_ip6)
        if dst_name is not None:
            pulumi.set(__self__, "dst_name", dst_name)
        if dst_name6 is not None:
            pulumi.set(__self__, "dst_name6", dst_name6)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if dst_start_ip is not None:
            pulumi.set(__self__, "dst_start_ip", dst_start_ip)
        if dst_start_ip6 is not None:
            pulumi.set(__self__, "dst_start_ip6", dst_start_ip6)
        if dst_subnet is not None:
            pulumi.set(__self__, "dst_subnet", dst_subnet)
        if dst_subnet6 is not None:
            pulumi.set(__self__, "dst_subnet6", dst_subnet6)
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if inbound_dscp_copy is not None:
            pulumi.set(__self__, "inbound_dscp_copy", inbound_dscp_copy)
        if initiator_ts_narrow is not None:
            pulumi.set(__self__, "initiator_ts_narrow", initiator_ts_narrow)
        if ipv4_df is not None:
            pulumi.set(__self__, "ipv4_df", ipv4_df)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if keylife_type is not None:
            pulumi.set(__self__, "keylife_type", keylife_type)
        if keylifekbs is not None:
            pulumi.set(__self__, "keylifekbs", keylifekbs)
        if keylifeseconds is not None:
            pulumi.set(__self__, "keylifeseconds", keylifeseconds)
        if l2tp is not None:
            pulumi.set(__self__, "l2tp", l2tp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pfs is not None:
            pulumi.set(__self__, "pfs", pfs)
        if phase1name is not None:
            pulumi.set(__self__, "phase1name", phase1name)
        if proposal is not None:
            pulumi.set(__self__, "proposal", proposal)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if replay is not None:
            pulumi.set(__self__, "replay", replay)
        if route_overlap is not None:
            pulumi.set(__self__, "route_overlap", route_overlap)
        if single_source is not None:
            pulumi.set(__self__, "single_source", single_source)
        if src_addr_type is not None:
            pulumi.set(__self__, "src_addr_type", src_addr_type)
        if src_end_ip is not None:
            pulumi.set(__self__, "src_end_ip", src_end_ip)
        if src_end_ip6 is not None:
            pulumi.set(__self__, "src_end_ip6", src_end_ip6)
        if src_name is not None:
            pulumi.set(__self__, "src_name", src_name)
        if src_name6 is not None:
            pulumi.set(__self__, "src_name6", src_name6)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)
        if src_start_ip is not None:
            pulumi.set(__self__, "src_start_ip", src_start_ip)
        if src_start_ip6 is not None:
            pulumi.set(__self__, "src_start_ip6", src_start_ip6)
        if src_subnet is not None:
            pulumi.set(__self__, "src_subnet", src_subnet)
        if src_subnet6 is not None:
            pulumi.set(__self__, "src_subnet6", src_subnet6)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="addRoute")
    def add_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
        """
        return pulumi.get(self, "add_route")

    @add_route.setter
    def add_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_route", value)

    @property
    @pulumi.getter(name="autoDiscoveryForwarder")
    def auto_discovery_forwarder(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forwarding short-cut messages. Valid values: `phase1`, `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_forwarder")

    @auto_discovery_forwarder.setter
    def auto_discovery_forwarder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_forwarder", value)

    @property
    @pulumi.getter(name="autoDiscoverySender")
    def auto_discovery_sender(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending short-cut messages. Valid values: `phase1`, `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_sender")

    @auto_discovery_sender.setter
    def auto_discovery_sender(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discovery_sender", value)

    @property
    @pulumi.getter(name="autoNegotiate")
    def auto_negotiate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_negotiate")

    @auto_negotiate.setter
    def auto_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_negotiate", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="dhcpIpsec")
    def dhcp_ipsec(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_ipsec")

    @dhcp_ipsec.setter
    def dhcp_ipsec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_ipsec", value)

    @property
    @pulumi.getter
    def dhgrp(self) -> Optional[pulumi.Input[str]]:
        """
        Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        """
        return pulumi.get(self, "dhgrp")

    @dhgrp.setter
    def dhgrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhgrp", value)

    @property
    @pulumi.getter
    def diffserv(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv")

    @diffserv.setter
    def diffserv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        """
        DSCP value to be applied to the IPsec tunnel outer IP header.
        """
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dstAddrType")
    def dst_addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
        """
        return pulumi.get(self, "dst_addr_type")

    @dst_addr_type.setter
    def dst_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_addr_type", value)

    @property
    @pulumi.getter(name="dstEndIp")
    def dst_end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID IPv4 end.
        """
        return pulumi.get(self, "dst_end_ip")

    @dst_end_ip.setter
    def dst_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_end_ip", value)

    @property
    @pulumi.getter(name="dstEndIp6")
    def dst_end_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID IPv6 end.
        """
        return pulumi.get(self, "dst_end_ip6")

    @dst_end_ip6.setter
    def dst_end_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_end_ip6", value)

    @property
    @pulumi.getter(name="dstName")
    def dst_name(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID name.
        """
        return pulumi.get(self, "dst_name")

    @dst_name.setter
    def dst_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_name", value)

    @property
    @pulumi.getter(name="dstName6")
    def dst_name6(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID name.
        """
        return pulumi.get(self, "dst_name6")

    @dst_name6.setter
    def dst_name6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_name6", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[int]]:
        """
        Quick mode destination port (1 - 65535 or 0 for all).
        """
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter(name="dstStartIp")
    def dst_start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID IPv4 start.
        """
        return pulumi.get(self, "dst_start_ip")

    @dst_start_ip.setter
    def dst_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_start_ip", value)

    @property
    @pulumi.getter(name="dstStartIp6")
    def dst_start_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID IPv6 start.
        """
        return pulumi.get(self, "dst_start_ip6")

    @dst_start_ip6.setter
    def dst_start_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_start_ip6", value)

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID IPv4 subnet.
        """
        return pulumi.get(self, "dst_subnet")

    @dst_subnet.setter
    def dst_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_subnet", value)

    @property
    @pulumi.getter(name="dstSubnet6")
    def dst_subnet6(self) -> Optional[pulumi.Input[str]]:
        """
        Remote proxy ID IPv6 subnet.
        """
        return pulumi.get(self, "dst_subnet6")

    @dst_subnet6.setter
    def dst_subnet6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_subnet6", value)

    @property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[str]]:
        """
        ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encapsulation", value)

    @property
    @pulumi.getter(name="inboundDscpCopy")
    def inbound_dscp_copy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
        """
        return pulumi.get(self, "inbound_dscp_copy")

    @inbound_dscp_copy.setter
    def inbound_dscp_copy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound_dscp_copy", value)

    @property
    @pulumi.getter(name="initiatorTsNarrow")
    def initiator_ts_narrow(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "initiator_ts_narrow")

    @initiator_ts_narrow.setter
    def initiator_ts_narrow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initiator_ts_narrow", value)

    @property
    @pulumi.getter(name="ipv4Df")
    def ipv4_df(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipv4_df")

    @ipv4_df.setter
    def ipv4_df(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_df", value)

    @property
    @pulumi.getter
    def keepalive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable keep alive. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "keepalive")

    @keepalive.setter
    def keepalive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keepalive", value)

    @property
    @pulumi.getter(name="keylifeType")
    def keylife_type(self) -> Optional[pulumi.Input[str]]:
        """
        Keylife type. Valid values: `seconds`, `kbs`, `both`.
        """
        return pulumi.get(self, "keylife_type")

    @keylife_type.setter
    def keylife_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keylife_type", value)

    @property
    @pulumi.getter
    def keylifekbs(self) -> Optional[pulumi.Input[int]]:
        """
        Phase2 key life in number of bytes of traffic (5120 - 4294967295).
        """
        return pulumi.get(self, "keylifekbs")

    @keylifekbs.setter
    def keylifekbs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keylifekbs", value)

    @property
    @pulumi.getter
    def keylifeseconds(self) -> Optional[pulumi.Input[int]]:
        """
        Phase2 key life in time in seconds (120 - 172800).
        """
        return pulumi.get(self, "keylifeseconds")

    @keylifeseconds.setter
    def keylifeseconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keylifeseconds", value)

    @property
    @pulumi.getter
    def l2tp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "l2tp")

    @l2tp.setter
    def l2tp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "l2tp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec tunnel name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pfs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PFS feature. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pfs")

    @pfs.setter
    def pfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pfs", value)

    @property
    @pulumi.getter
    def phase1name(self) -> Optional[pulumi.Input[str]]:
        """
        Phase 1 determines the options required for phase 2.
        """
        return pulumi.get(self, "phase1name")

    @phase1name.setter
    def phase1name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase1name", value)

    @property
    @pulumi.getter
    def proposal(self) -> Optional[pulumi.Input[str]]:
        """
        Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        """
        return pulumi.get(self, "proposal")

    @proposal.setter
    def proposal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proposal", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Quick mode protocol selector (1 - 255 or 0 for all).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def replay(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable replay detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "replay")

    @replay.setter
    def replay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replay", value)

    @property
    @pulumi.getter(name="routeOverlap")
    def route_overlap(self) -> Optional[pulumi.Input[str]]:
        """
        Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
        """
        return pulumi.get(self, "route_overlap")

    @route_overlap.setter
    def route_overlap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_overlap", value)

    @property
    @pulumi.getter(name="singleSource")
    def single_source(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "single_source")

    @single_source.setter
    def single_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_source", value)

    @property
    @pulumi.getter(name="srcAddrType")
    def src_addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
        """
        return pulumi.get(self, "src_addr_type")

    @src_addr_type.setter
    def src_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_addr_type", value)

    @property
    @pulumi.getter(name="srcEndIp")
    def src_end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID end.
        """
        return pulumi.get(self, "src_end_ip")

    @src_end_ip.setter
    def src_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_end_ip", value)

    @property
    @pulumi.getter(name="srcEndIp6")
    def src_end_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID IPv6 end.
        """
        return pulumi.get(self, "src_end_ip6")

    @src_end_ip6.setter
    def src_end_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_end_ip6", value)

    @property
    @pulumi.getter(name="srcName")
    def src_name(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID name.
        """
        return pulumi.get(self, "src_name")

    @src_name.setter
    def src_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_name", value)

    @property
    @pulumi.getter(name="srcName6")
    def src_name6(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID name.
        """
        return pulumi.get(self, "src_name6")

    @src_name6.setter
    def src_name6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_name6", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[int]]:
        """
        Quick mode source port (1 - 65535 or 0 for all).
        """
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "src_port", value)

    @property
    @pulumi.getter(name="srcStartIp")
    def src_start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID start.
        """
        return pulumi.get(self, "src_start_ip")

    @src_start_ip.setter
    def src_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_start_ip", value)

    @property
    @pulumi.getter(name="srcStartIp6")
    def src_start_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID IPv6 start.
        """
        return pulumi.get(self, "src_start_ip6")

    @src_start_ip6.setter
    def src_start_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_start_ip6", value)

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID subnet.
        """
        return pulumi.get(self, "src_subnet")

    @src_subnet.setter
    def src_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_subnet", value)

    @property
    @pulumi.getter(name="srcSubnet6")
    def src_subnet6(self) -> Optional[pulumi.Input[str]]:
        """
        Local proxy ID IPv6 subnet.
        """
        return pulumi.get(self, "src_subnet6")

    @src_subnet6.setter
    def src_subnet6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_subnet6", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Phase2interface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_route: Optional[pulumi.Input[str]] = None,
                 auto_discovery_forwarder: Optional[pulumi.Input[str]] = None,
                 auto_discovery_sender: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dhcp_ipsec: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dst_addr_type: Optional[pulumi.Input[str]] = None,
                 dst_end_ip: Optional[pulumi.Input[str]] = None,
                 dst_end_ip6: Optional[pulumi.Input[str]] = None,
                 dst_name: Optional[pulumi.Input[str]] = None,
                 dst_name6: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[int]] = None,
                 dst_start_ip: Optional[pulumi.Input[str]] = None,
                 dst_start_ip6: Optional[pulumi.Input[str]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 dst_subnet6: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 initiator_ts_narrow: Optional[pulumi.Input[str]] = None,
                 ipv4_df: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[str]] = None,
                 keylife_type: Optional[pulumi.Input[str]] = None,
                 keylifekbs: Optional[pulumi.Input[int]] = None,
                 keylifeseconds: Optional[pulumi.Input[int]] = None,
                 l2tp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pfs: Optional[pulumi.Input[str]] = None,
                 phase1name: Optional[pulumi.Input[str]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 replay: Optional[pulumi.Input[str]] = None,
                 route_overlap: Optional[pulumi.Input[str]] = None,
                 single_source: Optional[pulumi.Input[str]] = None,
                 src_addr_type: Optional[pulumi.Input[str]] = None,
                 src_end_ip: Optional[pulumi.Input[str]] = None,
                 src_end_ip6: Optional[pulumi.Input[str]] = None,
                 src_name: Optional[pulumi.Input[str]] = None,
                 src_name6: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[int]] = None,
                 src_start_ip: Optional[pulumi.Input[str]] = None,
                 src_start_ip6: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None,
                 src_subnet6: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure VPN autokey tunnel.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname3 = fortios.vpn.ipsec.Phase1interface("trname3",
            acct_verify="disable",
            add_gw_route="disable",
            add_route="enable",
            assign_ip="enable",
            assign_ip_from="range",
            authmethod="psk",
            auto_discovery_forwarder="disable",
            auto_discovery_psk="disable",
            auto_discovery_receiver="disable",
            auto_discovery_sender="disable",
            auto_negotiate="enable",
            cert_id_validation="enable",
            childless_ike="disable",
            client_auto_negotiate="disable",
            client_keep_alive="disable",
            default_gw="0.0.0.0",
            default_gw_priority=0,
            dhgrp="14 5",
            digital_signature_auth="disable",
            distance=15,
            dns_mode="manual",
            dpd="on-demand",
            dpd_retrycount=3,
            dpd_retryinterval="20",
            eap="disable",
            eap_identity="use-id-payload",
            encap_local_gw4="0.0.0.0",
            encap_local_gw6="::",
            encap_remote_gw4="0.0.0.0",
            encap_remote_gw6="::",
            encapsulation="none",
            encapsulation_address="ike",
            enforce_unique_id="disable",
            exchange_interface_ip="disable",
            exchange_ip_addr4="0.0.0.0",
            exchange_ip_addr6="::",
            forticlient_enforcement="disable",
            fragmentation="enable",
            fragmentation_mtu=1200,
            group_authentication="disable",
            ha_sync_esp_seqno="enable",
            idle_timeout="disable",
            idle_timeoutinterval=15,
            ike_version="1",
            include_local_lan="disable",
            interface="port3",
            ip_version="4",
            ipv4_dns_server1="0.0.0.0",
            ipv4_dns_server2="0.0.0.0",
            ipv4_dns_server3="0.0.0.0",
            ipv4_end_ip="0.0.0.0",
            ipv4_netmask="255.255.255.255",
            ipv4_start_ip="0.0.0.0",
            ipv4_wins_server1="0.0.0.0",
            ipv4_wins_server2="0.0.0.0",
            ipv6_dns_server1="::",
            ipv6_dns_server2="::",
            ipv6_dns_server3="::",
            ipv6_end_ip="::",
            ipv6_prefix=128,
            ipv6_start_ip="::",
            keepalive=10,
            keylife=86400,
            local_gw="0.0.0.0",
            local_gw6="::",
            localid_type="auto",
            mesh_selector_type="disable",
            mode="main",
            mode_cfg="disable",
            monitor_hold_down_delay=0,
            monitor_hold_down_time="00:00",
            monitor_hold_down_type="immediate",
            monitor_hold_down_weekday="sunday",
            nattraversal="enable",
            negotiate_timeout=30,
            net_device="disable",
            passive_mode="disable",
            peertype="any",
            ppk="disable",
            priority=0,
            proposal="aes128-sha256 aes256-sha256 aes128-sha1 aes256-sha1",
            psksecret="eweeeeeeeecee",
            reauth="disable",
            rekey="enable",
            remote_gw="2.22.2.2",
            remote_gw6="::",
            rsa_signature_format="pkcs1",
            save_password="disable",
            send_cert_chain="enable",
            signature_hash_alg="sha2-512 sha2-384 sha2-256 sha1",
            suite_b="disable",
            tunnel_search="selectors",
            type="static",
            unity_support="enable",
            wizard_type="custom",
            xauthtype="disable")
        trname2 = fortios.vpn.ipsec.Phase2interface("trname2",
            add_route="phase1",
            auto_discovery_forwarder="phase1",
            auto_discovery_sender="phase1",
            auto_negotiate="disable",
            dhcp_ipsec="disable",
            dhgrp="14 5",
            dst_addr_type="subnet",
            dst_end_ip6="::",
            dst_port=0,
            dst_subnet="0.0.0.0 0.0.0.0",
            encapsulation="tunnel-mode",
            keepalive="disable",
            keylife_type="seconds",
            keylifekbs=5120,
            keylifeseconds=43200,
            l2tp="disable",
            pfs="enable",
            phase1name=trname3.name,
            proposal="aes128-sha1 aes256-sha1 aes128-sha256 aes256-sha256 aes128gcm aes256gcm chacha20poly1305",
            protocol=0,
            replay="enable",
            route_overlap="use-new",
            single_source="disable",
            src_addr_type="subnet",
            src_end_ip6="::",
            src_port=0,
            src_subnet="0.0.0.0 0.0.0.0")
        ```

        ## Import

        VpnIpsec Phase2Interface can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:vpn/ipsec/phase2interface:Phase2interface labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:vpn/ipsec/phase2interface:Phase2interface labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] add_route: Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_forwarder: Enable/disable forwarding short-cut messages. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_sender: Enable/disable sending short-cut messages. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] auto_negotiate: Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] dhcp_ipsec: Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhgrp: Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        :param pulumi.Input[str] diffserv: Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode: DSCP value to be applied to the IPsec tunnel outer IP header.
        :param pulumi.Input[str] dst_addr_type: Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
        :param pulumi.Input[str] dst_end_ip: Remote proxy ID IPv4 end.
        :param pulumi.Input[str] dst_end_ip6: Remote proxy ID IPv6 end.
        :param pulumi.Input[str] dst_name: Remote proxy ID name.
        :param pulumi.Input[str] dst_name6: Remote proxy ID name.
        :param pulumi.Input[int] dst_port: Quick mode destination port (1 - 65535 or 0 for all).
        :param pulumi.Input[str] dst_start_ip: Remote proxy ID IPv4 start.
        :param pulumi.Input[str] dst_start_ip6: Remote proxy ID IPv6 start.
        :param pulumi.Input[str] dst_subnet: Remote proxy ID IPv4 subnet.
        :param pulumi.Input[str] dst_subnet6: Remote proxy ID IPv6 subnet.
        :param pulumi.Input[str] encapsulation: ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
        :param pulumi.Input[str] inbound_dscp_copy: Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] initiator_ts_narrow: Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipv4_df: Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] keepalive: Enable/disable keep alive. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] keylife_type: Keylife type. Valid values: `seconds`, `kbs`, `both`.
        :param pulumi.Input[int] keylifekbs: Phase2 key life in number of bytes of traffic (5120 - 4294967295).
        :param pulumi.Input[int] keylifeseconds: Phase2 key life in time in seconds (120 - 172800).
        :param pulumi.Input[str] l2tp: Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: IPsec tunnel name.
        :param pulumi.Input[str] pfs: Enable/disable PFS feature. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] phase1name: Phase 1 determines the options required for phase 2.
        :param pulumi.Input[str] proposal: Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        :param pulumi.Input[int] protocol: Quick mode protocol selector (1 - 255 or 0 for all).
        :param pulumi.Input[str] replay: Enable/disable replay detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_overlap: Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
        :param pulumi.Input[str] single_source: Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] src_addr_type: Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
        :param pulumi.Input[str] src_end_ip: Local proxy ID end.
        :param pulumi.Input[str] src_end_ip6: Local proxy ID IPv6 end.
        :param pulumi.Input[str] src_name: Local proxy ID name.
        :param pulumi.Input[str] src_name6: Local proxy ID name.
        :param pulumi.Input[int] src_port: Quick mode source port (1 - 65535 or 0 for all).
        :param pulumi.Input[str] src_start_ip: Local proxy ID start.
        :param pulumi.Input[str] src_start_ip6: Local proxy ID IPv6 start.
        :param pulumi.Input[str] src_subnet: Local proxy ID subnet.
        :param pulumi.Input[str] src_subnet6: Local proxy ID IPv6 subnet.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Phase2interfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure VPN autokey tunnel.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname3 = fortios.vpn.ipsec.Phase1interface("trname3",
            acct_verify="disable",
            add_gw_route="disable",
            add_route="enable",
            assign_ip="enable",
            assign_ip_from="range",
            authmethod="psk",
            auto_discovery_forwarder="disable",
            auto_discovery_psk="disable",
            auto_discovery_receiver="disable",
            auto_discovery_sender="disable",
            auto_negotiate="enable",
            cert_id_validation="enable",
            childless_ike="disable",
            client_auto_negotiate="disable",
            client_keep_alive="disable",
            default_gw="0.0.0.0",
            default_gw_priority=0,
            dhgrp="14 5",
            digital_signature_auth="disable",
            distance=15,
            dns_mode="manual",
            dpd="on-demand",
            dpd_retrycount=3,
            dpd_retryinterval="20",
            eap="disable",
            eap_identity="use-id-payload",
            encap_local_gw4="0.0.0.0",
            encap_local_gw6="::",
            encap_remote_gw4="0.0.0.0",
            encap_remote_gw6="::",
            encapsulation="none",
            encapsulation_address="ike",
            enforce_unique_id="disable",
            exchange_interface_ip="disable",
            exchange_ip_addr4="0.0.0.0",
            exchange_ip_addr6="::",
            forticlient_enforcement="disable",
            fragmentation="enable",
            fragmentation_mtu=1200,
            group_authentication="disable",
            ha_sync_esp_seqno="enable",
            idle_timeout="disable",
            idle_timeoutinterval=15,
            ike_version="1",
            include_local_lan="disable",
            interface="port3",
            ip_version="4",
            ipv4_dns_server1="0.0.0.0",
            ipv4_dns_server2="0.0.0.0",
            ipv4_dns_server3="0.0.0.0",
            ipv4_end_ip="0.0.0.0",
            ipv4_netmask="255.255.255.255",
            ipv4_start_ip="0.0.0.0",
            ipv4_wins_server1="0.0.0.0",
            ipv4_wins_server2="0.0.0.0",
            ipv6_dns_server1="::",
            ipv6_dns_server2="::",
            ipv6_dns_server3="::",
            ipv6_end_ip="::",
            ipv6_prefix=128,
            ipv6_start_ip="::",
            keepalive=10,
            keylife=86400,
            local_gw="0.0.0.0",
            local_gw6="::",
            localid_type="auto",
            mesh_selector_type="disable",
            mode="main",
            mode_cfg="disable",
            monitor_hold_down_delay=0,
            monitor_hold_down_time="00:00",
            monitor_hold_down_type="immediate",
            monitor_hold_down_weekday="sunday",
            nattraversal="enable",
            negotiate_timeout=30,
            net_device="disable",
            passive_mode="disable",
            peertype="any",
            ppk="disable",
            priority=0,
            proposal="aes128-sha256 aes256-sha256 aes128-sha1 aes256-sha1",
            psksecret="eweeeeeeeecee",
            reauth="disable",
            rekey="enable",
            remote_gw="2.22.2.2",
            remote_gw6="::",
            rsa_signature_format="pkcs1",
            save_password="disable",
            send_cert_chain="enable",
            signature_hash_alg="sha2-512 sha2-384 sha2-256 sha1",
            suite_b="disable",
            tunnel_search="selectors",
            type="static",
            unity_support="enable",
            wizard_type="custom",
            xauthtype="disable")
        trname2 = fortios.vpn.ipsec.Phase2interface("trname2",
            add_route="phase1",
            auto_discovery_forwarder="phase1",
            auto_discovery_sender="phase1",
            auto_negotiate="disable",
            dhcp_ipsec="disable",
            dhgrp="14 5",
            dst_addr_type="subnet",
            dst_end_ip6="::",
            dst_port=0,
            dst_subnet="0.0.0.0 0.0.0.0",
            encapsulation="tunnel-mode",
            keepalive="disable",
            keylife_type="seconds",
            keylifekbs=5120,
            keylifeseconds=43200,
            l2tp="disable",
            pfs="enable",
            phase1name=trname3.name,
            proposal="aes128-sha1 aes256-sha1 aes128-sha256 aes256-sha256 aes128gcm aes256gcm chacha20poly1305",
            protocol=0,
            replay="enable",
            route_overlap="use-new",
            single_source="disable",
            src_addr_type="subnet",
            src_end_ip6="::",
            src_port=0,
            src_subnet="0.0.0.0 0.0.0.0")
        ```

        ## Import

        VpnIpsec Phase2Interface can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:vpn/ipsec/phase2interface:Phase2interface labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:vpn/ipsec/phase2interface:Phase2interface labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param Phase2interfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Phase2interfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_route: Optional[pulumi.Input[str]] = None,
                 auto_discovery_forwarder: Optional[pulumi.Input[str]] = None,
                 auto_discovery_sender: Optional[pulumi.Input[str]] = None,
                 auto_negotiate: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 dhcp_ipsec: Optional[pulumi.Input[str]] = None,
                 dhgrp: Optional[pulumi.Input[str]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dst_addr_type: Optional[pulumi.Input[str]] = None,
                 dst_end_ip: Optional[pulumi.Input[str]] = None,
                 dst_end_ip6: Optional[pulumi.Input[str]] = None,
                 dst_name: Optional[pulumi.Input[str]] = None,
                 dst_name6: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[int]] = None,
                 dst_start_ip: Optional[pulumi.Input[str]] = None,
                 dst_start_ip6: Optional[pulumi.Input[str]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 dst_subnet6: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
                 initiator_ts_narrow: Optional[pulumi.Input[str]] = None,
                 ipv4_df: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[str]] = None,
                 keylife_type: Optional[pulumi.Input[str]] = None,
                 keylifekbs: Optional[pulumi.Input[int]] = None,
                 keylifeseconds: Optional[pulumi.Input[int]] = None,
                 l2tp: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pfs: Optional[pulumi.Input[str]] = None,
                 phase1name: Optional[pulumi.Input[str]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 replay: Optional[pulumi.Input[str]] = None,
                 route_overlap: Optional[pulumi.Input[str]] = None,
                 single_source: Optional[pulumi.Input[str]] = None,
                 src_addr_type: Optional[pulumi.Input[str]] = None,
                 src_end_ip: Optional[pulumi.Input[str]] = None,
                 src_end_ip6: Optional[pulumi.Input[str]] = None,
                 src_name: Optional[pulumi.Input[str]] = None,
                 src_name6: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[int]] = None,
                 src_start_ip: Optional[pulumi.Input[str]] = None,
                 src_start_ip6: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None,
                 src_subnet6: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Phase2interfaceArgs.__new__(Phase2interfaceArgs)

            __props__.__dict__["add_route"] = add_route
            __props__.__dict__["auto_discovery_forwarder"] = auto_discovery_forwarder
            __props__.__dict__["auto_discovery_sender"] = auto_discovery_sender
            __props__.__dict__["auto_negotiate"] = auto_negotiate
            __props__.__dict__["comments"] = comments
            __props__.__dict__["dhcp_ipsec"] = dhcp_ipsec
            __props__.__dict__["dhgrp"] = dhgrp
            __props__.__dict__["diffserv"] = diffserv
            __props__.__dict__["diffservcode"] = diffservcode
            __props__.__dict__["dst_addr_type"] = dst_addr_type
            __props__.__dict__["dst_end_ip"] = dst_end_ip
            __props__.__dict__["dst_end_ip6"] = dst_end_ip6
            __props__.__dict__["dst_name"] = dst_name
            __props__.__dict__["dst_name6"] = dst_name6
            __props__.__dict__["dst_port"] = dst_port
            __props__.__dict__["dst_start_ip"] = dst_start_ip
            __props__.__dict__["dst_start_ip6"] = dst_start_ip6
            __props__.__dict__["dst_subnet"] = dst_subnet
            __props__.__dict__["dst_subnet6"] = dst_subnet6
            __props__.__dict__["encapsulation"] = encapsulation
            __props__.__dict__["inbound_dscp_copy"] = inbound_dscp_copy
            __props__.__dict__["initiator_ts_narrow"] = initiator_ts_narrow
            __props__.__dict__["ipv4_df"] = ipv4_df
            __props__.__dict__["keepalive"] = keepalive
            __props__.__dict__["keylife_type"] = keylife_type
            __props__.__dict__["keylifekbs"] = keylifekbs
            __props__.__dict__["keylifeseconds"] = keylifeseconds
            __props__.__dict__["l2tp"] = l2tp
            __props__.__dict__["name"] = name
            __props__.__dict__["pfs"] = pfs
            if phase1name is None and not opts.urn:
                raise TypeError("Missing required property 'phase1name'")
            __props__.__dict__["phase1name"] = phase1name
            if proposal is None and not opts.urn:
                raise TypeError("Missing required property 'proposal'")
            __props__.__dict__["proposal"] = proposal
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["replay"] = replay
            __props__.__dict__["route_overlap"] = route_overlap
            __props__.__dict__["single_source"] = single_source
            __props__.__dict__["src_addr_type"] = src_addr_type
            __props__.__dict__["src_end_ip"] = src_end_ip
            __props__.__dict__["src_end_ip6"] = src_end_ip6
            __props__.__dict__["src_name"] = src_name
            __props__.__dict__["src_name6"] = src_name6
            __props__.__dict__["src_port"] = src_port
            __props__.__dict__["src_start_ip"] = src_start_ip
            __props__.__dict__["src_start_ip6"] = src_start_ip6
            __props__.__dict__["src_subnet"] = src_subnet
            __props__.__dict__["src_subnet6"] = src_subnet6
            __props__.__dict__["vdomparam"] = vdomparam
        super(Phase2interface, __self__).__init__(
            'fortios:vpn/ipsec/phase2interface:Phase2interface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_route: Optional[pulumi.Input[str]] = None,
            auto_discovery_forwarder: Optional[pulumi.Input[str]] = None,
            auto_discovery_sender: Optional[pulumi.Input[str]] = None,
            auto_negotiate: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            dhcp_ipsec: Optional[pulumi.Input[str]] = None,
            dhgrp: Optional[pulumi.Input[str]] = None,
            diffserv: Optional[pulumi.Input[str]] = None,
            diffservcode: Optional[pulumi.Input[str]] = None,
            dst_addr_type: Optional[pulumi.Input[str]] = None,
            dst_end_ip: Optional[pulumi.Input[str]] = None,
            dst_end_ip6: Optional[pulumi.Input[str]] = None,
            dst_name: Optional[pulumi.Input[str]] = None,
            dst_name6: Optional[pulumi.Input[str]] = None,
            dst_port: Optional[pulumi.Input[int]] = None,
            dst_start_ip: Optional[pulumi.Input[str]] = None,
            dst_start_ip6: Optional[pulumi.Input[str]] = None,
            dst_subnet: Optional[pulumi.Input[str]] = None,
            dst_subnet6: Optional[pulumi.Input[str]] = None,
            encapsulation: Optional[pulumi.Input[str]] = None,
            inbound_dscp_copy: Optional[pulumi.Input[str]] = None,
            initiator_ts_narrow: Optional[pulumi.Input[str]] = None,
            ipv4_df: Optional[pulumi.Input[str]] = None,
            keepalive: Optional[pulumi.Input[str]] = None,
            keylife_type: Optional[pulumi.Input[str]] = None,
            keylifekbs: Optional[pulumi.Input[int]] = None,
            keylifeseconds: Optional[pulumi.Input[int]] = None,
            l2tp: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pfs: Optional[pulumi.Input[str]] = None,
            phase1name: Optional[pulumi.Input[str]] = None,
            proposal: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[int]] = None,
            replay: Optional[pulumi.Input[str]] = None,
            route_overlap: Optional[pulumi.Input[str]] = None,
            single_source: Optional[pulumi.Input[str]] = None,
            src_addr_type: Optional[pulumi.Input[str]] = None,
            src_end_ip: Optional[pulumi.Input[str]] = None,
            src_end_ip6: Optional[pulumi.Input[str]] = None,
            src_name: Optional[pulumi.Input[str]] = None,
            src_name6: Optional[pulumi.Input[str]] = None,
            src_port: Optional[pulumi.Input[int]] = None,
            src_start_ip: Optional[pulumi.Input[str]] = None,
            src_start_ip6: Optional[pulumi.Input[str]] = None,
            src_subnet: Optional[pulumi.Input[str]] = None,
            src_subnet6: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Phase2interface':
        """
        Get an existing Phase2interface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] add_route: Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_forwarder: Enable/disable forwarding short-cut messages. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] auto_discovery_sender: Enable/disable sending short-cut messages. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] auto_negotiate: Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] dhcp_ipsec: Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhgrp: Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        :param pulumi.Input[str] diffserv: Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] diffservcode: DSCP value to be applied to the IPsec tunnel outer IP header.
        :param pulumi.Input[str] dst_addr_type: Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
        :param pulumi.Input[str] dst_end_ip: Remote proxy ID IPv4 end.
        :param pulumi.Input[str] dst_end_ip6: Remote proxy ID IPv6 end.
        :param pulumi.Input[str] dst_name: Remote proxy ID name.
        :param pulumi.Input[str] dst_name6: Remote proxy ID name.
        :param pulumi.Input[int] dst_port: Quick mode destination port (1 - 65535 or 0 for all).
        :param pulumi.Input[str] dst_start_ip: Remote proxy ID IPv4 start.
        :param pulumi.Input[str] dst_start_ip6: Remote proxy ID IPv6 start.
        :param pulumi.Input[str] dst_subnet: Remote proxy ID IPv4 subnet.
        :param pulumi.Input[str] dst_subnet6: Remote proxy ID IPv6 subnet.
        :param pulumi.Input[str] encapsulation: ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
        :param pulumi.Input[str] inbound_dscp_copy: Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
        :param pulumi.Input[str] initiator_ts_narrow: Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ipv4_df: Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] keepalive: Enable/disable keep alive. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] keylife_type: Keylife type. Valid values: `seconds`, `kbs`, `both`.
        :param pulumi.Input[int] keylifekbs: Phase2 key life in number of bytes of traffic (5120 - 4294967295).
        :param pulumi.Input[int] keylifeseconds: Phase2 key life in time in seconds (120 - 172800).
        :param pulumi.Input[str] l2tp: Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: IPsec tunnel name.
        :param pulumi.Input[str] pfs: Enable/disable PFS feature. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] phase1name: Phase 1 determines the options required for phase 2.
        :param pulumi.Input[str] proposal: Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        :param pulumi.Input[int] protocol: Quick mode protocol selector (1 - 255 or 0 for all).
        :param pulumi.Input[str] replay: Enable/disable replay detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_overlap: Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
        :param pulumi.Input[str] single_source: Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] src_addr_type: Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
        :param pulumi.Input[str] src_end_ip: Local proxy ID end.
        :param pulumi.Input[str] src_end_ip6: Local proxy ID IPv6 end.
        :param pulumi.Input[str] src_name: Local proxy ID name.
        :param pulumi.Input[str] src_name6: Local proxy ID name.
        :param pulumi.Input[int] src_port: Quick mode source port (1 - 65535 or 0 for all).
        :param pulumi.Input[str] src_start_ip: Local proxy ID start.
        :param pulumi.Input[str] src_start_ip6: Local proxy ID IPv6 start.
        :param pulumi.Input[str] src_subnet: Local proxy ID subnet.
        :param pulumi.Input[str] src_subnet6: Local proxy ID IPv6 subnet.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Phase2interfaceState.__new__(_Phase2interfaceState)

        __props__.__dict__["add_route"] = add_route
        __props__.__dict__["auto_discovery_forwarder"] = auto_discovery_forwarder
        __props__.__dict__["auto_discovery_sender"] = auto_discovery_sender
        __props__.__dict__["auto_negotiate"] = auto_negotiate
        __props__.__dict__["comments"] = comments
        __props__.__dict__["dhcp_ipsec"] = dhcp_ipsec
        __props__.__dict__["dhgrp"] = dhgrp
        __props__.__dict__["diffserv"] = diffserv
        __props__.__dict__["diffservcode"] = diffservcode
        __props__.__dict__["dst_addr_type"] = dst_addr_type
        __props__.__dict__["dst_end_ip"] = dst_end_ip
        __props__.__dict__["dst_end_ip6"] = dst_end_ip6
        __props__.__dict__["dst_name"] = dst_name
        __props__.__dict__["dst_name6"] = dst_name6
        __props__.__dict__["dst_port"] = dst_port
        __props__.__dict__["dst_start_ip"] = dst_start_ip
        __props__.__dict__["dst_start_ip6"] = dst_start_ip6
        __props__.__dict__["dst_subnet"] = dst_subnet
        __props__.__dict__["dst_subnet6"] = dst_subnet6
        __props__.__dict__["encapsulation"] = encapsulation
        __props__.__dict__["inbound_dscp_copy"] = inbound_dscp_copy
        __props__.__dict__["initiator_ts_narrow"] = initiator_ts_narrow
        __props__.__dict__["ipv4_df"] = ipv4_df
        __props__.__dict__["keepalive"] = keepalive
        __props__.__dict__["keylife_type"] = keylife_type
        __props__.__dict__["keylifekbs"] = keylifekbs
        __props__.__dict__["keylifeseconds"] = keylifeseconds
        __props__.__dict__["l2tp"] = l2tp
        __props__.__dict__["name"] = name
        __props__.__dict__["pfs"] = pfs
        __props__.__dict__["phase1name"] = phase1name
        __props__.__dict__["proposal"] = proposal
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["replay"] = replay
        __props__.__dict__["route_overlap"] = route_overlap
        __props__.__dict__["single_source"] = single_source
        __props__.__dict__["src_addr_type"] = src_addr_type
        __props__.__dict__["src_end_ip"] = src_end_ip
        __props__.__dict__["src_end_ip6"] = src_end_ip6
        __props__.__dict__["src_name"] = src_name
        __props__.__dict__["src_name6"] = src_name6
        __props__.__dict__["src_port"] = src_port
        __props__.__dict__["src_start_ip"] = src_start_ip
        __props__.__dict__["src_start_ip6"] = src_start_ip6
        __props__.__dict__["src_subnet"] = src_subnet
        __props__.__dict__["src_subnet6"] = src_subnet6
        __props__.__dict__["vdomparam"] = vdomparam
        return Phase2interface(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addRoute")
    def add_route(self) -> pulumi.Output[str]:
        """
        Enable/disable automatic route addition. Valid values: `phase1`, `enable`, `disable`.
        """
        return pulumi.get(self, "add_route")

    @property
    @pulumi.getter(name="autoDiscoveryForwarder")
    def auto_discovery_forwarder(self) -> pulumi.Output[str]:
        """
        Enable/disable forwarding short-cut messages. Valid values: `phase1`, `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_forwarder")

    @property
    @pulumi.getter(name="autoDiscoverySender")
    def auto_discovery_sender(self) -> pulumi.Output[str]:
        """
        Enable/disable sending short-cut messages. Valid values: `phase1`, `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discovery_sender")

    @property
    @pulumi.getter(name="autoNegotiate")
    def auto_negotiate(self) -> pulumi.Output[str]:
        """
        Enable/disable IPsec SA auto-negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_negotiate")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="dhcpIpsec")
    def dhcp_ipsec(self) -> pulumi.Output[str]:
        """
        Enable/disable DHCP-IPsec. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_ipsec")

    @property
    @pulumi.getter
    def dhgrp(self) -> pulumi.Output[str]:
        """
        Phase2 DH group. Valid values: `1`, `2`, `5`, `14`, `15`, `16`, `17`, `18`, `19`, `20`, `21`, `27`, `28`, `29`, `30`, `31`, `32`.
        """
        return pulumi.get(self, "dhgrp")

    @property
    @pulumi.getter
    def diffserv(self) -> pulumi.Output[str]:
        """
        Enable/disable applying DSCP value to the IPsec tunnel outer IP header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "diffserv")

    @property
    @pulumi.getter
    def diffservcode(self) -> pulumi.Output[str]:
        """
        DSCP value to be applied to the IPsec tunnel outer IP header.
        """
        return pulumi.get(self, "diffservcode")

    @property
    @pulumi.getter(name="dstAddrType")
    def dst_addr_type(self) -> pulumi.Output[str]:
        """
        Remote proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
        """
        return pulumi.get(self, "dst_addr_type")

    @property
    @pulumi.getter(name="dstEndIp")
    def dst_end_ip(self) -> pulumi.Output[str]:
        """
        Remote proxy ID IPv4 end.
        """
        return pulumi.get(self, "dst_end_ip")

    @property
    @pulumi.getter(name="dstEndIp6")
    def dst_end_ip6(self) -> pulumi.Output[str]:
        """
        Remote proxy ID IPv6 end.
        """
        return pulumi.get(self, "dst_end_ip6")

    @property
    @pulumi.getter(name="dstName")
    def dst_name(self) -> pulumi.Output[str]:
        """
        Remote proxy ID name.
        """
        return pulumi.get(self, "dst_name")

    @property
    @pulumi.getter(name="dstName6")
    def dst_name6(self) -> pulumi.Output[str]:
        """
        Remote proxy ID name.
        """
        return pulumi.get(self, "dst_name6")

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> pulumi.Output[int]:
        """
        Quick mode destination port (1 - 65535 or 0 for all).
        """
        return pulumi.get(self, "dst_port")

    @property
    @pulumi.getter(name="dstStartIp")
    def dst_start_ip(self) -> pulumi.Output[str]:
        """
        Remote proxy ID IPv4 start.
        """
        return pulumi.get(self, "dst_start_ip")

    @property
    @pulumi.getter(name="dstStartIp6")
    def dst_start_ip6(self) -> pulumi.Output[str]:
        """
        Remote proxy ID IPv6 start.
        """
        return pulumi.get(self, "dst_start_ip6")

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> pulumi.Output[str]:
        """
        Remote proxy ID IPv4 subnet.
        """
        return pulumi.get(self, "dst_subnet")

    @property
    @pulumi.getter(name="dstSubnet6")
    def dst_subnet6(self) -> pulumi.Output[str]:
        """
        Remote proxy ID IPv6 subnet.
        """
        return pulumi.get(self, "dst_subnet6")

    @property
    @pulumi.getter
    def encapsulation(self) -> pulumi.Output[str]:
        """
        ESP encapsulation mode. Valid values: `tunnel-mode`, `transport-mode`.
        """
        return pulumi.get(self, "encapsulation")

    @property
    @pulumi.getter(name="inboundDscpCopy")
    def inbound_dscp_copy(self) -> pulumi.Output[str]:
        """
        Enable/disable copying of the DSCP field in the ESP header to the inner IP header. Valid values: `phase1`, `enable`, `disable`.
        """
        return pulumi.get(self, "inbound_dscp_copy")

    @property
    @pulumi.getter(name="initiatorTsNarrow")
    def initiator_ts_narrow(self) -> pulumi.Output[str]:
        """
        Enable/disable traffic selector narrowing for IKEv2 initiator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "initiator_ts_narrow")

    @property
    @pulumi.getter(name="ipv4Df")
    def ipv4_df(self) -> pulumi.Output[str]:
        """
        Enable/disable setting and resetting of IPv4 'Don't Fragment' bit. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ipv4_df")

    @property
    @pulumi.getter
    def keepalive(self) -> pulumi.Output[str]:
        """
        Enable/disable keep alive. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "keepalive")

    @property
    @pulumi.getter(name="keylifeType")
    def keylife_type(self) -> pulumi.Output[str]:
        """
        Keylife type. Valid values: `seconds`, `kbs`, `both`.
        """
        return pulumi.get(self, "keylife_type")

    @property
    @pulumi.getter
    def keylifekbs(self) -> pulumi.Output[int]:
        """
        Phase2 key life in number of bytes of traffic (5120 - 4294967295).
        """
        return pulumi.get(self, "keylifekbs")

    @property
    @pulumi.getter
    def keylifeseconds(self) -> pulumi.Output[int]:
        """
        Phase2 key life in time in seconds (120 - 172800).
        """
        return pulumi.get(self, "keylifeseconds")

    @property
    @pulumi.getter
    def l2tp(self) -> pulumi.Output[str]:
        """
        Enable/disable L2TP over IPsec. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "l2tp")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        IPsec tunnel name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pfs(self) -> pulumi.Output[str]:
        """
        Enable/disable PFS feature. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pfs")

    @property
    @pulumi.getter
    def phase1name(self) -> pulumi.Output[str]:
        """
        Phase 1 determines the options required for phase 2.
        """
        return pulumi.get(self, "phase1name")

    @property
    @pulumi.getter
    def proposal(self) -> pulumi.Output[str]:
        """
        Phase2 proposal. Valid values: `null-md5`, `null-sha1`, `null-sha256`, `null-sha384`, `null-sha512`, `des-null`, `des-md5`, `des-sha1`, `des-sha256`, `des-sha384`, `des-sha512`, `3des-null`, `3des-md5`, `3des-sha1`, `3des-sha256`, `3des-sha384`, `3des-sha512`, `aes128-null`, `aes128-md5`, `aes128-sha1`, `aes128-sha256`, `aes128-sha384`, `aes128-sha512`, `aes128gcm`, `aes192-null`, `aes192-md5`, `aes192-sha1`, `aes192-sha256`, `aes192-sha384`, `aes192-sha512`, `aes256-null`, `aes256-md5`, `aes256-sha1`, `aes256-sha256`, `aes256-sha384`, `aes256-sha512`, `aes256gcm`, `chacha20poly1305`, `aria128-null`, `aria128-md5`, `aria128-sha1`, `aria128-sha256`, `aria128-sha384`, `aria128-sha512`, `aria192-null`, `aria192-md5`, `aria192-sha1`, `aria192-sha256`, `aria192-sha384`, `aria192-sha512`, `aria256-null`, `aria256-md5`, `aria256-sha1`, `aria256-sha256`, `aria256-sha384`, `aria256-sha512`, `seed-null`, `seed-md5`, `seed-sha1`, `seed-sha256`, `seed-sha384`, `seed-sha512`.
        """
        return pulumi.get(self, "proposal")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[int]:
        """
        Quick mode protocol selector (1 - 255 or 0 for all).
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def replay(self) -> pulumi.Output[str]:
        """
        Enable/disable replay detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "replay")

    @property
    @pulumi.getter(name="routeOverlap")
    def route_overlap(self) -> pulumi.Output[str]:
        """
        Action for overlapping routes. Valid values: `use-old`, `use-new`, `allow`.
        """
        return pulumi.get(self, "route_overlap")

    @property
    @pulumi.getter(name="singleSource")
    def single_source(self) -> pulumi.Output[str]:
        """
        Enable/disable single source IP restriction. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "single_source")

    @property
    @pulumi.getter(name="srcAddrType")
    def src_addr_type(self) -> pulumi.Output[str]:
        """
        Local proxy ID type. Valid values: `subnet`, `range`, `ip`, `name`, `subnet6`, `range6`, `ip6`, `name6`.
        """
        return pulumi.get(self, "src_addr_type")

    @property
    @pulumi.getter(name="srcEndIp")
    def src_end_ip(self) -> pulumi.Output[str]:
        """
        Local proxy ID end.
        """
        return pulumi.get(self, "src_end_ip")

    @property
    @pulumi.getter(name="srcEndIp6")
    def src_end_ip6(self) -> pulumi.Output[str]:
        """
        Local proxy ID IPv6 end.
        """
        return pulumi.get(self, "src_end_ip6")

    @property
    @pulumi.getter(name="srcName")
    def src_name(self) -> pulumi.Output[str]:
        """
        Local proxy ID name.
        """
        return pulumi.get(self, "src_name")

    @property
    @pulumi.getter(name="srcName6")
    def src_name6(self) -> pulumi.Output[str]:
        """
        Local proxy ID name.
        """
        return pulumi.get(self, "src_name6")

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> pulumi.Output[int]:
        """
        Quick mode source port (1 - 65535 or 0 for all).
        """
        return pulumi.get(self, "src_port")

    @property
    @pulumi.getter(name="srcStartIp")
    def src_start_ip(self) -> pulumi.Output[str]:
        """
        Local proxy ID start.
        """
        return pulumi.get(self, "src_start_ip")

    @property
    @pulumi.getter(name="srcStartIp6")
    def src_start_ip6(self) -> pulumi.Output[str]:
        """
        Local proxy ID IPv6 start.
        """
        return pulumi.get(self, "src_start_ip6")

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> pulumi.Output[str]:
        """
        Local proxy ID subnet.
        """
        return pulumi.get(self, "src_subnet")

    @property
    @pulumi.getter(name="srcSubnet6")
    def src_subnet6(self) -> pulumi.Output[str]:
        """
        Local proxy ID IPv6 subnet.
        """
        return pulumi.get(self, "src_subnet6")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

