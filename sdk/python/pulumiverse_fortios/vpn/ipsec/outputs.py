# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'ConcentratorMember',
    'FecMapping',
    'Phase1BackupGateway',
    'Phase1Certificate',
    'Phase1InternalDomainList',
    'Phase1Ipv4ExcludeRange',
    'Phase1Ipv6ExcludeRange',
    'Phase1interfaceBackupGateway',
    'Phase1interfaceCertificate',
    'Phase1interfaceInternalDomainList',
    'Phase1interfaceIpv4ExcludeRange',
    'Phase1interfaceIpv6ExcludeRange',
]

@pulumi.output_type
class ConcentratorMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Member name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Member name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FecMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthBiThreshold":
            suggest = "bandwidth_bi_threshold"
        elif key == "bandwidthDownThreshold":
            suggest = "bandwidth_down_threshold"
        elif key == "bandwidthUpThreshold":
            suggest = "bandwidth_up_threshold"
        elif key == "latencyThreshold":
            suggest = "latency_threshold"
        elif key == "packetLossThreshold":
            suggest = "packet_loss_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FecMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FecMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FecMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_bi_threshold: Optional[int] = None,
                 bandwidth_down_threshold: Optional[int] = None,
                 bandwidth_up_threshold: Optional[int] = None,
                 base: Optional[int] = None,
                 latency_threshold: Optional[int] = None,
                 packet_loss_threshold: Optional[int] = None,
                 redundant: Optional[int] = None,
                 seqno: Optional[int] = None):
        """
        :param int bandwidth_bi_threshold: Apply FEC parameters when available bi-bandwidth is >= threshold (kbps, 0 means no threshold).
        :param int bandwidth_down_threshold: Apply FEC parameters when available down bandwidth is >= threshold (kbps, 0 means no threshold).
        :param int bandwidth_up_threshold: Apply FEC parameters when available up bandwidth is >= threshold (kbps, 0 means no threshold).
        :param int base: Number of base FEC packets (1 - 20).
        :param int latency_threshold: Apply FEC parameters when latency is <= threshold (0 means no threshold).
        :param int packet_loss_threshold: Apply FEC parameters when packet loss is >= threshold (0 - 100, 0 means no threshold).
        :param int redundant: Number of redundant FEC packets (1 - 5).
        :param int seqno: Sequence number (1 - 64).
        """
        if bandwidth_bi_threshold is not None:
            pulumi.set(__self__, "bandwidth_bi_threshold", bandwidth_bi_threshold)
        if bandwidth_down_threshold is not None:
            pulumi.set(__self__, "bandwidth_down_threshold", bandwidth_down_threshold)
        if bandwidth_up_threshold is not None:
            pulumi.set(__self__, "bandwidth_up_threshold", bandwidth_up_threshold)
        if base is not None:
            pulumi.set(__self__, "base", base)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if packet_loss_threshold is not None:
            pulumi.set(__self__, "packet_loss_threshold", packet_loss_threshold)
        if redundant is not None:
            pulumi.set(__self__, "redundant", redundant)
        if seqno is not None:
            pulumi.set(__self__, "seqno", seqno)

    @property
    @pulumi.getter(name="bandwidthBiThreshold")
    def bandwidth_bi_threshold(self) -> Optional[int]:
        """
        Apply FEC parameters when available bi-bandwidth is >= threshold (kbps, 0 means no threshold).
        """
        return pulumi.get(self, "bandwidth_bi_threshold")

    @property
    @pulumi.getter(name="bandwidthDownThreshold")
    def bandwidth_down_threshold(self) -> Optional[int]:
        """
        Apply FEC parameters when available down bandwidth is >= threshold (kbps, 0 means no threshold).
        """
        return pulumi.get(self, "bandwidth_down_threshold")

    @property
    @pulumi.getter(name="bandwidthUpThreshold")
    def bandwidth_up_threshold(self) -> Optional[int]:
        """
        Apply FEC parameters when available up bandwidth is >= threshold (kbps, 0 means no threshold).
        """
        return pulumi.get(self, "bandwidth_up_threshold")

    @property
    @pulumi.getter
    def base(self) -> Optional[int]:
        """
        Number of base FEC packets (1 - 20).
        """
        return pulumi.get(self, "base")

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[int]:
        """
        Apply FEC parameters when latency is <= threshold (0 means no threshold).
        """
        return pulumi.get(self, "latency_threshold")

    @property
    @pulumi.getter(name="packetLossThreshold")
    def packet_loss_threshold(self) -> Optional[int]:
        """
        Apply FEC parameters when packet loss is >= threshold (0 - 100, 0 means no threshold).
        """
        return pulumi.get(self, "packet_loss_threshold")

    @property
    @pulumi.getter
    def redundant(self) -> Optional[int]:
        """
        Number of redundant FEC packets (1 - 5).
        """
        return pulumi.get(self, "redundant")

    @property
    @pulumi.getter
    def seqno(self) -> Optional[int]:
        """
        Sequence number (1 - 64).
        """
        return pulumi.get(self, "seqno")


@pulumi.output_type
class Phase1BackupGateway(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None):
        """
        :param str address: Address of backup gateway.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Address of backup gateway.
        """
        return pulumi.get(self, "address")


@pulumi.output_type
class Phase1Certificate(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Certificate name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Certificate name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class Phase1InternalDomainList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Phase1InternalDomainList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Phase1InternalDomainList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Phase1InternalDomainList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: Optional[str] = None):
        """
        :param str domain_name: Domain name.
               
               The `ipv4_exclude_range` block supports:
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        """
        Domain name.

        The `ipv4_exclude_range` block supports:
        """
        return pulumi.get(self, "domain_name")


@pulumi.output_type
class Phase1Ipv4ExcludeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Phase1Ipv4ExcludeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Phase1Ipv4ExcludeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Phase1Ipv4ExcludeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip: Optional[str] = None):
        """
        :param str end_ip: End of IPv6 exclusive range.
        :param int id: ID.
        :param str start_ip: Start of IPv6 exclusive range.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        """
        End of IPv6 exclusive range.
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        """
        Start of IPv6 exclusive range.
        """
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class Phase1Ipv6ExcludeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Phase1Ipv6ExcludeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Phase1Ipv6ExcludeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Phase1Ipv6ExcludeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip: Optional[str] = None):
        """
        :param str end_ip: End of IPv6 exclusive range.
        :param int id: ID.
        :param str start_ip: Start of IPv6 exclusive range.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        """
        End of IPv6 exclusive range.
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        """
        Start of IPv6 exclusive range.
        """
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class Phase1interfaceBackupGateway(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None):
        """
        :param str address: Address of backup gateway.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Address of backup gateway.
        """
        return pulumi.get(self, "address")


@pulumi.output_type
class Phase1interfaceCertificate(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Certificate name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Certificate name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class Phase1interfaceInternalDomainList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Phase1interfaceInternalDomainList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Phase1interfaceInternalDomainList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Phase1interfaceInternalDomainList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: Optional[str] = None):
        """
        :param str domain_name: Domain name.
               
               The `ipv4_exclude_range` block supports:
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        """
        Domain name.

        The `ipv4_exclude_range` block supports:
        """
        return pulumi.get(self, "domain_name")


@pulumi.output_type
class Phase1interfaceIpv4ExcludeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Phase1interfaceIpv4ExcludeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Phase1interfaceIpv4ExcludeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Phase1interfaceIpv4ExcludeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip: Optional[str] = None):
        """
        :param str end_ip: End of IPv6 exclusive range.
        :param int id: ID.
        :param str start_ip: Start of IPv6 exclusive range.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        """
        End of IPv6 exclusive range.
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        """
        Start of IPv6 exclusive range.
        """
        return pulumi.get(self, "start_ip")


@pulumi.output_type
class Phase1interfaceIpv6ExcludeRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endIp":
            suggest = "end_ip"
        elif key == "startIp":
            suggest = "start_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Phase1interfaceIpv6ExcludeRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Phase1interfaceIpv6ExcludeRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Phase1interfaceIpv6ExcludeRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_ip: Optional[str] = None,
                 id: Optional[int] = None,
                 start_ip: Optional[str] = None):
        """
        :param str end_ip: End of IPv6 exclusive range.
        :param int id: ID.
        :param str start_ip: Start of IPv6 exclusive range.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[str]:
        """
        End of IPv6 exclusive range.
        """
        return pulumi.get(self, "end_ip")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[str]:
        """
        Start of IPv6 exclusive range.
        """
        return pulumi.get(self, "start_ip")


