# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'GetSettingsResult',
    'AwaitableGetSettingsResult',
    'get_settings',
    'get_settings_output',
]

@pulumi.output_type
class GetSettingsResult:
    """
    A collection of values returned by getSettings.
    """
    def __init__(__self__, algorithm=None, auth_session_check_source_ip=None, auth_timeout=None, authentication_rules=None, auto_tunnel_static_route=None, banned_cipher=None, browser_language_detection=None, check_referer=None, ciphersuite=None, client_sigalgs=None, default_portal=None, deflate_compression_level=None, deflate_min_data_size=None, dns_server1=None, dns_server2=None, dns_suffix=None, dtls_heartbeat_fail_count=None, dtls_heartbeat_idle_timeout=None, dtls_heartbeat_interval=None, dtls_hello_timeout=None, dtls_max_proto_ver=None, dtls_min_proto_ver=None, dtls_tunnel=None, dual_stack_mode=None, encode2f_sequence=None, encrypt_and_store_password=None, force_two_factor_auth=None, header_x_forwarded_for=None, hsts_include_subdomains=None, http_compression=None, http_only_cookie=None, http_request_body_timeout=None, http_request_header_timeout=None, https_redirect=None, id=None, idle_timeout=None, ipv6_dns_server1=None, ipv6_dns_server2=None, ipv6_wins_server1=None, ipv6_wins_server2=None, login_attempt_limit=None, login_block_time=None, login_timeout=None, port=None, port_precedence=None, reqclientcert=None, route_source_interface=None, saml_redirect_port=None, server_hostname=None, servercert=None, source_address6_negate=None, source_address6s=None, source_address_negate=None, source_addresses=None, source_interfaces=None, ssl_client_renegotiation=None, ssl_insert_empty_fragment=None, ssl_max_proto_ver=None, ssl_min_proto_ver=None, status=None, tlsv10=None, tlsv11=None, tlsv12=None, tlsv13=None, transform_backward_slashes=None, tunnel_addr_assigned_method=None, tunnel_connect_without_reauth=None, tunnel_ip_pools=None, tunnel_ipv6_pools=None, tunnel_user_session_timeout=None, unsafe_legacy_renegotiation=None, url_obscuration=None, user_peer=None, vdomparam=None, web_mode_snat=None, wins_server1=None, wins_server2=None, x_content_type_options=None, ztna_trusted_client=None):
        if algorithm and not isinstance(algorithm, str):
            raise TypeError("Expected argument 'algorithm' to be a str")
        pulumi.set(__self__, "algorithm", algorithm)
        if auth_session_check_source_ip and not isinstance(auth_session_check_source_ip, str):
            raise TypeError("Expected argument 'auth_session_check_source_ip' to be a str")
        pulumi.set(__self__, "auth_session_check_source_ip", auth_session_check_source_ip)
        if auth_timeout and not isinstance(auth_timeout, int):
            raise TypeError("Expected argument 'auth_timeout' to be a int")
        pulumi.set(__self__, "auth_timeout", auth_timeout)
        if authentication_rules and not isinstance(authentication_rules, list):
            raise TypeError("Expected argument 'authentication_rules' to be a list")
        pulumi.set(__self__, "authentication_rules", authentication_rules)
        if auto_tunnel_static_route and not isinstance(auto_tunnel_static_route, str):
            raise TypeError("Expected argument 'auto_tunnel_static_route' to be a str")
        pulumi.set(__self__, "auto_tunnel_static_route", auto_tunnel_static_route)
        if banned_cipher and not isinstance(banned_cipher, str):
            raise TypeError("Expected argument 'banned_cipher' to be a str")
        pulumi.set(__self__, "banned_cipher", banned_cipher)
        if browser_language_detection and not isinstance(browser_language_detection, str):
            raise TypeError("Expected argument 'browser_language_detection' to be a str")
        pulumi.set(__self__, "browser_language_detection", browser_language_detection)
        if check_referer and not isinstance(check_referer, str):
            raise TypeError("Expected argument 'check_referer' to be a str")
        pulumi.set(__self__, "check_referer", check_referer)
        if ciphersuite and not isinstance(ciphersuite, str):
            raise TypeError("Expected argument 'ciphersuite' to be a str")
        pulumi.set(__self__, "ciphersuite", ciphersuite)
        if client_sigalgs and not isinstance(client_sigalgs, str):
            raise TypeError("Expected argument 'client_sigalgs' to be a str")
        pulumi.set(__self__, "client_sigalgs", client_sigalgs)
        if default_portal and not isinstance(default_portal, str):
            raise TypeError("Expected argument 'default_portal' to be a str")
        pulumi.set(__self__, "default_portal", default_portal)
        if deflate_compression_level and not isinstance(deflate_compression_level, int):
            raise TypeError("Expected argument 'deflate_compression_level' to be a int")
        pulumi.set(__self__, "deflate_compression_level", deflate_compression_level)
        if deflate_min_data_size and not isinstance(deflate_min_data_size, int):
            raise TypeError("Expected argument 'deflate_min_data_size' to be a int")
        pulumi.set(__self__, "deflate_min_data_size", deflate_min_data_size)
        if dns_server1 and not isinstance(dns_server1, str):
            raise TypeError("Expected argument 'dns_server1' to be a str")
        pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 and not isinstance(dns_server2, str):
            raise TypeError("Expected argument 'dns_server2' to be a str")
        pulumi.set(__self__, "dns_server2", dns_server2)
        if dns_suffix and not isinstance(dns_suffix, str):
            raise TypeError("Expected argument 'dns_suffix' to be a str")
        pulumi.set(__self__, "dns_suffix", dns_suffix)
        if dtls_heartbeat_fail_count and not isinstance(dtls_heartbeat_fail_count, int):
            raise TypeError("Expected argument 'dtls_heartbeat_fail_count' to be a int")
        pulumi.set(__self__, "dtls_heartbeat_fail_count", dtls_heartbeat_fail_count)
        if dtls_heartbeat_idle_timeout and not isinstance(dtls_heartbeat_idle_timeout, int):
            raise TypeError("Expected argument 'dtls_heartbeat_idle_timeout' to be a int")
        pulumi.set(__self__, "dtls_heartbeat_idle_timeout", dtls_heartbeat_idle_timeout)
        if dtls_heartbeat_interval and not isinstance(dtls_heartbeat_interval, int):
            raise TypeError("Expected argument 'dtls_heartbeat_interval' to be a int")
        pulumi.set(__self__, "dtls_heartbeat_interval", dtls_heartbeat_interval)
        if dtls_hello_timeout and not isinstance(dtls_hello_timeout, int):
            raise TypeError("Expected argument 'dtls_hello_timeout' to be a int")
        pulumi.set(__self__, "dtls_hello_timeout", dtls_hello_timeout)
        if dtls_max_proto_ver and not isinstance(dtls_max_proto_ver, str):
            raise TypeError("Expected argument 'dtls_max_proto_ver' to be a str")
        pulumi.set(__self__, "dtls_max_proto_ver", dtls_max_proto_ver)
        if dtls_min_proto_ver and not isinstance(dtls_min_proto_ver, str):
            raise TypeError("Expected argument 'dtls_min_proto_ver' to be a str")
        pulumi.set(__self__, "dtls_min_proto_ver", dtls_min_proto_ver)
        if dtls_tunnel and not isinstance(dtls_tunnel, str):
            raise TypeError("Expected argument 'dtls_tunnel' to be a str")
        pulumi.set(__self__, "dtls_tunnel", dtls_tunnel)
        if dual_stack_mode and not isinstance(dual_stack_mode, str):
            raise TypeError("Expected argument 'dual_stack_mode' to be a str")
        pulumi.set(__self__, "dual_stack_mode", dual_stack_mode)
        if encode2f_sequence and not isinstance(encode2f_sequence, str):
            raise TypeError("Expected argument 'encode2f_sequence' to be a str")
        pulumi.set(__self__, "encode2f_sequence", encode2f_sequence)
        if encrypt_and_store_password and not isinstance(encrypt_and_store_password, str):
            raise TypeError("Expected argument 'encrypt_and_store_password' to be a str")
        pulumi.set(__self__, "encrypt_and_store_password", encrypt_and_store_password)
        if force_two_factor_auth and not isinstance(force_two_factor_auth, str):
            raise TypeError("Expected argument 'force_two_factor_auth' to be a str")
        pulumi.set(__self__, "force_two_factor_auth", force_two_factor_auth)
        if header_x_forwarded_for and not isinstance(header_x_forwarded_for, str):
            raise TypeError("Expected argument 'header_x_forwarded_for' to be a str")
        pulumi.set(__self__, "header_x_forwarded_for", header_x_forwarded_for)
        if hsts_include_subdomains and not isinstance(hsts_include_subdomains, str):
            raise TypeError("Expected argument 'hsts_include_subdomains' to be a str")
        pulumi.set(__self__, "hsts_include_subdomains", hsts_include_subdomains)
        if http_compression and not isinstance(http_compression, str):
            raise TypeError("Expected argument 'http_compression' to be a str")
        pulumi.set(__self__, "http_compression", http_compression)
        if http_only_cookie and not isinstance(http_only_cookie, str):
            raise TypeError("Expected argument 'http_only_cookie' to be a str")
        pulumi.set(__self__, "http_only_cookie", http_only_cookie)
        if http_request_body_timeout and not isinstance(http_request_body_timeout, int):
            raise TypeError("Expected argument 'http_request_body_timeout' to be a int")
        pulumi.set(__self__, "http_request_body_timeout", http_request_body_timeout)
        if http_request_header_timeout and not isinstance(http_request_header_timeout, int):
            raise TypeError("Expected argument 'http_request_header_timeout' to be a int")
        pulumi.set(__self__, "http_request_header_timeout", http_request_header_timeout)
        if https_redirect and not isinstance(https_redirect, str):
            raise TypeError("Expected argument 'https_redirect' to be a str")
        pulumi.set(__self__, "https_redirect", https_redirect)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idle_timeout and not isinstance(idle_timeout, int):
            raise TypeError("Expected argument 'idle_timeout' to be a int")
        pulumi.set(__self__, "idle_timeout", idle_timeout)
        if ipv6_dns_server1 and not isinstance(ipv6_dns_server1, str):
            raise TypeError("Expected argument 'ipv6_dns_server1' to be a str")
        pulumi.set(__self__, "ipv6_dns_server1", ipv6_dns_server1)
        if ipv6_dns_server2 and not isinstance(ipv6_dns_server2, str):
            raise TypeError("Expected argument 'ipv6_dns_server2' to be a str")
        pulumi.set(__self__, "ipv6_dns_server2", ipv6_dns_server2)
        if ipv6_wins_server1 and not isinstance(ipv6_wins_server1, str):
            raise TypeError("Expected argument 'ipv6_wins_server1' to be a str")
        pulumi.set(__self__, "ipv6_wins_server1", ipv6_wins_server1)
        if ipv6_wins_server2 and not isinstance(ipv6_wins_server2, str):
            raise TypeError("Expected argument 'ipv6_wins_server2' to be a str")
        pulumi.set(__self__, "ipv6_wins_server2", ipv6_wins_server2)
        if login_attempt_limit and not isinstance(login_attempt_limit, int):
            raise TypeError("Expected argument 'login_attempt_limit' to be a int")
        pulumi.set(__self__, "login_attempt_limit", login_attempt_limit)
        if login_block_time and not isinstance(login_block_time, int):
            raise TypeError("Expected argument 'login_block_time' to be a int")
        pulumi.set(__self__, "login_block_time", login_block_time)
        if login_timeout and not isinstance(login_timeout, int):
            raise TypeError("Expected argument 'login_timeout' to be a int")
        pulumi.set(__self__, "login_timeout", login_timeout)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if port_precedence and not isinstance(port_precedence, str):
            raise TypeError("Expected argument 'port_precedence' to be a str")
        pulumi.set(__self__, "port_precedence", port_precedence)
        if reqclientcert and not isinstance(reqclientcert, str):
            raise TypeError("Expected argument 'reqclientcert' to be a str")
        pulumi.set(__self__, "reqclientcert", reqclientcert)
        if route_source_interface and not isinstance(route_source_interface, str):
            raise TypeError("Expected argument 'route_source_interface' to be a str")
        pulumi.set(__self__, "route_source_interface", route_source_interface)
        if saml_redirect_port and not isinstance(saml_redirect_port, int):
            raise TypeError("Expected argument 'saml_redirect_port' to be a int")
        pulumi.set(__self__, "saml_redirect_port", saml_redirect_port)
        if server_hostname and not isinstance(server_hostname, str):
            raise TypeError("Expected argument 'server_hostname' to be a str")
        pulumi.set(__self__, "server_hostname", server_hostname)
        if servercert and not isinstance(servercert, str):
            raise TypeError("Expected argument 'servercert' to be a str")
        pulumi.set(__self__, "servercert", servercert)
        if source_address6_negate and not isinstance(source_address6_negate, str):
            raise TypeError("Expected argument 'source_address6_negate' to be a str")
        pulumi.set(__self__, "source_address6_negate", source_address6_negate)
        if source_address6s and not isinstance(source_address6s, list):
            raise TypeError("Expected argument 'source_address6s' to be a list")
        pulumi.set(__self__, "source_address6s", source_address6s)
        if source_address_negate and not isinstance(source_address_negate, str):
            raise TypeError("Expected argument 'source_address_negate' to be a str")
        pulumi.set(__self__, "source_address_negate", source_address_negate)
        if source_addresses and not isinstance(source_addresses, list):
            raise TypeError("Expected argument 'source_addresses' to be a list")
        pulumi.set(__self__, "source_addresses", source_addresses)
        if source_interfaces and not isinstance(source_interfaces, list):
            raise TypeError("Expected argument 'source_interfaces' to be a list")
        pulumi.set(__self__, "source_interfaces", source_interfaces)
        if ssl_client_renegotiation and not isinstance(ssl_client_renegotiation, str):
            raise TypeError("Expected argument 'ssl_client_renegotiation' to be a str")
        pulumi.set(__self__, "ssl_client_renegotiation", ssl_client_renegotiation)
        if ssl_insert_empty_fragment and not isinstance(ssl_insert_empty_fragment, str):
            raise TypeError("Expected argument 'ssl_insert_empty_fragment' to be a str")
        pulumi.set(__self__, "ssl_insert_empty_fragment", ssl_insert_empty_fragment)
        if ssl_max_proto_ver and not isinstance(ssl_max_proto_ver, str):
            raise TypeError("Expected argument 'ssl_max_proto_ver' to be a str")
        pulumi.set(__self__, "ssl_max_proto_ver", ssl_max_proto_ver)
        if ssl_min_proto_ver and not isinstance(ssl_min_proto_ver, str):
            raise TypeError("Expected argument 'ssl_min_proto_ver' to be a str")
        pulumi.set(__self__, "ssl_min_proto_ver", ssl_min_proto_ver)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tlsv10 and not isinstance(tlsv10, str):
            raise TypeError("Expected argument 'tlsv10' to be a str")
        pulumi.set(__self__, "tlsv10", tlsv10)
        if tlsv11 and not isinstance(tlsv11, str):
            raise TypeError("Expected argument 'tlsv11' to be a str")
        pulumi.set(__self__, "tlsv11", tlsv11)
        if tlsv12 and not isinstance(tlsv12, str):
            raise TypeError("Expected argument 'tlsv12' to be a str")
        pulumi.set(__self__, "tlsv12", tlsv12)
        if tlsv13 and not isinstance(tlsv13, str):
            raise TypeError("Expected argument 'tlsv13' to be a str")
        pulumi.set(__self__, "tlsv13", tlsv13)
        if transform_backward_slashes and not isinstance(transform_backward_slashes, str):
            raise TypeError("Expected argument 'transform_backward_slashes' to be a str")
        pulumi.set(__self__, "transform_backward_slashes", transform_backward_slashes)
        if tunnel_addr_assigned_method and not isinstance(tunnel_addr_assigned_method, str):
            raise TypeError("Expected argument 'tunnel_addr_assigned_method' to be a str")
        pulumi.set(__self__, "tunnel_addr_assigned_method", tunnel_addr_assigned_method)
        if tunnel_connect_without_reauth and not isinstance(tunnel_connect_without_reauth, str):
            raise TypeError("Expected argument 'tunnel_connect_without_reauth' to be a str")
        pulumi.set(__self__, "tunnel_connect_without_reauth", tunnel_connect_without_reauth)
        if tunnel_ip_pools and not isinstance(tunnel_ip_pools, list):
            raise TypeError("Expected argument 'tunnel_ip_pools' to be a list")
        pulumi.set(__self__, "tunnel_ip_pools", tunnel_ip_pools)
        if tunnel_ipv6_pools and not isinstance(tunnel_ipv6_pools, list):
            raise TypeError("Expected argument 'tunnel_ipv6_pools' to be a list")
        pulumi.set(__self__, "tunnel_ipv6_pools", tunnel_ipv6_pools)
        if tunnel_user_session_timeout and not isinstance(tunnel_user_session_timeout, int):
            raise TypeError("Expected argument 'tunnel_user_session_timeout' to be a int")
        pulumi.set(__self__, "tunnel_user_session_timeout", tunnel_user_session_timeout)
        if unsafe_legacy_renegotiation and not isinstance(unsafe_legacy_renegotiation, str):
            raise TypeError("Expected argument 'unsafe_legacy_renegotiation' to be a str")
        pulumi.set(__self__, "unsafe_legacy_renegotiation", unsafe_legacy_renegotiation)
        if url_obscuration and not isinstance(url_obscuration, str):
            raise TypeError("Expected argument 'url_obscuration' to be a str")
        pulumi.set(__self__, "url_obscuration", url_obscuration)
        if user_peer and not isinstance(user_peer, str):
            raise TypeError("Expected argument 'user_peer' to be a str")
        pulumi.set(__self__, "user_peer", user_peer)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)
        if web_mode_snat and not isinstance(web_mode_snat, str):
            raise TypeError("Expected argument 'web_mode_snat' to be a str")
        pulumi.set(__self__, "web_mode_snat", web_mode_snat)
        if wins_server1 and not isinstance(wins_server1, str):
            raise TypeError("Expected argument 'wins_server1' to be a str")
        pulumi.set(__self__, "wins_server1", wins_server1)
        if wins_server2 and not isinstance(wins_server2, str):
            raise TypeError("Expected argument 'wins_server2' to be a str")
        pulumi.set(__self__, "wins_server2", wins_server2)
        if x_content_type_options and not isinstance(x_content_type_options, str):
            raise TypeError("Expected argument 'x_content_type_options' to be a str")
        pulumi.set(__self__, "x_content_type_options", x_content_type_options)
        if ztna_trusted_client and not isinstance(ztna_trusted_client, str):
            raise TypeError("Expected argument 'ztna_trusted_client' to be a str")
        pulumi.set(__self__, "ztna_trusted_client", ztna_trusted_client)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        """
        Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any.
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="authSessionCheckSourceIp")
    def auth_session_check_source_ip(self) -> str:
        """
        Enable/disable checking of source IP for authentication session.
        """
        return pulumi.get(self, "auth_session_check_source_ip")

    @property
    @pulumi.getter(name="authTimeout")
    def auth_timeout(self) -> int:
        """
        SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
        """
        return pulumi.get(self, "auth_timeout")

    @property
    @pulumi.getter(name="authenticationRules")
    def authentication_rules(self) -> Sequence['outputs.GetSettingsAuthenticationRuleResult']:
        """
        Authentication rule for SSL VPN. The structure of `authentication_rule` block is documented below.
        """
        return pulumi.get(self, "authentication_rules")

    @property
    @pulumi.getter(name="autoTunnelStaticRoute")
    def auto_tunnel_static_route(self) -> str:
        """
        Enable to auto-create static routes for the SSL-VPN tunnel IP addresses.
        """
        return pulumi.get(self, "auto_tunnel_static_route")

    @property
    @pulumi.getter(name="bannedCipher")
    def banned_cipher(self) -> str:
        """
        Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
        """
        return pulumi.get(self, "banned_cipher")

    @property
    @pulumi.getter(name="browserLanguageDetection")
    def browser_language_detection(self) -> str:
        """
        Enable/disable overriding the configured system language based on the preferred language of the browser.
        """
        return pulumi.get(self, "browser_language_detection")

    @property
    @pulumi.getter(name="checkReferer")
    def check_referer(self) -> str:
        """
        Enable/disable verification of referer field in HTTP request header.
        """
        return pulumi.get(self, "check_referer")

    @property
    @pulumi.getter
    def ciphersuite(self) -> str:
        """
        Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below.
        """
        return pulumi.get(self, "ciphersuite")

    @property
    @pulumi.getter(name="clientSigalgs")
    def client_sigalgs(self) -> str:
        """
        Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only.
        """
        return pulumi.get(self, "client_sigalgs")

    @property
    @pulumi.getter(name="defaultPortal")
    def default_portal(self) -> str:
        """
        Default SSL VPN portal.
        """
        return pulumi.get(self, "default_portal")

    @property
    @pulumi.getter(name="deflateCompressionLevel")
    def deflate_compression_level(self) -> int:
        """
        Compression level (0~9).
        """
        return pulumi.get(self, "deflate_compression_level")

    @property
    @pulumi.getter(name="deflateMinDataSize")
    def deflate_min_data_size(self) -> int:
        """
        Minimum amount of data that triggers compression (200 - 65535 bytes).
        """
        return pulumi.get(self, "deflate_min_data_size")

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> str:
        """
        DNS server 1.
        """
        return pulumi.get(self, "dns_server1")

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> str:
        """
        DNS server 2.
        """
        return pulumi.get(self, "dns_server2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> str:
        """
        DNS suffix used for SSL-VPN clients.
        """
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter(name="dtlsHeartbeatFailCount")
    def dtls_heartbeat_fail_count(self) -> int:
        """
        Number of missing heartbeats before the connection is considered dropped.
        """
        return pulumi.get(self, "dtls_heartbeat_fail_count")

    @property
    @pulumi.getter(name="dtlsHeartbeatIdleTimeout")
    def dtls_heartbeat_idle_timeout(self) -> int:
        """
        Idle timeout before DTLS heartbeat is sent.
        """
        return pulumi.get(self, "dtls_heartbeat_idle_timeout")

    @property
    @pulumi.getter(name="dtlsHeartbeatInterval")
    def dtls_heartbeat_interval(self) -> int:
        """
        Interval between DTLS heartbeat.
        """
        return pulumi.get(self, "dtls_heartbeat_interval")

    @property
    @pulumi.getter(name="dtlsHelloTimeout")
    def dtls_hello_timeout(self) -> int:
        """
        SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
        """
        return pulumi.get(self, "dtls_hello_timeout")

    @property
    @pulumi.getter(name="dtlsMaxProtoVer")
    def dtls_max_proto_ver(self) -> str:
        """
        DTLS maximum protocol version.
        """
        return pulumi.get(self, "dtls_max_proto_ver")

    @property
    @pulumi.getter(name="dtlsMinProtoVer")
    def dtls_min_proto_ver(self) -> str:
        """
        DTLS minimum protocol version.
        """
        return pulumi.get(self, "dtls_min_proto_ver")

    @property
    @pulumi.getter(name="dtlsTunnel")
    def dtls_tunnel(self) -> str:
        """
        Enable DTLS to prevent eavesdropping, tampering, or message forgery.
        """
        return pulumi.get(self, "dtls_tunnel")

    @property
    @pulumi.getter(name="dualStackMode")
    def dual_stack_mode(self) -> str:
        """
        Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal.
        """
        return pulumi.get(self, "dual_stack_mode")

    @property
    @pulumi.getter(name="encode2fSequence")
    def encode2f_sequence(self) -> str:
        """
        Encode \\2F sequence to forward slash in URLs.
        """
        return pulumi.get(self, "encode2f_sequence")

    @property
    @pulumi.getter(name="encryptAndStorePassword")
    def encrypt_and_store_password(self) -> str:
        """
        Encrypt and store user passwords for SSL-VPN web sessions.
        """
        return pulumi.get(self, "encrypt_and_store_password")

    @property
    @pulumi.getter(name="forceTwoFactorAuth")
    def force_two_factor_auth(self) -> str:
        """
        Enable to force two-factor authentication for all SSL-VPNs.
        """
        return pulumi.get(self, "force_two_factor_auth")

    @property
    @pulumi.getter(name="headerXForwardedFor")
    def header_x_forwarded_for(self) -> str:
        """
        Forward the same, add, or remove HTTP header.
        """
        return pulumi.get(self, "header_x_forwarded_for")

    @property
    @pulumi.getter(name="hstsIncludeSubdomains")
    def hsts_include_subdomains(self) -> str:
        """
        Add HSTS includeSubDomains response header.
        """
        return pulumi.get(self, "hsts_include_subdomains")

    @property
    @pulumi.getter(name="httpCompression")
    def http_compression(self) -> str:
        """
        Enable to allow HTTP compression over SSL-VPN tunnels.
        """
        return pulumi.get(self, "http_compression")

    @property
    @pulumi.getter(name="httpOnlyCookie")
    def http_only_cookie(self) -> str:
        """
        Enable/disable SSL-VPN support for HttpOnly cookies.
        """
        return pulumi.get(self, "http_only_cookie")

    @property
    @pulumi.getter(name="httpRequestBodyTimeout")
    def http_request_body_timeout(self) -> int:
        """
        SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
        """
        return pulumi.get(self, "http_request_body_timeout")

    @property
    @pulumi.getter(name="httpRequestHeaderTimeout")
    def http_request_header_timeout(self) -> int:
        """
        SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
        """
        return pulumi.get(self, "http_request_header_timeout")

    @property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> str:
        """
        Enable/disable redirect of port 80 to SSL-VPN port.
        """
        return pulumi.get(self, "https_redirect")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> int:
        """
        SSL VPN disconnects if idle for specified time in seconds.
        """
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> str:
        """
        IPv6 DNS server 1.
        """
        return pulumi.get(self, "ipv6_dns_server1")

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> str:
        """
        IPv6 DNS server 2.
        """
        return pulumi.get(self, "ipv6_dns_server2")

    @property
    @pulumi.getter(name="ipv6WinsServer1")
    def ipv6_wins_server1(self) -> str:
        """
        IPv6 WINS server 1.
        """
        return pulumi.get(self, "ipv6_wins_server1")

    @property
    @pulumi.getter(name="ipv6WinsServer2")
    def ipv6_wins_server2(self) -> str:
        """
        IPv6 WINS server 2.
        """
        return pulumi.get(self, "ipv6_wins_server2")

    @property
    @pulumi.getter(name="loginAttemptLimit")
    def login_attempt_limit(self) -> int:
        """
        SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
        """
        return pulumi.get(self, "login_attempt_limit")

    @property
    @pulumi.getter(name="loginBlockTime")
    def login_block_time(self) -> int:
        """
        Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
        """
        return pulumi.get(self, "login_block_time")

    @property
    @pulumi.getter(name="loginTimeout")
    def login_timeout(self) -> int:
        """
        SSLVPN maximum login timeout (10 - 180 sec, default = 30).
        """
        return pulumi.get(self, "login_timeout")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        SSL-VPN access port (1 - 65535).
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portPrecedence")
    def port_precedence(self) -> str:
        """
        Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface.
        """
        return pulumi.get(self, "port_precedence")

    @property
    @pulumi.getter
    def reqclientcert(self) -> str:
        """
        Enable to require client certificates for all SSL-VPN users.
        """
        return pulumi.get(self, "reqclientcert")

    @property
    @pulumi.getter(name="routeSourceInterface")
    def route_source_interface(self) -> str:
        """
        Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface.
        """
        return pulumi.get(self, "route_source_interface")

    @property
    @pulumi.getter(name="samlRedirectPort")
    def saml_redirect_port(self) -> int:
        """
        SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
        """
        return pulumi.get(self, "saml_redirect_port")

    @property
    @pulumi.getter(name="serverHostname")
    def server_hostname(self) -> str:
        """
        Server hostname for HTTPS. When set, will be used for SSL VPN web proxy host header for any redirection.
        """
        return pulumi.get(self, "server_hostname")

    @property
    @pulumi.getter
    def servercert(self) -> str:
        """
        Name of the server certificate to be used for SSL-VPNs.
        """
        return pulumi.get(self, "servercert")

    @property
    @pulumi.getter(name="sourceAddress6Negate")
    def source_address6_negate(self) -> str:
        """
        Enable/disable negated source IPv6 address match.
        """
        return pulumi.get(self, "source_address6_negate")

    @property
    @pulumi.getter(name="sourceAddress6s")
    def source_address6s(self) -> Sequence['outputs.GetSettingsSourceAddress6Result']:
        """
        IPv6 source address of incoming traffic. The structure of `source_address6` block is documented below.
        """
        return pulumi.get(self, "source_address6s")

    @property
    @pulumi.getter(name="sourceAddressNegate")
    def source_address_negate(self) -> str:
        """
        Enable/disable negated source address match.
        """
        return pulumi.get(self, "source_address_negate")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence['outputs.GetSettingsSourceAddressResult']:
        """
        Source address of incoming traffic. The structure of `source_address` block is documented below.
        """
        return pulumi.get(self, "source_addresses")

    @property
    @pulumi.getter(name="sourceInterfaces")
    def source_interfaces(self) -> Sequence['outputs.GetSettingsSourceInterfaceResult']:
        """
        SSL VPN source interface of incoming traffic. The structure of `source_interface` block is documented below.
        """
        return pulumi.get(self, "source_interfaces")

    @property
    @pulumi.getter(name="sslClientRenegotiation")
    def ssl_client_renegotiation(self) -> str:
        """
        Enable to allow client renegotiation by the server if the tunnel goes down.
        """
        return pulumi.get(self, "ssl_client_renegotiation")

    @property
    @pulumi.getter(name="sslInsertEmptyFragment")
    def ssl_insert_empty_fragment(self) -> str:
        """
        Enable/disable insertion of empty fragment.
        """
        return pulumi.get(self, "ssl_insert_empty_fragment")

    @property
    @pulumi.getter(name="sslMaxProtoVer")
    def ssl_max_proto_ver(self) -> str:
        """
        SSL maximum protocol version.
        """
        return pulumi.get(self, "ssl_max_proto_ver")

    @property
    @pulumi.getter(name="sslMinProtoVer")
    def ssl_min_proto_ver(self) -> str:
        """
        SSL minimum protocol version.
        """
        return pulumi.get(self, "ssl_min_proto_ver")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable SSL-VPN.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tlsv10(self) -> str:
        """
        Enable/disable TLSv1.0.
        """
        return pulumi.get(self, "tlsv10")

    @property
    @pulumi.getter
    def tlsv11(self) -> str:
        """
        Enable/disable TLSv1.1.
        """
        return pulumi.get(self, "tlsv11")

    @property
    @pulumi.getter
    def tlsv12(self) -> str:
        """
        Enable/disable TLSv1.2.
        """
        return pulumi.get(self, "tlsv12")

    @property
    @pulumi.getter
    def tlsv13(self) -> str:
        """
        Enable/disable TLSv1.3.
        """
        return pulumi.get(self, "tlsv13")

    @property
    @pulumi.getter(name="transformBackwardSlashes")
    def transform_backward_slashes(self) -> str:
        """
        Transform backward slashes to forward slashes in URLs.
        """
        return pulumi.get(self, "transform_backward_slashes")

    @property
    @pulumi.getter(name="tunnelAddrAssignedMethod")
    def tunnel_addr_assigned_method(self) -> str:
        """
        Method used for assigning address for tunnel.
        """
        return pulumi.get(self, "tunnel_addr_assigned_method")

    @property
    @pulumi.getter(name="tunnelConnectWithoutReauth")
    def tunnel_connect_without_reauth(self) -> str:
        """
        Enable/disable tunnel connection without re-authorization if previous connection dropped.
        """
        return pulumi.get(self, "tunnel_connect_without_reauth")

    @property
    @pulumi.getter(name="tunnelIpPools")
    def tunnel_ip_pools(self) -> Sequence['outputs.GetSettingsTunnelIpPoolResult']:
        """
        Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ip_pools` block is documented below.
        """
        return pulumi.get(self, "tunnel_ip_pools")

    @property
    @pulumi.getter(name="tunnelIpv6Pools")
    def tunnel_ipv6_pools(self) -> Sequence['outputs.GetSettingsTunnelIpv6PoolResult']:
        """
        Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ipv6_pools` block is documented below.
        """
        return pulumi.get(self, "tunnel_ipv6_pools")

    @property
    @pulumi.getter(name="tunnelUserSessionTimeout")
    def tunnel_user_session_timeout(self) -> int:
        """
        Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
        """
        return pulumi.get(self, "tunnel_user_session_timeout")

    @property
    @pulumi.getter(name="unsafeLegacyRenegotiation")
    def unsafe_legacy_renegotiation(self) -> str:
        """
        Enable/disable unsafe legacy re-negotiation.
        """
        return pulumi.get(self, "unsafe_legacy_renegotiation")

    @property
    @pulumi.getter(name="urlObscuration")
    def url_obscuration(self) -> str:
        """
        Enable to obscure the host name of the URL of the web browser display.
        """
        return pulumi.get(self, "url_obscuration")

    @property
    @pulumi.getter(name="userPeer")
    def user_peer(self) -> str:
        """
        Name of user peer.
        """
        return pulumi.get(self, "user_peer")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="webModeSnat")
    def web_mode_snat(self) -> str:
        """
        Enable/disable use of IP pools defined in firewall policy while using web-mode.
        """
        return pulumi.get(self, "web_mode_snat")

    @property
    @pulumi.getter(name="winsServer1")
    def wins_server1(self) -> str:
        """
        WINS server 1.
        """
        return pulumi.get(self, "wins_server1")

    @property
    @pulumi.getter(name="winsServer2")
    def wins_server2(self) -> str:
        """
        WINS server 2.
        """
        return pulumi.get(self, "wins_server2")

    @property
    @pulumi.getter(name="xContentTypeOptions")
    def x_content_type_options(self) -> str:
        """
        Add HTTP X-Content-Type-Options header.
        """
        return pulumi.get(self, "x_content_type_options")

    @property
    @pulumi.getter(name="ztnaTrustedClient")
    def ztna_trusted_client(self) -> str:
        """
        Enable/disable verification of device certificate for SSLVPN ZTNA session.
        """
        return pulumi.get(self, "ztna_trusted_client")


class AwaitableGetSettingsResult(GetSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSettingsResult(
            algorithm=self.algorithm,
            auth_session_check_source_ip=self.auth_session_check_source_ip,
            auth_timeout=self.auth_timeout,
            authentication_rules=self.authentication_rules,
            auto_tunnel_static_route=self.auto_tunnel_static_route,
            banned_cipher=self.banned_cipher,
            browser_language_detection=self.browser_language_detection,
            check_referer=self.check_referer,
            ciphersuite=self.ciphersuite,
            client_sigalgs=self.client_sigalgs,
            default_portal=self.default_portal,
            deflate_compression_level=self.deflate_compression_level,
            deflate_min_data_size=self.deflate_min_data_size,
            dns_server1=self.dns_server1,
            dns_server2=self.dns_server2,
            dns_suffix=self.dns_suffix,
            dtls_heartbeat_fail_count=self.dtls_heartbeat_fail_count,
            dtls_heartbeat_idle_timeout=self.dtls_heartbeat_idle_timeout,
            dtls_heartbeat_interval=self.dtls_heartbeat_interval,
            dtls_hello_timeout=self.dtls_hello_timeout,
            dtls_max_proto_ver=self.dtls_max_proto_ver,
            dtls_min_proto_ver=self.dtls_min_proto_ver,
            dtls_tunnel=self.dtls_tunnel,
            dual_stack_mode=self.dual_stack_mode,
            encode2f_sequence=self.encode2f_sequence,
            encrypt_and_store_password=self.encrypt_and_store_password,
            force_two_factor_auth=self.force_two_factor_auth,
            header_x_forwarded_for=self.header_x_forwarded_for,
            hsts_include_subdomains=self.hsts_include_subdomains,
            http_compression=self.http_compression,
            http_only_cookie=self.http_only_cookie,
            http_request_body_timeout=self.http_request_body_timeout,
            http_request_header_timeout=self.http_request_header_timeout,
            https_redirect=self.https_redirect,
            id=self.id,
            idle_timeout=self.idle_timeout,
            ipv6_dns_server1=self.ipv6_dns_server1,
            ipv6_dns_server2=self.ipv6_dns_server2,
            ipv6_wins_server1=self.ipv6_wins_server1,
            ipv6_wins_server2=self.ipv6_wins_server2,
            login_attempt_limit=self.login_attempt_limit,
            login_block_time=self.login_block_time,
            login_timeout=self.login_timeout,
            port=self.port,
            port_precedence=self.port_precedence,
            reqclientcert=self.reqclientcert,
            route_source_interface=self.route_source_interface,
            saml_redirect_port=self.saml_redirect_port,
            server_hostname=self.server_hostname,
            servercert=self.servercert,
            source_address6_negate=self.source_address6_negate,
            source_address6s=self.source_address6s,
            source_address_negate=self.source_address_negate,
            source_addresses=self.source_addresses,
            source_interfaces=self.source_interfaces,
            ssl_client_renegotiation=self.ssl_client_renegotiation,
            ssl_insert_empty_fragment=self.ssl_insert_empty_fragment,
            ssl_max_proto_ver=self.ssl_max_proto_ver,
            ssl_min_proto_ver=self.ssl_min_proto_ver,
            status=self.status,
            tlsv10=self.tlsv10,
            tlsv11=self.tlsv11,
            tlsv12=self.tlsv12,
            tlsv13=self.tlsv13,
            transform_backward_slashes=self.transform_backward_slashes,
            tunnel_addr_assigned_method=self.tunnel_addr_assigned_method,
            tunnel_connect_without_reauth=self.tunnel_connect_without_reauth,
            tunnel_ip_pools=self.tunnel_ip_pools,
            tunnel_ipv6_pools=self.tunnel_ipv6_pools,
            tunnel_user_session_timeout=self.tunnel_user_session_timeout,
            unsafe_legacy_renegotiation=self.unsafe_legacy_renegotiation,
            url_obscuration=self.url_obscuration,
            user_peer=self.user_peer,
            vdomparam=self.vdomparam,
            web_mode_snat=self.web_mode_snat,
            wins_server1=self.wins_server1,
            wins_server2=self.wins_server2,
            x_content_type_options=self.x_content_type_options,
            ztna_trusted_client=self.ztna_trusted_client)


def get_settings(vdomparam: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSettingsResult:
    """
    Use this data source to get information on fortios vpnssl settings


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:vpn/ssl/getSettings:getSettings', __args__, opts=opts, typ=GetSettingsResult).value

    return AwaitableGetSettingsResult(
        algorithm=pulumi.get(__ret__, 'algorithm'),
        auth_session_check_source_ip=pulumi.get(__ret__, 'auth_session_check_source_ip'),
        auth_timeout=pulumi.get(__ret__, 'auth_timeout'),
        authentication_rules=pulumi.get(__ret__, 'authentication_rules'),
        auto_tunnel_static_route=pulumi.get(__ret__, 'auto_tunnel_static_route'),
        banned_cipher=pulumi.get(__ret__, 'banned_cipher'),
        browser_language_detection=pulumi.get(__ret__, 'browser_language_detection'),
        check_referer=pulumi.get(__ret__, 'check_referer'),
        ciphersuite=pulumi.get(__ret__, 'ciphersuite'),
        client_sigalgs=pulumi.get(__ret__, 'client_sigalgs'),
        default_portal=pulumi.get(__ret__, 'default_portal'),
        deflate_compression_level=pulumi.get(__ret__, 'deflate_compression_level'),
        deflate_min_data_size=pulumi.get(__ret__, 'deflate_min_data_size'),
        dns_server1=pulumi.get(__ret__, 'dns_server1'),
        dns_server2=pulumi.get(__ret__, 'dns_server2'),
        dns_suffix=pulumi.get(__ret__, 'dns_suffix'),
        dtls_heartbeat_fail_count=pulumi.get(__ret__, 'dtls_heartbeat_fail_count'),
        dtls_heartbeat_idle_timeout=pulumi.get(__ret__, 'dtls_heartbeat_idle_timeout'),
        dtls_heartbeat_interval=pulumi.get(__ret__, 'dtls_heartbeat_interval'),
        dtls_hello_timeout=pulumi.get(__ret__, 'dtls_hello_timeout'),
        dtls_max_proto_ver=pulumi.get(__ret__, 'dtls_max_proto_ver'),
        dtls_min_proto_ver=pulumi.get(__ret__, 'dtls_min_proto_ver'),
        dtls_tunnel=pulumi.get(__ret__, 'dtls_tunnel'),
        dual_stack_mode=pulumi.get(__ret__, 'dual_stack_mode'),
        encode2f_sequence=pulumi.get(__ret__, 'encode2f_sequence'),
        encrypt_and_store_password=pulumi.get(__ret__, 'encrypt_and_store_password'),
        force_two_factor_auth=pulumi.get(__ret__, 'force_two_factor_auth'),
        header_x_forwarded_for=pulumi.get(__ret__, 'header_x_forwarded_for'),
        hsts_include_subdomains=pulumi.get(__ret__, 'hsts_include_subdomains'),
        http_compression=pulumi.get(__ret__, 'http_compression'),
        http_only_cookie=pulumi.get(__ret__, 'http_only_cookie'),
        http_request_body_timeout=pulumi.get(__ret__, 'http_request_body_timeout'),
        http_request_header_timeout=pulumi.get(__ret__, 'http_request_header_timeout'),
        https_redirect=pulumi.get(__ret__, 'https_redirect'),
        id=pulumi.get(__ret__, 'id'),
        idle_timeout=pulumi.get(__ret__, 'idle_timeout'),
        ipv6_dns_server1=pulumi.get(__ret__, 'ipv6_dns_server1'),
        ipv6_dns_server2=pulumi.get(__ret__, 'ipv6_dns_server2'),
        ipv6_wins_server1=pulumi.get(__ret__, 'ipv6_wins_server1'),
        ipv6_wins_server2=pulumi.get(__ret__, 'ipv6_wins_server2'),
        login_attempt_limit=pulumi.get(__ret__, 'login_attempt_limit'),
        login_block_time=pulumi.get(__ret__, 'login_block_time'),
        login_timeout=pulumi.get(__ret__, 'login_timeout'),
        port=pulumi.get(__ret__, 'port'),
        port_precedence=pulumi.get(__ret__, 'port_precedence'),
        reqclientcert=pulumi.get(__ret__, 'reqclientcert'),
        route_source_interface=pulumi.get(__ret__, 'route_source_interface'),
        saml_redirect_port=pulumi.get(__ret__, 'saml_redirect_port'),
        server_hostname=pulumi.get(__ret__, 'server_hostname'),
        servercert=pulumi.get(__ret__, 'servercert'),
        source_address6_negate=pulumi.get(__ret__, 'source_address6_negate'),
        source_address6s=pulumi.get(__ret__, 'source_address6s'),
        source_address_negate=pulumi.get(__ret__, 'source_address_negate'),
        source_addresses=pulumi.get(__ret__, 'source_addresses'),
        source_interfaces=pulumi.get(__ret__, 'source_interfaces'),
        ssl_client_renegotiation=pulumi.get(__ret__, 'ssl_client_renegotiation'),
        ssl_insert_empty_fragment=pulumi.get(__ret__, 'ssl_insert_empty_fragment'),
        ssl_max_proto_ver=pulumi.get(__ret__, 'ssl_max_proto_ver'),
        ssl_min_proto_ver=pulumi.get(__ret__, 'ssl_min_proto_ver'),
        status=pulumi.get(__ret__, 'status'),
        tlsv10=pulumi.get(__ret__, 'tlsv10'),
        tlsv11=pulumi.get(__ret__, 'tlsv11'),
        tlsv12=pulumi.get(__ret__, 'tlsv12'),
        tlsv13=pulumi.get(__ret__, 'tlsv13'),
        transform_backward_slashes=pulumi.get(__ret__, 'transform_backward_slashes'),
        tunnel_addr_assigned_method=pulumi.get(__ret__, 'tunnel_addr_assigned_method'),
        tunnel_connect_without_reauth=pulumi.get(__ret__, 'tunnel_connect_without_reauth'),
        tunnel_ip_pools=pulumi.get(__ret__, 'tunnel_ip_pools'),
        tunnel_ipv6_pools=pulumi.get(__ret__, 'tunnel_ipv6_pools'),
        tunnel_user_session_timeout=pulumi.get(__ret__, 'tunnel_user_session_timeout'),
        unsafe_legacy_renegotiation=pulumi.get(__ret__, 'unsafe_legacy_renegotiation'),
        url_obscuration=pulumi.get(__ret__, 'url_obscuration'),
        user_peer=pulumi.get(__ret__, 'user_peer'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'),
        web_mode_snat=pulumi.get(__ret__, 'web_mode_snat'),
        wins_server1=pulumi.get(__ret__, 'wins_server1'),
        wins_server2=pulumi.get(__ret__, 'wins_server2'),
        x_content_type_options=pulumi.get(__ret__, 'x_content_type_options'),
        ztna_trusted_client=pulumi.get(__ret__, 'ztna_trusted_client'))


@_utilities.lift_output_func(get_settings)
def get_settings_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSettingsResult]:
    """
    Use this data source to get information on fortios vpnssl settings


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
