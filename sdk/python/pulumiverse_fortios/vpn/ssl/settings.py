# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SettingsArgs', 'Settings']

@pulumi.input_type
class SettingsArgs:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 auth_session_check_source_ip: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 authentication_rules: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsAuthenticationRuleArgs']]]] = None,
                 auto_tunnel_static_route: Optional[pulumi.Input[str]] = None,
                 banned_cipher: Optional[pulumi.Input[str]] = None,
                 browser_language_detection: Optional[pulumi.Input[str]] = None,
                 check_referer: Optional[pulumi.Input[str]] = None,
                 ciphersuite: Optional[pulumi.Input[str]] = None,
                 client_sigalgs: Optional[pulumi.Input[str]] = None,
                 default_portal: Optional[pulumi.Input[str]] = None,
                 deflate_compression_level: Optional[pulumi.Input[int]] = None,
                 deflate_min_data_size: Optional[pulumi.Input[int]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dtls_heartbeat_fail_count: Optional[pulumi.Input[int]] = None,
                 dtls_heartbeat_idle_timeout: Optional[pulumi.Input[int]] = None,
                 dtls_heartbeat_interval: Optional[pulumi.Input[int]] = None,
                 dtls_hello_timeout: Optional[pulumi.Input[int]] = None,
                 dtls_max_proto_ver: Optional[pulumi.Input[str]] = None,
                 dtls_min_proto_ver: Optional[pulumi.Input[str]] = None,
                 dtls_tunnel: Optional[pulumi.Input[str]] = None,
                 dual_stack_mode: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 encode2f_sequence: Optional[pulumi.Input[str]] = None,
                 encrypt_and_store_password: Optional[pulumi.Input[str]] = None,
                 force_two_factor_auth: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 header_x_forwarded_for: Optional[pulumi.Input[str]] = None,
                 hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
                 http_compression: Optional[pulumi.Input[str]] = None,
                 http_only_cookie: Optional[pulumi.Input[str]] = None,
                 http_request_body_timeout: Optional[pulumi.Input[int]] = None,
                 http_request_header_timeout: Optional[pulumi.Input[int]] = None,
                 https_redirect: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server2: Optional[pulumi.Input[str]] = None,
                 login_attempt_limit: Optional[pulumi.Input[int]] = None,
                 login_block_time: Optional[pulumi.Input[int]] = None,
                 login_timeout: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_precedence: Optional[pulumi.Input[str]] = None,
                 reqclientcert: Optional[pulumi.Input[str]] = None,
                 route_source_interface: Optional[pulumi.Input[str]] = None,
                 saml_redirect_port: Optional[pulumi.Input[int]] = None,
                 server_hostname: Optional[pulumi.Input[str]] = None,
                 servercert: Optional[pulumi.Input[str]] = None,
                 source_address6_negate: Optional[pulumi.Input[str]] = None,
                 source_address6s: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddress6Args']]]] = None,
                 source_address_negate: Optional[pulumi.Input[str]] = None,
                 source_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddressArgs']]]] = None,
                 source_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceInterfaceArgs']]]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_insert_empty_fragment: Optional[pulumi.Input[str]] = None,
                 ssl_max_proto_ver: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_ver: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tlsv10: Optional[pulumi.Input[str]] = None,
                 tlsv11: Optional[pulumi.Input[str]] = None,
                 tlsv12: Optional[pulumi.Input[str]] = None,
                 tlsv13: Optional[pulumi.Input[str]] = None,
                 transform_backward_slashes: Optional[pulumi.Input[str]] = None,
                 tunnel_addr_assigned_method: Optional[pulumi.Input[str]] = None,
                 tunnel_connect_without_reauth: Optional[pulumi.Input[str]] = None,
                 tunnel_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpPoolArgs']]]] = None,
                 tunnel_ipv6_pools: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpv6PoolArgs']]]] = None,
                 tunnel_user_session_timeout: Optional[pulumi.Input[int]] = None,
                 unsafe_legacy_renegotiation: Optional[pulumi.Input[str]] = None,
                 url_obscuration: Optional[pulumi.Input[str]] = None,
                 user_peer: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web_mode_snat: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None,
                 x_content_type_options: Optional[pulumi.Input[str]] = None,
                 ztna_trusted_client: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Settings resource.
        :param pulumi.Input[str] algorithm: Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
        :param pulumi.Input[str] auth_session_check_source_ip: Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_timeout: SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
        :param pulumi.Input[Sequence[pulumi.Input['SettingsAuthenticationRuleArgs']]] authentication_rules: Authentication rule for SSL VPN. The structure of `authentication_rule` block is documented below.
        :param pulumi.Input[str] auto_tunnel_static_route: Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] banned_cipher: Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
        :param pulumi.Input[str] browser_language_detection: Enable/disable overriding the configured system language based on the preferred language of the browser. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] check_referer: Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ciphersuite: Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
        :param pulumi.Input[str] client_sigalgs: Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
        :param pulumi.Input[str] default_portal: Default SSL VPN portal.
        :param pulumi.Input[int] deflate_compression_level: Compression level (0~9).
        :param pulumi.Input[int] deflate_min_data_size: Minimum amount of data that triggers compression (200 - 65535 bytes).
        :param pulumi.Input[str] dns_server1: DNS server 1.
        :param pulumi.Input[str] dns_server2: DNS server 2.
        :param pulumi.Input[str] dns_suffix: DNS suffix used for SSL-VPN clients.
        :param pulumi.Input[int] dtls_heartbeat_fail_count: Number of missing heartbeats before the connection is considered dropped.
        :param pulumi.Input[int] dtls_heartbeat_idle_timeout: Idle timeout before DTLS heartbeat is sent.
        :param pulumi.Input[int] dtls_heartbeat_interval: Interval between DTLS heartbeat.
        :param pulumi.Input[int] dtls_hello_timeout: SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
        :param pulumi.Input[str] dtls_max_proto_ver: DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
        :param pulumi.Input[str] dtls_min_proto_ver: DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
        :param pulumi.Input[str] dtls_tunnel: Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dual_stack_mode: Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] encode2f_sequence: Encode \\2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] encrypt_and_store_password: Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] force_two_factor_auth: Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] header_x_forwarded_for: Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
        :param pulumi.Input[str] hsts_include_subdomains: Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_compression: Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_only_cookie: Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] http_request_body_timeout: SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
        :param pulumi.Input[int] http_request_header_timeout: SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
        :param pulumi.Input[str] https_redirect: Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] idle_timeout: SSL VPN disconnects if idle for specified time in seconds.
        :param pulumi.Input[str] ipv6_dns_server1: IPv6 DNS server 1.
        :param pulumi.Input[str] ipv6_dns_server2: IPv6 DNS server 2.
        :param pulumi.Input[str] ipv6_wins_server1: IPv6 WINS server 1.
        :param pulumi.Input[str] ipv6_wins_server2: IPv6 WINS server 2.
        :param pulumi.Input[int] login_attempt_limit: SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
        :param pulumi.Input[int] login_block_time: Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
        :param pulumi.Input[int] login_timeout: SSLVPN maximum login timeout (10 - 180 sec, default = 30).
        :param pulumi.Input[int] port: SSL-VPN access port (1 - 65535).
        :param pulumi.Input[str] port_precedence: Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] reqclientcert: Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_source_interface: Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] saml_redirect_port: SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
        :param pulumi.Input[str] server_hostname: Server hostname for HTTPS. When set, will be used for SSL VPN web proxy host header for any redirection.
        :param pulumi.Input[str] servercert: Name of the server certificate to be used for SSL-VPNs.
        :param pulumi.Input[str] source_address6_negate: Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddress6Args']]] source_address6s: IPv6 source address of incoming traffic. The structure of `source_address6` block is documented below.
        :param pulumi.Input[str] source_address_negate: Enable/disable negated source address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddressArgs']]] source_addresses: Source address of incoming traffic. The structure of `source_address` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SettingsSourceInterfaceArgs']]] source_interfaces: SSL VPN source interface of incoming traffic. The structure of `source_interface` block is documented below.
        :param pulumi.Input[str] ssl_client_renegotiation: Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssl_insert_empty_fragment: Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_max_proto_ver: SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
        :param pulumi.Input[str] ssl_min_proto_ver: SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
        :param pulumi.Input[str] status: Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv10: Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv11: Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv12: Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv13: Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] transform_backward_slashes: Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_addr_assigned_method: Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
        :param pulumi.Input[str] tunnel_connect_without_reauth: Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpPoolArgs']]] tunnel_ip_pools: Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ip_pools` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpv6PoolArgs']]] tunnel_ipv6_pools: Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ipv6_pools` block is documented below.
        :param pulumi.Input[int] tunnel_user_session_timeout: Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
        :param pulumi.Input[str] unsafe_legacy_renegotiation: Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] url_obscuration: Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] user_peer: Name of user peer.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] web_mode_snat: Enable/disable use of IP pools defined in firewall policy while using web-mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wins_server1: WINS server 1.
        :param pulumi.Input[str] wins_server2: WINS server 2.
        :param pulumi.Input[str] x_content_type_options: Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_trusted_client: Enable/disable verification of device certificate for SSLVPN ZTNA session. Valid values: `enable`, `disable`.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if auth_session_check_source_ip is not None:
            pulumi.set(__self__, "auth_session_check_source_ip", auth_session_check_source_ip)
        if auth_timeout is not None:
            pulumi.set(__self__, "auth_timeout", auth_timeout)
        if authentication_rules is not None:
            pulumi.set(__self__, "authentication_rules", authentication_rules)
        if auto_tunnel_static_route is not None:
            pulumi.set(__self__, "auto_tunnel_static_route", auto_tunnel_static_route)
        if banned_cipher is not None:
            pulumi.set(__self__, "banned_cipher", banned_cipher)
        if browser_language_detection is not None:
            pulumi.set(__self__, "browser_language_detection", browser_language_detection)
        if check_referer is not None:
            pulumi.set(__self__, "check_referer", check_referer)
        if ciphersuite is not None:
            pulumi.set(__self__, "ciphersuite", ciphersuite)
        if client_sigalgs is not None:
            pulumi.set(__self__, "client_sigalgs", client_sigalgs)
        if default_portal is not None:
            pulumi.set(__self__, "default_portal", default_portal)
        if deflate_compression_level is not None:
            pulumi.set(__self__, "deflate_compression_level", deflate_compression_level)
        if deflate_min_data_size is not None:
            pulumi.set(__self__, "deflate_min_data_size", deflate_min_data_size)
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if dtls_heartbeat_fail_count is not None:
            pulumi.set(__self__, "dtls_heartbeat_fail_count", dtls_heartbeat_fail_count)
        if dtls_heartbeat_idle_timeout is not None:
            pulumi.set(__self__, "dtls_heartbeat_idle_timeout", dtls_heartbeat_idle_timeout)
        if dtls_heartbeat_interval is not None:
            pulumi.set(__self__, "dtls_heartbeat_interval", dtls_heartbeat_interval)
        if dtls_hello_timeout is not None:
            pulumi.set(__self__, "dtls_hello_timeout", dtls_hello_timeout)
        if dtls_max_proto_ver is not None:
            pulumi.set(__self__, "dtls_max_proto_ver", dtls_max_proto_ver)
        if dtls_min_proto_ver is not None:
            pulumi.set(__self__, "dtls_min_proto_ver", dtls_min_proto_ver)
        if dtls_tunnel is not None:
            pulumi.set(__self__, "dtls_tunnel", dtls_tunnel)
        if dual_stack_mode is not None:
            pulumi.set(__self__, "dual_stack_mode", dual_stack_mode)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if encode2f_sequence is not None:
            pulumi.set(__self__, "encode2f_sequence", encode2f_sequence)
        if encrypt_and_store_password is not None:
            pulumi.set(__self__, "encrypt_and_store_password", encrypt_and_store_password)
        if force_two_factor_auth is not None:
            pulumi.set(__self__, "force_two_factor_auth", force_two_factor_auth)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if header_x_forwarded_for is not None:
            pulumi.set(__self__, "header_x_forwarded_for", header_x_forwarded_for)
        if hsts_include_subdomains is not None:
            pulumi.set(__self__, "hsts_include_subdomains", hsts_include_subdomains)
        if http_compression is not None:
            pulumi.set(__self__, "http_compression", http_compression)
        if http_only_cookie is not None:
            pulumi.set(__self__, "http_only_cookie", http_only_cookie)
        if http_request_body_timeout is not None:
            pulumi.set(__self__, "http_request_body_timeout", http_request_body_timeout)
        if http_request_header_timeout is not None:
            pulumi.set(__self__, "http_request_header_timeout", http_request_header_timeout)
        if https_redirect is not None:
            pulumi.set(__self__, "https_redirect", https_redirect)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if ipv6_dns_server1 is not None:
            pulumi.set(__self__, "ipv6_dns_server1", ipv6_dns_server1)
        if ipv6_dns_server2 is not None:
            pulumi.set(__self__, "ipv6_dns_server2", ipv6_dns_server2)
        if ipv6_wins_server1 is not None:
            pulumi.set(__self__, "ipv6_wins_server1", ipv6_wins_server1)
        if ipv6_wins_server2 is not None:
            pulumi.set(__self__, "ipv6_wins_server2", ipv6_wins_server2)
        if login_attempt_limit is not None:
            pulumi.set(__self__, "login_attempt_limit", login_attempt_limit)
        if login_block_time is not None:
            pulumi.set(__self__, "login_block_time", login_block_time)
        if login_timeout is not None:
            pulumi.set(__self__, "login_timeout", login_timeout)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_precedence is not None:
            pulumi.set(__self__, "port_precedence", port_precedence)
        if reqclientcert is not None:
            pulumi.set(__self__, "reqclientcert", reqclientcert)
        if route_source_interface is not None:
            pulumi.set(__self__, "route_source_interface", route_source_interface)
        if saml_redirect_port is not None:
            pulumi.set(__self__, "saml_redirect_port", saml_redirect_port)
        if server_hostname is not None:
            pulumi.set(__self__, "server_hostname", server_hostname)
        if servercert is not None:
            pulumi.set(__self__, "servercert", servercert)
        if source_address6_negate is not None:
            pulumi.set(__self__, "source_address6_negate", source_address6_negate)
        if source_address6s is not None:
            pulumi.set(__self__, "source_address6s", source_address6s)
        if source_address_negate is not None:
            pulumi.set(__self__, "source_address_negate", source_address_negate)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)
        if source_interfaces is not None:
            pulumi.set(__self__, "source_interfaces", source_interfaces)
        if ssl_client_renegotiation is not None:
            pulumi.set(__self__, "ssl_client_renegotiation", ssl_client_renegotiation)
        if ssl_insert_empty_fragment is not None:
            pulumi.set(__self__, "ssl_insert_empty_fragment", ssl_insert_empty_fragment)
        if ssl_max_proto_ver is not None:
            pulumi.set(__self__, "ssl_max_proto_ver", ssl_max_proto_ver)
        if ssl_min_proto_ver is not None:
            pulumi.set(__self__, "ssl_min_proto_ver", ssl_min_proto_ver)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tlsv10 is not None:
            pulumi.set(__self__, "tlsv10", tlsv10)
        if tlsv11 is not None:
            pulumi.set(__self__, "tlsv11", tlsv11)
        if tlsv12 is not None:
            pulumi.set(__self__, "tlsv12", tlsv12)
        if tlsv13 is not None:
            pulumi.set(__self__, "tlsv13", tlsv13)
        if transform_backward_slashes is not None:
            pulumi.set(__self__, "transform_backward_slashes", transform_backward_slashes)
        if tunnel_addr_assigned_method is not None:
            pulumi.set(__self__, "tunnel_addr_assigned_method", tunnel_addr_assigned_method)
        if tunnel_connect_without_reauth is not None:
            pulumi.set(__self__, "tunnel_connect_without_reauth", tunnel_connect_without_reauth)
        if tunnel_ip_pools is not None:
            pulumi.set(__self__, "tunnel_ip_pools", tunnel_ip_pools)
        if tunnel_ipv6_pools is not None:
            pulumi.set(__self__, "tunnel_ipv6_pools", tunnel_ipv6_pools)
        if tunnel_user_session_timeout is not None:
            pulumi.set(__self__, "tunnel_user_session_timeout", tunnel_user_session_timeout)
        if unsafe_legacy_renegotiation is not None:
            pulumi.set(__self__, "unsafe_legacy_renegotiation", unsafe_legacy_renegotiation)
        if url_obscuration is not None:
            pulumi.set(__self__, "url_obscuration", url_obscuration)
        if user_peer is not None:
            pulumi.set(__self__, "user_peer", user_peer)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if web_mode_snat is not None:
            pulumi.set(__self__, "web_mode_snat", web_mode_snat)
        if wins_server1 is not None:
            pulumi.set(__self__, "wins_server1", wins_server1)
        if wins_server2 is not None:
            pulumi.set(__self__, "wins_server2", wins_server2)
        if x_content_type_options is not None:
            pulumi.set(__self__, "x_content_type_options", x_content_type_options)
        if ztna_trusted_client is not None:
            pulumi.set(__self__, "ztna_trusted_client", ztna_trusted_client)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="authSessionCheckSourceIp")
    def auth_session_check_source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_session_check_source_ip")

    @auth_session_check_source_ip.setter
    def auth_session_check_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_session_check_source_ip", value)

    @property
    @pulumi.getter(name="authTimeout")
    def auth_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
        """
        return pulumi.get(self, "auth_timeout")

    @auth_timeout.setter
    def auth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_timeout", value)

    @property
    @pulumi.getter(name="authenticationRules")
    def authentication_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingsAuthenticationRuleArgs']]]]:
        """
        Authentication rule for SSL VPN. The structure of `authentication_rule` block is documented below.
        """
        return pulumi.get(self, "authentication_rules")

    @authentication_rules.setter
    def authentication_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsAuthenticationRuleArgs']]]]):
        pulumi.set(self, "authentication_rules", value)

    @property
    @pulumi.getter(name="autoTunnelStaticRoute")
    def auto_tunnel_static_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_tunnel_static_route")

    @auto_tunnel_static_route.setter
    def auto_tunnel_static_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_tunnel_static_route", value)

    @property
    @pulumi.getter(name="bannedCipher")
    def banned_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
        """
        return pulumi.get(self, "banned_cipher")

    @banned_cipher.setter
    def banned_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "banned_cipher", value)

    @property
    @pulumi.getter(name="browserLanguageDetection")
    def browser_language_detection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the configured system language based on the preferred language of the browser. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "browser_language_detection")

    @browser_language_detection.setter
    def browser_language_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "browser_language_detection", value)

    @property
    @pulumi.getter(name="checkReferer")
    def check_referer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_referer")

    @check_referer.setter
    def check_referer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_referer", value)

    @property
    @pulumi.getter
    def ciphersuite(self) -> Optional[pulumi.Input[str]]:
        """
        Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
        """
        return pulumi.get(self, "ciphersuite")

    @ciphersuite.setter
    def ciphersuite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ciphersuite", value)

    @property
    @pulumi.getter(name="clientSigalgs")
    def client_sigalgs(self) -> Optional[pulumi.Input[str]]:
        """
        Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
        """
        return pulumi.get(self, "client_sigalgs")

    @client_sigalgs.setter
    def client_sigalgs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_sigalgs", value)

    @property
    @pulumi.getter(name="defaultPortal")
    def default_portal(self) -> Optional[pulumi.Input[str]]:
        """
        Default SSL VPN portal.
        """
        return pulumi.get(self, "default_portal")

    @default_portal.setter
    def default_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_portal", value)

    @property
    @pulumi.getter(name="deflateCompressionLevel")
    def deflate_compression_level(self) -> Optional[pulumi.Input[int]]:
        """
        Compression level (0~9).
        """
        return pulumi.get(self, "deflate_compression_level")

    @deflate_compression_level.setter
    def deflate_compression_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deflate_compression_level", value)

    @property
    @pulumi.getter(name="deflateMinDataSize")
    def deflate_min_data_size(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum amount of data that triggers compression (200 - 65535 bytes).
        """
        return pulumi.get(self, "deflate_min_data_size")

    @deflate_min_data_size.setter
    def deflate_min_data_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deflate_min_data_size", value)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 1.
        """
        return pulumi.get(self, "dns_server1")

    @dns_server1.setter
    def dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server1", value)

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 2.
        """
        return pulumi.get(self, "dns_server2")

    @dns_server2.setter
    def dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server2", value)

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        DNS suffix used for SSL-VPN clients.
        """
        return pulumi.get(self, "dns_suffix")

    @dns_suffix.setter
    def dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_suffix", value)

    @property
    @pulumi.getter(name="dtlsHeartbeatFailCount")
    def dtls_heartbeat_fail_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of missing heartbeats before the connection is considered dropped.
        """
        return pulumi.get(self, "dtls_heartbeat_fail_count")

    @dtls_heartbeat_fail_count.setter
    def dtls_heartbeat_fail_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtls_heartbeat_fail_count", value)

    @property
    @pulumi.getter(name="dtlsHeartbeatIdleTimeout")
    def dtls_heartbeat_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Idle timeout before DTLS heartbeat is sent.
        """
        return pulumi.get(self, "dtls_heartbeat_idle_timeout")

    @dtls_heartbeat_idle_timeout.setter
    def dtls_heartbeat_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtls_heartbeat_idle_timeout", value)

    @property
    @pulumi.getter(name="dtlsHeartbeatInterval")
    def dtls_heartbeat_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between DTLS heartbeat.
        """
        return pulumi.get(self, "dtls_heartbeat_interval")

    @dtls_heartbeat_interval.setter
    def dtls_heartbeat_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtls_heartbeat_interval", value)

    @property
    @pulumi.getter(name="dtlsHelloTimeout")
    def dtls_hello_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
        """
        return pulumi.get(self, "dtls_hello_timeout")

    @dtls_hello_timeout.setter
    def dtls_hello_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtls_hello_timeout", value)

    @property
    @pulumi.getter(name="dtlsMaxProtoVer")
    def dtls_max_proto_ver(self) -> Optional[pulumi.Input[str]]:
        """
        DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
        """
        return pulumi.get(self, "dtls_max_proto_ver")

    @dtls_max_proto_ver.setter
    def dtls_max_proto_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dtls_max_proto_ver", value)

    @property
    @pulumi.getter(name="dtlsMinProtoVer")
    def dtls_min_proto_ver(self) -> Optional[pulumi.Input[str]]:
        """
        DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
        """
        return pulumi.get(self, "dtls_min_proto_ver")

    @dtls_min_proto_ver.setter
    def dtls_min_proto_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dtls_min_proto_ver", value)

    @property
    @pulumi.getter(name="dtlsTunnel")
    def dtls_tunnel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dtls_tunnel")

    @dtls_tunnel.setter
    def dtls_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dtls_tunnel", value)

    @property
    @pulumi.getter(name="dualStackMode")
    def dual_stack_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dual_stack_mode")

    @dual_stack_mode.setter
    def dual_stack_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dual_stack_mode", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="encode2fSequence")
    def encode2f_sequence(self) -> Optional[pulumi.Input[str]]:
        """
        Encode \\2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "encode2f_sequence")

    @encode2f_sequence.setter
    def encode2f_sequence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encode2f_sequence", value)

    @property
    @pulumi.getter(name="encryptAndStorePassword")
    def encrypt_and_store_password(self) -> Optional[pulumi.Input[str]]:
        """
        Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "encrypt_and_store_password")

    @encrypt_and_store_password.setter
    def encrypt_and_store_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypt_and_store_password", value)

    @property
    @pulumi.getter(name="forceTwoFactorAuth")
    def force_two_factor_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "force_two_factor_auth")

    @force_two_factor_auth.setter
    def force_two_factor_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_two_factor_auth", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="headerXForwardedFor")
    def header_x_forwarded_for(self) -> Optional[pulumi.Input[str]]:
        """
        Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
        """
        return pulumi.get(self, "header_x_forwarded_for")

    @header_x_forwarded_for.setter
    def header_x_forwarded_for(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_x_forwarded_for", value)

    @property
    @pulumi.getter(name="hstsIncludeSubdomains")
    def hsts_include_subdomains(self) -> Optional[pulumi.Input[str]]:
        """
        Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "hsts_include_subdomains")

    @hsts_include_subdomains.setter
    def hsts_include_subdomains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hsts_include_subdomains", value)

    @property
    @pulumi.getter(name="httpCompression")
    def http_compression(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_compression")

    @http_compression.setter
    def http_compression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_compression", value)

    @property
    @pulumi.getter(name="httpOnlyCookie")
    def http_only_cookie(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_only_cookie")

    @http_only_cookie.setter
    def http_only_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_only_cookie", value)

    @property
    @pulumi.getter(name="httpRequestBodyTimeout")
    def http_request_body_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
        """
        return pulumi.get(self, "http_request_body_timeout")

    @http_request_body_timeout.setter
    def http_request_body_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_request_body_timeout", value)

    @property
    @pulumi.getter(name="httpRequestHeaderTimeout")
    def http_request_header_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
        """
        return pulumi.get(self, "http_request_header_timeout")

    @http_request_header_timeout.setter
    def http_request_header_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_request_header_timeout", value)

    @property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "https_redirect")

    @https_redirect.setter
    def https_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_redirect", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        SSL VPN disconnects if idle for specified time in seconds.
        """
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 DNS server 1.
        """
        return pulumi.get(self, "ipv6_dns_server1")

    @ipv6_dns_server1.setter
    def ipv6_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server1", value)

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 DNS server 2.
        """
        return pulumi.get(self, "ipv6_dns_server2")

    @ipv6_dns_server2.setter
    def ipv6_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server2", value)

    @property
    @pulumi.getter(name="ipv6WinsServer1")
    def ipv6_wins_server1(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 WINS server 1.
        """
        return pulumi.get(self, "ipv6_wins_server1")

    @ipv6_wins_server1.setter
    def ipv6_wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_wins_server1", value)

    @property
    @pulumi.getter(name="ipv6WinsServer2")
    def ipv6_wins_server2(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 WINS server 2.
        """
        return pulumi.get(self, "ipv6_wins_server2")

    @ipv6_wins_server2.setter
    def ipv6_wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_wins_server2", value)

    @property
    @pulumi.getter(name="loginAttemptLimit")
    def login_attempt_limit(self) -> Optional[pulumi.Input[int]]:
        """
        SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
        """
        return pulumi.get(self, "login_attempt_limit")

    @login_attempt_limit.setter
    def login_attempt_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "login_attempt_limit", value)

    @property
    @pulumi.getter(name="loginBlockTime")
    def login_block_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
        """
        return pulumi.get(self, "login_block_time")

    @login_block_time.setter
    def login_block_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "login_block_time", value)

    @property
    @pulumi.getter(name="loginTimeout")
    def login_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        SSLVPN maximum login timeout (10 - 180 sec, default = 30).
        """
        return pulumi.get(self, "login_timeout")

    @login_timeout.setter
    def login_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "login_timeout", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        SSL-VPN access port (1 - 65535).
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portPrecedence")
    def port_precedence(self) -> Optional[pulumi.Input[str]]:
        """
        Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "port_precedence")

    @port_precedence.setter
    def port_precedence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_precedence", value)

    @property
    @pulumi.getter
    def reqclientcert(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "reqclientcert")

    @reqclientcert.setter
    def reqclientcert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reqclientcert", value)

    @property
    @pulumi.getter(name="routeSourceInterface")
    def route_source_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_source_interface")

    @route_source_interface.setter
    def route_source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_source_interface", value)

    @property
    @pulumi.getter(name="samlRedirectPort")
    def saml_redirect_port(self) -> Optional[pulumi.Input[int]]:
        """
        SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
        """
        return pulumi.get(self, "saml_redirect_port")

    @saml_redirect_port.setter
    def saml_redirect_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "saml_redirect_port", value)

    @property
    @pulumi.getter(name="serverHostname")
    def server_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Server hostname for HTTPS. When set, will be used for SSL VPN web proxy host header for any redirection.
        """
        return pulumi.get(self, "server_hostname")

    @server_hostname.setter
    def server_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_hostname", value)

    @property
    @pulumi.getter
    def servercert(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the server certificate to be used for SSL-VPNs.
        """
        return pulumi.get(self, "servercert")

    @servercert.setter
    def servercert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "servercert", value)

    @property
    @pulumi.getter(name="sourceAddress6Negate")
    def source_address6_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "source_address6_negate")

    @source_address6_negate.setter
    def source_address6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address6_negate", value)

    @property
    @pulumi.getter(name="sourceAddress6s")
    def source_address6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddress6Args']]]]:
        """
        IPv6 source address of incoming traffic. The structure of `source_address6` block is documented below.
        """
        return pulumi.get(self, "source_address6s")

    @source_address6s.setter
    def source_address6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddress6Args']]]]):
        pulumi.set(self, "source_address6s", value)

    @property
    @pulumi.getter(name="sourceAddressNegate")
    def source_address_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negated source address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "source_address_negate")

    @source_address_negate.setter
    def source_address_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address_negate", value)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddressArgs']]]]:
        """
        Source address of incoming traffic. The structure of `source_address` block is documented below.
        """
        return pulumi.get(self, "source_addresses")

    @source_addresses.setter
    def source_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddressArgs']]]]):
        pulumi.set(self, "source_addresses", value)

    @property
    @pulumi.getter(name="sourceInterfaces")
    def source_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceInterfaceArgs']]]]:
        """
        SSL VPN source interface of incoming traffic. The structure of `source_interface` block is documented below.
        """
        return pulumi.get(self, "source_interfaces")

    @source_interfaces.setter
    def source_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceInterfaceArgs']]]]):
        pulumi.set(self, "source_interfaces", value)

    @property
    @pulumi.getter(name="sslClientRenegotiation")
    def ssl_client_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_client_renegotiation")

    @ssl_client_renegotiation.setter
    def ssl_client_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_renegotiation", value)

    @property
    @pulumi.getter(name="sslInsertEmptyFragment")
    def ssl_insert_empty_fragment(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_insert_empty_fragment")

    @ssl_insert_empty_fragment.setter
    def ssl_insert_empty_fragment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_insert_empty_fragment", value)

    @property
    @pulumi.getter(name="sslMaxProtoVer")
    def ssl_max_proto_ver(self) -> Optional[pulumi.Input[str]]:
        """
        SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
        """
        return pulumi.get(self, "ssl_max_proto_ver")

    @ssl_max_proto_ver.setter
    def ssl_max_proto_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_proto_ver", value)

    @property
    @pulumi.getter(name="sslMinProtoVer")
    def ssl_min_proto_ver(self) -> Optional[pulumi.Input[str]]:
        """
        SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
        """
        return pulumi.get(self, "ssl_min_proto_ver")

    @ssl_min_proto_ver.setter
    def ssl_min_proto_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_proto_ver", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tlsv10(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tlsv10")

    @tlsv10.setter
    def tlsv10(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tlsv10", value)

    @property
    @pulumi.getter
    def tlsv11(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tlsv11")

    @tlsv11.setter
    def tlsv11(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tlsv11", value)

    @property
    @pulumi.getter
    def tlsv12(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tlsv12")

    @tlsv12.setter
    def tlsv12(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tlsv12", value)

    @property
    @pulumi.getter
    def tlsv13(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tlsv13")

    @tlsv13.setter
    def tlsv13(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tlsv13", value)

    @property
    @pulumi.getter(name="transformBackwardSlashes")
    def transform_backward_slashes(self) -> Optional[pulumi.Input[str]]:
        """
        Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "transform_backward_slashes")

    @transform_backward_slashes.setter
    def transform_backward_slashes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transform_backward_slashes", value)

    @property
    @pulumi.getter(name="tunnelAddrAssignedMethod")
    def tunnel_addr_assigned_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
        """
        return pulumi.get(self, "tunnel_addr_assigned_method")

    @tunnel_addr_assigned_method.setter
    def tunnel_addr_assigned_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_addr_assigned_method", value)

    @property
    @pulumi.getter(name="tunnelConnectWithoutReauth")
    def tunnel_connect_without_reauth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tunnel_connect_without_reauth")

    @tunnel_connect_without_reauth.setter
    def tunnel_connect_without_reauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_connect_without_reauth", value)

    @property
    @pulumi.getter(name="tunnelIpPools")
    def tunnel_ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpPoolArgs']]]]:
        """
        Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ip_pools` block is documented below.
        """
        return pulumi.get(self, "tunnel_ip_pools")

    @tunnel_ip_pools.setter
    def tunnel_ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpPoolArgs']]]]):
        pulumi.set(self, "tunnel_ip_pools", value)

    @property
    @pulumi.getter(name="tunnelIpv6Pools")
    def tunnel_ipv6_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpv6PoolArgs']]]]:
        """
        Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ipv6_pools` block is documented below.
        """
        return pulumi.get(self, "tunnel_ipv6_pools")

    @tunnel_ipv6_pools.setter
    def tunnel_ipv6_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpv6PoolArgs']]]]):
        pulumi.set(self, "tunnel_ipv6_pools", value)

    @property
    @pulumi.getter(name="tunnelUserSessionTimeout")
    def tunnel_user_session_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
        """
        return pulumi.get(self, "tunnel_user_session_timeout")

    @tunnel_user_session_timeout.setter
    def tunnel_user_session_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_user_session_timeout", value)

    @property
    @pulumi.getter(name="unsafeLegacyRenegotiation")
    def unsafe_legacy_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "unsafe_legacy_renegotiation")

    @unsafe_legacy_renegotiation.setter
    def unsafe_legacy_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsafe_legacy_renegotiation", value)

    @property
    @pulumi.getter(name="urlObscuration")
    def url_obscuration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "url_obscuration")

    @url_obscuration.setter
    def url_obscuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_obscuration", value)

    @property
    @pulumi.getter(name="userPeer")
    def user_peer(self) -> Optional[pulumi.Input[str]]:
        """
        Name of user peer.
        """
        return pulumi.get(self, "user_peer")

    @user_peer.setter
    def user_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_peer", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="webModeSnat")
    def web_mode_snat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of IP pools defined in firewall policy while using web-mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "web_mode_snat")

    @web_mode_snat.setter
    def web_mode_snat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_mode_snat", value)

    @property
    @pulumi.getter(name="winsServer1")
    def wins_server1(self) -> Optional[pulumi.Input[str]]:
        """
        WINS server 1.
        """
        return pulumi.get(self, "wins_server1")

    @wins_server1.setter
    def wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server1", value)

    @property
    @pulumi.getter(name="winsServer2")
    def wins_server2(self) -> Optional[pulumi.Input[str]]:
        """
        WINS server 2.
        """
        return pulumi.get(self, "wins_server2")

    @wins_server2.setter
    def wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server2", value)

    @property
    @pulumi.getter(name="xContentTypeOptions")
    def x_content_type_options(self) -> Optional[pulumi.Input[str]]:
        """
        Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "x_content_type_options")

    @x_content_type_options.setter
    def x_content_type_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_content_type_options", value)

    @property
    @pulumi.getter(name="ztnaTrustedClient")
    def ztna_trusted_client(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification of device certificate for SSLVPN ZTNA session. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ztna_trusted_client")

    @ztna_trusted_client.setter
    def ztna_trusted_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_trusted_client", value)


@pulumi.input_type
class _SettingsState:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 auth_session_check_source_ip: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 authentication_rules: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsAuthenticationRuleArgs']]]] = None,
                 auto_tunnel_static_route: Optional[pulumi.Input[str]] = None,
                 banned_cipher: Optional[pulumi.Input[str]] = None,
                 browser_language_detection: Optional[pulumi.Input[str]] = None,
                 check_referer: Optional[pulumi.Input[str]] = None,
                 ciphersuite: Optional[pulumi.Input[str]] = None,
                 client_sigalgs: Optional[pulumi.Input[str]] = None,
                 default_portal: Optional[pulumi.Input[str]] = None,
                 deflate_compression_level: Optional[pulumi.Input[int]] = None,
                 deflate_min_data_size: Optional[pulumi.Input[int]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dtls_heartbeat_fail_count: Optional[pulumi.Input[int]] = None,
                 dtls_heartbeat_idle_timeout: Optional[pulumi.Input[int]] = None,
                 dtls_heartbeat_interval: Optional[pulumi.Input[int]] = None,
                 dtls_hello_timeout: Optional[pulumi.Input[int]] = None,
                 dtls_max_proto_ver: Optional[pulumi.Input[str]] = None,
                 dtls_min_proto_ver: Optional[pulumi.Input[str]] = None,
                 dtls_tunnel: Optional[pulumi.Input[str]] = None,
                 dual_stack_mode: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 encode2f_sequence: Optional[pulumi.Input[str]] = None,
                 encrypt_and_store_password: Optional[pulumi.Input[str]] = None,
                 force_two_factor_auth: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 header_x_forwarded_for: Optional[pulumi.Input[str]] = None,
                 hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
                 http_compression: Optional[pulumi.Input[str]] = None,
                 http_only_cookie: Optional[pulumi.Input[str]] = None,
                 http_request_body_timeout: Optional[pulumi.Input[int]] = None,
                 http_request_header_timeout: Optional[pulumi.Input[int]] = None,
                 https_redirect: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server2: Optional[pulumi.Input[str]] = None,
                 login_attempt_limit: Optional[pulumi.Input[int]] = None,
                 login_block_time: Optional[pulumi.Input[int]] = None,
                 login_timeout: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_precedence: Optional[pulumi.Input[str]] = None,
                 reqclientcert: Optional[pulumi.Input[str]] = None,
                 route_source_interface: Optional[pulumi.Input[str]] = None,
                 saml_redirect_port: Optional[pulumi.Input[int]] = None,
                 server_hostname: Optional[pulumi.Input[str]] = None,
                 servercert: Optional[pulumi.Input[str]] = None,
                 source_address6_negate: Optional[pulumi.Input[str]] = None,
                 source_address6s: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddress6Args']]]] = None,
                 source_address_negate: Optional[pulumi.Input[str]] = None,
                 source_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddressArgs']]]] = None,
                 source_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceInterfaceArgs']]]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_insert_empty_fragment: Optional[pulumi.Input[str]] = None,
                 ssl_max_proto_ver: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_ver: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tlsv10: Optional[pulumi.Input[str]] = None,
                 tlsv11: Optional[pulumi.Input[str]] = None,
                 tlsv12: Optional[pulumi.Input[str]] = None,
                 tlsv13: Optional[pulumi.Input[str]] = None,
                 transform_backward_slashes: Optional[pulumi.Input[str]] = None,
                 tunnel_addr_assigned_method: Optional[pulumi.Input[str]] = None,
                 tunnel_connect_without_reauth: Optional[pulumi.Input[str]] = None,
                 tunnel_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpPoolArgs']]]] = None,
                 tunnel_ipv6_pools: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpv6PoolArgs']]]] = None,
                 tunnel_user_session_timeout: Optional[pulumi.Input[int]] = None,
                 unsafe_legacy_renegotiation: Optional[pulumi.Input[str]] = None,
                 url_obscuration: Optional[pulumi.Input[str]] = None,
                 user_peer: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web_mode_snat: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None,
                 x_content_type_options: Optional[pulumi.Input[str]] = None,
                 ztna_trusted_client: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Settings resources.
        :param pulumi.Input[str] algorithm: Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
        :param pulumi.Input[str] auth_session_check_source_ip: Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_timeout: SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
        :param pulumi.Input[Sequence[pulumi.Input['SettingsAuthenticationRuleArgs']]] authentication_rules: Authentication rule for SSL VPN. The structure of `authentication_rule` block is documented below.
        :param pulumi.Input[str] auto_tunnel_static_route: Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] banned_cipher: Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
        :param pulumi.Input[str] browser_language_detection: Enable/disable overriding the configured system language based on the preferred language of the browser. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] check_referer: Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ciphersuite: Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
        :param pulumi.Input[str] client_sigalgs: Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
        :param pulumi.Input[str] default_portal: Default SSL VPN portal.
        :param pulumi.Input[int] deflate_compression_level: Compression level (0~9).
        :param pulumi.Input[int] deflate_min_data_size: Minimum amount of data that triggers compression (200 - 65535 bytes).
        :param pulumi.Input[str] dns_server1: DNS server 1.
        :param pulumi.Input[str] dns_server2: DNS server 2.
        :param pulumi.Input[str] dns_suffix: DNS suffix used for SSL-VPN clients.
        :param pulumi.Input[int] dtls_heartbeat_fail_count: Number of missing heartbeats before the connection is considered dropped.
        :param pulumi.Input[int] dtls_heartbeat_idle_timeout: Idle timeout before DTLS heartbeat is sent.
        :param pulumi.Input[int] dtls_heartbeat_interval: Interval between DTLS heartbeat.
        :param pulumi.Input[int] dtls_hello_timeout: SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
        :param pulumi.Input[str] dtls_max_proto_ver: DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
        :param pulumi.Input[str] dtls_min_proto_ver: DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
        :param pulumi.Input[str] dtls_tunnel: Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dual_stack_mode: Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] encode2f_sequence: Encode \\2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] encrypt_and_store_password: Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] force_two_factor_auth: Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] header_x_forwarded_for: Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
        :param pulumi.Input[str] hsts_include_subdomains: Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_compression: Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_only_cookie: Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] http_request_body_timeout: SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
        :param pulumi.Input[int] http_request_header_timeout: SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
        :param pulumi.Input[str] https_redirect: Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] idle_timeout: SSL VPN disconnects if idle for specified time in seconds.
        :param pulumi.Input[str] ipv6_dns_server1: IPv6 DNS server 1.
        :param pulumi.Input[str] ipv6_dns_server2: IPv6 DNS server 2.
        :param pulumi.Input[str] ipv6_wins_server1: IPv6 WINS server 1.
        :param pulumi.Input[str] ipv6_wins_server2: IPv6 WINS server 2.
        :param pulumi.Input[int] login_attempt_limit: SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
        :param pulumi.Input[int] login_block_time: Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
        :param pulumi.Input[int] login_timeout: SSLVPN maximum login timeout (10 - 180 sec, default = 30).
        :param pulumi.Input[int] port: SSL-VPN access port (1 - 65535).
        :param pulumi.Input[str] port_precedence: Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] reqclientcert: Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_source_interface: Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] saml_redirect_port: SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
        :param pulumi.Input[str] server_hostname: Server hostname for HTTPS. When set, will be used for SSL VPN web proxy host header for any redirection.
        :param pulumi.Input[str] servercert: Name of the server certificate to be used for SSL-VPNs.
        :param pulumi.Input[str] source_address6_negate: Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddress6Args']]] source_address6s: IPv6 source address of incoming traffic. The structure of `source_address6` block is documented below.
        :param pulumi.Input[str] source_address_negate: Enable/disable negated source address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddressArgs']]] source_addresses: Source address of incoming traffic. The structure of `source_address` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SettingsSourceInterfaceArgs']]] source_interfaces: SSL VPN source interface of incoming traffic. The structure of `source_interface` block is documented below.
        :param pulumi.Input[str] ssl_client_renegotiation: Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssl_insert_empty_fragment: Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_max_proto_ver: SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
        :param pulumi.Input[str] ssl_min_proto_ver: SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
        :param pulumi.Input[str] status: Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv10: Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv11: Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv12: Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv13: Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] transform_backward_slashes: Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_addr_assigned_method: Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
        :param pulumi.Input[str] tunnel_connect_without_reauth: Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpPoolArgs']]] tunnel_ip_pools: Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ip_pools` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpv6PoolArgs']]] tunnel_ipv6_pools: Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ipv6_pools` block is documented below.
        :param pulumi.Input[int] tunnel_user_session_timeout: Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
        :param pulumi.Input[str] unsafe_legacy_renegotiation: Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] url_obscuration: Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] user_peer: Name of user peer.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] web_mode_snat: Enable/disable use of IP pools defined in firewall policy while using web-mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wins_server1: WINS server 1.
        :param pulumi.Input[str] wins_server2: WINS server 2.
        :param pulumi.Input[str] x_content_type_options: Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_trusted_client: Enable/disable verification of device certificate for SSLVPN ZTNA session. Valid values: `enable`, `disable`.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if auth_session_check_source_ip is not None:
            pulumi.set(__self__, "auth_session_check_source_ip", auth_session_check_source_ip)
        if auth_timeout is not None:
            pulumi.set(__self__, "auth_timeout", auth_timeout)
        if authentication_rules is not None:
            pulumi.set(__self__, "authentication_rules", authentication_rules)
        if auto_tunnel_static_route is not None:
            pulumi.set(__self__, "auto_tunnel_static_route", auto_tunnel_static_route)
        if banned_cipher is not None:
            pulumi.set(__self__, "banned_cipher", banned_cipher)
        if browser_language_detection is not None:
            pulumi.set(__self__, "browser_language_detection", browser_language_detection)
        if check_referer is not None:
            pulumi.set(__self__, "check_referer", check_referer)
        if ciphersuite is not None:
            pulumi.set(__self__, "ciphersuite", ciphersuite)
        if client_sigalgs is not None:
            pulumi.set(__self__, "client_sigalgs", client_sigalgs)
        if default_portal is not None:
            pulumi.set(__self__, "default_portal", default_portal)
        if deflate_compression_level is not None:
            pulumi.set(__self__, "deflate_compression_level", deflate_compression_level)
        if deflate_min_data_size is not None:
            pulumi.set(__self__, "deflate_min_data_size", deflate_min_data_size)
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if dns_suffix is not None:
            pulumi.set(__self__, "dns_suffix", dns_suffix)
        if dtls_heartbeat_fail_count is not None:
            pulumi.set(__self__, "dtls_heartbeat_fail_count", dtls_heartbeat_fail_count)
        if dtls_heartbeat_idle_timeout is not None:
            pulumi.set(__self__, "dtls_heartbeat_idle_timeout", dtls_heartbeat_idle_timeout)
        if dtls_heartbeat_interval is not None:
            pulumi.set(__self__, "dtls_heartbeat_interval", dtls_heartbeat_interval)
        if dtls_hello_timeout is not None:
            pulumi.set(__self__, "dtls_hello_timeout", dtls_hello_timeout)
        if dtls_max_proto_ver is not None:
            pulumi.set(__self__, "dtls_max_proto_ver", dtls_max_proto_ver)
        if dtls_min_proto_ver is not None:
            pulumi.set(__self__, "dtls_min_proto_ver", dtls_min_proto_ver)
        if dtls_tunnel is not None:
            pulumi.set(__self__, "dtls_tunnel", dtls_tunnel)
        if dual_stack_mode is not None:
            pulumi.set(__self__, "dual_stack_mode", dual_stack_mode)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if encode2f_sequence is not None:
            pulumi.set(__self__, "encode2f_sequence", encode2f_sequence)
        if encrypt_and_store_password is not None:
            pulumi.set(__self__, "encrypt_and_store_password", encrypt_and_store_password)
        if force_two_factor_auth is not None:
            pulumi.set(__self__, "force_two_factor_auth", force_two_factor_auth)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if header_x_forwarded_for is not None:
            pulumi.set(__self__, "header_x_forwarded_for", header_x_forwarded_for)
        if hsts_include_subdomains is not None:
            pulumi.set(__self__, "hsts_include_subdomains", hsts_include_subdomains)
        if http_compression is not None:
            pulumi.set(__self__, "http_compression", http_compression)
        if http_only_cookie is not None:
            pulumi.set(__self__, "http_only_cookie", http_only_cookie)
        if http_request_body_timeout is not None:
            pulumi.set(__self__, "http_request_body_timeout", http_request_body_timeout)
        if http_request_header_timeout is not None:
            pulumi.set(__self__, "http_request_header_timeout", http_request_header_timeout)
        if https_redirect is not None:
            pulumi.set(__self__, "https_redirect", https_redirect)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if ipv6_dns_server1 is not None:
            pulumi.set(__self__, "ipv6_dns_server1", ipv6_dns_server1)
        if ipv6_dns_server2 is not None:
            pulumi.set(__self__, "ipv6_dns_server2", ipv6_dns_server2)
        if ipv6_wins_server1 is not None:
            pulumi.set(__self__, "ipv6_wins_server1", ipv6_wins_server1)
        if ipv6_wins_server2 is not None:
            pulumi.set(__self__, "ipv6_wins_server2", ipv6_wins_server2)
        if login_attempt_limit is not None:
            pulumi.set(__self__, "login_attempt_limit", login_attempt_limit)
        if login_block_time is not None:
            pulumi.set(__self__, "login_block_time", login_block_time)
        if login_timeout is not None:
            pulumi.set(__self__, "login_timeout", login_timeout)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_precedence is not None:
            pulumi.set(__self__, "port_precedence", port_precedence)
        if reqclientcert is not None:
            pulumi.set(__self__, "reqclientcert", reqclientcert)
        if route_source_interface is not None:
            pulumi.set(__self__, "route_source_interface", route_source_interface)
        if saml_redirect_port is not None:
            pulumi.set(__self__, "saml_redirect_port", saml_redirect_port)
        if server_hostname is not None:
            pulumi.set(__self__, "server_hostname", server_hostname)
        if servercert is not None:
            pulumi.set(__self__, "servercert", servercert)
        if source_address6_negate is not None:
            pulumi.set(__self__, "source_address6_negate", source_address6_negate)
        if source_address6s is not None:
            pulumi.set(__self__, "source_address6s", source_address6s)
        if source_address_negate is not None:
            pulumi.set(__self__, "source_address_negate", source_address_negate)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)
        if source_interfaces is not None:
            pulumi.set(__self__, "source_interfaces", source_interfaces)
        if ssl_client_renegotiation is not None:
            pulumi.set(__self__, "ssl_client_renegotiation", ssl_client_renegotiation)
        if ssl_insert_empty_fragment is not None:
            pulumi.set(__self__, "ssl_insert_empty_fragment", ssl_insert_empty_fragment)
        if ssl_max_proto_ver is not None:
            pulumi.set(__self__, "ssl_max_proto_ver", ssl_max_proto_ver)
        if ssl_min_proto_ver is not None:
            pulumi.set(__self__, "ssl_min_proto_ver", ssl_min_proto_ver)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tlsv10 is not None:
            pulumi.set(__self__, "tlsv10", tlsv10)
        if tlsv11 is not None:
            pulumi.set(__self__, "tlsv11", tlsv11)
        if tlsv12 is not None:
            pulumi.set(__self__, "tlsv12", tlsv12)
        if tlsv13 is not None:
            pulumi.set(__self__, "tlsv13", tlsv13)
        if transform_backward_slashes is not None:
            pulumi.set(__self__, "transform_backward_slashes", transform_backward_slashes)
        if tunnel_addr_assigned_method is not None:
            pulumi.set(__self__, "tunnel_addr_assigned_method", tunnel_addr_assigned_method)
        if tunnel_connect_without_reauth is not None:
            pulumi.set(__self__, "tunnel_connect_without_reauth", tunnel_connect_without_reauth)
        if tunnel_ip_pools is not None:
            pulumi.set(__self__, "tunnel_ip_pools", tunnel_ip_pools)
        if tunnel_ipv6_pools is not None:
            pulumi.set(__self__, "tunnel_ipv6_pools", tunnel_ipv6_pools)
        if tunnel_user_session_timeout is not None:
            pulumi.set(__self__, "tunnel_user_session_timeout", tunnel_user_session_timeout)
        if unsafe_legacy_renegotiation is not None:
            pulumi.set(__self__, "unsafe_legacy_renegotiation", unsafe_legacy_renegotiation)
        if url_obscuration is not None:
            pulumi.set(__self__, "url_obscuration", url_obscuration)
        if user_peer is not None:
            pulumi.set(__self__, "user_peer", user_peer)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if web_mode_snat is not None:
            pulumi.set(__self__, "web_mode_snat", web_mode_snat)
        if wins_server1 is not None:
            pulumi.set(__self__, "wins_server1", wins_server1)
        if wins_server2 is not None:
            pulumi.set(__self__, "wins_server2", wins_server2)
        if x_content_type_options is not None:
            pulumi.set(__self__, "x_content_type_options", x_content_type_options)
        if ztna_trusted_client is not None:
            pulumi.set(__self__, "ztna_trusted_client", ztna_trusted_client)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="authSessionCheckSourceIp")
    def auth_session_check_source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_session_check_source_ip")

    @auth_session_check_source_ip.setter
    def auth_session_check_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_session_check_source_ip", value)

    @property
    @pulumi.getter(name="authTimeout")
    def auth_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
        """
        return pulumi.get(self, "auth_timeout")

    @auth_timeout.setter
    def auth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_timeout", value)

    @property
    @pulumi.getter(name="authenticationRules")
    def authentication_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingsAuthenticationRuleArgs']]]]:
        """
        Authentication rule for SSL VPN. The structure of `authentication_rule` block is documented below.
        """
        return pulumi.get(self, "authentication_rules")

    @authentication_rules.setter
    def authentication_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsAuthenticationRuleArgs']]]]):
        pulumi.set(self, "authentication_rules", value)

    @property
    @pulumi.getter(name="autoTunnelStaticRoute")
    def auto_tunnel_static_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_tunnel_static_route")

    @auto_tunnel_static_route.setter
    def auto_tunnel_static_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_tunnel_static_route", value)

    @property
    @pulumi.getter(name="bannedCipher")
    def banned_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
        """
        return pulumi.get(self, "banned_cipher")

    @banned_cipher.setter
    def banned_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "banned_cipher", value)

    @property
    @pulumi.getter(name="browserLanguageDetection")
    def browser_language_detection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the configured system language based on the preferred language of the browser. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "browser_language_detection")

    @browser_language_detection.setter
    def browser_language_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "browser_language_detection", value)

    @property
    @pulumi.getter(name="checkReferer")
    def check_referer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_referer")

    @check_referer.setter
    def check_referer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_referer", value)

    @property
    @pulumi.getter
    def ciphersuite(self) -> Optional[pulumi.Input[str]]:
        """
        Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
        """
        return pulumi.get(self, "ciphersuite")

    @ciphersuite.setter
    def ciphersuite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ciphersuite", value)

    @property
    @pulumi.getter(name="clientSigalgs")
    def client_sigalgs(self) -> Optional[pulumi.Input[str]]:
        """
        Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
        """
        return pulumi.get(self, "client_sigalgs")

    @client_sigalgs.setter
    def client_sigalgs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_sigalgs", value)

    @property
    @pulumi.getter(name="defaultPortal")
    def default_portal(self) -> Optional[pulumi.Input[str]]:
        """
        Default SSL VPN portal.
        """
        return pulumi.get(self, "default_portal")

    @default_portal.setter
    def default_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_portal", value)

    @property
    @pulumi.getter(name="deflateCompressionLevel")
    def deflate_compression_level(self) -> Optional[pulumi.Input[int]]:
        """
        Compression level (0~9).
        """
        return pulumi.get(self, "deflate_compression_level")

    @deflate_compression_level.setter
    def deflate_compression_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deflate_compression_level", value)

    @property
    @pulumi.getter(name="deflateMinDataSize")
    def deflate_min_data_size(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum amount of data that triggers compression (200 - 65535 bytes).
        """
        return pulumi.get(self, "deflate_min_data_size")

    @deflate_min_data_size.setter
    def deflate_min_data_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deflate_min_data_size", value)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 1.
        """
        return pulumi.get(self, "dns_server1")

    @dns_server1.setter
    def dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server1", value)

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 2.
        """
        return pulumi.get(self, "dns_server2")

    @dns_server2.setter
    def dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server2", value)

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        DNS suffix used for SSL-VPN clients.
        """
        return pulumi.get(self, "dns_suffix")

    @dns_suffix.setter
    def dns_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_suffix", value)

    @property
    @pulumi.getter(name="dtlsHeartbeatFailCount")
    def dtls_heartbeat_fail_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of missing heartbeats before the connection is considered dropped.
        """
        return pulumi.get(self, "dtls_heartbeat_fail_count")

    @dtls_heartbeat_fail_count.setter
    def dtls_heartbeat_fail_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtls_heartbeat_fail_count", value)

    @property
    @pulumi.getter(name="dtlsHeartbeatIdleTimeout")
    def dtls_heartbeat_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Idle timeout before DTLS heartbeat is sent.
        """
        return pulumi.get(self, "dtls_heartbeat_idle_timeout")

    @dtls_heartbeat_idle_timeout.setter
    def dtls_heartbeat_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtls_heartbeat_idle_timeout", value)

    @property
    @pulumi.getter(name="dtlsHeartbeatInterval")
    def dtls_heartbeat_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between DTLS heartbeat.
        """
        return pulumi.get(self, "dtls_heartbeat_interval")

    @dtls_heartbeat_interval.setter
    def dtls_heartbeat_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtls_heartbeat_interval", value)

    @property
    @pulumi.getter(name="dtlsHelloTimeout")
    def dtls_hello_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
        """
        return pulumi.get(self, "dtls_hello_timeout")

    @dtls_hello_timeout.setter
    def dtls_hello_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtls_hello_timeout", value)

    @property
    @pulumi.getter(name="dtlsMaxProtoVer")
    def dtls_max_proto_ver(self) -> Optional[pulumi.Input[str]]:
        """
        DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
        """
        return pulumi.get(self, "dtls_max_proto_ver")

    @dtls_max_proto_ver.setter
    def dtls_max_proto_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dtls_max_proto_ver", value)

    @property
    @pulumi.getter(name="dtlsMinProtoVer")
    def dtls_min_proto_ver(self) -> Optional[pulumi.Input[str]]:
        """
        DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
        """
        return pulumi.get(self, "dtls_min_proto_ver")

    @dtls_min_proto_ver.setter
    def dtls_min_proto_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dtls_min_proto_ver", value)

    @property
    @pulumi.getter(name="dtlsTunnel")
    def dtls_tunnel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dtls_tunnel")

    @dtls_tunnel.setter
    def dtls_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dtls_tunnel", value)

    @property
    @pulumi.getter(name="dualStackMode")
    def dual_stack_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dual_stack_mode")

    @dual_stack_mode.setter
    def dual_stack_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dual_stack_mode", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="encode2fSequence")
    def encode2f_sequence(self) -> Optional[pulumi.Input[str]]:
        """
        Encode \\2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "encode2f_sequence")

    @encode2f_sequence.setter
    def encode2f_sequence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encode2f_sequence", value)

    @property
    @pulumi.getter(name="encryptAndStorePassword")
    def encrypt_and_store_password(self) -> Optional[pulumi.Input[str]]:
        """
        Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "encrypt_and_store_password")

    @encrypt_and_store_password.setter
    def encrypt_and_store_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypt_and_store_password", value)

    @property
    @pulumi.getter(name="forceTwoFactorAuth")
    def force_two_factor_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "force_two_factor_auth")

    @force_two_factor_auth.setter
    def force_two_factor_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_two_factor_auth", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="headerXForwardedFor")
    def header_x_forwarded_for(self) -> Optional[pulumi.Input[str]]:
        """
        Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
        """
        return pulumi.get(self, "header_x_forwarded_for")

    @header_x_forwarded_for.setter
    def header_x_forwarded_for(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_x_forwarded_for", value)

    @property
    @pulumi.getter(name="hstsIncludeSubdomains")
    def hsts_include_subdomains(self) -> Optional[pulumi.Input[str]]:
        """
        Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "hsts_include_subdomains")

    @hsts_include_subdomains.setter
    def hsts_include_subdomains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hsts_include_subdomains", value)

    @property
    @pulumi.getter(name="httpCompression")
    def http_compression(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_compression")

    @http_compression.setter
    def http_compression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_compression", value)

    @property
    @pulumi.getter(name="httpOnlyCookie")
    def http_only_cookie(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_only_cookie")

    @http_only_cookie.setter
    def http_only_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_only_cookie", value)

    @property
    @pulumi.getter(name="httpRequestBodyTimeout")
    def http_request_body_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
        """
        return pulumi.get(self, "http_request_body_timeout")

    @http_request_body_timeout.setter
    def http_request_body_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_request_body_timeout", value)

    @property
    @pulumi.getter(name="httpRequestHeaderTimeout")
    def http_request_header_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
        """
        return pulumi.get(self, "http_request_header_timeout")

    @http_request_header_timeout.setter
    def http_request_header_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_request_header_timeout", value)

    @property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "https_redirect")

    @https_redirect.setter
    def https_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_redirect", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        SSL VPN disconnects if idle for specified time in seconds.
        """
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 DNS server 1.
        """
        return pulumi.get(self, "ipv6_dns_server1")

    @ipv6_dns_server1.setter
    def ipv6_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server1", value)

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 DNS server 2.
        """
        return pulumi.get(self, "ipv6_dns_server2")

    @ipv6_dns_server2.setter
    def ipv6_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server2", value)

    @property
    @pulumi.getter(name="ipv6WinsServer1")
    def ipv6_wins_server1(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 WINS server 1.
        """
        return pulumi.get(self, "ipv6_wins_server1")

    @ipv6_wins_server1.setter
    def ipv6_wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_wins_server1", value)

    @property
    @pulumi.getter(name="ipv6WinsServer2")
    def ipv6_wins_server2(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 WINS server 2.
        """
        return pulumi.get(self, "ipv6_wins_server2")

    @ipv6_wins_server2.setter
    def ipv6_wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_wins_server2", value)

    @property
    @pulumi.getter(name="loginAttemptLimit")
    def login_attempt_limit(self) -> Optional[pulumi.Input[int]]:
        """
        SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
        """
        return pulumi.get(self, "login_attempt_limit")

    @login_attempt_limit.setter
    def login_attempt_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "login_attempt_limit", value)

    @property
    @pulumi.getter(name="loginBlockTime")
    def login_block_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
        """
        return pulumi.get(self, "login_block_time")

    @login_block_time.setter
    def login_block_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "login_block_time", value)

    @property
    @pulumi.getter(name="loginTimeout")
    def login_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        SSLVPN maximum login timeout (10 - 180 sec, default = 30).
        """
        return pulumi.get(self, "login_timeout")

    @login_timeout.setter
    def login_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "login_timeout", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        SSL-VPN access port (1 - 65535).
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portPrecedence")
    def port_precedence(self) -> Optional[pulumi.Input[str]]:
        """
        Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "port_precedence")

    @port_precedence.setter
    def port_precedence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_precedence", value)

    @property
    @pulumi.getter
    def reqclientcert(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "reqclientcert")

    @reqclientcert.setter
    def reqclientcert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reqclientcert", value)

    @property
    @pulumi.getter(name="routeSourceInterface")
    def route_source_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_source_interface")

    @route_source_interface.setter
    def route_source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_source_interface", value)

    @property
    @pulumi.getter(name="samlRedirectPort")
    def saml_redirect_port(self) -> Optional[pulumi.Input[int]]:
        """
        SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
        """
        return pulumi.get(self, "saml_redirect_port")

    @saml_redirect_port.setter
    def saml_redirect_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "saml_redirect_port", value)

    @property
    @pulumi.getter(name="serverHostname")
    def server_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Server hostname for HTTPS. When set, will be used for SSL VPN web proxy host header for any redirection.
        """
        return pulumi.get(self, "server_hostname")

    @server_hostname.setter
    def server_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_hostname", value)

    @property
    @pulumi.getter
    def servercert(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the server certificate to be used for SSL-VPNs.
        """
        return pulumi.get(self, "servercert")

    @servercert.setter
    def servercert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "servercert", value)

    @property
    @pulumi.getter(name="sourceAddress6Negate")
    def source_address6_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "source_address6_negate")

    @source_address6_negate.setter
    def source_address6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address6_negate", value)

    @property
    @pulumi.getter(name="sourceAddress6s")
    def source_address6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddress6Args']]]]:
        """
        IPv6 source address of incoming traffic. The structure of `source_address6` block is documented below.
        """
        return pulumi.get(self, "source_address6s")

    @source_address6s.setter
    def source_address6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddress6Args']]]]):
        pulumi.set(self, "source_address6s", value)

    @property
    @pulumi.getter(name="sourceAddressNegate")
    def source_address_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negated source address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "source_address_negate")

    @source_address_negate.setter
    def source_address_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address_negate", value)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddressArgs']]]]:
        """
        Source address of incoming traffic. The structure of `source_address` block is documented below.
        """
        return pulumi.get(self, "source_addresses")

    @source_addresses.setter
    def source_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceAddressArgs']]]]):
        pulumi.set(self, "source_addresses", value)

    @property
    @pulumi.getter(name="sourceInterfaces")
    def source_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceInterfaceArgs']]]]:
        """
        SSL VPN source interface of incoming traffic. The structure of `source_interface` block is documented below.
        """
        return pulumi.get(self, "source_interfaces")

    @source_interfaces.setter
    def source_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsSourceInterfaceArgs']]]]):
        pulumi.set(self, "source_interfaces", value)

    @property
    @pulumi.getter(name="sslClientRenegotiation")
    def ssl_client_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_client_renegotiation")

    @ssl_client_renegotiation.setter
    def ssl_client_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_renegotiation", value)

    @property
    @pulumi.getter(name="sslInsertEmptyFragment")
    def ssl_insert_empty_fragment(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_insert_empty_fragment")

    @ssl_insert_empty_fragment.setter
    def ssl_insert_empty_fragment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_insert_empty_fragment", value)

    @property
    @pulumi.getter(name="sslMaxProtoVer")
    def ssl_max_proto_ver(self) -> Optional[pulumi.Input[str]]:
        """
        SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
        """
        return pulumi.get(self, "ssl_max_proto_ver")

    @ssl_max_proto_ver.setter
    def ssl_max_proto_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_proto_ver", value)

    @property
    @pulumi.getter(name="sslMinProtoVer")
    def ssl_min_proto_ver(self) -> Optional[pulumi.Input[str]]:
        """
        SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
        """
        return pulumi.get(self, "ssl_min_proto_ver")

    @ssl_min_proto_ver.setter
    def ssl_min_proto_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_proto_ver", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tlsv10(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tlsv10")

    @tlsv10.setter
    def tlsv10(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tlsv10", value)

    @property
    @pulumi.getter
    def tlsv11(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tlsv11")

    @tlsv11.setter
    def tlsv11(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tlsv11", value)

    @property
    @pulumi.getter
    def tlsv12(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tlsv12")

    @tlsv12.setter
    def tlsv12(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tlsv12", value)

    @property
    @pulumi.getter
    def tlsv13(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tlsv13")

    @tlsv13.setter
    def tlsv13(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tlsv13", value)

    @property
    @pulumi.getter(name="transformBackwardSlashes")
    def transform_backward_slashes(self) -> Optional[pulumi.Input[str]]:
        """
        Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "transform_backward_slashes")

    @transform_backward_slashes.setter
    def transform_backward_slashes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transform_backward_slashes", value)

    @property
    @pulumi.getter(name="tunnelAddrAssignedMethod")
    def tunnel_addr_assigned_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
        """
        return pulumi.get(self, "tunnel_addr_assigned_method")

    @tunnel_addr_assigned_method.setter
    def tunnel_addr_assigned_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_addr_assigned_method", value)

    @property
    @pulumi.getter(name="tunnelConnectWithoutReauth")
    def tunnel_connect_without_reauth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tunnel_connect_without_reauth")

    @tunnel_connect_without_reauth.setter
    def tunnel_connect_without_reauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_connect_without_reauth", value)

    @property
    @pulumi.getter(name="tunnelIpPools")
    def tunnel_ip_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpPoolArgs']]]]:
        """
        Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ip_pools` block is documented below.
        """
        return pulumi.get(self, "tunnel_ip_pools")

    @tunnel_ip_pools.setter
    def tunnel_ip_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpPoolArgs']]]]):
        pulumi.set(self, "tunnel_ip_pools", value)

    @property
    @pulumi.getter(name="tunnelIpv6Pools")
    def tunnel_ipv6_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpv6PoolArgs']]]]:
        """
        Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ipv6_pools` block is documented below.
        """
        return pulumi.get(self, "tunnel_ipv6_pools")

    @tunnel_ipv6_pools.setter
    def tunnel_ipv6_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingsTunnelIpv6PoolArgs']]]]):
        pulumi.set(self, "tunnel_ipv6_pools", value)

    @property
    @pulumi.getter(name="tunnelUserSessionTimeout")
    def tunnel_user_session_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
        """
        return pulumi.get(self, "tunnel_user_session_timeout")

    @tunnel_user_session_timeout.setter
    def tunnel_user_session_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_user_session_timeout", value)

    @property
    @pulumi.getter(name="unsafeLegacyRenegotiation")
    def unsafe_legacy_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "unsafe_legacy_renegotiation")

    @unsafe_legacy_renegotiation.setter
    def unsafe_legacy_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsafe_legacy_renegotiation", value)

    @property
    @pulumi.getter(name="urlObscuration")
    def url_obscuration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "url_obscuration")

    @url_obscuration.setter
    def url_obscuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_obscuration", value)

    @property
    @pulumi.getter(name="userPeer")
    def user_peer(self) -> Optional[pulumi.Input[str]]:
        """
        Name of user peer.
        """
        return pulumi.get(self, "user_peer")

    @user_peer.setter
    def user_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_peer", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="webModeSnat")
    def web_mode_snat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of IP pools defined in firewall policy while using web-mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "web_mode_snat")

    @web_mode_snat.setter
    def web_mode_snat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_mode_snat", value)

    @property
    @pulumi.getter(name="winsServer1")
    def wins_server1(self) -> Optional[pulumi.Input[str]]:
        """
        WINS server 1.
        """
        return pulumi.get(self, "wins_server1")

    @wins_server1.setter
    def wins_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server1", value)

    @property
    @pulumi.getter(name="winsServer2")
    def wins_server2(self) -> Optional[pulumi.Input[str]]:
        """
        WINS server 2.
        """
        return pulumi.get(self, "wins_server2")

    @wins_server2.setter
    def wins_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wins_server2", value)

    @property
    @pulumi.getter(name="xContentTypeOptions")
    def x_content_type_options(self) -> Optional[pulumi.Input[str]]:
        """
        Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "x_content_type_options")

    @x_content_type_options.setter
    def x_content_type_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_content_type_options", value)

    @property
    @pulumi.getter(name="ztnaTrustedClient")
    def ztna_trusted_client(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification of device certificate for SSLVPN ZTNA session. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ztna_trusted_client")

    @ztna_trusted_client.setter
    def ztna_trusted_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ztna_trusted_client", value)


class Settings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 auth_session_check_source_ip: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 authentication_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsAuthenticationRuleArgs']]]]] = None,
                 auto_tunnel_static_route: Optional[pulumi.Input[str]] = None,
                 banned_cipher: Optional[pulumi.Input[str]] = None,
                 browser_language_detection: Optional[pulumi.Input[str]] = None,
                 check_referer: Optional[pulumi.Input[str]] = None,
                 ciphersuite: Optional[pulumi.Input[str]] = None,
                 client_sigalgs: Optional[pulumi.Input[str]] = None,
                 default_portal: Optional[pulumi.Input[str]] = None,
                 deflate_compression_level: Optional[pulumi.Input[int]] = None,
                 deflate_min_data_size: Optional[pulumi.Input[int]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dtls_heartbeat_fail_count: Optional[pulumi.Input[int]] = None,
                 dtls_heartbeat_idle_timeout: Optional[pulumi.Input[int]] = None,
                 dtls_heartbeat_interval: Optional[pulumi.Input[int]] = None,
                 dtls_hello_timeout: Optional[pulumi.Input[int]] = None,
                 dtls_max_proto_ver: Optional[pulumi.Input[str]] = None,
                 dtls_min_proto_ver: Optional[pulumi.Input[str]] = None,
                 dtls_tunnel: Optional[pulumi.Input[str]] = None,
                 dual_stack_mode: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 encode2f_sequence: Optional[pulumi.Input[str]] = None,
                 encrypt_and_store_password: Optional[pulumi.Input[str]] = None,
                 force_two_factor_auth: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 header_x_forwarded_for: Optional[pulumi.Input[str]] = None,
                 hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
                 http_compression: Optional[pulumi.Input[str]] = None,
                 http_only_cookie: Optional[pulumi.Input[str]] = None,
                 http_request_body_timeout: Optional[pulumi.Input[int]] = None,
                 http_request_header_timeout: Optional[pulumi.Input[int]] = None,
                 https_redirect: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server2: Optional[pulumi.Input[str]] = None,
                 login_attempt_limit: Optional[pulumi.Input[int]] = None,
                 login_block_time: Optional[pulumi.Input[int]] = None,
                 login_timeout: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_precedence: Optional[pulumi.Input[str]] = None,
                 reqclientcert: Optional[pulumi.Input[str]] = None,
                 route_source_interface: Optional[pulumi.Input[str]] = None,
                 saml_redirect_port: Optional[pulumi.Input[int]] = None,
                 server_hostname: Optional[pulumi.Input[str]] = None,
                 servercert: Optional[pulumi.Input[str]] = None,
                 source_address6_negate: Optional[pulumi.Input[str]] = None,
                 source_address6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceAddress6Args']]]]] = None,
                 source_address_negate: Optional[pulumi.Input[str]] = None,
                 source_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceAddressArgs']]]]] = None,
                 source_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceInterfaceArgs']]]]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_insert_empty_fragment: Optional[pulumi.Input[str]] = None,
                 ssl_max_proto_ver: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_ver: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tlsv10: Optional[pulumi.Input[str]] = None,
                 tlsv11: Optional[pulumi.Input[str]] = None,
                 tlsv12: Optional[pulumi.Input[str]] = None,
                 tlsv13: Optional[pulumi.Input[str]] = None,
                 transform_backward_slashes: Optional[pulumi.Input[str]] = None,
                 tunnel_addr_assigned_method: Optional[pulumi.Input[str]] = None,
                 tunnel_connect_without_reauth: Optional[pulumi.Input[str]] = None,
                 tunnel_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsTunnelIpPoolArgs']]]]] = None,
                 tunnel_ipv6_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsTunnelIpv6PoolArgs']]]]] = None,
                 tunnel_user_session_timeout: Optional[pulumi.Input[int]] = None,
                 unsafe_legacy_renegotiation: Optional[pulumi.Input[str]] = None,
                 url_obscuration: Optional[pulumi.Input[str]] = None,
                 user_peer: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web_mode_snat: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None,
                 x_content_type_options: Optional[pulumi.Input[str]] = None,
                 ztna_trusted_client: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure SSL VPN.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.vpn.ssl.Settings("trname",
            login_attempt_limit=2,
            login_block_time=60,
            login_timeout=30,
            port=443,
            servercert="self-sign")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        VpnSsl Settings can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:vpn/ssl/settings:Settings labelname VpnSslSettings
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:vpn/ssl/settings:Settings labelname VpnSslSettings
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
        :param pulumi.Input[str] auth_session_check_source_ip: Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_timeout: SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsAuthenticationRuleArgs']]]] authentication_rules: Authentication rule for SSL VPN. The structure of `authentication_rule` block is documented below.
        :param pulumi.Input[str] auto_tunnel_static_route: Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] banned_cipher: Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
        :param pulumi.Input[str] browser_language_detection: Enable/disable overriding the configured system language based on the preferred language of the browser. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] check_referer: Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ciphersuite: Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
        :param pulumi.Input[str] client_sigalgs: Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
        :param pulumi.Input[str] default_portal: Default SSL VPN portal.
        :param pulumi.Input[int] deflate_compression_level: Compression level (0~9).
        :param pulumi.Input[int] deflate_min_data_size: Minimum amount of data that triggers compression (200 - 65535 bytes).
        :param pulumi.Input[str] dns_server1: DNS server 1.
        :param pulumi.Input[str] dns_server2: DNS server 2.
        :param pulumi.Input[str] dns_suffix: DNS suffix used for SSL-VPN clients.
        :param pulumi.Input[int] dtls_heartbeat_fail_count: Number of missing heartbeats before the connection is considered dropped.
        :param pulumi.Input[int] dtls_heartbeat_idle_timeout: Idle timeout before DTLS heartbeat is sent.
        :param pulumi.Input[int] dtls_heartbeat_interval: Interval between DTLS heartbeat.
        :param pulumi.Input[int] dtls_hello_timeout: SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
        :param pulumi.Input[str] dtls_max_proto_ver: DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
        :param pulumi.Input[str] dtls_min_proto_ver: DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
        :param pulumi.Input[str] dtls_tunnel: Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dual_stack_mode: Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] encode2f_sequence: Encode \\2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] encrypt_and_store_password: Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] force_two_factor_auth: Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] header_x_forwarded_for: Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
        :param pulumi.Input[str] hsts_include_subdomains: Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_compression: Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_only_cookie: Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] http_request_body_timeout: SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
        :param pulumi.Input[int] http_request_header_timeout: SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
        :param pulumi.Input[str] https_redirect: Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] idle_timeout: SSL VPN disconnects if idle for specified time in seconds.
        :param pulumi.Input[str] ipv6_dns_server1: IPv6 DNS server 1.
        :param pulumi.Input[str] ipv6_dns_server2: IPv6 DNS server 2.
        :param pulumi.Input[str] ipv6_wins_server1: IPv6 WINS server 1.
        :param pulumi.Input[str] ipv6_wins_server2: IPv6 WINS server 2.
        :param pulumi.Input[int] login_attempt_limit: SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
        :param pulumi.Input[int] login_block_time: Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
        :param pulumi.Input[int] login_timeout: SSLVPN maximum login timeout (10 - 180 sec, default = 30).
        :param pulumi.Input[int] port: SSL-VPN access port (1 - 65535).
        :param pulumi.Input[str] port_precedence: Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] reqclientcert: Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_source_interface: Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] saml_redirect_port: SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
        :param pulumi.Input[str] server_hostname: Server hostname for HTTPS. When set, will be used for SSL VPN web proxy host header for any redirection.
        :param pulumi.Input[str] servercert: Name of the server certificate to be used for SSL-VPNs.
        :param pulumi.Input[str] source_address6_negate: Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceAddress6Args']]]] source_address6s: IPv6 source address of incoming traffic. The structure of `source_address6` block is documented below.
        :param pulumi.Input[str] source_address_negate: Enable/disable negated source address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceAddressArgs']]]] source_addresses: Source address of incoming traffic. The structure of `source_address` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceInterfaceArgs']]]] source_interfaces: SSL VPN source interface of incoming traffic. The structure of `source_interface` block is documented below.
        :param pulumi.Input[str] ssl_client_renegotiation: Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssl_insert_empty_fragment: Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_max_proto_ver: SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
        :param pulumi.Input[str] ssl_min_proto_ver: SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
        :param pulumi.Input[str] status: Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv10: Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv11: Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv12: Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv13: Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] transform_backward_slashes: Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_addr_assigned_method: Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
        :param pulumi.Input[str] tunnel_connect_without_reauth: Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsTunnelIpPoolArgs']]]] tunnel_ip_pools: Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ip_pools` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsTunnelIpv6PoolArgs']]]] tunnel_ipv6_pools: Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ipv6_pools` block is documented below.
        :param pulumi.Input[int] tunnel_user_session_timeout: Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
        :param pulumi.Input[str] unsafe_legacy_renegotiation: Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] url_obscuration: Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] user_peer: Name of user peer.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] web_mode_snat: Enable/disable use of IP pools defined in firewall policy while using web-mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wins_server1: WINS server 1.
        :param pulumi.Input[str] wins_server2: WINS server 2.
        :param pulumi.Input[str] x_content_type_options: Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_trusted_client: Enable/disable verification of device certificate for SSLVPN ZTNA session. Valid values: `enable`, `disable`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure SSL VPN.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.vpn.ssl.Settings("trname",
            login_attempt_limit=2,
            login_block_time=60,
            login_timeout=30,
            port=443,
            servercert="self-sign")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        VpnSsl Settings can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:vpn/ssl/settings:Settings labelname VpnSslSettings
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:vpn/ssl/settings:Settings labelname VpnSslSettings
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 auth_session_check_source_ip: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 authentication_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsAuthenticationRuleArgs']]]]] = None,
                 auto_tunnel_static_route: Optional[pulumi.Input[str]] = None,
                 banned_cipher: Optional[pulumi.Input[str]] = None,
                 browser_language_detection: Optional[pulumi.Input[str]] = None,
                 check_referer: Optional[pulumi.Input[str]] = None,
                 ciphersuite: Optional[pulumi.Input[str]] = None,
                 client_sigalgs: Optional[pulumi.Input[str]] = None,
                 default_portal: Optional[pulumi.Input[str]] = None,
                 deflate_compression_level: Optional[pulumi.Input[int]] = None,
                 deflate_min_data_size: Optional[pulumi.Input[int]] = None,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 dns_suffix: Optional[pulumi.Input[str]] = None,
                 dtls_heartbeat_fail_count: Optional[pulumi.Input[int]] = None,
                 dtls_heartbeat_idle_timeout: Optional[pulumi.Input[int]] = None,
                 dtls_heartbeat_interval: Optional[pulumi.Input[int]] = None,
                 dtls_hello_timeout: Optional[pulumi.Input[int]] = None,
                 dtls_max_proto_ver: Optional[pulumi.Input[str]] = None,
                 dtls_min_proto_ver: Optional[pulumi.Input[str]] = None,
                 dtls_tunnel: Optional[pulumi.Input[str]] = None,
                 dual_stack_mode: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 encode2f_sequence: Optional[pulumi.Input[str]] = None,
                 encrypt_and_store_password: Optional[pulumi.Input[str]] = None,
                 force_two_factor_auth: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 header_x_forwarded_for: Optional[pulumi.Input[str]] = None,
                 hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
                 http_compression: Optional[pulumi.Input[str]] = None,
                 http_only_cookie: Optional[pulumi.Input[str]] = None,
                 http_request_body_timeout: Optional[pulumi.Input[int]] = None,
                 http_request_header_timeout: Optional[pulumi.Input[int]] = None,
                 https_redirect: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_wins_server2: Optional[pulumi.Input[str]] = None,
                 login_attempt_limit: Optional[pulumi.Input[int]] = None,
                 login_block_time: Optional[pulumi.Input[int]] = None,
                 login_timeout: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_precedence: Optional[pulumi.Input[str]] = None,
                 reqclientcert: Optional[pulumi.Input[str]] = None,
                 route_source_interface: Optional[pulumi.Input[str]] = None,
                 saml_redirect_port: Optional[pulumi.Input[int]] = None,
                 server_hostname: Optional[pulumi.Input[str]] = None,
                 servercert: Optional[pulumi.Input[str]] = None,
                 source_address6_negate: Optional[pulumi.Input[str]] = None,
                 source_address6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceAddress6Args']]]]] = None,
                 source_address_negate: Optional[pulumi.Input[str]] = None,
                 source_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceAddressArgs']]]]] = None,
                 source_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceInterfaceArgs']]]]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_insert_empty_fragment: Optional[pulumi.Input[str]] = None,
                 ssl_max_proto_ver: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_ver: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tlsv10: Optional[pulumi.Input[str]] = None,
                 tlsv11: Optional[pulumi.Input[str]] = None,
                 tlsv12: Optional[pulumi.Input[str]] = None,
                 tlsv13: Optional[pulumi.Input[str]] = None,
                 transform_backward_slashes: Optional[pulumi.Input[str]] = None,
                 tunnel_addr_assigned_method: Optional[pulumi.Input[str]] = None,
                 tunnel_connect_without_reauth: Optional[pulumi.Input[str]] = None,
                 tunnel_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsTunnelIpPoolArgs']]]]] = None,
                 tunnel_ipv6_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsTunnelIpv6PoolArgs']]]]] = None,
                 tunnel_user_session_timeout: Optional[pulumi.Input[int]] = None,
                 unsafe_legacy_renegotiation: Optional[pulumi.Input[str]] = None,
                 url_obscuration: Optional[pulumi.Input[str]] = None,
                 user_peer: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 web_mode_snat: Optional[pulumi.Input[str]] = None,
                 wins_server1: Optional[pulumi.Input[str]] = None,
                 wins_server2: Optional[pulumi.Input[str]] = None,
                 x_content_type_options: Optional[pulumi.Input[str]] = None,
                 ztna_trusted_client: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingsArgs.__new__(SettingsArgs)

            __props__.__dict__["algorithm"] = algorithm
            __props__.__dict__["auth_session_check_source_ip"] = auth_session_check_source_ip
            __props__.__dict__["auth_timeout"] = auth_timeout
            __props__.__dict__["authentication_rules"] = authentication_rules
            __props__.__dict__["auto_tunnel_static_route"] = auto_tunnel_static_route
            __props__.__dict__["banned_cipher"] = banned_cipher
            __props__.__dict__["browser_language_detection"] = browser_language_detection
            __props__.__dict__["check_referer"] = check_referer
            __props__.__dict__["ciphersuite"] = ciphersuite
            __props__.__dict__["client_sigalgs"] = client_sigalgs
            __props__.__dict__["default_portal"] = default_portal
            __props__.__dict__["deflate_compression_level"] = deflate_compression_level
            __props__.__dict__["deflate_min_data_size"] = deflate_min_data_size
            __props__.__dict__["dns_server1"] = dns_server1
            __props__.__dict__["dns_server2"] = dns_server2
            __props__.__dict__["dns_suffix"] = dns_suffix
            __props__.__dict__["dtls_heartbeat_fail_count"] = dtls_heartbeat_fail_count
            __props__.__dict__["dtls_heartbeat_idle_timeout"] = dtls_heartbeat_idle_timeout
            __props__.__dict__["dtls_heartbeat_interval"] = dtls_heartbeat_interval
            __props__.__dict__["dtls_hello_timeout"] = dtls_hello_timeout
            __props__.__dict__["dtls_max_proto_ver"] = dtls_max_proto_ver
            __props__.__dict__["dtls_min_proto_ver"] = dtls_min_proto_ver
            __props__.__dict__["dtls_tunnel"] = dtls_tunnel
            __props__.__dict__["dual_stack_mode"] = dual_stack_mode
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["encode2f_sequence"] = encode2f_sequence
            __props__.__dict__["encrypt_and_store_password"] = encrypt_and_store_password
            __props__.__dict__["force_two_factor_auth"] = force_two_factor_auth
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["header_x_forwarded_for"] = header_x_forwarded_for
            __props__.__dict__["hsts_include_subdomains"] = hsts_include_subdomains
            __props__.__dict__["http_compression"] = http_compression
            __props__.__dict__["http_only_cookie"] = http_only_cookie
            __props__.__dict__["http_request_body_timeout"] = http_request_body_timeout
            __props__.__dict__["http_request_header_timeout"] = http_request_header_timeout
            __props__.__dict__["https_redirect"] = https_redirect
            __props__.__dict__["idle_timeout"] = idle_timeout
            __props__.__dict__["ipv6_dns_server1"] = ipv6_dns_server1
            __props__.__dict__["ipv6_dns_server2"] = ipv6_dns_server2
            __props__.__dict__["ipv6_wins_server1"] = ipv6_wins_server1
            __props__.__dict__["ipv6_wins_server2"] = ipv6_wins_server2
            __props__.__dict__["login_attempt_limit"] = login_attempt_limit
            __props__.__dict__["login_block_time"] = login_block_time
            __props__.__dict__["login_timeout"] = login_timeout
            __props__.__dict__["port"] = port
            __props__.__dict__["port_precedence"] = port_precedence
            __props__.__dict__["reqclientcert"] = reqclientcert
            __props__.__dict__["route_source_interface"] = route_source_interface
            __props__.__dict__["saml_redirect_port"] = saml_redirect_port
            __props__.__dict__["server_hostname"] = server_hostname
            __props__.__dict__["servercert"] = servercert
            __props__.__dict__["source_address6_negate"] = source_address6_negate
            __props__.__dict__["source_address6s"] = source_address6s
            __props__.__dict__["source_address_negate"] = source_address_negate
            __props__.__dict__["source_addresses"] = source_addresses
            __props__.__dict__["source_interfaces"] = source_interfaces
            __props__.__dict__["ssl_client_renegotiation"] = ssl_client_renegotiation
            __props__.__dict__["ssl_insert_empty_fragment"] = ssl_insert_empty_fragment
            __props__.__dict__["ssl_max_proto_ver"] = ssl_max_proto_ver
            __props__.__dict__["ssl_min_proto_ver"] = ssl_min_proto_ver
            __props__.__dict__["status"] = status
            __props__.__dict__["tlsv10"] = tlsv10
            __props__.__dict__["tlsv11"] = tlsv11
            __props__.__dict__["tlsv12"] = tlsv12
            __props__.__dict__["tlsv13"] = tlsv13
            __props__.__dict__["transform_backward_slashes"] = transform_backward_slashes
            __props__.__dict__["tunnel_addr_assigned_method"] = tunnel_addr_assigned_method
            __props__.__dict__["tunnel_connect_without_reauth"] = tunnel_connect_without_reauth
            __props__.__dict__["tunnel_ip_pools"] = tunnel_ip_pools
            __props__.__dict__["tunnel_ipv6_pools"] = tunnel_ipv6_pools
            __props__.__dict__["tunnel_user_session_timeout"] = tunnel_user_session_timeout
            __props__.__dict__["unsafe_legacy_renegotiation"] = unsafe_legacy_renegotiation
            __props__.__dict__["url_obscuration"] = url_obscuration
            __props__.__dict__["user_peer"] = user_peer
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["web_mode_snat"] = web_mode_snat
            __props__.__dict__["wins_server1"] = wins_server1
            __props__.__dict__["wins_server2"] = wins_server2
            __props__.__dict__["x_content_type_options"] = x_content_type_options
            __props__.__dict__["ztna_trusted_client"] = ztna_trusted_client
        super(Settings, __self__).__init__(
            'fortios:vpn/ssl/settings:Settings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            algorithm: Optional[pulumi.Input[str]] = None,
            auth_session_check_source_ip: Optional[pulumi.Input[str]] = None,
            auth_timeout: Optional[pulumi.Input[int]] = None,
            authentication_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsAuthenticationRuleArgs']]]]] = None,
            auto_tunnel_static_route: Optional[pulumi.Input[str]] = None,
            banned_cipher: Optional[pulumi.Input[str]] = None,
            browser_language_detection: Optional[pulumi.Input[str]] = None,
            check_referer: Optional[pulumi.Input[str]] = None,
            ciphersuite: Optional[pulumi.Input[str]] = None,
            client_sigalgs: Optional[pulumi.Input[str]] = None,
            default_portal: Optional[pulumi.Input[str]] = None,
            deflate_compression_level: Optional[pulumi.Input[int]] = None,
            deflate_min_data_size: Optional[pulumi.Input[int]] = None,
            dns_server1: Optional[pulumi.Input[str]] = None,
            dns_server2: Optional[pulumi.Input[str]] = None,
            dns_suffix: Optional[pulumi.Input[str]] = None,
            dtls_heartbeat_fail_count: Optional[pulumi.Input[int]] = None,
            dtls_heartbeat_idle_timeout: Optional[pulumi.Input[int]] = None,
            dtls_heartbeat_interval: Optional[pulumi.Input[int]] = None,
            dtls_hello_timeout: Optional[pulumi.Input[int]] = None,
            dtls_max_proto_ver: Optional[pulumi.Input[str]] = None,
            dtls_min_proto_ver: Optional[pulumi.Input[str]] = None,
            dtls_tunnel: Optional[pulumi.Input[str]] = None,
            dual_stack_mode: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            encode2f_sequence: Optional[pulumi.Input[str]] = None,
            encrypt_and_store_password: Optional[pulumi.Input[str]] = None,
            force_two_factor_auth: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            header_x_forwarded_for: Optional[pulumi.Input[str]] = None,
            hsts_include_subdomains: Optional[pulumi.Input[str]] = None,
            http_compression: Optional[pulumi.Input[str]] = None,
            http_only_cookie: Optional[pulumi.Input[str]] = None,
            http_request_body_timeout: Optional[pulumi.Input[int]] = None,
            http_request_header_timeout: Optional[pulumi.Input[int]] = None,
            https_redirect: Optional[pulumi.Input[str]] = None,
            idle_timeout: Optional[pulumi.Input[int]] = None,
            ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
            ipv6_dns_server2: Optional[pulumi.Input[str]] = None,
            ipv6_wins_server1: Optional[pulumi.Input[str]] = None,
            ipv6_wins_server2: Optional[pulumi.Input[str]] = None,
            login_attempt_limit: Optional[pulumi.Input[int]] = None,
            login_block_time: Optional[pulumi.Input[int]] = None,
            login_timeout: Optional[pulumi.Input[int]] = None,
            port: Optional[pulumi.Input[int]] = None,
            port_precedence: Optional[pulumi.Input[str]] = None,
            reqclientcert: Optional[pulumi.Input[str]] = None,
            route_source_interface: Optional[pulumi.Input[str]] = None,
            saml_redirect_port: Optional[pulumi.Input[int]] = None,
            server_hostname: Optional[pulumi.Input[str]] = None,
            servercert: Optional[pulumi.Input[str]] = None,
            source_address6_negate: Optional[pulumi.Input[str]] = None,
            source_address6s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceAddress6Args']]]]] = None,
            source_address_negate: Optional[pulumi.Input[str]] = None,
            source_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceAddressArgs']]]]] = None,
            source_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceInterfaceArgs']]]]] = None,
            ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
            ssl_insert_empty_fragment: Optional[pulumi.Input[str]] = None,
            ssl_max_proto_ver: Optional[pulumi.Input[str]] = None,
            ssl_min_proto_ver: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tlsv10: Optional[pulumi.Input[str]] = None,
            tlsv11: Optional[pulumi.Input[str]] = None,
            tlsv12: Optional[pulumi.Input[str]] = None,
            tlsv13: Optional[pulumi.Input[str]] = None,
            transform_backward_slashes: Optional[pulumi.Input[str]] = None,
            tunnel_addr_assigned_method: Optional[pulumi.Input[str]] = None,
            tunnel_connect_without_reauth: Optional[pulumi.Input[str]] = None,
            tunnel_ip_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsTunnelIpPoolArgs']]]]] = None,
            tunnel_ipv6_pools: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsTunnelIpv6PoolArgs']]]]] = None,
            tunnel_user_session_timeout: Optional[pulumi.Input[int]] = None,
            unsafe_legacy_renegotiation: Optional[pulumi.Input[str]] = None,
            url_obscuration: Optional[pulumi.Input[str]] = None,
            user_peer: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            web_mode_snat: Optional[pulumi.Input[str]] = None,
            wins_server1: Optional[pulumi.Input[str]] = None,
            wins_server2: Optional[pulumi.Input[str]] = None,
            x_content_type_options: Optional[pulumi.Input[str]] = None,
            ztna_trusted_client: Optional[pulumi.Input[str]] = None) -> 'Settings':
        """
        Get an existing Settings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
        :param pulumi.Input[str] auth_session_check_source_ip: Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_timeout: SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsAuthenticationRuleArgs']]]] authentication_rules: Authentication rule for SSL VPN. The structure of `authentication_rule` block is documented below.
        :param pulumi.Input[str] auto_tunnel_static_route: Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] banned_cipher: Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
        :param pulumi.Input[str] browser_language_detection: Enable/disable overriding the configured system language based on the preferred language of the browser. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] check_referer: Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ciphersuite: Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
        :param pulumi.Input[str] client_sigalgs: Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
        :param pulumi.Input[str] default_portal: Default SSL VPN portal.
        :param pulumi.Input[int] deflate_compression_level: Compression level (0~9).
        :param pulumi.Input[int] deflate_min_data_size: Minimum amount of data that triggers compression (200 - 65535 bytes).
        :param pulumi.Input[str] dns_server1: DNS server 1.
        :param pulumi.Input[str] dns_server2: DNS server 2.
        :param pulumi.Input[str] dns_suffix: DNS suffix used for SSL-VPN clients.
        :param pulumi.Input[int] dtls_heartbeat_fail_count: Number of missing heartbeats before the connection is considered dropped.
        :param pulumi.Input[int] dtls_heartbeat_idle_timeout: Idle timeout before DTLS heartbeat is sent.
        :param pulumi.Input[int] dtls_heartbeat_interval: Interval between DTLS heartbeat.
        :param pulumi.Input[int] dtls_hello_timeout: SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
        :param pulumi.Input[str] dtls_max_proto_ver: DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
        :param pulumi.Input[str] dtls_min_proto_ver: DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
        :param pulumi.Input[str] dtls_tunnel: Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dual_stack_mode: Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] encode2f_sequence: Encode \\2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] encrypt_and_store_password: Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] force_two_factor_auth: Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] header_x_forwarded_for: Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
        :param pulumi.Input[str] hsts_include_subdomains: Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_compression: Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_only_cookie: Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] http_request_body_timeout: SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
        :param pulumi.Input[int] http_request_header_timeout: SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
        :param pulumi.Input[str] https_redirect: Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] idle_timeout: SSL VPN disconnects if idle for specified time in seconds.
        :param pulumi.Input[str] ipv6_dns_server1: IPv6 DNS server 1.
        :param pulumi.Input[str] ipv6_dns_server2: IPv6 DNS server 2.
        :param pulumi.Input[str] ipv6_wins_server1: IPv6 WINS server 1.
        :param pulumi.Input[str] ipv6_wins_server2: IPv6 WINS server 2.
        :param pulumi.Input[int] login_attempt_limit: SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
        :param pulumi.Input[int] login_block_time: Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
        :param pulumi.Input[int] login_timeout: SSLVPN maximum login timeout (10 - 180 sec, default = 30).
        :param pulumi.Input[int] port: SSL-VPN access port (1 - 65535).
        :param pulumi.Input[str] port_precedence: Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] reqclientcert: Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_source_interface: Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] saml_redirect_port: SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
        :param pulumi.Input[str] server_hostname: Server hostname for HTTPS. When set, will be used for SSL VPN web proxy host header for any redirection.
        :param pulumi.Input[str] servercert: Name of the server certificate to be used for SSL-VPNs.
        :param pulumi.Input[str] source_address6_negate: Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceAddress6Args']]]] source_address6s: IPv6 source address of incoming traffic. The structure of `source_address6` block is documented below.
        :param pulumi.Input[str] source_address_negate: Enable/disable negated source address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceAddressArgs']]]] source_addresses: Source address of incoming traffic. The structure of `source_address` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsSourceInterfaceArgs']]]] source_interfaces: SSL VPN source interface of incoming traffic. The structure of `source_interface` block is documented below.
        :param pulumi.Input[str] ssl_client_renegotiation: Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssl_insert_empty_fragment: Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_max_proto_ver: SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
        :param pulumi.Input[str] ssl_min_proto_ver: SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
        :param pulumi.Input[str] status: Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv10: Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv11: Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv12: Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tlsv13: Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] transform_backward_slashes: Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_addr_assigned_method: Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
        :param pulumi.Input[str] tunnel_connect_without_reauth: Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsTunnelIpPoolArgs']]]] tunnel_ip_pools: Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ip_pools` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingsTunnelIpv6PoolArgs']]]] tunnel_ipv6_pools: Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ipv6_pools` block is documented below.
        :param pulumi.Input[int] tunnel_user_session_timeout: Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
        :param pulumi.Input[str] unsafe_legacy_renegotiation: Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] url_obscuration: Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] user_peer: Name of user peer.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] web_mode_snat: Enable/disable use of IP pools defined in firewall policy while using web-mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] wins_server1: WINS server 1.
        :param pulumi.Input[str] wins_server2: WINS server 2.
        :param pulumi.Input[str] x_content_type_options: Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ztna_trusted_client: Enable/disable verification of device certificate for SSLVPN ZTNA session. Valid values: `enable`, `disable`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingsState.__new__(_SettingsState)

        __props__.__dict__["algorithm"] = algorithm
        __props__.__dict__["auth_session_check_source_ip"] = auth_session_check_source_ip
        __props__.__dict__["auth_timeout"] = auth_timeout
        __props__.__dict__["authentication_rules"] = authentication_rules
        __props__.__dict__["auto_tunnel_static_route"] = auto_tunnel_static_route
        __props__.__dict__["banned_cipher"] = banned_cipher
        __props__.__dict__["browser_language_detection"] = browser_language_detection
        __props__.__dict__["check_referer"] = check_referer
        __props__.__dict__["ciphersuite"] = ciphersuite
        __props__.__dict__["client_sigalgs"] = client_sigalgs
        __props__.__dict__["default_portal"] = default_portal
        __props__.__dict__["deflate_compression_level"] = deflate_compression_level
        __props__.__dict__["deflate_min_data_size"] = deflate_min_data_size
        __props__.__dict__["dns_server1"] = dns_server1
        __props__.__dict__["dns_server2"] = dns_server2
        __props__.__dict__["dns_suffix"] = dns_suffix
        __props__.__dict__["dtls_heartbeat_fail_count"] = dtls_heartbeat_fail_count
        __props__.__dict__["dtls_heartbeat_idle_timeout"] = dtls_heartbeat_idle_timeout
        __props__.__dict__["dtls_heartbeat_interval"] = dtls_heartbeat_interval
        __props__.__dict__["dtls_hello_timeout"] = dtls_hello_timeout
        __props__.__dict__["dtls_max_proto_ver"] = dtls_max_proto_ver
        __props__.__dict__["dtls_min_proto_ver"] = dtls_min_proto_ver
        __props__.__dict__["dtls_tunnel"] = dtls_tunnel
        __props__.__dict__["dual_stack_mode"] = dual_stack_mode
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["encode2f_sequence"] = encode2f_sequence
        __props__.__dict__["encrypt_and_store_password"] = encrypt_and_store_password
        __props__.__dict__["force_two_factor_auth"] = force_two_factor_auth
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["header_x_forwarded_for"] = header_x_forwarded_for
        __props__.__dict__["hsts_include_subdomains"] = hsts_include_subdomains
        __props__.__dict__["http_compression"] = http_compression
        __props__.__dict__["http_only_cookie"] = http_only_cookie
        __props__.__dict__["http_request_body_timeout"] = http_request_body_timeout
        __props__.__dict__["http_request_header_timeout"] = http_request_header_timeout
        __props__.__dict__["https_redirect"] = https_redirect
        __props__.__dict__["idle_timeout"] = idle_timeout
        __props__.__dict__["ipv6_dns_server1"] = ipv6_dns_server1
        __props__.__dict__["ipv6_dns_server2"] = ipv6_dns_server2
        __props__.__dict__["ipv6_wins_server1"] = ipv6_wins_server1
        __props__.__dict__["ipv6_wins_server2"] = ipv6_wins_server2
        __props__.__dict__["login_attempt_limit"] = login_attempt_limit
        __props__.__dict__["login_block_time"] = login_block_time
        __props__.__dict__["login_timeout"] = login_timeout
        __props__.__dict__["port"] = port
        __props__.__dict__["port_precedence"] = port_precedence
        __props__.__dict__["reqclientcert"] = reqclientcert
        __props__.__dict__["route_source_interface"] = route_source_interface
        __props__.__dict__["saml_redirect_port"] = saml_redirect_port
        __props__.__dict__["server_hostname"] = server_hostname
        __props__.__dict__["servercert"] = servercert
        __props__.__dict__["source_address6_negate"] = source_address6_negate
        __props__.__dict__["source_address6s"] = source_address6s
        __props__.__dict__["source_address_negate"] = source_address_negate
        __props__.__dict__["source_addresses"] = source_addresses
        __props__.__dict__["source_interfaces"] = source_interfaces
        __props__.__dict__["ssl_client_renegotiation"] = ssl_client_renegotiation
        __props__.__dict__["ssl_insert_empty_fragment"] = ssl_insert_empty_fragment
        __props__.__dict__["ssl_max_proto_ver"] = ssl_max_proto_ver
        __props__.__dict__["ssl_min_proto_ver"] = ssl_min_proto_ver
        __props__.__dict__["status"] = status
        __props__.__dict__["tlsv10"] = tlsv10
        __props__.__dict__["tlsv11"] = tlsv11
        __props__.__dict__["tlsv12"] = tlsv12
        __props__.__dict__["tlsv13"] = tlsv13
        __props__.__dict__["transform_backward_slashes"] = transform_backward_slashes
        __props__.__dict__["tunnel_addr_assigned_method"] = tunnel_addr_assigned_method
        __props__.__dict__["tunnel_connect_without_reauth"] = tunnel_connect_without_reauth
        __props__.__dict__["tunnel_ip_pools"] = tunnel_ip_pools
        __props__.__dict__["tunnel_ipv6_pools"] = tunnel_ipv6_pools
        __props__.__dict__["tunnel_user_session_timeout"] = tunnel_user_session_timeout
        __props__.__dict__["unsafe_legacy_renegotiation"] = unsafe_legacy_renegotiation
        __props__.__dict__["url_obscuration"] = url_obscuration
        __props__.__dict__["user_peer"] = user_peer
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["web_mode_snat"] = web_mode_snat
        __props__.__dict__["wins_server1"] = wins_server1
        __props__.__dict__["wins_server2"] = wins_server2
        __props__.__dict__["x_content_type_options"] = x_content_type_options
        __props__.__dict__["ztna_trusted_client"] = ztna_trusted_client
        return Settings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Output[str]:
        """
        Force the SSL-VPN security level. High allows only high. Medium allows medium and high. Low allows any. Valid values: `high`, `medium`, `default`, `low`.
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="authSessionCheckSourceIp")
    def auth_session_check_source_ip(self) -> pulumi.Output[str]:
        """
        Enable/disable checking of source IP for authentication session. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_session_check_source_ip")

    @property
    @pulumi.getter(name="authTimeout")
    def auth_timeout(self) -> pulumi.Output[int]:
        """
        SSL-VPN authentication timeout (1 - 259200 sec (3 days), 0 for no timeout).
        """
        return pulumi.get(self, "auth_timeout")

    @property
    @pulumi.getter(name="authenticationRules")
    def authentication_rules(self) -> pulumi.Output[Optional[Sequence['outputs.SettingsAuthenticationRule']]]:
        """
        Authentication rule for SSL VPN. The structure of `authentication_rule` block is documented below.
        """
        return pulumi.get(self, "authentication_rules")

    @property
    @pulumi.getter(name="autoTunnelStaticRoute")
    def auto_tunnel_static_route(self) -> pulumi.Output[str]:
        """
        Enable to auto-create static routes for the SSL-VPN tunnel IP addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_tunnel_static_route")

    @property
    @pulumi.getter(name="bannedCipher")
    def banned_cipher(self) -> pulumi.Output[str]:
        """
        Select one or more cipher technologies that cannot be used in SSL-VPN negotiations.
        """
        return pulumi.get(self, "banned_cipher")

    @property
    @pulumi.getter(name="browserLanguageDetection")
    def browser_language_detection(self) -> pulumi.Output[str]:
        """
        Enable/disable overriding the configured system language based on the preferred language of the browser. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "browser_language_detection")

    @property
    @pulumi.getter(name="checkReferer")
    def check_referer(self) -> pulumi.Output[str]:
        """
        Enable/disable verification of referer field in HTTP request header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_referer")

    @property
    @pulumi.getter
    def ciphersuite(self) -> pulumi.Output[str]:
        """
        Select one or more TLS 1.3 ciphersuites to enable. Does not affect ciphers in TLS 1.2 and below. At least one must be enabled. To disable all, set ssl-max-proto-ver to tls1-2 or below. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-AES-128-CCM-SHA256`, `TLS-AES-128-CCM-8-SHA256`.
        """
        return pulumi.get(self, "ciphersuite")

    @property
    @pulumi.getter(name="clientSigalgs")
    def client_sigalgs(self) -> pulumi.Output[str]:
        """
        Set signature algorithms related to client authentication. Affects TLS version <= 1.2 only. Valid values: `no-rsa-pss`, `all`.
        """
        return pulumi.get(self, "client_sigalgs")

    @property
    @pulumi.getter(name="defaultPortal")
    def default_portal(self) -> pulumi.Output[str]:
        """
        Default SSL VPN portal.
        """
        return pulumi.get(self, "default_portal")

    @property
    @pulumi.getter(name="deflateCompressionLevel")
    def deflate_compression_level(self) -> pulumi.Output[int]:
        """
        Compression level (0~9).
        """
        return pulumi.get(self, "deflate_compression_level")

    @property
    @pulumi.getter(name="deflateMinDataSize")
    def deflate_min_data_size(self) -> pulumi.Output[int]:
        """
        Minimum amount of data that triggers compression (200 - 65535 bytes).
        """
        return pulumi.get(self, "deflate_min_data_size")

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> pulumi.Output[str]:
        """
        DNS server 1.
        """
        return pulumi.get(self, "dns_server1")

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> pulumi.Output[str]:
        """
        DNS server 2.
        """
        return pulumi.get(self, "dns_server2")

    @property
    @pulumi.getter(name="dnsSuffix")
    def dns_suffix(self) -> pulumi.Output[Optional[str]]:
        """
        DNS suffix used for SSL-VPN clients.
        """
        return pulumi.get(self, "dns_suffix")

    @property
    @pulumi.getter(name="dtlsHeartbeatFailCount")
    def dtls_heartbeat_fail_count(self) -> pulumi.Output[int]:
        """
        Number of missing heartbeats before the connection is considered dropped.
        """
        return pulumi.get(self, "dtls_heartbeat_fail_count")

    @property
    @pulumi.getter(name="dtlsHeartbeatIdleTimeout")
    def dtls_heartbeat_idle_timeout(self) -> pulumi.Output[int]:
        """
        Idle timeout before DTLS heartbeat is sent.
        """
        return pulumi.get(self, "dtls_heartbeat_idle_timeout")

    @property
    @pulumi.getter(name="dtlsHeartbeatInterval")
    def dtls_heartbeat_interval(self) -> pulumi.Output[int]:
        """
        Interval between DTLS heartbeat.
        """
        return pulumi.get(self, "dtls_heartbeat_interval")

    @property
    @pulumi.getter(name="dtlsHelloTimeout")
    def dtls_hello_timeout(self) -> pulumi.Output[int]:
        """
        SSLVPN maximum DTLS hello timeout (10 - 60 sec, default = 10).
        """
        return pulumi.get(self, "dtls_hello_timeout")

    @property
    @pulumi.getter(name="dtlsMaxProtoVer")
    def dtls_max_proto_ver(self) -> pulumi.Output[str]:
        """
        DTLS maximum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
        """
        return pulumi.get(self, "dtls_max_proto_ver")

    @property
    @pulumi.getter(name="dtlsMinProtoVer")
    def dtls_min_proto_ver(self) -> pulumi.Output[str]:
        """
        DTLS minimum protocol version. Valid values: `dtls1-0`, `dtls1-2`.
        """
        return pulumi.get(self, "dtls_min_proto_ver")

    @property
    @pulumi.getter(name="dtlsTunnel")
    def dtls_tunnel(self) -> pulumi.Output[str]:
        """
        Enable DTLS to prevent eavesdropping, tampering, or message forgery. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dtls_tunnel")

    @property
    @pulumi.getter(name="dualStackMode")
    def dual_stack_mode(self) -> pulumi.Output[str]:
        """
        Tunnel mode: enable parallel IPv4 and IPv6 tunnel. Web mode: support IPv4 and IPv6 bookmarks in the portal. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dual_stack_mode")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="encode2fSequence")
    def encode2f_sequence(self) -> pulumi.Output[str]:
        """
        Encode \\2F sequence to forward slash in URLs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "encode2f_sequence")

    @property
    @pulumi.getter(name="encryptAndStorePassword")
    def encrypt_and_store_password(self) -> pulumi.Output[str]:
        """
        Encrypt and store user passwords for SSL-VPN web sessions. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "encrypt_and_store_password")

    @property
    @pulumi.getter(name="forceTwoFactorAuth")
    def force_two_factor_auth(self) -> pulumi.Output[str]:
        """
        Enable to force two-factor authentication for all SSL-VPNs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "force_two_factor_auth")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="headerXForwardedFor")
    def header_x_forwarded_for(self) -> pulumi.Output[str]:
        """
        Forward the same, add, or remove HTTP header. Valid values: `pass`, `add`, `remove`.
        """
        return pulumi.get(self, "header_x_forwarded_for")

    @property
    @pulumi.getter(name="hstsIncludeSubdomains")
    def hsts_include_subdomains(self) -> pulumi.Output[str]:
        """
        Add HSTS includeSubDomains response header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "hsts_include_subdomains")

    @property
    @pulumi.getter(name="httpCompression")
    def http_compression(self) -> pulumi.Output[str]:
        """
        Enable to allow HTTP compression over SSL-VPN tunnels. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_compression")

    @property
    @pulumi.getter(name="httpOnlyCookie")
    def http_only_cookie(self) -> pulumi.Output[str]:
        """
        Enable/disable SSL-VPN support for HttpOnly cookies. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "http_only_cookie")

    @property
    @pulumi.getter(name="httpRequestBodyTimeout")
    def http_request_body_timeout(self) -> pulumi.Output[int]:
        """
        SSL-VPN session is disconnected if an HTTP request body is not received within this time (1 - 60 sec, default = 20).
        """
        return pulumi.get(self, "http_request_body_timeout")

    @property
    @pulumi.getter(name="httpRequestHeaderTimeout")
    def http_request_header_timeout(self) -> pulumi.Output[int]:
        """
        SSL-VPN session is disconnected if an HTTP request header is not received within this time (1 - 60 sec, default = 20).
        """
        return pulumi.get(self, "http_request_header_timeout")

    @property
    @pulumi.getter(name="httpsRedirect")
    def https_redirect(self) -> pulumi.Output[str]:
        """
        Enable/disable redirect of port 80 to SSL-VPN port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "https_redirect")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> pulumi.Output[int]:
        """
        SSL VPN disconnects if idle for specified time in seconds.
        """
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> pulumi.Output[str]:
        """
        IPv6 DNS server 1.
        """
        return pulumi.get(self, "ipv6_dns_server1")

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> pulumi.Output[str]:
        """
        IPv6 DNS server 2.
        """
        return pulumi.get(self, "ipv6_dns_server2")

    @property
    @pulumi.getter(name="ipv6WinsServer1")
    def ipv6_wins_server1(self) -> pulumi.Output[str]:
        """
        IPv6 WINS server 1.
        """
        return pulumi.get(self, "ipv6_wins_server1")

    @property
    @pulumi.getter(name="ipv6WinsServer2")
    def ipv6_wins_server2(self) -> pulumi.Output[str]:
        """
        IPv6 WINS server 2.
        """
        return pulumi.get(self, "ipv6_wins_server2")

    @property
    @pulumi.getter(name="loginAttemptLimit")
    def login_attempt_limit(self) -> pulumi.Output[int]:
        """
        SSL VPN maximum login attempt times before block (0 - 10, default = 2, 0 = no limit).
        """
        return pulumi.get(self, "login_attempt_limit")

    @property
    @pulumi.getter(name="loginBlockTime")
    def login_block_time(self) -> pulumi.Output[int]:
        """
        Time for which a user is blocked from logging in after too many failed login attempts (0 - 86400 sec, default = 60).
        """
        return pulumi.get(self, "login_block_time")

    @property
    @pulumi.getter(name="loginTimeout")
    def login_timeout(self) -> pulumi.Output[int]:
        """
        SSLVPN maximum login timeout (10 - 180 sec, default = 30).
        """
        return pulumi.get(self, "login_timeout")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        SSL-VPN access port (1 - 65535).
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="portPrecedence")
    def port_precedence(self) -> pulumi.Output[str]:
        """
        Enable means that if SSL-VPN connections are allowed on an interface admin GUI connections are blocked on that interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "port_precedence")

    @property
    @pulumi.getter
    def reqclientcert(self) -> pulumi.Output[str]:
        """
        Enable to require client certificates for all SSL-VPN users. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "reqclientcert")

    @property
    @pulumi.getter(name="routeSourceInterface")
    def route_source_interface(self) -> pulumi.Output[str]:
        """
        Enable to allow SSL-VPN sessions to bypass routing and bind to the incoming interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_source_interface")

    @property
    @pulumi.getter(name="samlRedirectPort")
    def saml_redirect_port(self) -> pulumi.Output[int]:
        """
        SAML local redirect port in the machine running FCT (0 - 65535). 0 is to disable redirection on FGT side.
        """
        return pulumi.get(self, "saml_redirect_port")

    @property
    @pulumi.getter(name="serverHostname")
    def server_hostname(self) -> pulumi.Output[str]:
        """
        Server hostname for HTTPS. When set, will be used for SSL VPN web proxy host header for any redirection.
        """
        return pulumi.get(self, "server_hostname")

    @property
    @pulumi.getter
    def servercert(self) -> pulumi.Output[str]:
        """
        Name of the server certificate to be used for SSL-VPNs.
        """
        return pulumi.get(self, "servercert")

    @property
    @pulumi.getter(name="sourceAddress6Negate")
    def source_address6_negate(self) -> pulumi.Output[str]:
        """
        Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "source_address6_negate")

    @property
    @pulumi.getter(name="sourceAddress6s")
    def source_address6s(self) -> pulumi.Output[Optional[Sequence['outputs.SettingsSourceAddress6']]]:
        """
        IPv6 source address of incoming traffic. The structure of `source_address6` block is documented below.
        """
        return pulumi.get(self, "source_address6s")

    @property
    @pulumi.getter(name="sourceAddressNegate")
    def source_address_negate(self) -> pulumi.Output[str]:
        """
        Enable/disable negated source address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "source_address_negate")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.SettingsSourceAddress']]]:
        """
        Source address of incoming traffic. The structure of `source_address` block is documented below.
        """
        return pulumi.get(self, "source_addresses")

    @property
    @pulumi.getter(name="sourceInterfaces")
    def source_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.SettingsSourceInterface']]]:
        """
        SSL VPN source interface of incoming traffic. The structure of `source_interface` block is documented below.
        """
        return pulumi.get(self, "source_interfaces")

    @property
    @pulumi.getter(name="sslClientRenegotiation")
    def ssl_client_renegotiation(self) -> pulumi.Output[str]:
        """
        Enable to allow client renegotiation by the server if the tunnel goes down. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssl_client_renegotiation")

    @property
    @pulumi.getter(name="sslInsertEmptyFragment")
    def ssl_insert_empty_fragment(self) -> pulumi.Output[str]:
        """
        Enable/disable insertion of empty fragment. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_insert_empty_fragment")

    @property
    @pulumi.getter(name="sslMaxProtoVer")
    def ssl_max_proto_ver(self) -> pulumi.Output[str]:
        """
        SSL maximum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
        """
        return pulumi.get(self, "ssl_max_proto_ver")

    @property
    @pulumi.getter(name="sslMinProtoVer")
    def ssl_min_proto_ver(self) -> pulumi.Output[str]:
        """
        SSL minimum protocol version. Valid values: `tls1-0`, `tls1-1`, `tls1-2`, `tls1-3`.
        """
        return pulumi.get(self, "ssl_min_proto_ver")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable SSL-VPN. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tlsv10(self) -> pulumi.Output[str]:
        """
        Enable/disable TLSv1.0. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tlsv10")

    @property
    @pulumi.getter
    def tlsv11(self) -> pulumi.Output[str]:
        """
        Enable/disable TLSv1.1. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tlsv11")

    @property
    @pulumi.getter
    def tlsv12(self) -> pulumi.Output[str]:
        """
        Enable/disable TLSv1.2. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tlsv12")

    @property
    @pulumi.getter
    def tlsv13(self) -> pulumi.Output[str]:
        """
        Enable/disable TLSv1.3. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tlsv13")

    @property
    @pulumi.getter(name="transformBackwardSlashes")
    def transform_backward_slashes(self) -> pulumi.Output[str]:
        """
        Transform backward slashes to forward slashes in URLs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "transform_backward_slashes")

    @property
    @pulumi.getter(name="tunnelAddrAssignedMethod")
    def tunnel_addr_assigned_method(self) -> pulumi.Output[str]:
        """
        Method used for assigning address for tunnel. Valid values: `first-available`, `round-robin`.
        """
        return pulumi.get(self, "tunnel_addr_assigned_method")

    @property
    @pulumi.getter(name="tunnelConnectWithoutReauth")
    def tunnel_connect_without_reauth(self) -> pulumi.Output[str]:
        """
        Enable/disable tunnel connection without re-authorization if previous connection dropped. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tunnel_connect_without_reauth")

    @property
    @pulumi.getter(name="tunnelIpPools")
    def tunnel_ip_pools(self) -> pulumi.Output[Optional[Sequence['outputs.SettingsTunnelIpPool']]]:
        """
        Names of the IPv4 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ip_pools` block is documented below.
        """
        return pulumi.get(self, "tunnel_ip_pools")

    @property
    @pulumi.getter(name="tunnelIpv6Pools")
    def tunnel_ipv6_pools(self) -> pulumi.Output[Optional[Sequence['outputs.SettingsTunnelIpv6Pool']]]:
        """
        Names of the IPv6 IP Pool firewall objects that define the IP addresses reserved for remote clients. The structure of `tunnel_ipv6_pools` block is documented below.
        """
        return pulumi.get(self, "tunnel_ipv6_pools")

    @property
    @pulumi.getter(name="tunnelUserSessionTimeout")
    def tunnel_user_session_timeout(self) -> pulumi.Output[int]:
        """
        Time out value to clean up user session after tunnel connection is dropped (1 - 255 sec, default=30).
        """
        return pulumi.get(self, "tunnel_user_session_timeout")

    @property
    @pulumi.getter(name="unsafeLegacyRenegotiation")
    def unsafe_legacy_renegotiation(self) -> pulumi.Output[str]:
        """
        Enable/disable unsafe legacy re-negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "unsafe_legacy_renegotiation")

    @property
    @pulumi.getter(name="urlObscuration")
    def url_obscuration(self) -> pulumi.Output[str]:
        """
        Enable to obscure the host name of the URL of the web browser display. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "url_obscuration")

    @property
    @pulumi.getter(name="userPeer")
    def user_peer(self) -> pulumi.Output[str]:
        """
        Name of user peer.
        """
        return pulumi.get(self, "user_peer")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="webModeSnat")
    def web_mode_snat(self) -> pulumi.Output[str]:
        """
        Enable/disable use of IP pools defined in firewall policy while using web-mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "web_mode_snat")

    @property
    @pulumi.getter(name="winsServer1")
    def wins_server1(self) -> pulumi.Output[str]:
        """
        WINS server 1.
        """
        return pulumi.get(self, "wins_server1")

    @property
    @pulumi.getter(name="winsServer2")
    def wins_server2(self) -> pulumi.Output[str]:
        """
        WINS server 2.
        """
        return pulumi.get(self, "wins_server2")

    @property
    @pulumi.getter(name="xContentTypeOptions")
    def x_content_type_options(self) -> pulumi.Output[str]:
        """
        Add HTTP X-Content-Type-Options header. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "x_content_type_options")

    @property
    @pulumi.getter(name="ztnaTrustedClient")
    def ztna_trusted_client(self) -> pulumi.Output[str]:
        """
        Enable/disable verification of device certificate for SSLVPN ZTNA session. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ztna_trusted_client")

