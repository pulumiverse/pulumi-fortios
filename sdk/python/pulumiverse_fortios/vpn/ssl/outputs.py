# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'SettingsAuthenticationRule',
    'SettingsAuthenticationRuleGroup',
    'SettingsAuthenticationRuleSourceAddress6',
    'SettingsAuthenticationRuleSourceAddress',
    'SettingsAuthenticationRuleSourceInterface',
    'SettingsAuthenticationRuleUser',
    'SettingsSourceAddress6',
    'SettingsSourceAddress',
    'SettingsSourceInterface',
    'SettingsTunnelIpPool',
    'SettingsTunnelIpv6Pool',
    'GetSettingsAuthenticationRuleResult',
    'GetSettingsAuthenticationRuleGroupResult',
    'GetSettingsAuthenticationRuleSourceAddress6Result',
    'GetSettingsAuthenticationRuleSourceAddressResult',
    'GetSettingsAuthenticationRuleSourceInterfaceResult',
    'GetSettingsAuthenticationRuleUserResult',
    'GetSettingsSourceAddress6Result',
    'GetSettingsSourceAddressResult',
    'GetSettingsSourceInterfaceResult',
    'GetSettingsTunnelIpPoolResult',
    'GetSettingsTunnelIpv6PoolResult',
]

@pulumi.output_type
class SettingsAuthenticationRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCert":
            suggest = "client_cert"
        elif key == "sourceAddress6Negate":
            suggest = "source_address6_negate"
        elif key == "sourceAddress6s":
            suggest = "source_address6s"
        elif key == "sourceAddressNegate":
            suggest = "source_address_negate"
        elif key == "sourceAddresses":
            suggest = "source_addresses"
        elif key == "sourceInterfaces":
            suggest = "source_interfaces"
        elif key == "userPeer":
            suggest = "user_peer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingsAuthenticationRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingsAuthenticationRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingsAuthenticationRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth: Optional[str] = None,
                 cipher: Optional[str] = None,
                 client_cert: Optional[str] = None,
                 groups: Optional[Sequence['outputs.SettingsAuthenticationRuleGroup']] = None,
                 id: Optional[int] = None,
                 portal: Optional[str] = None,
                 realm: Optional[str] = None,
                 source_address6_negate: Optional[str] = None,
                 source_address6s: Optional[Sequence['outputs.SettingsAuthenticationRuleSourceAddress6']] = None,
                 source_address_negate: Optional[str] = None,
                 source_addresses: Optional[Sequence['outputs.SettingsAuthenticationRuleSourceAddress']] = None,
                 source_interfaces: Optional[Sequence['outputs.SettingsAuthenticationRuleSourceInterface']] = None,
                 user_peer: Optional[str] = None,
                 users: Optional[Sequence['outputs.SettingsAuthenticationRuleUser']] = None):
        """
        :param str auth: SSL VPN authentication method restriction.
        :param str cipher: SSL VPN cipher strength. Valid values: `any`, `high`, `medium`.
        :param str client_cert: Enable/disable SSL VPN client certificate restrictive. Valid values: `enable`, `disable`.
        :param Sequence['SettingsAuthenticationRuleGroupArgs'] groups: User groups. The structure of `groups` block is documented below.
        :param int id: ID (0 - 4294967295).
        :param str portal: SSL VPN portal.
        :param str realm: SSL VPN realm.
        :param str source_address6_negate: Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
        :param Sequence['SettingsAuthenticationRuleSourceAddress6Args'] source_address6s: IPv6 source address of incoming traffic. The structure of `source_address6` block is documented below.
        :param str source_address_negate: Enable/disable negated source address match. Valid values: `enable`, `disable`.
        :param Sequence['SettingsAuthenticationRuleSourceAddressArgs'] source_addresses: Source address of incoming traffic. The structure of `source_address` block is documented below.
        :param Sequence['SettingsAuthenticationRuleSourceInterfaceArgs'] source_interfaces: SSL VPN source interface of incoming traffic. The structure of `source_interface` block is documented below.
        :param str user_peer: Name of user peer.
        :param Sequence['SettingsAuthenticationRuleUserArgs'] users: User name. The structure of `users` block is documented below.
        """
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if portal is not None:
            pulumi.set(__self__, "portal", portal)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if source_address6_negate is not None:
            pulumi.set(__self__, "source_address6_negate", source_address6_negate)
        if source_address6s is not None:
            pulumi.set(__self__, "source_address6s", source_address6s)
        if source_address_negate is not None:
            pulumi.set(__self__, "source_address_negate", source_address_negate)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)
        if source_interfaces is not None:
            pulumi.set(__self__, "source_interfaces", source_interfaces)
        if user_peer is not None:
            pulumi.set(__self__, "user_peer", user_peer)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def auth(self) -> Optional[str]:
        """
        SSL VPN authentication method restriction.
        """
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def cipher(self) -> Optional[str]:
        """
        SSL VPN cipher strength. Valid values: `any`, `high`, `medium`.
        """
        return pulumi.get(self, "cipher")

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[str]:
        """
        Enable/disable SSL VPN client certificate restrictive. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "client_cert")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence['outputs.SettingsAuthenticationRuleGroup']]:
        """
        User groups. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID (0 - 4294967295).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def portal(self) -> Optional[str]:
        """
        SSL VPN portal.
        """
        return pulumi.get(self, "portal")

    @property
    @pulumi.getter
    def realm(self) -> Optional[str]:
        """
        SSL VPN realm.
        """
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter(name="sourceAddress6Negate")
    def source_address6_negate(self) -> Optional[str]:
        """
        Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "source_address6_negate")

    @property
    @pulumi.getter(name="sourceAddress6s")
    def source_address6s(self) -> Optional[Sequence['outputs.SettingsAuthenticationRuleSourceAddress6']]:
        """
        IPv6 source address of incoming traffic. The structure of `source_address6` block is documented below.
        """
        return pulumi.get(self, "source_address6s")

    @property
    @pulumi.getter(name="sourceAddressNegate")
    def source_address_negate(self) -> Optional[str]:
        """
        Enable/disable negated source address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "source_address_negate")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[Sequence['outputs.SettingsAuthenticationRuleSourceAddress']]:
        """
        Source address of incoming traffic. The structure of `source_address` block is documented below.
        """
        return pulumi.get(self, "source_addresses")

    @property
    @pulumi.getter(name="sourceInterfaces")
    def source_interfaces(self) -> Optional[Sequence['outputs.SettingsAuthenticationRuleSourceInterface']]:
        """
        SSL VPN source interface of incoming traffic. The structure of `source_interface` block is documented below.
        """
        return pulumi.get(self, "source_interfaces")

    @property
    @pulumi.getter(name="userPeer")
    def user_peer(self) -> Optional[str]:
        """
        Name of user peer.
        """
        return pulumi.get(self, "user_peer")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.SettingsAuthenticationRuleUser']]:
        """
        User name. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class SettingsAuthenticationRuleGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SettingsAuthenticationRuleSourceAddress6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SettingsAuthenticationRuleSourceAddress(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: IPv6 address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        IPv6 address name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SettingsAuthenticationRuleSourceInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SettingsAuthenticationRuleUser(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: User name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        User name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SettingsSourceAddress6(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SettingsSourceAddress(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: IPv6 address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        IPv6 address name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SettingsSourceInterface(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SettingsTunnelIpPool(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SettingsTunnelIpv6Pool(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSettingsAuthenticationRuleResult(dict):
    def __init__(__self__, *,
                 auth: str,
                 cipher: str,
                 client_cert: str,
                 groups: Sequence['outputs.GetSettingsAuthenticationRuleGroupResult'],
                 id: int,
                 portal: str,
                 realm: str,
                 source_address6_negate: str,
                 source_address6s: Sequence['outputs.GetSettingsAuthenticationRuleSourceAddress6Result'],
                 source_address_negate: str,
                 source_addresses: Sequence['outputs.GetSettingsAuthenticationRuleSourceAddressResult'],
                 source_interfaces: Sequence['outputs.GetSettingsAuthenticationRuleSourceInterfaceResult'],
                 user_peer: str,
                 users: Sequence['outputs.GetSettingsAuthenticationRuleUserResult']):
        """
        :param str auth: SSL VPN authentication method restriction.
        :param str cipher: SSL VPN cipher strength.
        :param str client_cert: Enable/disable SSL VPN client certificate restrictive.
        :param Sequence['GetSettingsAuthenticationRuleGroupArgs'] groups: User groups. The structure of `groups` block is documented below.
        :param int id: ID (0 - 4294967295).
        :param str portal: SSL VPN portal.
        :param str realm: SSL VPN realm.
        :param str source_address6_negate: Enable/disable negated source IPv6 address match.
        :param Sequence['GetSettingsAuthenticationRuleSourceAddress6Args'] source_address6s: IPv6 source address of incoming traffic. The structure of `source_address6` block is documented below.
        :param str source_address_negate: Enable/disable negated source address match.
        :param Sequence['GetSettingsAuthenticationRuleSourceAddressArgs'] source_addresses: Source address of incoming traffic. The structure of `source_address` block is documented below.
        :param Sequence['GetSettingsAuthenticationRuleSourceInterfaceArgs'] source_interfaces: SSL VPN source interface of incoming traffic. The structure of `source_interface` block is documented below.
        :param str user_peer: Name of user peer.
        :param Sequence['GetSettingsAuthenticationRuleUserArgs'] users: User name. The structure of `users` block is documented below.
        """
        pulumi.set(__self__, "auth", auth)
        pulumi.set(__self__, "cipher", cipher)
        pulumi.set(__self__, "client_cert", client_cert)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "portal", portal)
        pulumi.set(__self__, "realm", realm)
        pulumi.set(__self__, "source_address6_negate", source_address6_negate)
        pulumi.set(__self__, "source_address6s", source_address6s)
        pulumi.set(__self__, "source_address_negate", source_address_negate)
        pulumi.set(__self__, "source_addresses", source_addresses)
        pulumi.set(__self__, "source_interfaces", source_interfaces)
        pulumi.set(__self__, "user_peer", user_peer)
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def auth(self) -> str:
        """
        SSL VPN authentication method restriction.
        """
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def cipher(self) -> str:
        """
        SSL VPN cipher strength.
        """
        return pulumi.get(self, "cipher")

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> str:
        """
        Enable/disable SSL VPN client certificate restrictive.
        """
        return pulumi.get(self, "client_cert")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetSettingsAuthenticationRuleGroupResult']:
        """
        User groups. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID (0 - 4294967295).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def portal(self) -> str:
        """
        SSL VPN portal.
        """
        return pulumi.get(self, "portal")

    @property
    @pulumi.getter
    def realm(self) -> str:
        """
        SSL VPN realm.
        """
        return pulumi.get(self, "realm")

    @property
    @pulumi.getter(name="sourceAddress6Negate")
    def source_address6_negate(self) -> str:
        """
        Enable/disable negated source IPv6 address match.
        """
        return pulumi.get(self, "source_address6_negate")

    @property
    @pulumi.getter(name="sourceAddress6s")
    def source_address6s(self) -> Sequence['outputs.GetSettingsAuthenticationRuleSourceAddress6Result']:
        """
        IPv6 source address of incoming traffic. The structure of `source_address6` block is documented below.
        """
        return pulumi.get(self, "source_address6s")

    @property
    @pulumi.getter(name="sourceAddressNegate")
    def source_address_negate(self) -> str:
        """
        Enable/disable negated source address match.
        """
        return pulumi.get(self, "source_address_negate")

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Sequence['outputs.GetSettingsAuthenticationRuleSourceAddressResult']:
        """
        Source address of incoming traffic. The structure of `source_address` block is documented below.
        """
        return pulumi.get(self, "source_addresses")

    @property
    @pulumi.getter(name="sourceInterfaces")
    def source_interfaces(self) -> Sequence['outputs.GetSettingsAuthenticationRuleSourceInterfaceResult']:
        """
        SSL VPN source interface of incoming traffic. The structure of `source_interface` block is documented below.
        """
        return pulumi.get(self, "source_interfaces")

    @property
    @pulumi.getter(name="userPeer")
    def user_peer(self) -> str:
        """
        Name of user peer.
        """
        return pulumi.get(self, "user_peer")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetSettingsAuthenticationRuleUserResult']:
        """
        User name. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetSettingsAuthenticationRuleGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSettingsAuthenticationRuleSourceAddress6Result(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSettingsAuthenticationRuleSourceAddressResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSettingsAuthenticationRuleSourceInterfaceResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSettingsAuthenticationRuleUserResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSettingsSourceAddress6Result(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSettingsSourceAddressResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSettingsSourceInterfaceResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSettingsTunnelIpPoolResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSettingsTunnelIpv6PoolResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: Group name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Group name.
        """
        return pulumi.get(self, "name")


