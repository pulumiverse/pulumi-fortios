# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .... import _utilities

__all__ = [
    'HostchecksoftwareCheckItemListArgs',
    'HostchecksoftwareCheckItemListMd5Args',
    'PortalBookmarkGroupArgs',
    'PortalBookmarkGroupBookmarkArgs',
    'PortalBookmarkGroupBookmarkFormDataArgs',
    'PortalHostCheckPolicyArgs',
    'PortalIpPoolArgs',
    'PortalIpv6PoolArgs',
    'PortalIpv6SplitTunnelingRoutingAddressArgs',
    'PortalLandingPageArgs',
    'PortalLandingPageFormDataArgs',
    'PortalMacAddrCheckRuleArgs',
    'PortalMacAddrCheckRuleMacAddrListArgs',
    'PortalOsCheckListArgs',
    'PortalSplitDnArgs',
    'PortalSplitTunnelingRoutingAddressArgs',
    'UserbookmarkBookmarkArgs',
    'UserbookmarkBookmarkFormDataArgs',
    'UsergroupbookmarkBookmarkArgs',
    'UsergroupbookmarkBookmarkFormDataArgs',
]

@pulumi.input_type
class HostchecksoftwareCheckItemListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 md5s: Optional[pulumi.Input[Sequence[pulumi.Input['HostchecksoftwareCheckItemListMd5Args']]]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `require`, `deny`.
        :param pulumi.Input[int] id: Hex string of MD5 checksum.
        :param pulumi.Input[Sequence[pulumi.Input['HostchecksoftwareCheckItemListMd5Args']]] md5s: MD5 checksum. The structure of `md5s` block is documented below.
               
               The `md5s` block supports:
        :param pulumi.Input[str] target: Target.
        :param pulumi.Input[str] type: Type. Valid values: `file`, `registry`, `process`.
        :param pulumi.Input[str] version: Version.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if md5s is not None:
            pulumi.set(__self__, "md5s", md5s)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `require`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Hex string of MD5 checksum.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def md5s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostchecksoftwareCheckItemListMd5Args']]]]:
        """
        MD5 checksum. The structure of `md5s` block is documented below.

        The `md5s` block supports:
        """
        return pulumi.get(self, "md5s")

    @md5s.setter
    def md5s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostchecksoftwareCheckItemListMd5Args']]]]):
        pulumi.set(self, "md5s", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Target.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type. Valid values: `file`, `registry`, `process`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class HostchecksoftwareCheckItemListMd5Args:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Hex string of MD5 checksum.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Hex string of MD5 checksum.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class PortalBookmarkGroupArgs:
    def __init__(__self__, *,
                 bookmarks: Optional[pulumi.Input[Sequence[pulumi.Input['PortalBookmarkGroupBookmarkArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PortalBookmarkGroupBookmarkArgs']]] bookmarks: Bookmark table. The structure of `bookmarks` block is documented below.
        :param pulumi.Input[str] name: Bookmark group name.
        """
        if bookmarks is not None:
            pulumi.set(__self__, "bookmarks", bookmarks)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def bookmarks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortalBookmarkGroupBookmarkArgs']]]]:
        """
        Bookmark table. The structure of `bookmarks` block is documented below.
        """
        return pulumi.get(self, "bookmarks")

    @bookmarks.setter
    def bookmarks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortalBookmarkGroupBookmarkArgs']]]]):
        pulumi.set(self, "bookmarks", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Bookmark group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PortalBookmarkGroupBookmarkArgs:
    def __init__(__self__, *,
                 additional_params: Optional[pulumi.Input[str]] = None,
                 apptype: Optional[pulumi.Input[str]] = None,
                 color_depth: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 form_datas: Optional[pulumi.Input[Sequence[pulumi.Input['PortalBookmarkGroupBookmarkFormDataArgs']]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 keyboard_layout: Optional[pulumi.Input[str]] = None,
                 listening_port: Optional[pulumi.Input[int]] = None,
                 load_balancing_info: Optional[pulumi.Input[str]] = None,
                 logon_password: Optional[pulumi.Input[str]] = None,
                 logon_user: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 preconnection_blob: Optional[pulumi.Input[str]] = None,
                 preconnection_id: Optional[pulumi.Input[int]] = None,
                 remote_port: Optional[pulumi.Input[int]] = None,
                 restricted_admin: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 send_preconnection_id: Optional[pulumi.Input[str]] = None,
                 server_layout: Optional[pulumi.Input[str]] = None,
                 show_status_window: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input[str]] = None,
                 sso_credential: Optional[pulumi.Input[str]] = None,
                 sso_credential_sent_once: Optional[pulumi.Input[str]] = None,
                 sso_password: Optional[pulumi.Input[str]] = None,
                 sso_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vnc_keyboard_layout: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] additional_params: Additional parameters.
        :param pulumi.Input[str] apptype: Application type.
        :param pulumi.Input[str] color_depth: Color depth per pixel. Valid values: `32`, `16`, `8`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] domain: Login domain.
        :param pulumi.Input[str] folder: Network shared file folder parameter.
        :param pulumi.Input[Sequence[pulumi.Input['PortalBookmarkGroupBookmarkFormDataArgs']]] form_datas: Form data. The structure of `form_data` block is documented below.
        :param pulumi.Input[int] height: Screen height (range from 480 - 65535, default = 768).
        :param pulumi.Input[str] host: Host name/IP parameter.
        :param pulumi.Input[str] keyboard_layout: Keyboard layout.
        :param pulumi.Input[int] listening_port: Listening port (0 - 65535).
        :param pulumi.Input[str] load_balancing_info: The load balancing information or cookie which should be provided to the connection broker.
        :param pulumi.Input[str] logon_password: Logon password.
        :param pulumi.Input[str] logon_user: Logon user.
        :param pulumi.Input[str] name: Bookmark name.
        :param pulumi.Input[int] port: Remote port.
        :param pulumi.Input[str] preconnection_blob: An arbitrary string which identifies the RDP source.
        :param pulumi.Input[int] preconnection_id: The numeric ID of the RDP source (0-2147483648).
        :param pulumi.Input[int] remote_port: Remote port (0 - 65535).
        :param pulumi.Input[str] restricted_admin: Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] security: Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        :param pulumi.Input[str] send_preconnection_id: Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server_layout: Server side keyboard layout.
        :param pulumi.Input[str] show_status_window: Enable/disable showing of status window. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sso: Single Sign-On. Valid values: `disable`, `static`, `auto`.
        :param pulumi.Input[str] sso_credential: Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        :param pulumi.Input[str] sso_credential_sent_once: Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sso_password: SSO password.
        :param pulumi.Input[str] sso_username: SSO user name.
        :param pulumi.Input[str] url: URL parameter.
        :param pulumi.Input[str] vnc_keyboard_layout: Keyboard layout. Valid values: `default`, `da`, `nl`, `en-uk`, `en-uk-ext`, `fi`, `fr`, `fr-be`, `fr-ca-mul`, `de`, `de-ch`, `it`, `it-142`, `pt`, `pt-br-abnt2`, `no`, `gd`, `es`, `sv`, `us-intl`.
        :param pulumi.Input[int] width: Screen width (range from 640 - 65535, default = 1024).
        """
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vnc_keyboard_layout is not None:
            pulumi.set(__self__, "vnc_keyboard_layout", vnc_keyboard_layout)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[pulumi.Input[str]]:
        """
        Additional parameters.
        """
        return pulumi.get(self, "additional_params")

    @additional_params.setter
    def additional_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_params", value)

    @property
    @pulumi.getter
    def apptype(self) -> Optional[pulumi.Input[str]]:
        """
        Application type.
        """
        return pulumi.get(self, "apptype")

    @apptype.setter
    def apptype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apptype", value)

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[pulumi.Input[str]]:
        """
        Color depth per pixel. Valid values: `32`, `16`, `8`.
        """
        return pulumi.get(self, "color_depth")

    @color_depth.setter
    def color_depth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_depth", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Login domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        Network shared file folder parameter.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortalBookmarkGroupBookmarkFormDataArgs']]]]:
        """
        Form data. The structure of `form_data` block is documented below.
        """
        return pulumi.get(self, "form_datas")

    @form_datas.setter
    def form_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortalBookmarkGroupBookmarkFormDataArgs']]]]):
        pulumi.set(self, "form_datas", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        Screen height (range from 480 - 65535, default = 768).
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name/IP parameter.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Keyboard layout.
        """
        return pulumi.get(self, "keyboard_layout")

    @keyboard_layout.setter
    def keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyboard_layout", value)

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[pulumi.Input[int]]:
        """
        Listening port (0 - 65535).
        """
        return pulumi.get(self, "listening_port")

    @listening_port.setter
    def listening_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "listening_port", value)

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[pulumi.Input[str]]:
        """
        The load balancing information or cookie which should be provided to the connection broker.
        """
        return pulumi.get(self, "load_balancing_info")

    @load_balancing_info.setter
    def load_balancing_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_info", value)

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[pulumi.Input[str]]:
        """
        Logon password.
        """
        return pulumi.get(self, "logon_password")

    @logon_password.setter
    def logon_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_password", value)

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[pulumi.Input[str]]:
        """
        Logon user.
        """
        return pulumi.get(self, "logon_user")

    @logon_user.setter
    def logon_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_user", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Bookmark name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Remote port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary string which identifies the RDP source.
        """
        return pulumi.get(self, "preconnection_blob")

    @preconnection_blob.setter
    def preconnection_blob(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preconnection_blob", value)

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[pulumi.Input[int]]:
        """
        The numeric ID of the RDP source (0-2147483648).
        """
        return pulumi.get(self, "preconnection_id")

    @preconnection_id.setter
    def preconnection_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preconnection_id", value)

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[int]]:
        """
        Remote port (0 - 65535).
        """
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_port", value)

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restricted_admin")

    @restricted_admin.setter
    def restricted_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restricted_admin", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[str]]:
        """
        Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "send_preconnection_id")

    @send_preconnection_id.setter
    def send_preconnection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_preconnection_id", value)

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Server side keyboard layout.
        """
        return pulumi.get(self, "server_layout")

    @server_layout.setter
    def server_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_layout", value)

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable showing of status window. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "show_status_window")

    @show_status_window.setter
    def show_status_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "show_status_window", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input[str]]:
        """
        Single Sign-On. Valid values: `disable`, `static`, `auto`.
        """
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso", value)

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        """
        return pulumi.get(self, "sso_credential")

    @sso_credential.setter
    def sso_credential(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential", value)

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sso_credential_sent_once")

    @sso_credential_sent_once.setter
    def sso_credential_sent_once(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential_sent_once", value)

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[pulumi.Input[str]]:
        """
        SSO password.
        """
        return pulumi.get(self, "sso_password")

    @sso_password.setter
    def sso_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_password", value)

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[pulumi.Input[str]]:
        """
        SSO user name.
        """
        return pulumi.get(self, "sso_username")

    @sso_username.setter
    def sso_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL parameter.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="vncKeyboardLayout")
    def vnc_keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Keyboard layout. Valid values: `default`, `da`, `nl`, `en-uk`, `en-uk-ext`, `fi`, `fr`, `fr-be`, `fr-ca-mul`, `de`, `de-ch`, `it`, `it-142`, `pt`, `pt-br-abnt2`, `no`, `gd`, `es`, `sv`, `us-intl`.
        """
        return pulumi.get(self, "vnc_keyboard_layout")

    @vnc_keyboard_layout.setter
    def vnc_keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnc_keyboard_layout", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        Screen width (range from 640 - 65535, default = 1024).
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class PortalBookmarkGroupBookmarkFormDataArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] value: Value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalHostCheckPolicyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Host check software list name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Host check software list name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PortalIpPoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PortalIpv6PoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Portal name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Portal name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PortalIpv6SplitTunnelingRoutingAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Portal name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Portal name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PortalLandingPageArgs:
    def __init__(__self__, *,
                 form_datas: Optional[pulumi.Input[Sequence[pulumi.Input['PortalLandingPageFormDataArgs']]]] = None,
                 logout_url: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input[str]] = None,
                 sso_credential: Optional[pulumi.Input[str]] = None,
                 sso_password: Optional[pulumi.Input[str]] = None,
                 sso_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PortalLandingPageFormDataArgs']]] form_datas: Form data. The structure of `form_data` block is documented below.
        :param pulumi.Input[str] logout_url: Landing page log out URL.
        :param pulumi.Input[str] sso: Single sign-on. Valid values: `disable`, `static`, `auto`.
        :param pulumi.Input[str] sso_credential: Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        :param pulumi.Input[str] sso_password: SSO password.
        :param pulumi.Input[str] sso_username: SSO user name.
        :param pulumi.Input[str] url: Landing page URL.
        """
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if logout_url is not None:
            pulumi.set(__self__, "logout_url", logout_url)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortalLandingPageFormDataArgs']]]]:
        """
        Form data. The structure of `form_data` block is documented below.
        """
        return pulumi.get(self, "form_datas")

    @form_datas.setter
    def form_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortalLandingPageFormDataArgs']]]]):
        pulumi.set(self, "form_datas", value)

    @property
    @pulumi.getter(name="logoutUrl")
    def logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        Landing page log out URL.
        """
        return pulumi.get(self, "logout_url")

    @logout_url.setter
    def logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logout_url", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on. Valid values: `disable`, `static`, `auto`.
        """
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso", value)

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        """
        return pulumi.get(self, "sso_credential")

    @sso_credential.setter
    def sso_credential(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential", value)

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[pulumi.Input[str]]:
        """
        SSO password.
        """
        return pulumi.get(self, "sso_password")

    @sso_password.setter
    def sso_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_password", value)

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[pulumi.Input[str]]:
        """
        SSO user name.
        """
        return pulumi.get(self, "sso_username")

    @sso_username.setter
    def sso_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Landing page URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class PortalLandingPageFormDataArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] value: Value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalMacAddrCheckRuleArgs:
    def __init__(__self__, *,
                 mac_addr_lists: Optional[pulumi.Input[Sequence[pulumi.Input['PortalMacAddrCheckRuleMacAddrListArgs']]]] = None,
                 mac_addr_mask: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PortalMacAddrCheckRuleMacAddrListArgs']]] mac_addr_lists: Client MAC address list. The structure of `mac_addr_list` block is documented below.
        :param pulumi.Input[int] mac_addr_mask: Client MAC address mask.
        :param pulumi.Input[str] name: Client MAC address check rule name.
        """
        if mac_addr_lists is not None:
            pulumi.set(__self__, "mac_addr_lists", mac_addr_lists)
        if mac_addr_mask is not None:
            pulumi.set(__self__, "mac_addr_mask", mac_addr_mask)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="macAddrLists")
    def mac_addr_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortalMacAddrCheckRuleMacAddrListArgs']]]]:
        """
        Client MAC address list. The structure of `mac_addr_list` block is documented below.
        """
        return pulumi.get(self, "mac_addr_lists")

    @mac_addr_lists.setter
    def mac_addr_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortalMacAddrCheckRuleMacAddrListArgs']]]]):
        pulumi.set(self, "mac_addr_lists", value)

    @property
    @pulumi.getter(name="macAddrMask")
    def mac_addr_mask(self) -> Optional[pulumi.Input[int]]:
        """
        Client MAC address mask.
        """
        return pulumi.get(self, "mac_addr_mask")

    @mac_addr_mask.setter
    def mac_addr_mask(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_addr_mask", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Client MAC address check rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PortalMacAddrCheckRuleMacAddrListArgs:
    def __init__(__self__, *,
                 addr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] addr: Client MAC address.
        """
        if addr is not None:
            pulumi.set(__self__, "addr", addr)

    @property
    @pulumi.getter
    def addr(self) -> Optional[pulumi.Input[str]]:
        """
        Client MAC address.
        """
        return pulumi.get(self, "addr")

    @addr.setter
    def addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr", value)


@pulumi.input_type
class PortalOsCheckListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 latest_patch_level: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tolerance: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: OS check options. Valid values: `deny`, `allow`, `check-up-to-date`.
        :param pulumi.Input[str] latest_patch_level: Latest OS patch level.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[int] tolerance: OS patch level tolerance.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if latest_patch_level is not None:
            pulumi.set(__self__, "latest_patch_level", latest_patch_level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        OS check options. Valid values: `deny`, `allow`, `check-up-to-date`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="latestPatchLevel")
    def latest_patch_level(self) -> Optional[pulumi.Input[str]]:
        """
        Latest OS patch level.
        """
        return pulumi.get(self, "latest_patch_level")

    @latest_patch_level.setter
    def latest_patch_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_patch_level", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[pulumi.Input[int]]:
        """
        OS patch level tolerance.
        """
        return pulumi.get(self, "tolerance")

    @tolerance.setter
    def tolerance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerance", value)


@pulumi.input_type
class PortalSplitDnArgs:
    def __init__(__self__, *,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dns_server1: DNS server 1.
        :param pulumi.Input[str] dns_server2: DNS server 2.
        :param pulumi.Input[str] domains: Split DNS domains used for SSL-VPN clients separated by comma(,).
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] ipv6_dns_server1: IPv6 DNS server 1.
        :param pulumi.Input[str] ipv6_dns_server2: IPv6 DNS server 2.
        """
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv6_dns_server1 is not None:
            pulumi.set(__self__, "ipv6_dns_server1", ipv6_dns_server1)
        if ipv6_dns_server2 is not None:
            pulumi.set(__self__, "ipv6_dns_server2", ipv6_dns_server2)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 1.
        """
        return pulumi.get(self, "dns_server1")

    @dns_server1.setter
    def dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server1", value)

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 2.
        """
        return pulumi.get(self, "dns_server2")

    @dns_server2.setter
    def dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server2", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[str]]:
        """
        Split DNS domains used for SSL-VPN clients separated by comma(,).
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 DNS server 1.
        """
        return pulumi.get(self, "ipv6_dns_server1")

    @ipv6_dns_server1.setter
    def ipv6_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server1", value)

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 DNS server 2.
        """
        return pulumi.get(self, "ipv6_dns_server2")

    @ipv6_dns_server2.setter
    def ipv6_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server2", value)


@pulumi.input_type
class PortalSplitTunnelingRoutingAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserbookmarkBookmarkArgs:
    def __init__(__self__, *,
                 additional_params: Optional[pulumi.Input[str]] = None,
                 apptype: Optional[pulumi.Input[str]] = None,
                 color_depth: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 form_datas: Optional[pulumi.Input[Sequence[pulumi.Input['UserbookmarkBookmarkFormDataArgs']]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 keyboard_layout: Optional[pulumi.Input[str]] = None,
                 listening_port: Optional[pulumi.Input[int]] = None,
                 load_balancing_info: Optional[pulumi.Input[str]] = None,
                 logon_password: Optional[pulumi.Input[str]] = None,
                 logon_user: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 preconnection_blob: Optional[pulumi.Input[str]] = None,
                 preconnection_id: Optional[pulumi.Input[int]] = None,
                 remote_port: Optional[pulumi.Input[int]] = None,
                 restricted_admin: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 send_preconnection_id: Optional[pulumi.Input[str]] = None,
                 server_layout: Optional[pulumi.Input[str]] = None,
                 show_status_window: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input[str]] = None,
                 sso_credential: Optional[pulumi.Input[str]] = None,
                 sso_credential_sent_once: Optional[pulumi.Input[str]] = None,
                 sso_password: Optional[pulumi.Input[str]] = None,
                 sso_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vnc_keyboard_layout: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] additional_params: Additional parameters.
        :param pulumi.Input[str] apptype: Application type.
        :param pulumi.Input[str] color_depth: Color depth per pixel. Valid values: `32`, `16`, `8`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] domain: Login domain.
        :param pulumi.Input[str] folder: Network shared file folder parameter.
        :param pulumi.Input[Sequence[pulumi.Input['UserbookmarkBookmarkFormDataArgs']]] form_datas: Form data. The structure of `form_data` block is documented below.
        :param pulumi.Input[int] height: Screen height (range from 480 - 65535, default = 768).
        :param pulumi.Input[str] host: Host name/IP parameter.
        :param pulumi.Input[str] keyboard_layout: Keyboard layout.
        :param pulumi.Input[int] listening_port: Listening port (0 - 65535).
        :param pulumi.Input[str] load_balancing_info: The load balancing information or cookie which should be provided to the connection broker.
        :param pulumi.Input[str] logon_password: Logon password.
        :param pulumi.Input[str] logon_user: Logon user.
        :param pulumi.Input[str] name: Bookmark name.
        :param pulumi.Input[int] port: Remote port.
        :param pulumi.Input[str] preconnection_blob: An arbitrary string which identifies the RDP source.
        :param pulumi.Input[int] preconnection_id: The numeric ID of the RDP source (0-2147483648).
        :param pulumi.Input[int] remote_port: Remote port (0 - 65535).
        :param pulumi.Input[str] restricted_admin: Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] security: Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        :param pulumi.Input[str] send_preconnection_id: Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server_layout: Server side keyboard layout.
        :param pulumi.Input[str] show_status_window: Enable/disable showing of status window. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sso: Single Sign-On. Valid values: `disable`, `static`, `auto`.
        :param pulumi.Input[str] sso_credential: Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        :param pulumi.Input[str] sso_credential_sent_once: Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sso_password: SSO password.
        :param pulumi.Input[str] sso_username: SSO user name.
        :param pulumi.Input[str] url: URL parameter.
        :param pulumi.Input[str] vnc_keyboard_layout: Keyboard layout. Valid values: `default`, `da`, `nl`, `en-uk`, `en-uk-ext`, `fi`, `fr`, `fr-be`, `fr-ca-mul`, `de`, `de-ch`, `it`, `it-142`, `pt`, `pt-br-abnt2`, `no`, `gd`, `es`, `sv`, `us-intl`.
        :param pulumi.Input[int] width: Screen width (range from 640 - 65535, default = 1024).
        """
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vnc_keyboard_layout is not None:
            pulumi.set(__self__, "vnc_keyboard_layout", vnc_keyboard_layout)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[pulumi.Input[str]]:
        """
        Additional parameters.
        """
        return pulumi.get(self, "additional_params")

    @additional_params.setter
    def additional_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_params", value)

    @property
    @pulumi.getter
    def apptype(self) -> Optional[pulumi.Input[str]]:
        """
        Application type.
        """
        return pulumi.get(self, "apptype")

    @apptype.setter
    def apptype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apptype", value)

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[pulumi.Input[str]]:
        """
        Color depth per pixel. Valid values: `32`, `16`, `8`.
        """
        return pulumi.get(self, "color_depth")

    @color_depth.setter
    def color_depth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_depth", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Login domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        Network shared file folder parameter.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserbookmarkBookmarkFormDataArgs']]]]:
        """
        Form data. The structure of `form_data` block is documented below.
        """
        return pulumi.get(self, "form_datas")

    @form_datas.setter
    def form_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserbookmarkBookmarkFormDataArgs']]]]):
        pulumi.set(self, "form_datas", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        Screen height (range from 480 - 65535, default = 768).
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name/IP parameter.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Keyboard layout.
        """
        return pulumi.get(self, "keyboard_layout")

    @keyboard_layout.setter
    def keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyboard_layout", value)

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[pulumi.Input[int]]:
        """
        Listening port (0 - 65535).
        """
        return pulumi.get(self, "listening_port")

    @listening_port.setter
    def listening_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "listening_port", value)

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[pulumi.Input[str]]:
        """
        The load balancing information or cookie which should be provided to the connection broker.
        """
        return pulumi.get(self, "load_balancing_info")

    @load_balancing_info.setter
    def load_balancing_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_info", value)

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[pulumi.Input[str]]:
        """
        Logon password.
        """
        return pulumi.get(self, "logon_password")

    @logon_password.setter
    def logon_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_password", value)

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[pulumi.Input[str]]:
        """
        Logon user.
        """
        return pulumi.get(self, "logon_user")

    @logon_user.setter
    def logon_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_user", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Bookmark name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Remote port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary string which identifies the RDP source.
        """
        return pulumi.get(self, "preconnection_blob")

    @preconnection_blob.setter
    def preconnection_blob(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preconnection_blob", value)

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[pulumi.Input[int]]:
        """
        The numeric ID of the RDP source (0-2147483648).
        """
        return pulumi.get(self, "preconnection_id")

    @preconnection_id.setter
    def preconnection_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preconnection_id", value)

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[int]]:
        """
        Remote port (0 - 65535).
        """
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_port", value)

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restricted_admin")

    @restricted_admin.setter
    def restricted_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restricted_admin", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[str]]:
        """
        Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "send_preconnection_id")

    @send_preconnection_id.setter
    def send_preconnection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_preconnection_id", value)

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Server side keyboard layout.
        """
        return pulumi.get(self, "server_layout")

    @server_layout.setter
    def server_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_layout", value)

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable showing of status window. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "show_status_window")

    @show_status_window.setter
    def show_status_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "show_status_window", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input[str]]:
        """
        Single Sign-On. Valid values: `disable`, `static`, `auto`.
        """
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso", value)

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        """
        return pulumi.get(self, "sso_credential")

    @sso_credential.setter
    def sso_credential(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential", value)

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sso_credential_sent_once")

    @sso_credential_sent_once.setter
    def sso_credential_sent_once(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential_sent_once", value)

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[pulumi.Input[str]]:
        """
        SSO password.
        """
        return pulumi.get(self, "sso_password")

    @sso_password.setter
    def sso_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_password", value)

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[pulumi.Input[str]]:
        """
        SSO user name.
        """
        return pulumi.get(self, "sso_username")

    @sso_username.setter
    def sso_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL parameter.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="vncKeyboardLayout")
    def vnc_keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Keyboard layout. Valid values: `default`, `da`, `nl`, `en-uk`, `en-uk-ext`, `fi`, `fr`, `fr-be`, `fr-ca-mul`, `de`, `de-ch`, `it`, `it-142`, `pt`, `pt-br-abnt2`, `no`, `gd`, `es`, `sv`, `us-intl`.
        """
        return pulumi.get(self, "vnc_keyboard_layout")

    @vnc_keyboard_layout.setter
    def vnc_keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnc_keyboard_layout", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        Screen width (range from 640 - 65535, default = 1024).
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class UserbookmarkBookmarkFormDataArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] value: Value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class UsergroupbookmarkBookmarkArgs:
    def __init__(__self__, *,
                 additional_params: Optional[pulumi.Input[str]] = None,
                 apptype: Optional[pulumi.Input[str]] = None,
                 color_depth: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 form_datas: Optional[pulumi.Input[Sequence[pulumi.Input['UsergroupbookmarkBookmarkFormDataArgs']]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 keyboard_layout: Optional[pulumi.Input[str]] = None,
                 listening_port: Optional[pulumi.Input[int]] = None,
                 load_balancing_info: Optional[pulumi.Input[str]] = None,
                 logon_password: Optional[pulumi.Input[str]] = None,
                 logon_user: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 preconnection_blob: Optional[pulumi.Input[str]] = None,
                 preconnection_id: Optional[pulumi.Input[int]] = None,
                 remote_port: Optional[pulumi.Input[int]] = None,
                 restricted_admin: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 send_preconnection_id: Optional[pulumi.Input[str]] = None,
                 server_layout: Optional[pulumi.Input[str]] = None,
                 show_status_window: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input[str]] = None,
                 sso_credential: Optional[pulumi.Input[str]] = None,
                 sso_credential_sent_once: Optional[pulumi.Input[str]] = None,
                 sso_password: Optional[pulumi.Input[str]] = None,
                 sso_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vnc_keyboard_layout: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] additional_params: Additional parameters.
        :param pulumi.Input[str] apptype: Application type.
        :param pulumi.Input[str] color_depth: Color depth per pixel. Valid values: `32`, `16`, `8`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] domain: Login domain.
        :param pulumi.Input[str] folder: Network shared file folder parameter.
        :param pulumi.Input[Sequence[pulumi.Input['UsergroupbookmarkBookmarkFormDataArgs']]] form_datas: Form data. The structure of `form_data` block is documented below.
        :param pulumi.Input[int] height: Screen height (range from 480 - 65535, default = 768).
        :param pulumi.Input[str] host: Host name/IP parameter.
        :param pulumi.Input[str] keyboard_layout: Keyboard layout.
        :param pulumi.Input[int] listening_port: Listening port (0 - 65535).
        :param pulumi.Input[str] load_balancing_info: The load balancing information or cookie which should be provided to the connection broker.
        :param pulumi.Input[str] logon_password: Logon password.
        :param pulumi.Input[str] logon_user: Logon user.
        :param pulumi.Input[str] name: Bookmark name.
        :param pulumi.Input[int] port: Remote port.
        :param pulumi.Input[str] preconnection_blob: An arbitrary string which identifies the RDP source.
        :param pulumi.Input[int] preconnection_id: The numeric ID of the RDP source (0-2147483648).
        :param pulumi.Input[int] remote_port: Remote port (0 - 65535).
        :param pulumi.Input[str] restricted_admin: Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] security: Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        :param pulumi.Input[str] send_preconnection_id: Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server_layout: Server side keyboard layout.
        :param pulumi.Input[str] show_status_window: Enable/disable showing of status window. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sso: Single Sign-On. Valid values: `disable`, `static`, `auto`.
        :param pulumi.Input[str] sso_credential: Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        :param pulumi.Input[str] sso_credential_sent_once: Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sso_password: SSO password.
        :param pulumi.Input[str] sso_username: SSO user name.
        :param pulumi.Input[str] url: URL parameter.
        :param pulumi.Input[str] vnc_keyboard_layout: Keyboard layout. Valid values: `default`, `da`, `nl`, `en-uk`, `en-uk-ext`, `fi`, `fr`, `fr-be`, `fr-ca-mul`, `de`, `de-ch`, `it`, `it-142`, `pt`, `pt-br-abnt2`, `no`, `gd`, `es`, `sv`, `us-intl`.
        :param pulumi.Input[int] width: Screen width (range from 640 - 65535, default = 1024).
        """
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vnc_keyboard_layout is not None:
            pulumi.set(__self__, "vnc_keyboard_layout", vnc_keyboard_layout)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[pulumi.Input[str]]:
        """
        Additional parameters.
        """
        return pulumi.get(self, "additional_params")

    @additional_params.setter
    def additional_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_params", value)

    @property
    @pulumi.getter
    def apptype(self) -> Optional[pulumi.Input[str]]:
        """
        Application type.
        """
        return pulumi.get(self, "apptype")

    @apptype.setter
    def apptype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apptype", value)

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[pulumi.Input[str]]:
        """
        Color depth per pixel. Valid values: `32`, `16`, `8`.
        """
        return pulumi.get(self, "color_depth")

    @color_depth.setter
    def color_depth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_depth", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Login domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        Network shared file folder parameter.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UsergroupbookmarkBookmarkFormDataArgs']]]]:
        """
        Form data. The structure of `form_data` block is documented below.
        """
        return pulumi.get(self, "form_datas")

    @form_datas.setter
    def form_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UsergroupbookmarkBookmarkFormDataArgs']]]]):
        pulumi.set(self, "form_datas", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        Screen height (range from 480 - 65535, default = 768).
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name/IP parameter.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Keyboard layout.
        """
        return pulumi.get(self, "keyboard_layout")

    @keyboard_layout.setter
    def keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyboard_layout", value)

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[pulumi.Input[int]]:
        """
        Listening port (0 - 65535).
        """
        return pulumi.get(self, "listening_port")

    @listening_port.setter
    def listening_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "listening_port", value)

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[pulumi.Input[str]]:
        """
        The load balancing information or cookie which should be provided to the connection broker.
        """
        return pulumi.get(self, "load_balancing_info")

    @load_balancing_info.setter
    def load_balancing_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_info", value)

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[pulumi.Input[str]]:
        """
        Logon password.
        """
        return pulumi.get(self, "logon_password")

    @logon_password.setter
    def logon_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_password", value)

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[pulumi.Input[str]]:
        """
        Logon user.
        """
        return pulumi.get(self, "logon_user")

    @logon_user.setter
    def logon_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_user", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Bookmark name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Remote port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary string which identifies the RDP source.
        """
        return pulumi.get(self, "preconnection_blob")

    @preconnection_blob.setter
    def preconnection_blob(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preconnection_blob", value)

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[pulumi.Input[int]]:
        """
        The numeric ID of the RDP source (0-2147483648).
        """
        return pulumi.get(self, "preconnection_id")

    @preconnection_id.setter
    def preconnection_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preconnection_id", value)

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[int]]:
        """
        Remote port (0 - 65535).
        """
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_port", value)

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restricted_admin")

    @restricted_admin.setter
    def restricted_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restricted_admin", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[str]]:
        """
        Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "send_preconnection_id")

    @send_preconnection_id.setter
    def send_preconnection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_preconnection_id", value)

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Server side keyboard layout.
        """
        return pulumi.get(self, "server_layout")

    @server_layout.setter
    def server_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_layout", value)

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable showing of status window. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "show_status_window")

    @show_status_window.setter
    def show_status_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "show_status_window", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input[str]]:
        """
        Single Sign-On. Valid values: `disable`, `static`, `auto`.
        """
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso", value)

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        """
        return pulumi.get(self, "sso_credential")

    @sso_credential.setter
    def sso_credential(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential", value)

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sso_credential_sent_once")

    @sso_credential_sent_once.setter
    def sso_credential_sent_once(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential_sent_once", value)

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[pulumi.Input[str]]:
        """
        SSO password.
        """
        return pulumi.get(self, "sso_password")

    @sso_password.setter
    def sso_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_password", value)

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[pulumi.Input[str]]:
        """
        SSO user name.
        """
        return pulumi.get(self, "sso_username")

    @sso_username.setter
    def sso_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL parameter.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="vncKeyboardLayout")
    def vnc_keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Keyboard layout. Valid values: `default`, `da`, `nl`, `en-uk`, `en-uk-ext`, `fi`, `fr`, `fr-be`, `fr-ca-mul`, `de`, `de-ch`, `it`, `it-142`, `pt`, `pt-br-abnt2`, `no`, `gd`, `es`, `sv`, `us-intl`.
        """
        return pulumi.get(self, "vnc_keyboard_layout")

    @vnc_keyboard_layout.setter
    def vnc_keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnc_keyboard_layout", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        Screen width (range from 640 - 65535, default = 1024).
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class UsergroupbookmarkBookmarkFormDataArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] value: Value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


