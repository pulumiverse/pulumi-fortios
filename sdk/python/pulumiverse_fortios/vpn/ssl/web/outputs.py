# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .... import _utilities
from . import outputs

__all__ = [
    'HostchecksoftwareCheckItemList',
    'HostchecksoftwareCheckItemListMd5',
    'PortalBookmarkGroup',
    'PortalBookmarkGroupBookmark',
    'PortalBookmarkGroupBookmarkFormData',
    'PortalHostCheckPolicy',
    'PortalIpPool',
    'PortalIpv6Pool',
    'PortalIpv6SplitTunnelingRoutingAddress',
    'PortalLandingPage',
    'PortalLandingPageFormData',
    'PortalMacAddrCheckRule',
    'PortalMacAddrCheckRuleMacAddrList',
    'PortalOsCheckList',
    'PortalSplitDn',
    'PortalSplitTunnelingRoutingAddress',
    'UserbookmarkBookmark',
    'UserbookmarkBookmarkFormData',
    'UsergroupbookmarkBookmark',
    'UsergroupbookmarkBookmarkFormData',
]

@pulumi.output_type
class HostchecksoftwareCheckItemList(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 id: Optional[int] = None,
                 md5s: Optional[Sequence['outputs.HostchecksoftwareCheckItemListMd5']] = None,
                 target: Optional[str] = None,
                 type: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str action: Action. Valid values: `require`, `deny`.
        :param int id: Hex string of MD5 checksum.
        :param Sequence['HostchecksoftwareCheckItemListMd5Args'] md5s: MD5 checksum. The structure of `md5s` block is documented below.
               
               The `md5s` block supports:
        :param str target: Target.
        :param str type: Type. Valid values: `file`, `registry`, `process`.
        :param str version: Version.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if md5s is not None:
            pulumi.set(__self__, "md5s", md5s)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Action. Valid values: `require`, `deny`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Hex string of MD5 checksum.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def md5s(self) -> Optional[Sequence['outputs.HostchecksoftwareCheckItemListMd5']]:
        """
        MD5 checksum. The structure of `md5s` block is documented below.

        The `md5s` block supports:
        """
        return pulumi.get(self, "md5s")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        Target.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type. Valid values: `file`, `registry`, `process`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class HostchecksoftwareCheckItemListMd5(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: Hex string of MD5 checksum.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Hex string of MD5 checksum.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PortalBookmarkGroup(dict):
    def __init__(__self__, *,
                 bookmarks: Optional[Sequence['outputs.PortalBookmarkGroupBookmark']] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['PortalBookmarkGroupBookmarkArgs'] bookmarks: Bookmark table. The structure of `bookmarks` block is documented below.
        :param str name: Bookmark group name.
        """
        if bookmarks is not None:
            pulumi.set(__self__, "bookmarks", bookmarks)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def bookmarks(self) -> Optional[Sequence['outputs.PortalBookmarkGroupBookmark']]:
        """
        Bookmark table. The structure of `bookmarks` block is documented below.
        """
        return pulumi.get(self, "bookmarks")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Bookmark group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PortalBookmarkGroupBookmark(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalParams":
            suggest = "additional_params"
        elif key == "colorDepth":
            suggest = "color_depth"
        elif key == "formDatas":
            suggest = "form_datas"
        elif key == "keyboardLayout":
            suggest = "keyboard_layout"
        elif key == "listeningPort":
            suggest = "listening_port"
        elif key == "loadBalancingInfo":
            suggest = "load_balancing_info"
        elif key == "logonPassword":
            suggest = "logon_password"
        elif key == "logonUser":
            suggest = "logon_user"
        elif key == "preconnectionBlob":
            suggest = "preconnection_blob"
        elif key == "preconnectionId":
            suggest = "preconnection_id"
        elif key == "remotePort":
            suggest = "remote_port"
        elif key == "restrictedAdmin":
            suggest = "restricted_admin"
        elif key == "sendPreconnectionId":
            suggest = "send_preconnection_id"
        elif key == "serverLayout":
            suggest = "server_layout"
        elif key == "showStatusWindow":
            suggest = "show_status_window"
        elif key == "ssoCredential":
            suggest = "sso_credential"
        elif key == "ssoCredentialSentOnce":
            suggest = "sso_credential_sent_once"
        elif key == "ssoPassword":
            suggest = "sso_password"
        elif key == "ssoUsername":
            suggest = "sso_username"
        elif key == "vncKeyboardLayout":
            suggest = "vnc_keyboard_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortalBookmarkGroupBookmark. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortalBookmarkGroupBookmark.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortalBookmarkGroupBookmark.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_params: Optional[str] = None,
                 apptype: Optional[str] = None,
                 color_depth: Optional[str] = None,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 folder: Optional[str] = None,
                 form_datas: Optional[Sequence['outputs.PortalBookmarkGroupBookmarkFormData']] = None,
                 height: Optional[int] = None,
                 host: Optional[str] = None,
                 keyboard_layout: Optional[str] = None,
                 listening_port: Optional[int] = None,
                 load_balancing_info: Optional[str] = None,
                 logon_password: Optional[str] = None,
                 logon_user: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 preconnection_blob: Optional[str] = None,
                 preconnection_id: Optional[int] = None,
                 remote_port: Optional[int] = None,
                 restricted_admin: Optional[str] = None,
                 security: Optional[str] = None,
                 send_preconnection_id: Optional[str] = None,
                 server_layout: Optional[str] = None,
                 show_status_window: Optional[str] = None,
                 sso: Optional[str] = None,
                 sso_credential: Optional[str] = None,
                 sso_credential_sent_once: Optional[str] = None,
                 sso_password: Optional[str] = None,
                 sso_username: Optional[str] = None,
                 url: Optional[str] = None,
                 vnc_keyboard_layout: Optional[str] = None,
                 width: Optional[int] = None):
        """
        :param str additional_params: Additional parameters.
        :param str apptype: Application type.
        :param str color_depth: Color depth per pixel. Valid values: `32`, `16`, `8`.
        :param str description: Description.
        :param str domain: Login domain.
        :param str folder: Network shared file folder parameter.
        :param Sequence['PortalBookmarkGroupBookmarkFormDataArgs'] form_datas: Form data. The structure of `form_data` block is documented below.
        :param int height: Screen height (range from 480 - 65535, default = 768).
        :param str host: Host name/IP parameter.
        :param str keyboard_layout: Keyboard layout.
        :param int listening_port: Listening port (0 - 65535).
        :param str load_balancing_info: The load balancing information or cookie which should be provided to the connection broker.
        :param str logon_password: Logon password.
        :param str logon_user: Logon user.
        :param str name: Bookmark name.
        :param int port: Remote port.
        :param str preconnection_blob: An arbitrary string which identifies the RDP source.
        :param int preconnection_id: The numeric ID of the RDP source (0-2147483648).
        :param int remote_port: Remote port (0 - 65535).
        :param str restricted_admin: Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        :param str security: Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        :param str send_preconnection_id: Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        :param str server_layout: Server side keyboard layout.
        :param str show_status_window: Enable/disable showing of status window. Valid values: `enable`, `disable`.
        :param str sso: Single Sign-On. Valid values: `disable`, `static`, `auto`.
        :param str sso_credential: Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        :param str sso_credential_sent_once: Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        :param str sso_password: SSO password.
        :param str sso_username: SSO user name.
        :param str url: URL parameter.
        :param str vnc_keyboard_layout: Keyboard layout. Valid values: `default`, `da`, `nl`, `en-uk`, `en-uk-ext`, `fi`, `fr`, `fr-be`, `fr-ca-mul`, `de`, `de-ch`, `it`, `it-142`, `pt`, `pt-br-abnt2`, `no`, `gd`, `es`, `sv`, `us-intl`.
        :param int width: Screen width (range from 640 - 65535, default = 1024).
        """
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vnc_keyboard_layout is not None:
            pulumi.set(__self__, "vnc_keyboard_layout", vnc_keyboard_layout)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[str]:
        """
        Additional parameters.
        """
        return pulumi.get(self, "additional_params")

    @property
    @pulumi.getter
    def apptype(self) -> Optional[str]:
        """
        Application type.
        """
        return pulumi.get(self, "apptype")

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[str]:
        """
        Color depth per pixel. Valid values: `32`, `16`, `8`.
        """
        return pulumi.get(self, "color_depth")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Login domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def folder(self) -> Optional[str]:
        """
        Network shared file folder parameter.
        """
        return pulumi.get(self, "folder")

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[Sequence['outputs.PortalBookmarkGroupBookmarkFormData']]:
        """
        Form data. The structure of `form_data` block is documented below.
        """
        return pulumi.get(self, "form_datas")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        """
        Screen height (range from 480 - 65535, default = 768).
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name/IP parameter.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[str]:
        """
        Keyboard layout.
        """
        return pulumi.get(self, "keyboard_layout")

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[int]:
        """
        Listening port (0 - 65535).
        """
        return pulumi.get(self, "listening_port")

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[str]:
        """
        The load balancing information or cookie which should be provided to the connection broker.
        """
        return pulumi.get(self, "load_balancing_info")

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[str]:
        """
        Logon password.
        """
        return pulumi.get(self, "logon_password")

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[str]:
        """
        Logon user.
        """
        return pulumi.get(self, "logon_user")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Bookmark name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Remote port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[str]:
        """
        An arbitrary string which identifies the RDP source.
        """
        return pulumi.get(self, "preconnection_blob")

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[int]:
        """
        The numeric ID of the RDP source (0-2147483648).
        """
        return pulumi.get(self, "preconnection_id")

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[int]:
        """
        Remote port (0 - 65535).
        """
        return pulumi.get(self, "remote_port")

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[str]:
        """
        Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restricted_admin")

    @property
    @pulumi.getter
    def security(self) -> Optional[str]:
        """
        Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        """
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[str]:
        """
        Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "send_preconnection_id")

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[str]:
        """
        Server side keyboard layout.
        """
        return pulumi.get(self, "server_layout")

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[str]:
        """
        Enable/disable showing of status window. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "show_status_window")

    @property
    @pulumi.getter
    def sso(self) -> Optional[str]:
        """
        Single Sign-On. Valid values: `disable`, `static`, `auto`.
        """
        return pulumi.get(self, "sso")

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[str]:
        """
        Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        """
        return pulumi.get(self, "sso_credential")

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[str]:
        """
        Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sso_credential_sent_once")

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[str]:
        """
        SSO password.
        """
        return pulumi.get(self, "sso_password")

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[str]:
        """
        SSO user name.
        """
        return pulumi.get(self, "sso_username")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL parameter.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="vncKeyboardLayout")
    def vnc_keyboard_layout(self) -> Optional[str]:
        """
        Keyboard layout. Valid values: `default`, `da`, `nl`, `en-uk`, `en-uk-ext`, `fi`, `fr`, `fr-be`, `fr-ca-mul`, `de`, `de-ch`, `it`, `it-142`, `pt`, `pt-br-abnt2`, `no`, `gd`, `es`, `sv`, `us-intl`.
        """
        return pulumi.get(self, "vnc_keyboard_layout")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        """
        Screen width (range from 640 - 65535, default = 1024).
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class PortalBookmarkGroupBookmarkFormData(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name.
        :param str value: Value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PortalHostCheckPolicy(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Host check software list name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Host check software list name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PortalIpPool(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PortalIpv6Pool(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Portal name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Portal name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PortalIpv6SplitTunnelingRoutingAddress(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Portal name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Portal name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PortalLandingPage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formDatas":
            suggest = "form_datas"
        elif key == "logoutUrl":
            suggest = "logout_url"
        elif key == "ssoCredential":
            suggest = "sso_credential"
        elif key == "ssoPassword":
            suggest = "sso_password"
        elif key == "ssoUsername":
            suggest = "sso_username"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortalLandingPage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortalLandingPage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortalLandingPage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 form_datas: Optional[Sequence['outputs.PortalLandingPageFormData']] = None,
                 logout_url: Optional[str] = None,
                 sso: Optional[str] = None,
                 sso_credential: Optional[str] = None,
                 sso_password: Optional[str] = None,
                 sso_username: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param Sequence['PortalLandingPageFormDataArgs'] form_datas: Form data. The structure of `form_data` block is documented below.
        :param str logout_url: Landing page log out URL.
        :param str sso: Single sign-on. Valid values: `disable`, `static`, `auto`.
        :param str sso_credential: Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        :param str sso_password: SSO password.
        :param str sso_username: SSO user name.
        :param str url: Landing page URL.
        """
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if logout_url is not None:
            pulumi.set(__self__, "logout_url", logout_url)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[Sequence['outputs.PortalLandingPageFormData']]:
        """
        Form data. The structure of `form_data` block is documented below.
        """
        return pulumi.get(self, "form_datas")

    @property
    @pulumi.getter(name="logoutUrl")
    def logout_url(self) -> Optional[str]:
        """
        Landing page log out URL.
        """
        return pulumi.get(self, "logout_url")

    @property
    @pulumi.getter
    def sso(self) -> Optional[str]:
        """
        Single sign-on. Valid values: `disable`, `static`, `auto`.
        """
        return pulumi.get(self, "sso")

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[str]:
        """
        Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        """
        return pulumi.get(self, "sso_credential")

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[str]:
        """
        SSO password.
        """
        return pulumi.get(self, "sso_password")

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[str]:
        """
        SSO user name.
        """
        return pulumi.get(self, "sso_username")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        Landing page URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class PortalLandingPageFormData(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name.
        :param str value: Value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PortalMacAddrCheckRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "macAddrLists":
            suggest = "mac_addr_lists"
        elif key == "macAddrMask":
            suggest = "mac_addr_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortalMacAddrCheckRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortalMacAddrCheckRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortalMacAddrCheckRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mac_addr_lists: Optional[Sequence['outputs.PortalMacAddrCheckRuleMacAddrList']] = None,
                 mac_addr_mask: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param Sequence['PortalMacAddrCheckRuleMacAddrListArgs'] mac_addr_lists: Client MAC address list. The structure of `mac_addr_list` block is documented below.
        :param int mac_addr_mask: Client MAC address mask.
        :param str name: Client MAC address check rule name.
        """
        if mac_addr_lists is not None:
            pulumi.set(__self__, "mac_addr_lists", mac_addr_lists)
        if mac_addr_mask is not None:
            pulumi.set(__self__, "mac_addr_mask", mac_addr_mask)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="macAddrLists")
    def mac_addr_lists(self) -> Optional[Sequence['outputs.PortalMacAddrCheckRuleMacAddrList']]:
        """
        Client MAC address list. The structure of `mac_addr_list` block is documented below.
        """
        return pulumi.get(self, "mac_addr_lists")

    @property
    @pulumi.getter(name="macAddrMask")
    def mac_addr_mask(self) -> Optional[int]:
        """
        Client MAC address mask.
        """
        return pulumi.get(self, "mac_addr_mask")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Client MAC address check rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PortalMacAddrCheckRuleMacAddrList(dict):
    def __init__(__self__, *,
                 addr: Optional[str] = None):
        """
        :param str addr: Client MAC address.
        """
        if addr is not None:
            pulumi.set(__self__, "addr", addr)

    @property
    @pulumi.getter
    def addr(self) -> Optional[str]:
        """
        Client MAC address.
        """
        return pulumi.get(self, "addr")


@pulumi.output_type
class PortalOsCheckList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "latestPatchLevel":
            suggest = "latest_patch_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortalOsCheckList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortalOsCheckList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortalOsCheckList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 latest_patch_level: Optional[str] = None,
                 name: Optional[str] = None,
                 tolerance: Optional[int] = None):
        """
        :param str action: OS check options. Valid values: `deny`, `allow`, `check-up-to-date`.
        :param str latest_patch_level: Latest OS patch level.
        :param str name: Name.
        :param int tolerance: OS patch level tolerance.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if latest_patch_level is not None:
            pulumi.set(__self__, "latest_patch_level", latest_patch_level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        OS check options. Valid values: `deny`, `allow`, `check-up-to-date`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="latestPatchLevel")
    def latest_patch_level(self) -> Optional[str]:
        """
        Latest OS patch level.
        """
        return pulumi.get(self, "latest_patch_level")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[int]:
        """
        OS patch level tolerance.
        """
        return pulumi.get(self, "tolerance")


@pulumi.output_type
class PortalSplitDn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServer1":
            suggest = "dns_server1"
        elif key == "dnsServer2":
            suggest = "dns_server2"
        elif key == "ipv6DnsServer1":
            suggest = "ipv6_dns_server1"
        elif key == "ipv6DnsServer2":
            suggest = "ipv6_dns_server2"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortalSplitDn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortalSplitDn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortalSplitDn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_server1: Optional[str] = None,
                 dns_server2: Optional[str] = None,
                 domains: Optional[str] = None,
                 id: Optional[int] = None,
                 ipv6_dns_server1: Optional[str] = None,
                 ipv6_dns_server2: Optional[str] = None):
        """
        :param str dns_server1: DNS server 1.
        :param str dns_server2: DNS server 2.
        :param str domains: Split DNS domains used for SSL-VPN clients separated by comma(,).
        :param int id: ID.
        :param str ipv6_dns_server1: IPv6 DNS server 1.
        :param str ipv6_dns_server2: IPv6 DNS server 2.
        """
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv6_dns_server1 is not None:
            pulumi.set(__self__, "ipv6_dns_server1", ipv6_dns_server1)
        if ipv6_dns_server2 is not None:
            pulumi.set(__self__, "ipv6_dns_server2", ipv6_dns_server2)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[str]:
        """
        DNS server 1.
        """
        return pulumi.get(self, "dns_server1")

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[str]:
        """
        DNS server 2.
        """
        return pulumi.get(self, "dns_server2")

    @property
    @pulumi.getter
    def domains(self) -> Optional[str]:
        """
        Split DNS domains used for SSL-VPN clients separated by comma(,).
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> Optional[str]:
        """
        IPv6 DNS server 1.
        """
        return pulumi.get(self, "ipv6_dns_server1")

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> Optional[str]:
        """
        IPv6 DNS server 2.
        """
        return pulumi.get(self, "ipv6_dns_server2")


@pulumi.output_type
class PortalSplitTunnelingRoutingAddress(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserbookmarkBookmark(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalParams":
            suggest = "additional_params"
        elif key == "colorDepth":
            suggest = "color_depth"
        elif key == "formDatas":
            suggest = "form_datas"
        elif key == "keyboardLayout":
            suggest = "keyboard_layout"
        elif key == "listeningPort":
            suggest = "listening_port"
        elif key == "loadBalancingInfo":
            suggest = "load_balancing_info"
        elif key == "logonPassword":
            suggest = "logon_password"
        elif key == "logonUser":
            suggest = "logon_user"
        elif key == "preconnectionBlob":
            suggest = "preconnection_blob"
        elif key == "preconnectionId":
            suggest = "preconnection_id"
        elif key == "remotePort":
            suggest = "remote_port"
        elif key == "restrictedAdmin":
            suggest = "restricted_admin"
        elif key == "sendPreconnectionId":
            suggest = "send_preconnection_id"
        elif key == "serverLayout":
            suggest = "server_layout"
        elif key == "showStatusWindow":
            suggest = "show_status_window"
        elif key == "ssoCredential":
            suggest = "sso_credential"
        elif key == "ssoCredentialSentOnce":
            suggest = "sso_credential_sent_once"
        elif key == "ssoPassword":
            suggest = "sso_password"
        elif key == "ssoUsername":
            suggest = "sso_username"
        elif key == "vncKeyboardLayout":
            suggest = "vnc_keyboard_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserbookmarkBookmark. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserbookmarkBookmark.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserbookmarkBookmark.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_params: Optional[str] = None,
                 apptype: Optional[str] = None,
                 color_depth: Optional[str] = None,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 folder: Optional[str] = None,
                 form_datas: Optional[Sequence['outputs.UserbookmarkBookmarkFormData']] = None,
                 height: Optional[int] = None,
                 host: Optional[str] = None,
                 keyboard_layout: Optional[str] = None,
                 listening_port: Optional[int] = None,
                 load_balancing_info: Optional[str] = None,
                 logon_password: Optional[str] = None,
                 logon_user: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 preconnection_blob: Optional[str] = None,
                 preconnection_id: Optional[int] = None,
                 remote_port: Optional[int] = None,
                 restricted_admin: Optional[str] = None,
                 security: Optional[str] = None,
                 send_preconnection_id: Optional[str] = None,
                 server_layout: Optional[str] = None,
                 show_status_window: Optional[str] = None,
                 sso: Optional[str] = None,
                 sso_credential: Optional[str] = None,
                 sso_credential_sent_once: Optional[str] = None,
                 sso_password: Optional[str] = None,
                 sso_username: Optional[str] = None,
                 url: Optional[str] = None,
                 vnc_keyboard_layout: Optional[str] = None,
                 width: Optional[int] = None):
        """
        :param str additional_params: Additional parameters.
        :param str apptype: Application type.
        :param str color_depth: Color depth per pixel. Valid values: `32`, `16`, `8`.
        :param str description: Description.
        :param str domain: Login domain.
        :param str folder: Network shared file folder parameter.
        :param Sequence['UserbookmarkBookmarkFormDataArgs'] form_datas: Form data. The structure of `form_data` block is documented below.
        :param int height: Screen height (range from 480 - 65535, default = 768).
        :param str host: Host name/IP parameter.
        :param str keyboard_layout: Keyboard layout.
        :param int listening_port: Listening port (0 - 65535).
        :param str load_balancing_info: The load balancing information or cookie which should be provided to the connection broker.
        :param str logon_password: Logon password.
        :param str logon_user: Logon user.
        :param str name: Bookmark name.
        :param int port: Remote port.
        :param str preconnection_blob: An arbitrary string which identifies the RDP source.
        :param int preconnection_id: The numeric ID of the RDP source (0-2147483648).
        :param int remote_port: Remote port (0 - 65535).
        :param str restricted_admin: Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        :param str security: Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        :param str send_preconnection_id: Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        :param str server_layout: Server side keyboard layout.
        :param str show_status_window: Enable/disable showing of status window. Valid values: `enable`, `disable`.
        :param str sso: Single Sign-On. Valid values: `disable`, `static`, `auto`.
        :param str sso_credential: Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        :param str sso_credential_sent_once: Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        :param str sso_password: SSO password.
        :param str sso_username: SSO user name.
        :param str url: URL parameter.
        :param str vnc_keyboard_layout: Keyboard layout. Valid values: `default`, `da`, `nl`, `en-uk`, `en-uk-ext`, `fi`, `fr`, `fr-be`, `fr-ca-mul`, `de`, `de-ch`, `it`, `it-142`, `pt`, `pt-br-abnt2`, `no`, `gd`, `es`, `sv`, `us-intl`.
        :param int width: Screen width (range from 640 - 65535, default = 1024).
        """
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vnc_keyboard_layout is not None:
            pulumi.set(__self__, "vnc_keyboard_layout", vnc_keyboard_layout)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[str]:
        """
        Additional parameters.
        """
        return pulumi.get(self, "additional_params")

    @property
    @pulumi.getter
    def apptype(self) -> Optional[str]:
        """
        Application type.
        """
        return pulumi.get(self, "apptype")

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[str]:
        """
        Color depth per pixel. Valid values: `32`, `16`, `8`.
        """
        return pulumi.get(self, "color_depth")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Login domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def folder(self) -> Optional[str]:
        """
        Network shared file folder parameter.
        """
        return pulumi.get(self, "folder")

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[Sequence['outputs.UserbookmarkBookmarkFormData']]:
        """
        Form data. The structure of `form_data` block is documented below.
        """
        return pulumi.get(self, "form_datas")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        """
        Screen height (range from 480 - 65535, default = 768).
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name/IP parameter.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[str]:
        """
        Keyboard layout.
        """
        return pulumi.get(self, "keyboard_layout")

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[int]:
        """
        Listening port (0 - 65535).
        """
        return pulumi.get(self, "listening_port")

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[str]:
        """
        The load balancing information or cookie which should be provided to the connection broker.
        """
        return pulumi.get(self, "load_balancing_info")

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[str]:
        """
        Logon password.
        """
        return pulumi.get(self, "logon_password")

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[str]:
        """
        Logon user.
        """
        return pulumi.get(self, "logon_user")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Bookmark name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Remote port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[str]:
        """
        An arbitrary string which identifies the RDP source.
        """
        return pulumi.get(self, "preconnection_blob")

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[int]:
        """
        The numeric ID of the RDP source (0-2147483648).
        """
        return pulumi.get(self, "preconnection_id")

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[int]:
        """
        Remote port (0 - 65535).
        """
        return pulumi.get(self, "remote_port")

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[str]:
        """
        Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restricted_admin")

    @property
    @pulumi.getter
    def security(self) -> Optional[str]:
        """
        Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        """
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[str]:
        """
        Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "send_preconnection_id")

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[str]:
        """
        Server side keyboard layout.
        """
        return pulumi.get(self, "server_layout")

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[str]:
        """
        Enable/disable showing of status window. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "show_status_window")

    @property
    @pulumi.getter
    def sso(self) -> Optional[str]:
        """
        Single Sign-On. Valid values: `disable`, `static`, `auto`.
        """
        return pulumi.get(self, "sso")

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[str]:
        """
        Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        """
        return pulumi.get(self, "sso_credential")

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[str]:
        """
        Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sso_credential_sent_once")

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[str]:
        """
        SSO password.
        """
        return pulumi.get(self, "sso_password")

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[str]:
        """
        SSO user name.
        """
        return pulumi.get(self, "sso_username")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL parameter.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="vncKeyboardLayout")
    def vnc_keyboard_layout(self) -> Optional[str]:
        """
        Keyboard layout. Valid values: `default`, `da`, `nl`, `en-uk`, `en-uk-ext`, `fi`, `fr`, `fr-be`, `fr-ca-mul`, `de`, `de-ch`, `it`, `it-142`, `pt`, `pt-br-abnt2`, `no`, `gd`, `es`, `sv`, `us-intl`.
        """
        return pulumi.get(self, "vnc_keyboard_layout")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        """
        Screen width (range from 640 - 65535, default = 1024).
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class UserbookmarkBookmarkFormData(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name.
        :param str value: Value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UsergroupbookmarkBookmark(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalParams":
            suggest = "additional_params"
        elif key == "colorDepth":
            suggest = "color_depth"
        elif key == "formDatas":
            suggest = "form_datas"
        elif key == "keyboardLayout":
            suggest = "keyboard_layout"
        elif key == "listeningPort":
            suggest = "listening_port"
        elif key == "loadBalancingInfo":
            suggest = "load_balancing_info"
        elif key == "logonPassword":
            suggest = "logon_password"
        elif key == "logonUser":
            suggest = "logon_user"
        elif key == "preconnectionBlob":
            suggest = "preconnection_blob"
        elif key == "preconnectionId":
            suggest = "preconnection_id"
        elif key == "remotePort":
            suggest = "remote_port"
        elif key == "restrictedAdmin":
            suggest = "restricted_admin"
        elif key == "sendPreconnectionId":
            suggest = "send_preconnection_id"
        elif key == "serverLayout":
            suggest = "server_layout"
        elif key == "showStatusWindow":
            suggest = "show_status_window"
        elif key == "ssoCredential":
            suggest = "sso_credential"
        elif key == "ssoCredentialSentOnce":
            suggest = "sso_credential_sent_once"
        elif key == "ssoPassword":
            suggest = "sso_password"
        elif key == "ssoUsername":
            suggest = "sso_username"
        elif key == "vncKeyboardLayout":
            suggest = "vnc_keyboard_layout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UsergroupbookmarkBookmark. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UsergroupbookmarkBookmark.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UsergroupbookmarkBookmark.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_params: Optional[str] = None,
                 apptype: Optional[str] = None,
                 color_depth: Optional[str] = None,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 folder: Optional[str] = None,
                 form_datas: Optional[Sequence['outputs.UsergroupbookmarkBookmarkFormData']] = None,
                 height: Optional[int] = None,
                 host: Optional[str] = None,
                 keyboard_layout: Optional[str] = None,
                 listening_port: Optional[int] = None,
                 load_balancing_info: Optional[str] = None,
                 logon_password: Optional[str] = None,
                 logon_user: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None,
                 preconnection_blob: Optional[str] = None,
                 preconnection_id: Optional[int] = None,
                 remote_port: Optional[int] = None,
                 restricted_admin: Optional[str] = None,
                 security: Optional[str] = None,
                 send_preconnection_id: Optional[str] = None,
                 server_layout: Optional[str] = None,
                 show_status_window: Optional[str] = None,
                 sso: Optional[str] = None,
                 sso_credential: Optional[str] = None,
                 sso_credential_sent_once: Optional[str] = None,
                 sso_password: Optional[str] = None,
                 sso_username: Optional[str] = None,
                 url: Optional[str] = None,
                 vnc_keyboard_layout: Optional[str] = None,
                 width: Optional[int] = None):
        """
        :param str additional_params: Additional parameters.
        :param str apptype: Application type.
        :param str color_depth: Color depth per pixel. Valid values: `32`, `16`, `8`.
        :param str description: Description.
        :param str domain: Login domain.
        :param str folder: Network shared file folder parameter.
        :param Sequence['UsergroupbookmarkBookmarkFormDataArgs'] form_datas: Form data. The structure of `form_data` block is documented below.
        :param int height: Screen height (range from 480 - 65535, default = 768).
        :param str host: Host name/IP parameter.
        :param str keyboard_layout: Keyboard layout.
        :param int listening_port: Listening port (0 - 65535).
        :param str load_balancing_info: The load balancing information or cookie which should be provided to the connection broker.
        :param str logon_password: Logon password.
        :param str logon_user: Logon user.
        :param str name: Bookmark name.
        :param int port: Remote port.
        :param str preconnection_blob: An arbitrary string which identifies the RDP source.
        :param int preconnection_id: The numeric ID of the RDP source (0-2147483648).
        :param int remote_port: Remote port (0 - 65535).
        :param str restricted_admin: Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        :param str security: Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        :param str send_preconnection_id: Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        :param str server_layout: Server side keyboard layout.
        :param str show_status_window: Enable/disable showing of status window. Valid values: `enable`, `disable`.
        :param str sso: Single Sign-On. Valid values: `disable`, `static`, `auto`.
        :param str sso_credential: Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        :param str sso_credential_sent_once: Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        :param str sso_password: SSO password.
        :param str sso_username: SSO user name.
        :param str url: URL parameter.
        :param str vnc_keyboard_layout: Keyboard layout. Valid values: `default`, `da`, `nl`, `en-uk`, `en-uk-ext`, `fi`, `fr`, `fr-be`, `fr-ca-mul`, `de`, `de-ch`, `it`, `it-142`, `pt`, `pt-br-abnt2`, `no`, `gd`, `es`, `sv`, `us-intl`.
        :param int width: Screen width (range from 640 - 65535, default = 1024).
        """
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vnc_keyboard_layout is not None:
            pulumi.set(__self__, "vnc_keyboard_layout", vnc_keyboard_layout)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[str]:
        """
        Additional parameters.
        """
        return pulumi.get(self, "additional_params")

    @property
    @pulumi.getter
    def apptype(self) -> Optional[str]:
        """
        Application type.
        """
        return pulumi.get(self, "apptype")

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[str]:
        """
        Color depth per pixel. Valid values: `32`, `16`, `8`.
        """
        return pulumi.get(self, "color_depth")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Login domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def folder(self) -> Optional[str]:
        """
        Network shared file folder parameter.
        """
        return pulumi.get(self, "folder")

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[Sequence['outputs.UsergroupbookmarkBookmarkFormData']]:
        """
        Form data. The structure of `form_data` block is documented below.
        """
        return pulumi.get(self, "form_datas")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        """
        Screen height (range from 480 - 65535, default = 768).
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host name/IP parameter.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[str]:
        """
        Keyboard layout.
        """
        return pulumi.get(self, "keyboard_layout")

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[int]:
        """
        Listening port (0 - 65535).
        """
        return pulumi.get(self, "listening_port")

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[str]:
        """
        The load balancing information or cookie which should be provided to the connection broker.
        """
        return pulumi.get(self, "load_balancing_info")

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[str]:
        """
        Logon password.
        """
        return pulumi.get(self, "logon_password")

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[str]:
        """
        Logon user.
        """
        return pulumi.get(self, "logon_user")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Bookmark name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Remote port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[str]:
        """
        An arbitrary string which identifies the RDP source.
        """
        return pulumi.get(self, "preconnection_blob")

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[int]:
        """
        The numeric ID of the RDP source (0-2147483648).
        """
        return pulumi.get(self, "preconnection_id")

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[int]:
        """
        Remote port (0 - 65535).
        """
        return pulumi.get(self, "remote_port")

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[str]:
        """
        Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restricted_admin")

    @property
    @pulumi.getter
    def security(self) -> Optional[str]:
        """
        Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        """
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[str]:
        """
        Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "send_preconnection_id")

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[str]:
        """
        Server side keyboard layout.
        """
        return pulumi.get(self, "server_layout")

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[str]:
        """
        Enable/disable showing of status window. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "show_status_window")

    @property
    @pulumi.getter
    def sso(self) -> Optional[str]:
        """
        Single Sign-On. Valid values: `disable`, `static`, `auto`.
        """
        return pulumi.get(self, "sso")

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[str]:
        """
        Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        """
        return pulumi.get(self, "sso_credential")

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[str]:
        """
        Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sso_credential_sent_once")

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[str]:
        """
        SSO password.
        """
        return pulumi.get(self, "sso_password")

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[str]:
        """
        SSO user name.
        """
        return pulumi.get(self, "sso_username")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL parameter.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="vncKeyboardLayout")
    def vnc_keyboard_layout(self) -> Optional[str]:
        """
        Keyboard layout. Valid values: `default`, `da`, `nl`, `en-uk`, `en-uk-ext`, `fi`, `fr`, `fr-be`, `fr-ca-mul`, `de`, `de-ch`, `it`, `it-142`, `pt`, `pt-br-abnt2`, `no`, `gd`, `es`, `sv`, `us-intl`.
        """
        return pulumi.get(self, "vnc_keyboard_layout")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        """
        Screen width (range from 640 - 65535, default = 1024).
        """
        return pulumi.get(self, "width")


@pulumi.output_type
class UsergroupbookmarkBookmarkFormData(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name.
        :param str value: Value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value.
        """
        return pulumi.get(self, "value")


