# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .... import _utilities

__all__ = ['RealmArgs', 'Realm']

@pulumi.input_type
class RealmArgs:
    def __init__(__self__, *,
                 login_page: Optional[pulumi.Input[str]] = None,
                 max_concurrent_user: Optional[pulumi.Input[int]] = None,
                 nas_ip: Optional[pulumi.Input[str]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 url_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None,
                 virtual_host_only: Optional[pulumi.Input[str]] = None,
                 virtual_host_server_cert: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Realm resource.
        :param pulumi.Input[str] login_page: Replacement HTML for SSL-VPN login page.
        :param pulumi.Input[int] max_concurrent_user: Maximum concurrent users (0 - 65535, 0 means unlimited).
        :param pulumi.Input[str] nas_ip: IP address used as a NAS-IP to communicate with the RADIUS server.
        :param pulumi.Input[int] radius_port: RADIUS service port number (0 - 65535, 0 means user.radius.radius-port).
        :param pulumi.Input[str] radius_server: RADIUS server associated with realm.
        :param pulumi.Input[str] url_path: URL path to access SSL-VPN login page.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] virtual_host: Virtual host name for realm.
        :param pulumi.Input[str] virtual_host_only: Enable/disable enforcement of virtual host method for SSL-VPN client access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] virtual_host_server_cert: Name of the server certificate to used for this realm.
        """
        if login_page is not None:
            pulumi.set(__self__, "login_page", login_page)
        if max_concurrent_user is not None:
            pulumi.set(__self__, "max_concurrent_user", max_concurrent_user)
        if nas_ip is not None:
            pulumi.set(__self__, "nas_ip", nas_ip)
        if radius_port is not None:
            pulumi.set(__self__, "radius_port", radius_port)
        if radius_server is not None:
            pulumi.set(__self__, "radius_server", radius_server)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)
        if virtual_host_only is not None:
            pulumi.set(__self__, "virtual_host_only", virtual_host_only)
        if virtual_host_server_cert is not None:
            pulumi.set(__self__, "virtual_host_server_cert", virtual_host_server_cert)

    @property
    @pulumi.getter(name="loginPage")
    def login_page(self) -> Optional[pulumi.Input[str]]:
        """
        Replacement HTML for SSL-VPN login page.
        """
        return pulumi.get(self, "login_page")

    @login_page.setter
    def login_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_page", value)

    @property
    @pulumi.getter(name="maxConcurrentUser")
    def max_concurrent_user(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum concurrent users (0 - 65535, 0 means unlimited).
        """
        return pulumi.get(self, "max_concurrent_user")

    @max_concurrent_user.setter
    def max_concurrent_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_user", value)

    @property
    @pulumi.getter(name="nasIp")
    def nas_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address used as a NAS-IP to communicate with the RADIUS server.
        """
        return pulumi.get(self, "nas_ip")

    @nas_ip.setter
    def nas_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nas_ip", value)

    @property
    @pulumi.getter(name="radiusPort")
    def radius_port(self) -> Optional[pulumi.Input[int]]:
        """
        RADIUS service port number (0 - 65535, 0 means user.radius.radius-port).
        """
        return pulumi.get(self, "radius_port")

    @radius_port.setter
    def radius_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radius_port", value)

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> Optional[pulumi.Input[str]]:
        """
        RADIUS server associated with realm.
        """
        return pulumi.get(self, "radius_server")

    @radius_server.setter
    def radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_server", value)

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[pulumi.Input[str]]:
        """
        URL path to access SSL-VPN login page.
        """
        return pulumi.get(self, "url_path")

    @url_path.setter
    def url_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_path", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual host name for realm.
        """
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)

    @property
    @pulumi.getter(name="virtualHostOnly")
    def virtual_host_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforcement of virtual host method for SSL-VPN client access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "virtual_host_only")

    @virtual_host_only.setter
    def virtual_host_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host_only", value)

    @property
    @pulumi.getter(name="virtualHostServerCert")
    def virtual_host_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the server certificate to used for this realm.
        """
        return pulumi.get(self, "virtual_host_server_cert")

    @virtual_host_server_cert.setter
    def virtual_host_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host_server_cert", value)


@pulumi.input_type
class _RealmState:
    def __init__(__self__, *,
                 login_page: Optional[pulumi.Input[str]] = None,
                 max_concurrent_user: Optional[pulumi.Input[int]] = None,
                 nas_ip: Optional[pulumi.Input[str]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 url_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None,
                 virtual_host_only: Optional[pulumi.Input[str]] = None,
                 virtual_host_server_cert: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Realm resources.
        :param pulumi.Input[str] login_page: Replacement HTML for SSL-VPN login page.
        :param pulumi.Input[int] max_concurrent_user: Maximum concurrent users (0 - 65535, 0 means unlimited).
        :param pulumi.Input[str] nas_ip: IP address used as a NAS-IP to communicate with the RADIUS server.
        :param pulumi.Input[int] radius_port: RADIUS service port number (0 - 65535, 0 means user.radius.radius-port).
        :param pulumi.Input[str] radius_server: RADIUS server associated with realm.
        :param pulumi.Input[str] url_path: URL path to access SSL-VPN login page.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] virtual_host: Virtual host name for realm.
        :param pulumi.Input[str] virtual_host_only: Enable/disable enforcement of virtual host method for SSL-VPN client access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] virtual_host_server_cert: Name of the server certificate to used for this realm.
        """
        if login_page is not None:
            pulumi.set(__self__, "login_page", login_page)
        if max_concurrent_user is not None:
            pulumi.set(__self__, "max_concurrent_user", max_concurrent_user)
        if nas_ip is not None:
            pulumi.set(__self__, "nas_ip", nas_ip)
        if radius_port is not None:
            pulumi.set(__self__, "radius_port", radius_port)
        if radius_server is not None:
            pulumi.set(__self__, "radius_server", radius_server)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)
        if virtual_host_only is not None:
            pulumi.set(__self__, "virtual_host_only", virtual_host_only)
        if virtual_host_server_cert is not None:
            pulumi.set(__self__, "virtual_host_server_cert", virtual_host_server_cert)

    @property
    @pulumi.getter(name="loginPage")
    def login_page(self) -> Optional[pulumi.Input[str]]:
        """
        Replacement HTML for SSL-VPN login page.
        """
        return pulumi.get(self, "login_page")

    @login_page.setter
    def login_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_page", value)

    @property
    @pulumi.getter(name="maxConcurrentUser")
    def max_concurrent_user(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum concurrent users (0 - 65535, 0 means unlimited).
        """
        return pulumi.get(self, "max_concurrent_user")

    @max_concurrent_user.setter
    def max_concurrent_user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrent_user", value)

    @property
    @pulumi.getter(name="nasIp")
    def nas_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address used as a NAS-IP to communicate with the RADIUS server.
        """
        return pulumi.get(self, "nas_ip")

    @nas_ip.setter
    def nas_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nas_ip", value)

    @property
    @pulumi.getter(name="radiusPort")
    def radius_port(self) -> Optional[pulumi.Input[int]]:
        """
        RADIUS service port number (0 - 65535, 0 means user.radius.radius-port).
        """
        return pulumi.get(self, "radius_port")

    @radius_port.setter
    def radius_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radius_port", value)

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> Optional[pulumi.Input[str]]:
        """
        RADIUS server associated with realm.
        """
        return pulumi.get(self, "radius_server")

    @radius_server.setter
    def radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_server", value)

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[pulumi.Input[str]]:
        """
        URL path to access SSL-VPN login page.
        """
        return pulumi.get(self, "url_path")

    @url_path.setter
    def url_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_path", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual host name for realm.
        """
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)

    @property
    @pulumi.getter(name="virtualHostOnly")
    def virtual_host_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforcement of virtual host method for SSL-VPN client access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "virtual_host_only")

    @virtual_host_only.setter
    def virtual_host_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host_only", value)

    @property
    @pulumi.getter(name="virtualHostServerCert")
    def virtual_host_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the server certificate to used for this realm.
        """
        return pulumi.get(self, "virtual_host_server_cert")

    @virtual_host_server_cert.setter
    def virtual_host_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host_server_cert", value)


class Realm(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 login_page: Optional[pulumi.Input[str]] = None,
                 max_concurrent_user: Optional[pulumi.Input[int]] = None,
                 nas_ip: Optional[pulumi.Input[str]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 url_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None,
                 virtual_host_only: Optional[pulumi.Input[str]] = None,
                 virtual_host_server_cert: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Realm.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.vpn.ssl.web.Realm("trname",
            login_page="1.htm",
            max_concurrent_user=33,
            url_path="1",
            virtual_host="2.2.2.2")
        ```

        ## Import

        VpnSslWeb Realm can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:vpn/ssl/web/realm:Realm labelname {{url_path}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:vpn/ssl/web/realm:Realm labelname {{url_path}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] login_page: Replacement HTML for SSL-VPN login page.
        :param pulumi.Input[int] max_concurrent_user: Maximum concurrent users (0 - 65535, 0 means unlimited).
        :param pulumi.Input[str] nas_ip: IP address used as a NAS-IP to communicate with the RADIUS server.
        :param pulumi.Input[int] radius_port: RADIUS service port number (0 - 65535, 0 means user.radius.radius-port).
        :param pulumi.Input[str] radius_server: RADIUS server associated with realm.
        :param pulumi.Input[str] url_path: URL path to access SSL-VPN login page.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] virtual_host: Virtual host name for realm.
        :param pulumi.Input[str] virtual_host_only: Enable/disable enforcement of virtual host method for SSL-VPN client access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] virtual_host_server_cert: Name of the server certificate to used for this realm.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RealmArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Realm.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.vpn.ssl.web.Realm("trname",
            login_page="1.htm",
            max_concurrent_user=33,
            url_path="1",
            virtual_host="2.2.2.2")
        ```

        ## Import

        VpnSslWeb Realm can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:vpn/ssl/web/realm:Realm labelname {{url_path}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:vpn/ssl/web/realm:Realm labelname {{url_path}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param RealmArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RealmArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 login_page: Optional[pulumi.Input[str]] = None,
                 max_concurrent_user: Optional[pulumi.Input[int]] = None,
                 nas_ip: Optional[pulumi.Input[str]] = None,
                 radius_port: Optional[pulumi.Input[int]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 url_path: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None,
                 virtual_host_only: Optional[pulumi.Input[str]] = None,
                 virtual_host_server_cert: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RealmArgs.__new__(RealmArgs)

            __props__.__dict__["login_page"] = login_page
            __props__.__dict__["max_concurrent_user"] = max_concurrent_user
            __props__.__dict__["nas_ip"] = nas_ip
            __props__.__dict__["radius_port"] = radius_port
            __props__.__dict__["radius_server"] = radius_server
            __props__.__dict__["url_path"] = url_path
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["virtual_host"] = virtual_host
            __props__.__dict__["virtual_host_only"] = virtual_host_only
            __props__.__dict__["virtual_host_server_cert"] = virtual_host_server_cert
        super(Realm, __self__).__init__(
            'fortios:vpn/ssl/web/realm:Realm',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            login_page: Optional[pulumi.Input[str]] = None,
            max_concurrent_user: Optional[pulumi.Input[int]] = None,
            nas_ip: Optional[pulumi.Input[str]] = None,
            radius_port: Optional[pulumi.Input[int]] = None,
            radius_server: Optional[pulumi.Input[str]] = None,
            url_path: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            virtual_host: Optional[pulumi.Input[str]] = None,
            virtual_host_only: Optional[pulumi.Input[str]] = None,
            virtual_host_server_cert: Optional[pulumi.Input[str]] = None) -> 'Realm':
        """
        Get an existing Realm resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] login_page: Replacement HTML for SSL-VPN login page.
        :param pulumi.Input[int] max_concurrent_user: Maximum concurrent users (0 - 65535, 0 means unlimited).
        :param pulumi.Input[str] nas_ip: IP address used as a NAS-IP to communicate with the RADIUS server.
        :param pulumi.Input[int] radius_port: RADIUS service port number (0 - 65535, 0 means user.radius.radius-port).
        :param pulumi.Input[str] radius_server: RADIUS server associated with realm.
        :param pulumi.Input[str] url_path: URL path to access SSL-VPN login page.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] virtual_host: Virtual host name for realm.
        :param pulumi.Input[str] virtual_host_only: Enable/disable enforcement of virtual host method for SSL-VPN client access. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] virtual_host_server_cert: Name of the server certificate to used for this realm.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RealmState.__new__(_RealmState)

        __props__.__dict__["login_page"] = login_page
        __props__.__dict__["max_concurrent_user"] = max_concurrent_user
        __props__.__dict__["nas_ip"] = nas_ip
        __props__.__dict__["radius_port"] = radius_port
        __props__.__dict__["radius_server"] = radius_server
        __props__.__dict__["url_path"] = url_path
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["virtual_host"] = virtual_host
        __props__.__dict__["virtual_host_only"] = virtual_host_only
        __props__.__dict__["virtual_host_server_cert"] = virtual_host_server_cert
        return Realm(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="loginPage")
    def login_page(self) -> pulumi.Output[Optional[str]]:
        """
        Replacement HTML for SSL-VPN login page.
        """
        return pulumi.get(self, "login_page")

    @property
    @pulumi.getter(name="maxConcurrentUser")
    def max_concurrent_user(self) -> pulumi.Output[int]:
        """
        Maximum concurrent users (0 - 65535, 0 means unlimited).
        """
        return pulumi.get(self, "max_concurrent_user")

    @property
    @pulumi.getter(name="nasIp")
    def nas_ip(self) -> pulumi.Output[str]:
        """
        IP address used as a NAS-IP to communicate with the RADIUS server.
        """
        return pulumi.get(self, "nas_ip")

    @property
    @pulumi.getter(name="radiusPort")
    def radius_port(self) -> pulumi.Output[int]:
        """
        RADIUS service port number (0 - 65535, 0 means user.radius.radius-port).
        """
        return pulumi.get(self, "radius_port")

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> pulumi.Output[str]:
        """
        RADIUS server associated with realm.
        """
        return pulumi.get(self, "radius_server")

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> pulumi.Output[str]:
        """
        URL path to access SSL-VPN login page.
        """
        return pulumi.get(self, "url_path")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> pulumi.Output[Optional[str]]:
        """
        Virtual host name for realm.
        """
        return pulumi.get(self, "virtual_host")

    @property
    @pulumi.getter(name="virtualHostOnly")
    def virtual_host_only(self) -> pulumi.Output[str]:
        """
        Enable/disable enforcement of virtual host method for SSL-VPN client access. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "virtual_host_only")

    @property
    @pulumi.getter(name="virtualHostServerCert")
    def virtual_host_server_cert(self) -> pulumi.Output[str]:
        """
        Name of the server certificate to used for this realm.
        """
        return pulumi.get(self, "virtual_host_server_cert")

