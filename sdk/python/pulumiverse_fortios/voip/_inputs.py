# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ProfileMsrpArgs',
    'ProfileSccpArgs',
    'ProfileSipArgs',
]

@pulumi.input_type
class ProfileMsrpArgs:
    def __init__(__self__, *,
                 log_violations: Optional[pulumi.Input[str]] = None,
                 max_msg_size: Optional[pulumi.Input[int]] = None,
                 max_msg_size_action: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log_violations: Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] max_msg_size: Maximum allowable MSRP message size (1-65535).
        :param pulumi.Input[str] max_msg_size_action: Action for violation of max-msg-size. Valid values: `pass`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] status: Enable/disable MSRP. Valid values: `disable`, `enable`.
        """
        if log_violations is not None:
            pulumi.set(__self__, "log_violations", log_violations)
        if max_msg_size is not None:
            pulumi.set(__self__, "max_msg_size", max_msg_size)
        if max_msg_size_action is not None:
            pulumi.set(__self__, "max_msg_size_action", max_msg_size_action)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="logViolations")
    def log_violations(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_violations")

    @log_violations.setter
    def log_violations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_violations", value)

    @property
    @pulumi.getter(name="maxMsgSize")
    def max_msg_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum allowable MSRP message size (1-65535).
        """
        return pulumi.get(self, "max_msg_size")

    @max_msg_size.setter
    def max_msg_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_msg_size", value)

    @property
    @pulumi.getter(name="maxMsgSizeAction")
    def max_msg_size_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for violation of max-msg-size. Valid values: `pass`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "max_msg_size_action")

    @max_msg_size_action.setter
    def max_msg_size_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_msg_size_action", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MSRP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileSccpArgs:
    def __init__(__self__, *,
                 block_mcast: Optional[pulumi.Input[str]] = None,
                 log_call_summary: Optional[pulumi.Input[str]] = None,
                 log_violations: Optional[pulumi.Input[str]] = None,
                 max_calls: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 verify_header: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] block_mcast: Enable/disable block multicast RTP connections. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_call_summary: Enable/disable log summary of SCCP calls. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_violations: Enable/disable logging of SCCP violations. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] max_calls: Maximum calls per minute per SCCP client (max 65535).
        :param pulumi.Input[str] status: Enable/disable SCCP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] verify_header: Enable/disable verify SCCP header content. Valid values: `disable`, `enable`.
        """
        if block_mcast is not None:
            pulumi.set(__self__, "block_mcast", block_mcast)
        if log_call_summary is not None:
            pulumi.set(__self__, "log_call_summary", log_call_summary)
        if log_violations is not None:
            pulumi.set(__self__, "log_violations", log_violations)
        if max_calls is not None:
            pulumi.set(__self__, "max_calls", max_calls)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if verify_header is not None:
            pulumi.set(__self__, "verify_header", verify_header)

    @property
    @pulumi.getter(name="blockMcast")
    def block_mcast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block multicast RTP connections. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_mcast")

    @block_mcast.setter
    def block_mcast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_mcast", value)

    @property
    @pulumi.getter(name="logCallSummary")
    def log_call_summary(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable log summary of SCCP calls. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_call_summary")

    @log_call_summary.setter
    def log_call_summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_call_summary", value)

    @property
    @pulumi.getter(name="logViolations")
    def log_violations(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of SCCP violations. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_violations")

    @log_violations.setter
    def log_violations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_violations", value)

    @property
    @pulumi.getter(name="maxCalls")
    def max_calls(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum calls per minute per SCCP client (max 65535).
        """
        return pulumi.get(self, "max_calls")

    @max_calls.setter
    def max_calls(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_calls", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SCCP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="verifyHeader")
    def verify_header(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verify SCCP header content. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "verify_header")

    @verify_header.setter
    def verify_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_header", value)


@pulumi.input_type
class ProfileSipArgs:
    def __init__(__self__, *,
                 ack_rate: Optional[pulumi.Input[int]] = None,
                 ack_rate_track: Optional[pulumi.Input[str]] = None,
                 block_ack: Optional[pulumi.Input[str]] = None,
                 block_bye: Optional[pulumi.Input[str]] = None,
                 block_cancel: Optional[pulumi.Input[str]] = None,
                 block_geo_red_options: Optional[pulumi.Input[str]] = None,
                 block_info: Optional[pulumi.Input[str]] = None,
                 block_invite: Optional[pulumi.Input[str]] = None,
                 block_long_lines: Optional[pulumi.Input[str]] = None,
                 block_message: Optional[pulumi.Input[str]] = None,
                 block_notify: Optional[pulumi.Input[str]] = None,
                 block_options: Optional[pulumi.Input[str]] = None,
                 block_prack: Optional[pulumi.Input[str]] = None,
                 block_publish: Optional[pulumi.Input[str]] = None,
                 block_refer: Optional[pulumi.Input[str]] = None,
                 block_register: Optional[pulumi.Input[str]] = None,
                 block_subscribe: Optional[pulumi.Input[str]] = None,
                 block_unknown: Optional[pulumi.Input[str]] = None,
                 block_update: Optional[pulumi.Input[str]] = None,
                 bye_rate: Optional[pulumi.Input[int]] = None,
                 bye_rate_track: Optional[pulumi.Input[str]] = None,
                 call_id_regex: Optional[pulumi.Input[str]] = None,
                 call_keepalive: Optional[pulumi.Input[int]] = None,
                 cancel_rate: Optional[pulumi.Input[int]] = None,
                 cancel_rate_track: Optional[pulumi.Input[str]] = None,
                 contact_fixup: Optional[pulumi.Input[str]] = None,
                 content_type_regex: Optional[pulumi.Input[str]] = None,
                 hnt_restrict_source_ip: Optional[pulumi.Input[str]] = None,
                 hosted_nat_traversal: Optional[pulumi.Input[str]] = None,
                 info_rate: Optional[pulumi.Input[int]] = None,
                 info_rate_track: Optional[pulumi.Input[str]] = None,
                 invite_rate: Optional[pulumi.Input[int]] = None,
                 invite_rate_track: Optional[pulumi.Input[str]] = None,
                 ips_rtp: Optional[pulumi.Input[str]] = None,
                 log_call_summary: Optional[pulumi.Input[str]] = None,
                 log_violations: Optional[pulumi.Input[str]] = None,
                 malformed_header_allow: Optional[pulumi.Input[str]] = None,
                 malformed_header_call_id: Optional[pulumi.Input[str]] = None,
                 malformed_header_contact: Optional[pulumi.Input[str]] = None,
                 malformed_header_content_length: Optional[pulumi.Input[str]] = None,
                 malformed_header_content_type: Optional[pulumi.Input[str]] = None,
                 malformed_header_cseq: Optional[pulumi.Input[str]] = None,
                 malformed_header_expires: Optional[pulumi.Input[str]] = None,
                 malformed_header_from: Optional[pulumi.Input[str]] = None,
                 malformed_header_max_forwards: Optional[pulumi.Input[str]] = None,
                 malformed_header_no_proxy_require: Optional[pulumi.Input[str]] = None,
                 malformed_header_no_require: Optional[pulumi.Input[str]] = None,
                 malformed_header_passerted_identity: Optional[pulumi.Input[str]] = None,
                 malformed_header_rack: Optional[pulumi.Input[str]] = None,
                 malformed_header_record_route: Optional[pulumi.Input[str]] = None,
                 malformed_header_route: Optional[pulumi.Input[str]] = None,
                 malformed_header_rseq: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_a: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_b: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_c: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_i: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_k: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_m: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_o: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_r: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_s: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_t: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_v: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_z: Optional[pulumi.Input[str]] = None,
                 malformed_header_to: Optional[pulumi.Input[str]] = None,
                 malformed_header_via: Optional[pulumi.Input[str]] = None,
                 malformed_request_line: Optional[pulumi.Input[str]] = None,
                 max_body_length: Optional[pulumi.Input[int]] = None,
                 max_dialogs: Optional[pulumi.Input[int]] = None,
                 max_idle_dialogs: Optional[pulumi.Input[int]] = None,
                 max_line_length: Optional[pulumi.Input[int]] = None,
                 message_rate: Optional[pulumi.Input[int]] = None,
                 message_rate_track: Optional[pulumi.Input[str]] = None,
                 nat_port_range: Optional[pulumi.Input[str]] = None,
                 nat_trace: Optional[pulumi.Input[str]] = None,
                 no_sdp_fixup: Optional[pulumi.Input[str]] = None,
                 notify_rate: Optional[pulumi.Input[int]] = None,
                 notify_rate_track: Optional[pulumi.Input[str]] = None,
                 open_contact_pinhole: Optional[pulumi.Input[str]] = None,
                 open_record_route_pinhole: Optional[pulumi.Input[str]] = None,
                 open_register_pinhole: Optional[pulumi.Input[str]] = None,
                 open_via_pinhole: Optional[pulumi.Input[str]] = None,
                 options_rate: Optional[pulumi.Input[int]] = None,
                 options_rate_track: Optional[pulumi.Input[str]] = None,
                 prack_rate: Optional[pulumi.Input[int]] = None,
                 prack_rate_track: Optional[pulumi.Input[str]] = None,
                 preserve_override: Optional[pulumi.Input[str]] = None,
                 provisional_invite_expiry_time: Optional[pulumi.Input[int]] = None,
                 publish_rate: Optional[pulumi.Input[int]] = None,
                 publish_rate_track: Optional[pulumi.Input[str]] = None,
                 refer_rate: Optional[pulumi.Input[int]] = None,
                 refer_rate_track: Optional[pulumi.Input[str]] = None,
                 register_contact_trace: Optional[pulumi.Input[str]] = None,
                 register_rate: Optional[pulumi.Input[int]] = None,
                 register_rate_track: Optional[pulumi.Input[str]] = None,
                 rfc2543_branch: Optional[pulumi.Input[str]] = None,
                 rtp: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_auth_client: Optional[pulumi.Input[str]] = None,
                 ssl_auth_server: Optional[pulumi.Input[str]] = None,
                 ssl_client_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 ssl_pfs: Optional[pulumi.Input[str]] = None,
                 ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
                 ssl_server_certificate: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_register: Optional[pulumi.Input[str]] = None,
                 subscribe_rate: Optional[pulumi.Input[int]] = None,
                 subscribe_rate_track: Optional[pulumi.Input[str]] = None,
                 unknown_header: Optional[pulumi.Input[str]] = None,
                 update_rate: Optional[pulumi.Input[int]] = None,
                 update_rate_track: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] ack_rate: ACK request rate limit (per second, per policy).
        :param pulumi.Input[str] ack_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] block_ack: Enable/disable block ACK requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_bye: Enable/disable block BYE requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_cancel: Enable/disable block CANCEL requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_geo_red_options: Enable/disable block OPTIONS requests, but OPTIONS requests still notify for redundancy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_info: Enable/disable block INFO requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_invite: Enable/disable block INVITE requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_long_lines: Enable/disable block requests with headers exceeding max-line-length. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_message: Enable/disable block MESSAGE requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_notify: Enable/disable block NOTIFY requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_options: Enable/disable block OPTIONS requests and no OPTIONS as notifying message for redundancy either. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_prack: Enable/disable block prack requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_publish: Enable/disable block PUBLISH requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_refer: Enable/disable block REFER requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_register: Enable/disable block REGISTER requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_subscribe: Enable/disable block SUBSCRIBE requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_unknown: Block unrecognized SIP requests (enabled by default). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_update: Enable/disable block UPDATE requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] bye_rate: BYE request rate limit (per second, per policy).
        :param pulumi.Input[str] bye_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] call_id_regex: Validate PCRE regular expression for Call-Id header value.
        :param pulumi.Input[int] call_keepalive: Continue tracking calls with no RTP for this many minutes.
        :param pulumi.Input[int] cancel_rate: CANCEL request rate limit (per second, per policy).
        :param pulumi.Input[str] cancel_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] contact_fixup: Fixup contact anyway even if contact's IP:port doesn't match session's IP:port. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] content_type_regex: Validate PCRE regular expression for Content-Type header value.
        :param pulumi.Input[str] hnt_restrict_source_ip: Enable/disable restrict RTP source IP to be the same as SIP source IP when HNT is enabled. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] hosted_nat_traversal: Hosted NAT Traversal (HNT). Valid values: `disable`, `enable`.
        :param pulumi.Input[int] info_rate: INFO request rate limit (per second, per policy).
        :param pulumi.Input[str] info_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[int] invite_rate: INVITE request rate limit (per second, per policy).
        :param pulumi.Input[str] invite_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] ips_rtp: Enable/disable allow IPS on RTP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_call_summary: Enable/disable logging of SIP call summary. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_violations: Enable/disable logging of SIP violations. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] malformed_header_allow: Action for malformed Allow header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_call_id: Action for malformed Call-ID header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_contact: Action for malformed Contact header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_content_length: Action for malformed Content-Length header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_content_type: Action for malformed Content-Type header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_cseq: Action for malformed CSeq header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_expires: Action for malformed Expires header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_from: Action for malformed From header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_max_forwards: Action for malformed Max-Forwards header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_no_proxy_require: Action for malformed SIP messages without Proxy-Require header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_no_require: Action for malformed SIP messages without Require header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_passerted_identity: Action for malformed P-Asserted-Identity header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_rack: Action for malformed RAck header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_record_route: Action for malformed Record-Route header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_route: Action for malformed Route header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_rseq: Action for malformed RSeq header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_a: Action for malformed SDP a line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_b: Action for malformed SDP b line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_c: Action for malformed SDP c line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_i: Action for malformed SDP i line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_k: Action for malformed SDP k line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_m: Action for malformed SDP m line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_o: Action for malformed SDP o line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_r: Action for malformed SDP r line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_s: Action for malformed SDP s line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_t: Action for malformed SDP t line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_v: Action for malformed SDP v line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_z: Action for malformed SDP z line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_to: Action for malformed To header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_via: Action for malformed VIA header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_request_line: Action for malformed request line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[int] max_body_length: Maximum SIP message body length (0 meaning no limit).
        :param pulumi.Input[int] max_dialogs: Maximum number of concurrent calls/dialogs (per policy).
        :param pulumi.Input[int] max_idle_dialogs: Maximum number established but idle dialogs to retain (per policy).
        :param pulumi.Input[int] max_line_length: Maximum SIP header line length (78-4096).
        :param pulumi.Input[int] message_rate: MESSAGE request rate limit (per second, per policy).
        :param pulumi.Input[str] message_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] nat_port_range: RTP NAT port range.
        :param pulumi.Input[str] nat_trace: Enable/disable preservation of original IP in SDP i line. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] no_sdp_fixup: Enable/disable no SDP fix-up. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] notify_rate: NOTIFY request rate limit (per second, per policy).
        :param pulumi.Input[str] notify_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] open_contact_pinhole: Enable/disable open pinhole for non-REGISTER Contact port. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] open_record_route_pinhole: Enable/disable open pinhole for Record-Route port. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] open_register_pinhole: Enable/disable open pinhole for REGISTER Contact port. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] open_via_pinhole: Enable/disable open pinhole for Via port. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] options_rate: OPTIONS request rate limit (per second, per policy).
        :param pulumi.Input[str] options_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[int] prack_rate: PRACK request rate limit (per second, per policy).
        :param pulumi.Input[str] prack_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] preserve_override: Override i line to preserve original IPS (default: append). Valid values: `disable`, `enable`.
        :param pulumi.Input[int] provisional_invite_expiry_time: Expiry time for provisional INVITE (10 - 3600 sec).
        :param pulumi.Input[int] publish_rate: PUBLISH request rate limit (per second, per policy).
        :param pulumi.Input[str] publish_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[int] refer_rate: REFER request rate limit (per second, per policy).
        :param pulumi.Input[str] refer_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] register_contact_trace: Enable/disable trace original IP/port within the contact header of REGISTER requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] register_rate: REGISTER request rate limit (per second, per policy).
        :param pulumi.Input[str] register_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] rfc2543_branch: Enable/disable support via branch compliant with RFC 2543. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] rtp: Enable/disable create pinholes for RTP traffic to traverse firewall. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssl_algorithm: Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] ssl_auth_client: Require a client certificate and authenticate it with the peer/peergrp.
        :param pulumi.Input[str] ssl_auth_server: Authenticate the server's certificate with the peer/peergrp.
        :param pulumi.Input[str] ssl_client_certificate: Name of Certificate to offer to server if requested.
        :param pulumi.Input[str] ssl_client_renegotiation: Allow/block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
        :param pulumi.Input[str] ssl_max_version: Highest SSL/TLS version to negotiate.
        :param pulumi.Input[str] ssl_min_version: Lowest SSL/TLS version to negotiate.
        :param pulumi.Input[str] ssl_mode: SSL/TLS mode for encryption & decryption of traffic. Valid values: `off`, `full`.
        :param pulumi.Input[str] ssl_pfs: SSL Perfect Forward Secrecy. Valid values: `require`, `deny`, `allow`.
        :param pulumi.Input[str] ssl_send_empty_frags: Send empty fragments to avoid attack on CBC IV (SSL 3.0 & TLS 1.0 only). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_server_certificate: Name of Certificate return to the client in every SSL connection.
        :param pulumi.Input[str] status: Enable/disable SIP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] strict_register: Enable/disable only allow the registrar to connect. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] subscribe_rate: SUBSCRIBE request rate limit (per second, per policy).
        :param pulumi.Input[str] subscribe_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] unknown_header: Action for unknown SIP header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[int] update_rate: UPDATE request rate limit (per second, per policy).
        :param pulumi.Input[str] update_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        if ack_rate is not None:
            pulumi.set(__self__, "ack_rate", ack_rate)
        if ack_rate_track is not None:
            pulumi.set(__self__, "ack_rate_track", ack_rate_track)
        if block_ack is not None:
            pulumi.set(__self__, "block_ack", block_ack)
        if block_bye is not None:
            pulumi.set(__self__, "block_bye", block_bye)
        if block_cancel is not None:
            pulumi.set(__self__, "block_cancel", block_cancel)
        if block_geo_red_options is not None:
            pulumi.set(__self__, "block_geo_red_options", block_geo_red_options)
        if block_info is not None:
            pulumi.set(__self__, "block_info", block_info)
        if block_invite is not None:
            pulumi.set(__self__, "block_invite", block_invite)
        if block_long_lines is not None:
            pulumi.set(__self__, "block_long_lines", block_long_lines)
        if block_message is not None:
            pulumi.set(__self__, "block_message", block_message)
        if block_notify is not None:
            pulumi.set(__self__, "block_notify", block_notify)
        if block_options is not None:
            pulumi.set(__self__, "block_options", block_options)
        if block_prack is not None:
            pulumi.set(__self__, "block_prack", block_prack)
        if block_publish is not None:
            pulumi.set(__self__, "block_publish", block_publish)
        if block_refer is not None:
            pulumi.set(__self__, "block_refer", block_refer)
        if block_register is not None:
            pulumi.set(__self__, "block_register", block_register)
        if block_subscribe is not None:
            pulumi.set(__self__, "block_subscribe", block_subscribe)
        if block_unknown is not None:
            pulumi.set(__self__, "block_unknown", block_unknown)
        if block_update is not None:
            pulumi.set(__self__, "block_update", block_update)
        if bye_rate is not None:
            pulumi.set(__self__, "bye_rate", bye_rate)
        if bye_rate_track is not None:
            pulumi.set(__self__, "bye_rate_track", bye_rate_track)
        if call_id_regex is not None:
            pulumi.set(__self__, "call_id_regex", call_id_regex)
        if call_keepalive is not None:
            pulumi.set(__self__, "call_keepalive", call_keepalive)
        if cancel_rate is not None:
            pulumi.set(__self__, "cancel_rate", cancel_rate)
        if cancel_rate_track is not None:
            pulumi.set(__self__, "cancel_rate_track", cancel_rate_track)
        if contact_fixup is not None:
            pulumi.set(__self__, "contact_fixup", contact_fixup)
        if content_type_regex is not None:
            pulumi.set(__self__, "content_type_regex", content_type_regex)
        if hnt_restrict_source_ip is not None:
            pulumi.set(__self__, "hnt_restrict_source_ip", hnt_restrict_source_ip)
        if hosted_nat_traversal is not None:
            pulumi.set(__self__, "hosted_nat_traversal", hosted_nat_traversal)
        if info_rate is not None:
            pulumi.set(__self__, "info_rate", info_rate)
        if info_rate_track is not None:
            pulumi.set(__self__, "info_rate_track", info_rate_track)
        if invite_rate is not None:
            pulumi.set(__self__, "invite_rate", invite_rate)
        if invite_rate_track is not None:
            pulumi.set(__self__, "invite_rate_track", invite_rate_track)
        if ips_rtp is not None:
            pulumi.set(__self__, "ips_rtp", ips_rtp)
        if log_call_summary is not None:
            pulumi.set(__self__, "log_call_summary", log_call_summary)
        if log_violations is not None:
            pulumi.set(__self__, "log_violations", log_violations)
        if malformed_header_allow is not None:
            pulumi.set(__self__, "malformed_header_allow", malformed_header_allow)
        if malformed_header_call_id is not None:
            pulumi.set(__self__, "malformed_header_call_id", malformed_header_call_id)
        if malformed_header_contact is not None:
            pulumi.set(__self__, "malformed_header_contact", malformed_header_contact)
        if malformed_header_content_length is not None:
            pulumi.set(__self__, "malformed_header_content_length", malformed_header_content_length)
        if malformed_header_content_type is not None:
            pulumi.set(__self__, "malformed_header_content_type", malformed_header_content_type)
        if malformed_header_cseq is not None:
            pulumi.set(__self__, "malformed_header_cseq", malformed_header_cseq)
        if malformed_header_expires is not None:
            pulumi.set(__self__, "malformed_header_expires", malformed_header_expires)
        if malformed_header_from is not None:
            pulumi.set(__self__, "malformed_header_from", malformed_header_from)
        if malformed_header_max_forwards is not None:
            pulumi.set(__self__, "malformed_header_max_forwards", malformed_header_max_forwards)
        if malformed_header_no_proxy_require is not None:
            pulumi.set(__self__, "malformed_header_no_proxy_require", malformed_header_no_proxy_require)
        if malformed_header_no_require is not None:
            pulumi.set(__self__, "malformed_header_no_require", malformed_header_no_require)
        if malformed_header_passerted_identity is not None:
            pulumi.set(__self__, "malformed_header_passerted_identity", malformed_header_passerted_identity)
        if malformed_header_rack is not None:
            pulumi.set(__self__, "malformed_header_rack", malformed_header_rack)
        if malformed_header_record_route is not None:
            pulumi.set(__self__, "malformed_header_record_route", malformed_header_record_route)
        if malformed_header_route is not None:
            pulumi.set(__self__, "malformed_header_route", malformed_header_route)
        if malformed_header_rseq is not None:
            pulumi.set(__self__, "malformed_header_rseq", malformed_header_rseq)
        if malformed_header_sdp_a is not None:
            pulumi.set(__self__, "malformed_header_sdp_a", malformed_header_sdp_a)
        if malformed_header_sdp_b is not None:
            pulumi.set(__self__, "malformed_header_sdp_b", malformed_header_sdp_b)
        if malformed_header_sdp_c is not None:
            pulumi.set(__self__, "malformed_header_sdp_c", malformed_header_sdp_c)
        if malformed_header_sdp_i is not None:
            pulumi.set(__self__, "malformed_header_sdp_i", malformed_header_sdp_i)
        if malformed_header_sdp_k is not None:
            pulumi.set(__self__, "malformed_header_sdp_k", malformed_header_sdp_k)
        if malformed_header_sdp_m is not None:
            pulumi.set(__self__, "malformed_header_sdp_m", malformed_header_sdp_m)
        if malformed_header_sdp_o is not None:
            pulumi.set(__self__, "malformed_header_sdp_o", malformed_header_sdp_o)
        if malformed_header_sdp_r is not None:
            pulumi.set(__self__, "malformed_header_sdp_r", malformed_header_sdp_r)
        if malformed_header_sdp_s is not None:
            pulumi.set(__self__, "malformed_header_sdp_s", malformed_header_sdp_s)
        if malformed_header_sdp_t is not None:
            pulumi.set(__self__, "malformed_header_sdp_t", malformed_header_sdp_t)
        if malformed_header_sdp_v is not None:
            pulumi.set(__self__, "malformed_header_sdp_v", malformed_header_sdp_v)
        if malformed_header_sdp_z is not None:
            pulumi.set(__self__, "malformed_header_sdp_z", malformed_header_sdp_z)
        if malformed_header_to is not None:
            pulumi.set(__self__, "malformed_header_to", malformed_header_to)
        if malformed_header_via is not None:
            pulumi.set(__self__, "malformed_header_via", malformed_header_via)
        if malformed_request_line is not None:
            pulumi.set(__self__, "malformed_request_line", malformed_request_line)
        if max_body_length is not None:
            pulumi.set(__self__, "max_body_length", max_body_length)
        if max_dialogs is not None:
            pulumi.set(__self__, "max_dialogs", max_dialogs)
        if max_idle_dialogs is not None:
            pulumi.set(__self__, "max_idle_dialogs", max_idle_dialogs)
        if max_line_length is not None:
            pulumi.set(__self__, "max_line_length", max_line_length)
        if message_rate is not None:
            pulumi.set(__self__, "message_rate", message_rate)
        if message_rate_track is not None:
            pulumi.set(__self__, "message_rate_track", message_rate_track)
        if nat_port_range is not None:
            pulumi.set(__self__, "nat_port_range", nat_port_range)
        if nat_trace is not None:
            pulumi.set(__self__, "nat_trace", nat_trace)
        if no_sdp_fixup is not None:
            pulumi.set(__self__, "no_sdp_fixup", no_sdp_fixup)
        if notify_rate is not None:
            pulumi.set(__self__, "notify_rate", notify_rate)
        if notify_rate_track is not None:
            pulumi.set(__self__, "notify_rate_track", notify_rate_track)
        if open_contact_pinhole is not None:
            pulumi.set(__self__, "open_contact_pinhole", open_contact_pinhole)
        if open_record_route_pinhole is not None:
            pulumi.set(__self__, "open_record_route_pinhole", open_record_route_pinhole)
        if open_register_pinhole is not None:
            pulumi.set(__self__, "open_register_pinhole", open_register_pinhole)
        if open_via_pinhole is not None:
            pulumi.set(__self__, "open_via_pinhole", open_via_pinhole)
        if options_rate is not None:
            pulumi.set(__self__, "options_rate", options_rate)
        if options_rate_track is not None:
            pulumi.set(__self__, "options_rate_track", options_rate_track)
        if prack_rate is not None:
            pulumi.set(__self__, "prack_rate", prack_rate)
        if prack_rate_track is not None:
            pulumi.set(__self__, "prack_rate_track", prack_rate_track)
        if preserve_override is not None:
            pulumi.set(__self__, "preserve_override", preserve_override)
        if provisional_invite_expiry_time is not None:
            pulumi.set(__self__, "provisional_invite_expiry_time", provisional_invite_expiry_time)
        if publish_rate is not None:
            pulumi.set(__self__, "publish_rate", publish_rate)
        if publish_rate_track is not None:
            pulumi.set(__self__, "publish_rate_track", publish_rate_track)
        if refer_rate is not None:
            pulumi.set(__self__, "refer_rate", refer_rate)
        if refer_rate_track is not None:
            pulumi.set(__self__, "refer_rate_track", refer_rate_track)
        if register_contact_trace is not None:
            pulumi.set(__self__, "register_contact_trace", register_contact_trace)
        if register_rate is not None:
            pulumi.set(__self__, "register_rate", register_rate)
        if register_rate_track is not None:
            pulumi.set(__self__, "register_rate_track", register_rate_track)
        if rfc2543_branch is not None:
            pulumi.set(__self__, "rfc2543_branch", rfc2543_branch)
        if rtp is not None:
            pulumi.set(__self__, "rtp", rtp)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_auth_client is not None:
            pulumi.set(__self__, "ssl_auth_client", ssl_auth_client)
        if ssl_auth_server is not None:
            pulumi.set(__self__, "ssl_auth_server", ssl_auth_server)
        if ssl_client_certificate is not None:
            pulumi.set(__self__, "ssl_client_certificate", ssl_client_certificate)
        if ssl_client_renegotiation is not None:
            pulumi.set(__self__, "ssl_client_renegotiation", ssl_client_renegotiation)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if ssl_pfs is not None:
            pulumi.set(__self__, "ssl_pfs", ssl_pfs)
        if ssl_send_empty_frags is not None:
            pulumi.set(__self__, "ssl_send_empty_frags", ssl_send_empty_frags)
        if ssl_server_certificate is not None:
            pulumi.set(__self__, "ssl_server_certificate", ssl_server_certificate)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strict_register is not None:
            pulumi.set(__self__, "strict_register", strict_register)
        if subscribe_rate is not None:
            pulumi.set(__self__, "subscribe_rate", subscribe_rate)
        if subscribe_rate_track is not None:
            pulumi.set(__self__, "subscribe_rate_track", subscribe_rate_track)
        if unknown_header is not None:
            pulumi.set(__self__, "unknown_header", unknown_header)
        if update_rate is not None:
            pulumi.set(__self__, "update_rate", update_rate)
        if update_rate_track is not None:
            pulumi.set(__self__, "update_rate_track", update_rate_track)

    @property
    @pulumi.getter(name="ackRate")
    def ack_rate(self) -> Optional[pulumi.Input[int]]:
        """
        ACK request rate limit (per second, per policy).
        """
        return pulumi.get(self, "ack_rate")

    @ack_rate.setter
    def ack_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ack_rate", value)

    @property
    @pulumi.getter(name="ackRateTrack")
    def ack_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "ack_rate_track")

    @ack_rate_track.setter
    def ack_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_rate_track", value)

    @property
    @pulumi.getter(name="blockAck")
    def block_ack(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block ACK requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_ack")

    @block_ack.setter
    def block_ack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_ack", value)

    @property
    @pulumi.getter(name="blockBye")
    def block_bye(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block BYE requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_bye")

    @block_bye.setter
    def block_bye(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_bye", value)

    @property
    @pulumi.getter(name="blockCancel")
    def block_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block CANCEL requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_cancel")

    @block_cancel.setter
    def block_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_cancel", value)

    @property
    @pulumi.getter(name="blockGeoRedOptions")
    def block_geo_red_options(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block OPTIONS requests, but OPTIONS requests still notify for redundancy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_geo_red_options")

    @block_geo_red_options.setter
    def block_geo_red_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_geo_red_options", value)

    @property
    @pulumi.getter(name="blockInfo")
    def block_info(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block INFO requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_info")

    @block_info.setter
    def block_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_info", value)

    @property
    @pulumi.getter(name="blockInvite")
    def block_invite(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block INVITE requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_invite")

    @block_invite.setter
    def block_invite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_invite", value)

    @property
    @pulumi.getter(name="blockLongLines")
    def block_long_lines(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block requests with headers exceeding max-line-length. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_long_lines")

    @block_long_lines.setter
    def block_long_lines(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_long_lines", value)

    @property
    @pulumi.getter(name="blockMessage")
    def block_message(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block MESSAGE requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_message")

    @block_message.setter
    def block_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_message", value)

    @property
    @pulumi.getter(name="blockNotify")
    def block_notify(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block NOTIFY requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_notify")

    @block_notify.setter
    def block_notify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_notify", value)

    @property
    @pulumi.getter(name="blockOptions")
    def block_options(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block OPTIONS requests and no OPTIONS as notifying message for redundancy either. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_options")

    @block_options.setter
    def block_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_options", value)

    @property
    @pulumi.getter(name="blockPrack")
    def block_prack(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block prack requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_prack")

    @block_prack.setter
    def block_prack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_prack", value)

    @property
    @pulumi.getter(name="blockPublish")
    def block_publish(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block PUBLISH requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_publish")

    @block_publish.setter
    def block_publish(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_publish", value)

    @property
    @pulumi.getter(name="blockRefer")
    def block_refer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block REFER requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_refer")

    @block_refer.setter
    def block_refer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_refer", value)

    @property
    @pulumi.getter(name="blockRegister")
    def block_register(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block REGISTER requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_register")

    @block_register.setter
    def block_register(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_register", value)

    @property
    @pulumi.getter(name="blockSubscribe")
    def block_subscribe(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block SUBSCRIBE requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_subscribe")

    @block_subscribe.setter
    def block_subscribe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_subscribe", value)

    @property
    @pulumi.getter(name="blockUnknown")
    def block_unknown(self) -> Optional[pulumi.Input[str]]:
        """
        Block unrecognized SIP requests (enabled by default). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_unknown")

    @block_unknown.setter
    def block_unknown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_unknown", value)

    @property
    @pulumi.getter(name="blockUpdate")
    def block_update(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block UPDATE requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_update")

    @block_update.setter
    def block_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_update", value)

    @property
    @pulumi.getter(name="byeRate")
    def bye_rate(self) -> Optional[pulumi.Input[int]]:
        """
        BYE request rate limit (per second, per policy).
        """
        return pulumi.get(self, "bye_rate")

    @bye_rate.setter
    def bye_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bye_rate", value)

    @property
    @pulumi.getter(name="byeRateTrack")
    def bye_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "bye_rate_track")

    @bye_rate_track.setter
    def bye_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bye_rate_track", value)

    @property
    @pulumi.getter(name="callIdRegex")
    def call_id_regex(self) -> Optional[pulumi.Input[str]]:
        """
        Validate PCRE regular expression for Call-Id header value.
        """
        return pulumi.get(self, "call_id_regex")

    @call_id_regex.setter
    def call_id_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_id_regex", value)

    @property
    @pulumi.getter(name="callKeepalive")
    def call_keepalive(self) -> Optional[pulumi.Input[int]]:
        """
        Continue tracking calls with no RTP for this many minutes.
        """
        return pulumi.get(self, "call_keepalive")

    @call_keepalive.setter
    def call_keepalive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_keepalive", value)

    @property
    @pulumi.getter(name="cancelRate")
    def cancel_rate(self) -> Optional[pulumi.Input[int]]:
        """
        CANCEL request rate limit (per second, per policy).
        """
        return pulumi.get(self, "cancel_rate")

    @cancel_rate.setter
    def cancel_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cancel_rate", value)

    @property
    @pulumi.getter(name="cancelRateTrack")
    def cancel_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "cancel_rate_track")

    @cancel_rate_track.setter
    def cancel_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cancel_rate_track", value)

    @property
    @pulumi.getter(name="contactFixup")
    def contact_fixup(self) -> Optional[pulumi.Input[str]]:
        """
        Fixup contact anyway even if contact's IP:port doesn't match session's IP:port. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "contact_fixup")

    @contact_fixup.setter
    def contact_fixup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_fixup", value)

    @property
    @pulumi.getter(name="contentTypeRegex")
    def content_type_regex(self) -> Optional[pulumi.Input[str]]:
        """
        Validate PCRE regular expression for Content-Type header value.
        """
        return pulumi.get(self, "content_type_regex")

    @content_type_regex.setter
    def content_type_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type_regex", value)

    @property
    @pulumi.getter(name="hntRestrictSourceIp")
    def hnt_restrict_source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable restrict RTP source IP to be the same as SIP source IP when HNT is enabled. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "hnt_restrict_source_ip")

    @hnt_restrict_source_ip.setter
    def hnt_restrict_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hnt_restrict_source_ip", value)

    @property
    @pulumi.getter(name="hostedNatTraversal")
    def hosted_nat_traversal(self) -> Optional[pulumi.Input[str]]:
        """
        Hosted NAT Traversal (HNT). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "hosted_nat_traversal")

    @hosted_nat_traversal.setter
    def hosted_nat_traversal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_nat_traversal", value)

    @property
    @pulumi.getter(name="infoRate")
    def info_rate(self) -> Optional[pulumi.Input[int]]:
        """
        INFO request rate limit (per second, per policy).
        """
        return pulumi.get(self, "info_rate")

    @info_rate.setter
    def info_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "info_rate", value)

    @property
    @pulumi.getter(name="infoRateTrack")
    def info_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "info_rate_track")

    @info_rate_track.setter
    def info_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "info_rate_track", value)

    @property
    @pulumi.getter(name="inviteRate")
    def invite_rate(self) -> Optional[pulumi.Input[int]]:
        """
        INVITE request rate limit (per second, per policy).
        """
        return pulumi.get(self, "invite_rate")

    @invite_rate.setter
    def invite_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "invite_rate", value)

    @property
    @pulumi.getter(name="inviteRateTrack")
    def invite_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "invite_rate_track")

    @invite_rate_track.setter
    def invite_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invite_rate_track", value)

    @property
    @pulumi.getter(name="ipsRtp")
    def ips_rtp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow IPS on RTP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ips_rtp")

    @ips_rtp.setter
    def ips_rtp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_rtp", value)

    @property
    @pulumi.getter(name="logCallSummary")
    def log_call_summary(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of SIP call summary. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_call_summary")

    @log_call_summary.setter
    def log_call_summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_call_summary", value)

    @property
    @pulumi.getter(name="logViolations")
    def log_violations(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of SIP violations. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_violations")

    @log_violations.setter
    def log_violations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_violations", value)

    @property
    @pulumi.getter(name="malformedHeaderAllow")
    def malformed_header_allow(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Allow header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_allow")

    @malformed_header_allow.setter
    def malformed_header_allow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_allow", value)

    @property
    @pulumi.getter(name="malformedHeaderCallId")
    def malformed_header_call_id(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Call-ID header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_call_id")

    @malformed_header_call_id.setter
    def malformed_header_call_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_call_id", value)

    @property
    @pulumi.getter(name="malformedHeaderContact")
    def malformed_header_contact(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Contact header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_contact")

    @malformed_header_contact.setter
    def malformed_header_contact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_contact", value)

    @property
    @pulumi.getter(name="malformedHeaderContentLength")
    def malformed_header_content_length(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Content-Length header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_content_length")

    @malformed_header_content_length.setter
    def malformed_header_content_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_content_length", value)

    @property
    @pulumi.getter(name="malformedHeaderContentType")
    def malformed_header_content_type(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Content-Type header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_content_type")

    @malformed_header_content_type.setter
    def malformed_header_content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_content_type", value)

    @property
    @pulumi.getter(name="malformedHeaderCseq")
    def malformed_header_cseq(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed CSeq header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_cseq")

    @malformed_header_cseq.setter
    def malformed_header_cseq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_cseq", value)

    @property
    @pulumi.getter(name="malformedHeaderExpires")
    def malformed_header_expires(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Expires header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_expires")

    @malformed_header_expires.setter
    def malformed_header_expires(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_expires", value)

    @property
    @pulumi.getter(name="malformedHeaderFrom")
    def malformed_header_from(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed From header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_from")

    @malformed_header_from.setter
    def malformed_header_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_from", value)

    @property
    @pulumi.getter(name="malformedHeaderMaxForwards")
    def malformed_header_max_forwards(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Max-Forwards header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_max_forwards")

    @malformed_header_max_forwards.setter
    def malformed_header_max_forwards(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_max_forwards", value)

    @property
    @pulumi.getter(name="malformedHeaderNoProxyRequire")
    def malformed_header_no_proxy_require(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SIP messages without Proxy-Require header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_no_proxy_require")

    @malformed_header_no_proxy_require.setter
    def malformed_header_no_proxy_require(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_no_proxy_require", value)

    @property
    @pulumi.getter(name="malformedHeaderNoRequire")
    def malformed_header_no_require(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SIP messages without Require header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_no_require")

    @malformed_header_no_require.setter
    def malformed_header_no_require(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_no_require", value)

    @property
    @pulumi.getter(name="malformedHeaderPAssertedIdentity")
    def malformed_header_passerted_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed P-Asserted-Identity header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_passerted_identity")

    @malformed_header_passerted_identity.setter
    def malformed_header_passerted_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_passerted_identity", value)

    @property
    @pulumi.getter(name="malformedHeaderRack")
    def malformed_header_rack(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed RAck header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_rack")

    @malformed_header_rack.setter
    def malformed_header_rack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_rack", value)

    @property
    @pulumi.getter(name="malformedHeaderRecordRoute")
    def malformed_header_record_route(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Record-Route header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_record_route")

    @malformed_header_record_route.setter
    def malformed_header_record_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_record_route", value)

    @property
    @pulumi.getter(name="malformedHeaderRoute")
    def malformed_header_route(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Route header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_route")

    @malformed_header_route.setter
    def malformed_header_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_route", value)

    @property
    @pulumi.getter(name="malformedHeaderRseq")
    def malformed_header_rseq(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed RSeq header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_rseq")

    @malformed_header_rseq.setter
    def malformed_header_rseq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_rseq", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpA")
    def malformed_header_sdp_a(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP a line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_a")

    @malformed_header_sdp_a.setter
    def malformed_header_sdp_a(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_a", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpB")
    def malformed_header_sdp_b(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP b line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_b")

    @malformed_header_sdp_b.setter
    def malformed_header_sdp_b(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_b", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpC")
    def malformed_header_sdp_c(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP c line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_c")

    @malformed_header_sdp_c.setter
    def malformed_header_sdp_c(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_c", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpI")
    def malformed_header_sdp_i(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP i line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_i")

    @malformed_header_sdp_i.setter
    def malformed_header_sdp_i(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_i", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpK")
    def malformed_header_sdp_k(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP k line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_k")

    @malformed_header_sdp_k.setter
    def malformed_header_sdp_k(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_k", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpM")
    def malformed_header_sdp_m(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP m line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_m")

    @malformed_header_sdp_m.setter
    def malformed_header_sdp_m(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_m", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpO")
    def malformed_header_sdp_o(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP o line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_o")

    @malformed_header_sdp_o.setter
    def malformed_header_sdp_o(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_o", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpR")
    def malformed_header_sdp_r(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP r line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_r")

    @malformed_header_sdp_r.setter
    def malformed_header_sdp_r(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_r", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpS")
    def malformed_header_sdp_s(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP s line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_s")

    @malformed_header_sdp_s.setter
    def malformed_header_sdp_s(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_s", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpT")
    def malformed_header_sdp_t(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP t line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_t")

    @malformed_header_sdp_t.setter
    def malformed_header_sdp_t(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_t", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpV")
    def malformed_header_sdp_v(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP v line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_v")

    @malformed_header_sdp_v.setter
    def malformed_header_sdp_v(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_v", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpZ")
    def malformed_header_sdp_z(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP z line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_z")

    @malformed_header_sdp_z.setter
    def malformed_header_sdp_z(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_z", value)

    @property
    @pulumi.getter(name="malformedHeaderTo")
    def malformed_header_to(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed To header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_to")

    @malformed_header_to.setter
    def malformed_header_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_to", value)

    @property
    @pulumi.getter(name="malformedHeaderVia")
    def malformed_header_via(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed VIA header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_via")

    @malformed_header_via.setter
    def malformed_header_via(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_via", value)

    @property
    @pulumi.getter(name="malformedRequestLine")
    def malformed_request_line(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed request line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_request_line")

    @malformed_request_line.setter
    def malformed_request_line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_request_line", value)

    @property
    @pulumi.getter(name="maxBodyLength")
    def max_body_length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum SIP message body length (0 meaning no limit).
        """
        return pulumi.get(self, "max_body_length")

    @max_body_length.setter
    def max_body_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_body_length", value)

    @property
    @pulumi.getter(name="maxDialogs")
    def max_dialogs(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of concurrent calls/dialogs (per policy).
        """
        return pulumi.get(self, "max_dialogs")

    @max_dialogs.setter
    def max_dialogs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_dialogs", value)

    @property
    @pulumi.getter(name="maxIdleDialogs")
    def max_idle_dialogs(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number established but idle dialogs to retain (per policy).
        """
        return pulumi.get(self, "max_idle_dialogs")

    @max_idle_dialogs.setter
    def max_idle_dialogs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_dialogs", value)

    @property
    @pulumi.getter(name="maxLineLength")
    def max_line_length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum SIP header line length (78-4096).
        """
        return pulumi.get(self, "max_line_length")

    @max_line_length.setter
    def max_line_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_line_length", value)

    @property
    @pulumi.getter(name="messageRate")
    def message_rate(self) -> Optional[pulumi.Input[int]]:
        """
        MESSAGE request rate limit (per second, per policy).
        """
        return pulumi.get(self, "message_rate")

    @message_rate.setter
    def message_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_rate", value)

    @property
    @pulumi.getter(name="messageRateTrack")
    def message_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "message_rate_track")

    @message_rate_track.setter
    def message_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_rate_track", value)

    @property
    @pulumi.getter(name="natPortRange")
    def nat_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        RTP NAT port range.
        """
        return pulumi.get(self, "nat_port_range")

    @nat_port_range.setter
    def nat_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_port_range", value)

    @property
    @pulumi.getter(name="natTrace")
    def nat_trace(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable preservation of original IP in SDP i line. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "nat_trace")

    @nat_trace.setter
    def nat_trace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_trace", value)

    @property
    @pulumi.getter(name="noSdpFixup")
    def no_sdp_fixup(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable no SDP fix-up. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "no_sdp_fixup")

    @no_sdp_fixup.setter
    def no_sdp_fixup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "no_sdp_fixup", value)

    @property
    @pulumi.getter(name="notifyRate")
    def notify_rate(self) -> Optional[pulumi.Input[int]]:
        """
        NOTIFY request rate limit (per second, per policy).
        """
        return pulumi.get(self, "notify_rate")

    @notify_rate.setter
    def notify_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "notify_rate", value)

    @property
    @pulumi.getter(name="notifyRateTrack")
    def notify_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "notify_rate_track")

    @notify_rate_track.setter
    def notify_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_rate_track", value)

    @property
    @pulumi.getter(name="openContactPinhole")
    def open_contact_pinhole(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable open pinhole for non-REGISTER Contact port. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "open_contact_pinhole")

    @open_contact_pinhole.setter
    def open_contact_pinhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_contact_pinhole", value)

    @property
    @pulumi.getter(name="openRecordRoutePinhole")
    def open_record_route_pinhole(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable open pinhole for Record-Route port. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "open_record_route_pinhole")

    @open_record_route_pinhole.setter
    def open_record_route_pinhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_record_route_pinhole", value)

    @property
    @pulumi.getter(name="openRegisterPinhole")
    def open_register_pinhole(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable open pinhole for REGISTER Contact port. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "open_register_pinhole")

    @open_register_pinhole.setter
    def open_register_pinhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_register_pinhole", value)

    @property
    @pulumi.getter(name="openViaPinhole")
    def open_via_pinhole(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable open pinhole for Via port. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "open_via_pinhole")

    @open_via_pinhole.setter
    def open_via_pinhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_via_pinhole", value)

    @property
    @pulumi.getter(name="optionsRate")
    def options_rate(self) -> Optional[pulumi.Input[int]]:
        """
        OPTIONS request rate limit (per second, per policy).
        """
        return pulumi.get(self, "options_rate")

    @options_rate.setter
    def options_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "options_rate", value)

    @property
    @pulumi.getter(name="optionsRateTrack")
    def options_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "options_rate_track")

    @options_rate_track.setter
    def options_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options_rate_track", value)

    @property
    @pulumi.getter(name="prackRate")
    def prack_rate(self) -> Optional[pulumi.Input[int]]:
        """
        PRACK request rate limit (per second, per policy).
        """
        return pulumi.get(self, "prack_rate")

    @prack_rate.setter
    def prack_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prack_rate", value)

    @property
    @pulumi.getter(name="prackRateTrack")
    def prack_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "prack_rate_track")

    @prack_rate_track.setter
    def prack_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prack_rate_track", value)

    @property
    @pulumi.getter(name="preserveOverride")
    def preserve_override(self) -> Optional[pulumi.Input[str]]:
        """
        Override i line to preserve original IPS (default: append). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "preserve_override")

    @preserve_override.setter
    def preserve_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preserve_override", value)

    @property
    @pulumi.getter(name="provisionalInviteExpiryTime")
    def provisional_invite_expiry_time(self) -> Optional[pulumi.Input[int]]:
        """
        Expiry time for provisional INVITE (10 - 3600 sec).
        """
        return pulumi.get(self, "provisional_invite_expiry_time")

    @provisional_invite_expiry_time.setter
    def provisional_invite_expiry_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "provisional_invite_expiry_time", value)

    @property
    @pulumi.getter(name="publishRate")
    def publish_rate(self) -> Optional[pulumi.Input[int]]:
        """
        PUBLISH request rate limit (per second, per policy).
        """
        return pulumi.get(self, "publish_rate")

    @publish_rate.setter
    def publish_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "publish_rate", value)

    @property
    @pulumi.getter(name="publishRateTrack")
    def publish_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "publish_rate_track")

    @publish_rate_track.setter
    def publish_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publish_rate_track", value)

    @property
    @pulumi.getter(name="referRate")
    def refer_rate(self) -> Optional[pulumi.Input[int]]:
        """
        REFER request rate limit (per second, per policy).
        """
        return pulumi.get(self, "refer_rate")

    @refer_rate.setter
    def refer_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refer_rate", value)

    @property
    @pulumi.getter(name="referRateTrack")
    def refer_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "refer_rate_track")

    @refer_rate_track.setter
    def refer_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refer_rate_track", value)

    @property
    @pulumi.getter(name="registerContactTrace")
    def register_contact_trace(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable trace original IP/port within the contact header of REGISTER requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "register_contact_trace")

    @register_contact_trace.setter
    def register_contact_trace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "register_contact_trace", value)

    @property
    @pulumi.getter(name="registerRate")
    def register_rate(self) -> Optional[pulumi.Input[int]]:
        """
        REGISTER request rate limit (per second, per policy).
        """
        return pulumi.get(self, "register_rate")

    @register_rate.setter
    def register_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "register_rate", value)

    @property
    @pulumi.getter(name="registerRateTrack")
    def register_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "register_rate_track")

    @register_rate_track.setter
    def register_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "register_rate_track", value)

    @property
    @pulumi.getter(name="rfc2543Branch")
    def rfc2543_branch(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable support via branch compliant with RFC 2543. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rfc2543_branch")

    @rfc2543_branch.setter
    def rfc2543_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rfc2543_branch", value)

    @property
    @pulumi.getter
    def rtp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable create pinholes for RTP traffic to traverse firewall. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rtp")

    @rtp.setter
    def rtp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rtp", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslAuthClient")
    def ssl_auth_client(self) -> Optional[pulumi.Input[str]]:
        """
        Require a client certificate and authenticate it with the peer/peergrp.
        """
        return pulumi.get(self, "ssl_auth_client")

    @ssl_auth_client.setter
    def ssl_auth_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_auth_client", value)

    @property
    @pulumi.getter(name="sslAuthServer")
    def ssl_auth_server(self) -> Optional[pulumi.Input[str]]:
        """
        Authenticate the server's certificate with the peer/peergrp.
        """
        return pulumi.get(self, "ssl_auth_server")

    @ssl_auth_server.setter
    def ssl_auth_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_auth_server", value)

    @property
    @pulumi.getter(name="sslClientCertificate")
    def ssl_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Certificate to offer to server if requested.
        """
        return pulumi.get(self, "ssl_client_certificate")

    @ssl_client_certificate.setter
    def ssl_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_certificate", value)

    @property
    @pulumi.getter(name="sslClientRenegotiation")
    def ssl_client_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Allow/block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
        """
        return pulumi.get(self, "ssl_client_renegotiation")

    @ssl_client_renegotiation.setter
    def ssl_client_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_renegotiation", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        """
        Highest SSL/TLS version to negotiate.
        """
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest SSL/TLS version to negotiate.
        """
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS mode for encryption & decryption of traffic. Valid values: `off`, `full`.
        """
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter(name="sslPfs")
    def ssl_pfs(self) -> Optional[pulumi.Input[str]]:
        """
        SSL Perfect Forward Secrecy. Valid values: `require`, `deny`, `allow`.
        """
        return pulumi.get(self, "ssl_pfs")

    @ssl_pfs.setter
    def ssl_pfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_pfs", value)

    @property
    @pulumi.getter(name="sslSendEmptyFrags")
    def ssl_send_empty_frags(self) -> Optional[pulumi.Input[str]]:
        """
        Send empty fragments to avoid attack on CBC IV (SSL 3.0 & TLS 1.0 only). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_send_empty_frags")

    @ssl_send_empty_frags.setter
    def ssl_send_empty_frags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_send_empty_frags", value)

    @property
    @pulumi.getter(name="sslServerCertificate")
    def ssl_server_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Certificate return to the client in every SSL connection.
        """
        return pulumi.get(self, "ssl_server_certificate")

    @ssl_server_certificate.setter
    def ssl_server_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_certificate", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SIP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="strictRegister")
    def strict_register(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable only allow the registrar to connect. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "strict_register")

    @strict_register.setter
    def strict_register(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_register", value)

    @property
    @pulumi.getter(name="subscribeRate")
    def subscribe_rate(self) -> Optional[pulumi.Input[int]]:
        """
        SUBSCRIBE request rate limit (per second, per policy).
        """
        return pulumi.get(self, "subscribe_rate")

    @subscribe_rate.setter
    def subscribe_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subscribe_rate", value)

    @property
    @pulumi.getter(name="subscribeRateTrack")
    def subscribe_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "subscribe_rate_track")

    @subscribe_rate_track.setter
    def subscribe_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscribe_rate_track", value)

    @property
    @pulumi.getter(name="unknownHeader")
    def unknown_header(self) -> Optional[pulumi.Input[str]]:
        """
        Action for unknown SIP header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "unknown_header")

    @unknown_header.setter
    def unknown_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_header", value)

    @property
    @pulumi.getter(name="updateRate")
    def update_rate(self) -> Optional[pulumi.Input[int]]:
        """
        UPDATE request rate limit (per second, per policy).
        """
        return pulumi.get(self, "update_rate")

    @update_rate.setter
    def update_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_rate", value)

    @property
    @pulumi.getter(name="updateRateTrack")
    def update_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "update_rate_track")

    @update_rate_track.setter
    def update_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_rate_track", value)


