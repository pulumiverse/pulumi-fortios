# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['QuarantineArgs', 'Quarantine']

@pulumi.input_type
class QuarantineArgs:
    def __init__(__self__, *,
                 agelimit: Optional[pulumi.Input[int]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 drop_blocked: Optional[pulumi.Input[str]] = None,
                 drop_heuristic: Optional[pulumi.Input[str]] = None,
                 drop_infected: Optional[pulumi.Input[str]] = None,
                 drop_machine_learning: Optional[pulumi.Input[str]] = None,
                 lowspace: Optional[pulumi.Input[str]] = None,
                 maxfilesize: Optional[pulumi.Input[int]] = None,
                 quarantine_quota: Optional[pulumi.Input[int]] = None,
                 store_blocked: Optional[pulumi.Input[str]] = None,
                 store_heuristic: Optional[pulumi.Input[str]] = None,
                 store_infected: Optional[pulumi.Input[str]] = None,
                 store_machine_learning: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Quarantine resource.
        :param pulumi.Input[int] agelimit: Age limit for quarantined files (0 - 479 hours, 0 means forever).
        :param pulumi.Input[str] destination: Choose whether to quarantine files to the FortiGate disk or to FortiAnalyzer or to delete them instead of quarantining them. Valid values: `NULL`, `disk`, `FortiAnalyzer`.
        :param pulumi.Input[str] drop_blocked: Do not quarantine dropped files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        :param pulumi.Input[str] drop_heuristic: Do not quarantine files detected by heuristics found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        :param pulumi.Input[str] drop_infected: Do not quarantine infected files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        :param pulumi.Input[str] drop_machine_learning: Do not quarantine files detected by machine learning found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined. Valid values: `imap`, `smtp`, `pop3`, `http`, `ftp`, `nntp`, `imaps`, `smtps`, `pop3s`, `https`, `ftps`, `mapi`, `cifs`, `ssh`.
        :param pulumi.Input[str] lowspace: Select the method for handling additional files when running low on disk space. Valid values: `drop-new`, `ovrw-old`.
        :param pulumi.Input[int] maxfilesize: Maximum file size to quarantine (0 - 500 Mbytes, 0 means unlimited).
        :param pulumi.Input[int] quarantine_quota: The amount of disk space to reserve for quarantining files (0 - 4294967295 Mbytes, depends on disk space).
        :param pulumi.Input[str] store_blocked: Quarantine blocked files found in sessions using the selected protocols.
        :param pulumi.Input[str] store_heuristic: Quarantine files detected by heuristics found in sessions using the selected protocols.
        :param pulumi.Input[str] store_infected: Quarantine infected files found in sessions using the selected protocols.
        :param pulumi.Input[str] store_machine_learning: Quarantine files detected by machine learning found in sessions using the selected protocols. Valid values: `imap`, `smtp`, `pop3`, `http`, `ftp`, `nntp`, `imaps`, `smtps`, `pop3s`, `https`, `ftps`, `mapi`, `cifs`, `ssh`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if agelimit is not None:
            pulumi.set(__self__, "agelimit", agelimit)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if drop_blocked is not None:
            pulumi.set(__self__, "drop_blocked", drop_blocked)
        if drop_heuristic is not None:
            pulumi.set(__self__, "drop_heuristic", drop_heuristic)
        if drop_infected is not None:
            pulumi.set(__self__, "drop_infected", drop_infected)
        if drop_machine_learning is not None:
            pulumi.set(__self__, "drop_machine_learning", drop_machine_learning)
        if lowspace is not None:
            pulumi.set(__self__, "lowspace", lowspace)
        if maxfilesize is not None:
            pulumi.set(__self__, "maxfilesize", maxfilesize)
        if quarantine_quota is not None:
            pulumi.set(__self__, "quarantine_quota", quarantine_quota)
        if store_blocked is not None:
            pulumi.set(__self__, "store_blocked", store_blocked)
        if store_heuristic is not None:
            pulumi.set(__self__, "store_heuristic", store_heuristic)
        if store_infected is not None:
            pulumi.set(__self__, "store_infected", store_infected)
        if store_machine_learning is not None:
            pulumi.set(__self__, "store_machine_learning", store_machine_learning)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def agelimit(self) -> Optional[pulumi.Input[int]]:
        """
        Age limit for quarantined files (0 - 479 hours, 0 means forever).
        """
        return pulumi.get(self, "agelimit")

    @agelimit.setter
    def agelimit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "agelimit", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[str]]:
        """
        Choose whether to quarantine files to the FortiGate disk or to FortiAnalyzer or to delete them instead of quarantining them. Valid values: `NULL`, `disk`, `FortiAnalyzer`.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="dropBlocked")
    def drop_blocked(self) -> Optional[pulumi.Input[str]]:
        """
        Do not quarantine dropped files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        """
        return pulumi.get(self, "drop_blocked")

    @drop_blocked.setter
    def drop_blocked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_blocked", value)

    @property
    @pulumi.getter(name="dropHeuristic")
    def drop_heuristic(self) -> Optional[pulumi.Input[str]]:
        """
        Do not quarantine files detected by heuristics found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        """
        return pulumi.get(self, "drop_heuristic")

    @drop_heuristic.setter
    def drop_heuristic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_heuristic", value)

    @property
    @pulumi.getter(name="dropInfected")
    def drop_infected(self) -> Optional[pulumi.Input[str]]:
        """
        Do not quarantine infected files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        """
        return pulumi.get(self, "drop_infected")

    @drop_infected.setter
    def drop_infected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_infected", value)

    @property
    @pulumi.getter(name="dropMachineLearning")
    def drop_machine_learning(self) -> Optional[pulumi.Input[str]]:
        """
        Do not quarantine files detected by machine learning found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined. Valid values: `imap`, `smtp`, `pop3`, `http`, `ftp`, `nntp`, `imaps`, `smtps`, `pop3s`, `https`, `ftps`, `mapi`, `cifs`, `ssh`.
        """
        return pulumi.get(self, "drop_machine_learning")

    @drop_machine_learning.setter
    def drop_machine_learning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_machine_learning", value)

    @property
    @pulumi.getter
    def lowspace(self) -> Optional[pulumi.Input[str]]:
        """
        Select the method for handling additional files when running low on disk space. Valid values: `drop-new`, `ovrw-old`.
        """
        return pulumi.get(self, "lowspace")

    @lowspace.setter
    def lowspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lowspace", value)

    @property
    @pulumi.getter
    def maxfilesize(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum file size to quarantine (0 - 500 Mbytes, 0 means unlimited).
        """
        return pulumi.get(self, "maxfilesize")

    @maxfilesize.setter
    def maxfilesize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maxfilesize", value)

    @property
    @pulumi.getter(name="quarantineQuota")
    def quarantine_quota(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of disk space to reserve for quarantining files (0 - 4294967295 Mbytes, depends on disk space).
        """
        return pulumi.get(self, "quarantine_quota")

    @quarantine_quota.setter
    def quarantine_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarantine_quota", value)

    @property
    @pulumi.getter(name="storeBlocked")
    def store_blocked(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine blocked files found in sessions using the selected protocols.
        """
        return pulumi.get(self, "store_blocked")

    @store_blocked.setter
    def store_blocked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_blocked", value)

    @property
    @pulumi.getter(name="storeHeuristic")
    def store_heuristic(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine files detected by heuristics found in sessions using the selected protocols.
        """
        return pulumi.get(self, "store_heuristic")

    @store_heuristic.setter
    def store_heuristic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_heuristic", value)

    @property
    @pulumi.getter(name="storeInfected")
    def store_infected(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine infected files found in sessions using the selected protocols.
        """
        return pulumi.get(self, "store_infected")

    @store_infected.setter
    def store_infected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_infected", value)

    @property
    @pulumi.getter(name="storeMachineLearning")
    def store_machine_learning(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine files detected by machine learning found in sessions using the selected protocols. Valid values: `imap`, `smtp`, `pop3`, `http`, `ftp`, `nntp`, `imaps`, `smtps`, `pop3s`, `https`, `ftps`, `mapi`, `cifs`, `ssh`.
        """
        return pulumi.get(self, "store_machine_learning")

    @store_machine_learning.setter
    def store_machine_learning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_machine_learning", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _QuarantineState:
    def __init__(__self__, *,
                 agelimit: Optional[pulumi.Input[int]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 drop_blocked: Optional[pulumi.Input[str]] = None,
                 drop_heuristic: Optional[pulumi.Input[str]] = None,
                 drop_infected: Optional[pulumi.Input[str]] = None,
                 drop_machine_learning: Optional[pulumi.Input[str]] = None,
                 lowspace: Optional[pulumi.Input[str]] = None,
                 maxfilesize: Optional[pulumi.Input[int]] = None,
                 quarantine_quota: Optional[pulumi.Input[int]] = None,
                 store_blocked: Optional[pulumi.Input[str]] = None,
                 store_heuristic: Optional[pulumi.Input[str]] = None,
                 store_infected: Optional[pulumi.Input[str]] = None,
                 store_machine_learning: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Quarantine resources.
        :param pulumi.Input[int] agelimit: Age limit for quarantined files (0 - 479 hours, 0 means forever).
        :param pulumi.Input[str] destination: Choose whether to quarantine files to the FortiGate disk or to FortiAnalyzer or to delete them instead of quarantining them. Valid values: `NULL`, `disk`, `FortiAnalyzer`.
        :param pulumi.Input[str] drop_blocked: Do not quarantine dropped files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        :param pulumi.Input[str] drop_heuristic: Do not quarantine files detected by heuristics found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        :param pulumi.Input[str] drop_infected: Do not quarantine infected files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        :param pulumi.Input[str] drop_machine_learning: Do not quarantine files detected by machine learning found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined. Valid values: `imap`, `smtp`, `pop3`, `http`, `ftp`, `nntp`, `imaps`, `smtps`, `pop3s`, `https`, `ftps`, `mapi`, `cifs`, `ssh`.
        :param pulumi.Input[str] lowspace: Select the method for handling additional files when running low on disk space. Valid values: `drop-new`, `ovrw-old`.
        :param pulumi.Input[int] maxfilesize: Maximum file size to quarantine (0 - 500 Mbytes, 0 means unlimited).
        :param pulumi.Input[int] quarantine_quota: The amount of disk space to reserve for quarantining files (0 - 4294967295 Mbytes, depends on disk space).
        :param pulumi.Input[str] store_blocked: Quarantine blocked files found in sessions using the selected protocols.
        :param pulumi.Input[str] store_heuristic: Quarantine files detected by heuristics found in sessions using the selected protocols.
        :param pulumi.Input[str] store_infected: Quarantine infected files found in sessions using the selected protocols.
        :param pulumi.Input[str] store_machine_learning: Quarantine files detected by machine learning found in sessions using the selected protocols. Valid values: `imap`, `smtp`, `pop3`, `http`, `ftp`, `nntp`, `imaps`, `smtps`, `pop3s`, `https`, `ftps`, `mapi`, `cifs`, `ssh`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if agelimit is not None:
            pulumi.set(__self__, "agelimit", agelimit)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if drop_blocked is not None:
            pulumi.set(__self__, "drop_blocked", drop_blocked)
        if drop_heuristic is not None:
            pulumi.set(__self__, "drop_heuristic", drop_heuristic)
        if drop_infected is not None:
            pulumi.set(__self__, "drop_infected", drop_infected)
        if drop_machine_learning is not None:
            pulumi.set(__self__, "drop_machine_learning", drop_machine_learning)
        if lowspace is not None:
            pulumi.set(__self__, "lowspace", lowspace)
        if maxfilesize is not None:
            pulumi.set(__self__, "maxfilesize", maxfilesize)
        if quarantine_quota is not None:
            pulumi.set(__self__, "quarantine_quota", quarantine_quota)
        if store_blocked is not None:
            pulumi.set(__self__, "store_blocked", store_blocked)
        if store_heuristic is not None:
            pulumi.set(__self__, "store_heuristic", store_heuristic)
        if store_infected is not None:
            pulumi.set(__self__, "store_infected", store_infected)
        if store_machine_learning is not None:
            pulumi.set(__self__, "store_machine_learning", store_machine_learning)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def agelimit(self) -> Optional[pulumi.Input[int]]:
        """
        Age limit for quarantined files (0 - 479 hours, 0 means forever).
        """
        return pulumi.get(self, "agelimit")

    @agelimit.setter
    def agelimit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "agelimit", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[str]]:
        """
        Choose whether to quarantine files to the FortiGate disk or to FortiAnalyzer or to delete them instead of quarantining them. Valid values: `NULL`, `disk`, `FortiAnalyzer`.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="dropBlocked")
    def drop_blocked(self) -> Optional[pulumi.Input[str]]:
        """
        Do not quarantine dropped files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        """
        return pulumi.get(self, "drop_blocked")

    @drop_blocked.setter
    def drop_blocked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_blocked", value)

    @property
    @pulumi.getter(name="dropHeuristic")
    def drop_heuristic(self) -> Optional[pulumi.Input[str]]:
        """
        Do not quarantine files detected by heuristics found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        """
        return pulumi.get(self, "drop_heuristic")

    @drop_heuristic.setter
    def drop_heuristic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_heuristic", value)

    @property
    @pulumi.getter(name="dropInfected")
    def drop_infected(self) -> Optional[pulumi.Input[str]]:
        """
        Do not quarantine infected files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        """
        return pulumi.get(self, "drop_infected")

    @drop_infected.setter
    def drop_infected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_infected", value)

    @property
    @pulumi.getter(name="dropMachineLearning")
    def drop_machine_learning(self) -> Optional[pulumi.Input[str]]:
        """
        Do not quarantine files detected by machine learning found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined. Valid values: `imap`, `smtp`, `pop3`, `http`, `ftp`, `nntp`, `imaps`, `smtps`, `pop3s`, `https`, `ftps`, `mapi`, `cifs`, `ssh`.
        """
        return pulumi.get(self, "drop_machine_learning")

    @drop_machine_learning.setter
    def drop_machine_learning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_machine_learning", value)

    @property
    @pulumi.getter
    def lowspace(self) -> Optional[pulumi.Input[str]]:
        """
        Select the method for handling additional files when running low on disk space. Valid values: `drop-new`, `ovrw-old`.
        """
        return pulumi.get(self, "lowspace")

    @lowspace.setter
    def lowspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lowspace", value)

    @property
    @pulumi.getter
    def maxfilesize(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum file size to quarantine (0 - 500 Mbytes, 0 means unlimited).
        """
        return pulumi.get(self, "maxfilesize")

    @maxfilesize.setter
    def maxfilesize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maxfilesize", value)

    @property
    @pulumi.getter(name="quarantineQuota")
    def quarantine_quota(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of disk space to reserve for quarantining files (0 - 4294967295 Mbytes, depends on disk space).
        """
        return pulumi.get(self, "quarantine_quota")

    @quarantine_quota.setter
    def quarantine_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarantine_quota", value)

    @property
    @pulumi.getter(name="storeBlocked")
    def store_blocked(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine blocked files found in sessions using the selected protocols.
        """
        return pulumi.get(self, "store_blocked")

    @store_blocked.setter
    def store_blocked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_blocked", value)

    @property
    @pulumi.getter(name="storeHeuristic")
    def store_heuristic(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine files detected by heuristics found in sessions using the selected protocols.
        """
        return pulumi.get(self, "store_heuristic")

    @store_heuristic.setter
    def store_heuristic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_heuristic", value)

    @property
    @pulumi.getter(name="storeInfected")
    def store_infected(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine infected files found in sessions using the selected protocols.
        """
        return pulumi.get(self, "store_infected")

    @store_infected.setter
    def store_infected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_infected", value)

    @property
    @pulumi.getter(name="storeMachineLearning")
    def store_machine_learning(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine files detected by machine learning found in sessions using the selected protocols. Valid values: `imap`, `smtp`, `pop3`, `http`, `ftp`, `nntp`, `imaps`, `smtps`, `pop3s`, `https`, `ftps`, `mapi`, `cifs`, `ssh`.
        """
        return pulumi.get(self, "store_machine_learning")

    @store_machine_learning.setter
    def store_machine_learning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "store_machine_learning", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Quarantine(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agelimit: Optional[pulumi.Input[int]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 drop_blocked: Optional[pulumi.Input[str]] = None,
                 drop_heuristic: Optional[pulumi.Input[str]] = None,
                 drop_infected: Optional[pulumi.Input[str]] = None,
                 drop_machine_learning: Optional[pulumi.Input[str]] = None,
                 lowspace: Optional[pulumi.Input[str]] = None,
                 maxfilesize: Optional[pulumi.Input[int]] = None,
                 quarantine_quota: Optional[pulumi.Input[int]] = None,
                 store_blocked: Optional[pulumi.Input[str]] = None,
                 store_heuristic: Optional[pulumi.Input[str]] = None,
                 store_infected: Optional[pulumi.Input[str]] = None,
                 store_machine_learning: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure quarantine options.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.antivirus.Quarantine("trname",
            agelimit=0,
            destination="disk",
            lowspace="ovrw-old",
            maxfilesize=0,
            quarantine_quota=0,
            store_blocked="imap smtp pop3 http ftp nntp imaps smtps pop3s ftps mapi cifs",
            store_heuristic="imap smtp pop3 http ftp nntp imaps smtps pop3s https ftps mapi cifs",
            store_infected="imap smtp pop3 http ftp nntp imaps smtps pop3s https ftps mapi cifs")
        ```

        ## Import

        Antivirus Quarantine can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:antivirus/quarantine:Quarantine labelname AntivirusQuarantine
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:antivirus/quarantine:Quarantine labelname AntivirusQuarantine
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] agelimit: Age limit for quarantined files (0 - 479 hours, 0 means forever).
        :param pulumi.Input[str] destination: Choose whether to quarantine files to the FortiGate disk or to FortiAnalyzer or to delete them instead of quarantining them. Valid values: `NULL`, `disk`, `FortiAnalyzer`.
        :param pulumi.Input[str] drop_blocked: Do not quarantine dropped files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        :param pulumi.Input[str] drop_heuristic: Do not quarantine files detected by heuristics found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        :param pulumi.Input[str] drop_infected: Do not quarantine infected files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        :param pulumi.Input[str] drop_machine_learning: Do not quarantine files detected by machine learning found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined. Valid values: `imap`, `smtp`, `pop3`, `http`, `ftp`, `nntp`, `imaps`, `smtps`, `pop3s`, `https`, `ftps`, `mapi`, `cifs`, `ssh`.
        :param pulumi.Input[str] lowspace: Select the method for handling additional files when running low on disk space. Valid values: `drop-new`, `ovrw-old`.
        :param pulumi.Input[int] maxfilesize: Maximum file size to quarantine (0 - 500 Mbytes, 0 means unlimited).
        :param pulumi.Input[int] quarantine_quota: The amount of disk space to reserve for quarantining files (0 - 4294967295 Mbytes, depends on disk space).
        :param pulumi.Input[str] store_blocked: Quarantine blocked files found in sessions using the selected protocols.
        :param pulumi.Input[str] store_heuristic: Quarantine files detected by heuristics found in sessions using the selected protocols.
        :param pulumi.Input[str] store_infected: Quarantine infected files found in sessions using the selected protocols.
        :param pulumi.Input[str] store_machine_learning: Quarantine files detected by machine learning found in sessions using the selected protocols. Valid values: `imap`, `smtp`, `pop3`, `http`, `ftp`, `nntp`, `imaps`, `smtps`, `pop3s`, `https`, `ftps`, `mapi`, `cifs`, `ssh`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[QuarantineArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure quarantine options.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.antivirus.Quarantine("trname",
            agelimit=0,
            destination="disk",
            lowspace="ovrw-old",
            maxfilesize=0,
            quarantine_quota=0,
            store_blocked="imap smtp pop3 http ftp nntp imaps smtps pop3s ftps mapi cifs",
            store_heuristic="imap smtp pop3 http ftp nntp imaps smtps pop3s https ftps mapi cifs",
            store_infected="imap smtp pop3 http ftp nntp imaps smtps pop3s https ftps mapi cifs")
        ```

        ## Import

        Antivirus Quarantine can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:antivirus/quarantine:Quarantine labelname AntivirusQuarantine
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:antivirus/quarantine:Quarantine labelname AntivirusQuarantine
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param QuarantineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(QuarantineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agelimit: Optional[pulumi.Input[int]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 drop_blocked: Optional[pulumi.Input[str]] = None,
                 drop_heuristic: Optional[pulumi.Input[str]] = None,
                 drop_infected: Optional[pulumi.Input[str]] = None,
                 drop_machine_learning: Optional[pulumi.Input[str]] = None,
                 lowspace: Optional[pulumi.Input[str]] = None,
                 maxfilesize: Optional[pulumi.Input[int]] = None,
                 quarantine_quota: Optional[pulumi.Input[int]] = None,
                 store_blocked: Optional[pulumi.Input[str]] = None,
                 store_heuristic: Optional[pulumi.Input[str]] = None,
                 store_infected: Optional[pulumi.Input[str]] = None,
                 store_machine_learning: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = QuarantineArgs.__new__(QuarantineArgs)

            __props__.__dict__["agelimit"] = agelimit
            __props__.__dict__["destination"] = destination
            __props__.__dict__["drop_blocked"] = drop_blocked
            __props__.__dict__["drop_heuristic"] = drop_heuristic
            __props__.__dict__["drop_infected"] = drop_infected
            __props__.__dict__["drop_machine_learning"] = drop_machine_learning
            __props__.__dict__["lowspace"] = lowspace
            __props__.__dict__["maxfilesize"] = maxfilesize
            __props__.__dict__["quarantine_quota"] = quarantine_quota
            __props__.__dict__["store_blocked"] = store_blocked
            __props__.__dict__["store_heuristic"] = store_heuristic
            __props__.__dict__["store_infected"] = store_infected
            __props__.__dict__["store_machine_learning"] = store_machine_learning
            __props__.__dict__["vdomparam"] = vdomparam
        super(Quarantine, __self__).__init__(
            'fortios:antivirus/quarantine:Quarantine',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agelimit: Optional[pulumi.Input[int]] = None,
            destination: Optional[pulumi.Input[str]] = None,
            drop_blocked: Optional[pulumi.Input[str]] = None,
            drop_heuristic: Optional[pulumi.Input[str]] = None,
            drop_infected: Optional[pulumi.Input[str]] = None,
            drop_machine_learning: Optional[pulumi.Input[str]] = None,
            lowspace: Optional[pulumi.Input[str]] = None,
            maxfilesize: Optional[pulumi.Input[int]] = None,
            quarantine_quota: Optional[pulumi.Input[int]] = None,
            store_blocked: Optional[pulumi.Input[str]] = None,
            store_heuristic: Optional[pulumi.Input[str]] = None,
            store_infected: Optional[pulumi.Input[str]] = None,
            store_machine_learning: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Quarantine':
        """
        Get an existing Quarantine resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] agelimit: Age limit for quarantined files (0 - 479 hours, 0 means forever).
        :param pulumi.Input[str] destination: Choose whether to quarantine files to the FortiGate disk or to FortiAnalyzer or to delete them instead of quarantining them. Valid values: `NULL`, `disk`, `FortiAnalyzer`.
        :param pulumi.Input[str] drop_blocked: Do not quarantine dropped files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        :param pulumi.Input[str] drop_heuristic: Do not quarantine files detected by heuristics found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        :param pulumi.Input[str] drop_infected: Do not quarantine infected files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        :param pulumi.Input[str] drop_machine_learning: Do not quarantine files detected by machine learning found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined. Valid values: `imap`, `smtp`, `pop3`, `http`, `ftp`, `nntp`, `imaps`, `smtps`, `pop3s`, `https`, `ftps`, `mapi`, `cifs`, `ssh`.
        :param pulumi.Input[str] lowspace: Select the method for handling additional files when running low on disk space. Valid values: `drop-new`, `ovrw-old`.
        :param pulumi.Input[int] maxfilesize: Maximum file size to quarantine (0 - 500 Mbytes, 0 means unlimited).
        :param pulumi.Input[int] quarantine_quota: The amount of disk space to reserve for quarantining files (0 - 4294967295 Mbytes, depends on disk space).
        :param pulumi.Input[str] store_blocked: Quarantine blocked files found in sessions using the selected protocols.
        :param pulumi.Input[str] store_heuristic: Quarantine files detected by heuristics found in sessions using the selected protocols.
        :param pulumi.Input[str] store_infected: Quarantine infected files found in sessions using the selected protocols.
        :param pulumi.Input[str] store_machine_learning: Quarantine files detected by machine learning found in sessions using the selected protocols. Valid values: `imap`, `smtp`, `pop3`, `http`, `ftp`, `nntp`, `imaps`, `smtps`, `pop3s`, `https`, `ftps`, `mapi`, `cifs`, `ssh`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _QuarantineState.__new__(_QuarantineState)

        __props__.__dict__["agelimit"] = agelimit
        __props__.__dict__["destination"] = destination
        __props__.__dict__["drop_blocked"] = drop_blocked
        __props__.__dict__["drop_heuristic"] = drop_heuristic
        __props__.__dict__["drop_infected"] = drop_infected
        __props__.__dict__["drop_machine_learning"] = drop_machine_learning
        __props__.__dict__["lowspace"] = lowspace
        __props__.__dict__["maxfilesize"] = maxfilesize
        __props__.__dict__["quarantine_quota"] = quarantine_quota
        __props__.__dict__["store_blocked"] = store_blocked
        __props__.__dict__["store_heuristic"] = store_heuristic
        __props__.__dict__["store_infected"] = store_infected
        __props__.__dict__["store_machine_learning"] = store_machine_learning
        __props__.__dict__["vdomparam"] = vdomparam
        return Quarantine(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def agelimit(self) -> pulumi.Output[int]:
        """
        Age limit for quarantined files (0 - 479 hours, 0 means forever).
        """
        return pulumi.get(self, "agelimit")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output[str]:
        """
        Choose whether to quarantine files to the FortiGate disk or to FortiAnalyzer or to delete them instead of quarantining them. Valid values: `NULL`, `disk`, `FortiAnalyzer`.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="dropBlocked")
    def drop_blocked(self) -> pulumi.Output[str]:
        """
        Do not quarantine dropped files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        """
        return pulumi.get(self, "drop_blocked")

    @property
    @pulumi.getter(name="dropHeuristic")
    def drop_heuristic(self) -> pulumi.Output[str]:
        """
        Do not quarantine files detected by heuristics found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        """
        return pulumi.get(self, "drop_heuristic")

    @property
    @pulumi.getter(name="dropInfected")
    def drop_infected(self) -> pulumi.Output[str]:
        """
        Do not quarantine infected files found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined.
        """
        return pulumi.get(self, "drop_infected")

    @property
    @pulumi.getter(name="dropMachineLearning")
    def drop_machine_learning(self) -> pulumi.Output[str]:
        """
        Do not quarantine files detected by machine learning found in sessions using the selected protocols. Dropped files are deleted instead of being quarantined. Valid values: `imap`, `smtp`, `pop3`, `http`, `ftp`, `nntp`, `imaps`, `smtps`, `pop3s`, `https`, `ftps`, `mapi`, `cifs`, `ssh`.
        """
        return pulumi.get(self, "drop_machine_learning")

    @property
    @pulumi.getter
    def lowspace(self) -> pulumi.Output[str]:
        """
        Select the method for handling additional files when running low on disk space. Valid values: `drop-new`, `ovrw-old`.
        """
        return pulumi.get(self, "lowspace")

    @property
    @pulumi.getter
    def maxfilesize(self) -> pulumi.Output[int]:
        """
        Maximum file size to quarantine (0 - 500 Mbytes, 0 means unlimited).
        """
        return pulumi.get(self, "maxfilesize")

    @property
    @pulumi.getter(name="quarantineQuota")
    def quarantine_quota(self) -> pulumi.Output[int]:
        """
        The amount of disk space to reserve for quarantining files (0 - 4294967295 Mbytes, depends on disk space).
        """
        return pulumi.get(self, "quarantine_quota")

    @property
    @pulumi.getter(name="storeBlocked")
    def store_blocked(self) -> pulumi.Output[str]:
        """
        Quarantine blocked files found in sessions using the selected protocols.
        """
        return pulumi.get(self, "store_blocked")

    @property
    @pulumi.getter(name="storeHeuristic")
    def store_heuristic(self) -> pulumi.Output[str]:
        """
        Quarantine files detected by heuristics found in sessions using the selected protocols.
        """
        return pulumi.get(self, "store_heuristic")

    @property
    @pulumi.getter(name="storeInfected")
    def store_infected(self) -> pulumi.Output[str]:
        """
        Quarantine infected files found in sessions using the selected protocols.
        """
        return pulumi.get(self, "store_infected")

    @property
    @pulumi.getter(name="storeMachineLearning")
    def store_machine_learning(self) -> pulumi.Output[str]:
        """
        Quarantine files detected by machine learning found in sessions using the selected protocols. Valid values: `imap`, `smtp`, `pop3`, `http`, `ftp`, `nntp`, `imaps`, `smtps`, `pop3s`, `https`, `ftps`, `mapi`, `cifs`, `ssh`.
        """
        return pulumi.get(self, "store_machine_learning")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

