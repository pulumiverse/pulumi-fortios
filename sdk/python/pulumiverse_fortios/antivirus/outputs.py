# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ProfileCifs',
    'ProfileContentDisarm',
    'ProfileExternalBlocklist',
    'ProfileFtp',
    'ProfileHttp',
    'ProfileImap',
    'ProfileMapi',
    'ProfileNacQuar',
    'ProfileNntp',
    'ProfileOutbreakPrevention',
    'ProfilePop3',
    'ProfileSmb',
    'ProfileSmtp',
    'ProfileSsh',
]

@pulumi.output_type
class ProfileCifs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileCifs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileCifs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileCifs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 emulator: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        """
        :param str archive_block: Select the archive types to block.
        :param str archive_log: Select the archive types to log.
        :param str av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param str emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param str external_blocklist: Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        :param str fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param str fortindr: Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        :param str fortisandbox: Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        :param str options: Enable/disable CIFS AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param str outbreak_prevention: Enable Virus Outbreak Prevention service.
        :param str quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        """
        Select the archive types to block.
        """
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        """
        Select the archive types to log.
        """
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        """
        Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        """
        Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        """
        Enable/disable CIFS AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        """
        Enable Virus Outbreak Prevention service.
        """
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class ProfileContentDisarm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coverPage":
            suggest = "cover_page"
        elif key == "detectOnly":
            suggest = "detect_only"
        elif key == "errorAction":
            suggest = "error_action"
        elif key == "officeAction":
            suggest = "office_action"
        elif key == "officeDde":
            suggest = "office_dde"
        elif key == "officeEmbed":
            suggest = "office_embed"
        elif key == "officeHylink":
            suggest = "office_hylink"
        elif key == "officeLinked":
            suggest = "office_linked"
        elif key == "officeMacro":
            suggest = "office_macro"
        elif key == "originalFileDestination":
            suggest = "original_file_destination"
        elif key == "pdfActForm":
            suggest = "pdf_act_form"
        elif key == "pdfActGotor":
            suggest = "pdf_act_gotor"
        elif key == "pdfActJava":
            suggest = "pdf_act_java"
        elif key == "pdfActLaunch":
            suggest = "pdf_act_launch"
        elif key == "pdfActMovie":
            suggest = "pdf_act_movie"
        elif key == "pdfActSound":
            suggest = "pdf_act_sound"
        elif key == "pdfEmbedfile":
            suggest = "pdf_embedfile"
        elif key == "pdfHyperlink":
            suggest = "pdf_hyperlink"
        elif key == "pdfJavacode":
            suggest = "pdf_javacode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileContentDisarm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileContentDisarm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileContentDisarm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cover_page: Optional[str] = None,
                 detect_only: Optional[str] = None,
                 error_action: Optional[str] = None,
                 office_action: Optional[str] = None,
                 office_dde: Optional[str] = None,
                 office_embed: Optional[str] = None,
                 office_hylink: Optional[str] = None,
                 office_linked: Optional[str] = None,
                 office_macro: Optional[str] = None,
                 original_file_destination: Optional[str] = None,
                 pdf_act_form: Optional[str] = None,
                 pdf_act_gotor: Optional[str] = None,
                 pdf_act_java: Optional[str] = None,
                 pdf_act_launch: Optional[str] = None,
                 pdf_act_movie: Optional[str] = None,
                 pdf_act_sound: Optional[str] = None,
                 pdf_embedfile: Optional[str] = None,
                 pdf_hyperlink: Optional[str] = None,
                 pdf_javacode: Optional[str] = None):
        """
        :param str cover_page: Enable/disable inserting a cover page into the disarmed document. Valid values: `disable`, `enable`.
        :param str detect_only: Enable/disable only detect disarmable files, do not alter content. Valid values: `disable`, `enable`.
        :param str error_action: Action to be taken if CDR engine encounters an unrecoverable error. Valid values: `block`, `log-only`, `ignore`.
        :param str office_action: Enable/disable stripping of PowerPoint action events in Microsoft Office documents. Valid values: `disable`, `enable`.
        :param str office_dde: Enable/disable stripping of Dynamic Data Exchange events in Microsoft Office documents. Valid values: `disable`, `enable`.
        :param str office_embed: Enable/disable stripping of embedded objects in Microsoft Office documents. Valid values: `disable`, `enable`.
        :param str office_hylink: Enable/disable stripping of hyperlinks in Microsoft Office documents. Valid values: `disable`, `enable`.
        :param str office_linked: Enable/disable stripping of linked objects in Microsoft Office documents. Valid values: `disable`, `enable`.
        :param str office_macro: Enable/disable stripping of macros in Microsoft Office documents. Valid values: `disable`, `enable`.
        :param str original_file_destination: Destination to send original file if active content is removed. Valid values: `fortisandbox`, `quarantine`, `discard`.
        :param str pdf_act_form: Enable/disable stripping of actions that submit data to other targets in PDF documents. Valid values: `disable`, `enable`.
        :param str pdf_act_gotor: Enable/disable stripping of links to other PDFs in PDF documents. Valid values: `disable`, `enable`.
        :param str pdf_act_java: Enable/disable stripping of actions that execute JavaScript code in PDF documents. Valid values: `disable`, `enable`.
        :param str pdf_act_launch: Enable/disable stripping of links to external applications in PDF documents. Valid values: `disable`, `enable`.
        :param str pdf_act_movie: Enable/disable stripping of embedded movies in PDF documents. Valid values: `disable`, `enable`.
        :param str pdf_act_sound: Enable/disable stripping of embedded sound files in PDF documents. Valid values: `disable`, `enable`.
        :param str pdf_embedfile: Enable/disable stripping of embedded files in PDF documents. Valid values: `disable`, `enable`.
        :param str pdf_hyperlink: Enable/disable stripping of hyperlinks from PDF documents. Valid values: `disable`, `enable`.
        :param str pdf_javacode: Enable/disable stripping of JavaScript code in PDF documents. Valid values: `disable`, `enable`.
        """
        if cover_page is not None:
            pulumi.set(__self__, "cover_page", cover_page)
        if detect_only is not None:
            pulumi.set(__self__, "detect_only", detect_only)
        if error_action is not None:
            pulumi.set(__self__, "error_action", error_action)
        if office_action is not None:
            pulumi.set(__self__, "office_action", office_action)
        if office_dde is not None:
            pulumi.set(__self__, "office_dde", office_dde)
        if office_embed is not None:
            pulumi.set(__self__, "office_embed", office_embed)
        if office_hylink is not None:
            pulumi.set(__self__, "office_hylink", office_hylink)
        if office_linked is not None:
            pulumi.set(__self__, "office_linked", office_linked)
        if office_macro is not None:
            pulumi.set(__self__, "office_macro", office_macro)
        if original_file_destination is not None:
            pulumi.set(__self__, "original_file_destination", original_file_destination)
        if pdf_act_form is not None:
            pulumi.set(__self__, "pdf_act_form", pdf_act_form)
        if pdf_act_gotor is not None:
            pulumi.set(__self__, "pdf_act_gotor", pdf_act_gotor)
        if pdf_act_java is not None:
            pulumi.set(__self__, "pdf_act_java", pdf_act_java)
        if pdf_act_launch is not None:
            pulumi.set(__self__, "pdf_act_launch", pdf_act_launch)
        if pdf_act_movie is not None:
            pulumi.set(__self__, "pdf_act_movie", pdf_act_movie)
        if pdf_act_sound is not None:
            pulumi.set(__self__, "pdf_act_sound", pdf_act_sound)
        if pdf_embedfile is not None:
            pulumi.set(__self__, "pdf_embedfile", pdf_embedfile)
        if pdf_hyperlink is not None:
            pulumi.set(__self__, "pdf_hyperlink", pdf_hyperlink)
        if pdf_javacode is not None:
            pulumi.set(__self__, "pdf_javacode", pdf_javacode)

    @property
    @pulumi.getter(name="coverPage")
    def cover_page(self) -> Optional[str]:
        """
        Enable/disable inserting a cover page into the disarmed document. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "cover_page")

    @property
    @pulumi.getter(name="detectOnly")
    def detect_only(self) -> Optional[str]:
        """
        Enable/disable only detect disarmable files, do not alter content. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "detect_only")

    @property
    @pulumi.getter(name="errorAction")
    def error_action(self) -> Optional[str]:
        """
        Action to be taken if CDR engine encounters an unrecoverable error. Valid values: `block`, `log-only`, `ignore`.
        """
        return pulumi.get(self, "error_action")

    @property
    @pulumi.getter(name="officeAction")
    def office_action(self) -> Optional[str]:
        """
        Enable/disable stripping of PowerPoint action events in Microsoft Office documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "office_action")

    @property
    @pulumi.getter(name="officeDde")
    def office_dde(self) -> Optional[str]:
        """
        Enable/disable stripping of Dynamic Data Exchange events in Microsoft Office documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "office_dde")

    @property
    @pulumi.getter(name="officeEmbed")
    def office_embed(self) -> Optional[str]:
        """
        Enable/disable stripping of embedded objects in Microsoft Office documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "office_embed")

    @property
    @pulumi.getter(name="officeHylink")
    def office_hylink(self) -> Optional[str]:
        """
        Enable/disable stripping of hyperlinks in Microsoft Office documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "office_hylink")

    @property
    @pulumi.getter(name="officeLinked")
    def office_linked(self) -> Optional[str]:
        """
        Enable/disable stripping of linked objects in Microsoft Office documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "office_linked")

    @property
    @pulumi.getter(name="officeMacro")
    def office_macro(self) -> Optional[str]:
        """
        Enable/disable stripping of macros in Microsoft Office documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "office_macro")

    @property
    @pulumi.getter(name="originalFileDestination")
    def original_file_destination(self) -> Optional[str]:
        """
        Destination to send original file if active content is removed. Valid values: `fortisandbox`, `quarantine`, `discard`.
        """
        return pulumi.get(self, "original_file_destination")

    @property
    @pulumi.getter(name="pdfActForm")
    def pdf_act_form(self) -> Optional[str]:
        """
        Enable/disable stripping of actions that submit data to other targets in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_act_form")

    @property
    @pulumi.getter(name="pdfActGotor")
    def pdf_act_gotor(self) -> Optional[str]:
        """
        Enable/disable stripping of links to other PDFs in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_act_gotor")

    @property
    @pulumi.getter(name="pdfActJava")
    def pdf_act_java(self) -> Optional[str]:
        """
        Enable/disable stripping of actions that execute JavaScript code in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_act_java")

    @property
    @pulumi.getter(name="pdfActLaunch")
    def pdf_act_launch(self) -> Optional[str]:
        """
        Enable/disable stripping of links to external applications in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_act_launch")

    @property
    @pulumi.getter(name="pdfActMovie")
    def pdf_act_movie(self) -> Optional[str]:
        """
        Enable/disable stripping of embedded movies in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_act_movie")

    @property
    @pulumi.getter(name="pdfActSound")
    def pdf_act_sound(self) -> Optional[str]:
        """
        Enable/disable stripping of embedded sound files in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_act_sound")

    @property
    @pulumi.getter(name="pdfEmbedfile")
    def pdf_embedfile(self) -> Optional[str]:
        """
        Enable/disable stripping of embedded files in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_embedfile")

    @property
    @pulumi.getter(name="pdfHyperlink")
    def pdf_hyperlink(self) -> Optional[str]:
        """
        Enable/disable stripping of hyperlinks from PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_hyperlink")

    @property
    @pulumi.getter(name="pdfJavacode")
    def pdf_javacode(self) -> Optional[str]:
        """
        Enable/disable stripping of JavaScript code in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_javacode")


@pulumi.output_type
class ProfileExternalBlocklist(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: External blocklist.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        External blocklist.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileFtp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileFtp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileFtp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileFtp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 emulator: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        """
        :param str archive_block: Select the archive types to block.
        :param str archive_log: Select the archive types to log.
        :param str av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param str emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param str external_blocklist: Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        :param str fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param str fortindr: Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        :param str fortisandbox: Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        :param str options: Enable/disable FTP AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param str outbreak_prevention: Enable Virus Outbreak Prevention service.
        :param str quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        """
        Select the archive types to block.
        """
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        """
        Select the archive types to log.
        """
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        """
        Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        """
        Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        """
        Enable/disable FTP AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        """
        Enable Virus Outbreak Prevention service.
        """
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class ProfileHttp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "contentDisarm":
            suggest = "content_disarm"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"
        elif key == "unknownContentEncoding":
            suggest = "unknown_content_encoding"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileHttp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileHttp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileHttp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 content_disarm: Optional[str] = None,
                 emulator: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None,
                 unknown_content_encoding: Optional[str] = None):
        """
        :param str archive_block: Select the archive types to block.
        :param str archive_log: Select the archive types to log.
        :param str av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param str content_disarm: Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
        :param str emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param str external_blocklist: Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        :param str fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param str fortindr: Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        :param str fortisandbox: Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        :param str options: Enable/disable HTTP AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param str outbreak_prevention: Enable Virus Outbreak Prevention service.
        :param str quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        :param str unknown_content_encoding: Configure the action the FortiGate unit will take on unknown content-encoding. Valid values: `block`, `inspect`, `bypass`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if unknown_content_encoding is not None:
            pulumi.set(__self__, "unknown_content_encoding", unknown_content_encoding)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        """
        Select the archive types to block.
        """
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        """
        Select the archive types to log.
        """
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[str]:
        """
        Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "content_disarm")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        """
        Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        """
        Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        """
        Enable/disable HTTP AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        """
        Enable Virus Outbreak Prevention service.
        """
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")

    @property
    @pulumi.getter(name="unknownContentEncoding")
    def unknown_content_encoding(self) -> Optional[str]:
        """
        Configure the action the FortiGate unit will take on unknown content-encoding. Valid values: `block`, `inspect`, `bypass`.
        """
        return pulumi.get(self, "unknown_content_encoding")


@pulumi.output_type
class ProfileImap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "contentDisarm":
            suggest = "content_disarm"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileImap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileImap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileImap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 content_disarm: Optional[str] = None,
                 emulator: Optional[str] = None,
                 executables: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        """
        :param str archive_block: Select the archive types to block.
        :param str archive_log: Select the archive types to log.
        :param str av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param str content_disarm: Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
        :param str emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param str executables: Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        :param str external_blocklist: Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        :param str fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param str fortindr: Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        :param str fortisandbox: Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        :param str options: Enable/disable POP3 AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param str outbreak_prevention: Enable Virus Outbreak Prevention service.
        :param str quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        """
        Select the archive types to block.
        """
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        """
        Select the archive types to log.
        """
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[str]:
        """
        Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "content_disarm")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter
    def executables(self) -> Optional[str]:
        """
        Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        """
        return pulumi.get(self, "executables")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        """
        Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        """
        Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        """
        Enable/disable POP3 AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        """
        Enable Virus Outbreak Prevention service.
        """
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class ProfileMapi(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileMapi. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileMapi.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileMapi.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 emulator: Optional[str] = None,
                 executables: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        """
        :param str archive_block: Select the archive types to block.
        :param str archive_log: Select the archive types to log.
        :param str av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param str emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param str executables: Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        :param str external_blocklist: Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        :param str fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param str fortindr: Enable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        :param str fortisandbox: Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        :param str options: Enable/disable MAPI AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param str outbreak_prevention: Enable Virus Outbreak Prevention service.
        :param str quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        """
        Select the archive types to block.
        """
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        """
        Select the archive types to log.
        """
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter
    def executables(self) -> Optional[str]:
        """
        Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        """
        return pulumi.get(self, "executables")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        """
        Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        """
        Enable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        """
        Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        """
        Enable/disable MAPI AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        """
        Enable Virus Outbreak Prevention service.
        """
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class ProfileNacQuar(dict):
    def __init__(__self__, *,
                 expiry: Optional[str] = None,
                 infected: Optional[str] = None,
                 log: Optional[str] = None):
        """
        :param str expiry: Duration of quarantine.
        :param str infected: Enable/Disable quarantining infected hosts to the banned user list. Valid values: `none`, `quar-src-ip`.
        :param str log: Enable/disable AntiVirus quarantine logging. Valid values: `enable`, `disable`.
        """
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if infected is not None:
            pulumi.set(__self__, "infected", infected)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def expiry(self) -> Optional[str]:
        """
        Duration of quarantine.
        """
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter
    def infected(self) -> Optional[str]:
        """
        Enable/Disable quarantining infected hosts to the banned user list. Valid values: `none`, `quar-src-ip`.
        """
        return pulumi.get(self, "infected")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable AntiVirus quarantine logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")


@pulumi.output_type
class ProfileNntp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileNntp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileNntp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileNntp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 emulator: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        """
        :param str archive_block: Select the archive types to block.
        :param str archive_log: Select the archive types to log.
        :param str av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param str emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param str external_blocklist: Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        :param str fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param str fortindr: Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        :param str fortisandbox: Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        :param str options: Enable/disable NNTP AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param str outbreak_prevention: Enable Virus Outbreak Prevention service.
        :param str quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        """
        Select the archive types to block.
        """
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        """
        Select the archive types to log.
        """
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        """
        Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        """
        Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        """
        Enable/disable NNTP AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        """
        Enable Virus Outbreak Prevention service.
        """
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class ProfileOutbreakPrevention(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "ftgdService":
            suggest = "ftgd_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileOutbreakPrevention. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileOutbreakPrevention.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileOutbreakPrevention.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_blocklist: Optional[str] = None,
                 ftgd_service: Optional[str] = None):
        """
        :param str external_blocklist: Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        :param str ftgd_service: Enable/disable FortiGuard Virus outbreak prevention service. Valid values: `disable`, `enable`.
        """
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if ftgd_service is not None:
            pulumi.set(__self__, "ftgd_service", ftgd_service)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        """
        Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter(name="ftgdService")
    def ftgd_service(self) -> Optional[str]:
        """
        Enable/disable FortiGuard Virus outbreak prevention service. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ftgd_service")


@pulumi.output_type
class ProfilePop3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "contentDisarm":
            suggest = "content_disarm"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfilePop3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfilePop3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfilePop3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 content_disarm: Optional[str] = None,
                 emulator: Optional[str] = None,
                 executables: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        """
        :param str archive_block: Select the archive types to block.
        :param str archive_log: Select the archive types to log.
        :param str av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param str content_disarm: AV Content Disarm and Reconstruction settings. The structure of `content_disarm` block is documented below.
        :param str emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param str executables: Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        :param str external_blocklist: One or more external malware block lists. The structure of `external_blocklist` block is documented below.
        :param str fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param str fortindr: Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        :param str fortisandbox: Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        :param str options: Enable/disable CIFS AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param str outbreak_prevention: Configure Virus Outbreak Prevention settings. The structure of `outbreak_prevention` block is documented below.
        :param str quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        """
        Select the archive types to block.
        """
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        """
        Select the archive types to log.
        """
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[str]:
        """
        AV Content Disarm and Reconstruction settings. The structure of `content_disarm` block is documented below.
        """
        return pulumi.get(self, "content_disarm")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter
    def executables(self) -> Optional[str]:
        """
        Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        """
        return pulumi.get(self, "executables")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        """
        One or more external malware block lists. The structure of `external_blocklist` block is documented below.
        """
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        """
        Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        """
        Enable/disable CIFS AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        """
        Configure Virus Outbreak Prevention settings. The structure of `outbreak_prevention` block is documented below.
        """
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class ProfileSmb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileSmb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileSmb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileSmb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 emulator: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None):
        """
        :param str archive_block: Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param str archive_log: Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param str emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param str options: Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param str outbreak_prevention: Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        """
        Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        """
        Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        """
        Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        """
        Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        """
        return pulumi.get(self, "outbreak_prevention")


@pulumi.output_type
class ProfileSmtp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "contentDisarm":
            suggest = "content_disarm"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileSmtp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileSmtp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileSmtp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 content_disarm: Optional[str] = None,
                 emulator: Optional[str] = None,
                 executables: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        """
        :param str archive_block: Select the archive types to block.
        :param str archive_log: Select the archive types to log.
        :param str av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param str content_disarm: Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
        :param str emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param str executables: Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        :param str external_blocklist: Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        :param str fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param str fortindr: Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        :param str fortisandbox: Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        :param str options: Enable/disable SMTP AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param str outbreak_prevention: Enable Virus Outbreak Prevention service.
        :param str quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        """
        Select the archive types to block.
        """
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        """
        Select the archive types to log.
        """
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[str]:
        """
        Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "content_disarm")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter
    def executables(self) -> Optional[str]:
        """
        Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        """
        return pulumi.get(self, "executables")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        """
        Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        """
        Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        """
        Enable/disable SMTP AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        """
        Enable Virus Outbreak Prevention service.
        """
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")


@pulumi.output_type
class ProfileSsh(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveBlock":
            suggest = "archive_block"
        elif key == "archiveLog":
            suggest = "archive_log"
        elif key == "avScan":
            suggest = "av_scan"
        elif key == "externalBlocklist":
            suggest = "external_blocklist"
        elif key == "outbreakPrevention":
            suggest = "outbreak_prevention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileSsh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileSsh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileSsh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_block: Optional[str] = None,
                 archive_log: Optional[str] = None,
                 av_scan: Optional[str] = None,
                 emulator: Optional[str] = None,
                 external_blocklist: Optional[str] = None,
                 fortiai: Optional[str] = None,
                 fortindr: Optional[str] = None,
                 fortisandbox: Optional[str] = None,
                 options: Optional[str] = None,
                 outbreak_prevention: Optional[str] = None,
                 quarantine: Optional[str] = None):
        """
        :param str archive_block: Select the archive types to block.
        :param str archive_log: Select the archive types to log.
        :param str av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param str emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param str external_blocklist: Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        :param str fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param str fortindr: Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        :param str fortisandbox: Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        :param str options: Enable/disable SFTP and SCP AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param str outbreak_prevention: Enable Virus Outbreak Prevention service.
        :param str quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fortindr is not None:
            pulumi.set(__self__, "fortindr", fortindr)
        if fortisandbox is not None:
            pulumi.set(__self__, "fortisandbox", fortisandbox)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[str]:
        """
        Select the archive types to block.
        """
        return pulumi.get(self, "archive_block")

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[str]:
        """
        Select the archive types to log.
        """
        return pulumi.get(self, "archive_log")

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[str]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @property
    @pulumi.getter
    def emulator(self) -> Optional[str]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[str]:
        """
        Enable external-blocklist. Analyzes files including the content of archives. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "external_blocklist")

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @property
    @pulumi.getter
    def fortindr(self) -> Optional[str]:
        """
        Enable/disable scanning of files by FortiNDR. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortindr")

    @property
    @pulumi.getter
    def fortisandbox(self) -> Optional[str]:
        """
        Enable scanning of files by FortiSandbox. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortisandbox")

    @property
    @pulumi.getter
    def options(self) -> Optional[str]:
        """
        Enable/disable SFTP and SCP AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[str]:
        """
        Enable Virus Outbreak Prevention service.
        """
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[str]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")


