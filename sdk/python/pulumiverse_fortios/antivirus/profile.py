# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProfileArgs', 'Profile']

@pulumi.input_type
class ProfileArgs:
    def __init__(__self__, *,
                 analytics_accept_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_bl_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_db: Optional[pulumi.Input[str]] = None,
                 analytics_ignore_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_max_upload: Optional[pulumi.Input[int]] = None,
                 analytics_wl_filetype: Optional[pulumi.Input[int]] = None,
                 av_block_log: Optional[pulumi.Input[str]] = None,
                 av_virus_log: Optional[pulumi.Input[str]] = None,
                 cifs: Optional[pulumi.Input['ProfileCifsArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input['ProfileContentDisarmArgs']] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_threat_feed: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external_blocklist_enable_all: Optional[pulumi.Input[str]] = None,
                 external_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileExternalBlocklistArgs']]]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 fortiai_error_action: Optional[pulumi.Input[str]] = None,
                 fortiai_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortindr_error_action: Optional[pulumi.Input[str]] = None,
                 fortindr_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_error_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_max_upload: Optional[pulumi.Input[int]] = None,
                 fortisandbox_mode: Optional[pulumi.Input[str]] = None,
                 fortisandbox_timeout_action: Optional[pulumi.Input[str]] = None,
                 ftgd_analytics: Optional[pulumi.Input[str]] = None,
                 ftp: Optional[pulumi.Input['ProfileFtpArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http: Optional[pulumi.Input['ProfileHttpArgs']] = None,
                 imap: Optional[pulumi.Input['ProfileImapArgs']] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 mapi: Optional[pulumi.Input['ProfileMapiArgs']] = None,
                 mobile_malware_db: Optional[pulumi.Input[str]] = None,
                 nac_quar: Optional[pulumi.Input['ProfileNacQuarArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntp: Optional[pulumi.Input['ProfileNntpArgs']] = None,
                 outbreak_prevention: Optional[pulumi.Input['ProfileOutbreakPreventionArgs']] = None,
                 outbreak_prevention_archive_scan: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input['ProfilePop3Args']] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 scan_mode: Optional[pulumi.Input[str]] = None,
                 smb: Optional[pulumi.Input['ProfileSmbArgs']] = None,
                 smtp: Optional[pulumi.Input['ProfileSmtpArgs']] = None,
                 ssh: Optional[pulumi.Input['ProfileSshArgs']] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Profile resource.
        :param pulumi.Input[int] analytics_accept_filetype: Only submit files matching this DLP file-pattern to FortiSandbox.
        :param pulumi.Input[int] analytics_bl_filetype: Only submit files matching this DLP file-pattern to FortiSandbox.
        :param pulumi.Input[str] analytics_db: Enable/disable using the FortiSandbox signature database to supplement the AV signature databases. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] analytics_ignore_filetype: Do not submit files matching this DLP file-pattern to FortiSandbox (post-transfer scan only).
        :param pulumi.Input[int] analytics_max_upload: Maximum size of files that can be uploaded to FortiSandbox.
        :param pulumi.Input[int] analytics_wl_filetype: Do not submit files matching this DLP file-pattern to FortiSandbox.
        :param pulumi.Input[str] av_block_log: Enable/disable logging for AntiVirus file blocking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_virus_log: Enable/disable AntiVirus logging. Valid values: `enable`, `disable`.
        :param pulumi.Input['ProfileCifsArgs'] cifs: Configure CIFS AntiVirus options. The structure of `cifs` block is documented below.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input['ProfileContentDisarmArgs'] content_disarm: AV Content Disarm and Reconstruction settings. The structure of `content_disarm` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ems_threat_feed: Enable/disable use of EMS threat feed when performing AntiVirus scan. Analyzes files including the content of archives. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] extended_log: Enable/disable extended logging for antivirus. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external_blocklist_enable_all: Enable/disable all external blocklists. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileExternalBlocklistArgs']]] external_blocklists: One or more external malware block lists. The structure of `external_blocklist` block is documented below.
        :param pulumi.Input[str] feature_set: Flow/proxy feature set. Valid values: `flow`, `proxy`.
        :param pulumi.Input[str] fortiai_error_action: Action to take if FortiAI encounters an error. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortiai_timeout_action: Action to take if FortiAI encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortindr_error_action: Action to take if FortiNDR encounters an error. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortindr_timeout_action: Action to take if FortiNDR encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortisandbox_error_action: Action to take if FortiSandbox inline scan encounters an error. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[int] fortisandbox_max_upload: Maximum size of files that can be uploaded to FortiSandbox.
        :param pulumi.Input[str] fortisandbox_mode: FortiSandbox scan modes. Valid values: `inline`, `analytics-suspicious`, `analytics-everything`.
        :param pulumi.Input[str] fortisandbox_timeout_action: Action to take if FortiSandbox inline scan encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] ftgd_analytics: Settings to control which files are uploaded to FortiSandbox. Valid values: `disable`, `suspicious`, `everything`.
        :param pulumi.Input['ProfileFtpArgs'] ftp: Configure FTP AntiVirus options. The structure of `ftp` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input['ProfileHttpArgs'] http: Configure HTTP AntiVirus options. The structure of `http` block is documented below.
        :param pulumi.Input['ProfileImapArgs'] imap: Configure IMAP AntiVirus options. The structure of `imap` block is documented below.
        :param pulumi.Input[str] inspection_mode: Inspection mode. Valid values: `proxy`, `flow-based`.
        :param pulumi.Input['ProfileMapiArgs'] mapi: Configure MAPI AntiVirus options. The structure of `mapi` block is documented below.
        :param pulumi.Input[str] mobile_malware_db: Enable/disable using the mobile malware signature database. Valid values: `disable`, `enable`.
        :param pulumi.Input['ProfileNacQuarArgs'] nac_quar: Configure AntiVirus quarantine settings. The structure of `nac_quar` block is documented below.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input['ProfileNntpArgs'] nntp: Configure NNTP AntiVirus options. The structure of `nntp` block is documented below.
        :param pulumi.Input['ProfileOutbreakPreventionArgs'] outbreak_prevention: Configure Virus Outbreak Prevention settings. The structure of `outbreak_prevention` block is documented below.
        :param pulumi.Input[str] outbreak_prevention_archive_scan: Enable/disable outbreak-prevention archive scanning. Valid values: `disable`, `enable`.
        :param pulumi.Input['ProfilePop3Args'] pop3: Configure POP3 AntiVirus options. The structure of `pop3` block is documented below.
        :param pulumi.Input[str] replacemsg_group: Replacement message group customized for this profile.
        :param pulumi.Input[str] scan_mode: Configure scan mode (default or legacy).
        :param pulumi.Input['ProfileSmbArgs'] smb: Configure SMB AntiVirus options. The structure of `smb` block is documented below.
        :param pulumi.Input['ProfileSmtpArgs'] smtp: Configure SMTP AntiVirus options. The structure of `smtp` block is documented below.
        :param pulumi.Input['ProfileSshArgs'] ssh: Configure SFTP and SCP AntiVirus options. The structure of `ssh` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if analytics_accept_filetype is not None:
            pulumi.set(__self__, "analytics_accept_filetype", analytics_accept_filetype)
        if analytics_bl_filetype is not None:
            pulumi.set(__self__, "analytics_bl_filetype", analytics_bl_filetype)
        if analytics_db is not None:
            pulumi.set(__self__, "analytics_db", analytics_db)
        if analytics_ignore_filetype is not None:
            pulumi.set(__self__, "analytics_ignore_filetype", analytics_ignore_filetype)
        if analytics_max_upload is not None:
            pulumi.set(__self__, "analytics_max_upload", analytics_max_upload)
        if analytics_wl_filetype is not None:
            pulumi.set(__self__, "analytics_wl_filetype", analytics_wl_filetype)
        if av_block_log is not None:
            pulumi.set(__self__, "av_block_log", av_block_log)
        if av_virus_log is not None:
            pulumi.set(__self__, "av_virus_log", av_virus_log)
        if cifs is not None:
            pulumi.set(__self__, "cifs", cifs)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ems_threat_feed is not None:
            pulumi.set(__self__, "ems_threat_feed", ems_threat_feed)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if external_blocklist_enable_all is not None:
            pulumi.set(__self__, "external_blocklist_enable_all", external_blocklist_enable_all)
        if external_blocklists is not None:
            pulumi.set(__self__, "external_blocklists", external_blocklists)
        if feature_set is not None:
            pulumi.set(__self__, "feature_set", feature_set)
        if fortiai_error_action is not None:
            pulumi.set(__self__, "fortiai_error_action", fortiai_error_action)
        if fortiai_timeout_action is not None:
            pulumi.set(__self__, "fortiai_timeout_action", fortiai_timeout_action)
        if fortindr_error_action is not None:
            pulumi.set(__self__, "fortindr_error_action", fortindr_error_action)
        if fortindr_timeout_action is not None:
            pulumi.set(__self__, "fortindr_timeout_action", fortindr_timeout_action)
        if fortisandbox_error_action is not None:
            pulumi.set(__self__, "fortisandbox_error_action", fortisandbox_error_action)
        if fortisandbox_max_upload is not None:
            pulumi.set(__self__, "fortisandbox_max_upload", fortisandbox_max_upload)
        if fortisandbox_mode is not None:
            pulumi.set(__self__, "fortisandbox_mode", fortisandbox_mode)
        if fortisandbox_timeout_action is not None:
            pulumi.set(__self__, "fortisandbox_timeout_action", fortisandbox_timeout_action)
        if ftgd_analytics is not None:
            pulumi.set(__self__, "ftgd_analytics", ftgd_analytics)
        if ftp is not None:
            pulumi.set(__self__, "ftp", ftp)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if http is not None:
            pulumi.set(__self__, "http", http)
        if imap is not None:
            pulumi.set(__self__, "imap", imap)
        if inspection_mode is not None:
            pulumi.set(__self__, "inspection_mode", inspection_mode)
        if mapi is not None:
            pulumi.set(__self__, "mapi", mapi)
        if mobile_malware_db is not None:
            pulumi.set(__self__, "mobile_malware_db", mobile_malware_db)
        if nac_quar is not None:
            pulumi.set(__self__, "nac_quar", nac_quar)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nntp is not None:
            pulumi.set(__self__, "nntp", nntp)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if outbreak_prevention_archive_scan is not None:
            pulumi.set(__self__, "outbreak_prevention_archive_scan", outbreak_prevention_archive_scan)
        if pop3 is not None:
            pulumi.set(__self__, "pop3", pop3)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if scan_mode is not None:
            pulumi.set(__self__, "scan_mode", scan_mode)
        if smb is not None:
            pulumi.set(__self__, "smb", smb)
        if smtp is not None:
            pulumi.set(__self__, "smtp", smtp)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="analyticsAcceptFiletype")
    def analytics_accept_filetype(self) -> Optional[pulumi.Input[int]]:
        """
        Only submit files matching this DLP file-pattern to FortiSandbox.
        """
        return pulumi.get(self, "analytics_accept_filetype")

    @analytics_accept_filetype.setter
    def analytics_accept_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_accept_filetype", value)

    @property
    @pulumi.getter(name="analyticsBlFiletype")
    def analytics_bl_filetype(self) -> Optional[pulumi.Input[int]]:
        """
        Only submit files matching this DLP file-pattern to FortiSandbox.
        """
        return pulumi.get(self, "analytics_bl_filetype")

    @analytics_bl_filetype.setter
    def analytics_bl_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_bl_filetype", value)

    @property
    @pulumi.getter(name="analyticsDb")
    def analytics_db(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable using the FortiSandbox signature database to supplement the AV signature databases. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "analytics_db")

    @analytics_db.setter
    def analytics_db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "analytics_db", value)

    @property
    @pulumi.getter(name="analyticsIgnoreFiletype")
    def analytics_ignore_filetype(self) -> Optional[pulumi.Input[int]]:
        """
        Do not submit files matching this DLP file-pattern to FortiSandbox (post-transfer scan only).
        """
        return pulumi.get(self, "analytics_ignore_filetype")

    @analytics_ignore_filetype.setter
    def analytics_ignore_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_ignore_filetype", value)

    @property
    @pulumi.getter(name="analyticsMaxUpload")
    def analytics_max_upload(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of files that can be uploaded to FortiSandbox.
        """
        return pulumi.get(self, "analytics_max_upload")

    @analytics_max_upload.setter
    def analytics_max_upload(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_max_upload", value)

    @property
    @pulumi.getter(name="analyticsWlFiletype")
    def analytics_wl_filetype(self) -> Optional[pulumi.Input[int]]:
        """
        Do not submit files matching this DLP file-pattern to FortiSandbox.
        """
        return pulumi.get(self, "analytics_wl_filetype")

    @analytics_wl_filetype.setter
    def analytics_wl_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_wl_filetype", value)

    @property
    @pulumi.getter(name="avBlockLog")
    def av_block_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging for AntiVirus file blocking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_block_log")

    @av_block_log.setter
    def av_block_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_block_log", value)

    @property
    @pulumi.getter(name="avVirusLog")
    def av_virus_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AntiVirus logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_virus_log")

    @av_virus_log.setter
    def av_virus_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_virus_log", value)

    @property
    @pulumi.getter
    def cifs(self) -> Optional[pulumi.Input['ProfileCifsArgs']]:
        """
        Configure CIFS AntiVirus options. The structure of `cifs` block is documented below.
        """
        return pulumi.get(self, "cifs")

    @cifs.setter
    def cifs(self, value: Optional[pulumi.Input['ProfileCifsArgs']]):
        pulumi.set(self, "cifs", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input['ProfileContentDisarmArgs']]:
        """
        AV Content Disarm and Reconstruction settings. The structure of `content_disarm` block is documented below.
        """
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input['ProfileContentDisarmArgs']]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emsThreatFeed")
    def ems_threat_feed(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of EMS threat feed when performing AntiVirus scan. Analyzes files including the content of archives. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ems_threat_feed")

    @ems_threat_feed.setter
    def ems_threat_feed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ems_threat_feed", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable extended logging for antivirus. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter(name="externalBlocklistEnableAll")
    def external_blocklist_enable_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable all external blocklists. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external_blocklist_enable_all")

    @external_blocklist_enable_all.setter
    def external_blocklist_enable_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist_enable_all", value)

    @property
    @pulumi.getter(name="externalBlocklists")
    def external_blocklists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileExternalBlocklistArgs']]]]:
        """
        One or more external malware block lists. The structure of `external_blocklist` block is documented below.
        """
        return pulumi.get(self, "external_blocklists")

    @external_blocklists.setter
    def external_blocklists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileExternalBlocklistArgs']]]]):
        pulumi.set(self, "external_blocklists", value)

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> Optional[pulumi.Input[str]]:
        """
        Flow/proxy feature set. Valid values: `flow`, `proxy`.
        """
        return pulumi.get(self, "feature_set")

    @feature_set.setter
    def feature_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_set", value)

    @property
    @pulumi.getter(name="fortiaiErrorAction")
    def fortiai_error_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if FortiAI encounters an error. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortiai_error_action")

    @fortiai_error_action.setter
    def fortiai_error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai_error_action", value)

    @property
    @pulumi.getter(name="fortiaiTimeoutAction")
    def fortiai_timeout_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if FortiAI encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortiai_timeout_action")

    @fortiai_timeout_action.setter
    def fortiai_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai_timeout_action", value)

    @property
    @pulumi.getter(name="fortindrErrorAction")
    def fortindr_error_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if FortiNDR encounters an error. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortindr_error_action")

    @fortindr_error_action.setter
    def fortindr_error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr_error_action", value)

    @property
    @pulumi.getter(name="fortindrTimeoutAction")
    def fortindr_timeout_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if FortiNDR encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortindr_timeout_action")

    @fortindr_timeout_action.setter
    def fortindr_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr_timeout_action", value)

    @property
    @pulumi.getter(name="fortisandboxErrorAction")
    def fortisandbox_error_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if FortiSandbox inline scan encounters an error. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortisandbox_error_action")

    @fortisandbox_error_action.setter
    def fortisandbox_error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox_error_action", value)

    @property
    @pulumi.getter(name="fortisandboxMaxUpload")
    def fortisandbox_max_upload(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of files that can be uploaded to FortiSandbox.
        """
        return pulumi.get(self, "fortisandbox_max_upload")

    @fortisandbox_max_upload.setter
    def fortisandbox_max_upload(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortisandbox_max_upload", value)

    @property
    @pulumi.getter(name="fortisandboxMode")
    def fortisandbox_mode(self) -> Optional[pulumi.Input[str]]:
        """
        FortiSandbox scan modes. Valid values: `inline`, `analytics-suspicious`, `analytics-everything`.
        """
        return pulumi.get(self, "fortisandbox_mode")

    @fortisandbox_mode.setter
    def fortisandbox_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox_mode", value)

    @property
    @pulumi.getter(name="fortisandboxTimeoutAction")
    def fortisandbox_timeout_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if FortiSandbox inline scan encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortisandbox_timeout_action")

    @fortisandbox_timeout_action.setter
    def fortisandbox_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox_timeout_action", value)

    @property
    @pulumi.getter(name="ftgdAnalytics")
    def ftgd_analytics(self) -> Optional[pulumi.Input[str]]:
        """
        Settings to control which files are uploaded to FortiSandbox. Valid values: `disable`, `suspicious`, `everything`.
        """
        return pulumi.get(self, "ftgd_analytics")

    @ftgd_analytics.setter
    def ftgd_analytics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftgd_analytics", value)

    @property
    @pulumi.getter
    def ftp(self) -> Optional[pulumi.Input['ProfileFtpArgs']]:
        """
        Configure FTP AntiVirus options. The structure of `ftp` block is documented below.
        """
        return pulumi.get(self, "ftp")

    @ftp.setter
    def ftp(self, value: Optional[pulumi.Input['ProfileFtpArgs']]):
        pulumi.set(self, "ftp", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['ProfileHttpArgs']]:
        """
        Configure HTTP AntiVirus options. The structure of `http` block is documented below.
        """
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['ProfileHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def imap(self) -> Optional[pulumi.Input['ProfileImapArgs']]:
        """
        Configure IMAP AntiVirus options. The structure of `imap` block is documented below.
        """
        return pulumi.get(self, "imap")

    @imap.setter
    def imap(self, value: Optional[pulumi.Input['ProfileImapArgs']]):
        pulumi.set(self, "imap", value)

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Inspection mode. Valid values: `proxy`, `flow-based`.
        """
        return pulumi.get(self, "inspection_mode")

    @inspection_mode.setter
    def inspection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspection_mode", value)

    @property
    @pulumi.getter
    def mapi(self) -> Optional[pulumi.Input['ProfileMapiArgs']]:
        """
        Configure MAPI AntiVirus options. The structure of `mapi` block is documented below.
        """
        return pulumi.get(self, "mapi")

    @mapi.setter
    def mapi(self, value: Optional[pulumi.Input['ProfileMapiArgs']]):
        pulumi.set(self, "mapi", value)

    @property
    @pulumi.getter(name="mobileMalwareDb")
    def mobile_malware_db(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable using the mobile malware signature database. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mobile_malware_db")

    @mobile_malware_db.setter
    def mobile_malware_db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mobile_malware_db", value)

    @property
    @pulumi.getter(name="nacQuar")
    def nac_quar(self) -> Optional[pulumi.Input['ProfileNacQuarArgs']]:
        """
        Configure AntiVirus quarantine settings. The structure of `nac_quar` block is documented below.
        """
        return pulumi.get(self, "nac_quar")

    @nac_quar.setter
    def nac_quar(self, value: Optional[pulumi.Input['ProfileNacQuarArgs']]):
        pulumi.set(self, "nac_quar", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nntp(self) -> Optional[pulumi.Input['ProfileNntpArgs']]:
        """
        Configure NNTP AntiVirus options. The structure of `nntp` block is documented below.
        """
        return pulumi.get(self, "nntp")

    @nntp.setter
    def nntp(self, value: Optional[pulumi.Input['ProfileNntpArgs']]):
        pulumi.set(self, "nntp", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input['ProfileOutbreakPreventionArgs']]:
        """
        Configure Virus Outbreak Prevention settings. The structure of `outbreak_prevention` block is documented below.
        """
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input['ProfileOutbreakPreventionArgs']]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter(name="outbreakPreventionArchiveScan")
    def outbreak_prevention_archive_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable outbreak-prevention archive scanning. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "outbreak_prevention_archive_scan")

    @outbreak_prevention_archive_scan.setter
    def outbreak_prevention_archive_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention_archive_scan", value)

    @property
    @pulumi.getter
    def pop3(self) -> Optional[pulumi.Input['ProfilePop3Args']]:
        """
        Configure POP3 AntiVirus options. The structure of `pop3` block is documented below.
        """
        return pulumi.get(self, "pop3")

    @pop3.setter
    def pop3(self, value: Optional[pulumi.Input['ProfilePop3Args']]):
        pulumi.set(self, "pop3", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        """
        Replacement message group customized for this profile.
        """
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter(name="scanMode")
    def scan_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure scan mode (default or legacy).
        """
        return pulumi.get(self, "scan_mode")

    @scan_mode.setter
    def scan_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_mode", value)

    @property
    @pulumi.getter
    def smb(self) -> Optional[pulumi.Input['ProfileSmbArgs']]:
        """
        Configure SMB AntiVirus options. The structure of `smb` block is documented below.
        """
        return pulumi.get(self, "smb")

    @smb.setter
    def smb(self, value: Optional[pulumi.Input['ProfileSmbArgs']]):
        pulumi.set(self, "smb", value)

    @property
    @pulumi.getter
    def smtp(self) -> Optional[pulumi.Input['ProfileSmtpArgs']]:
        """
        Configure SMTP AntiVirus options. The structure of `smtp` block is documented below.
        """
        return pulumi.get(self, "smtp")

    @smtp.setter
    def smtp(self, value: Optional[pulumi.Input['ProfileSmtpArgs']]):
        pulumi.set(self, "smtp", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['ProfileSshArgs']]:
        """
        Configure SFTP and SCP AntiVirus options. The structure of `ssh` block is documented below.
        """
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['ProfileSshArgs']]):
        pulumi.set(self, "ssh", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ProfileState:
    def __init__(__self__, *,
                 analytics_accept_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_bl_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_db: Optional[pulumi.Input[str]] = None,
                 analytics_ignore_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_max_upload: Optional[pulumi.Input[int]] = None,
                 analytics_wl_filetype: Optional[pulumi.Input[int]] = None,
                 av_block_log: Optional[pulumi.Input[str]] = None,
                 av_virus_log: Optional[pulumi.Input[str]] = None,
                 cifs: Optional[pulumi.Input['ProfileCifsArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input['ProfileContentDisarmArgs']] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_threat_feed: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external_blocklist_enable_all: Optional[pulumi.Input[str]] = None,
                 external_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileExternalBlocklistArgs']]]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 fortiai_error_action: Optional[pulumi.Input[str]] = None,
                 fortiai_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortindr_error_action: Optional[pulumi.Input[str]] = None,
                 fortindr_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_error_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_max_upload: Optional[pulumi.Input[int]] = None,
                 fortisandbox_mode: Optional[pulumi.Input[str]] = None,
                 fortisandbox_timeout_action: Optional[pulumi.Input[str]] = None,
                 ftgd_analytics: Optional[pulumi.Input[str]] = None,
                 ftp: Optional[pulumi.Input['ProfileFtpArgs']] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http: Optional[pulumi.Input['ProfileHttpArgs']] = None,
                 imap: Optional[pulumi.Input['ProfileImapArgs']] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 mapi: Optional[pulumi.Input['ProfileMapiArgs']] = None,
                 mobile_malware_db: Optional[pulumi.Input[str]] = None,
                 nac_quar: Optional[pulumi.Input['ProfileNacQuarArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntp: Optional[pulumi.Input['ProfileNntpArgs']] = None,
                 outbreak_prevention: Optional[pulumi.Input['ProfileOutbreakPreventionArgs']] = None,
                 outbreak_prevention_archive_scan: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input['ProfilePop3Args']] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 scan_mode: Optional[pulumi.Input[str]] = None,
                 smb: Optional[pulumi.Input['ProfileSmbArgs']] = None,
                 smtp: Optional[pulumi.Input['ProfileSmtpArgs']] = None,
                 ssh: Optional[pulumi.Input['ProfileSshArgs']] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Profile resources.
        :param pulumi.Input[int] analytics_accept_filetype: Only submit files matching this DLP file-pattern to FortiSandbox.
        :param pulumi.Input[int] analytics_bl_filetype: Only submit files matching this DLP file-pattern to FortiSandbox.
        :param pulumi.Input[str] analytics_db: Enable/disable using the FortiSandbox signature database to supplement the AV signature databases. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] analytics_ignore_filetype: Do not submit files matching this DLP file-pattern to FortiSandbox (post-transfer scan only).
        :param pulumi.Input[int] analytics_max_upload: Maximum size of files that can be uploaded to FortiSandbox.
        :param pulumi.Input[int] analytics_wl_filetype: Do not submit files matching this DLP file-pattern to FortiSandbox.
        :param pulumi.Input[str] av_block_log: Enable/disable logging for AntiVirus file blocking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_virus_log: Enable/disable AntiVirus logging. Valid values: `enable`, `disable`.
        :param pulumi.Input['ProfileCifsArgs'] cifs: Configure CIFS AntiVirus options. The structure of `cifs` block is documented below.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input['ProfileContentDisarmArgs'] content_disarm: AV Content Disarm and Reconstruction settings. The structure of `content_disarm` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ems_threat_feed: Enable/disable use of EMS threat feed when performing AntiVirus scan. Analyzes files including the content of archives. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] extended_log: Enable/disable extended logging for antivirus. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external_blocklist_enable_all: Enable/disable all external blocklists. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileExternalBlocklistArgs']]] external_blocklists: One or more external malware block lists. The structure of `external_blocklist` block is documented below.
        :param pulumi.Input[str] feature_set: Flow/proxy feature set. Valid values: `flow`, `proxy`.
        :param pulumi.Input[str] fortiai_error_action: Action to take if FortiAI encounters an error. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortiai_timeout_action: Action to take if FortiAI encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortindr_error_action: Action to take if FortiNDR encounters an error. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortindr_timeout_action: Action to take if FortiNDR encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortisandbox_error_action: Action to take if FortiSandbox inline scan encounters an error. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[int] fortisandbox_max_upload: Maximum size of files that can be uploaded to FortiSandbox.
        :param pulumi.Input[str] fortisandbox_mode: FortiSandbox scan modes. Valid values: `inline`, `analytics-suspicious`, `analytics-everything`.
        :param pulumi.Input[str] fortisandbox_timeout_action: Action to take if FortiSandbox inline scan encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] ftgd_analytics: Settings to control which files are uploaded to FortiSandbox. Valid values: `disable`, `suspicious`, `everything`.
        :param pulumi.Input['ProfileFtpArgs'] ftp: Configure FTP AntiVirus options. The structure of `ftp` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input['ProfileHttpArgs'] http: Configure HTTP AntiVirus options. The structure of `http` block is documented below.
        :param pulumi.Input['ProfileImapArgs'] imap: Configure IMAP AntiVirus options. The structure of `imap` block is documented below.
        :param pulumi.Input[str] inspection_mode: Inspection mode. Valid values: `proxy`, `flow-based`.
        :param pulumi.Input['ProfileMapiArgs'] mapi: Configure MAPI AntiVirus options. The structure of `mapi` block is documented below.
        :param pulumi.Input[str] mobile_malware_db: Enable/disable using the mobile malware signature database. Valid values: `disable`, `enable`.
        :param pulumi.Input['ProfileNacQuarArgs'] nac_quar: Configure AntiVirus quarantine settings. The structure of `nac_quar` block is documented below.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input['ProfileNntpArgs'] nntp: Configure NNTP AntiVirus options. The structure of `nntp` block is documented below.
        :param pulumi.Input['ProfileOutbreakPreventionArgs'] outbreak_prevention: Configure Virus Outbreak Prevention settings. The structure of `outbreak_prevention` block is documented below.
        :param pulumi.Input[str] outbreak_prevention_archive_scan: Enable/disable outbreak-prevention archive scanning. Valid values: `disable`, `enable`.
        :param pulumi.Input['ProfilePop3Args'] pop3: Configure POP3 AntiVirus options. The structure of `pop3` block is documented below.
        :param pulumi.Input[str] replacemsg_group: Replacement message group customized for this profile.
        :param pulumi.Input[str] scan_mode: Configure scan mode (default or legacy).
        :param pulumi.Input['ProfileSmbArgs'] smb: Configure SMB AntiVirus options. The structure of `smb` block is documented below.
        :param pulumi.Input['ProfileSmtpArgs'] smtp: Configure SMTP AntiVirus options. The structure of `smtp` block is documented below.
        :param pulumi.Input['ProfileSshArgs'] ssh: Configure SFTP and SCP AntiVirus options. The structure of `ssh` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if analytics_accept_filetype is not None:
            pulumi.set(__self__, "analytics_accept_filetype", analytics_accept_filetype)
        if analytics_bl_filetype is not None:
            pulumi.set(__self__, "analytics_bl_filetype", analytics_bl_filetype)
        if analytics_db is not None:
            pulumi.set(__self__, "analytics_db", analytics_db)
        if analytics_ignore_filetype is not None:
            pulumi.set(__self__, "analytics_ignore_filetype", analytics_ignore_filetype)
        if analytics_max_upload is not None:
            pulumi.set(__self__, "analytics_max_upload", analytics_max_upload)
        if analytics_wl_filetype is not None:
            pulumi.set(__self__, "analytics_wl_filetype", analytics_wl_filetype)
        if av_block_log is not None:
            pulumi.set(__self__, "av_block_log", av_block_log)
        if av_virus_log is not None:
            pulumi.set(__self__, "av_virus_log", av_virus_log)
        if cifs is not None:
            pulumi.set(__self__, "cifs", cifs)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ems_threat_feed is not None:
            pulumi.set(__self__, "ems_threat_feed", ems_threat_feed)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if external_blocklist_enable_all is not None:
            pulumi.set(__self__, "external_blocklist_enable_all", external_blocklist_enable_all)
        if external_blocklists is not None:
            pulumi.set(__self__, "external_blocklists", external_blocklists)
        if feature_set is not None:
            pulumi.set(__self__, "feature_set", feature_set)
        if fortiai_error_action is not None:
            pulumi.set(__self__, "fortiai_error_action", fortiai_error_action)
        if fortiai_timeout_action is not None:
            pulumi.set(__self__, "fortiai_timeout_action", fortiai_timeout_action)
        if fortindr_error_action is not None:
            pulumi.set(__self__, "fortindr_error_action", fortindr_error_action)
        if fortindr_timeout_action is not None:
            pulumi.set(__self__, "fortindr_timeout_action", fortindr_timeout_action)
        if fortisandbox_error_action is not None:
            pulumi.set(__self__, "fortisandbox_error_action", fortisandbox_error_action)
        if fortisandbox_max_upload is not None:
            pulumi.set(__self__, "fortisandbox_max_upload", fortisandbox_max_upload)
        if fortisandbox_mode is not None:
            pulumi.set(__self__, "fortisandbox_mode", fortisandbox_mode)
        if fortisandbox_timeout_action is not None:
            pulumi.set(__self__, "fortisandbox_timeout_action", fortisandbox_timeout_action)
        if ftgd_analytics is not None:
            pulumi.set(__self__, "ftgd_analytics", ftgd_analytics)
        if ftp is not None:
            pulumi.set(__self__, "ftp", ftp)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if http is not None:
            pulumi.set(__self__, "http", http)
        if imap is not None:
            pulumi.set(__self__, "imap", imap)
        if inspection_mode is not None:
            pulumi.set(__self__, "inspection_mode", inspection_mode)
        if mapi is not None:
            pulumi.set(__self__, "mapi", mapi)
        if mobile_malware_db is not None:
            pulumi.set(__self__, "mobile_malware_db", mobile_malware_db)
        if nac_quar is not None:
            pulumi.set(__self__, "nac_quar", nac_quar)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nntp is not None:
            pulumi.set(__self__, "nntp", nntp)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if outbreak_prevention_archive_scan is not None:
            pulumi.set(__self__, "outbreak_prevention_archive_scan", outbreak_prevention_archive_scan)
        if pop3 is not None:
            pulumi.set(__self__, "pop3", pop3)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if scan_mode is not None:
            pulumi.set(__self__, "scan_mode", scan_mode)
        if smb is not None:
            pulumi.set(__self__, "smb", smb)
        if smtp is not None:
            pulumi.set(__self__, "smtp", smtp)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="analyticsAcceptFiletype")
    def analytics_accept_filetype(self) -> Optional[pulumi.Input[int]]:
        """
        Only submit files matching this DLP file-pattern to FortiSandbox.
        """
        return pulumi.get(self, "analytics_accept_filetype")

    @analytics_accept_filetype.setter
    def analytics_accept_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_accept_filetype", value)

    @property
    @pulumi.getter(name="analyticsBlFiletype")
    def analytics_bl_filetype(self) -> Optional[pulumi.Input[int]]:
        """
        Only submit files matching this DLP file-pattern to FortiSandbox.
        """
        return pulumi.get(self, "analytics_bl_filetype")

    @analytics_bl_filetype.setter
    def analytics_bl_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_bl_filetype", value)

    @property
    @pulumi.getter(name="analyticsDb")
    def analytics_db(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable using the FortiSandbox signature database to supplement the AV signature databases. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "analytics_db")

    @analytics_db.setter
    def analytics_db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "analytics_db", value)

    @property
    @pulumi.getter(name="analyticsIgnoreFiletype")
    def analytics_ignore_filetype(self) -> Optional[pulumi.Input[int]]:
        """
        Do not submit files matching this DLP file-pattern to FortiSandbox (post-transfer scan only).
        """
        return pulumi.get(self, "analytics_ignore_filetype")

    @analytics_ignore_filetype.setter
    def analytics_ignore_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_ignore_filetype", value)

    @property
    @pulumi.getter(name="analyticsMaxUpload")
    def analytics_max_upload(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of files that can be uploaded to FortiSandbox.
        """
        return pulumi.get(self, "analytics_max_upload")

    @analytics_max_upload.setter
    def analytics_max_upload(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_max_upload", value)

    @property
    @pulumi.getter(name="analyticsWlFiletype")
    def analytics_wl_filetype(self) -> Optional[pulumi.Input[int]]:
        """
        Do not submit files matching this DLP file-pattern to FortiSandbox.
        """
        return pulumi.get(self, "analytics_wl_filetype")

    @analytics_wl_filetype.setter
    def analytics_wl_filetype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "analytics_wl_filetype", value)

    @property
    @pulumi.getter(name="avBlockLog")
    def av_block_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging for AntiVirus file blocking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_block_log")

    @av_block_log.setter
    def av_block_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_block_log", value)

    @property
    @pulumi.getter(name="avVirusLog")
    def av_virus_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AntiVirus logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_virus_log")

    @av_virus_log.setter
    def av_virus_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_virus_log", value)

    @property
    @pulumi.getter
    def cifs(self) -> Optional[pulumi.Input['ProfileCifsArgs']]:
        """
        Configure CIFS AntiVirus options. The structure of `cifs` block is documented below.
        """
        return pulumi.get(self, "cifs")

    @cifs.setter
    def cifs(self, value: Optional[pulumi.Input['ProfileCifsArgs']]):
        pulumi.set(self, "cifs", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input['ProfileContentDisarmArgs']]:
        """
        AV Content Disarm and Reconstruction settings. The structure of `content_disarm` block is documented below.
        """
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input['ProfileContentDisarmArgs']]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emsThreatFeed")
    def ems_threat_feed(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of EMS threat feed when performing AntiVirus scan. Analyzes files including the content of archives. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ems_threat_feed")

    @ems_threat_feed.setter
    def ems_threat_feed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ems_threat_feed", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable extended logging for antivirus. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter(name="externalBlocklistEnableAll")
    def external_blocklist_enable_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable all external blocklists. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external_blocklist_enable_all")

    @external_blocklist_enable_all.setter
    def external_blocklist_enable_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist_enable_all", value)

    @property
    @pulumi.getter(name="externalBlocklists")
    def external_blocklists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileExternalBlocklistArgs']]]]:
        """
        One or more external malware block lists. The structure of `external_blocklist` block is documented below.
        """
        return pulumi.get(self, "external_blocklists")

    @external_blocklists.setter
    def external_blocklists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileExternalBlocklistArgs']]]]):
        pulumi.set(self, "external_blocklists", value)

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> Optional[pulumi.Input[str]]:
        """
        Flow/proxy feature set. Valid values: `flow`, `proxy`.
        """
        return pulumi.get(self, "feature_set")

    @feature_set.setter
    def feature_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "feature_set", value)

    @property
    @pulumi.getter(name="fortiaiErrorAction")
    def fortiai_error_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if FortiAI encounters an error. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortiai_error_action")

    @fortiai_error_action.setter
    def fortiai_error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai_error_action", value)

    @property
    @pulumi.getter(name="fortiaiTimeoutAction")
    def fortiai_timeout_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if FortiAI encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortiai_timeout_action")

    @fortiai_timeout_action.setter
    def fortiai_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai_timeout_action", value)

    @property
    @pulumi.getter(name="fortindrErrorAction")
    def fortindr_error_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if FortiNDR encounters an error. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortindr_error_action")

    @fortindr_error_action.setter
    def fortindr_error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr_error_action", value)

    @property
    @pulumi.getter(name="fortindrTimeoutAction")
    def fortindr_timeout_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if FortiNDR encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortindr_timeout_action")

    @fortindr_timeout_action.setter
    def fortindr_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortindr_timeout_action", value)

    @property
    @pulumi.getter(name="fortisandboxErrorAction")
    def fortisandbox_error_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if FortiSandbox inline scan encounters an error. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortisandbox_error_action")

    @fortisandbox_error_action.setter
    def fortisandbox_error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox_error_action", value)

    @property
    @pulumi.getter(name="fortisandboxMaxUpload")
    def fortisandbox_max_upload(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of files that can be uploaded to FortiSandbox.
        """
        return pulumi.get(self, "fortisandbox_max_upload")

    @fortisandbox_max_upload.setter
    def fortisandbox_max_upload(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortisandbox_max_upload", value)

    @property
    @pulumi.getter(name="fortisandboxMode")
    def fortisandbox_mode(self) -> Optional[pulumi.Input[str]]:
        """
        FortiSandbox scan modes. Valid values: `inline`, `analytics-suspicious`, `analytics-everything`.
        """
        return pulumi.get(self, "fortisandbox_mode")

    @fortisandbox_mode.setter
    def fortisandbox_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox_mode", value)

    @property
    @pulumi.getter(name="fortisandboxTimeoutAction")
    def fortisandbox_timeout_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if FortiSandbox inline scan encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortisandbox_timeout_action")

    @fortisandbox_timeout_action.setter
    def fortisandbox_timeout_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortisandbox_timeout_action", value)

    @property
    @pulumi.getter(name="ftgdAnalytics")
    def ftgd_analytics(self) -> Optional[pulumi.Input[str]]:
        """
        Settings to control which files are uploaded to FortiSandbox. Valid values: `disable`, `suspicious`, `everything`.
        """
        return pulumi.get(self, "ftgd_analytics")

    @ftgd_analytics.setter
    def ftgd_analytics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftgd_analytics", value)

    @property
    @pulumi.getter
    def ftp(self) -> Optional[pulumi.Input['ProfileFtpArgs']]:
        """
        Configure FTP AntiVirus options. The structure of `ftp` block is documented below.
        """
        return pulumi.get(self, "ftp")

    @ftp.setter
    def ftp(self, value: Optional[pulumi.Input['ProfileFtpArgs']]):
        pulumi.set(self, "ftp", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def http(self) -> Optional[pulumi.Input['ProfileHttpArgs']]:
        """
        Configure HTTP AntiVirus options. The structure of `http` block is documented below.
        """
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: Optional[pulumi.Input['ProfileHttpArgs']]):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def imap(self) -> Optional[pulumi.Input['ProfileImapArgs']]:
        """
        Configure IMAP AntiVirus options. The structure of `imap` block is documented below.
        """
        return pulumi.get(self, "imap")

    @imap.setter
    def imap(self, value: Optional[pulumi.Input['ProfileImapArgs']]):
        pulumi.set(self, "imap", value)

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Inspection mode. Valid values: `proxy`, `flow-based`.
        """
        return pulumi.get(self, "inspection_mode")

    @inspection_mode.setter
    def inspection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspection_mode", value)

    @property
    @pulumi.getter
    def mapi(self) -> Optional[pulumi.Input['ProfileMapiArgs']]:
        """
        Configure MAPI AntiVirus options. The structure of `mapi` block is documented below.
        """
        return pulumi.get(self, "mapi")

    @mapi.setter
    def mapi(self, value: Optional[pulumi.Input['ProfileMapiArgs']]):
        pulumi.set(self, "mapi", value)

    @property
    @pulumi.getter(name="mobileMalwareDb")
    def mobile_malware_db(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable using the mobile malware signature database. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mobile_malware_db")

    @mobile_malware_db.setter
    def mobile_malware_db(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mobile_malware_db", value)

    @property
    @pulumi.getter(name="nacQuar")
    def nac_quar(self) -> Optional[pulumi.Input['ProfileNacQuarArgs']]:
        """
        Configure AntiVirus quarantine settings. The structure of `nac_quar` block is documented below.
        """
        return pulumi.get(self, "nac_quar")

    @nac_quar.setter
    def nac_quar(self, value: Optional[pulumi.Input['ProfileNacQuarArgs']]):
        pulumi.set(self, "nac_quar", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nntp(self) -> Optional[pulumi.Input['ProfileNntpArgs']]:
        """
        Configure NNTP AntiVirus options. The structure of `nntp` block is documented below.
        """
        return pulumi.get(self, "nntp")

    @nntp.setter
    def nntp(self, value: Optional[pulumi.Input['ProfileNntpArgs']]):
        pulumi.set(self, "nntp", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input['ProfileOutbreakPreventionArgs']]:
        """
        Configure Virus Outbreak Prevention settings. The structure of `outbreak_prevention` block is documented below.
        """
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input['ProfileOutbreakPreventionArgs']]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter(name="outbreakPreventionArchiveScan")
    def outbreak_prevention_archive_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable outbreak-prevention archive scanning. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "outbreak_prevention_archive_scan")

    @outbreak_prevention_archive_scan.setter
    def outbreak_prevention_archive_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention_archive_scan", value)

    @property
    @pulumi.getter
    def pop3(self) -> Optional[pulumi.Input['ProfilePop3Args']]:
        """
        Configure POP3 AntiVirus options. The structure of `pop3` block is documented below.
        """
        return pulumi.get(self, "pop3")

    @pop3.setter
    def pop3(self, value: Optional[pulumi.Input['ProfilePop3Args']]):
        pulumi.set(self, "pop3", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        """
        Replacement message group customized for this profile.
        """
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter(name="scanMode")
    def scan_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure scan mode (default or legacy).
        """
        return pulumi.get(self, "scan_mode")

    @scan_mode.setter
    def scan_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_mode", value)

    @property
    @pulumi.getter
    def smb(self) -> Optional[pulumi.Input['ProfileSmbArgs']]:
        """
        Configure SMB AntiVirus options. The structure of `smb` block is documented below.
        """
        return pulumi.get(self, "smb")

    @smb.setter
    def smb(self, value: Optional[pulumi.Input['ProfileSmbArgs']]):
        pulumi.set(self, "smb", value)

    @property
    @pulumi.getter
    def smtp(self) -> Optional[pulumi.Input['ProfileSmtpArgs']]:
        """
        Configure SMTP AntiVirus options. The structure of `smtp` block is documented below.
        """
        return pulumi.get(self, "smtp")

    @smtp.setter
    def smtp(self, value: Optional[pulumi.Input['ProfileSmtpArgs']]):
        pulumi.set(self, "smtp", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['ProfileSshArgs']]:
        """
        Configure SFTP and SCP AntiVirus options. The structure of `ssh` block is documented below.
        """
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['ProfileSshArgs']]):
        pulumi.set(self, "ssh", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Profile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 analytics_accept_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_bl_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_db: Optional[pulumi.Input[str]] = None,
                 analytics_ignore_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_max_upload: Optional[pulumi.Input[int]] = None,
                 analytics_wl_filetype: Optional[pulumi.Input[int]] = None,
                 av_block_log: Optional[pulumi.Input[str]] = None,
                 av_virus_log: Optional[pulumi.Input[str]] = None,
                 cifs: Optional[pulumi.Input[pulumi.InputType['ProfileCifsArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[pulumi.InputType['ProfileContentDisarmArgs']]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_threat_feed: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external_blocklist_enable_all: Optional[pulumi.Input[str]] = None,
                 external_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileExternalBlocklistArgs']]]]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 fortiai_error_action: Optional[pulumi.Input[str]] = None,
                 fortiai_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortindr_error_action: Optional[pulumi.Input[str]] = None,
                 fortindr_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_error_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_max_upload: Optional[pulumi.Input[int]] = None,
                 fortisandbox_mode: Optional[pulumi.Input[str]] = None,
                 fortisandbox_timeout_action: Optional[pulumi.Input[str]] = None,
                 ftgd_analytics: Optional[pulumi.Input[str]] = None,
                 ftp: Optional[pulumi.Input[pulumi.InputType['ProfileFtpArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http: Optional[pulumi.Input[pulumi.InputType['ProfileHttpArgs']]] = None,
                 imap: Optional[pulumi.Input[pulumi.InputType['ProfileImapArgs']]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 mapi: Optional[pulumi.Input[pulumi.InputType['ProfileMapiArgs']]] = None,
                 mobile_malware_db: Optional[pulumi.Input[str]] = None,
                 nac_quar: Optional[pulumi.Input[pulumi.InputType['ProfileNacQuarArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntp: Optional[pulumi.Input[pulumi.InputType['ProfileNntpArgs']]] = None,
                 outbreak_prevention: Optional[pulumi.Input[pulumi.InputType['ProfileOutbreakPreventionArgs']]] = None,
                 outbreak_prevention_archive_scan: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input[pulumi.InputType['ProfilePop3Args']]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 scan_mode: Optional[pulumi.Input[str]] = None,
                 smb: Optional[pulumi.Input[pulumi.InputType['ProfileSmbArgs']]] = None,
                 smtp: Optional[pulumi.Input[pulumi.InputType['ProfileSmtpArgs']]] = None,
                 ssh: Optional[pulumi.Input[pulumi.InputType['ProfileSshArgs']]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure AntiVirus profiles.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.antivirus.Profile("trname",
            analytics_bl_filetype=0,
            analytics_db="disable",
            analytics_max_upload=10,
            analytics_wl_filetype=0,
            av_block_log="enable",
            av_virus_log="enable",
            extended_log="disable",
            ftgd_analytics="disable",
            inspection_mode="flow-based",
            mobile_malware_db="enable",
            scan_mode="quick")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Antivirus Profile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:antivirus/profile:Profile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:antivirus/profile:Profile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] analytics_accept_filetype: Only submit files matching this DLP file-pattern to FortiSandbox.
        :param pulumi.Input[int] analytics_bl_filetype: Only submit files matching this DLP file-pattern to FortiSandbox.
        :param pulumi.Input[str] analytics_db: Enable/disable using the FortiSandbox signature database to supplement the AV signature databases. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] analytics_ignore_filetype: Do not submit files matching this DLP file-pattern to FortiSandbox (post-transfer scan only).
        :param pulumi.Input[int] analytics_max_upload: Maximum size of files that can be uploaded to FortiSandbox.
        :param pulumi.Input[int] analytics_wl_filetype: Do not submit files matching this DLP file-pattern to FortiSandbox.
        :param pulumi.Input[str] av_block_log: Enable/disable logging for AntiVirus file blocking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_virus_log: Enable/disable AntiVirus logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[pulumi.InputType['ProfileCifsArgs']] cifs: Configure CIFS AntiVirus options. The structure of `cifs` block is documented below.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[pulumi.InputType['ProfileContentDisarmArgs']] content_disarm: AV Content Disarm and Reconstruction settings. The structure of `content_disarm` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ems_threat_feed: Enable/disable use of EMS threat feed when performing AntiVirus scan. Analyzes files including the content of archives. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] extended_log: Enable/disable extended logging for antivirus. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external_blocklist_enable_all: Enable/disable all external blocklists. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileExternalBlocklistArgs']]]] external_blocklists: One or more external malware block lists. The structure of `external_blocklist` block is documented below.
        :param pulumi.Input[str] feature_set: Flow/proxy feature set. Valid values: `flow`, `proxy`.
        :param pulumi.Input[str] fortiai_error_action: Action to take if FortiAI encounters an error. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortiai_timeout_action: Action to take if FortiAI encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortindr_error_action: Action to take if FortiNDR encounters an error. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortindr_timeout_action: Action to take if FortiNDR encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortisandbox_error_action: Action to take if FortiSandbox inline scan encounters an error. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[int] fortisandbox_max_upload: Maximum size of files that can be uploaded to FortiSandbox.
        :param pulumi.Input[str] fortisandbox_mode: FortiSandbox scan modes. Valid values: `inline`, `analytics-suspicious`, `analytics-everything`.
        :param pulumi.Input[str] fortisandbox_timeout_action: Action to take if FortiSandbox inline scan encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] ftgd_analytics: Settings to control which files are uploaded to FortiSandbox. Valid values: `disable`, `suspicious`, `everything`.
        :param pulumi.Input[pulumi.InputType['ProfileFtpArgs']] ftp: Configure FTP AntiVirus options. The structure of `ftp` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[pulumi.InputType['ProfileHttpArgs']] http: Configure HTTP AntiVirus options. The structure of `http` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileImapArgs']] imap: Configure IMAP AntiVirus options. The structure of `imap` block is documented below.
        :param pulumi.Input[str] inspection_mode: Inspection mode. Valid values: `proxy`, `flow-based`.
        :param pulumi.Input[pulumi.InputType['ProfileMapiArgs']] mapi: Configure MAPI AntiVirus options. The structure of `mapi` block is documented below.
        :param pulumi.Input[str] mobile_malware_db: Enable/disable using the mobile malware signature database. Valid values: `disable`, `enable`.
        :param pulumi.Input[pulumi.InputType['ProfileNacQuarArgs']] nac_quar: Configure AntiVirus quarantine settings. The structure of `nac_quar` block is documented below.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[pulumi.InputType['ProfileNntpArgs']] nntp: Configure NNTP AntiVirus options. The structure of `nntp` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileOutbreakPreventionArgs']] outbreak_prevention: Configure Virus Outbreak Prevention settings. The structure of `outbreak_prevention` block is documented below.
        :param pulumi.Input[str] outbreak_prevention_archive_scan: Enable/disable outbreak-prevention archive scanning. Valid values: `disable`, `enable`.
        :param pulumi.Input[pulumi.InputType['ProfilePop3Args']] pop3: Configure POP3 AntiVirus options. The structure of `pop3` block is documented below.
        :param pulumi.Input[str] replacemsg_group: Replacement message group customized for this profile.
        :param pulumi.Input[str] scan_mode: Configure scan mode (default or legacy).
        :param pulumi.Input[pulumi.InputType['ProfileSmbArgs']] smb: Configure SMB AntiVirus options. The structure of `smb` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileSmtpArgs']] smtp: Configure SMTP AntiVirus options. The structure of `smtp` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileSshArgs']] ssh: Configure SFTP and SCP AntiVirus options. The structure of `ssh` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure AntiVirus profiles.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.antivirus.Profile("trname",
            analytics_bl_filetype=0,
            analytics_db="disable",
            analytics_max_upload=10,
            analytics_wl_filetype=0,
            av_block_log="enable",
            av_virus_log="enable",
            extended_log="disable",
            ftgd_analytics="disable",
            inspection_mode="flow-based",
            mobile_malware_db="enable",
            scan_mode="quick")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Antivirus Profile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:antivirus/profile:Profile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:antivirus/profile:Profile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 analytics_accept_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_bl_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_db: Optional[pulumi.Input[str]] = None,
                 analytics_ignore_filetype: Optional[pulumi.Input[int]] = None,
                 analytics_max_upload: Optional[pulumi.Input[int]] = None,
                 analytics_wl_filetype: Optional[pulumi.Input[int]] = None,
                 av_block_log: Optional[pulumi.Input[str]] = None,
                 av_virus_log: Optional[pulumi.Input[str]] = None,
                 cifs: Optional[pulumi.Input[pulumi.InputType['ProfileCifsArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[pulumi.InputType['ProfileContentDisarmArgs']]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_threat_feed: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external_blocklist_enable_all: Optional[pulumi.Input[str]] = None,
                 external_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileExternalBlocklistArgs']]]]] = None,
                 feature_set: Optional[pulumi.Input[str]] = None,
                 fortiai_error_action: Optional[pulumi.Input[str]] = None,
                 fortiai_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortindr_error_action: Optional[pulumi.Input[str]] = None,
                 fortindr_timeout_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_error_action: Optional[pulumi.Input[str]] = None,
                 fortisandbox_max_upload: Optional[pulumi.Input[int]] = None,
                 fortisandbox_mode: Optional[pulumi.Input[str]] = None,
                 fortisandbox_timeout_action: Optional[pulumi.Input[str]] = None,
                 ftgd_analytics: Optional[pulumi.Input[str]] = None,
                 ftp: Optional[pulumi.Input[pulumi.InputType['ProfileFtpArgs']]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http: Optional[pulumi.Input[pulumi.InputType['ProfileHttpArgs']]] = None,
                 imap: Optional[pulumi.Input[pulumi.InputType['ProfileImapArgs']]] = None,
                 inspection_mode: Optional[pulumi.Input[str]] = None,
                 mapi: Optional[pulumi.Input[pulumi.InputType['ProfileMapiArgs']]] = None,
                 mobile_malware_db: Optional[pulumi.Input[str]] = None,
                 nac_quar: Optional[pulumi.Input[pulumi.InputType['ProfileNacQuarArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nntp: Optional[pulumi.Input[pulumi.InputType['ProfileNntpArgs']]] = None,
                 outbreak_prevention: Optional[pulumi.Input[pulumi.InputType['ProfileOutbreakPreventionArgs']]] = None,
                 outbreak_prevention_archive_scan: Optional[pulumi.Input[str]] = None,
                 pop3: Optional[pulumi.Input[pulumi.InputType['ProfilePop3Args']]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 scan_mode: Optional[pulumi.Input[str]] = None,
                 smb: Optional[pulumi.Input[pulumi.InputType['ProfileSmbArgs']]] = None,
                 smtp: Optional[pulumi.Input[pulumi.InputType['ProfileSmtpArgs']]] = None,
                 ssh: Optional[pulumi.Input[pulumi.InputType['ProfileSshArgs']]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProfileArgs.__new__(ProfileArgs)

            __props__.__dict__["analytics_accept_filetype"] = analytics_accept_filetype
            __props__.__dict__["analytics_bl_filetype"] = analytics_bl_filetype
            __props__.__dict__["analytics_db"] = analytics_db
            __props__.__dict__["analytics_ignore_filetype"] = analytics_ignore_filetype
            __props__.__dict__["analytics_max_upload"] = analytics_max_upload
            __props__.__dict__["analytics_wl_filetype"] = analytics_wl_filetype
            __props__.__dict__["av_block_log"] = av_block_log
            __props__.__dict__["av_virus_log"] = av_virus_log
            __props__.__dict__["cifs"] = cifs
            __props__.__dict__["comment"] = comment
            __props__.__dict__["content_disarm"] = content_disarm
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["ems_threat_feed"] = ems_threat_feed
            __props__.__dict__["extended_log"] = extended_log
            __props__.__dict__["external_blocklist_enable_all"] = external_blocklist_enable_all
            __props__.__dict__["external_blocklists"] = external_blocklists
            __props__.__dict__["feature_set"] = feature_set
            __props__.__dict__["fortiai_error_action"] = fortiai_error_action
            __props__.__dict__["fortiai_timeout_action"] = fortiai_timeout_action
            __props__.__dict__["fortindr_error_action"] = fortindr_error_action
            __props__.__dict__["fortindr_timeout_action"] = fortindr_timeout_action
            __props__.__dict__["fortisandbox_error_action"] = fortisandbox_error_action
            __props__.__dict__["fortisandbox_max_upload"] = fortisandbox_max_upload
            __props__.__dict__["fortisandbox_mode"] = fortisandbox_mode
            __props__.__dict__["fortisandbox_timeout_action"] = fortisandbox_timeout_action
            __props__.__dict__["ftgd_analytics"] = ftgd_analytics
            __props__.__dict__["ftp"] = ftp
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["http"] = http
            __props__.__dict__["imap"] = imap
            __props__.__dict__["inspection_mode"] = inspection_mode
            __props__.__dict__["mapi"] = mapi
            __props__.__dict__["mobile_malware_db"] = mobile_malware_db
            __props__.__dict__["nac_quar"] = nac_quar
            __props__.__dict__["name"] = name
            __props__.__dict__["nntp"] = nntp
            __props__.__dict__["outbreak_prevention"] = outbreak_prevention
            __props__.__dict__["outbreak_prevention_archive_scan"] = outbreak_prevention_archive_scan
            __props__.__dict__["pop3"] = pop3
            __props__.__dict__["replacemsg_group"] = replacemsg_group
            __props__.__dict__["scan_mode"] = scan_mode
            __props__.__dict__["smb"] = smb
            __props__.__dict__["smtp"] = smtp
            __props__.__dict__["ssh"] = ssh
            __props__.__dict__["vdomparam"] = vdomparam
        super(Profile, __self__).__init__(
            'fortios:antivirus/profile:Profile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            analytics_accept_filetype: Optional[pulumi.Input[int]] = None,
            analytics_bl_filetype: Optional[pulumi.Input[int]] = None,
            analytics_db: Optional[pulumi.Input[str]] = None,
            analytics_ignore_filetype: Optional[pulumi.Input[int]] = None,
            analytics_max_upload: Optional[pulumi.Input[int]] = None,
            analytics_wl_filetype: Optional[pulumi.Input[int]] = None,
            av_block_log: Optional[pulumi.Input[str]] = None,
            av_virus_log: Optional[pulumi.Input[str]] = None,
            cifs: Optional[pulumi.Input[pulumi.InputType['ProfileCifsArgs']]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            content_disarm: Optional[pulumi.Input[pulumi.InputType['ProfileContentDisarmArgs']]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            ems_threat_feed: Optional[pulumi.Input[str]] = None,
            extended_log: Optional[pulumi.Input[str]] = None,
            external_blocklist_enable_all: Optional[pulumi.Input[str]] = None,
            external_blocklists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileExternalBlocklistArgs']]]]] = None,
            feature_set: Optional[pulumi.Input[str]] = None,
            fortiai_error_action: Optional[pulumi.Input[str]] = None,
            fortiai_timeout_action: Optional[pulumi.Input[str]] = None,
            fortindr_error_action: Optional[pulumi.Input[str]] = None,
            fortindr_timeout_action: Optional[pulumi.Input[str]] = None,
            fortisandbox_error_action: Optional[pulumi.Input[str]] = None,
            fortisandbox_max_upload: Optional[pulumi.Input[int]] = None,
            fortisandbox_mode: Optional[pulumi.Input[str]] = None,
            fortisandbox_timeout_action: Optional[pulumi.Input[str]] = None,
            ftgd_analytics: Optional[pulumi.Input[str]] = None,
            ftp: Optional[pulumi.Input[pulumi.InputType['ProfileFtpArgs']]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            http: Optional[pulumi.Input[pulumi.InputType['ProfileHttpArgs']]] = None,
            imap: Optional[pulumi.Input[pulumi.InputType['ProfileImapArgs']]] = None,
            inspection_mode: Optional[pulumi.Input[str]] = None,
            mapi: Optional[pulumi.Input[pulumi.InputType['ProfileMapiArgs']]] = None,
            mobile_malware_db: Optional[pulumi.Input[str]] = None,
            nac_quar: Optional[pulumi.Input[pulumi.InputType['ProfileNacQuarArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nntp: Optional[pulumi.Input[pulumi.InputType['ProfileNntpArgs']]] = None,
            outbreak_prevention: Optional[pulumi.Input[pulumi.InputType['ProfileOutbreakPreventionArgs']]] = None,
            outbreak_prevention_archive_scan: Optional[pulumi.Input[str]] = None,
            pop3: Optional[pulumi.Input[pulumi.InputType['ProfilePop3Args']]] = None,
            replacemsg_group: Optional[pulumi.Input[str]] = None,
            scan_mode: Optional[pulumi.Input[str]] = None,
            smb: Optional[pulumi.Input[pulumi.InputType['ProfileSmbArgs']]] = None,
            smtp: Optional[pulumi.Input[pulumi.InputType['ProfileSmtpArgs']]] = None,
            ssh: Optional[pulumi.Input[pulumi.InputType['ProfileSshArgs']]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Profile':
        """
        Get an existing Profile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] analytics_accept_filetype: Only submit files matching this DLP file-pattern to FortiSandbox.
        :param pulumi.Input[int] analytics_bl_filetype: Only submit files matching this DLP file-pattern to FortiSandbox.
        :param pulumi.Input[str] analytics_db: Enable/disable using the FortiSandbox signature database to supplement the AV signature databases. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] analytics_ignore_filetype: Do not submit files matching this DLP file-pattern to FortiSandbox (post-transfer scan only).
        :param pulumi.Input[int] analytics_max_upload: Maximum size of files that can be uploaded to FortiSandbox.
        :param pulumi.Input[int] analytics_wl_filetype: Do not submit files matching this DLP file-pattern to FortiSandbox.
        :param pulumi.Input[str] av_block_log: Enable/disable logging for AntiVirus file blocking. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_virus_log: Enable/disable AntiVirus logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[pulumi.InputType['ProfileCifsArgs']] cifs: Configure CIFS AntiVirus options. The structure of `cifs` block is documented below.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[pulumi.InputType['ProfileContentDisarmArgs']] content_disarm: AV Content Disarm and Reconstruction settings. The structure of `content_disarm` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ems_threat_feed: Enable/disable use of EMS threat feed when performing AntiVirus scan. Analyzes files including the content of archives. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] extended_log: Enable/disable extended logging for antivirus. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external_blocklist_enable_all: Enable/disable all external blocklists. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileExternalBlocklistArgs']]]] external_blocklists: One or more external malware block lists. The structure of `external_blocklist` block is documented below.
        :param pulumi.Input[str] feature_set: Flow/proxy feature set. Valid values: `flow`, `proxy`.
        :param pulumi.Input[str] fortiai_error_action: Action to take if FortiAI encounters an error. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortiai_timeout_action: Action to take if FortiAI encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortindr_error_action: Action to take if FortiNDR encounters an error. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortindr_timeout_action: Action to take if FortiNDR encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] fortisandbox_error_action: Action to take if FortiSandbox inline scan encounters an error. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[int] fortisandbox_max_upload: Maximum size of files that can be uploaded to FortiSandbox.
        :param pulumi.Input[str] fortisandbox_mode: FortiSandbox scan modes. Valid values: `inline`, `analytics-suspicious`, `analytics-everything`.
        :param pulumi.Input[str] fortisandbox_timeout_action: Action to take if FortiSandbox inline scan encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        :param pulumi.Input[str] ftgd_analytics: Settings to control which files are uploaded to FortiSandbox. Valid values: `disable`, `suspicious`, `everything`.
        :param pulumi.Input[pulumi.InputType['ProfileFtpArgs']] ftp: Configure FTP AntiVirus options. The structure of `ftp` block is documented below.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[pulumi.InputType['ProfileHttpArgs']] http: Configure HTTP AntiVirus options. The structure of `http` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileImapArgs']] imap: Configure IMAP AntiVirus options. The structure of `imap` block is documented below.
        :param pulumi.Input[str] inspection_mode: Inspection mode. Valid values: `proxy`, `flow-based`.
        :param pulumi.Input[pulumi.InputType['ProfileMapiArgs']] mapi: Configure MAPI AntiVirus options. The structure of `mapi` block is documented below.
        :param pulumi.Input[str] mobile_malware_db: Enable/disable using the mobile malware signature database. Valid values: `disable`, `enable`.
        :param pulumi.Input[pulumi.InputType['ProfileNacQuarArgs']] nac_quar: Configure AntiVirus quarantine settings. The structure of `nac_quar` block is documented below.
        :param pulumi.Input[str] name: Profile name.
        :param pulumi.Input[pulumi.InputType['ProfileNntpArgs']] nntp: Configure NNTP AntiVirus options. The structure of `nntp` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileOutbreakPreventionArgs']] outbreak_prevention: Configure Virus Outbreak Prevention settings. The structure of `outbreak_prevention` block is documented below.
        :param pulumi.Input[str] outbreak_prevention_archive_scan: Enable/disable outbreak-prevention archive scanning. Valid values: `disable`, `enable`.
        :param pulumi.Input[pulumi.InputType['ProfilePop3Args']] pop3: Configure POP3 AntiVirus options. The structure of `pop3` block is documented below.
        :param pulumi.Input[str] replacemsg_group: Replacement message group customized for this profile.
        :param pulumi.Input[str] scan_mode: Configure scan mode (default or legacy).
        :param pulumi.Input[pulumi.InputType['ProfileSmbArgs']] smb: Configure SMB AntiVirus options. The structure of `smb` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileSmtpArgs']] smtp: Configure SMTP AntiVirus options. The structure of `smtp` block is documented below.
        :param pulumi.Input[pulumi.InputType['ProfileSshArgs']] ssh: Configure SFTP and SCP AntiVirus options. The structure of `ssh` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProfileState.__new__(_ProfileState)

        __props__.__dict__["analytics_accept_filetype"] = analytics_accept_filetype
        __props__.__dict__["analytics_bl_filetype"] = analytics_bl_filetype
        __props__.__dict__["analytics_db"] = analytics_db
        __props__.__dict__["analytics_ignore_filetype"] = analytics_ignore_filetype
        __props__.__dict__["analytics_max_upload"] = analytics_max_upload
        __props__.__dict__["analytics_wl_filetype"] = analytics_wl_filetype
        __props__.__dict__["av_block_log"] = av_block_log
        __props__.__dict__["av_virus_log"] = av_virus_log
        __props__.__dict__["cifs"] = cifs
        __props__.__dict__["comment"] = comment
        __props__.__dict__["content_disarm"] = content_disarm
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["ems_threat_feed"] = ems_threat_feed
        __props__.__dict__["extended_log"] = extended_log
        __props__.__dict__["external_blocklist_enable_all"] = external_blocklist_enable_all
        __props__.__dict__["external_blocklists"] = external_blocklists
        __props__.__dict__["feature_set"] = feature_set
        __props__.__dict__["fortiai_error_action"] = fortiai_error_action
        __props__.__dict__["fortiai_timeout_action"] = fortiai_timeout_action
        __props__.__dict__["fortindr_error_action"] = fortindr_error_action
        __props__.__dict__["fortindr_timeout_action"] = fortindr_timeout_action
        __props__.__dict__["fortisandbox_error_action"] = fortisandbox_error_action
        __props__.__dict__["fortisandbox_max_upload"] = fortisandbox_max_upload
        __props__.__dict__["fortisandbox_mode"] = fortisandbox_mode
        __props__.__dict__["fortisandbox_timeout_action"] = fortisandbox_timeout_action
        __props__.__dict__["ftgd_analytics"] = ftgd_analytics
        __props__.__dict__["ftp"] = ftp
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["http"] = http
        __props__.__dict__["imap"] = imap
        __props__.__dict__["inspection_mode"] = inspection_mode
        __props__.__dict__["mapi"] = mapi
        __props__.__dict__["mobile_malware_db"] = mobile_malware_db
        __props__.__dict__["nac_quar"] = nac_quar
        __props__.__dict__["name"] = name
        __props__.__dict__["nntp"] = nntp
        __props__.__dict__["outbreak_prevention"] = outbreak_prevention
        __props__.__dict__["outbreak_prevention_archive_scan"] = outbreak_prevention_archive_scan
        __props__.__dict__["pop3"] = pop3
        __props__.__dict__["replacemsg_group"] = replacemsg_group
        __props__.__dict__["scan_mode"] = scan_mode
        __props__.__dict__["smb"] = smb
        __props__.__dict__["smtp"] = smtp
        __props__.__dict__["ssh"] = ssh
        __props__.__dict__["vdomparam"] = vdomparam
        return Profile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="analyticsAcceptFiletype")
    def analytics_accept_filetype(self) -> pulumi.Output[int]:
        """
        Only submit files matching this DLP file-pattern to FortiSandbox.
        """
        return pulumi.get(self, "analytics_accept_filetype")

    @property
    @pulumi.getter(name="analyticsBlFiletype")
    def analytics_bl_filetype(self) -> pulumi.Output[int]:
        """
        Only submit files matching this DLP file-pattern to FortiSandbox.
        """
        return pulumi.get(self, "analytics_bl_filetype")

    @property
    @pulumi.getter(name="analyticsDb")
    def analytics_db(self) -> pulumi.Output[str]:
        """
        Enable/disable using the FortiSandbox signature database to supplement the AV signature databases. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "analytics_db")

    @property
    @pulumi.getter(name="analyticsIgnoreFiletype")
    def analytics_ignore_filetype(self) -> pulumi.Output[int]:
        """
        Do not submit files matching this DLP file-pattern to FortiSandbox (post-transfer scan only).
        """
        return pulumi.get(self, "analytics_ignore_filetype")

    @property
    @pulumi.getter(name="analyticsMaxUpload")
    def analytics_max_upload(self) -> pulumi.Output[int]:
        """
        Maximum size of files that can be uploaded to FortiSandbox.
        """
        return pulumi.get(self, "analytics_max_upload")

    @property
    @pulumi.getter(name="analyticsWlFiletype")
    def analytics_wl_filetype(self) -> pulumi.Output[int]:
        """
        Do not submit files matching this DLP file-pattern to FortiSandbox.
        """
        return pulumi.get(self, "analytics_wl_filetype")

    @property
    @pulumi.getter(name="avBlockLog")
    def av_block_log(self) -> pulumi.Output[str]:
        """
        Enable/disable logging for AntiVirus file blocking. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_block_log")

    @property
    @pulumi.getter(name="avVirusLog")
    def av_virus_log(self) -> pulumi.Output[str]:
        """
        Enable/disable AntiVirus logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_virus_log")

    @property
    @pulumi.getter
    def cifs(self) -> pulumi.Output['outputs.ProfileCifs']:
        """
        Configure CIFS AntiVirus options. The structure of `cifs` block is documented below.
        """
        return pulumi.get(self, "cifs")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> pulumi.Output['outputs.ProfileContentDisarm']:
        """
        AV Content Disarm and Reconstruction settings. The structure of `content_disarm` block is documented below.
        """
        return pulumi.get(self, "content_disarm")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emsThreatFeed")
    def ems_threat_feed(self) -> pulumi.Output[str]:
        """
        Enable/disable use of EMS threat feed when performing AntiVirus scan. Analyzes files including the content of archives. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ems_threat_feed")

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> pulumi.Output[str]:
        """
        Enable/disable extended logging for antivirus. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extended_log")

    @property
    @pulumi.getter(name="externalBlocklistEnableAll")
    def external_blocklist_enable_all(self) -> pulumi.Output[str]:
        """
        Enable/disable all external blocklists. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external_blocklist_enable_all")

    @property
    @pulumi.getter(name="externalBlocklists")
    def external_blocklists(self) -> pulumi.Output[Optional[Sequence['outputs.ProfileExternalBlocklist']]]:
        """
        One or more external malware block lists. The structure of `external_blocklist` block is documented below.
        """
        return pulumi.get(self, "external_blocklists")

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> pulumi.Output[str]:
        """
        Flow/proxy feature set. Valid values: `flow`, `proxy`.
        """
        return pulumi.get(self, "feature_set")

    @property
    @pulumi.getter(name="fortiaiErrorAction")
    def fortiai_error_action(self) -> pulumi.Output[str]:
        """
        Action to take if FortiAI encounters an error. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortiai_error_action")

    @property
    @pulumi.getter(name="fortiaiTimeoutAction")
    def fortiai_timeout_action(self) -> pulumi.Output[str]:
        """
        Action to take if FortiAI encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortiai_timeout_action")

    @property
    @pulumi.getter(name="fortindrErrorAction")
    def fortindr_error_action(self) -> pulumi.Output[str]:
        """
        Action to take if FortiNDR encounters an error. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortindr_error_action")

    @property
    @pulumi.getter(name="fortindrTimeoutAction")
    def fortindr_timeout_action(self) -> pulumi.Output[str]:
        """
        Action to take if FortiNDR encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortindr_timeout_action")

    @property
    @pulumi.getter(name="fortisandboxErrorAction")
    def fortisandbox_error_action(self) -> pulumi.Output[str]:
        """
        Action to take if FortiSandbox inline scan encounters an error. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortisandbox_error_action")

    @property
    @pulumi.getter(name="fortisandboxMaxUpload")
    def fortisandbox_max_upload(self) -> pulumi.Output[int]:
        """
        Maximum size of files that can be uploaded to FortiSandbox.
        """
        return pulumi.get(self, "fortisandbox_max_upload")

    @property
    @pulumi.getter(name="fortisandboxMode")
    def fortisandbox_mode(self) -> pulumi.Output[str]:
        """
        FortiSandbox scan modes. Valid values: `inline`, `analytics-suspicious`, `analytics-everything`.
        """
        return pulumi.get(self, "fortisandbox_mode")

    @property
    @pulumi.getter(name="fortisandboxTimeoutAction")
    def fortisandbox_timeout_action(self) -> pulumi.Output[str]:
        """
        Action to take if FortiSandbox inline scan encounters a scan timeout. Valid values: `log-only`, `block`, `ignore`.
        """
        return pulumi.get(self, "fortisandbox_timeout_action")

    @property
    @pulumi.getter(name="ftgdAnalytics")
    def ftgd_analytics(self) -> pulumi.Output[str]:
        """
        Settings to control which files are uploaded to FortiSandbox. Valid values: `disable`, `suspicious`, `everything`.
        """
        return pulumi.get(self, "ftgd_analytics")

    @property
    @pulumi.getter
    def ftp(self) -> pulumi.Output['outputs.ProfileFtp']:
        """
        Configure FTP AntiVirus options. The structure of `ftp` block is documented below.
        """
        return pulumi.get(self, "ftp")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def http(self) -> pulumi.Output['outputs.ProfileHttp']:
        """
        Configure HTTP AntiVirus options. The structure of `http` block is documented below.
        """
        return pulumi.get(self, "http")

    @property
    @pulumi.getter
    def imap(self) -> pulumi.Output['outputs.ProfileImap']:
        """
        Configure IMAP AntiVirus options. The structure of `imap` block is documented below.
        """
        return pulumi.get(self, "imap")

    @property
    @pulumi.getter(name="inspectionMode")
    def inspection_mode(self) -> pulumi.Output[str]:
        """
        Inspection mode. Valid values: `proxy`, `flow-based`.
        """
        return pulumi.get(self, "inspection_mode")

    @property
    @pulumi.getter
    def mapi(self) -> pulumi.Output['outputs.ProfileMapi']:
        """
        Configure MAPI AntiVirus options. The structure of `mapi` block is documented below.
        """
        return pulumi.get(self, "mapi")

    @property
    @pulumi.getter(name="mobileMalwareDb")
    def mobile_malware_db(self) -> pulumi.Output[str]:
        """
        Enable/disable using the mobile malware signature database. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mobile_malware_db")

    @property
    @pulumi.getter(name="nacQuar")
    def nac_quar(self) -> pulumi.Output['outputs.ProfileNacQuar']:
        """
        Configure AntiVirus quarantine settings. The structure of `nac_quar` block is documented below.
        """
        return pulumi.get(self, "nac_quar")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nntp(self) -> pulumi.Output['outputs.ProfileNntp']:
        """
        Configure NNTP AntiVirus options. The structure of `nntp` block is documented below.
        """
        return pulumi.get(self, "nntp")

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> pulumi.Output['outputs.ProfileOutbreakPrevention']:
        """
        Configure Virus Outbreak Prevention settings. The structure of `outbreak_prevention` block is documented below.
        """
        return pulumi.get(self, "outbreak_prevention")

    @property
    @pulumi.getter(name="outbreakPreventionArchiveScan")
    def outbreak_prevention_archive_scan(self) -> pulumi.Output[str]:
        """
        Enable/disable outbreak-prevention archive scanning. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "outbreak_prevention_archive_scan")

    @property
    @pulumi.getter
    def pop3(self) -> pulumi.Output['outputs.ProfilePop3']:
        """
        Configure POP3 AntiVirus options. The structure of `pop3` block is documented below.
        """
        return pulumi.get(self, "pop3")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> pulumi.Output[str]:
        """
        Replacement message group customized for this profile.
        """
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter(name="scanMode")
    def scan_mode(self) -> pulumi.Output[str]:
        """
        Configure scan mode (default or legacy).
        """
        return pulumi.get(self, "scan_mode")

    @property
    @pulumi.getter
    def smb(self) -> pulumi.Output['outputs.ProfileSmb']:
        """
        Configure SMB AntiVirus options. The structure of `smb` block is documented below.
        """
        return pulumi.get(self, "smb")

    @property
    @pulumi.getter
    def smtp(self) -> pulumi.Output['outputs.ProfileSmtp']:
        """
        Configure SMTP AntiVirus options. The structure of `smtp` block is documented below.
        """
        return pulumi.get(self, "smtp")

    @property
    @pulumi.getter
    def ssh(self) -> pulumi.Output['outputs.ProfileSsh']:
        """
        Configure SFTP and SCP AntiVirus options. The structure of `ssh` block is documented below.
        """
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

