# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InterfacePortArgs', 'InterfacePort']

@pulumi.input_type
class InterfacePortArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 defaultgw: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_identification: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[str]] = None,
                 dns_server_override: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[str]] = None,
                 mtu_override: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a InterfacePort resource.
        :param pulumi.Input[str] type: Interface type (support physical, vlan, loopback).
        :param pulumi.Input[str] alias: Alias will be displayed with the interface name to make it easier to distinguish.
        :param pulumi.Input[str] allowaccess: Permitted types of management access to this interface.
        :param pulumi.Input[str] defaultgw: Enable to get the gateway IP from the DHCP or PPPoE server.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] device_identification: Enable/disable passively gathering of device identity information about the devices on the network connected to this interface.
        :param pulumi.Input[str] distance: Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        :param pulumi.Input[str] dns_server_override: Enable/disable use DNS acquired by DHCP or PPPoE.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] ip: Interface IPv4 address and subnet mask, syntax` - X.X.X.X X.X.X.X.
        :param pulumi.Input[str] mode: Addressing mode.
        :param pulumi.Input[str] mtu: MTU value for this interface.
        :param pulumi.Input[str] mtu_override: Enable to set a custom MTU for this interface.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] role: Interface role.
        :param pulumi.Input[str] speed: Interface speed. The default setting and the options available depend on the interface hardware.
        :param pulumi.Input[str] status: Bring the interface up or shut the interface down.
        :param pulumi.Input[str] tcp_mss: TCP maximum segment size. 0 means do not change segment size.
        :param pulumi.Input[str] vdom: Interface is in this virtual domain (VDOM).
        :param pulumi.Input[str] vlanid: VLAN ID.
        """
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if defaultgw is not None:
            pulumi.set(__self__, "defaultgw", defaultgw)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_identification is not None:
            pulumi.set(__self__, "device_identification", device_identification)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dns_server_override is not None:
            pulumi.set(__self__, "dns_server_override", dns_server_override)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_override is not None:
            pulumi.set(__self__, "mtu_override", mtu_override)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp_mss is not None:
            pulumi.set(__self__, "tcp_mss", tcp_mss)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vlanid is not None:
            pulumi.set(__self__, "vlanid", vlanid)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Interface type (support physical, vlan, loopback).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Alias will be displayed with the interface name to make it easier to distinguish.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted types of management access to this interface.
        """
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter
    def defaultgw(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to get the gateway IP from the DHCP or PPPoE server.
        """
        return pulumi.get(self, "defaultgw")

    @defaultgw.setter
    def defaultgw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "defaultgw", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceIdentification")
    def device_identification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable passively gathering of device identity information about the devices on the network connected to this interface.
        """
        return pulumi.get(self, "device_identification")

    @device_identification.setter
    def device_identification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_identification", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[str]]:
        """
        Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="dnsServerOverride")
    def dns_server_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use DNS acquired by DHCP or PPPoE.
        """
        return pulumi.get(self, "dns_server_override")

    @dns_server_override.setter
    def dns_server_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server_override", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Interface IPv4 address and subnet mask, syntax` - X.X.X.X X.X.X.X.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Addressing mode.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[str]]:
        """
        MTU value for this interface.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="mtuOverride")
    def mtu_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to set a custom MTU for this interface.
        """
        return pulumi.get(self, "mtu_override")

    @mtu_override.setter
    def mtu_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu_override", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Interface role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        Interface speed. The default setting and the options available depend on the interface hardware.
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Bring the interface up or shut the interface down.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> Optional[pulumi.Input[str]]:
        """
        TCP maximum segment size. 0 means do not change segment size.
        """
        return pulumi.get(self, "tcp_mss")

    @tcp_mss.setter
    def tcp_mss(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_mss", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        Interface is in this virtual domain (VDOM).
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vlanid(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN ID.
        """
        return pulumi.get(self, "vlanid")

    @vlanid.setter
    def vlanid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlanid", value)


@pulumi.input_type
class _InterfacePortState:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 defaultgw: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_identification: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[str]] = None,
                 dns_server_override: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[str]] = None,
                 mtu_override: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering InterfacePort resources.
        :param pulumi.Input[str] alias: Alias will be displayed with the interface name to make it easier to distinguish.
        :param pulumi.Input[str] allowaccess: Permitted types of management access to this interface.
        :param pulumi.Input[str] defaultgw: Enable to get the gateway IP from the DHCP or PPPoE server.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] device_identification: Enable/disable passively gathering of device identity information about the devices on the network connected to this interface.
        :param pulumi.Input[str] distance: Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        :param pulumi.Input[str] dns_server_override: Enable/disable use DNS acquired by DHCP or PPPoE.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] ip: Interface IPv4 address and subnet mask, syntax` - X.X.X.X X.X.X.X.
        :param pulumi.Input[str] mode: Addressing mode.
        :param pulumi.Input[str] mtu: MTU value for this interface.
        :param pulumi.Input[str] mtu_override: Enable to set a custom MTU for this interface.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] role: Interface role.
        :param pulumi.Input[str] speed: Interface speed. The default setting and the options available depend on the interface hardware.
        :param pulumi.Input[str] status: Bring the interface up or shut the interface down.
        :param pulumi.Input[str] tcp_mss: TCP maximum segment size. 0 means do not change segment size.
        :param pulumi.Input[str] type: Interface type (support physical, vlan, loopback).
        :param pulumi.Input[str] vdom: Interface is in this virtual domain (VDOM).
        :param pulumi.Input[str] vlanid: VLAN ID.
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if defaultgw is not None:
            pulumi.set(__self__, "defaultgw", defaultgw)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_identification is not None:
            pulumi.set(__self__, "device_identification", device_identification)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if dns_server_override is not None:
            pulumi.set(__self__, "dns_server_override", dns_server_override)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_override is not None:
            pulumi.set(__self__, "mtu_override", mtu_override)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp_mss is not None:
            pulumi.set(__self__, "tcp_mss", tcp_mss)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)
        if vlanid is not None:
            pulumi.set(__self__, "vlanid", vlanid)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Alias will be displayed with the interface name to make it easier to distinguish.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted types of management access to this interface.
        """
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter
    def defaultgw(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to get the gateway IP from the DHCP or PPPoE server.
        """
        return pulumi.get(self, "defaultgw")

    @defaultgw.setter
    def defaultgw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "defaultgw", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceIdentification")
    def device_identification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable passively gathering of device identity information about the devices on the network connected to this interface.
        """
        return pulumi.get(self, "device_identification")

    @device_identification.setter
    def device_identification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_identification", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[str]]:
        """
        Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter(name="dnsServerOverride")
    def dns_server_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use DNS acquired by DHCP or PPPoE.
        """
        return pulumi.get(self, "dns_server_override")

    @dns_server_override.setter
    def dns_server_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server_override", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Interface IPv4 address and subnet mask, syntax` - X.X.X.X X.X.X.X.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Addressing mode.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[str]]:
        """
        MTU value for this interface.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="mtuOverride")
    def mtu_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to set a custom MTU for this interface.
        """
        return pulumi.get(self, "mtu_override")

    @mtu_override.setter
    def mtu_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu_override", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Interface role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        Interface speed. The default setting and the options available depend on the interface hardware.
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Bring the interface up or shut the interface down.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> Optional[pulumi.Input[str]]:
        """
        TCP maximum segment size. 0 means do not change segment size.
        """
        return pulumi.get(self, "tcp_mss")

    @tcp_mss.setter
    def tcp_mss(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_mss", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Interface type (support physical, vlan, loopback).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        Interface is in this virtual domain (VDOM).
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)

    @property
    @pulumi.getter
    def vlanid(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN ID.
        """
        return pulumi.get(self, "vlanid")

    @vlanid.setter
    def vlanid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlanid", value)


class InterfacePort(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 defaultgw: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_identification: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[str]] = None,
                 dns_server_override: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[str]] = None,
                 mtu_override: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to configure interface settings of FortiOS.

        !> **Warning:** The resource will be deprecated and replaced by new resource `system.Interface`, we recommend that you use the new resource.

        ## Example Usage

        ### Loopback Interface
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        loopback1 = fortios.networking.InterfacePort("loopback1",
            alias="cc1",
            allowaccess="ping http",
            description="description",
            ip="23.123.33.10 255.255.255.0",
            mode="static",
            role="lan",
            status="up",
            type="loopback",
            vdom="root")
        ```

        ### VLAN Interface
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        vlan1 = fortios.networking.InterfacePort("vlan1",
            allowaccess="ping",
            defaultgw="enable",
            distance="33",
            interface="port2",
            ip="3.123.33.10 255.255.255.0",
            mode="static",
            role="lan",
            type="vlan",
            vdom="root",
            vlanid="3")
        ```

        ### Physical Interface
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.networking.InterfacePort("test1",
            alias="dkeeew",
            allowaccess="ping https",
            defaultgw="enable",
            description="description",
            device_identification="enable",
            distance="33",
            dns_server_override="enable",
            ip="93.133.133.110 255.255.255.0",
            mode="static",
            mtu="2933",
            mtu_override="enable",
            role="lan",
            speed="auto",
            status="up",
            tcp_mss="3232",
            type="physical")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alias: Alias will be displayed with the interface name to make it easier to distinguish.
        :param pulumi.Input[str] allowaccess: Permitted types of management access to this interface.
        :param pulumi.Input[str] defaultgw: Enable to get the gateway IP from the DHCP or PPPoE server.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] device_identification: Enable/disable passively gathering of device identity information about the devices on the network connected to this interface.
        :param pulumi.Input[str] distance: Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        :param pulumi.Input[str] dns_server_override: Enable/disable use DNS acquired by DHCP or PPPoE.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] ip: Interface IPv4 address and subnet mask, syntax` - X.X.X.X X.X.X.X.
        :param pulumi.Input[str] mode: Addressing mode.
        :param pulumi.Input[str] mtu: MTU value for this interface.
        :param pulumi.Input[str] mtu_override: Enable to set a custom MTU for this interface.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] role: Interface role.
        :param pulumi.Input[str] speed: Interface speed. The default setting and the options available depend on the interface hardware.
        :param pulumi.Input[str] status: Bring the interface up or shut the interface down.
        :param pulumi.Input[str] tcp_mss: TCP maximum segment size. 0 means do not change segment size.
        :param pulumi.Input[str] type: Interface type (support physical, vlan, loopback).
        :param pulumi.Input[str] vdom: Interface is in this virtual domain (VDOM).
        :param pulumi.Input[str] vlanid: VLAN ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InterfacePortArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to configure interface settings of FortiOS.

        !> **Warning:** The resource will be deprecated and replaced by new resource `system.Interface`, we recommend that you use the new resource.

        ## Example Usage

        ### Loopback Interface
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        loopback1 = fortios.networking.InterfacePort("loopback1",
            alias="cc1",
            allowaccess="ping http",
            description="description",
            ip="23.123.33.10 255.255.255.0",
            mode="static",
            role="lan",
            status="up",
            type="loopback",
            vdom="root")
        ```

        ### VLAN Interface
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        vlan1 = fortios.networking.InterfacePort("vlan1",
            allowaccess="ping",
            defaultgw="enable",
            distance="33",
            interface="port2",
            ip="3.123.33.10 255.255.255.0",
            mode="static",
            role="lan",
            type="vlan",
            vdom="root",
            vlanid="3")
        ```

        ### Physical Interface
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test1 = fortios.networking.InterfacePort("test1",
            alias="dkeeew",
            allowaccess="ping https",
            defaultgw="enable",
            description="description",
            device_identification="enable",
            distance="33",
            dns_server_override="enable",
            ip="93.133.133.110 255.255.255.0",
            mode="static",
            mtu="2933",
            mtu_override="enable",
            role="lan",
            speed="auto",
            status="up",
            tcp_mss="3232",
            type="physical")
        ```

        :param str resource_name: The name of the resource.
        :param InterfacePortArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InterfacePortArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 defaultgw: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_identification: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[str]] = None,
                 dns_server_override: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[str]] = None,
                 mtu_override: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_mss: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None,
                 vlanid: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InterfacePortArgs.__new__(InterfacePortArgs)

            __props__.__dict__["alias"] = alias
            __props__.__dict__["allowaccess"] = allowaccess
            __props__.__dict__["defaultgw"] = defaultgw
            __props__.__dict__["description"] = description
            __props__.__dict__["device_identification"] = device_identification
            __props__.__dict__["distance"] = distance
            __props__.__dict__["dns_server_override"] = dns_server_override
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ip"] = ip
            __props__.__dict__["mode"] = mode
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["mtu_override"] = mtu_override
            __props__.__dict__["name"] = name
            __props__.__dict__["role"] = role
            __props__.__dict__["speed"] = speed
            __props__.__dict__["status"] = status
            __props__.__dict__["tcp_mss"] = tcp_mss
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["vdom"] = vdom
            __props__.__dict__["vlanid"] = vlanid
        super(InterfacePort, __self__).__init__(
            'fortios:networking/interfacePort:InterfacePort',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alias: Optional[pulumi.Input[str]] = None,
            allowaccess: Optional[pulumi.Input[str]] = None,
            defaultgw: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            device_identification: Optional[pulumi.Input[str]] = None,
            distance: Optional[pulumi.Input[str]] = None,
            dns_server_override: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            mtu: Optional[pulumi.Input[str]] = None,
            mtu_override: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None,
            speed: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tcp_mss: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vdom: Optional[pulumi.Input[str]] = None,
            vlanid: Optional[pulumi.Input[str]] = None) -> 'InterfacePort':
        """
        Get an existing InterfacePort resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alias: Alias will be displayed with the interface name to make it easier to distinguish.
        :param pulumi.Input[str] allowaccess: Permitted types of management access to this interface.
        :param pulumi.Input[str] defaultgw: Enable to get the gateway IP from the DHCP or PPPoE server.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] device_identification: Enable/disable passively gathering of device identity information about the devices on the network connected to this interface.
        :param pulumi.Input[str] distance: Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        :param pulumi.Input[str] dns_server_override: Enable/disable use DNS acquired by DHCP or PPPoE.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] ip: Interface IPv4 address and subnet mask, syntax` - X.X.X.X X.X.X.X.
        :param pulumi.Input[str] mode: Addressing mode.
        :param pulumi.Input[str] mtu: MTU value for this interface.
        :param pulumi.Input[str] mtu_override: Enable to set a custom MTU for this interface.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] role: Interface role.
        :param pulumi.Input[str] speed: Interface speed. The default setting and the options available depend on the interface hardware.
        :param pulumi.Input[str] status: Bring the interface up or shut the interface down.
        :param pulumi.Input[str] tcp_mss: TCP maximum segment size. 0 means do not change segment size.
        :param pulumi.Input[str] type: Interface type (support physical, vlan, loopback).
        :param pulumi.Input[str] vdom: Interface is in this virtual domain (VDOM).
        :param pulumi.Input[str] vlanid: VLAN ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InterfacePortState.__new__(_InterfacePortState)

        __props__.__dict__["alias"] = alias
        __props__.__dict__["allowaccess"] = allowaccess
        __props__.__dict__["defaultgw"] = defaultgw
        __props__.__dict__["description"] = description
        __props__.__dict__["device_identification"] = device_identification
        __props__.__dict__["distance"] = distance
        __props__.__dict__["dns_server_override"] = dns_server_override
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ip"] = ip
        __props__.__dict__["mode"] = mode
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["mtu_override"] = mtu_override
        __props__.__dict__["name"] = name
        __props__.__dict__["role"] = role
        __props__.__dict__["speed"] = speed
        __props__.__dict__["status"] = status
        __props__.__dict__["tcp_mss"] = tcp_mss
        __props__.__dict__["type"] = type
        __props__.__dict__["vdom"] = vdom
        __props__.__dict__["vlanid"] = vlanid
        return InterfacePort(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def alias(self) -> pulumi.Output[str]:
        """
        Alias will be displayed with the interface name to make it easier to distinguish.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def allowaccess(self) -> pulumi.Output[str]:
        """
        Permitted types of management access to this interface.
        """
        return pulumi.get(self, "allowaccess")

    @property
    @pulumi.getter
    def defaultgw(self) -> pulumi.Output[str]:
        """
        Enable to get the gateway IP from the DHCP or PPPoE server.
        """
        return pulumi.get(self, "defaultgw")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceIdentification")
    def device_identification(self) -> pulumi.Output[str]:
        """
        Enable/disable passively gathering of device identity information about the devices on the network connected to this interface.
        """
        return pulumi.get(self, "device_identification")

    @property
    @pulumi.getter
    def distance(self) -> pulumi.Output[str]:
        """
        Distance for routes learned through PPPoE or DHCP, lower distance indicates preferred route.
        """
        return pulumi.get(self, "distance")

    @property
    @pulumi.getter(name="dnsServerOverride")
    def dns_server_override(self) -> pulumi.Output[str]:
        """
        Enable/disable use DNS acquired by DHCP or PPPoE.
        """
        return pulumi.get(self, "dns_server_override")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        """
        Interface IPv4 address and subnet mask, syntax` - X.X.X.X X.X.X.X.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        Addressing mode.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[str]:
        """
        MTU value for this interface.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="mtuOverride")
    def mtu_override(self) -> pulumi.Output[str]:
        """
        Enable to set a custom MTU for this interface.
        """
        return pulumi.get(self, "mtu_override")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        Interface role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def speed(self) -> pulumi.Output[str]:
        """
        Interface speed. The default setting and the options available depend on the interface hardware.
        """
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Bring the interface up or shut the interface down.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tcpMss")
    def tcp_mss(self) -> pulumi.Output[str]:
        """
        TCP maximum segment size. 0 means do not change segment size.
        """
        return pulumi.get(self, "tcp_mss")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Interface type (support physical, vlan, loopback).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vdom(self) -> pulumi.Output[str]:
        """
        Interface is in this virtual domain (VDOM).
        """
        return pulumi.get(self, "vdom")

    @property
    @pulumi.getter
    def vlanid(self) -> pulumi.Output[str]:
        """
        VLAN ID.
        """
        return pulumi.get(self, "vlanid")

