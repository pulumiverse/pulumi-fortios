# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LayoutArgs', 'Layout']

@pulumi.input_type
class LayoutArgs:
    def __init__(__self__, *,
                 style_theme: pulumi.Input[str],
                 body_items: Optional[pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemArgs']]]] = None,
                 cutoff_option: Optional[pulumi.Input[str]] = None,
                 cutoff_time: Optional[pulumi.Input[str]] = None,
                 day: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_recipients: Optional[pulumi.Input[str]] = None,
                 email_send: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 max_pdf_report: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 page: Optional[pulumi.Input['LayoutPageArgs']] = None,
                 schedule_type: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Layout resource.
        :param pulumi.Input[str] style_theme: Report style theme.
        :param pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemArgs']]] body_items: Configure report body item. The structure of `body_item` block is documented below.
        :param pulumi.Input[str] cutoff_option: Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
        :param pulumi.Input[str] cutoff_time: Custom cutoff time to generate report (format = hh:mm).
        :param pulumi.Input[str] day: Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email_recipients: Email recipients for generated reports.
        :param pulumi.Input[str] email_send: Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] format: Report format. Valid values: `pdf`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] max_pdf_report: Maximum number of PDF reports to keep at one time (oldest report is overwritten).
        :param pulumi.Input[str] name: Report layout name.
        :param pulumi.Input[str] options: Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
        :param pulumi.Input['LayoutPageArgs'] page: Configure report page. The structure of `page` block is documented below.
        :param pulumi.Input[str] schedule_type: Report schedule type. Valid values: `demand`, `daily`, `weekly`.
        :param pulumi.Input[str] subtitle: Report subtitle.
        :param pulumi.Input[str] time: Schedule time to generate report (format = hh:mm).
        :param pulumi.Input[str] title: Report title.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "style_theme", style_theme)
        if body_items is not None:
            pulumi.set(__self__, "body_items", body_items)
        if cutoff_option is not None:
            pulumi.set(__self__, "cutoff_option", cutoff_option)
        if cutoff_time is not None:
            pulumi.set(__self__, "cutoff_time", cutoff_time)
        if day is not None:
            pulumi.set(__self__, "day", day)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if email_recipients is not None:
            pulumi.set(__self__, "email_recipients", email_recipients)
        if email_send is not None:
            pulumi.set(__self__, "email_send", email_send)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if max_pdf_report is not None:
            pulumi.set(__self__, "max_pdf_report", max_pdf_report)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if page is not None:
            pulumi.set(__self__, "page", page)
        if schedule_type is not None:
            pulumi.set(__self__, "schedule_type", schedule_type)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="styleTheme")
    def style_theme(self) -> pulumi.Input[str]:
        """
        Report style theme.
        """
        return pulumi.get(self, "style_theme")

    @style_theme.setter
    def style_theme(self, value: pulumi.Input[str]):
        pulumi.set(self, "style_theme", value)

    @property
    @pulumi.getter(name="bodyItems")
    def body_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemArgs']]]]:
        """
        Configure report body item. The structure of `body_item` block is documented below.
        """
        return pulumi.get(self, "body_items")

    @body_items.setter
    def body_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemArgs']]]]):
        pulumi.set(self, "body_items", value)

    @property
    @pulumi.getter(name="cutoffOption")
    def cutoff_option(self) -> Optional[pulumi.Input[str]]:
        """
        Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
        """
        return pulumi.get(self, "cutoff_option")

    @cutoff_option.setter
    def cutoff_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cutoff_option", value)

    @property
    @pulumi.getter(name="cutoffTime")
    def cutoff_time(self) -> Optional[pulumi.Input[str]]:
        """
        Custom cutoff time to generate report (format = hh:mm).
        """
        return pulumi.get(self, "cutoff_time")

    @cutoff_time.setter
    def cutoff_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cutoff_time", value)

    @property
    @pulumi.getter
    def day(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailRecipients")
    def email_recipients(self) -> Optional[pulumi.Input[str]]:
        """
        Email recipients for generated reports.
        """
        return pulumi.get(self, "email_recipients")

    @email_recipients.setter
    def email_recipients(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_recipients", value)

    @property
    @pulumi.getter(name="emailSend")
    def email_send(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "email_send")

    @email_send.setter
    def email_send(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_send", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Report format. Valid values: `pdf`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="maxPdfReport")
    def max_pdf_report(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of PDF reports to keep at one time (oldest report is overwritten).
        """
        return pulumi.get(self, "max_pdf_report")

    @max_pdf_report.setter
    def max_pdf_report(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pdf_report", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Report layout name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def page(self) -> Optional[pulumi.Input['LayoutPageArgs']]:
        """
        Configure report page. The structure of `page` block is documented below.
        """
        return pulumi.get(self, "page")

    @page.setter
    def page(self, value: Optional[pulumi.Input['LayoutPageArgs']]):
        pulumi.set(self, "page", value)

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> Optional[pulumi.Input[str]]:
        """
        Report schedule type. Valid values: `demand`, `daily`, `weekly`.
        """
        return pulumi.get(self, "schedule_type")

    @schedule_type.setter
    def schedule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_type", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Report subtitle.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule time to generate report (format = hh:mm).
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Report title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _LayoutState:
    def __init__(__self__, *,
                 body_items: Optional[pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemArgs']]]] = None,
                 cutoff_option: Optional[pulumi.Input[str]] = None,
                 cutoff_time: Optional[pulumi.Input[str]] = None,
                 day: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_recipients: Optional[pulumi.Input[str]] = None,
                 email_send: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 max_pdf_report: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 page: Optional[pulumi.Input['LayoutPageArgs']] = None,
                 schedule_type: Optional[pulumi.Input[str]] = None,
                 style_theme: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Layout resources.
        :param pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemArgs']]] body_items: Configure report body item. The structure of `body_item` block is documented below.
        :param pulumi.Input[str] cutoff_option: Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
        :param pulumi.Input[str] cutoff_time: Custom cutoff time to generate report (format = hh:mm).
        :param pulumi.Input[str] day: Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email_recipients: Email recipients for generated reports.
        :param pulumi.Input[str] email_send: Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] format: Report format. Valid values: `pdf`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] max_pdf_report: Maximum number of PDF reports to keep at one time (oldest report is overwritten).
        :param pulumi.Input[str] name: Report layout name.
        :param pulumi.Input[str] options: Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
        :param pulumi.Input['LayoutPageArgs'] page: Configure report page. The structure of `page` block is documented below.
        :param pulumi.Input[str] schedule_type: Report schedule type. Valid values: `demand`, `daily`, `weekly`.
        :param pulumi.Input[str] style_theme: Report style theme.
        :param pulumi.Input[str] subtitle: Report subtitle.
        :param pulumi.Input[str] time: Schedule time to generate report (format = hh:mm).
        :param pulumi.Input[str] title: Report title.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if body_items is not None:
            pulumi.set(__self__, "body_items", body_items)
        if cutoff_option is not None:
            pulumi.set(__self__, "cutoff_option", cutoff_option)
        if cutoff_time is not None:
            pulumi.set(__self__, "cutoff_time", cutoff_time)
        if day is not None:
            pulumi.set(__self__, "day", day)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if email_recipients is not None:
            pulumi.set(__self__, "email_recipients", email_recipients)
        if email_send is not None:
            pulumi.set(__self__, "email_send", email_send)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if max_pdf_report is not None:
            pulumi.set(__self__, "max_pdf_report", max_pdf_report)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if page is not None:
            pulumi.set(__self__, "page", page)
        if schedule_type is not None:
            pulumi.set(__self__, "schedule_type", schedule_type)
        if style_theme is not None:
            pulumi.set(__self__, "style_theme", style_theme)
        if subtitle is not None:
            pulumi.set(__self__, "subtitle", subtitle)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="bodyItems")
    def body_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemArgs']]]]:
        """
        Configure report body item. The structure of `body_item` block is documented below.
        """
        return pulumi.get(self, "body_items")

    @body_items.setter
    def body_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LayoutBodyItemArgs']]]]):
        pulumi.set(self, "body_items", value)

    @property
    @pulumi.getter(name="cutoffOption")
    def cutoff_option(self) -> Optional[pulumi.Input[str]]:
        """
        Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
        """
        return pulumi.get(self, "cutoff_option")

    @cutoff_option.setter
    def cutoff_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cutoff_option", value)

    @property
    @pulumi.getter(name="cutoffTime")
    def cutoff_time(self) -> Optional[pulumi.Input[str]]:
        """
        Custom cutoff time to generate report (format = hh:mm).
        """
        return pulumi.get(self, "cutoff_time")

    @cutoff_time.setter
    def cutoff_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cutoff_time", value)

    @property
    @pulumi.getter
    def day(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emailRecipients")
    def email_recipients(self) -> Optional[pulumi.Input[str]]:
        """
        Email recipients for generated reports.
        """
        return pulumi.get(self, "email_recipients")

    @email_recipients.setter
    def email_recipients(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_recipients", value)

    @property
    @pulumi.getter(name="emailSend")
    def email_send(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "email_send")

    @email_send.setter
    def email_send(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_send", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Report format. Valid values: `pdf`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="maxPdfReport")
    def max_pdf_report(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of PDF reports to keep at one time (oldest report is overwritten).
        """
        return pulumi.get(self, "max_pdf_report")

    @max_pdf_report.setter
    def max_pdf_report(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pdf_report", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Report layout name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def page(self) -> Optional[pulumi.Input['LayoutPageArgs']]:
        """
        Configure report page. The structure of `page` block is documented below.
        """
        return pulumi.get(self, "page")

    @page.setter
    def page(self, value: Optional[pulumi.Input['LayoutPageArgs']]):
        pulumi.set(self, "page", value)

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> Optional[pulumi.Input[str]]:
        """
        Report schedule type. Valid values: `demand`, `daily`, `weekly`.
        """
        return pulumi.get(self, "schedule_type")

    @schedule_type.setter
    def schedule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_type", value)

    @property
    @pulumi.getter(name="styleTheme")
    def style_theme(self) -> Optional[pulumi.Input[str]]:
        """
        Report style theme.
        """
        return pulumi.get(self, "style_theme")

    @style_theme.setter
    def style_theme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style_theme", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input[str]]:
        """
        Report subtitle.
        """
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule time to generate report (format = hh:mm).
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Report title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Layout(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LayoutBodyItemArgs']]]]] = None,
                 cutoff_option: Optional[pulumi.Input[str]] = None,
                 cutoff_time: Optional[pulumi.Input[str]] = None,
                 day: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_recipients: Optional[pulumi.Input[str]] = None,
                 email_send: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 max_pdf_report: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 page: Optional[pulumi.Input[pulumi.InputType['LayoutPageArgs']]] = None,
                 schedule_type: Optional[pulumi.Input[str]] = None,
                 style_theme: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Report layout configuration.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.report.Layout("trname",
            cutoff_option="run-time",
            cutoff_time="00:00",
            day="sunday",
            email_send="disable",
            format="pdf",
            max_pdf_report=31,
            options="include-table-of-content view-chart-as-heading",
            schedule_type="daily",
            style_theme="default-report",
            time="00:00",
            title="FortiGate System Analysis Report")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Report Layout can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:report/layout:Layout labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:report/layout:Layout labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LayoutBodyItemArgs']]]] body_items: Configure report body item. The structure of `body_item` block is documented below.
        :param pulumi.Input[str] cutoff_option: Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
        :param pulumi.Input[str] cutoff_time: Custom cutoff time to generate report (format = hh:mm).
        :param pulumi.Input[str] day: Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email_recipients: Email recipients for generated reports.
        :param pulumi.Input[str] email_send: Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] format: Report format. Valid values: `pdf`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] max_pdf_report: Maximum number of PDF reports to keep at one time (oldest report is overwritten).
        :param pulumi.Input[str] name: Report layout name.
        :param pulumi.Input[str] options: Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
        :param pulumi.Input[pulumi.InputType['LayoutPageArgs']] page: Configure report page. The structure of `page` block is documented below.
        :param pulumi.Input[str] schedule_type: Report schedule type. Valid values: `demand`, `daily`, `weekly`.
        :param pulumi.Input[str] style_theme: Report style theme.
        :param pulumi.Input[str] subtitle: Report subtitle.
        :param pulumi.Input[str] time: Schedule time to generate report (format = hh:mm).
        :param pulumi.Input[str] title: Report title.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LayoutArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Report layout configuration.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.report.Layout("trname",
            cutoff_option="run-time",
            cutoff_time="00:00",
            day="sunday",
            email_send="disable",
            format="pdf",
            max_pdf_report=31,
            options="include-table-of-content view-chart-as-heading",
            schedule_type="daily",
            style_theme="default-report",
            time="00:00",
            title="FortiGate System Analysis Report")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Report Layout can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:report/layout:Layout labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:report/layout:Layout labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param LayoutArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LayoutArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LayoutBodyItemArgs']]]]] = None,
                 cutoff_option: Optional[pulumi.Input[str]] = None,
                 cutoff_time: Optional[pulumi.Input[str]] = None,
                 day: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email_recipients: Optional[pulumi.Input[str]] = None,
                 email_send: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 max_pdf_report: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 page: Optional[pulumi.Input[pulumi.InputType['LayoutPageArgs']]] = None,
                 schedule_type: Optional[pulumi.Input[str]] = None,
                 style_theme: Optional[pulumi.Input[str]] = None,
                 subtitle: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LayoutArgs.__new__(LayoutArgs)

            __props__.__dict__["body_items"] = body_items
            __props__.__dict__["cutoff_option"] = cutoff_option
            __props__.__dict__["cutoff_time"] = cutoff_time
            __props__.__dict__["day"] = day
            __props__.__dict__["description"] = description
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["email_recipients"] = email_recipients
            __props__.__dict__["email_send"] = email_send
            __props__.__dict__["format"] = format
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["max_pdf_report"] = max_pdf_report
            __props__.__dict__["name"] = name
            __props__.__dict__["options"] = options
            __props__.__dict__["page"] = page
            __props__.__dict__["schedule_type"] = schedule_type
            if style_theme is None and not opts.urn:
                raise TypeError("Missing required property 'style_theme'")
            __props__.__dict__["style_theme"] = style_theme
            __props__.__dict__["subtitle"] = subtitle
            __props__.__dict__["time"] = time
            __props__.__dict__["title"] = title
            __props__.__dict__["vdomparam"] = vdomparam
        super(Layout, __self__).__init__(
            'fortios:report/layout:Layout',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            body_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LayoutBodyItemArgs']]]]] = None,
            cutoff_option: Optional[pulumi.Input[str]] = None,
            cutoff_time: Optional[pulumi.Input[str]] = None,
            day: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            email_recipients: Optional[pulumi.Input[str]] = None,
            email_send: Optional[pulumi.Input[str]] = None,
            format: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            max_pdf_report: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            options: Optional[pulumi.Input[str]] = None,
            page: Optional[pulumi.Input[pulumi.InputType['LayoutPageArgs']]] = None,
            schedule_type: Optional[pulumi.Input[str]] = None,
            style_theme: Optional[pulumi.Input[str]] = None,
            subtitle: Optional[pulumi.Input[str]] = None,
            time: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Layout':
        """
        Get an existing Layout resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LayoutBodyItemArgs']]]] body_items: Configure report body item. The structure of `body_item` block is documented below.
        :param pulumi.Input[str] cutoff_option: Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
        :param pulumi.Input[str] cutoff_time: Custom cutoff time to generate report (format = hh:mm).
        :param pulumi.Input[str] day: Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email_recipients: Email recipients for generated reports.
        :param pulumi.Input[str] email_send: Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] format: Report format. Valid values: `pdf`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] max_pdf_report: Maximum number of PDF reports to keep at one time (oldest report is overwritten).
        :param pulumi.Input[str] name: Report layout name.
        :param pulumi.Input[str] options: Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
        :param pulumi.Input[pulumi.InputType['LayoutPageArgs']] page: Configure report page. The structure of `page` block is documented below.
        :param pulumi.Input[str] schedule_type: Report schedule type. Valid values: `demand`, `daily`, `weekly`.
        :param pulumi.Input[str] style_theme: Report style theme.
        :param pulumi.Input[str] subtitle: Report subtitle.
        :param pulumi.Input[str] time: Schedule time to generate report (format = hh:mm).
        :param pulumi.Input[str] title: Report title.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LayoutState.__new__(_LayoutState)

        __props__.__dict__["body_items"] = body_items
        __props__.__dict__["cutoff_option"] = cutoff_option
        __props__.__dict__["cutoff_time"] = cutoff_time
        __props__.__dict__["day"] = day
        __props__.__dict__["description"] = description
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["email_recipients"] = email_recipients
        __props__.__dict__["email_send"] = email_send
        __props__.__dict__["format"] = format
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["max_pdf_report"] = max_pdf_report
        __props__.__dict__["name"] = name
        __props__.__dict__["options"] = options
        __props__.__dict__["page"] = page
        __props__.__dict__["schedule_type"] = schedule_type
        __props__.__dict__["style_theme"] = style_theme
        __props__.__dict__["subtitle"] = subtitle
        __props__.__dict__["time"] = time
        __props__.__dict__["title"] = title
        __props__.__dict__["vdomparam"] = vdomparam
        return Layout(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bodyItems")
    def body_items(self) -> pulumi.Output[Optional[Sequence['outputs.LayoutBodyItem']]]:
        """
        Configure report body item. The structure of `body_item` block is documented below.
        """
        return pulumi.get(self, "body_items")

    @property
    @pulumi.getter(name="cutoffOption")
    def cutoff_option(self) -> pulumi.Output[str]:
        """
        Cutoff-option is either run-time or custom. Valid values: `run-time`, `custom`.
        """
        return pulumi.get(self, "cutoff_option")

    @property
    @pulumi.getter(name="cutoffTime")
    def cutoff_time(self) -> pulumi.Output[str]:
        """
        Custom cutoff time to generate report (format = hh:mm).
        """
        return pulumi.get(self, "cutoff_time")

    @property
    @pulumi.getter
    def day(self) -> pulumi.Output[str]:
        """
        Schedule days of week to generate report. Valid values: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emailRecipients")
    def email_recipients(self) -> pulumi.Output[str]:
        """
        Email recipients for generated reports.
        """
        return pulumi.get(self, "email_recipients")

    @property
    @pulumi.getter(name="emailSend")
    def email_send(self) -> pulumi.Output[str]:
        """
        Enable/disable sending emails after reports are generated. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "email_send")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output[str]:
        """
        Report format. Valid values: `pdf`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="maxPdfReport")
    def max_pdf_report(self) -> pulumi.Output[int]:
        """
        Maximum number of PDF reports to keep at one time (oldest report is overwritten).
        """
        return pulumi.get(self, "max_pdf_report")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Report layout name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[str]:
        """
        Report layout options. Valid values: `include-table-of-content`, `auto-numbering-heading`, `view-chart-as-heading`, `show-html-navbar-before-heading`, `dummy-option`.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def page(self) -> pulumi.Output['outputs.LayoutPage']:
        """
        Configure report page. The structure of `page` block is documented below.
        """
        return pulumi.get(self, "page")

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> pulumi.Output[str]:
        """
        Report schedule type. Valid values: `demand`, `daily`, `weekly`.
        """
        return pulumi.get(self, "schedule_type")

    @property
    @pulumi.getter(name="styleTheme")
    def style_theme(self) -> pulumi.Output[str]:
        """
        Report style theme.
        """
        return pulumi.get(self, "style_theme")

    @property
    @pulumi.getter
    def subtitle(self) -> pulumi.Output[str]:
        """
        Report subtitle.
        """
        return pulumi.get(self, "subtitle")

    @property
    @pulumi.getter
    def time(self) -> pulumi.Output[str]:
        """
        Schedule time to generate report (format = hh:mm).
        """
        return pulumi.get(self, "time")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        Report title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

