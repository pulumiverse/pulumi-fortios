# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GroupArgs', 'Group']

@pulumi.input_type
class GroupArgs:
    def __init__(__self__, *,
                 auth_concurrent_override: Optional[pulumi.Input[str]] = None,
                 auth_concurrent_value: Optional[pulumi.Input[int]] = None,
                 authtimeout: Optional[pulumi.Input[int]] = None,
                 company: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 expire: Optional[pulumi.Input[int]] = None,
                 expire_type: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 guests: Optional[pulumi.Input[Sequence[pulumi.Input['GroupGuestArgs']]]] = None,
                 http_digest_realm: Optional[pulumi.Input[str]] = None,
                 matches: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMatchArgs']]]] = None,
                 max_accounts: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberArgs']]]] = None,
                 mobile_phone: Optional[pulumi.Input[str]] = None,
                 multiple_guest_add: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 sponsor: Optional[pulumi.Input[str]] = None,
                 sso_attribute_value: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Group resource.
        :param pulumi.Input[str] auth_concurrent_override: Enable/disable overriding the global number of concurrent authentication sessions for this user group. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_concurrent_value: Maximum number of concurrent authenticated connections per user (0 - 100).
        :param pulumi.Input[int] authtimeout: Authentication timeout in minutes for this user group. 0 to use the global user setting auth-timeout.
        :param pulumi.Input[str] company: Set the action for the company guest user field. Valid values: `optional`, `mandatory`, `disabled`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email: Enable/disable the guest user email address field. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] expire: Time in seconds before guest user accounts expire. (1 - 31536000 sec)
        :param pulumi.Input[str] expire_type: Determine when the expiration countdown begins. Valid values: `immediately`, `first-successful-login`.
        :param pulumi.Input[int] fosid: Group ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_type: Set the group to be for firewall authentication, FSSO, RSSO, or guest users. Valid values: `firewall`, `fsso-service`, `rsso`, `guest`.
        :param pulumi.Input[Sequence[pulumi.Input['GroupGuestArgs']]] guests: Guest User. The structure of `guest` block is documented below.
        :param pulumi.Input[str] http_digest_realm: Realm attribute for MD5-digest authentication.
        :param pulumi.Input[Sequence[pulumi.Input['GroupMatchArgs']]] matches: Group matches. The structure of `match` block is documented below.
        :param pulumi.Input[int] max_accounts: Maximum number of guest accounts that can be created for this group (0 means unlimited).
        :param pulumi.Input[Sequence[pulumi.Input['GroupMemberArgs']]] members: Names of users, peers, LDAP severs, or RADIUS servers to add to the user group. The structure of `member` block is documented below.
        :param pulumi.Input[str] mobile_phone: Enable/disable the guest user mobile phone number field. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] multiple_guest_add: Enable/disable addition of multiple guests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] name: Group name.
        :param pulumi.Input[str] password: Guest user password type. Valid values: `auto-generate`, `specify`, `disable`.
        :param pulumi.Input[str] sms_custom_server: SMS server.
        :param pulumi.Input[str] sms_server: Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] sponsor: Set the action for the sponsor guest user field. Valid values: `optional`, `mandatory`, `disabled`.
        :param pulumi.Input[str] sso_attribute_value: Name of the RADIUS user group that this local user group represents.
        :param pulumi.Input[str] user_id: Guest user ID type. Valid values: `email`, `auto-generate`, `specify`.
        :param pulumi.Input[str] user_name: Enable/disable the guest user name entry. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if auth_concurrent_override is not None:
            pulumi.set(__self__, "auth_concurrent_override", auth_concurrent_override)
        if auth_concurrent_value is not None:
            pulumi.set(__self__, "auth_concurrent_value", auth_concurrent_value)
        if authtimeout is not None:
            pulumi.set(__self__, "authtimeout", authtimeout)
        if company is not None:
            pulumi.set(__self__, "company", company)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expire is not None:
            pulumi.set(__self__, "expire", expire)
        if expire_type is not None:
            pulumi.set(__self__, "expire_type", expire_type)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)
        if guests is not None:
            pulumi.set(__self__, "guests", guests)
        if http_digest_realm is not None:
            pulumi.set(__self__, "http_digest_realm", http_digest_realm)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if max_accounts is not None:
            pulumi.set(__self__, "max_accounts", max_accounts)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if mobile_phone is not None:
            pulumi.set(__self__, "mobile_phone", mobile_phone)
        if multiple_guest_add is not None:
            pulumi.set(__self__, "multiple_guest_add", multiple_guest_add)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if sms_custom_server is not None:
            pulumi.set(__self__, "sms_custom_server", sms_custom_server)
        if sms_server is not None:
            pulumi.set(__self__, "sms_server", sms_server)
        if sponsor is not None:
            pulumi.set(__self__, "sponsor", sponsor)
        if sso_attribute_value is not None:
            pulumi.set(__self__, "sso_attribute_value", sso_attribute_value)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="authConcurrentOverride")
    def auth_concurrent_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the global number of concurrent authentication sessions for this user group. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_concurrent_override")

    @auth_concurrent_override.setter
    def auth_concurrent_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_concurrent_override", value)

    @property
    @pulumi.getter(name="authConcurrentValue")
    def auth_concurrent_value(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of concurrent authenticated connections per user (0 - 100).
        """
        return pulumi.get(self, "auth_concurrent_value")

    @auth_concurrent_value.setter
    def auth_concurrent_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_concurrent_value", value)

    @property
    @pulumi.getter
    def authtimeout(self) -> Optional[pulumi.Input[int]]:
        """
        Authentication timeout in minutes for this user group. 0 to use the global user setting auth-timeout.
        """
        return pulumi.get(self, "authtimeout")

    @authtimeout.setter
    def authtimeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authtimeout", value)

    @property
    @pulumi.getter
    def company(self) -> Optional[pulumi.Input[str]]:
        """
        Set the action for the company guest user field. Valid values: `optional`, `mandatory`, `disabled`.
        """
        return pulumi.get(self, "company")

    @company.setter
    def company(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the guest user email address field. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def expire(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds before guest user accounts expire. (1 - 31536000 sec)
        """
        return pulumi.get(self, "expire")

    @expire.setter
    def expire(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire", value)

    @property
    @pulumi.getter(name="expireType")
    def expire_type(self) -> Optional[pulumi.Input[str]]:
        """
        Determine when the expiration countdown begins. Valid values: `immediately`, `first-successful-login`.
        """
        return pulumi.get(self, "expire_type")

    @expire_type.setter
    def expire_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_type", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        Group ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[pulumi.Input[str]]:
        """
        Set the group to be for firewall authentication, FSSO, RSSO, or guest users. Valid values: `firewall`, `fsso-service`, `rsso`, `guest`.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter
    def guests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupGuestArgs']]]]:
        """
        Guest User. The structure of `guest` block is documented below.
        """
        return pulumi.get(self, "guests")

    @guests.setter
    def guests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupGuestArgs']]]]):
        pulumi.set(self, "guests", value)

    @property
    @pulumi.getter(name="httpDigestRealm")
    def http_digest_realm(self) -> Optional[pulumi.Input[str]]:
        """
        Realm attribute for MD5-digest authentication.
        """
        return pulumi.get(self, "http_digest_realm")

    @http_digest_realm.setter
    def http_digest_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_digest_realm", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupMatchArgs']]]]:
        """
        Group matches. The structure of `match` block is documented below.
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMatchArgs']]]]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter(name="maxAccounts")
    def max_accounts(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of guest accounts that can be created for this group (0 means unlimited).
        """
        return pulumi.get(self, "max_accounts")

    @max_accounts.setter
    def max_accounts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_accounts", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberArgs']]]]:
        """
        Names of users, peers, LDAP severs, or RADIUS servers to add to the user group. The structure of `member` block is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="mobilePhone")
    def mobile_phone(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the guest user mobile phone number field. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mobile_phone")

    @mobile_phone.setter
    def mobile_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mobile_phone", value)

    @property
    @pulumi.getter(name="multipleGuestAdd")
    def multiple_guest_add(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable addition of multiple guests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "multiple_guest_add")

    @multiple_guest_add.setter
    def multiple_guest_add(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multiple_guest_add", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Guest user password type. Valid values: `auto-generate`, `specify`, `disable`.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="smsCustomServer")
    def sms_custom_server(self) -> Optional[pulumi.Input[str]]:
        """
        SMS server.
        """
        return pulumi.get(self, "sms_custom_server")

    @sms_custom_server.setter
    def sms_custom_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_custom_server", value)

    @property
    @pulumi.getter(name="smsServer")
    def sms_server(self) -> Optional[pulumi.Input[str]]:
        """
        Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
        """
        return pulumi.get(self, "sms_server")

    @sms_server.setter
    def sms_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_server", value)

    @property
    @pulumi.getter
    def sponsor(self) -> Optional[pulumi.Input[str]]:
        """
        Set the action for the sponsor guest user field. Valid values: `optional`, `mandatory`, `disabled`.
        """
        return pulumi.get(self, "sponsor")

    @sponsor.setter
    def sponsor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor", value)

    @property
    @pulumi.getter(name="ssoAttributeValue")
    def sso_attribute_value(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the RADIUS user group that this local user group represents.
        """
        return pulumi.get(self, "sso_attribute_value")

    @sso_attribute_value.setter
    def sso_attribute_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_attribute_value", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        Guest user ID type. Valid values: `email`, `auto-generate`, `specify`.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the guest user name entry. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _GroupState:
    def __init__(__self__, *,
                 auth_concurrent_override: Optional[pulumi.Input[str]] = None,
                 auth_concurrent_value: Optional[pulumi.Input[int]] = None,
                 authtimeout: Optional[pulumi.Input[int]] = None,
                 company: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 expire: Optional[pulumi.Input[int]] = None,
                 expire_type: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 guests: Optional[pulumi.Input[Sequence[pulumi.Input['GroupGuestArgs']]]] = None,
                 http_digest_realm: Optional[pulumi.Input[str]] = None,
                 matches: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMatchArgs']]]] = None,
                 max_accounts: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberArgs']]]] = None,
                 mobile_phone: Optional[pulumi.Input[str]] = None,
                 multiple_guest_add: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 sponsor: Optional[pulumi.Input[str]] = None,
                 sso_attribute_value: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Group resources.
        :param pulumi.Input[str] auth_concurrent_override: Enable/disable overriding the global number of concurrent authentication sessions for this user group. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_concurrent_value: Maximum number of concurrent authenticated connections per user (0 - 100).
        :param pulumi.Input[int] authtimeout: Authentication timeout in minutes for this user group. 0 to use the global user setting auth-timeout.
        :param pulumi.Input[str] company: Set the action for the company guest user field. Valid values: `optional`, `mandatory`, `disabled`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email: Enable/disable the guest user email address field. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] expire: Time in seconds before guest user accounts expire. (1 - 31536000 sec)
        :param pulumi.Input[str] expire_type: Determine when the expiration countdown begins. Valid values: `immediately`, `first-successful-login`.
        :param pulumi.Input[int] fosid: Group ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_type: Set the group to be for firewall authentication, FSSO, RSSO, or guest users. Valid values: `firewall`, `fsso-service`, `rsso`, `guest`.
        :param pulumi.Input[Sequence[pulumi.Input['GroupGuestArgs']]] guests: Guest User. The structure of `guest` block is documented below.
        :param pulumi.Input[str] http_digest_realm: Realm attribute for MD5-digest authentication.
        :param pulumi.Input[Sequence[pulumi.Input['GroupMatchArgs']]] matches: Group matches. The structure of `match` block is documented below.
        :param pulumi.Input[int] max_accounts: Maximum number of guest accounts that can be created for this group (0 means unlimited).
        :param pulumi.Input[Sequence[pulumi.Input['GroupMemberArgs']]] members: Names of users, peers, LDAP severs, or RADIUS servers to add to the user group. The structure of `member` block is documented below.
        :param pulumi.Input[str] mobile_phone: Enable/disable the guest user mobile phone number field. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] multiple_guest_add: Enable/disable addition of multiple guests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] name: Group name.
        :param pulumi.Input[str] password: Guest user password type. Valid values: `auto-generate`, `specify`, `disable`.
        :param pulumi.Input[str] sms_custom_server: SMS server.
        :param pulumi.Input[str] sms_server: Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] sponsor: Set the action for the sponsor guest user field. Valid values: `optional`, `mandatory`, `disabled`.
        :param pulumi.Input[str] sso_attribute_value: Name of the RADIUS user group that this local user group represents.
        :param pulumi.Input[str] user_id: Guest user ID type. Valid values: `email`, `auto-generate`, `specify`.
        :param pulumi.Input[str] user_name: Enable/disable the guest user name entry. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if auth_concurrent_override is not None:
            pulumi.set(__self__, "auth_concurrent_override", auth_concurrent_override)
        if auth_concurrent_value is not None:
            pulumi.set(__self__, "auth_concurrent_value", auth_concurrent_value)
        if authtimeout is not None:
            pulumi.set(__self__, "authtimeout", authtimeout)
        if company is not None:
            pulumi.set(__self__, "company", company)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expire is not None:
            pulumi.set(__self__, "expire", expire)
        if expire_type is not None:
            pulumi.set(__self__, "expire_type", expire_type)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)
        if guests is not None:
            pulumi.set(__self__, "guests", guests)
        if http_digest_realm is not None:
            pulumi.set(__self__, "http_digest_realm", http_digest_realm)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if max_accounts is not None:
            pulumi.set(__self__, "max_accounts", max_accounts)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if mobile_phone is not None:
            pulumi.set(__self__, "mobile_phone", mobile_phone)
        if multiple_guest_add is not None:
            pulumi.set(__self__, "multiple_guest_add", multiple_guest_add)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if sms_custom_server is not None:
            pulumi.set(__self__, "sms_custom_server", sms_custom_server)
        if sms_server is not None:
            pulumi.set(__self__, "sms_server", sms_server)
        if sponsor is not None:
            pulumi.set(__self__, "sponsor", sponsor)
        if sso_attribute_value is not None:
            pulumi.set(__self__, "sso_attribute_value", sso_attribute_value)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="authConcurrentOverride")
    def auth_concurrent_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the global number of concurrent authentication sessions for this user group. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_concurrent_override")

    @auth_concurrent_override.setter
    def auth_concurrent_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_concurrent_override", value)

    @property
    @pulumi.getter(name="authConcurrentValue")
    def auth_concurrent_value(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of concurrent authenticated connections per user (0 - 100).
        """
        return pulumi.get(self, "auth_concurrent_value")

    @auth_concurrent_value.setter
    def auth_concurrent_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_concurrent_value", value)

    @property
    @pulumi.getter
    def authtimeout(self) -> Optional[pulumi.Input[int]]:
        """
        Authentication timeout in minutes for this user group. 0 to use the global user setting auth-timeout.
        """
        return pulumi.get(self, "authtimeout")

    @authtimeout.setter
    def authtimeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authtimeout", value)

    @property
    @pulumi.getter
    def company(self) -> Optional[pulumi.Input[str]]:
        """
        Set the action for the company guest user field. Valid values: `optional`, `mandatory`, `disabled`.
        """
        return pulumi.get(self, "company")

    @company.setter
    def company(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the guest user email address field. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def expire(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds before guest user accounts expire. (1 - 31536000 sec)
        """
        return pulumi.get(self, "expire")

    @expire.setter
    def expire(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire", value)

    @property
    @pulumi.getter(name="expireType")
    def expire_type(self) -> Optional[pulumi.Input[str]]:
        """
        Determine when the expiration countdown begins. Valid values: `immediately`, `first-successful-login`.
        """
        return pulumi.get(self, "expire_type")

    @expire_type.setter
    def expire_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_type", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        Group ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[pulumi.Input[str]]:
        """
        Set the group to be for firewall authentication, FSSO, RSSO, or guest users. Valid values: `firewall`, `fsso-service`, `rsso`, `guest`.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter
    def guests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupGuestArgs']]]]:
        """
        Guest User. The structure of `guest` block is documented below.
        """
        return pulumi.get(self, "guests")

    @guests.setter
    def guests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupGuestArgs']]]]):
        pulumi.set(self, "guests", value)

    @property
    @pulumi.getter(name="httpDigestRealm")
    def http_digest_realm(self) -> Optional[pulumi.Input[str]]:
        """
        Realm attribute for MD5-digest authentication.
        """
        return pulumi.get(self, "http_digest_realm")

    @http_digest_realm.setter
    def http_digest_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_digest_realm", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupMatchArgs']]]]:
        """
        Group matches. The structure of `match` block is documented below.
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMatchArgs']]]]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter(name="maxAccounts")
    def max_accounts(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of guest accounts that can be created for this group (0 means unlimited).
        """
        return pulumi.get(self, "max_accounts")

    @max_accounts.setter
    def max_accounts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_accounts", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberArgs']]]]:
        """
        Names of users, peers, LDAP severs, or RADIUS servers to add to the user group. The structure of `member` block is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="mobilePhone")
    def mobile_phone(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the guest user mobile phone number field. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mobile_phone")

    @mobile_phone.setter
    def mobile_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mobile_phone", value)

    @property
    @pulumi.getter(name="multipleGuestAdd")
    def multiple_guest_add(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable addition of multiple guests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "multiple_guest_add")

    @multiple_guest_add.setter
    def multiple_guest_add(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multiple_guest_add", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Guest user password type. Valid values: `auto-generate`, `specify`, `disable`.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="smsCustomServer")
    def sms_custom_server(self) -> Optional[pulumi.Input[str]]:
        """
        SMS server.
        """
        return pulumi.get(self, "sms_custom_server")

    @sms_custom_server.setter
    def sms_custom_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_custom_server", value)

    @property
    @pulumi.getter(name="smsServer")
    def sms_server(self) -> Optional[pulumi.Input[str]]:
        """
        Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
        """
        return pulumi.get(self, "sms_server")

    @sms_server.setter
    def sms_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_server", value)

    @property
    @pulumi.getter
    def sponsor(self) -> Optional[pulumi.Input[str]]:
        """
        Set the action for the sponsor guest user field. Valid values: `optional`, `mandatory`, `disabled`.
        """
        return pulumi.get(self, "sponsor")

    @sponsor.setter
    def sponsor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor", value)

    @property
    @pulumi.getter(name="ssoAttributeValue")
    def sso_attribute_value(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the RADIUS user group that this local user group represents.
        """
        return pulumi.get(self, "sso_attribute_value")

    @sso_attribute_value.setter
    def sso_attribute_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_attribute_value", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        Guest user ID type. Valid values: `email`, `auto-generate`, `specify`.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the guest user name entry. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Group(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_concurrent_override: Optional[pulumi.Input[str]] = None,
                 auth_concurrent_value: Optional[pulumi.Input[int]] = None,
                 authtimeout: Optional[pulumi.Input[int]] = None,
                 company: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 expire: Optional[pulumi.Input[int]] = None,
                 expire_type: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 guests: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupGuestArgs']]]]] = None,
                 http_digest_realm: Optional[pulumi.Input[str]] = None,
                 matches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupMatchArgs']]]]] = None,
                 max_accounts: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupMemberArgs']]]]] = None,
                 mobile_phone: Optional[pulumi.Input[str]] = None,
                 multiple_guest_add: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 sponsor: Optional[pulumi.Input[str]] = None,
                 sso_attribute_value: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure user groups.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.user.Group("trname",
            company="optional",
            email="enable",
            expire=14400,
            expire_type="immediately",
            group_type="firewall",
            max_accounts=0,
            members=[fortios.user.GroupMemberArgs(
                name="guest",
            )],
            mobile_phone="disable",
            multiple_guest_add="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        User Group can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/group:Group labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/group:Group labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_concurrent_override: Enable/disable overriding the global number of concurrent authentication sessions for this user group. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_concurrent_value: Maximum number of concurrent authenticated connections per user (0 - 100).
        :param pulumi.Input[int] authtimeout: Authentication timeout in minutes for this user group. 0 to use the global user setting auth-timeout.
        :param pulumi.Input[str] company: Set the action for the company guest user field. Valid values: `optional`, `mandatory`, `disabled`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email: Enable/disable the guest user email address field. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] expire: Time in seconds before guest user accounts expire. (1 - 31536000 sec)
        :param pulumi.Input[str] expire_type: Determine when the expiration countdown begins. Valid values: `immediately`, `first-successful-login`.
        :param pulumi.Input[int] fosid: Group ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_type: Set the group to be for firewall authentication, FSSO, RSSO, or guest users. Valid values: `firewall`, `fsso-service`, `rsso`, `guest`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupGuestArgs']]]] guests: Guest User. The structure of `guest` block is documented below.
        :param pulumi.Input[str] http_digest_realm: Realm attribute for MD5-digest authentication.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupMatchArgs']]]] matches: Group matches. The structure of `match` block is documented below.
        :param pulumi.Input[int] max_accounts: Maximum number of guest accounts that can be created for this group (0 means unlimited).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupMemberArgs']]]] members: Names of users, peers, LDAP severs, or RADIUS servers to add to the user group. The structure of `member` block is documented below.
        :param pulumi.Input[str] mobile_phone: Enable/disable the guest user mobile phone number field. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] multiple_guest_add: Enable/disable addition of multiple guests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] name: Group name.
        :param pulumi.Input[str] password: Guest user password type. Valid values: `auto-generate`, `specify`, `disable`.
        :param pulumi.Input[str] sms_custom_server: SMS server.
        :param pulumi.Input[str] sms_server: Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] sponsor: Set the action for the sponsor guest user field. Valid values: `optional`, `mandatory`, `disabled`.
        :param pulumi.Input[str] sso_attribute_value: Name of the RADIUS user group that this local user group represents.
        :param pulumi.Input[str] user_id: Guest user ID type. Valid values: `email`, `auto-generate`, `specify`.
        :param pulumi.Input[str] user_name: Enable/disable the guest user name entry. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[GroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure user groups.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.user.Group("trname",
            company="optional",
            email="enable",
            expire=14400,
            expire_type="immediately",
            group_type="firewall",
            max_accounts=0,
            members=[fortios.user.GroupMemberArgs(
                name="guest",
            )],
            mobile_phone="disable",
            multiple_guest_add="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        User Group can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/group:Group labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/group:Group labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param GroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_concurrent_override: Optional[pulumi.Input[str]] = None,
                 auth_concurrent_value: Optional[pulumi.Input[int]] = None,
                 authtimeout: Optional[pulumi.Input[int]] = None,
                 company: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 expire: Optional[pulumi.Input[int]] = None,
                 expire_type: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 guests: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupGuestArgs']]]]] = None,
                 http_digest_realm: Optional[pulumi.Input[str]] = None,
                 matches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupMatchArgs']]]]] = None,
                 max_accounts: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupMemberArgs']]]]] = None,
                 mobile_phone: Optional[pulumi.Input[str]] = None,
                 multiple_guest_add: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 sponsor: Optional[pulumi.Input[str]] = None,
                 sso_attribute_value: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupArgs.__new__(GroupArgs)

            __props__.__dict__["auth_concurrent_override"] = auth_concurrent_override
            __props__.__dict__["auth_concurrent_value"] = auth_concurrent_value
            __props__.__dict__["authtimeout"] = authtimeout
            __props__.__dict__["company"] = company
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["email"] = email
            __props__.__dict__["expire"] = expire
            __props__.__dict__["expire_type"] = expire_type
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["group_type"] = group_type
            __props__.__dict__["guests"] = guests
            __props__.__dict__["http_digest_realm"] = http_digest_realm
            __props__.__dict__["matches"] = matches
            __props__.__dict__["max_accounts"] = max_accounts
            __props__.__dict__["members"] = members
            __props__.__dict__["mobile_phone"] = mobile_phone
            __props__.__dict__["multiple_guest_add"] = multiple_guest_add
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = password
            __props__.__dict__["sms_custom_server"] = sms_custom_server
            __props__.__dict__["sms_server"] = sms_server
            __props__.__dict__["sponsor"] = sponsor
            __props__.__dict__["sso_attribute_value"] = sso_attribute_value
            __props__.__dict__["user_id"] = user_id
            __props__.__dict__["user_name"] = user_name
            __props__.__dict__["vdomparam"] = vdomparam
        super(Group, __self__).__init__(
            'fortios:user/group:Group',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_concurrent_override: Optional[pulumi.Input[str]] = None,
            auth_concurrent_value: Optional[pulumi.Input[int]] = None,
            authtimeout: Optional[pulumi.Input[int]] = None,
            company: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            email: Optional[pulumi.Input[str]] = None,
            expire: Optional[pulumi.Input[int]] = None,
            expire_type: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            group_type: Optional[pulumi.Input[str]] = None,
            guests: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupGuestArgs']]]]] = None,
            http_digest_realm: Optional[pulumi.Input[str]] = None,
            matches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupMatchArgs']]]]] = None,
            max_accounts: Optional[pulumi.Input[int]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupMemberArgs']]]]] = None,
            mobile_phone: Optional[pulumi.Input[str]] = None,
            multiple_guest_add: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            sms_custom_server: Optional[pulumi.Input[str]] = None,
            sms_server: Optional[pulumi.Input[str]] = None,
            sponsor: Optional[pulumi.Input[str]] = None,
            sso_attribute_value: Optional[pulumi.Input[str]] = None,
            user_id: Optional[pulumi.Input[str]] = None,
            user_name: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Group':
        """
        Get an existing Group resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_concurrent_override: Enable/disable overriding the global number of concurrent authentication sessions for this user group. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_concurrent_value: Maximum number of concurrent authenticated connections per user (0 - 100).
        :param pulumi.Input[int] authtimeout: Authentication timeout in minutes for this user group. 0 to use the global user setting auth-timeout.
        :param pulumi.Input[str] company: Set the action for the company guest user field. Valid values: `optional`, `mandatory`, `disabled`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] email: Enable/disable the guest user email address field. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] expire: Time in seconds before guest user accounts expire. (1 - 31536000 sec)
        :param pulumi.Input[str] expire_type: Determine when the expiration countdown begins. Valid values: `immediately`, `first-successful-login`.
        :param pulumi.Input[int] fosid: Group ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] group_type: Set the group to be for firewall authentication, FSSO, RSSO, or guest users. Valid values: `firewall`, `fsso-service`, `rsso`, `guest`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupGuestArgs']]]] guests: Guest User. The structure of `guest` block is documented below.
        :param pulumi.Input[str] http_digest_realm: Realm attribute for MD5-digest authentication.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupMatchArgs']]]] matches: Group matches. The structure of `match` block is documented below.
        :param pulumi.Input[int] max_accounts: Maximum number of guest accounts that can be created for this group (0 means unlimited).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GroupMemberArgs']]]] members: Names of users, peers, LDAP severs, or RADIUS servers to add to the user group. The structure of `member` block is documented below.
        :param pulumi.Input[str] mobile_phone: Enable/disable the guest user mobile phone number field. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] multiple_guest_add: Enable/disable addition of multiple guests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] name: Group name.
        :param pulumi.Input[str] password: Guest user password type. Valid values: `auto-generate`, `specify`, `disable`.
        :param pulumi.Input[str] sms_custom_server: SMS server.
        :param pulumi.Input[str] sms_server: Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] sponsor: Set the action for the sponsor guest user field. Valid values: `optional`, `mandatory`, `disabled`.
        :param pulumi.Input[str] sso_attribute_value: Name of the RADIUS user group that this local user group represents.
        :param pulumi.Input[str] user_id: Guest user ID type. Valid values: `email`, `auto-generate`, `specify`.
        :param pulumi.Input[str] user_name: Enable/disable the guest user name entry. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupState.__new__(_GroupState)

        __props__.__dict__["auth_concurrent_override"] = auth_concurrent_override
        __props__.__dict__["auth_concurrent_value"] = auth_concurrent_value
        __props__.__dict__["authtimeout"] = authtimeout
        __props__.__dict__["company"] = company
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["email"] = email
        __props__.__dict__["expire"] = expire
        __props__.__dict__["expire_type"] = expire_type
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["group_type"] = group_type
        __props__.__dict__["guests"] = guests
        __props__.__dict__["http_digest_realm"] = http_digest_realm
        __props__.__dict__["matches"] = matches
        __props__.__dict__["max_accounts"] = max_accounts
        __props__.__dict__["members"] = members
        __props__.__dict__["mobile_phone"] = mobile_phone
        __props__.__dict__["multiple_guest_add"] = multiple_guest_add
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["sms_custom_server"] = sms_custom_server
        __props__.__dict__["sms_server"] = sms_server
        __props__.__dict__["sponsor"] = sponsor
        __props__.__dict__["sso_attribute_value"] = sso_attribute_value
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["user_name"] = user_name
        __props__.__dict__["vdomparam"] = vdomparam
        return Group(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authConcurrentOverride")
    def auth_concurrent_override(self) -> pulumi.Output[str]:
        """
        Enable/disable overriding the global number of concurrent authentication sessions for this user group. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_concurrent_override")

    @property
    @pulumi.getter(name="authConcurrentValue")
    def auth_concurrent_value(self) -> pulumi.Output[int]:
        """
        Maximum number of concurrent authenticated connections per user (0 - 100).
        """
        return pulumi.get(self, "auth_concurrent_value")

    @property
    @pulumi.getter
    def authtimeout(self) -> pulumi.Output[int]:
        """
        Authentication timeout in minutes for this user group. 0 to use the global user setting auth-timeout.
        """
        return pulumi.get(self, "authtimeout")

    @property
    @pulumi.getter
    def company(self) -> pulumi.Output[str]:
        """
        Set the action for the company guest user field. Valid values: `optional`, `mandatory`, `disabled`.
        """
        return pulumi.get(self, "company")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        Enable/disable the guest user email address field. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def expire(self) -> pulumi.Output[int]:
        """
        Time in seconds before guest user accounts expire. (1 - 31536000 sec)
        """
        return pulumi.get(self, "expire")

    @property
    @pulumi.getter(name="expireType")
    def expire_type(self) -> pulumi.Output[str]:
        """
        Determine when the expiration countdown begins. Valid values: `immediately`, `first-successful-login`.
        """
        return pulumi.get(self, "expire_type")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        Group ID.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Output[str]:
        """
        Set the group to be for firewall authentication, FSSO, RSSO, or guest users. Valid values: `firewall`, `fsso-service`, `rsso`, `guest`.
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def guests(self) -> pulumi.Output[Optional[Sequence['outputs.GroupGuest']]]:
        """
        Guest User. The structure of `guest` block is documented below.
        """
        return pulumi.get(self, "guests")

    @property
    @pulumi.getter(name="httpDigestRealm")
    def http_digest_realm(self) -> pulumi.Output[str]:
        """
        Realm attribute for MD5-digest authentication.
        """
        return pulumi.get(self, "http_digest_realm")

    @property
    @pulumi.getter
    def matches(self) -> pulumi.Output[Optional[Sequence['outputs.GroupMatch']]]:
        """
        Group matches. The structure of `match` block is documented below.
        """
        return pulumi.get(self, "matches")

    @property
    @pulumi.getter(name="maxAccounts")
    def max_accounts(self) -> pulumi.Output[int]:
        """
        Maximum number of guest accounts that can be created for this group (0 means unlimited).
        """
        return pulumi.get(self, "max_accounts")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Optional[Sequence['outputs.GroupMember']]]:
        """
        Names of users, peers, LDAP severs, or RADIUS servers to add to the user group. The structure of `member` block is documented below.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="mobilePhone")
    def mobile_phone(self) -> pulumi.Output[str]:
        """
        Enable/disable the guest user mobile phone number field. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "mobile_phone")

    @property
    @pulumi.getter(name="multipleGuestAdd")
    def multiple_guest_add(self) -> pulumi.Output[str]:
        """
        Enable/disable addition of multiple guests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "multiple_guest_add")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Guest user password type. Valid values: `auto-generate`, `specify`, `disable`.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="smsCustomServer")
    def sms_custom_server(self) -> pulumi.Output[str]:
        """
        SMS server.
        """
        return pulumi.get(self, "sms_custom_server")

    @property
    @pulumi.getter(name="smsServer")
    def sms_server(self) -> pulumi.Output[str]:
        """
        Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
        """
        return pulumi.get(self, "sms_server")

    @property
    @pulumi.getter
    def sponsor(self) -> pulumi.Output[str]:
        """
        Set the action for the sponsor guest user field. Valid values: `optional`, `mandatory`, `disabled`.
        """
        return pulumi.get(self, "sponsor")

    @property
    @pulumi.getter(name="ssoAttributeValue")
    def sso_attribute_value(self) -> pulumi.Output[str]:
        """
        Name of the RADIUS user group that this local user group represents.
        """
        return pulumi.get(self, "sso_attribute_value")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[str]:
        """
        Guest user ID type. Valid values: `email`, `auto-generate`, `specify`.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[str]:
        """
        Enable/disable the guest user name entry. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

