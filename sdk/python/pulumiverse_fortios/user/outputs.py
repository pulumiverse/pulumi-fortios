# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DeviceTagging',
    'DeviceTaggingTag',
    'DeviceaccesslistDeviceList',
    'DevicegroupMember',
    'DevicegroupTagging',
    'DevicegroupTaggingTag',
    'DomaincontrollerExtraServer',
    'ExchangeKdcIp',
    'FssopollingAdgrp',
    'GroupGuest',
    'GroupMatch',
    'GroupMember',
    'NacpolicySeverity',
    'NacpolicySwitchGroup',
    'NacpolicySwitchScope',
    'PeergrpMember',
    'QuarantineTarget',
    'QuarantineTargetMac',
    'RadiusAccountingServer',
    'RadiusClass',
    'SecurityexemptlistRule',
    'SecurityexemptlistRuleDevice',
    'SecurityexemptlistRuleDstaddr',
    'SecurityexemptlistRuleService',
    'SecurityexemptlistRuleSrcaddr',
    'SettingAuthPort',
]

@pulumi.output_type
class DeviceTagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.DeviceTaggingTag']] = None):
        """
        :param str category: Tag category.
        :param str name: Tagging entry name.
        :param Sequence['DeviceTaggingTagArgs'] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Tagging entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.DeviceTaggingTag']]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class DeviceTaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DeviceaccesslistDeviceList(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 device: Optional[str] = None,
                 id: Optional[int] = None):
        """
        :param str action: Allow or block device. Valid values: `accept`, `deny`.
        :param str device: Firewall device or device group.
        :param int id: Entry ID.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Allow or block device. Valid values: `accept`, `deny`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        Firewall device or device group.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class DevicegroupMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Device name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Device name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DevicegroupTagging(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 name: Optional[str] = None,
                 tags: Optional[Sequence['outputs.DevicegroupTaggingTag']] = None):
        """
        :param str category: Tag category.
        :param str name: Tagging entry name.
        :param Sequence['DevicegroupTaggingTagArgs'] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Tagging entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.DevicegroupTaggingTag']]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class DevicegroupTaggingTag(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DomaincontrollerExtraServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "sourceIpAddress":
            suggest = "source_ip_address"
        elif key == "sourcePort":
            suggest = "source_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DomaincontrollerExtraServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DomaincontrollerExtraServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DomaincontrollerExtraServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 ip_address: Optional[str] = None,
                 port: Optional[int] = None,
                 source_ip_address: Optional[str] = None,
                 source_port: Optional[int] = None):
        """
        :param int id: Server ID.
        :param str ip_address: Domain controller IP address.
        :param int port: Port to be used for communication with the domain controller (default = 445).
        :param str source_ip_address: FortiGate IPv4 address to be used for communication with the domain controller.
        :param int source_port: Source port to be used for communication with the domain controller.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if source_ip_address is not None:
            pulumi.set(__self__, "source_ip_address", source_ip_address)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Server ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        Domain controller IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port to be used for communication with the domain controller (default = 445).
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="sourceIpAddress")
    def source_ip_address(self) -> Optional[str]:
        """
        FortiGate IPv4 address to be used for communication with the domain controller.
        """
        return pulumi.get(self, "source_ip_address")

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[int]:
        """
        Source port to be used for communication with the domain controller.
        """
        return pulumi.get(self, "source_port")


@pulumi.output_type
class ExchangeKdcIp(dict):
    def __init__(__self__, *,
                 ipv4: Optional[str] = None):
        """
        :param str ipv4: KDC IPv4 addresses for Kerberos authentication.
        """
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[str]:
        """
        KDC IPv4 addresses for Kerberos authentication.
        """
        return pulumi.get(self, "ipv4")


@pulumi.output_type
class FssopollingAdgrp(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GroupGuest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mobilePhone":
            suggest = "mobile_phone"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupGuest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupGuest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupGuest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 company: Optional[str] = None,
                 email: Optional[str] = None,
                 expiration: Optional[str] = None,
                 id: Optional[int] = None,
                 mobile_phone: Optional[str] = None,
                 name: Optional[str] = None,
                 password: Optional[str] = None,
                 sponsor: Optional[str] = None,
                 user_id: Optional[str] = None):
        """
        :param str comment: Comment.
        :param str company: Set the action for the company guest user field.
        :param str email: Email.
        :param str expiration: Expire time.
        :param int id: Guest ID.
        :param str mobile_phone: Mobile phone.
        :param str name: Guest name.
        :param str password: Guest password.
        :param str sponsor: Set the action for the sponsor guest user field.
        :param str user_id: Guest ID.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if company is not None:
            pulumi.set(__self__, "company", company)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mobile_phone is not None:
            pulumi.set(__self__, "mobile_phone", mobile_phone)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if sponsor is not None:
            pulumi.set(__self__, "sponsor", sponsor)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def company(self) -> Optional[str]:
        """
        Set the action for the company guest user field.
        """
        return pulumi.get(self, "company")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def expiration(self) -> Optional[str]:
        """
        Expire time.
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Guest ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mobilePhone")
    def mobile_phone(self) -> Optional[str]:
        """
        Mobile phone.
        """
        return pulumi.get(self, "mobile_phone")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Guest name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Guest password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def sponsor(self) -> Optional[str]:
        """
        Set the action for the sponsor guest user field.
        """
        return pulumi.get(self, "sponsor")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[str]:
        """
        Guest ID.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GroupMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "serverName":
            suggest = "server_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: Optional[str] = None,
                 id: Optional[int] = None,
                 server_name: Optional[str] = None):
        """
        :param str group_name: Name of matching group on remote auththentication server.
        :param int id: ID.
        :param str server_name: Name of remote auth server.
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        """
        Name of matching group on remote auththentication server.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        """
        Name of remote auth server.
        """
        return pulumi.get(self, "server_name")


@pulumi.output_type
class GroupMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Group member name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Group member name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class NacpolicySeverity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "severityNum":
            suggest = "severity_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NacpolicySeverity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NacpolicySeverity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NacpolicySeverity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 severity_num: Optional[int] = None):
        """
        :param int severity_num: Enter multiple severity levels, where 0 = Info, 1 = Low, ..., 4 = Critical
        """
        if severity_num is not None:
            pulumi.set(__self__, "severity_num", severity_num)

    @property
    @pulumi.getter(name="severityNum")
    def severity_num(self) -> Optional[int]:
        """
        Enter multiple severity levels, where 0 = Info, 1 = Low, ..., 4 = Critical
        """
        return pulumi.get(self, "severity_num")


@pulumi.output_type
class NacpolicySwitchGroup(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Managed FortiSwitch group name from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Managed FortiSwitch group name from available options.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class NacpolicySwitchScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "switchId":
            suggest = "switch_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NacpolicySwitchScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NacpolicySwitchScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NacpolicySwitchScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch_id: Optional[str] = None):
        """
        :param str switch_id: Managed FortiSwitch name from available options.
        """
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[str]:
        """
        Managed FortiSwitch name from available options.
        """
        return pulumi.get(self, "switch_id")


@pulumi.output_type
class PeergrpMember(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Peer group member name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Peer group member name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class QuarantineTarget(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 entry: Optional[str] = None,
                 macs: Optional[Sequence['outputs.QuarantineTargetMac']] = None):
        """
        :param str description: Description for the quarantine entry.
        :param str entry: Quarantine entry name.
        :param Sequence['QuarantineTargetMacArgs'] macs: Quarantine MACs. The structure of `macs` block is documented below.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entry is not None:
            pulumi.set(__self__, "entry", entry)
        if macs is not None:
            pulumi.set(__self__, "macs", macs)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description for the quarantine entry.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def entry(self) -> Optional[str]:
        """
        Quarantine entry name.
        """
        return pulumi.get(self, "entry")

    @property
    @pulumi.getter
    def macs(self) -> Optional[Sequence['outputs.QuarantineTargetMac']]:
        """
        Quarantine MACs. The structure of `macs` block is documented below.
        """
        return pulumi.get(self, "macs")


@pulumi.output_type
class QuarantineTargetMac(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entryId":
            suggest = "entry_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuarantineTargetMac. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuarantineTargetMac.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuarantineTargetMac.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 drop: Optional[str] = None,
                 entry_id: Optional[int] = None,
                 mac: Optional[str] = None,
                 parent: Optional[str] = None):
        """
        :param str description: Description for the quarantine MAC.
        :param str drop: Enable/Disable dropping of quarantined device traffic Valid values: `disable`, `enable`.
        :param int entry_id: FSW entry id for the quarantine MAC.
        :param str mac: Quarantine MAC.
        :param str parent: Parent entry name.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)
        if entry_id is not None:
            pulumi.set(__self__, "entry_id", entry_id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description for the quarantine MAC.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def drop(self) -> Optional[str]:
        """
        Enable/Disable dropping of quarantined device traffic Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "drop")

    @property
    @pulumi.getter(name="entryId")
    def entry_id(self) -> Optional[int]:
        """
        FSW entry id for the quarantine MAC.
        """
        return pulumi.get(self, "entry_id")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        """
        Quarantine MAC.
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        """
        Parent entry name.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class RadiusAccountingServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceSelectMethod":
            suggest = "interface_select_method"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RadiusAccountingServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RadiusAccountingServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RadiusAccountingServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 interface: Optional[str] = None,
                 interface_select_method: Optional[str] = None,
                 port: Optional[int] = None,
                 secret: Optional[str] = None,
                 server: Optional[str] = None,
                 source_ip: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param int id: ID (0 - 4294967295).
        :param str interface: Specify outgoing interface to reach server.
        :param str interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param int port: RADIUS accounting port number.
        :param str secret: Secret key.
        :param str server: {<name_str|ip_str>} Server CN domain name or IP.
        :param str source_ip: Source IP address for communications to the RADIUS server.
        :param str status: Status. Valid values: `enable`, `disable`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID (0 - 4294967295).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> Optional[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        RADIUS accounting port number.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        Secret key.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        {<name_str|ip_str>} Server CN domain name or IP.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        """
        Source IP address for communications to the RADIUS server.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class RadiusClass(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Class name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Class name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SecurityexemptlistRule(dict):
    def __init__(__self__, *,
                 devices: Optional[Sequence['outputs.SecurityexemptlistRuleDevice']] = None,
                 dstaddrs: Optional[Sequence['outputs.SecurityexemptlistRuleDstaddr']] = None,
                 id: Optional[int] = None,
                 services: Optional[Sequence['outputs.SecurityexemptlistRuleService']] = None,
                 srcaddrs: Optional[Sequence['outputs.SecurityexemptlistRuleSrcaddr']] = None):
        """
        :param Sequence['SecurityexemptlistRuleDeviceArgs'] devices: Devices or device groups. The structure of `devices` block is documented below.
        :param Sequence['SecurityexemptlistRuleDstaddrArgs'] dstaddrs: Destination addresses or address groups. The structure of `dstaddr` block is documented below.
        :param int id: ID.
        :param Sequence['SecurityexemptlistRuleServiceArgs'] services: Destination services. The structure of `service` block is documented below.
        :param Sequence['SecurityexemptlistRuleSrcaddrArgs'] srcaddrs: Source addresses or address groups. The structure of `srcaddr` block is documented below.
        """
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.SecurityexemptlistRuleDevice']]:
        """
        Devices or device groups. The structure of `devices` block is documented below.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[Sequence['outputs.SecurityexemptlistRuleDstaddr']]:
        """
        Destination addresses or address groups. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence['outputs.SecurityexemptlistRuleService']]:
        """
        Destination services. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[Sequence['outputs.SecurityexemptlistRuleSrcaddr']]:
        """
        Source addresses or address groups. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")


@pulumi.output_type
class SecurityexemptlistRuleDevice(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Device or group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Device or group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SecurityexemptlistRuleDstaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address or group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address or group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SecurityexemptlistRuleService(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SecurityexemptlistRuleSrcaddr(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Address or group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Address or group name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SettingAuthPort(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 port: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param int id: ID.
        :param int port: Non-standard port for firewall user authentication.
        :param str type: Service type. Valid values: `http`, `https`, `ftp`, `telnet`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Non-standard port for firewall user authentication.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Service type. Valid values: `http`, `https`, `ftp`, `telnet`.
        """
        return pulumi.get(self, "type")


