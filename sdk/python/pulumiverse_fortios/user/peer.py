# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PeerArgs', 'Peer']

@pulumi.input_type
class PeerArgs:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input[str]] = None,
                 cn: Optional[pulumi.Input[str]] = None,
                 cn_type: Optional[pulumi.Input[str]] = None,
                 ldap_mode: Optional[pulumi.Input[str]] = None,
                 ldap_password: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 ldap_username: Optional[pulumi.Input[str]] = None,
                 mandatory_ca_verify: Optional[pulumi.Input[str]] = None,
                 mfa_mode: Optional[pulumi.Input[str]] = None,
                 mfa_password: Optional[pulumi.Input[str]] = None,
                 mfa_server: Optional[pulumi.Input[str]] = None,
                 mfa_username: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ocsp_override_server: Optional[pulumi.Input[str]] = None,
                 passwd: Optional[pulumi.Input[str]] = None,
                 subject: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Peer resource.
        :param pulumi.Input[str] ca: Name of the CA certificate as returned by the execute vpn certificate ca list command.
        :param pulumi.Input[str] cn: Peer certificate common name.
        :param pulumi.Input[str] cn_type: Peer certificate common name type. Valid values: `string`, `email`, `FQDN`, `ipv4`, `ipv6`.
        :param pulumi.Input[str] ldap_mode: Mode for LDAP peer authentication. Valid values: `password`, `principal-name`.
        :param pulumi.Input[str] ldap_password: Password for LDAP server bind.
        :param pulumi.Input[str] ldap_server: Name of an LDAP server defined under the user ldap command. Performs client access rights check.
        :param pulumi.Input[str] ldap_username: Username for LDAP server bind.
        :param pulumi.Input[str] mandatory_ca_verify: Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certificate as valid. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mfa_mode: MFA mode for remote peer authentication/authorization. Valid values: `none`, `password`, `subject-identity`.
        :param pulumi.Input[str] mfa_password: Unified password for remote authentication. This field may be left empty when RADIUS authentication is used, in which case the FortiGate will use the RADIUS username as a password.
        :param pulumi.Input[str] mfa_server: Name of a remote authenticator. Performs client access right check.
        :param pulumi.Input[str] mfa_username: Unified username for remote authentication.
        :param pulumi.Input[str] name: Peer name.
        :param pulumi.Input[str] ocsp_override_server: Online Certificate Status Protocol (OCSP) server for certificate retrieval.
        :param pulumi.Input[str] passwd: Peer's password used for two-factor authentication.
        :param pulumi.Input[str] subject: Peer certificate name constraints.
        :param pulumi.Input[str] two_factor: Enable/disable two-factor authentication, applying certificate and password-based authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if cn is not None:
            pulumi.set(__self__, "cn", cn)
        if cn_type is not None:
            pulumi.set(__self__, "cn_type", cn_type)
        if ldap_mode is not None:
            pulumi.set(__self__, "ldap_mode", ldap_mode)
        if ldap_password is not None:
            pulumi.set(__self__, "ldap_password", ldap_password)
        if ldap_server is not None:
            pulumi.set(__self__, "ldap_server", ldap_server)
        if ldap_username is not None:
            pulumi.set(__self__, "ldap_username", ldap_username)
        if mandatory_ca_verify is not None:
            pulumi.set(__self__, "mandatory_ca_verify", mandatory_ca_verify)
        if mfa_mode is not None:
            pulumi.set(__self__, "mfa_mode", mfa_mode)
        if mfa_password is not None:
            pulumi.set(__self__, "mfa_password", mfa_password)
        if mfa_server is not None:
            pulumi.set(__self__, "mfa_server", mfa_server)
        if mfa_username is not None:
            pulumi.set(__self__, "mfa_username", mfa_username)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocsp_override_server is not None:
            pulumi.set(__self__, "ocsp_override_server", ocsp_override_server)
        if passwd is not None:
            pulumi.set(__self__, "passwd", passwd)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if two_factor is not None:
            pulumi.set(__self__, "two_factor", two_factor)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the CA certificate as returned by the execute vpn certificate ca list command.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter
    def cn(self) -> Optional[pulumi.Input[str]]:
        """
        Peer certificate common name.
        """
        return pulumi.get(self, "cn")

    @cn.setter
    def cn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cn", value)

    @property
    @pulumi.getter(name="cnType")
    def cn_type(self) -> Optional[pulumi.Input[str]]:
        """
        Peer certificate common name type. Valid values: `string`, `email`, `FQDN`, `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "cn_type")

    @cn_type.setter
    def cn_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cn_type", value)

    @property
    @pulumi.getter(name="ldapMode")
    def ldap_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode for LDAP peer authentication. Valid values: `password`, `principal-name`.
        """
        return pulumi.get(self, "ldap_mode")

    @ldap_mode.setter
    def ldap_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_mode", value)

    @property
    @pulumi.getter(name="ldapPassword")
    def ldap_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for LDAP server bind.
        """
        return pulumi.get(self, "ldap_password")

    @ldap_password.setter
    def ldap_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_password", value)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an LDAP server defined under the user ldap command. Performs client access rights check.
        """
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter(name="ldapUsername")
    def ldap_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for LDAP server bind.
        """
        return pulumi.get(self, "ldap_username")

    @ldap_username.setter
    def ldap_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_username", value)

    @property
    @pulumi.getter(name="mandatoryCaVerify")
    def mandatory_ca_verify(self) -> Optional[pulumi.Input[str]]:
        """
        Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certificate as valid. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mandatory_ca_verify")

    @mandatory_ca_verify.setter
    def mandatory_ca_verify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mandatory_ca_verify", value)

    @property
    @pulumi.getter(name="mfaMode")
    def mfa_mode(self) -> Optional[pulumi.Input[str]]:
        """
        MFA mode for remote peer authentication/authorization. Valid values: `none`, `password`, `subject-identity`.
        """
        return pulumi.get(self, "mfa_mode")

    @mfa_mode.setter
    def mfa_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mfa_mode", value)

    @property
    @pulumi.getter(name="mfaPassword")
    def mfa_password(self) -> Optional[pulumi.Input[str]]:
        """
        Unified password for remote authentication. This field may be left empty when RADIUS authentication is used, in which case the FortiGate will use the RADIUS username as a password.
        """
        return pulumi.get(self, "mfa_password")

    @mfa_password.setter
    def mfa_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mfa_password", value)

    @property
    @pulumi.getter(name="mfaServer")
    def mfa_server(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a remote authenticator. Performs client access right check.
        """
        return pulumi.get(self, "mfa_server")

    @mfa_server.setter
    def mfa_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mfa_server", value)

    @property
    @pulumi.getter(name="mfaUsername")
    def mfa_username(self) -> Optional[pulumi.Input[str]]:
        """
        Unified username for remote authentication.
        """
        return pulumi.get(self, "mfa_username")

    @mfa_username.setter
    def mfa_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mfa_username", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Peer name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ocspOverrideServer")
    def ocsp_override_server(self) -> Optional[pulumi.Input[str]]:
        """
        Online Certificate Status Protocol (OCSP) server for certificate retrieval.
        """
        return pulumi.get(self, "ocsp_override_server")

    @ocsp_override_server.setter
    def ocsp_override_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_override_server", value)

    @property
    @pulumi.getter
    def passwd(self) -> Optional[pulumi.Input[str]]:
        """
        Peer's password used for two-factor authentication.
        """
        return pulumi.get(self, "passwd")

    @passwd.setter
    def passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[str]]:
        """
        Peer certificate name constraints.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable two-factor authentication, applying certificate and password-based authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "two_factor")

    @two_factor.setter
    def two_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _PeerState:
    def __init__(__self__, *,
                 ca: Optional[pulumi.Input[str]] = None,
                 cn: Optional[pulumi.Input[str]] = None,
                 cn_type: Optional[pulumi.Input[str]] = None,
                 ldap_mode: Optional[pulumi.Input[str]] = None,
                 ldap_password: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 ldap_username: Optional[pulumi.Input[str]] = None,
                 mandatory_ca_verify: Optional[pulumi.Input[str]] = None,
                 mfa_mode: Optional[pulumi.Input[str]] = None,
                 mfa_password: Optional[pulumi.Input[str]] = None,
                 mfa_server: Optional[pulumi.Input[str]] = None,
                 mfa_username: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ocsp_override_server: Optional[pulumi.Input[str]] = None,
                 passwd: Optional[pulumi.Input[str]] = None,
                 subject: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Peer resources.
        :param pulumi.Input[str] ca: Name of the CA certificate as returned by the execute vpn certificate ca list command.
        :param pulumi.Input[str] cn: Peer certificate common name.
        :param pulumi.Input[str] cn_type: Peer certificate common name type. Valid values: `string`, `email`, `FQDN`, `ipv4`, `ipv6`.
        :param pulumi.Input[str] ldap_mode: Mode for LDAP peer authentication. Valid values: `password`, `principal-name`.
        :param pulumi.Input[str] ldap_password: Password for LDAP server bind.
        :param pulumi.Input[str] ldap_server: Name of an LDAP server defined under the user ldap command. Performs client access rights check.
        :param pulumi.Input[str] ldap_username: Username for LDAP server bind.
        :param pulumi.Input[str] mandatory_ca_verify: Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certificate as valid. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mfa_mode: MFA mode for remote peer authentication/authorization. Valid values: `none`, `password`, `subject-identity`.
        :param pulumi.Input[str] mfa_password: Unified password for remote authentication. This field may be left empty when RADIUS authentication is used, in which case the FortiGate will use the RADIUS username as a password.
        :param pulumi.Input[str] mfa_server: Name of a remote authenticator. Performs client access right check.
        :param pulumi.Input[str] mfa_username: Unified username for remote authentication.
        :param pulumi.Input[str] name: Peer name.
        :param pulumi.Input[str] ocsp_override_server: Online Certificate Status Protocol (OCSP) server for certificate retrieval.
        :param pulumi.Input[str] passwd: Peer's password used for two-factor authentication.
        :param pulumi.Input[str] subject: Peer certificate name constraints.
        :param pulumi.Input[str] two_factor: Enable/disable two-factor authentication, applying certificate and password-based authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if cn is not None:
            pulumi.set(__self__, "cn", cn)
        if cn_type is not None:
            pulumi.set(__self__, "cn_type", cn_type)
        if ldap_mode is not None:
            pulumi.set(__self__, "ldap_mode", ldap_mode)
        if ldap_password is not None:
            pulumi.set(__self__, "ldap_password", ldap_password)
        if ldap_server is not None:
            pulumi.set(__self__, "ldap_server", ldap_server)
        if ldap_username is not None:
            pulumi.set(__self__, "ldap_username", ldap_username)
        if mandatory_ca_verify is not None:
            pulumi.set(__self__, "mandatory_ca_verify", mandatory_ca_verify)
        if mfa_mode is not None:
            pulumi.set(__self__, "mfa_mode", mfa_mode)
        if mfa_password is not None:
            pulumi.set(__self__, "mfa_password", mfa_password)
        if mfa_server is not None:
            pulumi.set(__self__, "mfa_server", mfa_server)
        if mfa_username is not None:
            pulumi.set(__self__, "mfa_username", mfa_username)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocsp_override_server is not None:
            pulumi.set(__self__, "ocsp_override_server", ocsp_override_server)
        if passwd is not None:
            pulumi.set(__self__, "passwd", passwd)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if two_factor is not None:
            pulumi.set(__self__, "two_factor", two_factor)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the CA certificate as returned by the execute vpn certificate ca list command.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter
    def cn(self) -> Optional[pulumi.Input[str]]:
        """
        Peer certificate common name.
        """
        return pulumi.get(self, "cn")

    @cn.setter
    def cn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cn", value)

    @property
    @pulumi.getter(name="cnType")
    def cn_type(self) -> Optional[pulumi.Input[str]]:
        """
        Peer certificate common name type. Valid values: `string`, `email`, `FQDN`, `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "cn_type")

    @cn_type.setter
    def cn_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cn_type", value)

    @property
    @pulumi.getter(name="ldapMode")
    def ldap_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode for LDAP peer authentication. Valid values: `password`, `principal-name`.
        """
        return pulumi.get(self, "ldap_mode")

    @ldap_mode.setter
    def ldap_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_mode", value)

    @property
    @pulumi.getter(name="ldapPassword")
    def ldap_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for LDAP server bind.
        """
        return pulumi.get(self, "ldap_password")

    @ldap_password.setter
    def ldap_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_password", value)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an LDAP server defined under the user ldap command. Performs client access rights check.
        """
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter(name="ldapUsername")
    def ldap_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for LDAP server bind.
        """
        return pulumi.get(self, "ldap_username")

    @ldap_username.setter
    def ldap_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_username", value)

    @property
    @pulumi.getter(name="mandatoryCaVerify")
    def mandatory_ca_verify(self) -> Optional[pulumi.Input[str]]:
        """
        Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certificate as valid. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mandatory_ca_verify")

    @mandatory_ca_verify.setter
    def mandatory_ca_verify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mandatory_ca_verify", value)

    @property
    @pulumi.getter(name="mfaMode")
    def mfa_mode(self) -> Optional[pulumi.Input[str]]:
        """
        MFA mode for remote peer authentication/authorization. Valid values: `none`, `password`, `subject-identity`.
        """
        return pulumi.get(self, "mfa_mode")

    @mfa_mode.setter
    def mfa_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mfa_mode", value)

    @property
    @pulumi.getter(name="mfaPassword")
    def mfa_password(self) -> Optional[pulumi.Input[str]]:
        """
        Unified password for remote authentication. This field may be left empty when RADIUS authentication is used, in which case the FortiGate will use the RADIUS username as a password.
        """
        return pulumi.get(self, "mfa_password")

    @mfa_password.setter
    def mfa_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mfa_password", value)

    @property
    @pulumi.getter(name="mfaServer")
    def mfa_server(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a remote authenticator. Performs client access right check.
        """
        return pulumi.get(self, "mfa_server")

    @mfa_server.setter
    def mfa_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mfa_server", value)

    @property
    @pulumi.getter(name="mfaUsername")
    def mfa_username(self) -> Optional[pulumi.Input[str]]:
        """
        Unified username for remote authentication.
        """
        return pulumi.get(self, "mfa_username")

    @mfa_username.setter
    def mfa_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mfa_username", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Peer name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ocspOverrideServer")
    def ocsp_override_server(self) -> Optional[pulumi.Input[str]]:
        """
        Online Certificate Status Protocol (OCSP) server for certificate retrieval.
        """
        return pulumi.get(self, "ocsp_override_server")

    @ocsp_override_server.setter
    def ocsp_override_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_override_server", value)

    @property
    @pulumi.getter
    def passwd(self) -> Optional[pulumi.Input[str]]:
        """
        Peer's password used for two-factor authentication.
        """
        return pulumi.get(self, "passwd")

    @passwd.setter
    def passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[str]]:
        """
        Peer certificate name constraints.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable two-factor authentication, applying certificate and password-based authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "two_factor")

    @two_factor.setter
    def two_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Peer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca: Optional[pulumi.Input[str]] = None,
                 cn: Optional[pulumi.Input[str]] = None,
                 cn_type: Optional[pulumi.Input[str]] = None,
                 ldap_mode: Optional[pulumi.Input[str]] = None,
                 ldap_password: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 ldap_username: Optional[pulumi.Input[str]] = None,
                 mandatory_ca_verify: Optional[pulumi.Input[str]] = None,
                 mfa_mode: Optional[pulumi.Input[str]] = None,
                 mfa_password: Optional[pulumi.Input[str]] = None,
                 mfa_server: Optional[pulumi.Input[str]] = None,
                 mfa_username: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ocsp_override_server: Optional[pulumi.Input[str]] = None,
                 passwd: Optional[pulumi.Input[str]] = None,
                 subject: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure peer users.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname1 = fortios.user.Peer("trname1",
            ca="EC-ACC",
            cn_type="string",
            ldap_mode="password",
            mandatory_ca_verify="enable",
            two_factor="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        User Peer can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/peer:Peer labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/peer:Peer labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ca: Name of the CA certificate as returned by the execute vpn certificate ca list command.
        :param pulumi.Input[str] cn: Peer certificate common name.
        :param pulumi.Input[str] cn_type: Peer certificate common name type. Valid values: `string`, `email`, `FQDN`, `ipv4`, `ipv6`.
        :param pulumi.Input[str] ldap_mode: Mode for LDAP peer authentication. Valid values: `password`, `principal-name`.
        :param pulumi.Input[str] ldap_password: Password for LDAP server bind.
        :param pulumi.Input[str] ldap_server: Name of an LDAP server defined under the user ldap command. Performs client access rights check.
        :param pulumi.Input[str] ldap_username: Username for LDAP server bind.
        :param pulumi.Input[str] mandatory_ca_verify: Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certificate as valid. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mfa_mode: MFA mode for remote peer authentication/authorization. Valid values: `none`, `password`, `subject-identity`.
        :param pulumi.Input[str] mfa_password: Unified password for remote authentication. This field may be left empty when RADIUS authentication is used, in which case the FortiGate will use the RADIUS username as a password.
        :param pulumi.Input[str] mfa_server: Name of a remote authenticator. Performs client access right check.
        :param pulumi.Input[str] mfa_username: Unified username for remote authentication.
        :param pulumi.Input[str] name: Peer name.
        :param pulumi.Input[str] ocsp_override_server: Online Certificate Status Protocol (OCSP) server for certificate retrieval.
        :param pulumi.Input[str] passwd: Peer's password used for two-factor authentication.
        :param pulumi.Input[str] subject: Peer certificate name constraints.
        :param pulumi.Input[str] two_factor: Enable/disable two-factor authentication, applying certificate and password-based authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PeerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure peer users.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname1 = fortios.user.Peer("trname1",
            ca="EC-ACC",
            cn_type="string",
            ldap_mode="password",
            mandatory_ca_verify="enable",
            two_factor="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        User Peer can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/peer:Peer labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/peer:Peer labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param PeerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PeerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca: Optional[pulumi.Input[str]] = None,
                 cn: Optional[pulumi.Input[str]] = None,
                 cn_type: Optional[pulumi.Input[str]] = None,
                 ldap_mode: Optional[pulumi.Input[str]] = None,
                 ldap_password: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 ldap_username: Optional[pulumi.Input[str]] = None,
                 mandatory_ca_verify: Optional[pulumi.Input[str]] = None,
                 mfa_mode: Optional[pulumi.Input[str]] = None,
                 mfa_password: Optional[pulumi.Input[str]] = None,
                 mfa_server: Optional[pulumi.Input[str]] = None,
                 mfa_username: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ocsp_override_server: Optional[pulumi.Input[str]] = None,
                 passwd: Optional[pulumi.Input[str]] = None,
                 subject: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PeerArgs.__new__(PeerArgs)

            __props__.__dict__["ca"] = ca
            __props__.__dict__["cn"] = cn
            __props__.__dict__["cn_type"] = cn_type
            __props__.__dict__["ldap_mode"] = ldap_mode
            __props__.__dict__["ldap_password"] = None if ldap_password is None else pulumi.Output.secret(ldap_password)
            __props__.__dict__["ldap_server"] = ldap_server
            __props__.__dict__["ldap_username"] = ldap_username
            __props__.__dict__["mandatory_ca_verify"] = mandatory_ca_verify
            __props__.__dict__["mfa_mode"] = mfa_mode
            __props__.__dict__["mfa_password"] = mfa_password
            __props__.__dict__["mfa_server"] = mfa_server
            __props__.__dict__["mfa_username"] = mfa_username
            __props__.__dict__["name"] = name
            __props__.__dict__["ocsp_override_server"] = ocsp_override_server
            __props__.__dict__["passwd"] = None if passwd is None else pulumi.Output.secret(passwd)
            __props__.__dict__["subject"] = subject
            __props__.__dict__["two_factor"] = two_factor
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["ldapPassword", "passwd"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Peer, __self__).__init__(
            'fortios:user/peer:Peer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ca: Optional[pulumi.Input[str]] = None,
            cn: Optional[pulumi.Input[str]] = None,
            cn_type: Optional[pulumi.Input[str]] = None,
            ldap_mode: Optional[pulumi.Input[str]] = None,
            ldap_password: Optional[pulumi.Input[str]] = None,
            ldap_server: Optional[pulumi.Input[str]] = None,
            ldap_username: Optional[pulumi.Input[str]] = None,
            mandatory_ca_verify: Optional[pulumi.Input[str]] = None,
            mfa_mode: Optional[pulumi.Input[str]] = None,
            mfa_password: Optional[pulumi.Input[str]] = None,
            mfa_server: Optional[pulumi.Input[str]] = None,
            mfa_username: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            ocsp_override_server: Optional[pulumi.Input[str]] = None,
            passwd: Optional[pulumi.Input[str]] = None,
            subject: Optional[pulumi.Input[str]] = None,
            two_factor: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Peer':
        """
        Get an existing Peer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ca: Name of the CA certificate as returned by the execute vpn certificate ca list command.
        :param pulumi.Input[str] cn: Peer certificate common name.
        :param pulumi.Input[str] cn_type: Peer certificate common name type. Valid values: `string`, `email`, `FQDN`, `ipv4`, `ipv6`.
        :param pulumi.Input[str] ldap_mode: Mode for LDAP peer authentication. Valid values: `password`, `principal-name`.
        :param pulumi.Input[str] ldap_password: Password for LDAP server bind.
        :param pulumi.Input[str] ldap_server: Name of an LDAP server defined under the user ldap command. Performs client access rights check.
        :param pulumi.Input[str] ldap_username: Username for LDAP server bind.
        :param pulumi.Input[str] mandatory_ca_verify: Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certificate as valid. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mfa_mode: MFA mode for remote peer authentication/authorization. Valid values: `none`, `password`, `subject-identity`.
        :param pulumi.Input[str] mfa_password: Unified password for remote authentication. This field may be left empty when RADIUS authentication is used, in which case the FortiGate will use the RADIUS username as a password.
        :param pulumi.Input[str] mfa_server: Name of a remote authenticator. Performs client access right check.
        :param pulumi.Input[str] mfa_username: Unified username for remote authentication.
        :param pulumi.Input[str] name: Peer name.
        :param pulumi.Input[str] ocsp_override_server: Online Certificate Status Protocol (OCSP) server for certificate retrieval.
        :param pulumi.Input[str] passwd: Peer's password used for two-factor authentication.
        :param pulumi.Input[str] subject: Peer certificate name constraints.
        :param pulumi.Input[str] two_factor: Enable/disable two-factor authentication, applying certificate and password-based authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PeerState.__new__(_PeerState)

        __props__.__dict__["ca"] = ca
        __props__.__dict__["cn"] = cn
        __props__.__dict__["cn_type"] = cn_type
        __props__.__dict__["ldap_mode"] = ldap_mode
        __props__.__dict__["ldap_password"] = ldap_password
        __props__.__dict__["ldap_server"] = ldap_server
        __props__.__dict__["ldap_username"] = ldap_username
        __props__.__dict__["mandatory_ca_verify"] = mandatory_ca_verify
        __props__.__dict__["mfa_mode"] = mfa_mode
        __props__.__dict__["mfa_password"] = mfa_password
        __props__.__dict__["mfa_server"] = mfa_server
        __props__.__dict__["mfa_username"] = mfa_username
        __props__.__dict__["name"] = name
        __props__.__dict__["ocsp_override_server"] = ocsp_override_server
        __props__.__dict__["passwd"] = passwd
        __props__.__dict__["subject"] = subject
        __props__.__dict__["two_factor"] = two_factor
        __props__.__dict__["vdomparam"] = vdomparam
        return Peer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ca(self) -> pulumi.Output[str]:
        """
        Name of the CA certificate as returned by the execute vpn certificate ca list command.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter
    def cn(self) -> pulumi.Output[str]:
        """
        Peer certificate common name.
        """
        return pulumi.get(self, "cn")

    @property
    @pulumi.getter(name="cnType")
    def cn_type(self) -> pulumi.Output[str]:
        """
        Peer certificate common name type. Valid values: `string`, `email`, `FQDN`, `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "cn_type")

    @property
    @pulumi.getter(name="ldapMode")
    def ldap_mode(self) -> pulumi.Output[str]:
        """
        Mode for LDAP peer authentication. Valid values: `password`, `principal-name`.
        """
        return pulumi.get(self, "ldap_mode")

    @property
    @pulumi.getter(name="ldapPassword")
    def ldap_password(self) -> pulumi.Output[Optional[str]]:
        """
        Password for LDAP server bind.
        """
        return pulumi.get(self, "ldap_password")

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> pulumi.Output[str]:
        """
        Name of an LDAP server defined under the user ldap command. Performs client access rights check.
        """
        return pulumi.get(self, "ldap_server")

    @property
    @pulumi.getter(name="ldapUsername")
    def ldap_username(self) -> pulumi.Output[str]:
        """
        Username for LDAP server bind.
        """
        return pulumi.get(self, "ldap_username")

    @property
    @pulumi.getter(name="mandatoryCaVerify")
    def mandatory_ca_verify(self) -> pulumi.Output[str]:
        """
        Determine what happens to the peer if the CA certificate is not installed. Disable to automatically consider the peer certificate as valid. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mandatory_ca_verify")

    @property
    @pulumi.getter(name="mfaMode")
    def mfa_mode(self) -> pulumi.Output[str]:
        """
        MFA mode for remote peer authentication/authorization. Valid values: `none`, `password`, `subject-identity`.
        """
        return pulumi.get(self, "mfa_mode")

    @property
    @pulumi.getter(name="mfaPassword")
    def mfa_password(self) -> pulumi.Output[Optional[str]]:
        """
        Unified password for remote authentication. This field may be left empty when RADIUS authentication is used, in which case the FortiGate will use the RADIUS username as a password.
        """
        return pulumi.get(self, "mfa_password")

    @property
    @pulumi.getter(name="mfaServer")
    def mfa_server(self) -> pulumi.Output[str]:
        """
        Name of a remote authenticator. Performs client access right check.
        """
        return pulumi.get(self, "mfa_server")

    @property
    @pulumi.getter(name="mfaUsername")
    def mfa_username(self) -> pulumi.Output[str]:
        """
        Unified username for remote authentication.
        """
        return pulumi.get(self, "mfa_username")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Peer name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ocspOverrideServer")
    def ocsp_override_server(self) -> pulumi.Output[str]:
        """
        Online Certificate Status Protocol (OCSP) server for certificate retrieval.
        """
        return pulumi.get(self, "ocsp_override_server")

    @property
    @pulumi.getter
    def passwd(self) -> pulumi.Output[Optional[str]]:
        """
        Peer's password used for two-factor authentication.
        """
        return pulumi.get(self, "passwd")

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Output[str]:
        """
        Peer certificate name constraints.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> pulumi.Output[str]:
        """
        Enable/disable two-factor authentication, applying certificate and password-based authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "two_factor")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

