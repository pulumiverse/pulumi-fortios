# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SettingArgs', 'Setting']

@pulumi.input_type
class SettingArgs:
    def __init__(__self__, *,
                 auth_blackout_time: Optional[pulumi.Input[int]] = None,
                 auth_ca_cert: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_http_basic: Optional[pulumi.Input[str]] = None,
                 auth_invalid_max: Optional[pulumi.Input[int]] = None,
                 auth_lockout_duration: Optional[pulumi.Input[int]] = None,
                 auth_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 auth_on_demand: Optional[pulumi.Input[str]] = None,
                 auth_portal_timeout: Optional[pulumi.Input[int]] = None,
                 auth_ports: Optional[pulumi.Input[Sequence[pulumi.Input['SettingAuthPortArgs']]]] = None,
                 auth_secure_http: Optional[pulumi.Input[str]] = None,
                 auth_src_mac: Optional[pulumi.Input[str]] = None,
                 auth_ssl_allow_renegotiation: Optional[pulumi.Input[str]] = None,
                 auth_ssl_max_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_sigalgs: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 auth_timeout_type: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 default_user_password_policy: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 radius_ses_timeout_act: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Setting resource.
        :param pulumi.Input[int] auth_blackout_time: Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
        :param pulumi.Input[str] auth_ca_cert: HTTPS CA certificate for policy authentication.
        :param pulumi.Input[str] auth_cert: HTTPS server certificate for policy authentication.
        :param pulumi.Input[str] auth_http_basic: Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_invalid_max: Maximum number of failed authentication attempts before the user is blocked.
        :param pulumi.Input[int] auth_lockout_duration: Lockout period in seconds after too many login failures.
        :param pulumi.Input[int] auth_lockout_threshold: Maximum number of failed login attempts before login lockout is triggered.
        :param pulumi.Input[str] auth_on_demand: Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
        :param pulumi.Input[int] auth_portal_timeout: Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
        :param pulumi.Input[Sequence[pulumi.Input['SettingAuthPortArgs']]] auth_ports: Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `auth_ports` block is documented below.
        :param pulumi.Input[str] auth_secure_http: Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_src_mac: Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_ssl_allow_renegotiation: Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_ssl_max_proto_version: Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
        :param pulumi.Input[str] auth_ssl_min_proto_version: Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        :param pulumi.Input[str] auth_ssl_sigalgs: Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
        :param pulumi.Input[int] auth_timeout: Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
        :param pulumi.Input[str] auth_timeout_type: Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
        :param pulumi.Input[str] auth_type: Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
        :param pulumi.Input[str] default_user_password_policy: Default password policy to apply to all local users unless otherwise specified, as defined in config user password-policy.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] per_policy_disclaimer: Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] radius_ses_timeout_act: Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if auth_blackout_time is not None:
            pulumi.set(__self__, "auth_blackout_time", auth_blackout_time)
        if auth_ca_cert is not None:
            pulumi.set(__self__, "auth_ca_cert", auth_ca_cert)
        if auth_cert is not None:
            pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_http_basic is not None:
            pulumi.set(__self__, "auth_http_basic", auth_http_basic)
        if auth_invalid_max is not None:
            pulumi.set(__self__, "auth_invalid_max", auth_invalid_max)
        if auth_lockout_duration is not None:
            pulumi.set(__self__, "auth_lockout_duration", auth_lockout_duration)
        if auth_lockout_threshold is not None:
            pulumi.set(__self__, "auth_lockout_threshold", auth_lockout_threshold)
        if auth_on_demand is not None:
            pulumi.set(__self__, "auth_on_demand", auth_on_demand)
        if auth_portal_timeout is not None:
            pulumi.set(__self__, "auth_portal_timeout", auth_portal_timeout)
        if auth_ports is not None:
            pulumi.set(__self__, "auth_ports", auth_ports)
        if auth_secure_http is not None:
            pulumi.set(__self__, "auth_secure_http", auth_secure_http)
        if auth_src_mac is not None:
            pulumi.set(__self__, "auth_src_mac", auth_src_mac)
        if auth_ssl_allow_renegotiation is not None:
            pulumi.set(__self__, "auth_ssl_allow_renegotiation", auth_ssl_allow_renegotiation)
        if auth_ssl_max_proto_version is not None:
            pulumi.set(__self__, "auth_ssl_max_proto_version", auth_ssl_max_proto_version)
        if auth_ssl_min_proto_version is not None:
            pulumi.set(__self__, "auth_ssl_min_proto_version", auth_ssl_min_proto_version)
        if auth_ssl_sigalgs is not None:
            pulumi.set(__self__, "auth_ssl_sigalgs", auth_ssl_sigalgs)
        if auth_timeout is not None:
            pulumi.set(__self__, "auth_timeout", auth_timeout)
        if auth_timeout_type is not None:
            pulumi.set(__self__, "auth_timeout_type", auth_timeout_type)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if default_user_password_policy is not None:
            pulumi.set(__self__, "default_user_password_policy", default_user_password_policy)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if per_policy_disclaimer is not None:
            pulumi.set(__self__, "per_policy_disclaimer", per_policy_disclaimer)
        if radius_ses_timeout_act is not None:
            pulumi.set(__self__, "radius_ses_timeout_act", radius_ses_timeout_act)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="authBlackoutTime")
    def auth_blackout_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
        """
        return pulumi.get(self, "auth_blackout_time")

    @auth_blackout_time.setter
    def auth_blackout_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_blackout_time", value)

    @property
    @pulumi.getter(name="authCaCert")
    def auth_ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        HTTPS CA certificate for policy authentication.
        """
        return pulumi.get(self, "auth_ca_cert")

    @auth_ca_cert.setter
    def auth_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ca_cert", value)

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> Optional[pulumi.Input[str]]:
        """
        HTTPS server certificate for policy authentication.
        """
        return pulumi.get(self, "auth_cert")

    @auth_cert.setter
    def auth_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_cert", value)

    @property
    @pulumi.getter(name="authHttpBasic")
    def auth_http_basic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_http_basic")

    @auth_http_basic.setter
    def auth_http_basic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_http_basic", value)

    @property
    @pulumi.getter(name="authInvalidMax")
    def auth_invalid_max(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of failed authentication attempts before the user is blocked.
        """
        return pulumi.get(self, "auth_invalid_max")

    @auth_invalid_max.setter
    def auth_invalid_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_invalid_max", value)

    @property
    @pulumi.getter(name="authLockoutDuration")
    def auth_lockout_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Lockout period in seconds after too many login failures.
        """
        return pulumi.get(self, "auth_lockout_duration")

    @auth_lockout_duration.setter
    def auth_lockout_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_lockout_duration", value)

    @property
    @pulumi.getter(name="authLockoutThreshold")
    def auth_lockout_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of failed login attempts before login lockout is triggered.
        """
        return pulumi.get(self, "auth_lockout_threshold")

    @auth_lockout_threshold.setter
    def auth_lockout_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_lockout_threshold", value)

    @property
    @pulumi.getter(name="authOnDemand")
    def auth_on_demand(self) -> Optional[pulumi.Input[str]]:
        """
        Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
        """
        return pulumi.get(self, "auth_on_demand")

    @auth_on_demand.setter
    def auth_on_demand(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_on_demand", value)

    @property
    @pulumi.getter(name="authPortalTimeout")
    def auth_portal_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
        """
        return pulumi.get(self, "auth_portal_timeout")

    @auth_portal_timeout.setter
    def auth_portal_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_portal_timeout", value)

    @property
    @pulumi.getter(name="authPorts")
    def auth_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingAuthPortArgs']]]]:
        """
        Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `auth_ports` block is documented below.
        """
        return pulumi.get(self, "auth_ports")

    @auth_ports.setter
    def auth_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingAuthPortArgs']]]]):
        pulumi.set(self, "auth_ports", value)

    @property
    @pulumi.getter(name="authSecureHttp")
    def auth_secure_http(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_secure_http")

    @auth_secure_http.setter
    def auth_secure_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_secure_http", value)

    @property
    @pulumi.getter(name="authSrcMac")
    def auth_src_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_src_mac")

    @auth_src_mac.setter
    def auth_src_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_src_mac", value)

    @property
    @pulumi.getter(name="authSslAllowRenegotiation")
    def auth_ssl_allow_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_ssl_allow_renegotiation")

    @auth_ssl_allow_renegotiation.setter
    def auth_ssl_allow_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_allow_renegotiation", value)

    @property
    @pulumi.getter(name="authSslMaxProtoVersion")
    def auth_ssl_max_proto_version(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
        """
        return pulumi.get(self, "auth_ssl_max_proto_version")

    @auth_ssl_max_proto_version.setter
    def auth_ssl_max_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_max_proto_version", value)

    @property
    @pulumi.getter(name="authSslMinProtoVersion")
    def auth_ssl_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        """
        return pulumi.get(self, "auth_ssl_min_proto_version")

    @auth_ssl_min_proto_version.setter
    def auth_ssl_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_min_proto_version", value)

    @property
    @pulumi.getter(name="authSslSigalgs")
    def auth_ssl_sigalgs(self) -> Optional[pulumi.Input[str]]:
        """
        Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
        """
        return pulumi.get(self, "auth_ssl_sigalgs")

    @auth_ssl_sigalgs.setter
    def auth_ssl_sigalgs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_sigalgs", value)

    @property
    @pulumi.getter(name="authTimeout")
    def auth_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
        """
        return pulumi.get(self, "auth_timeout")

    @auth_timeout.setter
    def auth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_timeout", value)

    @property
    @pulumi.getter(name="authTimeoutType")
    def auth_timeout_type(self) -> Optional[pulumi.Input[str]]:
        """
        Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
        """
        return pulumi.get(self, "auth_timeout_type")

    @auth_timeout_type.setter
    def auth_timeout_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_timeout_type", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="defaultUserPasswordPolicy")
    def default_user_password_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Default password policy to apply to all local users unless otherwise specified, as defined in config user password-policy.
        """
        return pulumi.get(self, "default_user_password_policy")

    @default_user_password_policy.setter
    def default_user_password_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_user_password_policy", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="perPolicyDisclaimer")
    def per_policy_disclaimer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "per_policy_disclaimer")

    @per_policy_disclaimer.setter
    def per_policy_disclaimer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_policy_disclaimer", value)

    @property
    @pulumi.getter(name="radiusSesTimeoutAct")
    def radius_ses_timeout_act(self) -> Optional[pulumi.Input[str]]:
        """
        Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
        """
        return pulumi.get(self, "radius_ses_timeout_act")

    @radius_ses_timeout_act.setter
    def radius_ses_timeout_act(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_ses_timeout_act", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SettingState:
    def __init__(__self__, *,
                 auth_blackout_time: Optional[pulumi.Input[int]] = None,
                 auth_ca_cert: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_http_basic: Optional[pulumi.Input[str]] = None,
                 auth_invalid_max: Optional[pulumi.Input[int]] = None,
                 auth_lockout_duration: Optional[pulumi.Input[int]] = None,
                 auth_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 auth_on_demand: Optional[pulumi.Input[str]] = None,
                 auth_portal_timeout: Optional[pulumi.Input[int]] = None,
                 auth_ports: Optional[pulumi.Input[Sequence[pulumi.Input['SettingAuthPortArgs']]]] = None,
                 auth_secure_http: Optional[pulumi.Input[str]] = None,
                 auth_src_mac: Optional[pulumi.Input[str]] = None,
                 auth_ssl_allow_renegotiation: Optional[pulumi.Input[str]] = None,
                 auth_ssl_max_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_sigalgs: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 auth_timeout_type: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 default_user_password_policy: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 radius_ses_timeout_act: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Setting resources.
        :param pulumi.Input[int] auth_blackout_time: Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
        :param pulumi.Input[str] auth_ca_cert: HTTPS CA certificate for policy authentication.
        :param pulumi.Input[str] auth_cert: HTTPS server certificate for policy authentication.
        :param pulumi.Input[str] auth_http_basic: Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_invalid_max: Maximum number of failed authentication attempts before the user is blocked.
        :param pulumi.Input[int] auth_lockout_duration: Lockout period in seconds after too many login failures.
        :param pulumi.Input[int] auth_lockout_threshold: Maximum number of failed login attempts before login lockout is triggered.
        :param pulumi.Input[str] auth_on_demand: Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
        :param pulumi.Input[int] auth_portal_timeout: Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
        :param pulumi.Input[Sequence[pulumi.Input['SettingAuthPortArgs']]] auth_ports: Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `auth_ports` block is documented below.
        :param pulumi.Input[str] auth_secure_http: Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_src_mac: Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_ssl_allow_renegotiation: Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_ssl_max_proto_version: Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
        :param pulumi.Input[str] auth_ssl_min_proto_version: Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        :param pulumi.Input[str] auth_ssl_sigalgs: Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
        :param pulumi.Input[int] auth_timeout: Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
        :param pulumi.Input[str] auth_timeout_type: Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
        :param pulumi.Input[str] auth_type: Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
        :param pulumi.Input[str] default_user_password_policy: Default password policy to apply to all local users unless otherwise specified, as defined in config user password-policy.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] per_policy_disclaimer: Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] radius_ses_timeout_act: Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if auth_blackout_time is not None:
            pulumi.set(__self__, "auth_blackout_time", auth_blackout_time)
        if auth_ca_cert is not None:
            pulumi.set(__self__, "auth_ca_cert", auth_ca_cert)
        if auth_cert is not None:
            pulumi.set(__self__, "auth_cert", auth_cert)
        if auth_http_basic is not None:
            pulumi.set(__self__, "auth_http_basic", auth_http_basic)
        if auth_invalid_max is not None:
            pulumi.set(__self__, "auth_invalid_max", auth_invalid_max)
        if auth_lockout_duration is not None:
            pulumi.set(__self__, "auth_lockout_duration", auth_lockout_duration)
        if auth_lockout_threshold is not None:
            pulumi.set(__self__, "auth_lockout_threshold", auth_lockout_threshold)
        if auth_on_demand is not None:
            pulumi.set(__self__, "auth_on_demand", auth_on_demand)
        if auth_portal_timeout is not None:
            pulumi.set(__self__, "auth_portal_timeout", auth_portal_timeout)
        if auth_ports is not None:
            pulumi.set(__self__, "auth_ports", auth_ports)
        if auth_secure_http is not None:
            pulumi.set(__self__, "auth_secure_http", auth_secure_http)
        if auth_src_mac is not None:
            pulumi.set(__self__, "auth_src_mac", auth_src_mac)
        if auth_ssl_allow_renegotiation is not None:
            pulumi.set(__self__, "auth_ssl_allow_renegotiation", auth_ssl_allow_renegotiation)
        if auth_ssl_max_proto_version is not None:
            pulumi.set(__self__, "auth_ssl_max_proto_version", auth_ssl_max_proto_version)
        if auth_ssl_min_proto_version is not None:
            pulumi.set(__self__, "auth_ssl_min_proto_version", auth_ssl_min_proto_version)
        if auth_ssl_sigalgs is not None:
            pulumi.set(__self__, "auth_ssl_sigalgs", auth_ssl_sigalgs)
        if auth_timeout is not None:
            pulumi.set(__self__, "auth_timeout", auth_timeout)
        if auth_timeout_type is not None:
            pulumi.set(__self__, "auth_timeout_type", auth_timeout_type)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if default_user_password_policy is not None:
            pulumi.set(__self__, "default_user_password_policy", default_user_password_policy)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if per_policy_disclaimer is not None:
            pulumi.set(__self__, "per_policy_disclaimer", per_policy_disclaimer)
        if radius_ses_timeout_act is not None:
            pulumi.set(__self__, "radius_ses_timeout_act", radius_ses_timeout_act)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="authBlackoutTime")
    def auth_blackout_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
        """
        return pulumi.get(self, "auth_blackout_time")

    @auth_blackout_time.setter
    def auth_blackout_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_blackout_time", value)

    @property
    @pulumi.getter(name="authCaCert")
    def auth_ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        HTTPS CA certificate for policy authentication.
        """
        return pulumi.get(self, "auth_ca_cert")

    @auth_ca_cert.setter
    def auth_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ca_cert", value)

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> Optional[pulumi.Input[str]]:
        """
        HTTPS server certificate for policy authentication.
        """
        return pulumi.get(self, "auth_cert")

    @auth_cert.setter
    def auth_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_cert", value)

    @property
    @pulumi.getter(name="authHttpBasic")
    def auth_http_basic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_http_basic")

    @auth_http_basic.setter
    def auth_http_basic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_http_basic", value)

    @property
    @pulumi.getter(name="authInvalidMax")
    def auth_invalid_max(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of failed authentication attempts before the user is blocked.
        """
        return pulumi.get(self, "auth_invalid_max")

    @auth_invalid_max.setter
    def auth_invalid_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_invalid_max", value)

    @property
    @pulumi.getter(name="authLockoutDuration")
    def auth_lockout_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Lockout period in seconds after too many login failures.
        """
        return pulumi.get(self, "auth_lockout_duration")

    @auth_lockout_duration.setter
    def auth_lockout_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_lockout_duration", value)

    @property
    @pulumi.getter(name="authLockoutThreshold")
    def auth_lockout_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of failed login attempts before login lockout is triggered.
        """
        return pulumi.get(self, "auth_lockout_threshold")

    @auth_lockout_threshold.setter
    def auth_lockout_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_lockout_threshold", value)

    @property
    @pulumi.getter(name="authOnDemand")
    def auth_on_demand(self) -> Optional[pulumi.Input[str]]:
        """
        Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
        """
        return pulumi.get(self, "auth_on_demand")

    @auth_on_demand.setter
    def auth_on_demand(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_on_demand", value)

    @property
    @pulumi.getter(name="authPortalTimeout")
    def auth_portal_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
        """
        return pulumi.get(self, "auth_portal_timeout")

    @auth_portal_timeout.setter
    def auth_portal_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_portal_timeout", value)

    @property
    @pulumi.getter(name="authPorts")
    def auth_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingAuthPortArgs']]]]:
        """
        Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `auth_ports` block is documented below.
        """
        return pulumi.get(self, "auth_ports")

    @auth_ports.setter
    def auth_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingAuthPortArgs']]]]):
        pulumi.set(self, "auth_ports", value)

    @property
    @pulumi.getter(name="authSecureHttp")
    def auth_secure_http(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_secure_http")

    @auth_secure_http.setter
    def auth_secure_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_secure_http", value)

    @property
    @pulumi.getter(name="authSrcMac")
    def auth_src_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_src_mac")

    @auth_src_mac.setter
    def auth_src_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_src_mac", value)

    @property
    @pulumi.getter(name="authSslAllowRenegotiation")
    def auth_ssl_allow_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_ssl_allow_renegotiation")

    @auth_ssl_allow_renegotiation.setter
    def auth_ssl_allow_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_allow_renegotiation", value)

    @property
    @pulumi.getter(name="authSslMaxProtoVersion")
    def auth_ssl_max_proto_version(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
        """
        return pulumi.get(self, "auth_ssl_max_proto_version")

    @auth_ssl_max_proto_version.setter
    def auth_ssl_max_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_max_proto_version", value)

    @property
    @pulumi.getter(name="authSslMinProtoVersion")
    def auth_ssl_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        """
        return pulumi.get(self, "auth_ssl_min_proto_version")

    @auth_ssl_min_proto_version.setter
    def auth_ssl_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_min_proto_version", value)

    @property
    @pulumi.getter(name="authSslSigalgs")
    def auth_ssl_sigalgs(self) -> Optional[pulumi.Input[str]]:
        """
        Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
        """
        return pulumi.get(self, "auth_ssl_sigalgs")

    @auth_ssl_sigalgs.setter
    def auth_ssl_sigalgs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_ssl_sigalgs", value)

    @property
    @pulumi.getter(name="authTimeout")
    def auth_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
        """
        return pulumi.get(self, "auth_timeout")

    @auth_timeout.setter
    def auth_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_timeout", value)

    @property
    @pulumi.getter(name="authTimeoutType")
    def auth_timeout_type(self) -> Optional[pulumi.Input[str]]:
        """
        Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
        """
        return pulumi.get(self, "auth_timeout_type")

    @auth_timeout_type.setter
    def auth_timeout_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_timeout_type", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="defaultUserPasswordPolicy")
    def default_user_password_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Default password policy to apply to all local users unless otherwise specified, as defined in config user password-policy.
        """
        return pulumi.get(self, "default_user_password_policy")

    @default_user_password_policy.setter
    def default_user_password_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_user_password_policy", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="perPolicyDisclaimer")
    def per_policy_disclaimer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "per_policy_disclaimer")

    @per_policy_disclaimer.setter
    def per_policy_disclaimer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_policy_disclaimer", value)

    @property
    @pulumi.getter(name="radiusSesTimeoutAct")
    def radius_ses_timeout_act(self) -> Optional[pulumi.Input[str]]:
        """
        Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
        """
        return pulumi.get(self, "radius_ses_timeout_act")

    @radius_ses_timeout_act.setter
    def radius_ses_timeout_act(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_ses_timeout_act", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Setting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_blackout_time: Optional[pulumi.Input[int]] = None,
                 auth_ca_cert: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_http_basic: Optional[pulumi.Input[str]] = None,
                 auth_invalid_max: Optional[pulumi.Input[int]] = None,
                 auth_lockout_duration: Optional[pulumi.Input[int]] = None,
                 auth_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 auth_on_demand: Optional[pulumi.Input[str]] = None,
                 auth_portal_timeout: Optional[pulumi.Input[int]] = None,
                 auth_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingAuthPortArgs']]]]] = None,
                 auth_secure_http: Optional[pulumi.Input[str]] = None,
                 auth_src_mac: Optional[pulumi.Input[str]] = None,
                 auth_ssl_allow_renegotiation: Optional[pulumi.Input[str]] = None,
                 auth_ssl_max_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_sigalgs: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 auth_timeout_type: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 default_user_password_policy: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 radius_ses_timeout_act: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure user authentication setting.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.user.Setting("trname",
            auth_blackout_time=0,
            auth_cert="Fortinet_Factory",
            auth_http_basic="disable",
            auth_invalid_max=5,
            auth_lockout_duration=0,
            auth_lockout_threshold=3,
            auth_on_demand="implicitly",
            auth_portal_timeout=3,
            auth_secure_http="disable",
            auth_src_mac="enable",
            auth_ssl_allow_renegotiation="disable",
            auth_timeout=5,
            auth_timeout_type="idle-timeout",
            auth_type="http https ftp telnet",
            radius_ses_timeout_act="hard-timeout")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        User Setting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/setting:Setting labelname UserSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/setting:Setting labelname UserSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auth_blackout_time: Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
        :param pulumi.Input[str] auth_ca_cert: HTTPS CA certificate for policy authentication.
        :param pulumi.Input[str] auth_cert: HTTPS server certificate for policy authentication.
        :param pulumi.Input[str] auth_http_basic: Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_invalid_max: Maximum number of failed authentication attempts before the user is blocked.
        :param pulumi.Input[int] auth_lockout_duration: Lockout period in seconds after too many login failures.
        :param pulumi.Input[int] auth_lockout_threshold: Maximum number of failed login attempts before login lockout is triggered.
        :param pulumi.Input[str] auth_on_demand: Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
        :param pulumi.Input[int] auth_portal_timeout: Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingAuthPortArgs']]]] auth_ports: Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `auth_ports` block is documented below.
        :param pulumi.Input[str] auth_secure_http: Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_src_mac: Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_ssl_allow_renegotiation: Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_ssl_max_proto_version: Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
        :param pulumi.Input[str] auth_ssl_min_proto_version: Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        :param pulumi.Input[str] auth_ssl_sigalgs: Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
        :param pulumi.Input[int] auth_timeout: Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
        :param pulumi.Input[str] auth_timeout_type: Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
        :param pulumi.Input[str] auth_type: Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
        :param pulumi.Input[str] default_user_password_policy: Default password policy to apply to all local users unless otherwise specified, as defined in config user password-policy.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] per_policy_disclaimer: Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] radius_ses_timeout_act: Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure user authentication setting.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.user.Setting("trname",
            auth_blackout_time=0,
            auth_cert="Fortinet_Factory",
            auth_http_basic="disable",
            auth_invalid_max=5,
            auth_lockout_duration=0,
            auth_lockout_threshold=3,
            auth_on_demand="implicitly",
            auth_portal_timeout=3,
            auth_secure_http="disable",
            auth_src_mac="enable",
            auth_ssl_allow_renegotiation="disable",
            auth_timeout=5,
            auth_timeout_type="idle-timeout",
            auth_type="http https ftp telnet",
            radius_ses_timeout_act="hard-timeout")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        User Setting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/setting:Setting labelname UserSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/setting:Setting labelname UserSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_blackout_time: Optional[pulumi.Input[int]] = None,
                 auth_ca_cert: Optional[pulumi.Input[str]] = None,
                 auth_cert: Optional[pulumi.Input[str]] = None,
                 auth_http_basic: Optional[pulumi.Input[str]] = None,
                 auth_invalid_max: Optional[pulumi.Input[int]] = None,
                 auth_lockout_duration: Optional[pulumi.Input[int]] = None,
                 auth_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 auth_on_demand: Optional[pulumi.Input[str]] = None,
                 auth_portal_timeout: Optional[pulumi.Input[int]] = None,
                 auth_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingAuthPortArgs']]]]] = None,
                 auth_secure_http: Optional[pulumi.Input[str]] = None,
                 auth_src_mac: Optional[pulumi.Input[str]] = None,
                 auth_ssl_allow_renegotiation: Optional[pulumi.Input[str]] = None,
                 auth_ssl_max_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 auth_ssl_sigalgs: Optional[pulumi.Input[str]] = None,
                 auth_timeout: Optional[pulumi.Input[int]] = None,
                 auth_timeout_type: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 default_user_password_policy: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
                 radius_ses_timeout_act: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingArgs.__new__(SettingArgs)

            __props__.__dict__["auth_blackout_time"] = auth_blackout_time
            __props__.__dict__["auth_ca_cert"] = auth_ca_cert
            __props__.__dict__["auth_cert"] = auth_cert
            __props__.__dict__["auth_http_basic"] = auth_http_basic
            __props__.__dict__["auth_invalid_max"] = auth_invalid_max
            __props__.__dict__["auth_lockout_duration"] = auth_lockout_duration
            __props__.__dict__["auth_lockout_threshold"] = auth_lockout_threshold
            __props__.__dict__["auth_on_demand"] = auth_on_demand
            __props__.__dict__["auth_portal_timeout"] = auth_portal_timeout
            __props__.__dict__["auth_ports"] = auth_ports
            __props__.__dict__["auth_secure_http"] = auth_secure_http
            __props__.__dict__["auth_src_mac"] = auth_src_mac
            __props__.__dict__["auth_ssl_allow_renegotiation"] = auth_ssl_allow_renegotiation
            __props__.__dict__["auth_ssl_max_proto_version"] = auth_ssl_max_proto_version
            __props__.__dict__["auth_ssl_min_proto_version"] = auth_ssl_min_proto_version
            __props__.__dict__["auth_ssl_sigalgs"] = auth_ssl_sigalgs
            __props__.__dict__["auth_timeout"] = auth_timeout
            __props__.__dict__["auth_timeout_type"] = auth_timeout_type
            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["default_user_password_policy"] = default_user_password_policy
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["per_policy_disclaimer"] = per_policy_disclaimer
            __props__.__dict__["radius_ses_timeout_act"] = radius_ses_timeout_act
            __props__.__dict__["vdomparam"] = vdomparam
        super(Setting, __self__).__init__(
            'fortios:user/setting:Setting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_blackout_time: Optional[pulumi.Input[int]] = None,
            auth_ca_cert: Optional[pulumi.Input[str]] = None,
            auth_cert: Optional[pulumi.Input[str]] = None,
            auth_http_basic: Optional[pulumi.Input[str]] = None,
            auth_invalid_max: Optional[pulumi.Input[int]] = None,
            auth_lockout_duration: Optional[pulumi.Input[int]] = None,
            auth_lockout_threshold: Optional[pulumi.Input[int]] = None,
            auth_on_demand: Optional[pulumi.Input[str]] = None,
            auth_portal_timeout: Optional[pulumi.Input[int]] = None,
            auth_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingAuthPortArgs']]]]] = None,
            auth_secure_http: Optional[pulumi.Input[str]] = None,
            auth_src_mac: Optional[pulumi.Input[str]] = None,
            auth_ssl_allow_renegotiation: Optional[pulumi.Input[str]] = None,
            auth_ssl_max_proto_version: Optional[pulumi.Input[str]] = None,
            auth_ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
            auth_ssl_sigalgs: Optional[pulumi.Input[str]] = None,
            auth_timeout: Optional[pulumi.Input[int]] = None,
            auth_timeout_type: Optional[pulumi.Input[str]] = None,
            auth_type: Optional[pulumi.Input[str]] = None,
            default_user_password_policy: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            per_policy_disclaimer: Optional[pulumi.Input[str]] = None,
            radius_ses_timeout_act: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Setting':
        """
        Get an existing Setting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auth_blackout_time: Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
        :param pulumi.Input[str] auth_ca_cert: HTTPS CA certificate for policy authentication.
        :param pulumi.Input[str] auth_cert: HTTPS server certificate for policy authentication.
        :param pulumi.Input[str] auth_http_basic: Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_invalid_max: Maximum number of failed authentication attempts before the user is blocked.
        :param pulumi.Input[int] auth_lockout_duration: Lockout period in seconds after too many login failures.
        :param pulumi.Input[int] auth_lockout_threshold: Maximum number of failed login attempts before login lockout is triggered.
        :param pulumi.Input[str] auth_on_demand: Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
        :param pulumi.Input[int] auth_portal_timeout: Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingAuthPortArgs']]]] auth_ports: Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `auth_ports` block is documented below.
        :param pulumi.Input[str] auth_secure_http: Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_src_mac: Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_ssl_allow_renegotiation: Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_ssl_max_proto_version: Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
        :param pulumi.Input[str] auth_ssl_min_proto_version: Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        :param pulumi.Input[str] auth_ssl_sigalgs: Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
        :param pulumi.Input[int] auth_timeout: Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
        :param pulumi.Input[str] auth_timeout_type: Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
        :param pulumi.Input[str] auth_type: Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
        :param pulumi.Input[str] default_user_password_policy: Default password policy to apply to all local users unless otherwise specified, as defined in config user password-policy.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] per_policy_disclaimer: Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] radius_ses_timeout_act: Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingState.__new__(_SettingState)

        __props__.__dict__["auth_blackout_time"] = auth_blackout_time
        __props__.__dict__["auth_ca_cert"] = auth_ca_cert
        __props__.__dict__["auth_cert"] = auth_cert
        __props__.__dict__["auth_http_basic"] = auth_http_basic
        __props__.__dict__["auth_invalid_max"] = auth_invalid_max
        __props__.__dict__["auth_lockout_duration"] = auth_lockout_duration
        __props__.__dict__["auth_lockout_threshold"] = auth_lockout_threshold
        __props__.__dict__["auth_on_demand"] = auth_on_demand
        __props__.__dict__["auth_portal_timeout"] = auth_portal_timeout
        __props__.__dict__["auth_ports"] = auth_ports
        __props__.__dict__["auth_secure_http"] = auth_secure_http
        __props__.__dict__["auth_src_mac"] = auth_src_mac
        __props__.__dict__["auth_ssl_allow_renegotiation"] = auth_ssl_allow_renegotiation
        __props__.__dict__["auth_ssl_max_proto_version"] = auth_ssl_max_proto_version
        __props__.__dict__["auth_ssl_min_proto_version"] = auth_ssl_min_proto_version
        __props__.__dict__["auth_ssl_sigalgs"] = auth_ssl_sigalgs
        __props__.__dict__["auth_timeout"] = auth_timeout
        __props__.__dict__["auth_timeout_type"] = auth_timeout_type
        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["default_user_password_policy"] = default_user_password_policy
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["per_policy_disclaimer"] = per_policy_disclaimer
        __props__.__dict__["radius_ses_timeout_act"] = radius_ses_timeout_act
        __props__.__dict__["vdomparam"] = vdomparam
        return Setting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authBlackoutTime")
    def auth_blackout_time(self) -> pulumi.Output[int]:
        """
        Time in seconds an IP address is denied access after failing to authenticate five times within one minute.
        """
        return pulumi.get(self, "auth_blackout_time")

    @property
    @pulumi.getter(name="authCaCert")
    def auth_ca_cert(self) -> pulumi.Output[str]:
        """
        HTTPS CA certificate for policy authentication.
        """
        return pulumi.get(self, "auth_ca_cert")

    @property
    @pulumi.getter(name="authCert")
    def auth_cert(self) -> pulumi.Output[str]:
        """
        HTTPS server certificate for policy authentication.
        """
        return pulumi.get(self, "auth_cert")

    @property
    @pulumi.getter(name="authHttpBasic")
    def auth_http_basic(self) -> pulumi.Output[str]:
        """
        Enable/disable use of HTTP basic authentication for identity-based firewall policies. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_http_basic")

    @property
    @pulumi.getter(name="authInvalidMax")
    def auth_invalid_max(self) -> pulumi.Output[int]:
        """
        Maximum number of failed authentication attempts before the user is blocked.
        """
        return pulumi.get(self, "auth_invalid_max")

    @property
    @pulumi.getter(name="authLockoutDuration")
    def auth_lockout_duration(self) -> pulumi.Output[int]:
        """
        Lockout period in seconds after too many login failures.
        """
        return pulumi.get(self, "auth_lockout_duration")

    @property
    @pulumi.getter(name="authLockoutThreshold")
    def auth_lockout_threshold(self) -> pulumi.Output[int]:
        """
        Maximum number of failed login attempts before login lockout is triggered.
        """
        return pulumi.get(self, "auth_lockout_threshold")

    @property
    @pulumi.getter(name="authOnDemand")
    def auth_on_demand(self) -> pulumi.Output[str]:
        """
        Always/implicitly trigger firewall authentication on demand. Valid values: `always`, `implicitly`.
        """
        return pulumi.get(self, "auth_on_demand")

    @property
    @pulumi.getter(name="authPortalTimeout")
    def auth_portal_timeout(self) -> pulumi.Output[int]:
        """
        Time in minutes before captive portal user have to re-authenticate (1 - 30 min, default 3 min).
        """
        return pulumi.get(self, "auth_portal_timeout")

    @property
    @pulumi.getter(name="authPorts")
    def auth_ports(self) -> pulumi.Output[Optional[Sequence['outputs.SettingAuthPort']]]:
        """
        Set up non-standard ports for authentication with HTTP, HTTPS, FTP, and TELNET. The structure of `auth_ports` block is documented below.
        """
        return pulumi.get(self, "auth_ports")

    @property
    @pulumi.getter(name="authSecureHttp")
    def auth_secure_http(self) -> pulumi.Output[str]:
        """
        Enable/disable redirecting HTTP user authentication to more secure HTTPS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_secure_http")

    @property
    @pulumi.getter(name="authSrcMac")
    def auth_src_mac(self) -> pulumi.Output[str]:
        """
        Enable/disable source MAC for user identity. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_src_mac")

    @property
    @pulumi.getter(name="authSslAllowRenegotiation")
    def auth_ssl_allow_renegotiation(self) -> pulumi.Output[str]:
        """
        Allow/forbid SSL re-negotiation for HTTPS authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_ssl_allow_renegotiation")

    @property
    @pulumi.getter(name="authSslMaxProtoVersion")
    def auth_ssl_max_proto_version(self) -> pulumi.Output[str]:
        """
        Maximum supported protocol version for SSL/TLS connections (default is no limit). Valid values: `sslv3`, `tlsv1`, `tlsv1-1`, `tlsv1-2`, `tlsv1-3`.
        """
        return pulumi.get(self, "auth_ssl_max_proto_version")

    @property
    @pulumi.getter(name="authSslMinProtoVersion")
    def auth_ssl_min_proto_version(self) -> pulumi.Output[str]:
        """
        Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        """
        return pulumi.get(self, "auth_ssl_min_proto_version")

    @property
    @pulumi.getter(name="authSslSigalgs")
    def auth_ssl_sigalgs(self) -> pulumi.Output[str]:
        """
        Set signature algorithms related to HTTPS authentication (affects TLS version <= 1.2 only, default is to enable all). Valid values: `no-rsa-pss`, `all`.
        """
        return pulumi.get(self, "auth_ssl_sigalgs")

    @property
    @pulumi.getter(name="authTimeout")
    def auth_timeout(self) -> pulumi.Output[int]:
        """
        Time in minutes before the firewall user authentication timeout requires the user to re-authenticate.
        """
        return pulumi.get(self, "auth_timeout")

    @property
    @pulumi.getter(name="authTimeoutType")
    def auth_timeout_type(self) -> pulumi.Output[str]:
        """
        Control if authenticated users have to login again after a hard timeout, after an idle timeout, or after a session timeout. Valid values: `idle-timeout`, `hard-timeout`, `new-session`.
        """
        return pulumi.get(self, "auth_timeout_type")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[str]:
        """
        Supported firewall policy authentication protocols/methods. Valid values: `http`, `https`, `ftp`, `telnet`.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="defaultUserPasswordPolicy")
    def default_user_password_policy(self) -> pulumi.Output[str]:
        """
        Default password policy to apply to all local users unless otherwise specified, as defined in config user password-policy.
        """
        return pulumi.get(self, "default_user_password_policy")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="perPolicyDisclaimer")
    def per_policy_disclaimer(self) -> pulumi.Output[str]:
        """
        Enable/disable per policy disclaimer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "per_policy_disclaimer")

    @property
    @pulumi.getter(name="radiusSesTimeoutAct")
    def radius_ses_timeout_act(self) -> pulumi.Output[str]:
        """
        Set the RADIUS session timeout to a hard timeout or to ignore RADIUS server session timeouts. Valid values: `hard-timeout`, `ignore-timeout`.
        """
        return pulumi.get(self, "radius_ses_timeout_act")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

