# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ExternalidentityproviderArgs', 'Externalidentityprovider']

@pulumi.input_type
class ExternalidentityproviderArgs:
    def __init__(__self__, *,
                 group_attr_name: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server_identity_check: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 user_attr_name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Externalidentityprovider resource.
        :param pulumi.Input[str] group_attr_name: Group attribute name in authentication query.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] name: External identity provider name.
        :param pulumi.Input[int] port: External identity provider service port number (0 to use default).
        :param pulumi.Input[str] server_identity_check: Enable/disable server's identity check against its certificate and subject alternative name(s). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] source_ip: Use this IPv4/v6 address to connect to the external identity provider.
        :param pulumi.Input[int] timeout: Connection timeout value in seconds (default=5).
        :param pulumi.Input[str] type: External identity provider type. Valid values: `ms-graph`.
        :param pulumi.Input[str] url: External identity provider URL (e.g. "https://example.com:8080/api/v1").
        :param pulumi.Input[str] user_attr_name: User attribute name in authentication query.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] version: External identity API version. Valid values: `v1.0`, `beta`.
        """
        if group_attr_name is not None:
            pulumi.set(__self__, "group_attr_name", group_attr_name)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server_identity_check is not None:
            pulumi.set(__self__, "server_identity_check", server_identity_check)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if user_attr_name is not None:
            pulumi.set(__self__, "user_attr_name", user_attr_name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="groupAttrName")
    def group_attr_name(self) -> Optional[pulumi.Input[str]]:
        """
        Group attribute name in authentication query.
        """
        return pulumi.get(self, "group_attr_name")

    @group_attr_name.setter
    def group_attr_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_attr_name", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        External identity provider name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        External identity provider service port number (0 to use default).
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="serverIdentityCheck")
    def server_identity_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable server's identity check against its certificate and subject alternative name(s). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "server_identity_check")

    @server_identity_check.setter
    def server_identity_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_identity_check", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Use this IPv4/v6 address to connect to the external identity provider.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Connection timeout value in seconds (default=5).
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        External identity provider type. Valid values: `ms-graph`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        External identity provider URL (e.g. "https://example.com:8080/api/v1").
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="userAttrName")
    def user_attr_name(self) -> Optional[pulumi.Input[str]]:
        """
        User attribute name in authentication query.
        """
        return pulumi.get(self, "user_attr_name")

    @user_attr_name.setter
    def user_attr_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_attr_name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        External identity API version. Valid values: `v1.0`, `beta`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _ExternalidentityproviderState:
    def __init__(__self__, *,
                 group_attr_name: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server_identity_check: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 user_attr_name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Externalidentityprovider resources.
        :param pulumi.Input[str] group_attr_name: Group attribute name in authentication query.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] name: External identity provider name.
        :param pulumi.Input[int] port: External identity provider service port number (0 to use default).
        :param pulumi.Input[str] server_identity_check: Enable/disable server's identity check against its certificate and subject alternative name(s). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] source_ip: Use this IPv4/v6 address to connect to the external identity provider.
        :param pulumi.Input[int] timeout: Connection timeout value in seconds (default=5).
        :param pulumi.Input[str] type: External identity provider type. Valid values: `ms-graph`.
        :param pulumi.Input[str] url: External identity provider URL (e.g. "https://example.com:8080/api/v1").
        :param pulumi.Input[str] user_attr_name: User attribute name in authentication query.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] version: External identity API version. Valid values: `v1.0`, `beta`.
        """
        if group_attr_name is not None:
            pulumi.set(__self__, "group_attr_name", group_attr_name)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server_identity_check is not None:
            pulumi.set(__self__, "server_identity_check", server_identity_check)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if user_attr_name is not None:
            pulumi.set(__self__, "user_attr_name", user_attr_name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="groupAttrName")
    def group_attr_name(self) -> Optional[pulumi.Input[str]]:
        """
        Group attribute name in authentication query.
        """
        return pulumi.get(self, "group_attr_name")

    @group_attr_name.setter
    def group_attr_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_attr_name", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        External identity provider name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        External identity provider service port number (0 to use default).
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="serverIdentityCheck")
    def server_identity_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable server's identity check against its certificate and subject alternative name(s). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "server_identity_check")

    @server_identity_check.setter
    def server_identity_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_identity_check", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Use this IPv4/v6 address to connect to the external identity provider.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Connection timeout value in seconds (default=5).
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        External identity provider type. Valid values: `ms-graph`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        External identity provider URL (e.g. "https://example.com:8080/api/v1").
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="userAttrName")
    def user_attr_name(self) -> Optional[pulumi.Input[str]]:
        """
        User attribute name in authentication query.
        """
        return pulumi.get(self, "user_attr_name")

    @user_attr_name.setter
    def user_attr_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_attr_name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        External identity API version. Valid values: `v1.0`, `beta`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class Externalidentityprovider(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_attr_name: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server_identity_check: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 user_attr_name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure external identity provider. Applies to FortiOS Version `>= 7.4.2`.

        ## Import

        User ExternalIdentityProvider can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/externalidentityprovider:Externalidentityprovider labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/externalidentityprovider:Externalidentityprovider labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] group_attr_name: Group attribute name in authentication query.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] name: External identity provider name.
        :param pulumi.Input[int] port: External identity provider service port number (0 to use default).
        :param pulumi.Input[str] server_identity_check: Enable/disable server's identity check against its certificate and subject alternative name(s). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] source_ip: Use this IPv4/v6 address to connect to the external identity provider.
        :param pulumi.Input[int] timeout: Connection timeout value in seconds (default=5).
        :param pulumi.Input[str] type: External identity provider type. Valid values: `ms-graph`.
        :param pulumi.Input[str] url: External identity provider URL (e.g. "https://example.com:8080/api/v1").
        :param pulumi.Input[str] user_attr_name: User attribute name in authentication query.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] version: External identity API version. Valid values: `v1.0`, `beta`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ExternalidentityproviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure external identity provider. Applies to FortiOS Version `>= 7.4.2`.

        ## Import

        User ExternalIdentityProvider can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/externalidentityprovider:Externalidentityprovider labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/externalidentityprovider:Externalidentityprovider labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ExternalidentityproviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExternalidentityproviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_attr_name: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server_identity_check: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 user_attr_name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExternalidentityproviderArgs.__new__(ExternalidentityproviderArgs)

            __props__.__dict__["group_attr_name"] = group_attr_name
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interface_select_method"] = interface_select_method
            __props__.__dict__["name"] = name
            __props__.__dict__["port"] = port
            __props__.__dict__["server_identity_check"] = server_identity_check
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["type"] = type
            __props__.__dict__["url"] = url
            __props__.__dict__["user_attr_name"] = user_attr_name
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["version"] = version
        super(Externalidentityprovider, __self__).__init__(
            'fortios:user/externalidentityprovider:Externalidentityprovider',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            group_attr_name: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interface_select_method: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            server_identity_check: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None,
            user_attr_name: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'Externalidentityprovider':
        """
        Get an existing Externalidentityprovider resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] group_attr_name: Group attribute name in authentication query.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] name: External identity provider name.
        :param pulumi.Input[int] port: External identity provider service port number (0 to use default).
        :param pulumi.Input[str] server_identity_check: Enable/disable server's identity check against its certificate and subject alternative name(s). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] source_ip: Use this IPv4/v6 address to connect to the external identity provider.
        :param pulumi.Input[int] timeout: Connection timeout value in seconds (default=5).
        :param pulumi.Input[str] type: External identity provider type. Valid values: `ms-graph`.
        :param pulumi.Input[str] url: External identity provider URL (e.g. "https://example.com:8080/api/v1").
        :param pulumi.Input[str] user_attr_name: User attribute name in authentication query.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] version: External identity API version. Valid values: `v1.0`, `beta`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExternalidentityproviderState.__new__(_ExternalidentityproviderState)

        __props__.__dict__["group_attr_name"] = group_attr_name
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interface_select_method"] = interface_select_method
        __props__.__dict__["name"] = name
        __props__.__dict__["port"] = port
        __props__.__dict__["server_identity_check"] = server_identity_check
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["type"] = type
        __props__.__dict__["url"] = url
        __props__.__dict__["user_attr_name"] = user_attr_name
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["version"] = version
        return Externalidentityprovider(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="groupAttrName")
    def group_attr_name(self) -> pulumi.Output[str]:
        """
        Group attribute name in authentication query.
        """
        return pulumi.get(self, "group_attr_name")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> pulumi.Output[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        External identity provider name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        External identity provider service port number (0 to use default).
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="serverIdentityCheck")
    def server_identity_check(self) -> pulumi.Output[str]:
        """
        Enable/disable server's identity check against its certificate and subject alternative name(s). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "server_identity_check")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        """
        Use this IPv4/v6 address to connect to the external identity provider.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[int]:
        """
        Connection timeout value in seconds (default=5).
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        External identity provider type. Valid values: `ms-graph`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        External identity provider URL (e.g. "https://example.com:8080/api/v1").
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="userAttrName")
    def user_attr_name(self) -> pulumi.Output[str]:
        """
        User attribute name in authentication query.
        """
        return pulumi.get(self, "user_attr_name")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        External identity API version. Valid values: `v1.0`, `beta`.
        """
        return pulumi.get(self, "version")

