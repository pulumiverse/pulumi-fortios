# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['KrbkeytabArgs', 'Krbkeytab']

@pulumi.input_type
class KrbkeytabArgs:
    def __init__(__self__, *,
                 keytab: pulumi.Input[str],
                 ldap_server: pulumi.Input[str],
                 principal: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 pac_data: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Krbkeytab resource.
        :param pulumi.Input[str] keytab: base64 coded keytab file containing a pre-shared key.
        :param pulumi.Input[str] ldap_server: LDAP server name.
        :param pulumi.Input[str] principal: Kerberos service principal, e.g. HTTP/fgt.example.com@EXAMPLE.COM.
        :param pulumi.Input[str] name: Kerberos keytab entry name.
        :param pulumi.Input[str] pac_data: Enable/disable parsing PAC data in the ticket. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "keytab", keytab)
        pulumi.set(__self__, "ldap_server", ldap_server)
        pulumi.set(__self__, "principal", principal)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pac_data is not None:
            pulumi.set(__self__, "pac_data", pac_data)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def keytab(self) -> pulumi.Input[str]:
        """
        base64 coded keytab file containing a pre-shared key.
        """
        return pulumi.get(self, "keytab")

    @keytab.setter
    def keytab(self, value: pulumi.Input[str]):
        pulumi.set(self, "keytab", value)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> pulumi.Input[str]:
        """
        LDAP server name.
        """
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: pulumi.Input[str]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        """
        Kerberos service principal, e.g. HTTP/fgt.example.com@EXAMPLE.COM.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Kerberos keytab entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pacData")
    def pac_data(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable parsing PAC data in the ticket. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pac_data")

    @pac_data.setter
    def pac_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_data", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _KrbkeytabState:
    def __init__(__self__, *,
                 keytab: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pac_data: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Krbkeytab resources.
        :param pulumi.Input[str] keytab: base64 coded keytab file containing a pre-shared key.
        :param pulumi.Input[str] ldap_server: LDAP server name.
        :param pulumi.Input[str] name: Kerberos keytab entry name.
        :param pulumi.Input[str] pac_data: Enable/disable parsing PAC data in the ticket. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] principal: Kerberos service principal, e.g. HTTP/fgt.example.com@EXAMPLE.COM.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if keytab is not None:
            pulumi.set(__self__, "keytab", keytab)
        if ldap_server is not None:
            pulumi.set(__self__, "ldap_server", ldap_server)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pac_data is not None:
            pulumi.set(__self__, "pac_data", pac_data)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def keytab(self) -> Optional[pulumi.Input[str]]:
        """
        base64 coded keytab file containing a pre-shared key.
        """
        return pulumi.get(self, "keytab")

    @keytab.setter
    def keytab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keytab", value)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP server name.
        """
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Kerberos keytab entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pacData")
    def pac_data(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable parsing PAC data in the ticket. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pac_data")

    @pac_data.setter
    def pac_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_data", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[pulumi.Input[str]]:
        """
        Kerberos service principal, e.g. HTTP/fgt.example.com@EXAMPLE.COM.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Krbkeytab(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 keytab: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pac_data: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure Kerberos keytab entries.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname2 = fortios.user.Ldap("trname2",
            account_key_filter="(&(userPrincipalName=%s)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))",
            account_key_processing="same",
            cnid="cn",
            dn="EIWNCIEW",
            group_member_check="user-attr",
            group_object_filter="(&(objectcategory=group)(member=*))",
            member_attr="memberOf",
            password_expiry_warning="disable",
            password_renewal="disable",
            port=389,
            secure="disable",
            server="1.1.1.1",
            server_identity_check="disable",
            source_ip="0.0.0.0",
            ssl_min_proto_version="default",
            type="simple")
        trname = fortios.user.Krbkeytab("trname",
            keytab="ZXdlY2VxcmVxd3Jld3E=",
            ldap_server=trname2.name,
            principal="testprin")
        ```

        ## Import

        User KrbKeytab can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/krbkeytab:Krbkeytab labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/krbkeytab:Krbkeytab labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] keytab: base64 coded keytab file containing a pre-shared key.
        :param pulumi.Input[str] ldap_server: LDAP server name.
        :param pulumi.Input[str] name: Kerberos keytab entry name.
        :param pulumi.Input[str] pac_data: Enable/disable parsing PAC data in the ticket. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] principal: Kerberos service principal, e.g. HTTP/fgt.example.com@EXAMPLE.COM.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KrbkeytabArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure Kerberos keytab entries.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname2 = fortios.user.Ldap("trname2",
            account_key_filter="(&(userPrincipalName=%s)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))",
            account_key_processing="same",
            cnid="cn",
            dn="EIWNCIEW",
            group_member_check="user-attr",
            group_object_filter="(&(objectcategory=group)(member=*))",
            member_attr="memberOf",
            password_expiry_warning="disable",
            password_renewal="disable",
            port=389,
            secure="disable",
            server="1.1.1.1",
            server_identity_check="disable",
            source_ip="0.0.0.0",
            ssl_min_proto_version="default",
            type="simple")
        trname = fortios.user.Krbkeytab("trname",
            keytab="ZXdlY2VxcmVxd3Jld3E=",
            ldap_server=trname2.name,
            principal="testprin")
        ```

        ## Import

        User KrbKeytab can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/krbkeytab:Krbkeytab labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/krbkeytab:Krbkeytab labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param KrbkeytabArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KrbkeytabArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 keytab: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pac_data: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KrbkeytabArgs.__new__(KrbkeytabArgs)

            if keytab is None and not opts.urn:
                raise TypeError("Missing required property 'keytab'")
            __props__.__dict__["keytab"] = None if keytab is None else pulumi.Output.secret(keytab)
            if ldap_server is None and not opts.urn:
                raise TypeError("Missing required property 'ldap_server'")
            __props__.__dict__["ldap_server"] = ldap_server
            __props__.__dict__["name"] = name
            __props__.__dict__["pac_data"] = pac_data
            if principal is None and not opts.urn:
                raise TypeError("Missing required property 'principal'")
            __props__.__dict__["principal"] = principal
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["keytab"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Krbkeytab, __self__).__init__(
            'fortios:user/krbkeytab:Krbkeytab',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            keytab: Optional[pulumi.Input[str]] = None,
            ldap_server: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pac_data: Optional[pulumi.Input[str]] = None,
            principal: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Krbkeytab':
        """
        Get an existing Krbkeytab resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] keytab: base64 coded keytab file containing a pre-shared key.
        :param pulumi.Input[str] ldap_server: LDAP server name.
        :param pulumi.Input[str] name: Kerberos keytab entry name.
        :param pulumi.Input[str] pac_data: Enable/disable parsing PAC data in the ticket. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] principal: Kerberos service principal, e.g. HTTP/fgt.example.com@EXAMPLE.COM.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KrbkeytabState.__new__(_KrbkeytabState)

        __props__.__dict__["keytab"] = keytab
        __props__.__dict__["ldap_server"] = ldap_server
        __props__.__dict__["name"] = name
        __props__.__dict__["pac_data"] = pac_data
        __props__.__dict__["principal"] = principal
        __props__.__dict__["vdomparam"] = vdomparam
        return Krbkeytab(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def keytab(self) -> pulumi.Output[str]:
        """
        base64 coded keytab file containing a pre-shared key.
        """
        return pulumi.get(self, "keytab")

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> pulumi.Output[str]:
        """
        LDAP server name.
        """
        return pulumi.get(self, "ldap_server")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Kerberos keytab entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pacData")
    def pac_data(self) -> pulumi.Output[str]:
        """
        Enable/disable parsing PAC data in the ticket. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "pac_data")

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Output[str]:
        """
        Kerberos service principal, e.g. HTTP/fgt.example.com@EXAMPLE.COM.
        """
        return pulumi.get(self, "principal")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

