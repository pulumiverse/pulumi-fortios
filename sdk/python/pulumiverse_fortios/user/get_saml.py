# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetSamlResult',
    'AwaitableGetSamlResult',
    'get_saml',
    'get_saml_output',
]

@pulumi.output_type
class GetSamlResult:
    """
    A collection of values returned by getSaml.
    """
    def __init__(__self__, adfs_claim=None, auth_url=None, cert=None, clock_tolerance=None, digest_method=None, entity_id=None, group_claim_type=None, group_name=None, id=None, idp_cert=None, idp_entity_id=None, idp_single_logout_url=None, idp_single_sign_on_url=None, limit_relaystate=None, name=None, reauth=None, single_logout_url=None, single_sign_on_url=None, user_claim_type=None, user_name=None, vdomparam=None):
        if adfs_claim and not isinstance(adfs_claim, str):
            raise TypeError("Expected argument 'adfs_claim' to be a str")
        pulumi.set(__self__, "adfs_claim", adfs_claim)
        if auth_url and not isinstance(auth_url, str):
            raise TypeError("Expected argument 'auth_url' to be a str")
        pulumi.set(__self__, "auth_url", auth_url)
        if cert and not isinstance(cert, str):
            raise TypeError("Expected argument 'cert' to be a str")
        pulumi.set(__self__, "cert", cert)
        if clock_tolerance and not isinstance(clock_tolerance, int):
            raise TypeError("Expected argument 'clock_tolerance' to be a int")
        pulumi.set(__self__, "clock_tolerance", clock_tolerance)
        if digest_method and not isinstance(digest_method, str):
            raise TypeError("Expected argument 'digest_method' to be a str")
        pulumi.set(__self__, "digest_method", digest_method)
        if entity_id and not isinstance(entity_id, str):
            raise TypeError("Expected argument 'entity_id' to be a str")
        pulumi.set(__self__, "entity_id", entity_id)
        if group_claim_type and not isinstance(group_claim_type, str):
            raise TypeError("Expected argument 'group_claim_type' to be a str")
        pulumi.set(__self__, "group_claim_type", group_claim_type)
        if group_name and not isinstance(group_name, str):
            raise TypeError("Expected argument 'group_name' to be a str")
        pulumi.set(__self__, "group_name", group_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idp_cert and not isinstance(idp_cert, str):
            raise TypeError("Expected argument 'idp_cert' to be a str")
        pulumi.set(__self__, "idp_cert", idp_cert)
        if idp_entity_id and not isinstance(idp_entity_id, str):
            raise TypeError("Expected argument 'idp_entity_id' to be a str")
        pulumi.set(__self__, "idp_entity_id", idp_entity_id)
        if idp_single_logout_url and not isinstance(idp_single_logout_url, str):
            raise TypeError("Expected argument 'idp_single_logout_url' to be a str")
        pulumi.set(__self__, "idp_single_logout_url", idp_single_logout_url)
        if idp_single_sign_on_url and not isinstance(idp_single_sign_on_url, str):
            raise TypeError("Expected argument 'idp_single_sign_on_url' to be a str")
        pulumi.set(__self__, "idp_single_sign_on_url", idp_single_sign_on_url)
        if limit_relaystate and not isinstance(limit_relaystate, str):
            raise TypeError("Expected argument 'limit_relaystate' to be a str")
        pulumi.set(__self__, "limit_relaystate", limit_relaystate)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if reauth and not isinstance(reauth, str):
            raise TypeError("Expected argument 'reauth' to be a str")
        pulumi.set(__self__, "reauth", reauth)
        if single_logout_url and not isinstance(single_logout_url, str):
            raise TypeError("Expected argument 'single_logout_url' to be a str")
        pulumi.set(__self__, "single_logout_url", single_logout_url)
        if single_sign_on_url and not isinstance(single_sign_on_url, str):
            raise TypeError("Expected argument 'single_sign_on_url' to be a str")
        pulumi.set(__self__, "single_sign_on_url", single_sign_on_url)
        if user_claim_type and not isinstance(user_claim_type, str):
            raise TypeError("Expected argument 'user_claim_type' to be a str")
        pulumi.set(__self__, "user_claim_type", user_claim_type)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="adfsClaim")
    def adfs_claim(self) -> str:
        """
        Enable/disable ADFS Claim for user/group attribute in assertion statement (default = disable).
        """
        return pulumi.get(self, "adfs_claim")

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> str:
        """
        URL to verify authentication.
        """
        return pulumi.get(self, "auth_url")

    @property
    @pulumi.getter
    def cert(self) -> str:
        """
        Certificate to sign SAML messages.
        """
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter(name="clockTolerance")
    def clock_tolerance(self) -> int:
        """
        Clock skew tolerance in seconds (0 - 300, default = 15, 0 = no tolerance).
        """
        return pulumi.get(self, "clock_tolerance")

    @property
    @pulumi.getter(name="digestMethod")
    def digest_method(self) -> str:
        """
        Digest Method Algorithm. (default = sha1).
        """
        return pulumi.get(self, "digest_method")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> str:
        """
        SP entity ID.
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="groupClaimType")
    def group_claim_type(self) -> str:
        """
        Group claim in assertion statement.
        """
        return pulumi.get(self, "group_claim_type")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        Group name in assertion statement.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpCert")
    def idp_cert(self) -> str:
        """
        IDP Certificate name.
        """
        return pulumi.get(self, "idp_cert")

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> str:
        """
        IDP entity ID.
        """
        return pulumi.get(self, "idp_entity_id")

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> str:
        """
        IDP single logout url.
        """
        return pulumi.get(self, "idp_single_logout_url")

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> str:
        """
        IDP single sign-on URL.
        """
        return pulumi.get(self, "idp_single_sign_on_url")

    @property
    @pulumi.getter(name="limitRelaystate")
    def limit_relaystate(self) -> str:
        """
        Enable/disable limiting of relay-state parameter when it exceeds SAML 2.0 specification limits (80 bytes).
        """
        return pulumi.get(self, "limit_relaystate")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        SAML server entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def reauth(self) -> str:
        """
        Enable/disable signalling of IDP to force user re-authentication (default = disable).
        """
        return pulumi.get(self, "reauth")

    @property
    @pulumi.getter(name="singleLogoutUrl")
    def single_logout_url(self) -> str:
        """
        SP single logout URL.
        """
        return pulumi.get(self, "single_logout_url")

    @property
    @pulumi.getter(name="singleSignOnUrl")
    def single_sign_on_url(self) -> str:
        """
        SP single sign-on URL.
        """
        return pulumi.get(self, "single_sign_on_url")

    @property
    @pulumi.getter(name="userClaimType")
    def user_claim_type(self) -> str:
        """
        User name claim in assertion statement.
        """
        return pulumi.get(self, "user_claim_type")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        User name in assertion statement.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetSamlResult(GetSamlResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSamlResult(
            adfs_claim=self.adfs_claim,
            auth_url=self.auth_url,
            cert=self.cert,
            clock_tolerance=self.clock_tolerance,
            digest_method=self.digest_method,
            entity_id=self.entity_id,
            group_claim_type=self.group_claim_type,
            group_name=self.group_name,
            id=self.id,
            idp_cert=self.idp_cert,
            idp_entity_id=self.idp_entity_id,
            idp_single_logout_url=self.idp_single_logout_url,
            idp_single_sign_on_url=self.idp_single_sign_on_url,
            limit_relaystate=self.limit_relaystate,
            name=self.name,
            reauth=self.reauth,
            single_logout_url=self.single_logout_url,
            single_sign_on_url=self.single_sign_on_url,
            user_claim_type=self.user_claim_type,
            user_name=self.user_name,
            vdomparam=self.vdomparam)


def get_saml(name: Optional[str] = None,
             vdomparam: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSamlResult:
    """
    Use this data source to get information on an fortios user saml


    :param str name: Specify the name of the desired user saml.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fortios:user/getSaml:getSaml', __args__, opts=opts, typ=GetSamlResult).value

    return AwaitableGetSamlResult(
        adfs_claim=pulumi.get(__ret__, 'adfs_claim'),
        auth_url=pulumi.get(__ret__, 'auth_url'),
        cert=pulumi.get(__ret__, 'cert'),
        clock_tolerance=pulumi.get(__ret__, 'clock_tolerance'),
        digest_method=pulumi.get(__ret__, 'digest_method'),
        entity_id=pulumi.get(__ret__, 'entity_id'),
        group_claim_type=pulumi.get(__ret__, 'group_claim_type'),
        group_name=pulumi.get(__ret__, 'group_name'),
        id=pulumi.get(__ret__, 'id'),
        idp_cert=pulumi.get(__ret__, 'idp_cert'),
        idp_entity_id=pulumi.get(__ret__, 'idp_entity_id'),
        idp_single_logout_url=pulumi.get(__ret__, 'idp_single_logout_url'),
        idp_single_sign_on_url=pulumi.get(__ret__, 'idp_single_sign_on_url'),
        limit_relaystate=pulumi.get(__ret__, 'limit_relaystate'),
        name=pulumi.get(__ret__, 'name'),
        reauth=pulumi.get(__ret__, 'reauth'),
        single_logout_url=pulumi.get(__ret__, 'single_logout_url'),
        single_sign_on_url=pulumi.get(__ret__, 'single_sign_on_url'),
        user_claim_type=pulumi.get(__ret__, 'user_claim_type'),
        user_name=pulumi.get(__ret__, 'user_name'),
        vdomparam=pulumi.get(__ret__, 'vdomparam'))


@_utilities.lift_output_func(get_saml)
def get_saml_output(name: Optional[pulumi.Input[str]] = None,
                    vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSamlResult]:
    """
    Use this data source to get information on an fortios user saml


    :param str name: Specify the name of the desired user saml.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
