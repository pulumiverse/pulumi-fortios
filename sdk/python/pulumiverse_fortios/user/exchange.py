# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExchangeArgs', 'Exchange']

@pulumi.input_type
class ExchangeArgs:
    def __init__(__self__, *,
                 auth_level: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 auto_discover_kdc: Optional[pulumi.Input[str]] = None,
                 connect_protocol: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http_auth_type: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 kdc_ips: Optional[pulumi.Input[Sequence[pulumi.Input['ExchangeKdcIpArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Exchange resource.
        :param pulumi.Input[str] auth_level: Authentication security level used for the RPC protocol layer. Valid values: `connect`, `call`, `packet`, `integrity`, `privacy`.
        :param pulumi.Input[str] auth_type: Authentication security type used for the RPC protocol layer. Valid values: `spnego`, `ntlm`, `kerberos`.
        :param pulumi.Input[str] auto_discover_kdc: Enable/disable automatic discovery of KDC IP addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] connect_protocol: Connection protocol used to connect to MS Exchange service. Valid values: `rpc-over-tcp`, `rpc-over-http`, `rpc-over-https`.
        :param pulumi.Input[str] domain_name: MS Exchange server fully qualified domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] http_auth_type: Authentication security type used for the HTTP transport. Valid values: `basic`, `ntlm`.
        :param pulumi.Input[str] ip: Server IPv4 address.
        :param pulumi.Input[Sequence[pulumi.Input['ExchangeKdcIpArgs']]] kdc_ips: KDC IPv4 addresses for Kerberos authentication. The structure of `kdc_ip` block is documented below.
        :param pulumi.Input[str] name: MS Exchange server entry name.
        :param pulumi.Input[str] password: Password for the specified username.
        :param pulumi.Input[str] server_name: MS Exchange server hostname.
        :param pulumi.Input[str] ssl_min_proto_version: Minimum SSL/TLS protocol version for HTTPS transport (default is to follow system global setting).
        :param pulumi.Input[str] username: User name used to sign in to the server. Must have proper permissions for service.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if auth_level is not None:
            pulumi.set(__self__, "auth_level", auth_level)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if auto_discover_kdc is not None:
            pulumi.set(__self__, "auto_discover_kdc", auto_discover_kdc)
        if connect_protocol is not None:
            pulumi.set(__self__, "connect_protocol", connect_protocol)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if http_auth_type is not None:
            pulumi.set(__self__, "http_auth_type", http_auth_type)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if kdc_ips is not None:
            pulumi.set(__self__, "kdc_ips", kdc_ips)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if ssl_min_proto_version is not None:
            pulumi.set(__self__, "ssl_min_proto_version", ssl_min_proto_version)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="authLevel")
    def auth_level(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication security level used for the RPC protocol layer. Valid values: `connect`, `call`, `packet`, `integrity`, `privacy`.
        """
        return pulumi.get(self, "auth_level")

    @auth_level.setter
    def auth_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_level", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication security type used for the RPC protocol layer. Valid values: `spnego`, `ntlm`, `kerberos`.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="autoDiscoverKdc")
    def auto_discover_kdc(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic discovery of KDC IP addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discover_kdc")

    @auto_discover_kdc.setter
    def auto_discover_kdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discover_kdc", value)

    @property
    @pulumi.getter(name="connectProtocol")
    def connect_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Connection protocol used to connect to MS Exchange service. Valid values: `rpc-over-tcp`, `rpc-over-http`, `rpc-over-https`.
        """
        return pulumi.get(self, "connect_protocol")

    @connect_protocol.setter
    def connect_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_protocol", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        MS Exchange server fully qualified domain name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="httpAuthType")
    def http_auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication security type used for the HTTP transport. Valid values: `basic`, `ntlm`.
        """
        return pulumi.get(self, "http_auth_type")

    @http_auth_type.setter
    def http_auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_auth_type", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Server IPv4 address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="kdcIps")
    def kdc_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExchangeKdcIpArgs']]]]:
        """
        KDC IPv4 addresses for Kerberos authentication. The structure of `kdc_ip` block is documented below.
        """
        return pulumi.get(self, "kdc_ips")

    @kdc_ips.setter
    def kdc_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExchangeKdcIpArgs']]]]):
        pulumi.set(self, "kdc_ips", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        MS Exchange server entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for the specified username.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        MS Exchange server hostname.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum SSL/TLS protocol version for HTTPS transport (default is to follow system global setting).
        """
        return pulumi.get(self, "ssl_min_proto_version")

    @ssl_min_proto_version.setter
    def ssl_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_proto_version", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        User name used to sign in to the server. Must have proper permissions for service.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ExchangeState:
    def __init__(__self__, *,
                 auth_level: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 auto_discover_kdc: Optional[pulumi.Input[str]] = None,
                 connect_protocol: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http_auth_type: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 kdc_ips: Optional[pulumi.Input[Sequence[pulumi.Input['ExchangeKdcIpArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Exchange resources.
        :param pulumi.Input[str] auth_level: Authentication security level used for the RPC protocol layer. Valid values: `connect`, `call`, `packet`, `integrity`, `privacy`.
        :param pulumi.Input[str] auth_type: Authentication security type used for the RPC protocol layer. Valid values: `spnego`, `ntlm`, `kerberos`.
        :param pulumi.Input[str] auto_discover_kdc: Enable/disable automatic discovery of KDC IP addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] connect_protocol: Connection protocol used to connect to MS Exchange service. Valid values: `rpc-over-tcp`, `rpc-over-http`, `rpc-over-https`.
        :param pulumi.Input[str] domain_name: MS Exchange server fully qualified domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] http_auth_type: Authentication security type used for the HTTP transport. Valid values: `basic`, `ntlm`.
        :param pulumi.Input[str] ip: Server IPv4 address.
        :param pulumi.Input[Sequence[pulumi.Input['ExchangeKdcIpArgs']]] kdc_ips: KDC IPv4 addresses for Kerberos authentication. The structure of `kdc_ip` block is documented below.
        :param pulumi.Input[str] name: MS Exchange server entry name.
        :param pulumi.Input[str] password: Password for the specified username.
        :param pulumi.Input[str] server_name: MS Exchange server hostname.
        :param pulumi.Input[str] ssl_min_proto_version: Minimum SSL/TLS protocol version for HTTPS transport (default is to follow system global setting).
        :param pulumi.Input[str] username: User name used to sign in to the server. Must have proper permissions for service.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if auth_level is not None:
            pulumi.set(__self__, "auth_level", auth_level)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if auto_discover_kdc is not None:
            pulumi.set(__self__, "auto_discover_kdc", auto_discover_kdc)
        if connect_protocol is not None:
            pulumi.set(__self__, "connect_protocol", connect_protocol)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if http_auth_type is not None:
            pulumi.set(__self__, "http_auth_type", http_auth_type)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if kdc_ips is not None:
            pulumi.set(__self__, "kdc_ips", kdc_ips)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if ssl_min_proto_version is not None:
            pulumi.set(__self__, "ssl_min_proto_version", ssl_min_proto_version)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="authLevel")
    def auth_level(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication security level used for the RPC protocol layer. Valid values: `connect`, `call`, `packet`, `integrity`, `privacy`.
        """
        return pulumi.get(self, "auth_level")

    @auth_level.setter
    def auth_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_level", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication security type used for the RPC protocol layer. Valid values: `spnego`, `ntlm`, `kerberos`.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="autoDiscoverKdc")
    def auto_discover_kdc(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic discovery of KDC IP addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discover_kdc")

    @auto_discover_kdc.setter
    def auto_discover_kdc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_discover_kdc", value)

    @property
    @pulumi.getter(name="connectProtocol")
    def connect_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Connection protocol used to connect to MS Exchange service. Valid values: `rpc-over-tcp`, `rpc-over-http`, `rpc-over-https`.
        """
        return pulumi.get(self, "connect_protocol")

    @connect_protocol.setter
    def connect_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_protocol", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        MS Exchange server fully qualified domain name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="httpAuthType")
    def http_auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication security type used for the HTTP transport. Valid values: `basic`, `ntlm`.
        """
        return pulumi.get(self, "http_auth_type")

    @http_auth_type.setter
    def http_auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_auth_type", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Server IPv4 address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="kdcIps")
    def kdc_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExchangeKdcIpArgs']]]]:
        """
        KDC IPv4 addresses for Kerberos authentication. The structure of `kdc_ip` block is documented below.
        """
        return pulumi.get(self, "kdc_ips")

    @kdc_ips.setter
    def kdc_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExchangeKdcIpArgs']]]]):
        pulumi.set(self, "kdc_ips", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        MS Exchange server entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for the specified username.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        MS Exchange server hostname.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum SSL/TLS protocol version for HTTPS transport (default is to follow system global setting).
        """
        return pulumi.get(self, "ssl_min_proto_version")

    @ssl_min_proto_version.setter
    def ssl_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_proto_version", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        User name used to sign in to the server. Must have proper permissions for service.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Exchange(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_level: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 auto_discover_kdc: Optional[pulumi.Input[str]] = None,
                 connect_protocol: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http_auth_type: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 kdc_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExchangeKdcIpArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure MS Exchange server entries. Applies to FortiOS Version `>= 6.2.4`.

        ## Import

        User Exchange can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/exchange:Exchange labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/exchange:Exchange labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_level: Authentication security level used for the RPC protocol layer. Valid values: `connect`, `call`, `packet`, `integrity`, `privacy`.
        :param pulumi.Input[str] auth_type: Authentication security type used for the RPC protocol layer. Valid values: `spnego`, `ntlm`, `kerberos`.
        :param pulumi.Input[str] auto_discover_kdc: Enable/disable automatic discovery of KDC IP addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] connect_protocol: Connection protocol used to connect to MS Exchange service. Valid values: `rpc-over-tcp`, `rpc-over-http`, `rpc-over-https`.
        :param pulumi.Input[str] domain_name: MS Exchange server fully qualified domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] http_auth_type: Authentication security type used for the HTTP transport. Valid values: `basic`, `ntlm`.
        :param pulumi.Input[str] ip: Server IPv4 address.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExchangeKdcIpArgs']]]] kdc_ips: KDC IPv4 addresses for Kerberos authentication. The structure of `kdc_ip` block is documented below.
        :param pulumi.Input[str] name: MS Exchange server entry name.
        :param pulumi.Input[str] password: Password for the specified username.
        :param pulumi.Input[str] server_name: MS Exchange server hostname.
        :param pulumi.Input[str] ssl_min_proto_version: Minimum SSL/TLS protocol version for HTTPS transport (default is to follow system global setting).
        :param pulumi.Input[str] username: User name used to sign in to the server. Must have proper permissions for service.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ExchangeArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure MS Exchange server entries. Applies to FortiOS Version `>= 6.2.4`.

        ## Import

        User Exchange can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/exchange:Exchange labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/exchange:Exchange labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ExchangeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExchangeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_level: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 auto_discover_kdc: Optional[pulumi.Input[str]] = None,
                 connect_protocol: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 http_auth_type: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 kdc_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExchangeKdcIpArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExchangeArgs.__new__(ExchangeArgs)

            __props__.__dict__["auth_level"] = auth_level
            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["auto_discover_kdc"] = auto_discover_kdc
            __props__.__dict__["connect_protocol"] = connect_protocol
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["http_auth_type"] = http_auth_type
            __props__.__dict__["ip"] = ip
            __props__.__dict__["kdc_ips"] = kdc_ips
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["server_name"] = server_name
            __props__.__dict__["ssl_min_proto_version"] = ssl_min_proto_version
            __props__.__dict__["username"] = username
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Exchange, __self__).__init__(
            'fortios:user/exchange:Exchange',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_level: Optional[pulumi.Input[str]] = None,
            auth_type: Optional[pulumi.Input[str]] = None,
            auto_discover_kdc: Optional[pulumi.Input[str]] = None,
            connect_protocol: Optional[pulumi.Input[str]] = None,
            domain_name: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            http_auth_type: Optional[pulumi.Input[str]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            kdc_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExchangeKdcIpArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            server_name: Optional[pulumi.Input[str]] = None,
            ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Exchange':
        """
        Get an existing Exchange resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_level: Authentication security level used for the RPC protocol layer. Valid values: `connect`, `call`, `packet`, `integrity`, `privacy`.
        :param pulumi.Input[str] auth_type: Authentication security type used for the RPC protocol layer. Valid values: `spnego`, `ntlm`, `kerberos`.
        :param pulumi.Input[str] auto_discover_kdc: Enable/disable automatic discovery of KDC IP addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] connect_protocol: Connection protocol used to connect to MS Exchange service. Valid values: `rpc-over-tcp`, `rpc-over-http`, `rpc-over-https`.
        :param pulumi.Input[str] domain_name: MS Exchange server fully qualified domain name.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] http_auth_type: Authentication security type used for the HTTP transport. Valid values: `basic`, `ntlm`.
        :param pulumi.Input[str] ip: Server IPv4 address.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExchangeKdcIpArgs']]]] kdc_ips: KDC IPv4 addresses for Kerberos authentication. The structure of `kdc_ip` block is documented below.
        :param pulumi.Input[str] name: MS Exchange server entry name.
        :param pulumi.Input[str] password: Password for the specified username.
        :param pulumi.Input[str] server_name: MS Exchange server hostname.
        :param pulumi.Input[str] ssl_min_proto_version: Minimum SSL/TLS protocol version for HTTPS transport (default is to follow system global setting).
        :param pulumi.Input[str] username: User name used to sign in to the server. Must have proper permissions for service.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExchangeState.__new__(_ExchangeState)

        __props__.__dict__["auth_level"] = auth_level
        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["auto_discover_kdc"] = auto_discover_kdc
        __props__.__dict__["connect_protocol"] = connect_protocol
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["http_auth_type"] = http_auth_type
        __props__.__dict__["ip"] = ip
        __props__.__dict__["kdc_ips"] = kdc_ips
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["server_name"] = server_name
        __props__.__dict__["ssl_min_proto_version"] = ssl_min_proto_version
        __props__.__dict__["username"] = username
        __props__.__dict__["vdomparam"] = vdomparam
        return Exchange(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authLevel")
    def auth_level(self) -> pulumi.Output[str]:
        """
        Authentication security level used for the RPC protocol layer. Valid values: `connect`, `call`, `packet`, `integrity`, `privacy`.
        """
        return pulumi.get(self, "auth_level")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[str]:
        """
        Authentication security type used for the RPC protocol layer. Valid values: `spnego`, `ntlm`, `kerberos`.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="autoDiscoverKdc")
    def auto_discover_kdc(self) -> pulumi.Output[str]:
        """
        Enable/disable automatic discovery of KDC IP addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_discover_kdc")

    @property
    @pulumi.getter(name="connectProtocol")
    def connect_protocol(self) -> pulumi.Output[str]:
        """
        Connection protocol used to connect to MS Exchange service. Valid values: `rpc-over-tcp`, `rpc-over-http`, `rpc-over-https`.
        """
        return pulumi.get(self, "connect_protocol")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[str]:
        """
        MS Exchange server fully qualified domain name.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="httpAuthType")
    def http_auth_type(self) -> pulumi.Output[str]:
        """
        Authentication security type used for the HTTP transport. Valid values: `basic`, `ntlm`.
        """
        return pulumi.get(self, "http_auth_type")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        """
        Server IPv4 address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="kdcIps")
    def kdc_ips(self) -> pulumi.Output[Optional[Sequence['outputs.ExchangeKdcIp']]]:
        """
        KDC IPv4 addresses for Kerberos authentication. The structure of `kdc_ip` block is documented below.
        """
        return pulumi.get(self, "kdc_ips")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        MS Exchange server entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password for the specified username.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> pulumi.Output[str]:
        """
        MS Exchange server hostname.
        """
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> pulumi.Output[str]:
        """
        Minimum SSL/TLS protocol version for HTTPS transport (default is to follow system global setting).
        """
        return pulumi.get(self, "ssl_min_proto_version")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        User name used to sign in to the server. Must have proper permissions for service.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

