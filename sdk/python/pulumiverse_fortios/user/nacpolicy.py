# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NacpolicyArgs', 'Nacpolicy']

@pulumi.input_type
class NacpolicyArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_tag: Optional[pulumi.Input[str]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 firewall_address: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 hw_vendor: Optional[pulumi.Input[str]] = None,
                 hw_version: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySeverityArgs']]]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 ssid_policy: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sw_version: Optional[pulumi.Input[str]] = None,
                 switch_auto_auth: Optional[pulumi.Input[str]] = None,
                 switch_fortilink: Optional[pulumi.Input[str]] = None,
                 switch_groups: Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchGroupArgs']]]] = None,
                 switch_mac_policy: Optional[pulumi.Input[str]] = None,
                 switch_port_policy: Optional[pulumi.Input[str]] = None,
                 switch_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchScopeArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 user_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Nacpolicy resource.
        :param pulumi.Input[str] category: Category of NAC policy.
        :param pulumi.Input[str] description: Description for the NAC policy matching pattern.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ems_tag: NAC policy matching EMS tag.
        :param pulumi.Input[str] family: NAC policy matching family.
        :param pulumi.Input[str] firewall_address: Dynamic firewall address to associate MAC which match this policy.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] host: NAC policy matching host.
        :param pulumi.Input[str] hw_vendor: NAC policy matching hardware vendor.
        :param pulumi.Input[str] hw_version: NAC policy matching hardware version.
        :param pulumi.Input[str] mac: NAC policy matching MAC address.
        :param pulumi.Input[str] name: NAC policy name.
        :param pulumi.Input[str] os: NAC policy matching operating system.
        :param pulumi.Input[Sequence[pulumi.Input['NacpolicySeverityArgs']]] severities: NAC policy matching devices vulnerability severity lists. The structure of `severity` block is documented below.
        :param pulumi.Input[str] src: NAC policy matching source.
        :param pulumi.Input[str] ssid_policy: SSID policy to be applied on the matched NAC policy.
        :param pulumi.Input[str] status: Enable/disable NAC policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sw_version: NAC policy matching software version.
        :param pulumi.Input[str] switch_auto_auth: NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
        :param pulumi.Input[str] switch_fortilink: FortiLink interface for which this NAC policy belongs to.
        :param pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchGroupArgs']]] switch_groups: List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switch_group` block is documented below.
        :param pulumi.Input[str] switch_mac_policy: switch-mac-policy to be applied on the matched NAC policy.
        :param pulumi.Input[str] switch_port_policy: switch-port-policy to be applied on the matched NAC policy.
        :param pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchScopeArgs']]] switch_scopes: List of managed FortiSwitches on which NAC policy can be applied. The structure of `switch_scope` block is documented below.
        :param pulumi.Input[str] type: NAC policy matching type.
        :param pulumi.Input[str] user: NAC policy matching user.
        :param pulumi.Input[str] user_group: NAC policy matching user group.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ems_tag is not None:
            pulumi.set(__self__, "ems_tag", ems_tag)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if firewall_address is not None:
            pulumi.set(__self__, "firewall_address", firewall_address)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if hw_vendor is not None:
            pulumi.set(__self__, "hw_vendor", hw_vendor)
        if hw_version is not None:
            pulumi.set(__self__, "hw_version", hw_version)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)
        if src is not None:
            pulumi.set(__self__, "src", src)
        if ssid_policy is not None:
            pulumi.set(__self__, "ssid_policy", ssid_policy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sw_version is not None:
            pulumi.set(__self__, "sw_version", sw_version)
        if switch_auto_auth is not None:
            pulumi.set(__self__, "switch_auto_auth", switch_auto_auth)
        if switch_fortilink is not None:
            pulumi.set(__self__, "switch_fortilink", switch_fortilink)
        if switch_groups is not None:
            pulumi.set(__self__, "switch_groups", switch_groups)
        if switch_mac_policy is not None:
            pulumi.set(__self__, "switch_mac_policy", switch_mac_policy)
        if switch_port_policy is not None:
            pulumi.set(__self__, "switch_port_policy", switch_port_policy)
        if switch_scopes is not None:
            pulumi.set(__self__, "switch_scopes", switch_scopes)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Category of NAC policy.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the NAC policy matching pattern.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emsTag")
    def ems_tag(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching EMS tag.
        """
        return pulumi.get(self, "ems_tag")

    @ems_tag.setter
    def ems_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ems_tag", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching family.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter(name="firewallAddress")
    def firewall_address(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic firewall address to associate MAC which match this policy.
        """
        return pulumi.get(self, "firewall_address")

    @firewall_address.setter
    def firewall_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_address", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="hwVendor")
    def hw_vendor(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching hardware vendor.
        """
        return pulumi.get(self, "hw_vendor")

    @hw_vendor.setter
    def hw_vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_vendor", value)

    @property
    @pulumi.getter(name="hwVersion")
    def hw_version(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching hardware version.
        """
        return pulumi.get(self, "hw_version")

    @hw_version.setter
    def hw_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_version", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching MAC address.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching operating system.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def severities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySeverityArgs']]]]:
        """
        NAC policy matching devices vulnerability severity lists. The structure of `severity` block is documented below.
        """
        return pulumi.get(self, "severities")

    @severities.setter
    def severities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySeverityArgs']]]]):
        pulumi.set(self, "severities", value)

    @property
    @pulumi.getter
    def src(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching source.
        """
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src", value)

    @property
    @pulumi.getter(name="ssidPolicy")
    def ssid_policy(self) -> Optional[pulumi.Input[str]]:
        """
        SSID policy to be applied on the matched NAC policy.
        """
        return pulumi.get(self, "ssid_policy")

    @ssid_policy.setter
    def ssid_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssid_policy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAC policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="swVersion")
    def sw_version(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching software version.
        """
        return pulumi.get(self, "sw_version")

    @sw_version.setter
    def sw_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sw_version", value)

    @property
    @pulumi.getter(name="switchAutoAuth")
    def switch_auto_auth(self) -> Optional[pulumi.Input[str]]:
        """
        NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
        """
        return pulumi.get(self, "switch_auto_auth")

    @switch_auto_auth.setter
    def switch_auto_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_auto_auth", value)

    @property
    @pulumi.getter(name="switchFortilink")
    def switch_fortilink(self) -> Optional[pulumi.Input[str]]:
        """
        FortiLink interface for which this NAC policy belongs to.
        """
        return pulumi.get(self, "switch_fortilink")

    @switch_fortilink.setter
    def switch_fortilink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_fortilink", value)

    @property
    @pulumi.getter(name="switchGroups")
    def switch_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchGroupArgs']]]]:
        """
        List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switch_group` block is documented below.
        """
        return pulumi.get(self, "switch_groups")

    @switch_groups.setter
    def switch_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchGroupArgs']]]]):
        pulumi.set(self, "switch_groups", value)

    @property
    @pulumi.getter(name="switchMacPolicy")
    def switch_mac_policy(self) -> Optional[pulumi.Input[str]]:
        """
        switch-mac-policy to be applied on the matched NAC policy.
        """
        return pulumi.get(self, "switch_mac_policy")

    @switch_mac_policy.setter
    def switch_mac_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_mac_policy", value)

    @property
    @pulumi.getter(name="switchPortPolicy")
    def switch_port_policy(self) -> Optional[pulumi.Input[str]]:
        """
        switch-port-policy to be applied on the matched NAC policy.
        """
        return pulumi.get(self, "switch_port_policy")

    @switch_port_policy.setter
    def switch_port_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_port_policy", value)

    @property
    @pulumi.getter(name="switchScopes")
    def switch_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchScopeArgs']]]]:
        """
        List of managed FortiSwitches on which NAC policy can be applied. The structure of `switch_scope` block is documented below.
        """
        return pulumi.get(self, "switch_scopes")

    @switch_scopes.setter
    def switch_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchScopeArgs']]]]):
        pulumi.set(self, "switch_scopes", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching user.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching user group.
        """
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_group", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _NacpolicyState:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_tag: Optional[pulumi.Input[str]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 firewall_address: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 hw_vendor: Optional[pulumi.Input[str]] = None,
                 hw_version: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySeverityArgs']]]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 ssid_policy: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sw_version: Optional[pulumi.Input[str]] = None,
                 switch_auto_auth: Optional[pulumi.Input[str]] = None,
                 switch_fortilink: Optional[pulumi.Input[str]] = None,
                 switch_groups: Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchGroupArgs']]]] = None,
                 switch_mac_policy: Optional[pulumi.Input[str]] = None,
                 switch_port_policy: Optional[pulumi.Input[str]] = None,
                 switch_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchScopeArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 user_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Nacpolicy resources.
        :param pulumi.Input[str] category: Category of NAC policy.
        :param pulumi.Input[str] description: Description for the NAC policy matching pattern.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ems_tag: NAC policy matching EMS tag.
        :param pulumi.Input[str] family: NAC policy matching family.
        :param pulumi.Input[str] firewall_address: Dynamic firewall address to associate MAC which match this policy.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] host: NAC policy matching host.
        :param pulumi.Input[str] hw_vendor: NAC policy matching hardware vendor.
        :param pulumi.Input[str] hw_version: NAC policy matching hardware version.
        :param pulumi.Input[str] mac: NAC policy matching MAC address.
        :param pulumi.Input[str] name: NAC policy name.
        :param pulumi.Input[str] os: NAC policy matching operating system.
        :param pulumi.Input[Sequence[pulumi.Input['NacpolicySeverityArgs']]] severities: NAC policy matching devices vulnerability severity lists. The structure of `severity` block is documented below.
        :param pulumi.Input[str] src: NAC policy matching source.
        :param pulumi.Input[str] ssid_policy: SSID policy to be applied on the matched NAC policy.
        :param pulumi.Input[str] status: Enable/disable NAC policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sw_version: NAC policy matching software version.
        :param pulumi.Input[str] switch_auto_auth: NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
        :param pulumi.Input[str] switch_fortilink: FortiLink interface for which this NAC policy belongs to.
        :param pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchGroupArgs']]] switch_groups: List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switch_group` block is documented below.
        :param pulumi.Input[str] switch_mac_policy: switch-mac-policy to be applied on the matched NAC policy.
        :param pulumi.Input[str] switch_port_policy: switch-port-policy to be applied on the matched NAC policy.
        :param pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchScopeArgs']]] switch_scopes: List of managed FortiSwitches on which NAC policy can be applied. The structure of `switch_scope` block is documented below.
        :param pulumi.Input[str] type: NAC policy matching type.
        :param pulumi.Input[str] user: NAC policy matching user.
        :param pulumi.Input[str] user_group: NAC policy matching user group.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if ems_tag is not None:
            pulumi.set(__self__, "ems_tag", ems_tag)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if firewall_address is not None:
            pulumi.set(__self__, "firewall_address", firewall_address)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if hw_vendor is not None:
            pulumi.set(__self__, "hw_vendor", hw_vendor)
        if hw_version is not None:
            pulumi.set(__self__, "hw_version", hw_version)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)
        if src is not None:
            pulumi.set(__self__, "src", src)
        if ssid_policy is not None:
            pulumi.set(__self__, "ssid_policy", ssid_policy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sw_version is not None:
            pulumi.set(__self__, "sw_version", sw_version)
        if switch_auto_auth is not None:
            pulumi.set(__self__, "switch_auto_auth", switch_auto_auth)
        if switch_fortilink is not None:
            pulumi.set(__self__, "switch_fortilink", switch_fortilink)
        if switch_groups is not None:
            pulumi.set(__self__, "switch_groups", switch_groups)
        if switch_mac_policy is not None:
            pulumi.set(__self__, "switch_mac_policy", switch_mac_policy)
        if switch_port_policy is not None:
            pulumi.set(__self__, "switch_port_policy", switch_port_policy)
        if switch_scopes is not None:
            pulumi.set(__self__, "switch_scopes", switch_scopes)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Category of NAC policy.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the NAC policy matching pattern.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="emsTag")
    def ems_tag(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching EMS tag.
        """
        return pulumi.get(self, "ems_tag")

    @ems_tag.setter
    def ems_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ems_tag", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching family.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter(name="firewallAddress")
    def firewall_address(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic firewall address to associate MAC which match this policy.
        """
        return pulumi.get(self, "firewall_address")

    @firewall_address.setter
    def firewall_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_address", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="hwVendor")
    def hw_vendor(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching hardware vendor.
        """
        return pulumi.get(self, "hw_vendor")

    @hw_vendor.setter
    def hw_vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_vendor", value)

    @property
    @pulumi.getter(name="hwVersion")
    def hw_version(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching hardware version.
        """
        return pulumi.get(self, "hw_version")

    @hw_version.setter
    def hw_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_version", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching MAC address.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching operating system.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def severities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySeverityArgs']]]]:
        """
        NAC policy matching devices vulnerability severity lists. The structure of `severity` block is documented below.
        """
        return pulumi.get(self, "severities")

    @severities.setter
    def severities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySeverityArgs']]]]):
        pulumi.set(self, "severities", value)

    @property
    @pulumi.getter
    def src(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching source.
        """
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src", value)

    @property
    @pulumi.getter(name="ssidPolicy")
    def ssid_policy(self) -> Optional[pulumi.Input[str]]:
        """
        SSID policy to be applied on the matched NAC policy.
        """
        return pulumi.get(self, "ssid_policy")

    @ssid_policy.setter
    def ssid_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssid_policy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NAC policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="swVersion")
    def sw_version(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching software version.
        """
        return pulumi.get(self, "sw_version")

    @sw_version.setter
    def sw_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sw_version", value)

    @property
    @pulumi.getter(name="switchAutoAuth")
    def switch_auto_auth(self) -> Optional[pulumi.Input[str]]:
        """
        NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
        """
        return pulumi.get(self, "switch_auto_auth")

    @switch_auto_auth.setter
    def switch_auto_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_auto_auth", value)

    @property
    @pulumi.getter(name="switchFortilink")
    def switch_fortilink(self) -> Optional[pulumi.Input[str]]:
        """
        FortiLink interface for which this NAC policy belongs to.
        """
        return pulumi.get(self, "switch_fortilink")

    @switch_fortilink.setter
    def switch_fortilink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_fortilink", value)

    @property
    @pulumi.getter(name="switchGroups")
    def switch_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchGroupArgs']]]]:
        """
        List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switch_group` block is documented below.
        """
        return pulumi.get(self, "switch_groups")

    @switch_groups.setter
    def switch_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchGroupArgs']]]]):
        pulumi.set(self, "switch_groups", value)

    @property
    @pulumi.getter(name="switchMacPolicy")
    def switch_mac_policy(self) -> Optional[pulumi.Input[str]]:
        """
        switch-mac-policy to be applied on the matched NAC policy.
        """
        return pulumi.get(self, "switch_mac_policy")

    @switch_mac_policy.setter
    def switch_mac_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_mac_policy", value)

    @property
    @pulumi.getter(name="switchPortPolicy")
    def switch_port_policy(self) -> Optional[pulumi.Input[str]]:
        """
        switch-port-policy to be applied on the matched NAC policy.
        """
        return pulumi.get(self, "switch_port_policy")

    @switch_port_policy.setter
    def switch_port_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_port_policy", value)

    @property
    @pulumi.getter(name="switchScopes")
    def switch_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchScopeArgs']]]]:
        """
        List of managed FortiSwitches on which NAC policy can be applied. The structure of `switch_scope` block is documented below.
        """
        return pulumi.get(self, "switch_scopes")

    @switch_scopes.setter
    def switch_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NacpolicySwitchScopeArgs']]]]):
        pulumi.set(self, "switch_scopes", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching user.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[pulumi.Input[str]]:
        """
        NAC policy matching user group.
        """
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_group", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Nacpolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_tag: Optional[pulumi.Input[str]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 firewall_address: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 hw_vendor: Optional[pulumi.Input[str]] = None,
                 hw_version: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySeverityArgs']]]]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 ssid_policy: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sw_version: Optional[pulumi.Input[str]] = None,
                 switch_auto_auth: Optional[pulumi.Input[str]] = None,
                 switch_fortilink: Optional[pulumi.Input[str]] = None,
                 switch_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySwitchGroupArgs']]]]] = None,
                 switch_mac_policy: Optional[pulumi.Input[str]] = None,
                 switch_port_policy: Optional[pulumi.Input[str]] = None,
                 switch_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySwitchScopeArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 user_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure NAC policy matching pattern to identify matching NAC devices. Applies to FortiOS Version `>= 6.4.0`.

        ## Import

        User NacPolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/nacpolicy:Nacpolicy labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/nacpolicy:Nacpolicy labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] category: Category of NAC policy.
        :param pulumi.Input[str] description: Description for the NAC policy matching pattern.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ems_tag: NAC policy matching EMS tag.
        :param pulumi.Input[str] family: NAC policy matching family.
        :param pulumi.Input[str] firewall_address: Dynamic firewall address to associate MAC which match this policy.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] host: NAC policy matching host.
        :param pulumi.Input[str] hw_vendor: NAC policy matching hardware vendor.
        :param pulumi.Input[str] hw_version: NAC policy matching hardware version.
        :param pulumi.Input[str] mac: NAC policy matching MAC address.
        :param pulumi.Input[str] name: NAC policy name.
        :param pulumi.Input[str] os: NAC policy matching operating system.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySeverityArgs']]]] severities: NAC policy matching devices vulnerability severity lists. The structure of `severity` block is documented below.
        :param pulumi.Input[str] src: NAC policy matching source.
        :param pulumi.Input[str] ssid_policy: SSID policy to be applied on the matched NAC policy.
        :param pulumi.Input[str] status: Enable/disable NAC policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sw_version: NAC policy matching software version.
        :param pulumi.Input[str] switch_auto_auth: NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
        :param pulumi.Input[str] switch_fortilink: FortiLink interface for which this NAC policy belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySwitchGroupArgs']]]] switch_groups: List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switch_group` block is documented below.
        :param pulumi.Input[str] switch_mac_policy: switch-mac-policy to be applied on the matched NAC policy.
        :param pulumi.Input[str] switch_port_policy: switch-port-policy to be applied on the matched NAC policy.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySwitchScopeArgs']]]] switch_scopes: List of managed FortiSwitches on which NAC policy can be applied. The structure of `switch_scope` block is documented below.
        :param pulumi.Input[str] type: NAC policy matching type.
        :param pulumi.Input[str] user: NAC policy matching user.
        :param pulumi.Input[str] user_group: NAC policy matching user group.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NacpolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure NAC policy matching pattern to identify matching NAC devices. Applies to FortiOS Version `>= 6.4.0`.

        ## Import

        User NacPolicy can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/nacpolicy:Nacpolicy labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/nacpolicy:Nacpolicy labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param NacpolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NacpolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 ems_tag: Optional[pulumi.Input[str]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 firewall_address: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 hw_vendor: Optional[pulumi.Input[str]] = None,
                 hw_version: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySeverityArgs']]]]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 ssid_policy: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sw_version: Optional[pulumi.Input[str]] = None,
                 switch_auto_auth: Optional[pulumi.Input[str]] = None,
                 switch_fortilink: Optional[pulumi.Input[str]] = None,
                 switch_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySwitchGroupArgs']]]]] = None,
                 switch_mac_policy: Optional[pulumi.Input[str]] = None,
                 switch_port_policy: Optional[pulumi.Input[str]] = None,
                 switch_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySwitchScopeArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 user_group: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NacpolicyArgs.__new__(NacpolicyArgs)

            __props__.__dict__["category"] = category
            __props__.__dict__["description"] = description
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["ems_tag"] = ems_tag
            __props__.__dict__["family"] = family
            __props__.__dict__["firewall_address"] = firewall_address
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["host"] = host
            __props__.__dict__["hw_vendor"] = hw_vendor
            __props__.__dict__["hw_version"] = hw_version
            __props__.__dict__["mac"] = mac
            __props__.__dict__["name"] = name
            __props__.__dict__["os"] = os
            __props__.__dict__["severities"] = severities
            __props__.__dict__["src"] = src
            __props__.__dict__["ssid_policy"] = ssid_policy
            __props__.__dict__["status"] = status
            __props__.__dict__["sw_version"] = sw_version
            __props__.__dict__["switch_auto_auth"] = switch_auto_auth
            __props__.__dict__["switch_fortilink"] = switch_fortilink
            __props__.__dict__["switch_groups"] = switch_groups
            __props__.__dict__["switch_mac_policy"] = switch_mac_policy
            __props__.__dict__["switch_port_policy"] = switch_port_policy
            __props__.__dict__["switch_scopes"] = switch_scopes
            __props__.__dict__["type"] = type
            __props__.__dict__["user"] = user
            __props__.__dict__["user_group"] = user_group
            __props__.__dict__["vdomparam"] = vdomparam
        super(Nacpolicy, __self__).__init__(
            'fortios:user/nacpolicy:Nacpolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            category: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            ems_tag: Optional[pulumi.Input[str]] = None,
            family: Optional[pulumi.Input[str]] = None,
            firewall_address: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            hw_vendor: Optional[pulumi.Input[str]] = None,
            hw_version: Optional[pulumi.Input[str]] = None,
            mac: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            os: Optional[pulumi.Input[str]] = None,
            severities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySeverityArgs']]]]] = None,
            src: Optional[pulumi.Input[str]] = None,
            ssid_policy: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            sw_version: Optional[pulumi.Input[str]] = None,
            switch_auto_auth: Optional[pulumi.Input[str]] = None,
            switch_fortilink: Optional[pulumi.Input[str]] = None,
            switch_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySwitchGroupArgs']]]]] = None,
            switch_mac_policy: Optional[pulumi.Input[str]] = None,
            switch_port_policy: Optional[pulumi.Input[str]] = None,
            switch_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySwitchScopeArgs']]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            user: Optional[pulumi.Input[str]] = None,
            user_group: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Nacpolicy':
        """
        Get an existing Nacpolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] category: Category of NAC policy.
        :param pulumi.Input[str] description: Description for the NAC policy matching pattern.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] ems_tag: NAC policy matching EMS tag.
        :param pulumi.Input[str] family: NAC policy matching family.
        :param pulumi.Input[str] firewall_address: Dynamic firewall address to associate MAC which match this policy.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] host: NAC policy matching host.
        :param pulumi.Input[str] hw_vendor: NAC policy matching hardware vendor.
        :param pulumi.Input[str] hw_version: NAC policy matching hardware version.
        :param pulumi.Input[str] mac: NAC policy matching MAC address.
        :param pulumi.Input[str] name: NAC policy name.
        :param pulumi.Input[str] os: NAC policy matching operating system.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySeverityArgs']]]] severities: NAC policy matching devices vulnerability severity lists. The structure of `severity` block is documented below.
        :param pulumi.Input[str] src: NAC policy matching source.
        :param pulumi.Input[str] ssid_policy: SSID policy to be applied on the matched NAC policy.
        :param pulumi.Input[str] status: Enable/disable NAC policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sw_version: NAC policy matching software version.
        :param pulumi.Input[str] switch_auto_auth: NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
        :param pulumi.Input[str] switch_fortilink: FortiLink interface for which this NAC policy belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySwitchGroupArgs']]]] switch_groups: List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switch_group` block is documented below.
        :param pulumi.Input[str] switch_mac_policy: switch-mac-policy to be applied on the matched NAC policy.
        :param pulumi.Input[str] switch_port_policy: switch-port-policy to be applied on the matched NAC policy.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NacpolicySwitchScopeArgs']]]] switch_scopes: List of managed FortiSwitches on which NAC policy can be applied. The structure of `switch_scope` block is documented below.
        :param pulumi.Input[str] type: NAC policy matching type.
        :param pulumi.Input[str] user: NAC policy matching user.
        :param pulumi.Input[str] user_group: NAC policy matching user group.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NacpolicyState.__new__(_NacpolicyState)

        __props__.__dict__["category"] = category
        __props__.__dict__["description"] = description
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["ems_tag"] = ems_tag
        __props__.__dict__["family"] = family
        __props__.__dict__["firewall_address"] = firewall_address
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["host"] = host
        __props__.__dict__["hw_vendor"] = hw_vendor
        __props__.__dict__["hw_version"] = hw_version
        __props__.__dict__["mac"] = mac
        __props__.__dict__["name"] = name
        __props__.__dict__["os"] = os
        __props__.__dict__["severities"] = severities
        __props__.__dict__["src"] = src
        __props__.__dict__["ssid_policy"] = ssid_policy
        __props__.__dict__["status"] = status
        __props__.__dict__["sw_version"] = sw_version
        __props__.__dict__["switch_auto_auth"] = switch_auto_auth
        __props__.__dict__["switch_fortilink"] = switch_fortilink
        __props__.__dict__["switch_groups"] = switch_groups
        __props__.__dict__["switch_mac_policy"] = switch_mac_policy
        __props__.__dict__["switch_port_policy"] = switch_port_policy
        __props__.__dict__["switch_scopes"] = switch_scopes
        __props__.__dict__["type"] = type
        __props__.__dict__["user"] = user
        __props__.__dict__["user_group"] = user_group
        __props__.__dict__["vdomparam"] = vdomparam
        return Nacpolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[str]:
        """
        Category of NAC policy.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description for the NAC policy matching pattern.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="emsTag")
    def ems_tag(self) -> pulumi.Output[str]:
        """
        NAC policy matching EMS tag.
        """
        return pulumi.get(self, "ems_tag")

    @property
    @pulumi.getter
    def family(self) -> pulumi.Output[str]:
        """
        NAC policy matching family.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter(name="firewallAddress")
    def firewall_address(self) -> pulumi.Output[str]:
        """
        Dynamic firewall address to associate MAC which match this policy.
        """
        return pulumi.get(self, "firewall_address")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        NAC policy matching host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="hwVendor")
    def hw_vendor(self) -> pulumi.Output[str]:
        """
        NAC policy matching hardware vendor.
        """
        return pulumi.get(self, "hw_vendor")

    @property
    @pulumi.getter(name="hwVersion")
    def hw_version(self) -> pulumi.Output[str]:
        """
        NAC policy matching hardware version.
        """
        return pulumi.get(self, "hw_version")

    @property
    @pulumi.getter
    def mac(self) -> pulumi.Output[str]:
        """
        NAC policy matching MAC address.
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        NAC policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def os(self) -> pulumi.Output[str]:
        """
        NAC policy matching operating system.
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def severities(self) -> pulumi.Output[Optional[Sequence['outputs.NacpolicySeverity']]]:
        """
        NAC policy matching devices vulnerability severity lists. The structure of `severity` block is documented below.
        """
        return pulumi.get(self, "severities")

    @property
    @pulumi.getter
    def src(self) -> pulumi.Output[str]:
        """
        NAC policy matching source.
        """
        return pulumi.get(self, "src")

    @property
    @pulumi.getter(name="ssidPolicy")
    def ssid_policy(self) -> pulumi.Output[str]:
        """
        SSID policy to be applied on the matched NAC policy.
        """
        return pulumi.get(self, "ssid_policy")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable NAC policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="swVersion")
    def sw_version(self) -> pulumi.Output[str]:
        """
        NAC policy matching software version.
        """
        return pulumi.get(self, "sw_version")

    @property
    @pulumi.getter(name="switchAutoAuth")
    def switch_auto_auth(self) -> pulumi.Output[str]:
        """
        NAC device auto authorization when discovered and nac-policy matched. Valid values: `global`, `disable`, `enable`.
        """
        return pulumi.get(self, "switch_auto_auth")

    @property
    @pulumi.getter(name="switchFortilink")
    def switch_fortilink(self) -> pulumi.Output[str]:
        """
        FortiLink interface for which this NAC policy belongs to.
        """
        return pulumi.get(self, "switch_fortilink")

    @property
    @pulumi.getter(name="switchGroups")
    def switch_groups(self) -> pulumi.Output[Optional[Sequence['outputs.NacpolicySwitchGroup']]]:
        """
        List of managed FortiSwitch groups on which NAC policy can be applied. The structure of `switch_group` block is documented below.
        """
        return pulumi.get(self, "switch_groups")

    @property
    @pulumi.getter(name="switchMacPolicy")
    def switch_mac_policy(self) -> pulumi.Output[str]:
        """
        switch-mac-policy to be applied on the matched NAC policy.
        """
        return pulumi.get(self, "switch_mac_policy")

    @property
    @pulumi.getter(name="switchPortPolicy")
    def switch_port_policy(self) -> pulumi.Output[str]:
        """
        switch-port-policy to be applied on the matched NAC policy.
        """
        return pulumi.get(self, "switch_port_policy")

    @property
    @pulumi.getter(name="switchScopes")
    def switch_scopes(self) -> pulumi.Output[Optional[Sequence['outputs.NacpolicySwitchScope']]]:
        """
        List of managed FortiSwitches on which NAC policy can be applied. The structure of `switch_scope` block is documented below.
        """
        return pulumi.get(self, "switch_scopes")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        NAC policy matching type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[str]:
        """
        NAC policy matching user.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> pulumi.Output[str]:
        """
        NAC policy matching user group.
        """
        return pulumi.get(self, "user_group")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

