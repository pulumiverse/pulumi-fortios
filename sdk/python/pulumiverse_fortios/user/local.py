# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LocalArgs', 'Local']

@pulumi.input_type
class LocalArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 auth_concurrent_override: Optional[pulumi.Input[str]] = None,
                 auth_concurrent_value: Optional[pulumi.Input[int]] = None,
                 authtimeout: Optional[pulumi.Input[int]] = None,
                 email_to: Optional[pulumi.Input[str]] = None,
                 fortitoken: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passwd: Optional[pulumi.Input[str]] = None,
                 passwd_policy: Optional[pulumi.Input[str]] = None,
                 passwd_time: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 qkd_profile: Optional[pulumi.Input[str]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_phone: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 tacacs_server: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 username_case_insensitivity: Optional[pulumi.Input[str]] = None,
                 username_case_sensitivity: Optional[pulumi.Input[str]] = None,
                 username_sensitivity: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 workstation: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Local resource.
        :param pulumi.Input[str] status: Enable/disable allowing the local user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: Authentication method. Valid values: `password`, `radius`, `tacacs+`, `ldap`.
        :param pulumi.Input[str] auth_concurrent_override: Enable/disable overriding the policy-auth-concurrent under config system global. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_concurrent_value: Maximum number of concurrent logins permitted from the same user.
        :param pulumi.Input[int] authtimeout: Time in minutes before the authentication timeout for a user is reached.
        :param pulumi.Input[str] email_to: Two-factor recipient's email address.
        :param pulumi.Input[str] fortitoken: Two-factor recipient's FortiToken serial number.
        :param pulumi.Input[int] fosid: User ID.
        :param pulumi.Input[str] ldap_server: Name of LDAP server with which the user must authenticate.
        :param pulumi.Input[str] name: User name.
        :param pulumi.Input[str] passwd: User's password.
        :param pulumi.Input[str] passwd_policy: Password policy to apply to this user, as defined in config user password-policy.
        :param pulumi.Input[str] passwd_time: Time of the last password update.
        :param pulumi.Input[str] ppk_identity: IKEv2 Postquantum Preshared Key Identity.
        :param pulumi.Input[str] ppk_secret: IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[str] qkd_profile: Quantum Key Distribution (QKD) profile.
        :param pulumi.Input[str] radius_server: Name of RADIUS server with which the user must authenticate.
        :param pulumi.Input[str] sms_custom_server: Two-factor recipient's SMS server.
        :param pulumi.Input[str] sms_phone: Two-factor recipient's mobile phone number.
        :param pulumi.Input[str] sms_server: Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] tacacs_server: Name of TACACS+ server with which the user must authenticate.
        :param pulumi.Input[str] two_factor: Enable/disable two-factor authentication.
        :param pulumi.Input[str] two_factor_authentication: Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
        :param pulumi.Input[str] two_factor_notification: Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
        :param pulumi.Input[str] username_case_insensitivity: Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] username_case_sensitivity: Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] username_sensitivity: Enable/disable case and accent sensitivity when performing username matching (accents are stripped and case is ignored when disabled). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] workstation: Name of the remote user workstation, if you want to limit the user to authenticate only from a particular workstation.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if auth_concurrent_override is not None:
            pulumi.set(__self__, "auth_concurrent_override", auth_concurrent_override)
        if auth_concurrent_value is not None:
            pulumi.set(__self__, "auth_concurrent_value", auth_concurrent_value)
        if authtimeout is not None:
            pulumi.set(__self__, "authtimeout", authtimeout)
        if email_to is not None:
            pulumi.set(__self__, "email_to", email_to)
        if fortitoken is not None:
            pulumi.set(__self__, "fortitoken", fortitoken)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if ldap_server is not None:
            pulumi.set(__self__, "ldap_server", ldap_server)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passwd is not None:
            pulumi.set(__self__, "passwd", passwd)
        if passwd_policy is not None:
            pulumi.set(__self__, "passwd_policy", passwd_policy)
        if passwd_time is not None:
            pulumi.set(__self__, "passwd_time", passwd_time)
        if ppk_identity is not None:
            pulumi.set(__self__, "ppk_identity", ppk_identity)
        if ppk_secret is not None:
            pulumi.set(__self__, "ppk_secret", ppk_secret)
        if qkd_profile is not None:
            pulumi.set(__self__, "qkd_profile", qkd_profile)
        if radius_server is not None:
            pulumi.set(__self__, "radius_server", radius_server)
        if sms_custom_server is not None:
            pulumi.set(__self__, "sms_custom_server", sms_custom_server)
        if sms_phone is not None:
            pulumi.set(__self__, "sms_phone", sms_phone)
        if sms_server is not None:
            pulumi.set(__self__, "sms_server", sms_server)
        if tacacs_server is not None:
            pulumi.set(__self__, "tacacs_server", tacacs_server)
        if two_factor is not None:
            pulumi.set(__self__, "two_factor", two_factor)
        if two_factor_authentication is not None:
            pulumi.set(__self__, "two_factor_authentication", two_factor_authentication)
        if two_factor_notification is not None:
            pulumi.set(__self__, "two_factor_notification", two_factor_notification)
        if username_case_insensitivity is not None:
            pulumi.set(__self__, "username_case_insensitivity", username_case_insensitivity)
        if username_case_sensitivity is not None:
            pulumi.set(__self__, "username_case_sensitivity", username_case_sensitivity)
        if username_sensitivity is not None:
            pulumi.set(__self__, "username_sensitivity", username_sensitivity)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if workstation is not None:
            pulumi.set(__self__, "workstation", workstation)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Enable/disable allowing the local user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Authentication method. Valid values: `password`, `radius`, `tacacs+`, `ldap`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="authConcurrentOverride")
    def auth_concurrent_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the policy-auth-concurrent under config system global. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_concurrent_override")

    @auth_concurrent_override.setter
    def auth_concurrent_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_concurrent_override", value)

    @property
    @pulumi.getter(name="authConcurrentValue")
    def auth_concurrent_value(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of concurrent logins permitted from the same user.
        """
        return pulumi.get(self, "auth_concurrent_value")

    @auth_concurrent_value.setter
    def auth_concurrent_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_concurrent_value", value)

    @property
    @pulumi.getter
    def authtimeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes before the authentication timeout for a user is reached.
        """
        return pulumi.get(self, "authtimeout")

    @authtimeout.setter
    def authtimeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authtimeout", value)

    @property
    @pulumi.getter(name="emailTo")
    def email_to(self) -> Optional[pulumi.Input[str]]:
        """
        Two-factor recipient's email address.
        """
        return pulumi.get(self, "email_to")

    @email_to.setter
    def email_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_to", value)

    @property
    @pulumi.getter
    def fortitoken(self) -> Optional[pulumi.Input[str]]:
        """
        Two-factor recipient's FortiToken serial number.
        """
        return pulumi.get(self, "fortitoken")

    @fortitoken.setter
    def fortitoken(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortitoken", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        User ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> Optional[pulumi.Input[str]]:
        """
        Name of LDAP server with which the user must authenticate.
        """
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def passwd(self) -> Optional[pulumi.Input[str]]:
        """
        User's password.
        """
        return pulumi.get(self, "passwd")

    @passwd.setter
    def passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd", value)

    @property
    @pulumi.getter(name="passwdPolicy")
    def passwd_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Password policy to apply to this user, as defined in config user password-policy.
        """
        return pulumi.get(self, "passwd_policy")

    @passwd_policy.setter
    def passwd_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd_policy", value)

    @property
    @pulumi.getter(name="passwdTime")
    def passwd_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time of the last password update.
        """
        return pulumi.get(self, "passwd_time")

    @passwd_time.setter
    def passwd_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd_time", value)

    @property
    @pulumi.getter(name="ppkIdentity")
    def ppk_identity(self) -> Optional[pulumi.Input[str]]:
        """
        IKEv2 Postquantum Preshared Key Identity.
        """
        return pulumi.get(self, "ppk_identity")

    @ppk_identity.setter
    def ppk_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_identity", value)

    @property
    @pulumi.getter(name="ppkSecret")
    def ppk_secret(self) -> Optional[pulumi.Input[str]]:
        """
        IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        """
        return pulumi.get(self, "ppk_secret")

    @ppk_secret.setter
    def ppk_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_secret", value)

    @property
    @pulumi.getter(name="qkdProfile")
    def qkd_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Quantum Key Distribution (QKD) profile.
        """
        return pulumi.get(self, "qkd_profile")

    @qkd_profile.setter
    def qkd_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qkd_profile", value)

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> Optional[pulumi.Input[str]]:
        """
        Name of RADIUS server with which the user must authenticate.
        """
        return pulumi.get(self, "radius_server")

    @radius_server.setter
    def radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_server", value)

    @property
    @pulumi.getter(name="smsCustomServer")
    def sms_custom_server(self) -> Optional[pulumi.Input[str]]:
        """
        Two-factor recipient's SMS server.
        """
        return pulumi.get(self, "sms_custom_server")

    @sms_custom_server.setter
    def sms_custom_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_custom_server", value)

    @property
    @pulumi.getter(name="smsPhone")
    def sms_phone(self) -> Optional[pulumi.Input[str]]:
        """
        Two-factor recipient's mobile phone number.
        """
        return pulumi.get(self, "sms_phone")

    @sms_phone.setter
    def sms_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_phone", value)

    @property
    @pulumi.getter(name="smsServer")
    def sms_server(self) -> Optional[pulumi.Input[str]]:
        """
        Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
        """
        return pulumi.get(self, "sms_server")

    @sms_server.setter
    def sms_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_server", value)

    @property
    @pulumi.getter(name="tacacsServer")
    def tacacs_server(self) -> Optional[pulumi.Input[str]]:
        """
        Name of TACACS+ server with which the user must authenticate.
        """
        return pulumi.get(self, "tacacs_server")

    @tacacs_server.setter
    def tacacs_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tacacs_server", value)

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable two-factor authentication.
        """
        return pulumi.get(self, "two_factor")

    @two_factor.setter
    def two_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor", value)

    @property
    @pulumi.getter(name="twoFactorAuthentication")
    def two_factor_authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
        """
        return pulumi.get(self, "two_factor_authentication")

    @two_factor_authentication.setter
    def two_factor_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_authentication", value)

    @property
    @pulumi.getter(name="twoFactorNotification")
    def two_factor_notification(self) -> Optional[pulumi.Input[str]]:
        """
        Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
        """
        return pulumi.get(self, "two_factor_notification")

    @two_factor_notification.setter
    def two_factor_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_notification", value)

    @property
    @pulumi.getter(name="usernameCaseInsensitivity")
    def username_case_insensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "username_case_insensitivity")

    @username_case_insensitivity.setter
    def username_case_insensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_case_insensitivity", value)

    @property
    @pulumi.getter(name="usernameCaseSensitivity")
    def username_case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "username_case_sensitivity")

    @username_case_sensitivity.setter
    def username_case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_case_sensitivity", value)

    @property
    @pulumi.getter(name="usernameSensitivity")
    def username_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable case and accent sensitivity when performing username matching (accents are stripped and case is ignored when disabled). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "username_sensitivity")

    @username_sensitivity.setter
    def username_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_sensitivity", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def workstation(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the remote user workstation, if you want to limit the user to authenticate only from a particular workstation.
        """
        return pulumi.get(self, "workstation")

    @workstation.setter
    def workstation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workstation", value)


@pulumi.input_type
class _LocalState:
    def __init__(__self__, *,
                 auth_concurrent_override: Optional[pulumi.Input[str]] = None,
                 auth_concurrent_value: Optional[pulumi.Input[int]] = None,
                 authtimeout: Optional[pulumi.Input[int]] = None,
                 email_to: Optional[pulumi.Input[str]] = None,
                 fortitoken: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passwd: Optional[pulumi.Input[str]] = None,
                 passwd_policy: Optional[pulumi.Input[str]] = None,
                 passwd_time: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 qkd_profile: Optional[pulumi.Input[str]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_phone: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tacacs_server: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username_case_insensitivity: Optional[pulumi.Input[str]] = None,
                 username_case_sensitivity: Optional[pulumi.Input[str]] = None,
                 username_sensitivity: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 workstation: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Local resources.
        :param pulumi.Input[str] auth_concurrent_override: Enable/disable overriding the policy-auth-concurrent under config system global. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_concurrent_value: Maximum number of concurrent logins permitted from the same user.
        :param pulumi.Input[int] authtimeout: Time in minutes before the authentication timeout for a user is reached.
        :param pulumi.Input[str] email_to: Two-factor recipient's email address.
        :param pulumi.Input[str] fortitoken: Two-factor recipient's FortiToken serial number.
        :param pulumi.Input[int] fosid: User ID.
        :param pulumi.Input[str] ldap_server: Name of LDAP server with which the user must authenticate.
        :param pulumi.Input[str] name: User name.
        :param pulumi.Input[str] passwd: User's password.
        :param pulumi.Input[str] passwd_policy: Password policy to apply to this user, as defined in config user password-policy.
        :param pulumi.Input[str] passwd_time: Time of the last password update.
        :param pulumi.Input[str] ppk_identity: IKEv2 Postquantum Preshared Key Identity.
        :param pulumi.Input[str] ppk_secret: IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[str] qkd_profile: Quantum Key Distribution (QKD) profile.
        :param pulumi.Input[str] radius_server: Name of RADIUS server with which the user must authenticate.
        :param pulumi.Input[str] sms_custom_server: Two-factor recipient's SMS server.
        :param pulumi.Input[str] sms_phone: Two-factor recipient's mobile phone number.
        :param pulumi.Input[str] sms_server: Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] status: Enable/disable allowing the local user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tacacs_server: Name of TACACS+ server with which the user must authenticate.
        :param pulumi.Input[str] two_factor: Enable/disable two-factor authentication.
        :param pulumi.Input[str] two_factor_authentication: Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
        :param pulumi.Input[str] two_factor_notification: Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
        :param pulumi.Input[str] type: Authentication method. Valid values: `password`, `radius`, `tacacs+`, `ldap`.
        :param pulumi.Input[str] username_case_insensitivity: Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] username_case_sensitivity: Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] username_sensitivity: Enable/disable case and accent sensitivity when performing username matching (accents are stripped and case is ignored when disabled). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] workstation: Name of the remote user workstation, if you want to limit the user to authenticate only from a particular workstation.
        """
        if auth_concurrent_override is not None:
            pulumi.set(__self__, "auth_concurrent_override", auth_concurrent_override)
        if auth_concurrent_value is not None:
            pulumi.set(__self__, "auth_concurrent_value", auth_concurrent_value)
        if authtimeout is not None:
            pulumi.set(__self__, "authtimeout", authtimeout)
        if email_to is not None:
            pulumi.set(__self__, "email_to", email_to)
        if fortitoken is not None:
            pulumi.set(__self__, "fortitoken", fortitoken)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if ldap_server is not None:
            pulumi.set(__self__, "ldap_server", ldap_server)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passwd is not None:
            pulumi.set(__self__, "passwd", passwd)
        if passwd_policy is not None:
            pulumi.set(__self__, "passwd_policy", passwd_policy)
        if passwd_time is not None:
            pulumi.set(__self__, "passwd_time", passwd_time)
        if ppk_identity is not None:
            pulumi.set(__self__, "ppk_identity", ppk_identity)
        if ppk_secret is not None:
            pulumi.set(__self__, "ppk_secret", ppk_secret)
        if qkd_profile is not None:
            pulumi.set(__self__, "qkd_profile", qkd_profile)
        if radius_server is not None:
            pulumi.set(__self__, "radius_server", radius_server)
        if sms_custom_server is not None:
            pulumi.set(__self__, "sms_custom_server", sms_custom_server)
        if sms_phone is not None:
            pulumi.set(__self__, "sms_phone", sms_phone)
        if sms_server is not None:
            pulumi.set(__self__, "sms_server", sms_server)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tacacs_server is not None:
            pulumi.set(__self__, "tacacs_server", tacacs_server)
        if two_factor is not None:
            pulumi.set(__self__, "two_factor", two_factor)
        if two_factor_authentication is not None:
            pulumi.set(__self__, "two_factor_authentication", two_factor_authentication)
        if two_factor_notification is not None:
            pulumi.set(__self__, "two_factor_notification", two_factor_notification)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username_case_insensitivity is not None:
            pulumi.set(__self__, "username_case_insensitivity", username_case_insensitivity)
        if username_case_sensitivity is not None:
            pulumi.set(__self__, "username_case_sensitivity", username_case_sensitivity)
        if username_sensitivity is not None:
            pulumi.set(__self__, "username_sensitivity", username_sensitivity)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if workstation is not None:
            pulumi.set(__self__, "workstation", workstation)

    @property
    @pulumi.getter(name="authConcurrentOverride")
    def auth_concurrent_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable overriding the policy-auth-concurrent under config system global. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_concurrent_override")

    @auth_concurrent_override.setter
    def auth_concurrent_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_concurrent_override", value)

    @property
    @pulumi.getter(name="authConcurrentValue")
    def auth_concurrent_value(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of concurrent logins permitted from the same user.
        """
        return pulumi.get(self, "auth_concurrent_value")

    @auth_concurrent_value.setter
    def auth_concurrent_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_concurrent_value", value)

    @property
    @pulumi.getter
    def authtimeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes before the authentication timeout for a user is reached.
        """
        return pulumi.get(self, "authtimeout")

    @authtimeout.setter
    def authtimeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authtimeout", value)

    @property
    @pulumi.getter(name="emailTo")
    def email_to(self) -> Optional[pulumi.Input[str]]:
        """
        Two-factor recipient's email address.
        """
        return pulumi.get(self, "email_to")

    @email_to.setter
    def email_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_to", value)

    @property
    @pulumi.getter
    def fortitoken(self) -> Optional[pulumi.Input[str]]:
        """
        Two-factor recipient's FortiToken serial number.
        """
        return pulumi.get(self, "fortitoken")

    @fortitoken.setter
    def fortitoken(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortitoken", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        User ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> Optional[pulumi.Input[str]]:
        """
        Name of LDAP server with which the user must authenticate.
        """
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def passwd(self) -> Optional[pulumi.Input[str]]:
        """
        User's password.
        """
        return pulumi.get(self, "passwd")

    @passwd.setter
    def passwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd", value)

    @property
    @pulumi.getter(name="passwdPolicy")
    def passwd_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Password policy to apply to this user, as defined in config user password-policy.
        """
        return pulumi.get(self, "passwd_policy")

    @passwd_policy.setter
    def passwd_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd_policy", value)

    @property
    @pulumi.getter(name="passwdTime")
    def passwd_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time of the last password update.
        """
        return pulumi.get(self, "passwd_time")

    @passwd_time.setter
    def passwd_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd_time", value)

    @property
    @pulumi.getter(name="ppkIdentity")
    def ppk_identity(self) -> Optional[pulumi.Input[str]]:
        """
        IKEv2 Postquantum Preshared Key Identity.
        """
        return pulumi.get(self, "ppk_identity")

    @ppk_identity.setter
    def ppk_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_identity", value)

    @property
    @pulumi.getter(name="ppkSecret")
    def ppk_secret(self) -> Optional[pulumi.Input[str]]:
        """
        IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        """
        return pulumi.get(self, "ppk_secret")

    @ppk_secret.setter
    def ppk_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ppk_secret", value)

    @property
    @pulumi.getter(name="qkdProfile")
    def qkd_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Quantum Key Distribution (QKD) profile.
        """
        return pulumi.get(self, "qkd_profile")

    @qkd_profile.setter
    def qkd_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qkd_profile", value)

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> Optional[pulumi.Input[str]]:
        """
        Name of RADIUS server with which the user must authenticate.
        """
        return pulumi.get(self, "radius_server")

    @radius_server.setter
    def radius_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_server", value)

    @property
    @pulumi.getter(name="smsCustomServer")
    def sms_custom_server(self) -> Optional[pulumi.Input[str]]:
        """
        Two-factor recipient's SMS server.
        """
        return pulumi.get(self, "sms_custom_server")

    @sms_custom_server.setter
    def sms_custom_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_custom_server", value)

    @property
    @pulumi.getter(name="smsPhone")
    def sms_phone(self) -> Optional[pulumi.Input[str]]:
        """
        Two-factor recipient's mobile phone number.
        """
        return pulumi.get(self, "sms_phone")

    @sms_phone.setter
    def sms_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_phone", value)

    @property
    @pulumi.getter(name="smsServer")
    def sms_server(self) -> Optional[pulumi.Input[str]]:
        """
        Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
        """
        return pulumi.get(self, "sms_server")

    @sms_server.setter
    def sms_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_server", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing the local user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tacacsServer")
    def tacacs_server(self) -> Optional[pulumi.Input[str]]:
        """
        Name of TACACS+ server with which the user must authenticate.
        """
        return pulumi.get(self, "tacacs_server")

    @tacacs_server.setter
    def tacacs_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tacacs_server", value)

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable two-factor authentication.
        """
        return pulumi.get(self, "two_factor")

    @two_factor.setter
    def two_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor", value)

    @property
    @pulumi.getter(name="twoFactorAuthentication")
    def two_factor_authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
        """
        return pulumi.get(self, "two_factor_authentication")

    @two_factor_authentication.setter
    def two_factor_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_authentication", value)

    @property
    @pulumi.getter(name="twoFactorNotification")
    def two_factor_notification(self) -> Optional[pulumi.Input[str]]:
        """
        Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
        """
        return pulumi.get(self, "two_factor_notification")

    @two_factor_notification.setter
    def two_factor_notification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "two_factor_notification", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method. Valid values: `password`, `radius`, `tacacs+`, `ldap`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="usernameCaseInsensitivity")
    def username_case_insensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "username_case_insensitivity")

    @username_case_insensitivity.setter
    def username_case_insensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_case_insensitivity", value)

    @property
    @pulumi.getter(name="usernameCaseSensitivity")
    def username_case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "username_case_sensitivity")

    @username_case_sensitivity.setter
    def username_case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_case_sensitivity", value)

    @property
    @pulumi.getter(name="usernameSensitivity")
    def username_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable case and accent sensitivity when performing username matching (accents are stripped and case is ignored when disabled). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "username_sensitivity")

    @username_sensitivity.setter
    def username_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_sensitivity", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def workstation(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the remote user workstation, if you want to limit the user to authenticate only from a particular workstation.
        """
        return pulumi.get(self, "workstation")

    @workstation.setter
    def workstation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workstation", value)


class Local(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_concurrent_override: Optional[pulumi.Input[str]] = None,
                 auth_concurrent_value: Optional[pulumi.Input[int]] = None,
                 authtimeout: Optional[pulumi.Input[int]] = None,
                 email_to: Optional[pulumi.Input[str]] = None,
                 fortitoken: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passwd: Optional[pulumi.Input[str]] = None,
                 passwd_policy: Optional[pulumi.Input[str]] = None,
                 passwd_time: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 qkd_profile: Optional[pulumi.Input[str]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_phone: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tacacs_server: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username_case_insensitivity: Optional[pulumi.Input[str]] = None,
                 username_case_sensitivity: Optional[pulumi.Input[str]] = None,
                 username_sensitivity: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 workstation: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure local users.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname3 = fortios.user.Ldap("trname3",
            account_key_filter="(&(userPrincipalName=%s)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))",
            account_key_processing="same",
            cnid="cn",
            dn="EIWNCIEW",
            group_member_check="user-attr",
            group_object_filter="(&(objectcategory=group)(member=*))",
            member_attr="memberOf",
            password_expiry_warning="disable",
            password_renewal="disable",
            port=389,
            secure="disable",
            server="1.1.1.1",
            server_identity_check="disable",
            source_ip="0.0.0.0",
            ssl_min_proto_version="default",
            type="simple")
        trname = fortios.user.Local("trname",
            auth_concurrent_override="disable",
            auth_concurrent_value=0,
            authtimeout=0,
            ldap_server=trname3.name,
            passwd_time="0000-00-00 00:00:00",
            sms_server="fortiguard",
            status="enable",
            two_factor="disable",
            type="ldap")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        User Local can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/local:Local labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/local:Local labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_concurrent_override: Enable/disable overriding the policy-auth-concurrent under config system global. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_concurrent_value: Maximum number of concurrent logins permitted from the same user.
        :param pulumi.Input[int] authtimeout: Time in minutes before the authentication timeout for a user is reached.
        :param pulumi.Input[str] email_to: Two-factor recipient's email address.
        :param pulumi.Input[str] fortitoken: Two-factor recipient's FortiToken serial number.
        :param pulumi.Input[int] fosid: User ID.
        :param pulumi.Input[str] ldap_server: Name of LDAP server with which the user must authenticate.
        :param pulumi.Input[str] name: User name.
        :param pulumi.Input[str] passwd: User's password.
        :param pulumi.Input[str] passwd_policy: Password policy to apply to this user, as defined in config user password-policy.
        :param pulumi.Input[str] passwd_time: Time of the last password update.
        :param pulumi.Input[str] ppk_identity: IKEv2 Postquantum Preshared Key Identity.
        :param pulumi.Input[str] ppk_secret: IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[str] qkd_profile: Quantum Key Distribution (QKD) profile.
        :param pulumi.Input[str] radius_server: Name of RADIUS server with which the user must authenticate.
        :param pulumi.Input[str] sms_custom_server: Two-factor recipient's SMS server.
        :param pulumi.Input[str] sms_phone: Two-factor recipient's mobile phone number.
        :param pulumi.Input[str] sms_server: Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] status: Enable/disable allowing the local user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tacacs_server: Name of TACACS+ server with which the user must authenticate.
        :param pulumi.Input[str] two_factor: Enable/disable two-factor authentication.
        :param pulumi.Input[str] two_factor_authentication: Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
        :param pulumi.Input[str] two_factor_notification: Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
        :param pulumi.Input[str] type: Authentication method. Valid values: `password`, `radius`, `tacacs+`, `ldap`.
        :param pulumi.Input[str] username_case_insensitivity: Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] username_case_sensitivity: Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] username_sensitivity: Enable/disable case and accent sensitivity when performing username matching (accents are stripped and case is ignored when disabled). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] workstation: Name of the remote user workstation, if you want to limit the user to authenticate only from a particular workstation.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LocalArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure local users.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname3 = fortios.user.Ldap("trname3",
            account_key_filter="(&(userPrincipalName=%s)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))",
            account_key_processing="same",
            cnid="cn",
            dn="EIWNCIEW",
            group_member_check="user-attr",
            group_object_filter="(&(objectcategory=group)(member=*))",
            member_attr="memberOf",
            password_expiry_warning="disable",
            password_renewal="disable",
            port=389,
            secure="disable",
            server="1.1.1.1",
            server_identity_check="disable",
            source_ip="0.0.0.0",
            ssl_min_proto_version="default",
            type="simple")
        trname = fortios.user.Local("trname",
            auth_concurrent_override="disable",
            auth_concurrent_value=0,
            authtimeout=0,
            ldap_server=trname3.name,
            passwd_time="0000-00-00 00:00:00",
            sms_server="fortiguard",
            status="enable",
            two_factor="disable",
            type="ldap")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        User Local can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/local:Local labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/local:Local labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param LocalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LocalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_concurrent_override: Optional[pulumi.Input[str]] = None,
                 auth_concurrent_value: Optional[pulumi.Input[int]] = None,
                 authtimeout: Optional[pulumi.Input[int]] = None,
                 email_to: Optional[pulumi.Input[str]] = None,
                 fortitoken: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passwd: Optional[pulumi.Input[str]] = None,
                 passwd_policy: Optional[pulumi.Input[str]] = None,
                 passwd_time: Optional[pulumi.Input[str]] = None,
                 ppk_identity: Optional[pulumi.Input[str]] = None,
                 ppk_secret: Optional[pulumi.Input[str]] = None,
                 qkd_profile: Optional[pulumi.Input[str]] = None,
                 radius_server: Optional[pulumi.Input[str]] = None,
                 sms_custom_server: Optional[pulumi.Input[str]] = None,
                 sms_phone: Optional[pulumi.Input[str]] = None,
                 sms_server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tacacs_server: Optional[pulumi.Input[str]] = None,
                 two_factor: Optional[pulumi.Input[str]] = None,
                 two_factor_authentication: Optional[pulumi.Input[str]] = None,
                 two_factor_notification: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username_case_insensitivity: Optional[pulumi.Input[str]] = None,
                 username_case_sensitivity: Optional[pulumi.Input[str]] = None,
                 username_sensitivity: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 workstation: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LocalArgs.__new__(LocalArgs)

            __props__.__dict__["auth_concurrent_override"] = auth_concurrent_override
            __props__.__dict__["auth_concurrent_value"] = auth_concurrent_value
            __props__.__dict__["authtimeout"] = authtimeout
            __props__.__dict__["email_to"] = email_to
            __props__.__dict__["fortitoken"] = fortitoken
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["ldap_server"] = ldap_server
            __props__.__dict__["name"] = name
            __props__.__dict__["passwd"] = None if passwd is None else pulumi.Output.secret(passwd)
            __props__.__dict__["passwd_policy"] = passwd_policy
            __props__.__dict__["passwd_time"] = passwd_time
            __props__.__dict__["ppk_identity"] = ppk_identity
            __props__.__dict__["ppk_secret"] = None if ppk_secret is None else pulumi.Output.secret(ppk_secret)
            __props__.__dict__["qkd_profile"] = qkd_profile
            __props__.__dict__["radius_server"] = radius_server
            __props__.__dict__["sms_custom_server"] = sms_custom_server
            __props__.__dict__["sms_phone"] = sms_phone
            __props__.__dict__["sms_server"] = sms_server
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["tacacs_server"] = tacacs_server
            __props__.__dict__["two_factor"] = two_factor
            __props__.__dict__["two_factor_authentication"] = two_factor_authentication
            __props__.__dict__["two_factor_notification"] = two_factor_notification
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["username_case_insensitivity"] = username_case_insensitivity
            __props__.__dict__["username_case_sensitivity"] = username_case_sensitivity
            __props__.__dict__["username_sensitivity"] = username_sensitivity
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["workstation"] = workstation
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["passwd", "ppkSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Local, __self__).__init__(
            'fortios:user/local:Local',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_concurrent_override: Optional[pulumi.Input[str]] = None,
            auth_concurrent_value: Optional[pulumi.Input[int]] = None,
            authtimeout: Optional[pulumi.Input[int]] = None,
            email_to: Optional[pulumi.Input[str]] = None,
            fortitoken: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            ldap_server: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            passwd: Optional[pulumi.Input[str]] = None,
            passwd_policy: Optional[pulumi.Input[str]] = None,
            passwd_time: Optional[pulumi.Input[str]] = None,
            ppk_identity: Optional[pulumi.Input[str]] = None,
            ppk_secret: Optional[pulumi.Input[str]] = None,
            qkd_profile: Optional[pulumi.Input[str]] = None,
            radius_server: Optional[pulumi.Input[str]] = None,
            sms_custom_server: Optional[pulumi.Input[str]] = None,
            sms_phone: Optional[pulumi.Input[str]] = None,
            sms_server: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tacacs_server: Optional[pulumi.Input[str]] = None,
            two_factor: Optional[pulumi.Input[str]] = None,
            two_factor_authentication: Optional[pulumi.Input[str]] = None,
            two_factor_notification: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            username_case_insensitivity: Optional[pulumi.Input[str]] = None,
            username_case_sensitivity: Optional[pulumi.Input[str]] = None,
            username_sensitivity: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            workstation: Optional[pulumi.Input[str]] = None) -> 'Local':
        """
        Get an existing Local resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_concurrent_override: Enable/disable overriding the policy-auth-concurrent under config system global. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auth_concurrent_value: Maximum number of concurrent logins permitted from the same user.
        :param pulumi.Input[int] authtimeout: Time in minutes before the authentication timeout for a user is reached.
        :param pulumi.Input[str] email_to: Two-factor recipient's email address.
        :param pulumi.Input[str] fortitoken: Two-factor recipient's FortiToken serial number.
        :param pulumi.Input[int] fosid: User ID.
        :param pulumi.Input[str] ldap_server: Name of LDAP server with which the user must authenticate.
        :param pulumi.Input[str] name: User name.
        :param pulumi.Input[str] passwd: User's password.
        :param pulumi.Input[str] passwd_policy: Password policy to apply to this user, as defined in config user password-policy.
        :param pulumi.Input[str] passwd_time: Time of the last password update.
        :param pulumi.Input[str] ppk_identity: IKEv2 Postquantum Preshared Key Identity.
        :param pulumi.Input[str] ppk_secret: IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[str] qkd_profile: Quantum Key Distribution (QKD) profile.
        :param pulumi.Input[str] radius_server: Name of RADIUS server with which the user must authenticate.
        :param pulumi.Input[str] sms_custom_server: Two-factor recipient's SMS server.
        :param pulumi.Input[str] sms_phone: Two-factor recipient's mobile phone number.
        :param pulumi.Input[str] sms_server: Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
        :param pulumi.Input[str] status: Enable/disable allowing the local user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tacacs_server: Name of TACACS+ server with which the user must authenticate.
        :param pulumi.Input[str] two_factor: Enable/disable two-factor authentication.
        :param pulumi.Input[str] two_factor_authentication: Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
        :param pulumi.Input[str] two_factor_notification: Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
        :param pulumi.Input[str] type: Authentication method. Valid values: `password`, `radius`, `tacacs+`, `ldap`.
        :param pulumi.Input[str] username_case_insensitivity: Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] username_case_sensitivity: Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] username_sensitivity: Enable/disable case and accent sensitivity when performing username matching (accents are stripped and case is ignored when disabled). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] workstation: Name of the remote user workstation, if you want to limit the user to authenticate only from a particular workstation.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LocalState.__new__(_LocalState)

        __props__.__dict__["auth_concurrent_override"] = auth_concurrent_override
        __props__.__dict__["auth_concurrent_value"] = auth_concurrent_value
        __props__.__dict__["authtimeout"] = authtimeout
        __props__.__dict__["email_to"] = email_to
        __props__.__dict__["fortitoken"] = fortitoken
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["ldap_server"] = ldap_server
        __props__.__dict__["name"] = name
        __props__.__dict__["passwd"] = passwd
        __props__.__dict__["passwd_policy"] = passwd_policy
        __props__.__dict__["passwd_time"] = passwd_time
        __props__.__dict__["ppk_identity"] = ppk_identity
        __props__.__dict__["ppk_secret"] = ppk_secret
        __props__.__dict__["qkd_profile"] = qkd_profile
        __props__.__dict__["radius_server"] = radius_server
        __props__.__dict__["sms_custom_server"] = sms_custom_server
        __props__.__dict__["sms_phone"] = sms_phone
        __props__.__dict__["sms_server"] = sms_server
        __props__.__dict__["status"] = status
        __props__.__dict__["tacacs_server"] = tacacs_server
        __props__.__dict__["two_factor"] = two_factor
        __props__.__dict__["two_factor_authentication"] = two_factor_authentication
        __props__.__dict__["two_factor_notification"] = two_factor_notification
        __props__.__dict__["type"] = type
        __props__.__dict__["username_case_insensitivity"] = username_case_insensitivity
        __props__.__dict__["username_case_sensitivity"] = username_case_sensitivity
        __props__.__dict__["username_sensitivity"] = username_sensitivity
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["workstation"] = workstation
        return Local(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authConcurrentOverride")
    def auth_concurrent_override(self) -> pulumi.Output[str]:
        """
        Enable/disable overriding the policy-auth-concurrent under config system global. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_concurrent_override")

    @property
    @pulumi.getter(name="authConcurrentValue")
    def auth_concurrent_value(self) -> pulumi.Output[int]:
        """
        Maximum number of concurrent logins permitted from the same user.
        """
        return pulumi.get(self, "auth_concurrent_value")

    @property
    @pulumi.getter
    def authtimeout(self) -> pulumi.Output[int]:
        """
        Time in minutes before the authentication timeout for a user is reached.
        """
        return pulumi.get(self, "authtimeout")

    @property
    @pulumi.getter(name="emailTo")
    def email_to(self) -> pulumi.Output[str]:
        """
        Two-factor recipient's email address.
        """
        return pulumi.get(self, "email_to")

    @property
    @pulumi.getter
    def fortitoken(self) -> pulumi.Output[str]:
        """
        Two-factor recipient's FortiToken serial number.
        """
        return pulumi.get(self, "fortitoken")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        User ID.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> pulumi.Output[str]:
        """
        Name of LDAP server with which the user must authenticate.
        """
        return pulumi.get(self, "ldap_server")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        User name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def passwd(self) -> pulumi.Output[Optional[str]]:
        """
        User's password.
        """
        return pulumi.get(self, "passwd")

    @property
    @pulumi.getter(name="passwdPolicy")
    def passwd_policy(self) -> pulumi.Output[str]:
        """
        Password policy to apply to this user, as defined in config user password-policy.
        """
        return pulumi.get(self, "passwd_policy")

    @property
    @pulumi.getter(name="passwdTime")
    def passwd_time(self) -> pulumi.Output[str]:
        """
        Time of the last password update.
        """
        return pulumi.get(self, "passwd_time")

    @property
    @pulumi.getter(name="ppkIdentity")
    def ppk_identity(self) -> pulumi.Output[str]:
        """
        IKEv2 Postquantum Preshared Key Identity.
        """
        return pulumi.get(self, "ppk_identity")

    @property
    @pulumi.getter(name="ppkSecret")
    def ppk_secret(self) -> pulumi.Output[Optional[str]]:
        """
        IKEv2 Postquantum Preshared Key (ASCII string or hexadecimal encoded with a leading 0x).
        """
        return pulumi.get(self, "ppk_secret")

    @property
    @pulumi.getter(name="qkdProfile")
    def qkd_profile(self) -> pulumi.Output[str]:
        """
        Quantum Key Distribution (QKD) profile.
        """
        return pulumi.get(self, "qkd_profile")

    @property
    @pulumi.getter(name="radiusServer")
    def radius_server(self) -> pulumi.Output[str]:
        """
        Name of RADIUS server with which the user must authenticate.
        """
        return pulumi.get(self, "radius_server")

    @property
    @pulumi.getter(name="smsCustomServer")
    def sms_custom_server(self) -> pulumi.Output[str]:
        """
        Two-factor recipient's SMS server.
        """
        return pulumi.get(self, "sms_custom_server")

    @property
    @pulumi.getter(name="smsPhone")
    def sms_phone(self) -> pulumi.Output[str]:
        """
        Two-factor recipient's mobile phone number.
        """
        return pulumi.get(self, "sms_phone")

    @property
    @pulumi.getter(name="smsServer")
    def sms_server(self) -> pulumi.Output[str]:
        """
        Send SMS through FortiGuard or other external server. Valid values: `fortiguard`, `custom`.
        """
        return pulumi.get(self, "sms_server")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable allowing the local user to authenticate with the FortiGate unit. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tacacsServer")
    def tacacs_server(self) -> pulumi.Output[str]:
        """
        Name of TACACS+ server with which the user must authenticate.
        """
        return pulumi.get(self, "tacacs_server")

    @property
    @pulumi.getter(name="twoFactor")
    def two_factor(self) -> pulumi.Output[str]:
        """
        Enable/disable two-factor authentication.
        """
        return pulumi.get(self, "two_factor")

    @property
    @pulumi.getter(name="twoFactorAuthentication")
    def two_factor_authentication(self) -> pulumi.Output[str]:
        """
        Authentication method by FortiToken Cloud. Valid values: `fortitoken`, `email`, `sms`.
        """
        return pulumi.get(self, "two_factor_authentication")

    @property
    @pulumi.getter(name="twoFactorNotification")
    def two_factor_notification(self) -> pulumi.Output[str]:
        """
        Notification method for user activation by FortiToken Cloud. Valid values: `email`, `sms`.
        """
        return pulumi.get(self, "two_factor_notification")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Authentication method. Valid values: `password`, `radius`, `tacacs+`, `ldap`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="usernameCaseInsensitivity")
    def username_case_insensitivity(self) -> pulumi.Output[str]:
        """
        Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "username_case_insensitivity")

    @property
    @pulumi.getter(name="usernameCaseSensitivity")
    def username_case_sensitivity(self) -> pulumi.Output[str]:
        """
        Enable/disable case sensitivity when performing username matching (uppercase and lowercase letters are treated either as distinct or equivalent). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "username_case_sensitivity")

    @property
    @pulumi.getter(name="usernameSensitivity")
    def username_sensitivity(self) -> pulumi.Output[str]:
        """
        Enable/disable case and accent sensitivity when performing username matching (accents are stripped and case is ignored when disabled). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "username_sensitivity")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def workstation(self) -> pulumi.Output[str]:
        """
        Name of the remote user workstation, if you want to limit the user to authenticate only from a particular workstation.
        """
        return pulumi.get(self, "workstation")

