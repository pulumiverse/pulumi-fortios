# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SamlArgs', 'Saml']

@pulumi.input_type
class SamlArgs:
    def __init__(__self__, *,
                 entity_id: pulumi.Input[str],
                 idp_cert: pulumi.Input[str],
                 idp_entity_id: pulumi.Input[str],
                 idp_single_sign_on_url: pulumi.Input[str],
                 single_sign_on_url: pulumi.Input[str],
                 adfs_claim: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 clock_tolerance: Optional[pulumi.Input[int]] = None,
                 digest_method: Optional[pulumi.Input[str]] = None,
                 group_claim_type: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 limit_relaystate: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reauth: Optional[pulumi.Input[str]] = None,
                 single_logout_url: Optional[pulumi.Input[str]] = None,
                 user_claim_type: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Saml resource.
        :param pulumi.Input[str] entity_id: SP entity ID.
        :param pulumi.Input[str] idp_cert: IDP Certificate name.
        :param pulumi.Input[str] idp_entity_id: IDP entity ID.
        :param pulumi.Input[str] idp_single_sign_on_url: IDP single sign-on URL.
        :param pulumi.Input[str] single_sign_on_url: SP single sign-on URL.
        :param pulumi.Input[str] adfs_claim: Enable/disable ADFS Claim for user/group attribute in assertion statement (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_url: URL to verify authentication.
        :param pulumi.Input[str] cert: Certificate to sign SAML messages.
        :param pulumi.Input[int] clock_tolerance: Clock skew tolerance in seconds (0 - 300, default = 15, 0 = no tolerance).
        :param pulumi.Input[str] digest_method: Digest Method Algorithm. (default = sha1). Valid values: `sha1`, `sha256`.
        :param pulumi.Input[str] group_claim_type: Group claim in assertion statement. Valid values: `email`, `given-name`, `name`, `upn`, `common-name`, `email-adfs-1x`, `group`, `upn-adfs-1x`, `role`, `sur-name`, `ppid`, `name-identifier`, `authentication-method`, `deny-only-group-sid`, `deny-only-primary-sid`, `deny-only-primary-group-sid`, `group-sid`, `primary-group-sid`, `primary-sid`, `windows-account-name`.
        :param pulumi.Input[str] group_name: Group name in assertion statement.
        :param pulumi.Input[str] idp_single_logout_url: IDP single logout url.
        :param pulumi.Input[str] limit_relaystate: Enable/disable limiting of relay-state parameter when it exceeds SAML 2.0 specification limits (80 bytes). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: SAML server entry name.
        :param pulumi.Input[str] reauth: Enable/disable signalling of IDP to force user re-authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] single_logout_url: SP single logout URL.
        :param pulumi.Input[str] user_claim_type: User name claim in assertion statement. Valid values: `email`, `given-name`, `name`, `upn`, `common-name`, `email-adfs-1x`, `group`, `upn-adfs-1x`, `role`, `sur-name`, `ppid`, `name-identifier`, `authentication-method`, `deny-only-group-sid`, `deny-only-primary-sid`, `deny-only-primary-group-sid`, `group-sid`, `primary-group-sid`, `primary-sid`, `windows-account-name`.
        :param pulumi.Input[str] user_name: User name in assertion statement.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "idp_cert", idp_cert)
        pulumi.set(__self__, "idp_entity_id", idp_entity_id)
        pulumi.set(__self__, "idp_single_sign_on_url", idp_single_sign_on_url)
        pulumi.set(__self__, "single_sign_on_url", single_sign_on_url)
        if adfs_claim is not None:
            pulumi.set(__self__, "adfs_claim", adfs_claim)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if clock_tolerance is not None:
            pulumi.set(__self__, "clock_tolerance", clock_tolerance)
        if digest_method is not None:
            pulumi.set(__self__, "digest_method", digest_method)
        if group_claim_type is not None:
            pulumi.set(__self__, "group_claim_type", group_claim_type)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if idp_single_logout_url is not None:
            pulumi.set(__self__, "idp_single_logout_url", idp_single_logout_url)
        if limit_relaystate is not None:
            pulumi.set(__self__, "limit_relaystate", limit_relaystate)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reauth is not None:
            pulumi.set(__self__, "reauth", reauth)
        if single_logout_url is not None:
            pulumi.set(__self__, "single_logout_url", single_logout_url)
        if user_claim_type is not None:
            pulumi.set(__self__, "user_claim_type", user_claim_type)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Input[str]:
        """
        SP entity ID.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="idpCert")
    def idp_cert(self) -> pulumi.Input[str]:
        """
        IDP Certificate name.
        """
        return pulumi.get(self, "idp_cert")

    @idp_cert.setter
    def idp_cert(self, value: pulumi.Input[str]):
        pulumi.set(self, "idp_cert", value)

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> pulumi.Input[str]:
        """
        IDP entity ID.
        """
        return pulumi.get(self, "idp_entity_id")

    @idp_entity_id.setter
    def idp_entity_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "idp_entity_id", value)

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> pulumi.Input[str]:
        """
        IDP single sign-on URL.
        """
        return pulumi.get(self, "idp_single_sign_on_url")

    @idp_single_sign_on_url.setter
    def idp_single_sign_on_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "idp_single_sign_on_url", value)

    @property
    @pulumi.getter(name="singleSignOnUrl")
    def single_sign_on_url(self) -> pulumi.Input[str]:
        """
        SP single sign-on URL.
        """
        return pulumi.get(self, "single_sign_on_url")

    @single_sign_on_url.setter
    def single_sign_on_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "single_sign_on_url", value)

    @property
    @pulumi.getter(name="adfsClaim")
    def adfs_claim(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ADFS Claim for user/group attribute in assertion statement (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adfs_claim")

    @adfs_claim.setter
    def adfs_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adfs_claim", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to verify authentication.
        """
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate to sign SAML messages.
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="clockTolerance")
    def clock_tolerance(self) -> Optional[pulumi.Input[int]]:
        """
        Clock skew tolerance in seconds (0 - 300, default = 15, 0 = no tolerance).
        """
        return pulumi.get(self, "clock_tolerance")

    @clock_tolerance.setter
    def clock_tolerance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "clock_tolerance", value)

    @property
    @pulumi.getter(name="digestMethod")
    def digest_method(self) -> Optional[pulumi.Input[str]]:
        """
        Digest Method Algorithm. (default = sha1). Valid values: `sha1`, `sha256`.
        """
        return pulumi.get(self, "digest_method")

    @digest_method.setter
    def digest_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest_method", value)

    @property
    @pulumi.getter(name="groupClaimType")
    def group_claim_type(self) -> Optional[pulumi.Input[str]]:
        """
        Group claim in assertion statement. Valid values: `email`, `given-name`, `name`, `upn`, `common-name`, `email-adfs-1x`, `group`, `upn-adfs-1x`, `role`, `sur-name`, `ppid`, `name-identifier`, `authentication-method`, `deny-only-group-sid`, `deny-only-primary-sid`, `deny-only-primary-group-sid`, `group-sid`, `primary-group-sid`, `primary-sid`, `windows-account-name`.
        """
        return pulumi.get(self, "group_claim_type")

    @group_claim_type.setter
    def group_claim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_claim_type", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name in assertion statement.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        IDP single logout url.
        """
        return pulumi.get(self, "idp_single_logout_url")

    @idp_single_logout_url.setter
    def idp_single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_logout_url", value)

    @property
    @pulumi.getter(name="limitRelaystate")
    def limit_relaystate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable limiting of relay-state parameter when it exceeds SAML 2.0 specification limits (80 bytes). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "limit_relaystate")

    @limit_relaystate.setter
    def limit_relaystate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limit_relaystate", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SAML server entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def reauth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable signalling of IDP to force user re-authentication (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "reauth")

    @reauth.setter
    def reauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reauth", value)

    @property
    @pulumi.getter(name="singleLogoutUrl")
    def single_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP single logout URL.
        """
        return pulumi.get(self, "single_logout_url")

    @single_logout_url.setter
    def single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_logout_url", value)

    @property
    @pulumi.getter(name="userClaimType")
    def user_claim_type(self) -> Optional[pulumi.Input[str]]:
        """
        User name claim in assertion statement. Valid values: `email`, `given-name`, `name`, `upn`, `common-name`, `email-adfs-1x`, `group`, `upn-adfs-1x`, `role`, `sur-name`, `ppid`, `name-identifier`, `authentication-method`, `deny-only-group-sid`, `deny-only-primary-sid`, `deny-only-primary-group-sid`, `group-sid`, `primary-group-sid`, `primary-sid`, `windows-account-name`.
        """
        return pulumi.get(self, "user_claim_type")

    @user_claim_type.setter
    def user_claim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_claim_type", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name in assertion statement.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SamlState:
    def __init__(__self__, *,
                 adfs_claim: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 clock_tolerance: Optional[pulumi.Input[int]] = None,
                 digest_method: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 group_claim_type: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 idp_cert: Optional[pulumi.Input[str]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 limit_relaystate: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reauth: Optional[pulumi.Input[str]] = None,
                 single_logout_url: Optional[pulumi.Input[str]] = None,
                 single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 user_claim_type: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Saml resources.
        :param pulumi.Input[str] adfs_claim: Enable/disable ADFS Claim for user/group attribute in assertion statement (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_url: URL to verify authentication.
        :param pulumi.Input[str] cert: Certificate to sign SAML messages.
        :param pulumi.Input[int] clock_tolerance: Clock skew tolerance in seconds (0 - 300, default = 15, 0 = no tolerance).
        :param pulumi.Input[str] digest_method: Digest Method Algorithm. (default = sha1). Valid values: `sha1`, `sha256`.
        :param pulumi.Input[str] entity_id: SP entity ID.
        :param pulumi.Input[str] group_claim_type: Group claim in assertion statement. Valid values: `email`, `given-name`, `name`, `upn`, `common-name`, `email-adfs-1x`, `group`, `upn-adfs-1x`, `role`, `sur-name`, `ppid`, `name-identifier`, `authentication-method`, `deny-only-group-sid`, `deny-only-primary-sid`, `deny-only-primary-group-sid`, `group-sid`, `primary-group-sid`, `primary-sid`, `windows-account-name`.
        :param pulumi.Input[str] group_name: Group name in assertion statement.
        :param pulumi.Input[str] idp_cert: IDP Certificate name.
        :param pulumi.Input[str] idp_entity_id: IDP entity ID.
        :param pulumi.Input[str] idp_single_logout_url: IDP single logout url.
        :param pulumi.Input[str] idp_single_sign_on_url: IDP single sign-on URL.
        :param pulumi.Input[str] limit_relaystate: Enable/disable limiting of relay-state parameter when it exceeds SAML 2.0 specification limits (80 bytes). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: SAML server entry name.
        :param pulumi.Input[str] reauth: Enable/disable signalling of IDP to force user re-authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] single_logout_url: SP single logout URL.
        :param pulumi.Input[str] single_sign_on_url: SP single sign-on URL.
        :param pulumi.Input[str] user_claim_type: User name claim in assertion statement. Valid values: `email`, `given-name`, `name`, `upn`, `common-name`, `email-adfs-1x`, `group`, `upn-adfs-1x`, `role`, `sur-name`, `ppid`, `name-identifier`, `authentication-method`, `deny-only-group-sid`, `deny-only-primary-sid`, `deny-only-primary-group-sid`, `group-sid`, `primary-group-sid`, `primary-sid`, `windows-account-name`.
        :param pulumi.Input[str] user_name: User name in assertion statement.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if adfs_claim is not None:
            pulumi.set(__self__, "adfs_claim", adfs_claim)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if clock_tolerance is not None:
            pulumi.set(__self__, "clock_tolerance", clock_tolerance)
        if digest_method is not None:
            pulumi.set(__self__, "digest_method", digest_method)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if group_claim_type is not None:
            pulumi.set(__self__, "group_claim_type", group_claim_type)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if idp_cert is not None:
            pulumi.set(__self__, "idp_cert", idp_cert)
        if idp_entity_id is not None:
            pulumi.set(__self__, "idp_entity_id", idp_entity_id)
        if idp_single_logout_url is not None:
            pulumi.set(__self__, "idp_single_logout_url", idp_single_logout_url)
        if idp_single_sign_on_url is not None:
            pulumi.set(__self__, "idp_single_sign_on_url", idp_single_sign_on_url)
        if limit_relaystate is not None:
            pulumi.set(__self__, "limit_relaystate", limit_relaystate)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reauth is not None:
            pulumi.set(__self__, "reauth", reauth)
        if single_logout_url is not None:
            pulumi.set(__self__, "single_logout_url", single_logout_url)
        if single_sign_on_url is not None:
            pulumi.set(__self__, "single_sign_on_url", single_sign_on_url)
        if user_claim_type is not None:
            pulumi.set(__self__, "user_claim_type", user_claim_type)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="adfsClaim")
    def adfs_claim(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ADFS Claim for user/group attribute in assertion statement (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adfs_claim")

    @adfs_claim.setter
    def adfs_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adfs_claim", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to verify authentication.
        """
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate to sign SAML messages.
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="clockTolerance")
    def clock_tolerance(self) -> Optional[pulumi.Input[int]]:
        """
        Clock skew tolerance in seconds (0 - 300, default = 15, 0 = no tolerance).
        """
        return pulumi.get(self, "clock_tolerance")

    @clock_tolerance.setter
    def clock_tolerance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "clock_tolerance", value)

    @property
    @pulumi.getter(name="digestMethod")
    def digest_method(self) -> Optional[pulumi.Input[str]]:
        """
        Digest Method Algorithm. (default = sha1). Valid values: `sha1`, `sha256`.
        """
        return pulumi.get(self, "digest_method")

    @digest_method.setter
    def digest_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest_method", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        SP entity ID.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="groupClaimType")
    def group_claim_type(self) -> Optional[pulumi.Input[str]]:
        """
        Group claim in assertion statement. Valid values: `email`, `given-name`, `name`, `upn`, `common-name`, `email-adfs-1x`, `group`, `upn-adfs-1x`, `role`, `sur-name`, `ppid`, `name-identifier`, `authentication-method`, `deny-only-group-sid`, `deny-only-primary-sid`, `deny-only-primary-group-sid`, `group-sid`, `primary-group-sid`, `primary-sid`, `windows-account-name`.
        """
        return pulumi.get(self, "group_claim_type")

    @group_claim_type.setter
    def group_claim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_claim_type", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name in assertion statement.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="idpCert")
    def idp_cert(self) -> Optional[pulumi.Input[str]]:
        """
        IDP Certificate name.
        """
        return pulumi.get(self, "idp_cert")

    @idp_cert.setter
    def idp_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_cert", value)

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        IDP entity ID.
        """
        return pulumi.get(self, "idp_entity_id")

    @idp_entity_id.setter
    def idp_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_entity_id", value)

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        IDP single logout url.
        """
        return pulumi.get(self, "idp_single_logout_url")

    @idp_single_logout_url.setter
    def idp_single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_logout_url", value)

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        """
        IDP single sign-on URL.
        """
        return pulumi.get(self, "idp_single_sign_on_url")

    @idp_single_sign_on_url.setter
    def idp_single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_sign_on_url", value)

    @property
    @pulumi.getter(name="limitRelaystate")
    def limit_relaystate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable limiting of relay-state parameter when it exceeds SAML 2.0 specification limits (80 bytes). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "limit_relaystate")

    @limit_relaystate.setter
    def limit_relaystate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limit_relaystate", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SAML server entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def reauth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable signalling of IDP to force user re-authentication (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "reauth")

    @reauth.setter
    def reauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reauth", value)

    @property
    @pulumi.getter(name="singleLogoutUrl")
    def single_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP single logout URL.
        """
        return pulumi.get(self, "single_logout_url")

    @single_logout_url.setter
    def single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_logout_url", value)

    @property
    @pulumi.getter(name="singleSignOnUrl")
    def single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP single sign-on URL.
        """
        return pulumi.get(self, "single_sign_on_url")

    @single_sign_on_url.setter
    def single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "single_sign_on_url", value)

    @property
    @pulumi.getter(name="userClaimType")
    def user_claim_type(self) -> Optional[pulumi.Input[str]]:
        """
        User name claim in assertion statement. Valid values: `email`, `given-name`, `name`, `upn`, `common-name`, `email-adfs-1x`, `group`, `upn-adfs-1x`, `role`, `sur-name`, `ppid`, `name-identifier`, `authentication-method`, `deny-only-group-sid`, `deny-only-primary-sid`, `deny-only-primary-group-sid`, `group-sid`, `primary-group-sid`, `primary-sid`, `windows-account-name`.
        """
        return pulumi.get(self, "user_claim_type")

    @user_claim_type.setter
    def user_claim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_claim_type", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name in assertion statement.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Saml(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adfs_claim: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 clock_tolerance: Optional[pulumi.Input[int]] = None,
                 digest_method: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 group_claim_type: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 idp_cert: Optional[pulumi.Input[str]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 limit_relaystate: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reauth: Optional[pulumi.Input[str]] = None,
                 single_logout_url: Optional[pulumi.Input[str]] = None,
                 single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 user_claim_type: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        SAML server entry configuration. Applies to FortiOS Version `>= 6.2.4`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        tr3 = fortios.user.Saml("tr3",
            cert="Fortinet_Factory",
            entity_id="https://1.1.1.1",
            idp_cert="cer11",
            idp_entity_id="https://1.1.1.1/acc",
            idp_single_logout_url="https://1.1.1.1/lo",
            idp_single_sign_on_url="https://1.1.1.1/sou",
            single_logout_url="https://1.1.1.1/logout",
            single_sign_on_url="https://1.1.1.1/sign",
            user_name="ad111")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        User Saml can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/saml:Saml labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/saml:Saml labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adfs_claim: Enable/disable ADFS Claim for user/group attribute in assertion statement (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_url: URL to verify authentication.
        :param pulumi.Input[str] cert: Certificate to sign SAML messages.
        :param pulumi.Input[int] clock_tolerance: Clock skew tolerance in seconds (0 - 300, default = 15, 0 = no tolerance).
        :param pulumi.Input[str] digest_method: Digest Method Algorithm. (default = sha1). Valid values: `sha1`, `sha256`.
        :param pulumi.Input[str] entity_id: SP entity ID.
        :param pulumi.Input[str] group_claim_type: Group claim in assertion statement. Valid values: `email`, `given-name`, `name`, `upn`, `common-name`, `email-adfs-1x`, `group`, `upn-adfs-1x`, `role`, `sur-name`, `ppid`, `name-identifier`, `authentication-method`, `deny-only-group-sid`, `deny-only-primary-sid`, `deny-only-primary-group-sid`, `group-sid`, `primary-group-sid`, `primary-sid`, `windows-account-name`.
        :param pulumi.Input[str] group_name: Group name in assertion statement.
        :param pulumi.Input[str] idp_cert: IDP Certificate name.
        :param pulumi.Input[str] idp_entity_id: IDP entity ID.
        :param pulumi.Input[str] idp_single_logout_url: IDP single logout url.
        :param pulumi.Input[str] idp_single_sign_on_url: IDP single sign-on URL.
        :param pulumi.Input[str] limit_relaystate: Enable/disable limiting of relay-state parameter when it exceeds SAML 2.0 specification limits (80 bytes). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: SAML server entry name.
        :param pulumi.Input[str] reauth: Enable/disable signalling of IDP to force user re-authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] single_logout_url: SP single logout URL.
        :param pulumi.Input[str] single_sign_on_url: SP single sign-on URL.
        :param pulumi.Input[str] user_claim_type: User name claim in assertion statement. Valid values: `email`, `given-name`, `name`, `upn`, `common-name`, `email-adfs-1x`, `group`, `upn-adfs-1x`, `role`, `sur-name`, `ppid`, `name-identifier`, `authentication-method`, `deny-only-group-sid`, `deny-only-primary-sid`, `deny-only-primary-group-sid`, `group-sid`, `primary-group-sid`, `primary-sid`, `windows-account-name`.
        :param pulumi.Input[str] user_name: User name in assertion statement.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SamlArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        SAML server entry configuration. Applies to FortiOS Version `>= 6.2.4`.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        tr3 = fortios.user.Saml("tr3",
            cert="Fortinet_Factory",
            entity_id="https://1.1.1.1",
            idp_cert="cer11",
            idp_entity_id="https://1.1.1.1/acc",
            idp_single_logout_url="https://1.1.1.1/lo",
            idp_single_sign_on_url="https://1.1.1.1/sou",
            single_logout_url="https://1.1.1.1/logout",
            single_sign_on_url="https://1.1.1.1/sign",
            user_name="ad111")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        User Saml can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/saml:Saml labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/saml:Saml labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SamlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SamlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adfs_claim: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 clock_tolerance: Optional[pulumi.Input[int]] = None,
                 digest_method: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 group_claim_type: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 idp_cert: Optional[pulumi.Input[str]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 limit_relaystate: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reauth: Optional[pulumi.Input[str]] = None,
                 single_logout_url: Optional[pulumi.Input[str]] = None,
                 single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 user_claim_type: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SamlArgs.__new__(SamlArgs)

            __props__.__dict__["adfs_claim"] = adfs_claim
            __props__.__dict__["auth_url"] = auth_url
            __props__.__dict__["cert"] = cert
            __props__.__dict__["clock_tolerance"] = clock_tolerance
            __props__.__dict__["digest_method"] = digest_method
            if entity_id is None and not opts.urn:
                raise TypeError("Missing required property 'entity_id'")
            __props__.__dict__["entity_id"] = entity_id
            __props__.__dict__["group_claim_type"] = group_claim_type
            __props__.__dict__["group_name"] = group_name
            if idp_cert is None and not opts.urn:
                raise TypeError("Missing required property 'idp_cert'")
            __props__.__dict__["idp_cert"] = idp_cert
            if idp_entity_id is None and not opts.urn:
                raise TypeError("Missing required property 'idp_entity_id'")
            __props__.__dict__["idp_entity_id"] = idp_entity_id
            __props__.__dict__["idp_single_logout_url"] = idp_single_logout_url
            if idp_single_sign_on_url is None and not opts.urn:
                raise TypeError("Missing required property 'idp_single_sign_on_url'")
            __props__.__dict__["idp_single_sign_on_url"] = idp_single_sign_on_url
            __props__.__dict__["limit_relaystate"] = limit_relaystate
            __props__.__dict__["name"] = name
            __props__.__dict__["reauth"] = reauth
            __props__.__dict__["single_logout_url"] = single_logout_url
            if single_sign_on_url is None and not opts.urn:
                raise TypeError("Missing required property 'single_sign_on_url'")
            __props__.__dict__["single_sign_on_url"] = single_sign_on_url
            __props__.__dict__["user_claim_type"] = user_claim_type
            __props__.__dict__["user_name"] = user_name
            __props__.__dict__["vdomparam"] = vdomparam
        super(Saml, __self__).__init__(
            'fortios:user/saml:Saml',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adfs_claim: Optional[pulumi.Input[str]] = None,
            auth_url: Optional[pulumi.Input[str]] = None,
            cert: Optional[pulumi.Input[str]] = None,
            clock_tolerance: Optional[pulumi.Input[int]] = None,
            digest_method: Optional[pulumi.Input[str]] = None,
            entity_id: Optional[pulumi.Input[str]] = None,
            group_claim_type: Optional[pulumi.Input[str]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            idp_cert: Optional[pulumi.Input[str]] = None,
            idp_entity_id: Optional[pulumi.Input[str]] = None,
            idp_single_logout_url: Optional[pulumi.Input[str]] = None,
            idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
            limit_relaystate: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            reauth: Optional[pulumi.Input[str]] = None,
            single_logout_url: Optional[pulumi.Input[str]] = None,
            single_sign_on_url: Optional[pulumi.Input[str]] = None,
            user_claim_type: Optional[pulumi.Input[str]] = None,
            user_name: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Saml':
        """
        Get an existing Saml resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adfs_claim: Enable/disable ADFS Claim for user/group attribute in assertion statement (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_url: URL to verify authentication.
        :param pulumi.Input[str] cert: Certificate to sign SAML messages.
        :param pulumi.Input[int] clock_tolerance: Clock skew tolerance in seconds (0 - 300, default = 15, 0 = no tolerance).
        :param pulumi.Input[str] digest_method: Digest Method Algorithm. (default = sha1). Valid values: `sha1`, `sha256`.
        :param pulumi.Input[str] entity_id: SP entity ID.
        :param pulumi.Input[str] group_claim_type: Group claim in assertion statement. Valid values: `email`, `given-name`, `name`, `upn`, `common-name`, `email-adfs-1x`, `group`, `upn-adfs-1x`, `role`, `sur-name`, `ppid`, `name-identifier`, `authentication-method`, `deny-only-group-sid`, `deny-only-primary-sid`, `deny-only-primary-group-sid`, `group-sid`, `primary-group-sid`, `primary-sid`, `windows-account-name`.
        :param pulumi.Input[str] group_name: Group name in assertion statement.
        :param pulumi.Input[str] idp_cert: IDP Certificate name.
        :param pulumi.Input[str] idp_entity_id: IDP entity ID.
        :param pulumi.Input[str] idp_single_logout_url: IDP single logout url.
        :param pulumi.Input[str] idp_single_sign_on_url: IDP single sign-on URL.
        :param pulumi.Input[str] limit_relaystate: Enable/disable limiting of relay-state parameter when it exceeds SAML 2.0 specification limits (80 bytes). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: SAML server entry name.
        :param pulumi.Input[str] reauth: Enable/disable signalling of IDP to force user re-authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] single_logout_url: SP single logout URL.
        :param pulumi.Input[str] single_sign_on_url: SP single sign-on URL.
        :param pulumi.Input[str] user_claim_type: User name claim in assertion statement. Valid values: `email`, `given-name`, `name`, `upn`, `common-name`, `email-adfs-1x`, `group`, `upn-adfs-1x`, `role`, `sur-name`, `ppid`, `name-identifier`, `authentication-method`, `deny-only-group-sid`, `deny-only-primary-sid`, `deny-only-primary-group-sid`, `group-sid`, `primary-group-sid`, `primary-sid`, `windows-account-name`.
        :param pulumi.Input[str] user_name: User name in assertion statement.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SamlState.__new__(_SamlState)

        __props__.__dict__["adfs_claim"] = adfs_claim
        __props__.__dict__["auth_url"] = auth_url
        __props__.__dict__["cert"] = cert
        __props__.__dict__["clock_tolerance"] = clock_tolerance
        __props__.__dict__["digest_method"] = digest_method
        __props__.__dict__["entity_id"] = entity_id
        __props__.__dict__["group_claim_type"] = group_claim_type
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["idp_cert"] = idp_cert
        __props__.__dict__["idp_entity_id"] = idp_entity_id
        __props__.__dict__["idp_single_logout_url"] = idp_single_logout_url
        __props__.__dict__["idp_single_sign_on_url"] = idp_single_sign_on_url
        __props__.__dict__["limit_relaystate"] = limit_relaystate
        __props__.__dict__["name"] = name
        __props__.__dict__["reauth"] = reauth
        __props__.__dict__["single_logout_url"] = single_logout_url
        __props__.__dict__["single_sign_on_url"] = single_sign_on_url
        __props__.__dict__["user_claim_type"] = user_claim_type
        __props__.__dict__["user_name"] = user_name
        __props__.__dict__["vdomparam"] = vdomparam
        return Saml(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adfsClaim")
    def adfs_claim(self) -> pulumi.Output[str]:
        """
        Enable/disable ADFS Claim for user/group attribute in assertion statement (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "adfs_claim")

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> pulumi.Output[Optional[str]]:
        """
        URL to verify authentication.
        """
        return pulumi.get(self, "auth_url")

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Output[str]:
        """
        Certificate to sign SAML messages.
        """
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter(name="clockTolerance")
    def clock_tolerance(self) -> pulumi.Output[int]:
        """
        Clock skew tolerance in seconds (0 - 300, default = 15, 0 = no tolerance).
        """
        return pulumi.get(self, "clock_tolerance")

    @property
    @pulumi.getter(name="digestMethod")
    def digest_method(self) -> pulumi.Output[str]:
        """
        Digest Method Algorithm. (default = sha1). Valid values: `sha1`, `sha256`.
        """
        return pulumi.get(self, "digest_method")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Output[str]:
        """
        SP entity ID.
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="groupClaimType")
    def group_claim_type(self) -> pulumi.Output[str]:
        """
        Group claim in assertion statement. Valid values: `email`, `given-name`, `name`, `upn`, `common-name`, `email-adfs-1x`, `group`, `upn-adfs-1x`, `role`, `sur-name`, `ppid`, `name-identifier`, `authentication-method`, `deny-only-group-sid`, `deny-only-primary-sid`, `deny-only-primary-group-sid`, `group-sid`, `primary-group-sid`, `primary-sid`, `windows-account-name`.
        """
        return pulumi.get(self, "group_claim_type")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[str]:
        """
        Group name in assertion statement.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="idpCert")
    def idp_cert(self) -> pulumi.Output[str]:
        """
        IDP Certificate name.
        """
        return pulumi.get(self, "idp_cert")

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> pulumi.Output[str]:
        """
        IDP entity ID.
        """
        return pulumi.get(self, "idp_entity_id")

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> pulumi.Output[str]:
        """
        IDP single logout url.
        """
        return pulumi.get(self, "idp_single_logout_url")

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> pulumi.Output[str]:
        """
        IDP single sign-on URL.
        """
        return pulumi.get(self, "idp_single_sign_on_url")

    @property
    @pulumi.getter(name="limitRelaystate")
    def limit_relaystate(self) -> pulumi.Output[str]:
        """
        Enable/disable limiting of relay-state parameter when it exceeds SAML 2.0 specification limits (80 bytes). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "limit_relaystate")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        SAML server entry name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def reauth(self) -> pulumi.Output[str]:
        """
        Enable/disable signalling of IDP to force user re-authentication (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "reauth")

    @property
    @pulumi.getter(name="singleLogoutUrl")
    def single_logout_url(self) -> pulumi.Output[str]:
        """
        SP single logout URL.
        """
        return pulumi.get(self, "single_logout_url")

    @property
    @pulumi.getter(name="singleSignOnUrl")
    def single_sign_on_url(self) -> pulumi.Output[str]:
        """
        SP single sign-on URL.
        """
        return pulumi.get(self, "single_sign_on_url")

    @property
    @pulumi.getter(name="userClaimType")
    def user_claim_type(self) -> pulumi.Output[str]:
        """
        User name claim in assertion statement. Valid values: `email`, `given-name`, `name`, `upn`, `common-name`, `email-adfs-1x`, `group`, `upn-adfs-1x`, `role`, `sur-name`, `ppid`, `name-identifier`, `authentication-method`, `deny-only-group-sid`, `deny-only-primary-sid`, `deny-only-primary-group-sid`, `group-sid`, `primary-group-sid`, `primary-sid`, `windows-account-name`.
        """
        return pulumi.get(self, "user_claim_type")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[str]:
        """
        User name in assertion statement.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

