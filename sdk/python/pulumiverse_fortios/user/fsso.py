# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['FssoArgs', 'Fsso']

@pulumi.input_type
class FssoArgs:
    def __init__(__self__, *,
                 server: pulumi.Input[str],
                 group_poll_interval: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ldap_poll: Optional[pulumi.Input[str]] = None,
                 ldap_poll_filter: Optional[pulumi.Input[str]] = None,
                 ldap_poll_interval: Optional[pulumi.Input[int]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 logon_timeout: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password2: Optional[pulumi.Input[str]] = None,
                 password3: Optional[pulumi.Input[str]] = None,
                 password4: Optional[pulumi.Input[str]] = None,
                 password5: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port2: Optional[pulumi.Input[int]] = None,
                 port3: Optional[pulumi.Input[int]] = None,
                 port4: Optional[pulumi.Input[int]] = None,
                 port5: Optional[pulumi.Input[int]] = None,
                 server2: Optional[pulumi.Input[str]] = None,
                 server3: Optional[pulumi.Input[str]] = None,
                 server4: Optional[pulumi.Input[str]] = None,
                 server5: Optional[pulumi.Input[str]] = None,
                 sni: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 ssl_server_host_ip_check: Optional[pulumi.Input[str]] = None,
                 ssl_trusted_cert: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_info_server: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Fsso resource.
        :param pulumi.Input[str] server: Domain name or IP address of the first FSSO collector agent.
        :param pulumi.Input[int] group_poll_interval: Interval in minutes within to fetch groups from FSSO server, or unset to disable.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ldap_poll: Enable/disable automatic fetching of groups from LDAP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ldap_poll_filter: Filter used to fetch groups.
        :param pulumi.Input[int] ldap_poll_interval: Interval in minutes within to fetch groups from LDAP server.
        :param pulumi.Input[str] ldap_server: LDAP server to get group information.
        :param pulumi.Input[int] logon_timeout: Interval in minutes to keep logons after FSSO server down.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] password: Password of the first FSSO collector agent.
        :param pulumi.Input[str] password2: Password of the second FSSO collector agent.
        :param pulumi.Input[str] password3: Password of the third FSSO collector agent.
        :param pulumi.Input[str] password4: Password of the fourth FSSO collector agent.
        :param pulumi.Input[str] password5: Password of the fifth FSSO collector agent.
        :param pulumi.Input[int] port: Port of the first FSSO collector agent.
        :param pulumi.Input[int] port2: Port of the second FSSO collector agent.
        :param pulumi.Input[int] port3: Port of the third FSSO collector agent.
        :param pulumi.Input[int] port4: Port of the fourth FSSO collector agent.
        :param pulumi.Input[int] port5: Port of the fifth FSSO collector agent.
        :param pulumi.Input[str] server2: Domain name or IP address of the second FSSO collector agent.
        :param pulumi.Input[str] server3: Domain name or IP address of the third FSSO collector agent.
        :param pulumi.Input[str] server4: Domain name or IP address of the fourth FSSO collector agent.
        :param pulumi.Input[str] server5: Domain name or IP address of the fifth FSSO collector agent.
        :param pulumi.Input[str] sni: Server Name Indication.
        :param pulumi.Input[str] source_ip: Source IP for communications to FSSO agent.
        :param pulumi.Input[str] source_ip6: IPv6 source for communications to FSSO agent.
        :param pulumi.Input[str] ssl: Enable/disable use of SSL. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_server_host_ip_check: Enable/disable server host/IP verification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_trusted_cert: Trusted server certificate or CA certificate.
        :param pulumi.Input[str] type: Server type.
        :param pulumi.Input[str] user_info_server: LDAP server to get user information.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "server", server)
        if group_poll_interval is not None:
            pulumi.set(__self__, "group_poll_interval", group_poll_interval)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ldap_poll is not None:
            pulumi.set(__self__, "ldap_poll", ldap_poll)
        if ldap_poll_filter is not None:
            pulumi.set(__self__, "ldap_poll_filter", ldap_poll_filter)
        if ldap_poll_interval is not None:
            pulumi.set(__self__, "ldap_poll_interval", ldap_poll_interval)
        if ldap_server is not None:
            pulumi.set(__self__, "ldap_server", ldap_server)
        if logon_timeout is not None:
            pulumi.set(__self__, "logon_timeout", logon_timeout)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password2 is not None:
            pulumi.set(__self__, "password2", password2)
        if password3 is not None:
            pulumi.set(__self__, "password3", password3)
        if password4 is not None:
            pulumi.set(__self__, "password4", password4)
        if password5 is not None:
            pulumi.set(__self__, "password5", password5)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port2 is not None:
            pulumi.set(__self__, "port2", port2)
        if port3 is not None:
            pulumi.set(__self__, "port3", port3)
        if port4 is not None:
            pulumi.set(__self__, "port4", port4)
        if port5 is not None:
            pulumi.set(__self__, "port5", port5)
        if server2 is not None:
            pulumi.set(__self__, "server2", server2)
        if server3 is not None:
            pulumi.set(__self__, "server3", server3)
        if server4 is not None:
            pulumi.set(__self__, "server4", server4)
        if server5 is not None:
            pulumi.set(__self__, "server5", server5)
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_server_host_ip_check is not None:
            pulumi.set(__self__, "ssl_server_host_ip_check", ssl_server_host_ip_check)
        if ssl_trusted_cert is not None:
            pulumi.set(__self__, "ssl_trusted_cert", ssl_trusted_cert)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_info_server is not None:
            pulumi.set(__self__, "user_info_server", user_info_server)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        Domain name or IP address of the first FSSO collector agent.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="groupPollInterval")
    def group_poll_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval in minutes within to fetch groups from FSSO server, or unset to disable.
        """
        return pulumi.get(self, "group_poll_interval")

    @group_poll_interval.setter
    def group_poll_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_poll_interval", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ldapPoll")
    def ldap_poll(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic fetching of groups from LDAP server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ldap_poll")

    @ldap_poll.setter
    def ldap_poll(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_poll", value)

    @property
    @pulumi.getter(name="ldapPollFilter")
    def ldap_poll_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Filter used to fetch groups.
        """
        return pulumi.get(self, "ldap_poll_filter")

    @ldap_poll_filter.setter
    def ldap_poll_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_poll_filter", value)

    @property
    @pulumi.getter(name="ldapPollInterval")
    def ldap_poll_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval in minutes within to fetch groups from LDAP server.
        """
        return pulumi.get(self, "ldap_poll_interval")

    @ldap_poll_interval.setter
    def ldap_poll_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ldap_poll_interval", value)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP server to get group information.
        """
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter(name="logonTimeout")
    def logon_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Interval in minutes to keep logons after FSSO server down.
        """
        return pulumi.get(self, "logon_timeout")

    @logon_timeout.setter
    def logon_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logon_timeout", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the first FSSO collector agent.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def password2(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the second FSSO collector agent.
        """
        return pulumi.get(self, "password2")

    @password2.setter
    def password2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password2", value)

    @property
    @pulumi.getter
    def password3(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the third FSSO collector agent.
        """
        return pulumi.get(self, "password3")

    @password3.setter
    def password3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password3", value)

    @property
    @pulumi.getter
    def password4(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the fourth FSSO collector agent.
        """
        return pulumi.get(self, "password4")

    @password4.setter
    def password4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password4", value)

    @property
    @pulumi.getter
    def password5(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the fifth FSSO collector agent.
        """
        return pulumi.get(self, "password5")

    @password5.setter
    def password5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password5", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the first FSSO collector agent.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def port2(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the second FSSO collector agent.
        """
        return pulumi.get(self, "port2")

    @port2.setter
    def port2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port2", value)

    @property
    @pulumi.getter
    def port3(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the third FSSO collector agent.
        """
        return pulumi.get(self, "port3")

    @port3.setter
    def port3(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port3", value)

    @property
    @pulumi.getter
    def port4(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the fourth FSSO collector agent.
        """
        return pulumi.get(self, "port4")

    @port4.setter
    def port4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port4", value)

    @property
    @pulumi.getter
    def port5(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the fifth FSSO collector agent.
        """
        return pulumi.get(self, "port5")

    @port5.setter
    def port5(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port5", value)

    @property
    @pulumi.getter
    def server2(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name or IP address of the second FSSO collector agent.
        """
        return pulumi.get(self, "server2")

    @server2.setter
    def server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server2", value)

    @property
    @pulumi.getter
    def server3(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name or IP address of the third FSSO collector agent.
        """
        return pulumi.get(self, "server3")

    @server3.setter
    def server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server3", value)

    @property
    @pulumi.getter
    def server4(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name or IP address of the fourth FSSO collector agent.
        """
        return pulumi.get(self, "server4")

    @server4.setter
    def server4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server4", value)

    @property
    @pulumi.getter
    def server5(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name or IP address of the fifth FSSO collector agent.
        """
        return pulumi.get(self, "server5")

    @server5.setter
    def server5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server5", value)

    @property
    @pulumi.getter
    def sni(self) -> Optional[pulumi.Input[str]]:
        """
        Server Name Indication.
        """
        return pulumi.get(self, "sni")

    @sni.setter
    def sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP for communications to FSSO agent.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 source for communications to FSSO agent.
        """
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of SSL. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="sslServerHostIpCheck")
    def ssl_server_host_ip_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable server host/IP verification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_server_host_ip_check")

    @ssl_server_host_ip_check.setter
    def ssl_server_host_ip_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_host_ip_check", value)

    @property
    @pulumi.getter(name="sslTrustedCert")
    def ssl_trusted_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted server certificate or CA certificate.
        """
        return pulumi.get(self, "ssl_trusted_cert")

    @ssl_trusted_cert.setter
    def ssl_trusted_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_trusted_cert", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Server type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userInfoServer")
    def user_info_server(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP server to get user information.
        """
        return pulumi.get(self, "user_info_server")

    @user_info_server.setter
    def user_info_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_info_server", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _FssoState:
    def __init__(__self__, *,
                 group_poll_interval: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ldap_poll: Optional[pulumi.Input[str]] = None,
                 ldap_poll_filter: Optional[pulumi.Input[str]] = None,
                 ldap_poll_interval: Optional[pulumi.Input[int]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 logon_timeout: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password2: Optional[pulumi.Input[str]] = None,
                 password3: Optional[pulumi.Input[str]] = None,
                 password4: Optional[pulumi.Input[str]] = None,
                 password5: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port2: Optional[pulumi.Input[int]] = None,
                 port3: Optional[pulumi.Input[int]] = None,
                 port4: Optional[pulumi.Input[int]] = None,
                 port5: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server2: Optional[pulumi.Input[str]] = None,
                 server3: Optional[pulumi.Input[str]] = None,
                 server4: Optional[pulumi.Input[str]] = None,
                 server5: Optional[pulumi.Input[str]] = None,
                 sni: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 ssl_server_host_ip_check: Optional[pulumi.Input[str]] = None,
                 ssl_trusted_cert: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_info_server: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Fsso resources.
        :param pulumi.Input[int] group_poll_interval: Interval in minutes within to fetch groups from FSSO server, or unset to disable.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ldap_poll: Enable/disable automatic fetching of groups from LDAP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ldap_poll_filter: Filter used to fetch groups.
        :param pulumi.Input[int] ldap_poll_interval: Interval in minutes within to fetch groups from LDAP server.
        :param pulumi.Input[str] ldap_server: LDAP server to get group information.
        :param pulumi.Input[int] logon_timeout: Interval in minutes to keep logons after FSSO server down.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] password: Password of the first FSSO collector agent.
        :param pulumi.Input[str] password2: Password of the second FSSO collector agent.
        :param pulumi.Input[str] password3: Password of the third FSSO collector agent.
        :param pulumi.Input[str] password4: Password of the fourth FSSO collector agent.
        :param pulumi.Input[str] password5: Password of the fifth FSSO collector agent.
        :param pulumi.Input[int] port: Port of the first FSSO collector agent.
        :param pulumi.Input[int] port2: Port of the second FSSO collector agent.
        :param pulumi.Input[int] port3: Port of the third FSSO collector agent.
        :param pulumi.Input[int] port4: Port of the fourth FSSO collector agent.
        :param pulumi.Input[int] port5: Port of the fifth FSSO collector agent.
        :param pulumi.Input[str] server: Domain name or IP address of the first FSSO collector agent.
        :param pulumi.Input[str] server2: Domain name or IP address of the second FSSO collector agent.
        :param pulumi.Input[str] server3: Domain name or IP address of the third FSSO collector agent.
        :param pulumi.Input[str] server4: Domain name or IP address of the fourth FSSO collector agent.
        :param pulumi.Input[str] server5: Domain name or IP address of the fifth FSSO collector agent.
        :param pulumi.Input[str] sni: Server Name Indication.
        :param pulumi.Input[str] source_ip: Source IP for communications to FSSO agent.
        :param pulumi.Input[str] source_ip6: IPv6 source for communications to FSSO agent.
        :param pulumi.Input[str] ssl: Enable/disable use of SSL. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_server_host_ip_check: Enable/disable server host/IP verification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_trusted_cert: Trusted server certificate or CA certificate.
        :param pulumi.Input[str] type: Server type.
        :param pulumi.Input[str] user_info_server: LDAP server to get user information.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if group_poll_interval is not None:
            pulumi.set(__self__, "group_poll_interval", group_poll_interval)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ldap_poll is not None:
            pulumi.set(__self__, "ldap_poll", ldap_poll)
        if ldap_poll_filter is not None:
            pulumi.set(__self__, "ldap_poll_filter", ldap_poll_filter)
        if ldap_poll_interval is not None:
            pulumi.set(__self__, "ldap_poll_interval", ldap_poll_interval)
        if ldap_server is not None:
            pulumi.set(__self__, "ldap_server", ldap_server)
        if logon_timeout is not None:
            pulumi.set(__self__, "logon_timeout", logon_timeout)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password2 is not None:
            pulumi.set(__self__, "password2", password2)
        if password3 is not None:
            pulumi.set(__self__, "password3", password3)
        if password4 is not None:
            pulumi.set(__self__, "password4", password4)
        if password5 is not None:
            pulumi.set(__self__, "password5", password5)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port2 is not None:
            pulumi.set(__self__, "port2", port2)
        if port3 is not None:
            pulumi.set(__self__, "port3", port3)
        if port4 is not None:
            pulumi.set(__self__, "port4", port4)
        if port5 is not None:
            pulumi.set(__self__, "port5", port5)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if server2 is not None:
            pulumi.set(__self__, "server2", server2)
        if server3 is not None:
            pulumi.set(__self__, "server3", server3)
        if server4 is not None:
            pulumi.set(__self__, "server4", server4)
        if server5 is not None:
            pulumi.set(__self__, "server5", server5)
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_server_host_ip_check is not None:
            pulumi.set(__self__, "ssl_server_host_ip_check", ssl_server_host_ip_check)
        if ssl_trusted_cert is not None:
            pulumi.set(__self__, "ssl_trusted_cert", ssl_trusted_cert)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_info_server is not None:
            pulumi.set(__self__, "user_info_server", user_info_server)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="groupPollInterval")
    def group_poll_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval in minutes within to fetch groups from FSSO server, or unset to disable.
        """
        return pulumi.get(self, "group_poll_interval")

    @group_poll_interval.setter
    def group_poll_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_poll_interval", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ldapPoll")
    def ldap_poll(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic fetching of groups from LDAP server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ldap_poll")

    @ldap_poll.setter
    def ldap_poll(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_poll", value)

    @property
    @pulumi.getter(name="ldapPollFilter")
    def ldap_poll_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Filter used to fetch groups.
        """
        return pulumi.get(self, "ldap_poll_filter")

    @ldap_poll_filter.setter
    def ldap_poll_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_poll_filter", value)

    @property
    @pulumi.getter(name="ldapPollInterval")
    def ldap_poll_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval in minutes within to fetch groups from LDAP server.
        """
        return pulumi.get(self, "ldap_poll_interval")

    @ldap_poll_interval.setter
    def ldap_poll_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ldap_poll_interval", value)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP server to get group information.
        """
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter(name="logonTimeout")
    def logon_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Interval in minutes to keep logons after FSSO server down.
        """
        return pulumi.get(self, "logon_timeout")

    @logon_timeout.setter
    def logon_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logon_timeout", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the first FSSO collector agent.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def password2(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the second FSSO collector agent.
        """
        return pulumi.get(self, "password2")

    @password2.setter
    def password2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password2", value)

    @property
    @pulumi.getter
    def password3(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the third FSSO collector agent.
        """
        return pulumi.get(self, "password3")

    @password3.setter
    def password3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password3", value)

    @property
    @pulumi.getter
    def password4(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the fourth FSSO collector agent.
        """
        return pulumi.get(self, "password4")

    @password4.setter
    def password4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password4", value)

    @property
    @pulumi.getter
    def password5(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the fifth FSSO collector agent.
        """
        return pulumi.get(self, "password5")

    @password5.setter
    def password5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password5", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the first FSSO collector agent.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def port2(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the second FSSO collector agent.
        """
        return pulumi.get(self, "port2")

    @port2.setter
    def port2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port2", value)

    @property
    @pulumi.getter
    def port3(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the third FSSO collector agent.
        """
        return pulumi.get(self, "port3")

    @port3.setter
    def port3(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port3", value)

    @property
    @pulumi.getter
    def port4(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the fourth FSSO collector agent.
        """
        return pulumi.get(self, "port4")

    @port4.setter
    def port4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port4", value)

    @property
    @pulumi.getter
    def port5(self) -> Optional[pulumi.Input[int]]:
        """
        Port of the fifth FSSO collector agent.
        """
        return pulumi.get(self, "port5")

    @port5.setter
    def port5(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port5", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name or IP address of the first FSSO collector agent.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def server2(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name or IP address of the second FSSO collector agent.
        """
        return pulumi.get(self, "server2")

    @server2.setter
    def server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server2", value)

    @property
    @pulumi.getter
    def server3(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name or IP address of the third FSSO collector agent.
        """
        return pulumi.get(self, "server3")

    @server3.setter
    def server3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server3", value)

    @property
    @pulumi.getter
    def server4(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name or IP address of the fourth FSSO collector agent.
        """
        return pulumi.get(self, "server4")

    @server4.setter
    def server4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server4", value)

    @property
    @pulumi.getter
    def server5(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name or IP address of the fifth FSSO collector agent.
        """
        return pulumi.get(self, "server5")

    @server5.setter
    def server5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server5", value)

    @property
    @pulumi.getter
    def sni(self) -> Optional[pulumi.Input[str]]:
        """
        Server Name Indication.
        """
        return pulumi.get(self, "sni")

    @sni.setter
    def sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP for communications to FSSO agent.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 source for communications to FSSO agent.
        """
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of SSL. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="sslServerHostIpCheck")
    def ssl_server_host_ip_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable server host/IP verification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_server_host_ip_check")

    @ssl_server_host_ip_check.setter
    def ssl_server_host_ip_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_host_ip_check", value)

    @property
    @pulumi.getter(name="sslTrustedCert")
    def ssl_trusted_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted server certificate or CA certificate.
        """
        return pulumi.get(self, "ssl_trusted_cert")

    @ssl_trusted_cert.setter
    def ssl_trusted_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_trusted_cert", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Server type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userInfoServer")
    def user_info_server(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP server to get user information.
        """
        return pulumi.get(self, "user_info_server")

    @user_info_server.setter
    def user_info_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_info_server", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Fsso(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_poll_interval: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ldap_poll: Optional[pulumi.Input[str]] = None,
                 ldap_poll_filter: Optional[pulumi.Input[str]] = None,
                 ldap_poll_interval: Optional[pulumi.Input[int]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 logon_timeout: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password2: Optional[pulumi.Input[str]] = None,
                 password3: Optional[pulumi.Input[str]] = None,
                 password4: Optional[pulumi.Input[str]] = None,
                 password5: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port2: Optional[pulumi.Input[int]] = None,
                 port3: Optional[pulumi.Input[int]] = None,
                 port4: Optional[pulumi.Input[int]] = None,
                 port5: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server2: Optional[pulumi.Input[str]] = None,
                 server3: Optional[pulumi.Input[str]] = None,
                 server4: Optional[pulumi.Input[str]] = None,
                 server5: Optional[pulumi.Input[str]] = None,
                 sni: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 ssl_server_host_ip_check: Optional[pulumi.Input[str]] = None,
                 ssl_trusted_cert: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_info_server: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure Fortinet Single Sign On (FSSO) agents.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.user.Fsso("trname",
            port=32381,
            port2=8000,
            port3=8000,
            port4=8000,
            port5=8000,
            server="1.1.1.1",
            source_ip="0.0.0.0",
            source_ip6="::")
        ```

        ## Import

        User Fsso can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/fsso:Fsso labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/fsso:Fsso labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] group_poll_interval: Interval in minutes within to fetch groups from FSSO server, or unset to disable.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ldap_poll: Enable/disable automatic fetching of groups from LDAP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ldap_poll_filter: Filter used to fetch groups.
        :param pulumi.Input[int] ldap_poll_interval: Interval in minutes within to fetch groups from LDAP server.
        :param pulumi.Input[str] ldap_server: LDAP server to get group information.
        :param pulumi.Input[int] logon_timeout: Interval in minutes to keep logons after FSSO server down.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] password: Password of the first FSSO collector agent.
        :param pulumi.Input[str] password2: Password of the second FSSO collector agent.
        :param pulumi.Input[str] password3: Password of the third FSSO collector agent.
        :param pulumi.Input[str] password4: Password of the fourth FSSO collector agent.
        :param pulumi.Input[str] password5: Password of the fifth FSSO collector agent.
        :param pulumi.Input[int] port: Port of the first FSSO collector agent.
        :param pulumi.Input[int] port2: Port of the second FSSO collector agent.
        :param pulumi.Input[int] port3: Port of the third FSSO collector agent.
        :param pulumi.Input[int] port4: Port of the fourth FSSO collector agent.
        :param pulumi.Input[int] port5: Port of the fifth FSSO collector agent.
        :param pulumi.Input[str] server: Domain name or IP address of the first FSSO collector agent.
        :param pulumi.Input[str] server2: Domain name or IP address of the second FSSO collector agent.
        :param pulumi.Input[str] server3: Domain name or IP address of the third FSSO collector agent.
        :param pulumi.Input[str] server4: Domain name or IP address of the fourth FSSO collector agent.
        :param pulumi.Input[str] server5: Domain name or IP address of the fifth FSSO collector agent.
        :param pulumi.Input[str] sni: Server Name Indication.
        :param pulumi.Input[str] source_ip: Source IP for communications to FSSO agent.
        :param pulumi.Input[str] source_ip6: IPv6 source for communications to FSSO agent.
        :param pulumi.Input[str] ssl: Enable/disable use of SSL. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_server_host_ip_check: Enable/disable server host/IP verification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_trusted_cert: Trusted server certificate or CA certificate.
        :param pulumi.Input[str] type: Server type.
        :param pulumi.Input[str] user_info_server: LDAP server to get user information.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FssoArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure Fortinet Single Sign On (FSSO) agents.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.user.Fsso("trname",
            port=32381,
            port2=8000,
            port3=8000,
            port4=8000,
            port5=8000,
            server="1.1.1.1",
            source_ip="0.0.0.0",
            source_ip6="::")
        ```

        ## Import

        User Fsso can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/fsso:Fsso labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/fsso:Fsso labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param FssoArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FssoArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_poll_interval: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ldap_poll: Optional[pulumi.Input[str]] = None,
                 ldap_poll_filter: Optional[pulumi.Input[str]] = None,
                 ldap_poll_interval: Optional[pulumi.Input[int]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 logon_timeout: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password2: Optional[pulumi.Input[str]] = None,
                 password3: Optional[pulumi.Input[str]] = None,
                 password4: Optional[pulumi.Input[str]] = None,
                 password5: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port2: Optional[pulumi.Input[int]] = None,
                 port3: Optional[pulumi.Input[int]] = None,
                 port4: Optional[pulumi.Input[int]] = None,
                 port5: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 server2: Optional[pulumi.Input[str]] = None,
                 server3: Optional[pulumi.Input[str]] = None,
                 server4: Optional[pulumi.Input[str]] = None,
                 server5: Optional[pulumi.Input[str]] = None,
                 sni: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 ssl_server_host_ip_check: Optional[pulumi.Input[str]] = None,
                 ssl_trusted_cert: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_info_server: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FssoArgs.__new__(FssoArgs)

            __props__.__dict__["group_poll_interval"] = group_poll_interval
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interface_select_method"] = interface_select_method
            __props__.__dict__["ldap_poll"] = ldap_poll
            __props__.__dict__["ldap_poll_filter"] = ldap_poll_filter
            __props__.__dict__["ldap_poll_interval"] = ldap_poll_interval
            __props__.__dict__["ldap_server"] = ldap_server
            __props__.__dict__["logon_timeout"] = logon_timeout
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["password2"] = None if password2 is None else pulumi.Output.secret(password2)
            __props__.__dict__["password3"] = None if password3 is None else pulumi.Output.secret(password3)
            __props__.__dict__["password4"] = None if password4 is None else pulumi.Output.secret(password4)
            __props__.__dict__["password5"] = None if password5 is None else pulumi.Output.secret(password5)
            __props__.__dict__["port"] = port
            __props__.__dict__["port2"] = port2
            __props__.__dict__["port3"] = port3
            __props__.__dict__["port4"] = port4
            __props__.__dict__["port5"] = port5
            if server is None and not opts.urn:
                raise TypeError("Missing required property 'server'")
            __props__.__dict__["server"] = server
            __props__.__dict__["server2"] = server2
            __props__.__dict__["server3"] = server3
            __props__.__dict__["server4"] = server4
            __props__.__dict__["server5"] = server5
            __props__.__dict__["sni"] = sni
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["source_ip6"] = source_ip6
            __props__.__dict__["ssl"] = ssl
            __props__.__dict__["ssl_server_host_ip_check"] = ssl_server_host_ip_check
            __props__.__dict__["ssl_trusted_cert"] = ssl_trusted_cert
            __props__.__dict__["type"] = type
            __props__.__dict__["user_info_server"] = user_info_server
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password", "password2", "password3", "password4", "password5"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Fsso, __self__).__init__(
            'fortios:user/fsso:Fsso',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            group_poll_interval: Optional[pulumi.Input[int]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interface_select_method: Optional[pulumi.Input[str]] = None,
            ldap_poll: Optional[pulumi.Input[str]] = None,
            ldap_poll_filter: Optional[pulumi.Input[str]] = None,
            ldap_poll_interval: Optional[pulumi.Input[int]] = None,
            ldap_server: Optional[pulumi.Input[str]] = None,
            logon_timeout: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            password2: Optional[pulumi.Input[str]] = None,
            password3: Optional[pulumi.Input[str]] = None,
            password4: Optional[pulumi.Input[str]] = None,
            password5: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            port2: Optional[pulumi.Input[int]] = None,
            port3: Optional[pulumi.Input[int]] = None,
            port4: Optional[pulumi.Input[int]] = None,
            port5: Optional[pulumi.Input[int]] = None,
            server: Optional[pulumi.Input[str]] = None,
            server2: Optional[pulumi.Input[str]] = None,
            server3: Optional[pulumi.Input[str]] = None,
            server4: Optional[pulumi.Input[str]] = None,
            server5: Optional[pulumi.Input[str]] = None,
            sni: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            source_ip6: Optional[pulumi.Input[str]] = None,
            ssl: Optional[pulumi.Input[str]] = None,
            ssl_server_host_ip_check: Optional[pulumi.Input[str]] = None,
            ssl_trusted_cert: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            user_info_server: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Fsso':
        """
        Get an existing Fsso resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] group_poll_interval: Interval in minutes within to fetch groups from FSSO server, or unset to disable.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ldap_poll: Enable/disable automatic fetching of groups from LDAP server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ldap_poll_filter: Filter used to fetch groups.
        :param pulumi.Input[int] ldap_poll_interval: Interval in minutes within to fetch groups from LDAP server.
        :param pulumi.Input[str] ldap_server: LDAP server to get group information.
        :param pulumi.Input[int] logon_timeout: Interval in minutes to keep logons after FSSO server down.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] password: Password of the first FSSO collector agent.
        :param pulumi.Input[str] password2: Password of the second FSSO collector agent.
        :param pulumi.Input[str] password3: Password of the third FSSO collector agent.
        :param pulumi.Input[str] password4: Password of the fourth FSSO collector agent.
        :param pulumi.Input[str] password5: Password of the fifth FSSO collector agent.
        :param pulumi.Input[int] port: Port of the first FSSO collector agent.
        :param pulumi.Input[int] port2: Port of the second FSSO collector agent.
        :param pulumi.Input[int] port3: Port of the third FSSO collector agent.
        :param pulumi.Input[int] port4: Port of the fourth FSSO collector agent.
        :param pulumi.Input[int] port5: Port of the fifth FSSO collector agent.
        :param pulumi.Input[str] server: Domain name or IP address of the first FSSO collector agent.
        :param pulumi.Input[str] server2: Domain name or IP address of the second FSSO collector agent.
        :param pulumi.Input[str] server3: Domain name or IP address of the third FSSO collector agent.
        :param pulumi.Input[str] server4: Domain name or IP address of the fourth FSSO collector agent.
        :param pulumi.Input[str] server5: Domain name or IP address of the fifth FSSO collector agent.
        :param pulumi.Input[str] sni: Server Name Indication.
        :param pulumi.Input[str] source_ip: Source IP for communications to FSSO agent.
        :param pulumi.Input[str] source_ip6: IPv6 source for communications to FSSO agent.
        :param pulumi.Input[str] ssl: Enable/disable use of SSL. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_server_host_ip_check: Enable/disable server host/IP verification. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_trusted_cert: Trusted server certificate or CA certificate.
        :param pulumi.Input[str] type: Server type.
        :param pulumi.Input[str] user_info_server: LDAP server to get user information.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FssoState.__new__(_FssoState)

        __props__.__dict__["group_poll_interval"] = group_poll_interval
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interface_select_method"] = interface_select_method
        __props__.__dict__["ldap_poll"] = ldap_poll
        __props__.__dict__["ldap_poll_filter"] = ldap_poll_filter
        __props__.__dict__["ldap_poll_interval"] = ldap_poll_interval
        __props__.__dict__["ldap_server"] = ldap_server
        __props__.__dict__["logon_timeout"] = logon_timeout
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["password2"] = password2
        __props__.__dict__["password3"] = password3
        __props__.__dict__["password4"] = password4
        __props__.__dict__["password5"] = password5
        __props__.__dict__["port"] = port
        __props__.__dict__["port2"] = port2
        __props__.__dict__["port3"] = port3
        __props__.__dict__["port4"] = port4
        __props__.__dict__["port5"] = port5
        __props__.__dict__["server"] = server
        __props__.__dict__["server2"] = server2
        __props__.__dict__["server3"] = server3
        __props__.__dict__["server4"] = server4
        __props__.__dict__["server5"] = server5
        __props__.__dict__["sni"] = sni
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["source_ip6"] = source_ip6
        __props__.__dict__["ssl"] = ssl
        __props__.__dict__["ssl_server_host_ip_check"] = ssl_server_host_ip_check
        __props__.__dict__["ssl_trusted_cert"] = ssl_trusted_cert
        __props__.__dict__["type"] = type
        __props__.__dict__["user_info_server"] = user_info_server
        __props__.__dict__["vdomparam"] = vdomparam
        return Fsso(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="groupPollInterval")
    def group_poll_interval(self) -> pulumi.Output[int]:
        """
        Interval in minutes within to fetch groups from FSSO server, or unset to disable.
        """
        return pulumi.get(self, "group_poll_interval")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> pulumi.Output[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="ldapPoll")
    def ldap_poll(self) -> pulumi.Output[str]:
        """
        Enable/disable automatic fetching of groups from LDAP server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ldap_poll")

    @property
    @pulumi.getter(name="ldapPollFilter")
    def ldap_poll_filter(self) -> pulumi.Output[str]:
        """
        Filter used to fetch groups.
        """
        return pulumi.get(self, "ldap_poll_filter")

    @property
    @pulumi.getter(name="ldapPollInterval")
    def ldap_poll_interval(self) -> pulumi.Output[int]:
        """
        Interval in minutes within to fetch groups from LDAP server.
        """
        return pulumi.get(self, "ldap_poll_interval")

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> pulumi.Output[str]:
        """
        LDAP server to get group information.
        """
        return pulumi.get(self, "ldap_server")

    @property
    @pulumi.getter(name="logonTimeout")
    def logon_timeout(self) -> pulumi.Output[int]:
        """
        Interval in minutes to keep logons after FSSO server down.
        """
        return pulumi.get(self, "logon_timeout")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password of the first FSSO collector agent.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def password2(self) -> pulumi.Output[Optional[str]]:
        """
        Password of the second FSSO collector agent.
        """
        return pulumi.get(self, "password2")

    @property
    @pulumi.getter
    def password3(self) -> pulumi.Output[Optional[str]]:
        """
        Password of the third FSSO collector agent.
        """
        return pulumi.get(self, "password3")

    @property
    @pulumi.getter
    def password4(self) -> pulumi.Output[Optional[str]]:
        """
        Password of the fourth FSSO collector agent.
        """
        return pulumi.get(self, "password4")

    @property
    @pulumi.getter
    def password5(self) -> pulumi.Output[Optional[str]]:
        """
        Password of the fifth FSSO collector agent.
        """
        return pulumi.get(self, "password5")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        Port of the first FSSO collector agent.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def port2(self) -> pulumi.Output[int]:
        """
        Port of the second FSSO collector agent.
        """
        return pulumi.get(self, "port2")

    @property
    @pulumi.getter
    def port3(self) -> pulumi.Output[int]:
        """
        Port of the third FSSO collector agent.
        """
        return pulumi.get(self, "port3")

    @property
    @pulumi.getter
    def port4(self) -> pulumi.Output[int]:
        """
        Port of the fourth FSSO collector agent.
        """
        return pulumi.get(self, "port4")

    @property
    @pulumi.getter
    def port5(self) -> pulumi.Output[int]:
        """
        Port of the fifth FSSO collector agent.
        """
        return pulumi.get(self, "port5")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        Domain name or IP address of the first FSSO collector agent.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def server2(self) -> pulumi.Output[str]:
        """
        Domain name or IP address of the second FSSO collector agent.
        """
        return pulumi.get(self, "server2")

    @property
    @pulumi.getter
    def server3(self) -> pulumi.Output[str]:
        """
        Domain name or IP address of the third FSSO collector agent.
        """
        return pulumi.get(self, "server3")

    @property
    @pulumi.getter
    def server4(self) -> pulumi.Output[str]:
        """
        Domain name or IP address of the fourth FSSO collector agent.
        """
        return pulumi.get(self, "server4")

    @property
    @pulumi.getter
    def server5(self) -> pulumi.Output[str]:
        """
        Domain name or IP address of the fifth FSSO collector agent.
        """
        return pulumi.get(self, "server5")

    @property
    @pulumi.getter
    def sni(self) -> pulumi.Output[str]:
        """
        Server Name Indication.
        """
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        """
        Source IP for communications to FSSO agent.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> pulumi.Output[str]:
        """
        IPv6 source for communications to FSSO agent.
        """
        return pulumi.get(self, "source_ip6")

    @property
    @pulumi.getter
    def ssl(self) -> pulumi.Output[str]:
        """
        Enable/disable use of SSL. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl")

    @property
    @pulumi.getter(name="sslServerHostIpCheck")
    def ssl_server_host_ip_check(self) -> pulumi.Output[str]:
        """
        Enable/disable server host/IP verification. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_server_host_ip_check")

    @property
    @pulumi.getter(name="sslTrustedCert")
    def ssl_trusted_cert(self) -> pulumi.Output[str]:
        """
        Trusted server certificate or CA certificate.
        """
        return pulumi.get(self, "ssl_trusted_cert")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Server type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userInfoServer")
    def user_info_server(self) -> pulumi.Output[str]:
        """
        LDAP server to get user information.
        """
        return pulumi.get(self, "user_info_server")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

