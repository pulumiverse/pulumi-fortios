# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FssopollingArgs', 'Fssopolling']

@pulumi.input_type
class FssopollingArgs:
    def __init__(__self__, *,
                 ldap_server: pulumi.Input[str],
                 server: pulumi.Input[str],
                 user: pulumi.Input[str],
                 adgrps: Optional[pulumi.Input[Sequence[pulumi.Input['FssopollingAdgrpArgs']]]] = None,
                 default_domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 logon_history: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 polling_frequency: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
                 smbv1: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Fssopolling resource.
        :param pulumi.Input[str] ldap_server: LDAP server name used in LDAP connection strings.
        :param pulumi.Input[str] server: Host name or IP address of the Active Directory server.
        :param pulumi.Input[str] user: User name required to log into this Active Directory server.
        :param pulumi.Input[Sequence[pulumi.Input['FssopollingAdgrpArgs']]] adgrps: LDAP Group Info. The structure of `adgrp` block is documented below.
        :param pulumi.Input[str] default_domain: Default domain managed by this Active Directory server.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fosid: Active Directory server ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[int] logon_history: Number of hours of logon history to keep, 0 means keep all history.
        :param pulumi.Input[str] password: Password required to log into this Active Directory server
        :param pulumi.Input[int] polling_frequency: Polling frequency (every 1 to 30 seconds).
        :param pulumi.Input[int] port: Port to communicate with this Active Directory server.
        :param pulumi.Input[str] smb_ntlmv1_auth: Enable/disable support of NTLMv1 for Samba authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] smbv1: Enable/disable support of SMBv1 for Samba. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable polling for the status of this Active Directory server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "ldap_server", ldap_server)
        pulumi.set(__self__, "server", server)
        pulumi.set(__self__, "user", user)
        if adgrps is not None:
            pulumi.set(__self__, "adgrps", adgrps)
        if default_domain is not None:
            pulumi.set(__self__, "default_domain", default_domain)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if logon_history is not None:
            pulumi.set(__self__, "logon_history", logon_history)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if polling_frequency is not None:
            pulumi.set(__self__, "polling_frequency", polling_frequency)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if smb_ntlmv1_auth is not None:
            pulumi.set(__self__, "smb_ntlmv1_auth", smb_ntlmv1_auth)
        if smbv1 is not None:
            pulumi.set(__self__, "smbv1", smbv1)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> pulumi.Input[str]:
        """
        LDAP server name used in LDAP connection strings.
        """
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: pulumi.Input[str]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        Host name or IP address of the Active Directory server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        """
        User name required to log into this Active Directory server.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def adgrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FssopollingAdgrpArgs']]]]:
        """
        LDAP Group Info. The structure of `adgrp` block is documented below.
        """
        return pulumi.get(self, "adgrps")

    @adgrps.setter
    def adgrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FssopollingAdgrpArgs']]]]):
        pulumi.set(self, "adgrps", value)

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Default domain managed by this Active Directory server.
        """
        return pulumi.get(self, "default_domain")

    @default_domain.setter
    def default_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_domain", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        Active Directory server ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="logonHistory")
    def logon_history(self) -> Optional[pulumi.Input[int]]:
        """
        Number of hours of logon history to keep, 0 means keep all history.
        """
        return pulumi.get(self, "logon_history")

    @logon_history.setter
    def logon_history(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logon_history", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password required to log into this Active Directory server
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pollingFrequency")
    def polling_frequency(self) -> Optional[pulumi.Input[int]]:
        """
        Polling frequency (every 1 to 30 seconds).
        """
        return pulumi.get(self, "polling_frequency")

    @polling_frequency.setter
    def polling_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polling_frequency", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port to communicate with this Active Directory server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="smbNtlmv1Auth")
    def smb_ntlmv1_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable support of NTLMv1 for Samba authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "smb_ntlmv1_auth")

    @smb_ntlmv1_auth.setter
    def smb_ntlmv1_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smb_ntlmv1_auth", value)

    @property
    @pulumi.getter
    def smbv1(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable support of SMBv1 for Samba. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "smbv1")

    @smbv1.setter
    def smbv1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smbv1", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable polling for the status of this Active Directory server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _FssopollingState:
    def __init__(__self__, *,
                 adgrps: Optional[pulumi.Input[Sequence[pulumi.Input['FssopollingAdgrpArgs']]]] = None,
                 default_domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 logon_history: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 polling_frequency: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
                 smbv1: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Fssopolling resources.
        :param pulumi.Input[Sequence[pulumi.Input['FssopollingAdgrpArgs']]] adgrps: LDAP Group Info. The structure of `adgrp` block is documented below.
        :param pulumi.Input[str] default_domain: Default domain managed by this Active Directory server.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fosid: Active Directory server ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ldap_server: LDAP server name used in LDAP connection strings.
        :param pulumi.Input[int] logon_history: Number of hours of logon history to keep, 0 means keep all history.
        :param pulumi.Input[str] password: Password required to log into this Active Directory server
        :param pulumi.Input[int] polling_frequency: Polling frequency (every 1 to 30 seconds).
        :param pulumi.Input[int] port: Port to communicate with this Active Directory server.
        :param pulumi.Input[str] server: Host name or IP address of the Active Directory server.
        :param pulumi.Input[str] smb_ntlmv1_auth: Enable/disable support of NTLMv1 for Samba authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] smbv1: Enable/disable support of SMBv1 for Samba. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable polling for the status of this Active Directory server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] user: User name required to log into this Active Directory server.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if adgrps is not None:
            pulumi.set(__self__, "adgrps", adgrps)
        if default_domain is not None:
            pulumi.set(__self__, "default_domain", default_domain)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if ldap_server is not None:
            pulumi.set(__self__, "ldap_server", ldap_server)
        if logon_history is not None:
            pulumi.set(__self__, "logon_history", logon_history)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if polling_frequency is not None:
            pulumi.set(__self__, "polling_frequency", polling_frequency)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if smb_ntlmv1_auth is not None:
            pulumi.set(__self__, "smb_ntlmv1_auth", smb_ntlmv1_auth)
        if smbv1 is not None:
            pulumi.set(__self__, "smbv1", smbv1)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def adgrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FssopollingAdgrpArgs']]]]:
        """
        LDAP Group Info. The structure of `adgrp` block is documented below.
        """
        return pulumi.get(self, "adgrps")

    @adgrps.setter
    def adgrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FssopollingAdgrpArgs']]]]):
        pulumi.set(self, "adgrps", value)

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Default domain managed by this Active Directory server.
        """
        return pulumi.get(self, "default_domain")

    @default_domain.setter
    def default_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_domain", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        Active Directory server ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP server name used in LDAP connection strings.
        """
        return pulumi.get(self, "ldap_server")

    @ldap_server.setter
    def ldap_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_server", value)

    @property
    @pulumi.getter(name="logonHistory")
    def logon_history(self) -> Optional[pulumi.Input[int]]:
        """
        Number of hours of logon history to keep, 0 means keep all history.
        """
        return pulumi.get(self, "logon_history")

    @logon_history.setter
    def logon_history(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logon_history", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password required to log into this Active Directory server
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pollingFrequency")
    def polling_frequency(self) -> Optional[pulumi.Input[int]]:
        """
        Polling frequency (every 1 to 30 seconds).
        """
        return pulumi.get(self, "polling_frequency")

    @polling_frequency.setter
    def polling_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polling_frequency", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port to communicate with this Active Directory server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Host name or IP address of the Active Directory server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="smbNtlmv1Auth")
    def smb_ntlmv1_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable support of NTLMv1 for Samba authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "smb_ntlmv1_auth")

    @smb_ntlmv1_auth.setter
    def smb_ntlmv1_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smb_ntlmv1_auth", value)

    @property
    @pulumi.getter
    def smbv1(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable support of SMBv1 for Samba. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "smbv1")

    @smbv1.setter
    def smbv1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smbv1", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable polling for the status of this Active Directory server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        User name required to log into this Active Directory server.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Fssopolling(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adgrps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FssopollingAdgrpArgs']]]]] = None,
                 default_domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 logon_history: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 polling_frequency: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
                 smbv1: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure FSSO active directory servers for polling mode.

        ## Import

        User FssoPolling can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/fssopolling:Fssopolling labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/fssopolling:Fssopolling labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FssopollingAdgrpArgs']]]] adgrps: LDAP Group Info. The structure of `adgrp` block is documented below.
        :param pulumi.Input[str] default_domain: Default domain managed by this Active Directory server.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fosid: Active Directory server ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ldap_server: LDAP server name used in LDAP connection strings.
        :param pulumi.Input[int] logon_history: Number of hours of logon history to keep, 0 means keep all history.
        :param pulumi.Input[str] password: Password required to log into this Active Directory server
        :param pulumi.Input[int] polling_frequency: Polling frequency (every 1 to 30 seconds).
        :param pulumi.Input[int] port: Port to communicate with this Active Directory server.
        :param pulumi.Input[str] server: Host name or IP address of the Active Directory server.
        :param pulumi.Input[str] smb_ntlmv1_auth: Enable/disable support of NTLMv1 for Samba authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] smbv1: Enable/disable support of SMBv1 for Samba. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable polling for the status of this Active Directory server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] user: User name required to log into this Active Directory server.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FssopollingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure FSSO active directory servers for polling mode.

        ## Import

        User FssoPolling can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:user/fssopolling:Fssopolling labelname {{fosid}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:user/fssopolling:Fssopolling labelname {{fosid}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param FssopollingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FssopollingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adgrps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FssopollingAdgrpArgs']]]]] = None,
                 default_domain: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 ldap_server: Optional[pulumi.Input[str]] = None,
                 logon_history: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 polling_frequency: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
                 smbv1: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FssopollingArgs.__new__(FssopollingArgs)

            __props__.__dict__["adgrps"] = adgrps
            __props__.__dict__["default_domain"] = default_domain
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            if ldap_server is None and not opts.urn:
                raise TypeError("Missing required property 'ldap_server'")
            __props__.__dict__["ldap_server"] = ldap_server
            __props__.__dict__["logon_history"] = logon_history
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["polling_frequency"] = polling_frequency
            __props__.__dict__["port"] = port
            if server is None and not opts.urn:
                raise TypeError("Missing required property 'server'")
            __props__.__dict__["server"] = server
            __props__.__dict__["smb_ntlmv1_auth"] = smb_ntlmv1_auth
            __props__.__dict__["smbv1"] = smbv1
            __props__.__dict__["status"] = status
            if user is None and not opts.urn:
                raise TypeError("Missing required property 'user'")
            __props__.__dict__["user"] = user
            __props__.__dict__["vdomparam"] = vdomparam
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Fssopolling, __self__).__init__(
            'fortios:user/fssopolling:Fssopolling',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adgrps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FssopollingAdgrpArgs']]]]] = None,
            default_domain: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            ldap_server: Optional[pulumi.Input[str]] = None,
            logon_history: Optional[pulumi.Input[int]] = None,
            password: Optional[pulumi.Input[str]] = None,
            polling_frequency: Optional[pulumi.Input[int]] = None,
            port: Optional[pulumi.Input[int]] = None,
            server: Optional[pulumi.Input[str]] = None,
            smb_ntlmv1_auth: Optional[pulumi.Input[str]] = None,
            smbv1: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            user: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Fssopolling':
        """
        Get an existing Fssopolling resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FssopollingAdgrpArgs']]]] adgrps: LDAP Group Info. The structure of `adgrp` block is documented below.
        :param pulumi.Input[str] default_domain: Default domain managed by this Active Directory server.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fosid: Active Directory server ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] ldap_server: LDAP server name used in LDAP connection strings.
        :param pulumi.Input[int] logon_history: Number of hours of logon history to keep, 0 means keep all history.
        :param pulumi.Input[str] password: Password required to log into this Active Directory server
        :param pulumi.Input[int] polling_frequency: Polling frequency (every 1 to 30 seconds).
        :param pulumi.Input[int] port: Port to communicate with this Active Directory server.
        :param pulumi.Input[str] server: Host name or IP address of the Active Directory server.
        :param pulumi.Input[str] smb_ntlmv1_auth: Enable/disable support of NTLMv1 for Samba authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] smbv1: Enable/disable support of SMBv1 for Samba. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable polling for the status of this Active Directory server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] user: User name required to log into this Active Directory server.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FssopollingState.__new__(_FssopollingState)

        __props__.__dict__["adgrps"] = adgrps
        __props__.__dict__["default_domain"] = default_domain
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["ldap_server"] = ldap_server
        __props__.__dict__["logon_history"] = logon_history
        __props__.__dict__["password"] = password
        __props__.__dict__["polling_frequency"] = polling_frequency
        __props__.__dict__["port"] = port
        __props__.__dict__["server"] = server
        __props__.__dict__["smb_ntlmv1_auth"] = smb_ntlmv1_auth
        __props__.__dict__["smbv1"] = smbv1
        __props__.__dict__["status"] = status
        __props__.__dict__["user"] = user
        __props__.__dict__["vdomparam"] = vdomparam
        return Fssopolling(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def adgrps(self) -> pulumi.Output[Optional[Sequence['outputs.FssopollingAdgrp']]]:
        """
        LDAP Group Info. The structure of `adgrp` block is documented below.
        """
        return pulumi.get(self, "adgrps")

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> pulumi.Output[str]:
        """
        Default domain managed by this Active Directory server.
        """
        return pulumi.get(self, "default_domain")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        Active Directory server ID.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="ldapServer")
    def ldap_server(self) -> pulumi.Output[str]:
        """
        LDAP server name used in LDAP connection strings.
        """
        return pulumi.get(self, "ldap_server")

    @property
    @pulumi.getter(name="logonHistory")
    def logon_history(self) -> pulumi.Output[int]:
        """
        Number of hours of logon history to keep, 0 means keep all history.
        """
        return pulumi.get(self, "logon_history")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password required to log into this Active Directory server
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="pollingFrequency")
    def polling_frequency(self) -> pulumi.Output[int]:
        """
        Polling frequency (every 1 to 30 seconds).
        """
        return pulumi.get(self, "polling_frequency")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        Port to communicate with this Active Directory server.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        Host name or IP address of the Active Directory server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="smbNtlmv1Auth")
    def smb_ntlmv1_auth(self) -> pulumi.Output[str]:
        """
        Enable/disable support of NTLMv1 for Samba authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "smb_ntlmv1_auth")

    @property
    @pulumi.getter
    def smbv1(self) -> pulumi.Output[str]:
        """
        Enable/disable support of SMBv1 for Samba. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "smbv1")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable polling for the status of this Active Directory server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[str]:
        """
        User name required to log into this Active Directory server.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

