# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SyslogSettingArgs', 'SyslogSetting']

@pulumi.input_type
class SyslogSettingArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 facility: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SyslogSetting resource.
        :param pulumi.Input[str] status: Enable/disable remote syslog logging.
        :param pulumi.Input[str] facility: Remote syslog facility.
        :param pulumi.Input[str] format: Log format.
        :param pulumi.Input[str] mode: Remote syslog logging over UDP/Reliable TCP.
        :param pulumi.Input[str] port: Server listen port.
        :param pulumi.Input[str] server: Address of remote syslog server.
        :param pulumi.Input[str] source_ip: Source IP address of syslog.
        """
        pulumi.set(__self__, "status", status)
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Enable/disable remote syslog logging.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        Remote syslog facility.
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Log format.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Remote syslog logging over UDP/Reliable TCP.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Server listen port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Address of remote syslog server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address of syslog.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)


@pulumi.input_type
class _SyslogSettingState:
    def __init__(__self__, *,
                 facility: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SyslogSetting resources.
        :param pulumi.Input[str] facility: Remote syslog facility.
        :param pulumi.Input[str] format: Log format.
        :param pulumi.Input[str] mode: Remote syslog logging over UDP/Reliable TCP.
        :param pulumi.Input[str] port: Server listen port.
        :param pulumi.Input[str] server: Address of remote syslog server.
        :param pulumi.Input[str] source_ip: Source IP address of syslog.
        :param pulumi.Input[str] status: Enable/disable remote syslog logging.
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        Remote syslog facility.
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Log format.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Remote syslog logging over UDP/Reliable TCP.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Server listen port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Address of remote syslog server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address of syslog.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable remote syslog logging.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class SyslogSetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 facility: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to configure logging to remote Syslog logging servers.

        !> **Warning:** The resource will be deprecated and replaced by new resource `log/syslogd.Setting`, we recommend that you use the new resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test2 = fortios.log.SyslogSetting("test2",
            facility="local7",
            format="csv",
            mode="udp",
            port="514",
            server="2.2.2.2",
            source_ip="10.2.2.199",
            status="enable")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] facility: Remote syslog facility.
        :param pulumi.Input[str] format: Log format.
        :param pulumi.Input[str] mode: Remote syslog logging over UDP/Reliable TCP.
        :param pulumi.Input[str] port: Server listen port.
        :param pulumi.Input[str] server: Address of remote syslog server.
        :param pulumi.Input[str] source_ip: Source IP address of syslog.
        :param pulumi.Input[str] status: Enable/disable remote syslog logging.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SyslogSettingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to configure logging to remote Syslog logging servers.

        !> **Warning:** The resource will be deprecated and replaced by new resource `log/syslogd.Setting`, we recommend that you use the new resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        test2 = fortios.log.SyslogSetting("test2",
            facility="local7",
            format="csv",
            mode="udp",
            port="514",
            server="2.2.2.2",
            source_ip="10.2.2.199",
            status="enable")
        ```

        :param str resource_name: The name of the resource.
        :param SyslogSettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SyslogSettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 facility: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SyslogSettingArgs.__new__(SyslogSettingArgs)

            __props__.__dict__["facility"] = facility
            __props__.__dict__["format"] = format
            __props__.__dict__["mode"] = mode
            __props__.__dict__["port"] = port
            __props__.__dict__["server"] = server
            __props__.__dict__["source_ip"] = source_ip
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
        super(SyslogSetting, __self__).__init__(
            'fortios:log/syslogSetting:SyslogSetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            facility: Optional[pulumi.Input[str]] = None,
            format: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[str]] = None,
            server: Optional[pulumi.Input[str]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'SyslogSetting':
        """
        Get an existing SyslogSetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] facility: Remote syslog facility.
        :param pulumi.Input[str] format: Log format.
        :param pulumi.Input[str] mode: Remote syslog logging over UDP/Reliable TCP.
        :param pulumi.Input[str] port: Server listen port.
        :param pulumi.Input[str] server: Address of remote syslog server.
        :param pulumi.Input[str] source_ip: Source IP address of syslog.
        :param pulumi.Input[str] status: Enable/disable remote syslog logging.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SyslogSettingState.__new__(_SyslogSettingState)

        __props__.__dict__["facility"] = facility
        __props__.__dict__["format"] = format
        __props__.__dict__["mode"] = mode
        __props__.__dict__["port"] = port
        __props__.__dict__["server"] = server
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["status"] = status
        return SyslogSetting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def facility(self) -> pulumi.Output[str]:
        """
        Remote syslog facility.
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output[str]:
        """
        Log format.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        Remote syslog logging over UDP/Reliable TCP.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[str]:
        """
        Server listen port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        Address of remote syslog server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        """
        Source IP address of syslog.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable remote syslog logging.
        """
        return pulumi.get(self, "status")

