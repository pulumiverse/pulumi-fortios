# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SettingArgs', 'Setting']

@pulumi.input_type
class SettingArgs:
    def __init__(__self__, *,
                 access_config: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 certificate_verification: Optional[pulumi.Input[str]] = None,
                 conn_timeout: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enc_algorithm: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hmac_algorithm: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ips_archive: Optional[pulumi.Input[str]] = None,
                 max_log_rate: Optional[pulumi.Input[int]] = None,
                 monitor_failure_retry_period: Optional[pulumi.Input[int]] = None,
                 monitor_keepalive_period: Optional[pulumi.Input[int]] = None,
                 preshared_key: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 serials: Optional[pulumi.Input[Sequence[pulumi.Input['SettingSerialArgs']]]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upload_day: Optional[pulumi.Input[str]] = None,
                 upload_interval: Optional[pulumi.Input[str]] = None,
                 upload_option: Optional[pulumi.Input[str]] = None,
                 upload_time: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Setting resource.
        :param pulumi.Input[str] access_config: Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] certificate: Certificate used to communicate with FortiAnalyzer.
        :param pulumi.Input[str] certificate_verification: Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] conn_timeout: FortiAnalyzer connection time-out in seconds (for status and log buffer).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] enc_algorithm: Configure the level of SSL protection for secure communication with FortiAnalyzer. Valid values: `high-medium`, `high`, `low`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hmac_algorithm: FortiAnalyzer IPsec tunnel HMAC algorithm.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ips_archive: Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_log_rate: FortiAnalyzer maximum log rate in MBps (0 = unlimited).
        :param pulumi.Input[int] monitor_failure_retry_period: Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
        :param pulumi.Input[int] monitor_keepalive_period: Time between OFTP keepalives in seconds (for status and log buffer).
        :param pulumi.Input[str] preshared_key: Preshared-key used for auto-authorization on FortiAnalyzer.
        :param pulumi.Input[str] priority: Set log transmission priority. Valid values: `default`, `low`.
        :param pulumi.Input[Sequence[pulumi.Input['SettingSerialArgs']]] serials: Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
        :param pulumi.Input[str] source_ip: Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
        :param pulumi.Input[str] ssl_min_proto_version: Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        :param pulumi.Input[str] status: Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] upload_day: Day of week (month) to upload logs.
        :param pulumi.Input[str] upload_interval: Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
        :param pulumi.Input[str] upload_option: Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
        :param pulumi.Input[str] upload_time: Time to upload logs (hh:mm).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if access_config is not None:
            pulumi.set(__self__, "access_config", access_config)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if certificate_verification is not None:
            pulumi.set(__self__, "certificate_verification", certificate_verification)
        if conn_timeout is not None:
            pulumi.set(__self__, "conn_timeout", conn_timeout)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if enc_algorithm is not None:
            pulumi.set(__self__, "enc_algorithm", enc_algorithm)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hmac_algorithm is not None:
            pulumi.set(__self__, "hmac_algorithm", hmac_algorithm)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ips_archive is not None:
            pulumi.set(__self__, "ips_archive", ips_archive)
        if max_log_rate is not None:
            pulumi.set(__self__, "max_log_rate", max_log_rate)
        if monitor_failure_retry_period is not None:
            pulumi.set(__self__, "monitor_failure_retry_period", monitor_failure_retry_period)
        if monitor_keepalive_period is not None:
            pulumi.set(__self__, "monitor_keepalive_period", monitor_keepalive_period)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if serials is not None:
            pulumi.set(__self__, "serials", serials)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if ssl_min_proto_version is not None:
            pulumi.set(__self__, "ssl_min_proto_version", ssl_min_proto_version)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if upload_day is not None:
            pulumi.set(__self__, "upload_day", upload_day)
        if upload_interval is not None:
            pulumi.set(__self__, "upload_interval", upload_interval)
        if upload_option is not None:
            pulumi.set(__self__, "upload_option", upload_option)
        if upload_time is not None:
            pulumi.set(__self__, "upload_time", upload_time)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="accessConfig")
    def access_config(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_config")

    @access_config.setter
    def access_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_config", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate used to communicate with FortiAnalyzer.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="certificateVerification")
    def certificate_verification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "certificate_verification")

    @certificate_verification.setter
    def certificate_verification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_verification", value)

    @property
    @pulumi.getter(name="connTimeout")
    def conn_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        FortiAnalyzer connection time-out in seconds (for status and log buffer).
        """
        return pulumi.get(self, "conn_timeout")

    @conn_timeout.setter
    def conn_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_timeout", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="encAlgorithm")
    def enc_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Configure the level of SSL protection for secure communication with FortiAnalyzer. Valid values: `high-medium`, `high`, `low`.
        """
        return pulumi.get(self, "enc_algorithm")

    @enc_algorithm.setter
    def enc_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_algorithm", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="hmacAlgorithm")
    def hmac_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        FortiAnalyzer IPsec tunnel HMAC algorithm.
        """
        return pulumi.get(self, "hmac_algorithm")

    @hmac_algorithm.setter
    def hmac_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hmac_algorithm", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ipsArchive")
    def ips_archive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_archive")

    @ips_archive.setter
    def ips_archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_archive", value)

    @property
    @pulumi.getter(name="maxLogRate")
    def max_log_rate(self) -> Optional[pulumi.Input[int]]:
        """
        FortiAnalyzer maximum log rate in MBps (0 = unlimited).
        """
        return pulumi.get(self, "max_log_rate")

    @max_log_rate.setter
    def max_log_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_log_rate", value)

    @property
    @pulumi.getter(name="monitorFailureRetryPeriod")
    def monitor_failure_retry_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
        """
        return pulumi.get(self, "monitor_failure_retry_period")

    @monitor_failure_retry_period.setter
    def monitor_failure_retry_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_failure_retry_period", value)

    @property
    @pulumi.getter(name="monitorKeepalivePeriod")
    def monitor_keepalive_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time between OFTP keepalives in seconds (for status and log buffer).
        """
        return pulumi.get(self, "monitor_keepalive_period")

    @monitor_keepalive_period.setter
    def monitor_keepalive_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_keepalive_period", value)

    @property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[pulumi.Input[str]]:
        """
        Preshared-key used for auto-authorization on FortiAnalyzer.
        """
        return pulumi.get(self, "preshared_key")

    @preshared_key.setter
    def preshared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preshared_key", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Set log transmission priority. Valid values: `default`, `low`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def serials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingSerialArgs']]]]:
        """
        Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
        """
        return pulumi.get(self, "serials")

    @serials.setter
    def serials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingSerialArgs']]]]):
        pulumi.set(self, "serials", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        """
        return pulumi.get(self, "ssl_min_proto_version")

    @ssl_min_proto_version.setter
    def ssl_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_proto_version", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uploadDay")
    def upload_day(self) -> Optional[pulumi.Input[str]]:
        """
        Day of week (month) to upload logs.
        """
        return pulumi.get(self, "upload_day")

    @upload_day.setter
    def upload_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_day", value)

    @property
    @pulumi.getter(name="uploadInterval")
    def upload_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
        """
        return pulumi.get(self, "upload_interval")

    @upload_interval.setter
    def upload_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_interval", value)

    @property
    @pulumi.getter(name="uploadOption")
    def upload_option(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
        """
        return pulumi.get(self, "upload_option")

    @upload_option.setter
    def upload_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_option", value)

    @property
    @pulumi.getter(name="uploadTime")
    def upload_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time to upload logs (hh:mm).
        """
        return pulumi.get(self, "upload_time")

    @upload_time.setter
    def upload_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_time", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SettingState:
    def __init__(__self__, *,
                 access_config: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 certificate_verification: Optional[pulumi.Input[str]] = None,
                 conn_timeout: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enc_algorithm: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hmac_algorithm: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ips_archive: Optional[pulumi.Input[str]] = None,
                 max_log_rate: Optional[pulumi.Input[int]] = None,
                 monitor_failure_retry_period: Optional[pulumi.Input[int]] = None,
                 monitor_keepalive_period: Optional[pulumi.Input[int]] = None,
                 preshared_key: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 serials: Optional[pulumi.Input[Sequence[pulumi.Input['SettingSerialArgs']]]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upload_day: Optional[pulumi.Input[str]] = None,
                 upload_interval: Optional[pulumi.Input[str]] = None,
                 upload_option: Optional[pulumi.Input[str]] = None,
                 upload_time: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Setting resources.
        :param pulumi.Input[str] access_config: Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] certificate: Certificate used to communicate with FortiAnalyzer.
        :param pulumi.Input[str] certificate_verification: Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] conn_timeout: FortiAnalyzer connection time-out in seconds (for status and log buffer).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] enc_algorithm: Configure the level of SSL protection for secure communication with FortiAnalyzer. Valid values: `high-medium`, `high`, `low`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hmac_algorithm: FortiAnalyzer IPsec tunnel HMAC algorithm.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ips_archive: Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_log_rate: FortiAnalyzer maximum log rate in MBps (0 = unlimited).
        :param pulumi.Input[int] monitor_failure_retry_period: Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
        :param pulumi.Input[int] monitor_keepalive_period: Time between OFTP keepalives in seconds (for status and log buffer).
        :param pulumi.Input[str] preshared_key: Preshared-key used for auto-authorization on FortiAnalyzer.
        :param pulumi.Input[str] priority: Set log transmission priority. Valid values: `default`, `low`.
        :param pulumi.Input[Sequence[pulumi.Input['SettingSerialArgs']]] serials: Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
        :param pulumi.Input[str] source_ip: Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
        :param pulumi.Input[str] ssl_min_proto_version: Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        :param pulumi.Input[str] status: Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] upload_day: Day of week (month) to upload logs.
        :param pulumi.Input[str] upload_interval: Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
        :param pulumi.Input[str] upload_option: Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
        :param pulumi.Input[str] upload_time: Time to upload logs (hh:mm).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if access_config is not None:
            pulumi.set(__self__, "access_config", access_config)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if certificate_verification is not None:
            pulumi.set(__self__, "certificate_verification", certificate_verification)
        if conn_timeout is not None:
            pulumi.set(__self__, "conn_timeout", conn_timeout)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if enc_algorithm is not None:
            pulumi.set(__self__, "enc_algorithm", enc_algorithm)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if hmac_algorithm is not None:
            pulumi.set(__self__, "hmac_algorithm", hmac_algorithm)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if ips_archive is not None:
            pulumi.set(__self__, "ips_archive", ips_archive)
        if max_log_rate is not None:
            pulumi.set(__self__, "max_log_rate", max_log_rate)
        if monitor_failure_retry_period is not None:
            pulumi.set(__self__, "monitor_failure_retry_period", monitor_failure_retry_period)
        if monitor_keepalive_period is not None:
            pulumi.set(__self__, "monitor_keepalive_period", monitor_keepalive_period)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if serials is not None:
            pulumi.set(__self__, "serials", serials)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if ssl_min_proto_version is not None:
            pulumi.set(__self__, "ssl_min_proto_version", ssl_min_proto_version)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if upload_day is not None:
            pulumi.set(__self__, "upload_day", upload_day)
        if upload_interval is not None:
            pulumi.set(__self__, "upload_interval", upload_interval)
        if upload_option is not None:
            pulumi.set(__self__, "upload_option", upload_option)
        if upload_time is not None:
            pulumi.set(__self__, "upload_time", upload_time)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="accessConfig")
    def access_config(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_config")

    @access_config.setter
    def access_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_config", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate used to communicate with FortiAnalyzer.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="certificateVerification")
    def certificate_verification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "certificate_verification")

    @certificate_verification.setter
    def certificate_verification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_verification", value)

    @property
    @pulumi.getter(name="connTimeout")
    def conn_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        FortiAnalyzer connection time-out in seconds (for status and log buffer).
        """
        return pulumi.get(self, "conn_timeout")

    @conn_timeout.setter
    def conn_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_timeout", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="encAlgorithm")
    def enc_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Configure the level of SSL protection for secure communication with FortiAnalyzer. Valid values: `high-medium`, `high`, `low`.
        """
        return pulumi.get(self, "enc_algorithm")

    @enc_algorithm.setter
    def enc_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_algorithm", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="hmacAlgorithm")
    def hmac_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        FortiAnalyzer IPsec tunnel HMAC algorithm.
        """
        return pulumi.get(self, "hmac_algorithm")

    @hmac_algorithm.setter
    def hmac_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hmac_algorithm", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="ipsArchive")
    def ips_archive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_archive")

    @ips_archive.setter
    def ips_archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_archive", value)

    @property
    @pulumi.getter(name="maxLogRate")
    def max_log_rate(self) -> Optional[pulumi.Input[int]]:
        """
        FortiAnalyzer maximum log rate in MBps (0 = unlimited).
        """
        return pulumi.get(self, "max_log_rate")

    @max_log_rate.setter
    def max_log_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_log_rate", value)

    @property
    @pulumi.getter(name="monitorFailureRetryPeriod")
    def monitor_failure_retry_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
        """
        return pulumi.get(self, "monitor_failure_retry_period")

    @monitor_failure_retry_period.setter
    def monitor_failure_retry_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_failure_retry_period", value)

    @property
    @pulumi.getter(name="monitorKeepalivePeriod")
    def monitor_keepalive_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time between OFTP keepalives in seconds (for status and log buffer).
        """
        return pulumi.get(self, "monitor_keepalive_period")

    @monitor_keepalive_period.setter
    def monitor_keepalive_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_keepalive_period", value)

    @property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[pulumi.Input[str]]:
        """
        Preshared-key used for auto-authorization on FortiAnalyzer.
        """
        return pulumi.get(self, "preshared_key")

    @preshared_key.setter
    def preshared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preshared_key", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Set log transmission priority. Valid values: `default`, `low`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def serials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingSerialArgs']]]]:
        """
        Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
        """
        return pulumi.get(self, "serials")

    @serials.setter
    def serials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingSerialArgs']]]]):
        pulumi.set(self, "serials", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        """
        return pulumi.get(self, "ssl_min_proto_version")

    @ssl_min_proto_version.setter
    def ssl_min_proto_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_proto_version", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uploadDay")
    def upload_day(self) -> Optional[pulumi.Input[str]]:
        """
        Day of week (month) to upload logs.
        """
        return pulumi.get(self, "upload_day")

    @upload_day.setter
    def upload_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_day", value)

    @property
    @pulumi.getter(name="uploadInterval")
    def upload_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
        """
        return pulumi.get(self, "upload_interval")

    @upload_interval.setter
    def upload_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_interval", value)

    @property
    @pulumi.getter(name="uploadOption")
    def upload_option(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
        """
        return pulumi.get(self, "upload_option")

    @upload_option.setter
    def upload_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_option", value)

    @property
    @pulumi.getter(name="uploadTime")
    def upload_time(self) -> Optional[pulumi.Input[str]]:
        """
        Time to upload logs (hh:mm).
        """
        return pulumi.get(self, "upload_time")

    @upload_time.setter
    def upload_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_time", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Setting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_config: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 certificate_verification: Optional[pulumi.Input[str]] = None,
                 conn_timeout: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enc_algorithm: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hmac_algorithm: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ips_archive: Optional[pulumi.Input[str]] = None,
                 max_log_rate: Optional[pulumi.Input[int]] = None,
                 monitor_failure_retry_period: Optional[pulumi.Input[int]] = None,
                 monitor_keepalive_period: Optional[pulumi.Input[int]] = None,
                 preshared_key: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 serials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingSerialArgs']]]]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upload_day: Optional[pulumi.Input[str]] = None,
                 upload_interval: Optional[pulumi.Input[str]] = None,
                 upload_option: Optional[pulumi.Input[str]] = None,
                 upload_time: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Global FortiAnalyzer Cloud settings. Applies to FortiOS Version `>= 6.2.4`.

        ## Import

        LogFortianalyzerCloud Setting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:log/fortianalyzer/cloud/setting:Setting labelname LogFortianalyzerCloudSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:log/fortianalyzer/cloud/setting:Setting labelname LogFortianalyzerCloudSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_config: Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] certificate: Certificate used to communicate with FortiAnalyzer.
        :param pulumi.Input[str] certificate_verification: Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] conn_timeout: FortiAnalyzer connection time-out in seconds (for status and log buffer).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] enc_algorithm: Configure the level of SSL protection for secure communication with FortiAnalyzer. Valid values: `high-medium`, `high`, `low`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hmac_algorithm: FortiAnalyzer IPsec tunnel HMAC algorithm.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ips_archive: Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_log_rate: FortiAnalyzer maximum log rate in MBps (0 = unlimited).
        :param pulumi.Input[int] monitor_failure_retry_period: Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
        :param pulumi.Input[int] monitor_keepalive_period: Time between OFTP keepalives in seconds (for status and log buffer).
        :param pulumi.Input[str] preshared_key: Preshared-key used for auto-authorization on FortiAnalyzer.
        :param pulumi.Input[str] priority: Set log transmission priority. Valid values: `default`, `low`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingSerialArgs']]]] serials: Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
        :param pulumi.Input[str] source_ip: Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
        :param pulumi.Input[str] ssl_min_proto_version: Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        :param pulumi.Input[str] status: Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] upload_day: Day of week (month) to upload logs.
        :param pulumi.Input[str] upload_interval: Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
        :param pulumi.Input[str] upload_option: Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
        :param pulumi.Input[str] upload_time: Time to upload logs (hh:mm).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Global FortiAnalyzer Cloud settings. Applies to FortiOS Version `>= 6.2.4`.

        ## Import

        LogFortianalyzerCloud Setting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:log/fortianalyzer/cloud/setting:Setting labelname LogFortianalyzerCloudSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:log/fortianalyzer/cloud/setting:Setting labelname LogFortianalyzerCloudSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_config: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 certificate_verification: Optional[pulumi.Input[str]] = None,
                 conn_timeout: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enc_algorithm: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 hmac_algorithm: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 ips_archive: Optional[pulumi.Input[str]] = None,
                 max_log_rate: Optional[pulumi.Input[int]] = None,
                 monitor_failure_retry_period: Optional[pulumi.Input[int]] = None,
                 monitor_keepalive_period: Optional[pulumi.Input[int]] = None,
                 preshared_key: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 serials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingSerialArgs']]]]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 upload_day: Optional[pulumi.Input[str]] = None,
                 upload_interval: Optional[pulumi.Input[str]] = None,
                 upload_option: Optional[pulumi.Input[str]] = None,
                 upload_time: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingArgs.__new__(SettingArgs)

            __props__.__dict__["access_config"] = access_config
            __props__.__dict__["certificate"] = certificate
            __props__.__dict__["certificate_verification"] = certificate_verification
            __props__.__dict__["conn_timeout"] = conn_timeout
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["enc_algorithm"] = enc_algorithm
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["hmac_algorithm"] = hmac_algorithm
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interface_select_method"] = interface_select_method
            __props__.__dict__["ips_archive"] = ips_archive
            __props__.__dict__["max_log_rate"] = max_log_rate
            __props__.__dict__["monitor_failure_retry_period"] = monitor_failure_retry_period
            __props__.__dict__["monitor_keepalive_period"] = monitor_keepalive_period
            __props__.__dict__["preshared_key"] = preshared_key
            __props__.__dict__["priority"] = priority
            __props__.__dict__["serials"] = serials
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["ssl_min_proto_version"] = ssl_min_proto_version
            __props__.__dict__["status"] = status
            __props__.__dict__["upload_day"] = upload_day
            __props__.__dict__["upload_interval"] = upload_interval
            __props__.__dict__["upload_option"] = upload_option
            __props__.__dict__["upload_time"] = upload_time
            __props__.__dict__["vdomparam"] = vdomparam
        super(Setting, __self__).__init__(
            'fortios:log/fortianalyzer/cloud/setting:Setting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_config: Optional[pulumi.Input[str]] = None,
            certificate: Optional[pulumi.Input[str]] = None,
            certificate_verification: Optional[pulumi.Input[str]] = None,
            conn_timeout: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            enc_algorithm: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            hmac_algorithm: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interface_select_method: Optional[pulumi.Input[str]] = None,
            ips_archive: Optional[pulumi.Input[str]] = None,
            max_log_rate: Optional[pulumi.Input[int]] = None,
            monitor_failure_retry_period: Optional[pulumi.Input[int]] = None,
            monitor_keepalive_period: Optional[pulumi.Input[int]] = None,
            preshared_key: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[str]] = None,
            serials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingSerialArgs']]]]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            ssl_min_proto_version: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            upload_day: Optional[pulumi.Input[str]] = None,
            upload_interval: Optional[pulumi.Input[str]] = None,
            upload_option: Optional[pulumi.Input[str]] = None,
            upload_time: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Setting':
        """
        Get an existing Setting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_config: Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] certificate: Certificate used to communicate with FortiAnalyzer.
        :param pulumi.Input[str] certificate_verification: Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] conn_timeout: FortiAnalyzer connection time-out in seconds (for status and log buffer).
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] enc_algorithm: Configure the level of SSL protection for secure communication with FortiAnalyzer. Valid values: `high-medium`, `high`, `low`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] hmac_algorithm: FortiAnalyzer IPsec tunnel HMAC algorithm.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] ips_archive: Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_log_rate: FortiAnalyzer maximum log rate in MBps (0 = unlimited).
        :param pulumi.Input[int] monitor_failure_retry_period: Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
        :param pulumi.Input[int] monitor_keepalive_period: Time between OFTP keepalives in seconds (for status and log buffer).
        :param pulumi.Input[str] preshared_key: Preshared-key used for auto-authorization on FortiAnalyzer.
        :param pulumi.Input[str] priority: Set log transmission priority. Valid values: `default`, `low`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingSerialArgs']]]] serials: Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
        :param pulumi.Input[str] source_ip: Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
        :param pulumi.Input[str] ssl_min_proto_version: Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        :param pulumi.Input[str] status: Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] upload_day: Day of week (month) to upload logs.
        :param pulumi.Input[str] upload_interval: Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
        :param pulumi.Input[str] upload_option: Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
        :param pulumi.Input[str] upload_time: Time to upload logs (hh:mm).
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingState.__new__(_SettingState)

        __props__.__dict__["access_config"] = access_config
        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["certificate_verification"] = certificate_verification
        __props__.__dict__["conn_timeout"] = conn_timeout
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["enc_algorithm"] = enc_algorithm
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["hmac_algorithm"] = hmac_algorithm
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interface_select_method"] = interface_select_method
        __props__.__dict__["ips_archive"] = ips_archive
        __props__.__dict__["max_log_rate"] = max_log_rate
        __props__.__dict__["monitor_failure_retry_period"] = monitor_failure_retry_period
        __props__.__dict__["monitor_keepalive_period"] = monitor_keepalive_period
        __props__.__dict__["preshared_key"] = preshared_key
        __props__.__dict__["priority"] = priority
        __props__.__dict__["serials"] = serials
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["ssl_min_proto_version"] = ssl_min_proto_version
        __props__.__dict__["status"] = status
        __props__.__dict__["upload_day"] = upload_day
        __props__.__dict__["upload_interval"] = upload_interval
        __props__.__dict__["upload_option"] = upload_option
        __props__.__dict__["upload_time"] = upload_time
        __props__.__dict__["vdomparam"] = vdomparam
        return Setting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessConfig")
    def access_config(self) -> pulumi.Output[str]:
        """
        Enable/disable FortiAnalyzer access to configuration and data. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "access_config")

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[str]:
        """
        Certificate used to communicate with FortiAnalyzer.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="certificateVerification")
    def certificate_verification(self) -> pulumi.Output[str]:
        """
        Enable/disable identity verification of FortiAnalyzer by use of certificate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "certificate_verification")

    @property
    @pulumi.getter(name="connTimeout")
    def conn_timeout(self) -> pulumi.Output[int]:
        """
        FortiAnalyzer connection time-out in seconds (for status and log buffer).
        """
        return pulumi.get(self, "conn_timeout")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="encAlgorithm")
    def enc_algorithm(self) -> pulumi.Output[str]:
        """
        Configure the level of SSL protection for secure communication with FortiAnalyzer. Valid values: `high-medium`, `high`, `low`.
        """
        return pulumi.get(self, "enc_algorithm")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="hmacAlgorithm")
    def hmac_algorithm(self) -> pulumi.Output[str]:
        """
        FortiAnalyzer IPsec tunnel HMAC algorithm.
        """
        return pulumi.get(self, "hmac_algorithm")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> pulumi.Output[str]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @property
    @pulumi.getter(name="ipsArchive")
    def ips_archive(self) -> pulumi.Output[str]:
        """
        Enable/disable IPS packet archive logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ips_archive")

    @property
    @pulumi.getter(name="maxLogRate")
    def max_log_rate(self) -> pulumi.Output[int]:
        """
        FortiAnalyzer maximum log rate in MBps (0 = unlimited).
        """
        return pulumi.get(self, "max_log_rate")

    @property
    @pulumi.getter(name="monitorFailureRetryPeriod")
    def monitor_failure_retry_period(self) -> pulumi.Output[int]:
        """
        Time between FortiAnalyzer connection retries in seconds (for status and log buffer).
        """
        return pulumi.get(self, "monitor_failure_retry_period")

    @property
    @pulumi.getter(name="monitorKeepalivePeriod")
    def monitor_keepalive_period(self) -> pulumi.Output[int]:
        """
        Time between OFTP keepalives in seconds (for status and log buffer).
        """
        return pulumi.get(self, "monitor_keepalive_period")

    @property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> pulumi.Output[str]:
        """
        Preshared-key used for auto-authorization on FortiAnalyzer.
        """
        return pulumi.get(self, "preshared_key")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[str]:
        """
        Set log transmission priority. Valid values: `default`, `low`.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def serials(self) -> pulumi.Output[Optional[Sequence['outputs.SettingSerial']]]:
        """
        Serial numbers of the FortiAnalyzer. The structure of `serial` block is documented below.
        """
        return pulumi.get(self, "serials")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        """
        Source IPv4 or IPv6 address used to communicate with FortiAnalyzer.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="sslMinProtoVersion")
    def ssl_min_proto_version(self) -> pulumi.Output[str]:
        """
        Minimum supported protocol version for SSL/TLS connections (default is to follow system global setting).
        """
        return pulumi.get(self, "ssl_min_proto_version")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable/disable logging to FortiAnalyzer. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uploadDay")
    def upload_day(self) -> pulumi.Output[str]:
        """
        Day of week (month) to upload logs.
        """
        return pulumi.get(self, "upload_day")

    @property
    @pulumi.getter(name="uploadInterval")
    def upload_interval(self) -> pulumi.Output[str]:
        """
        Frequency to upload log files to FortiAnalyzer. Valid values: `daily`, `weekly`, `monthly`.
        """
        return pulumi.get(self, "upload_interval")

    @property
    @pulumi.getter(name="uploadOption")
    def upload_option(self) -> pulumi.Output[str]:
        """
        Enable/disable logging to hard disk and then uploading to FortiAnalyzer. Valid values: `store-and-upload`, `realtime`, `1-minute`, `5-minute`.
        """
        return pulumi.get(self, "upload_option")

    @property
    @pulumi.getter(name="uploadTime")
    def upload_time(self) -> pulumi.Output[str]:
        """
        Time to upload logs (hh:mm).
        """
        return pulumi.get(self, "upload_time")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

