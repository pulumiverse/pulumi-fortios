# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = ['GlobalsettingArgs', 'Globalsetting']

@pulumi.input_type
class GlobalsettingArgs:
    def __init__(__self__, *,
                 full_final_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_first_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_second_warning_threshold: Optional[pulumi.Input[int]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Globalsetting resource.
        :param pulumi.Input[int] full_final_warning_threshold: Log full final warning threshold as a percent (3 - 100, default = 95).
        :param pulumi.Input[int] full_first_warning_threshold: Log full first warning threshold as a percent (1 - 98, default = 75).
        :param pulumi.Input[int] full_second_warning_threshold: Log full second warning threshold as a percent (2 - 99, default = 90).
        :param pulumi.Input[int] max_size: Maximum amount of memory that can be used for memory logging in bytes.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if full_final_warning_threshold is not None:
            pulumi.set(__self__, "full_final_warning_threshold", full_final_warning_threshold)
        if full_first_warning_threshold is not None:
            pulumi.set(__self__, "full_first_warning_threshold", full_first_warning_threshold)
        if full_second_warning_threshold is not None:
            pulumi.set(__self__, "full_second_warning_threshold", full_second_warning_threshold)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="fullFinalWarningThreshold")
    def full_final_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Log full final warning threshold as a percent (3 - 100, default = 95).
        """
        return pulumi.get(self, "full_final_warning_threshold")

    @full_final_warning_threshold.setter
    def full_final_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_final_warning_threshold", value)

    @property
    @pulumi.getter(name="fullFirstWarningThreshold")
    def full_first_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Log full first warning threshold as a percent (1 - 98, default = 75).
        """
        return pulumi.get(self, "full_first_warning_threshold")

    @full_first_warning_threshold.setter
    def full_first_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_first_warning_threshold", value)

    @property
    @pulumi.getter(name="fullSecondWarningThreshold")
    def full_second_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Log full second warning threshold as a percent (2 - 99, default = 90).
        """
        return pulumi.get(self, "full_second_warning_threshold")

    @full_second_warning_threshold.setter
    def full_second_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_second_warning_threshold", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum amount of memory that can be used for memory logging in bytes.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _GlobalsettingState:
    def __init__(__self__, *,
                 full_final_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_first_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_second_warning_threshold: Optional[pulumi.Input[int]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Globalsetting resources.
        :param pulumi.Input[int] full_final_warning_threshold: Log full final warning threshold as a percent (3 - 100, default = 95).
        :param pulumi.Input[int] full_first_warning_threshold: Log full first warning threshold as a percent (1 - 98, default = 75).
        :param pulumi.Input[int] full_second_warning_threshold: Log full second warning threshold as a percent (2 - 99, default = 90).
        :param pulumi.Input[int] max_size: Maximum amount of memory that can be used for memory logging in bytes.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if full_final_warning_threshold is not None:
            pulumi.set(__self__, "full_final_warning_threshold", full_final_warning_threshold)
        if full_first_warning_threshold is not None:
            pulumi.set(__self__, "full_first_warning_threshold", full_first_warning_threshold)
        if full_second_warning_threshold is not None:
            pulumi.set(__self__, "full_second_warning_threshold", full_second_warning_threshold)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="fullFinalWarningThreshold")
    def full_final_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Log full final warning threshold as a percent (3 - 100, default = 95).
        """
        return pulumi.get(self, "full_final_warning_threshold")

    @full_final_warning_threshold.setter
    def full_final_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_final_warning_threshold", value)

    @property
    @pulumi.getter(name="fullFirstWarningThreshold")
    def full_first_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Log full first warning threshold as a percent (1 - 98, default = 75).
        """
        return pulumi.get(self, "full_first_warning_threshold")

    @full_first_warning_threshold.setter
    def full_first_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_first_warning_threshold", value)

    @property
    @pulumi.getter(name="fullSecondWarningThreshold")
    def full_second_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Log full second warning threshold as a percent (2 - 99, default = 90).
        """
        return pulumi.get(self, "full_second_warning_threshold")

    @full_second_warning_threshold.setter
    def full_second_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_second_warning_threshold", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum amount of memory that can be used for memory logging in bytes.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Globalsetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 full_final_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_first_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_second_warning_threshold: Optional[pulumi.Input[int]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Global settings for memory logging.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.log.memory.Globalsetting("trname",
            full_final_warning_threshold=95,
            full_first_warning_threshold=75,
            full_second_warning_threshold=90,
            max_size=163840)
        ```

        ## Import

        LogMemory GlobalSetting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:log/memory/globalsetting:Globalsetting labelname LogMemoryGlobalSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:log/memory/globalsetting:Globalsetting labelname LogMemoryGlobalSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] full_final_warning_threshold: Log full final warning threshold as a percent (3 - 100, default = 95).
        :param pulumi.Input[int] full_first_warning_threshold: Log full first warning threshold as a percent (1 - 98, default = 75).
        :param pulumi.Input[int] full_second_warning_threshold: Log full second warning threshold as a percent (2 - 99, default = 90).
        :param pulumi.Input[int] max_size: Maximum amount of memory that can be used for memory logging in bytes.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[GlobalsettingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Global settings for memory logging.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.log.memory.Globalsetting("trname",
            full_final_warning_threshold=95,
            full_first_warning_threshold=75,
            full_second_warning_threshold=90,
            max_size=163840)
        ```

        ## Import

        LogMemory GlobalSetting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:log/memory/globalsetting:Globalsetting labelname LogMemoryGlobalSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:log/memory/globalsetting:Globalsetting labelname LogMemoryGlobalSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param GlobalsettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GlobalsettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 full_final_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_first_warning_threshold: Optional[pulumi.Input[int]] = None,
                 full_second_warning_threshold: Optional[pulumi.Input[int]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GlobalsettingArgs.__new__(GlobalsettingArgs)

            __props__.__dict__["full_final_warning_threshold"] = full_final_warning_threshold
            __props__.__dict__["full_first_warning_threshold"] = full_first_warning_threshold
            __props__.__dict__["full_second_warning_threshold"] = full_second_warning_threshold
            __props__.__dict__["max_size"] = max_size
            __props__.__dict__["vdomparam"] = vdomparam
        super(Globalsetting, __self__).__init__(
            'fortios:log/memory/globalsetting:Globalsetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            full_final_warning_threshold: Optional[pulumi.Input[int]] = None,
            full_first_warning_threshold: Optional[pulumi.Input[int]] = None,
            full_second_warning_threshold: Optional[pulumi.Input[int]] = None,
            max_size: Optional[pulumi.Input[int]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Globalsetting':
        """
        Get an existing Globalsetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] full_final_warning_threshold: Log full final warning threshold as a percent (3 - 100, default = 95).
        :param pulumi.Input[int] full_first_warning_threshold: Log full first warning threshold as a percent (1 - 98, default = 75).
        :param pulumi.Input[int] full_second_warning_threshold: Log full second warning threshold as a percent (2 - 99, default = 90).
        :param pulumi.Input[int] max_size: Maximum amount of memory that can be used for memory logging in bytes.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GlobalsettingState.__new__(_GlobalsettingState)

        __props__.__dict__["full_final_warning_threshold"] = full_final_warning_threshold
        __props__.__dict__["full_first_warning_threshold"] = full_first_warning_threshold
        __props__.__dict__["full_second_warning_threshold"] = full_second_warning_threshold
        __props__.__dict__["max_size"] = max_size
        __props__.__dict__["vdomparam"] = vdomparam
        return Globalsetting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="fullFinalWarningThreshold")
    def full_final_warning_threshold(self) -> pulumi.Output[int]:
        """
        Log full final warning threshold as a percent (3 - 100, default = 95).
        """
        return pulumi.get(self, "full_final_warning_threshold")

    @property
    @pulumi.getter(name="fullFirstWarningThreshold")
    def full_first_warning_threshold(self) -> pulumi.Output[int]:
        """
        Log full first warning threshold as a percent (1 - 98, default = 75).
        """
        return pulumi.get(self, "full_first_warning_threshold")

    @property
    @pulumi.getter(name="fullSecondWarningThreshold")
    def full_second_warning_threshold(self) -> pulumi.Output[int]:
        """
        Log full second warning threshold as a percent (2 - 99, default = 90).
        """
        return pulumi.get(self, "full_second_warning_threshold")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> pulumi.Output[int]:
        """
        Maximum amount of memory that can be used for memory logging in bytes.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

