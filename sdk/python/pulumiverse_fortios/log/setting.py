# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SettingArgs', 'Setting']

@pulumi.input_type
class SettingArgs:
    def __init__(__self__, *,
                 anonymization_hash: Optional[pulumi.Input[str]] = None,
                 brief_traffic_format: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input['SettingCustomLogFieldArgs']]]] = None,
                 daemon_log: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 expolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 faz_override: Optional[pulumi.Input[str]] = None,
                 fwpolicy6_implicit_log: Optional[pulumi.Input[str]] = None,
                 fwpolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 local_in_allow: Optional[pulumi.Input[str]] = None,
                 local_in_deny_broadcast: Optional[pulumi.Input[str]] = None,
                 local_in_deny_unicast: Optional[pulumi.Input[str]] = None,
                 local_out: Optional[pulumi.Input[str]] = None,
                 local_out_ioc_detection: Optional[pulumi.Input[str]] = None,
                 log_invalid_packet: Optional[pulumi.Input[str]] = None,
                 log_policy_comment: Optional[pulumi.Input[str]] = None,
                 log_policy_name: Optional[pulumi.Input[str]] = None,
                 log_user_in_upper: Optional[pulumi.Input[str]] = None,
                 long_live_session_stat: Optional[pulumi.Input[str]] = None,
                 neighbor_event: Optional[pulumi.Input[str]] = None,
                 resolve_ip: Optional[pulumi.Input[str]] = None,
                 resolve_port: Optional[pulumi.Input[str]] = None,
                 rest_api_get: Optional[pulumi.Input[str]] = None,
                 rest_api_set: Optional[pulumi.Input[str]] = None,
                 syslog_override: Optional[pulumi.Input[str]] = None,
                 user_anonymize: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Setting resource.
        :param pulumi.Input[str] anonymization_hash: User name anonymization hash salt.
        :param pulumi.Input[str] brief_traffic_format: Enable/disable brief format traffic logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SettingCustomLogFieldArgs']]] custom_log_fields: Custom fields to append to all log messages. The structure of `custom_log_fields` block is documented below.
        :param pulumi.Input[str] daemon_log: Enable/disable daemon logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] expolicy_implicit_log: Enable/disable explicit proxy firewall implicit policy logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] extended_log: Enable/disable extended traffic logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] faz_override: Enable/disable override FortiAnalyzer settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fwpolicy6_implicit_log: Enable/disable implicit firewall policy6 logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fwpolicy_implicit_log: Enable/disable implicit firewall policy logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] local_in_allow: Enable/disable local-in-allow logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_in_deny_broadcast: Enable/disable local-in-deny-broadcast logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_in_deny_unicast: Enable/disable local-in-deny-unicast logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_out: Enable/disable local-out logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_out_ioc_detection: Enable/disable local-out traffic IoC detection. Requires local-out to be enabled. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_invalid_packet: Enable/disable invalid packet traffic logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_policy_comment: Enable/disable inserting policy comments into traffic logs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_policy_name: Enable/disable inserting policy name into traffic logs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_user_in_upper: Enable/disable logs with user-in-upper. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] long_live_session_stat: Enable/disable long-live-session statistics logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] neighbor_event: Enable/disable neighbor event logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] resolve_ip: Enable/disable adding resolved domain names to traffic logs if possible. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] resolve_port: Enable/disable adding resolved service names to traffic logs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] rest_api_get: Enable/disable REST API GET request logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] rest_api_set: Enable/disable REST API POST/PUT/DELETE request logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] syslog_override: Enable/disable override Syslog settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] user_anonymize: Enable/disable anonymizing user names in log messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if anonymization_hash is not None:
            pulumi.set(__self__, "anonymization_hash", anonymization_hash)
        if brief_traffic_format is not None:
            pulumi.set(__self__, "brief_traffic_format", brief_traffic_format)
        if custom_log_fields is not None:
            pulumi.set(__self__, "custom_log_fields", custom_log_fields)
        if daemon_log is not None:
            pulumi.set(__self__, "daemon_log", daemon_log)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if expolicy_implicit_log is not None:
            pulumi.set(__self__, "expolicy_implicit_log", expolicy_implicit_log)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if faz_override is not None:
            pulumi.set(__self__, "faz_override", faz_override)
        if fwpolicy6_implicit_log is not None:
            pulumi.set(__self__, "fwpolicy6_implicit_log", fwpolicy6_implicit_log)
        if fwpolicy_implicit_log is not None:
            pulumi.set(__self__, "fwpolicy_implicit_log", fwpolicy_implicit_log)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if local_in_allow is not None:
            pulumi.set(__self__, "local_in_allow", local_in_allow)
        if local_in_deny_broadcast is not None:
            pulumi.set(__self__, "local_in_deny_broadcast", local_in_deny_broadcast)
        if local_in_deny_unicast is not None:
            pulumi.set(__self__, "local_in_deny_unicast", local_in_deny_unicast)
        if local_out is not None:
            pulumi.set(__self__, "local_out", local_out)
        if local_out_ioc_detection is not None:
            pulumi.set(__self__, "local_out_ioc_detection", local_out_ioc_detection)
        if log_invalid_packet is not None:
            pulumi.set(__self__, "log_invalid_packet", log_invalid_packet)
        if log_policy_comment is not None:
            pulumi.set(__self__, "log_policy_comment", log_policy_comment)
        if log_policy_name is not None:
            pulumi.set(__self__, "log_policy_name", log_policy_name)
        if log_user_in_upper is not None:
            pulumi.set(__self__, "log_user_in_upper", log_user_in_upper)
        if long_live_session_stat is not None:
            pulumi.set(__self__, "long_live_session_stat", long_live_session_stat)
        if neighbor_event is not None:
            pulumi.set(__self__, "neighbor_event", neighbor_event)
        if resolve_ip is not None:
            pulumi.set(__self__, "resolve_ip", resolve_ip)
        if resolve_port is not None:
            pulumi.set(__self__, "resolve_port", resolve_port)
        if rest_api_get is not None:
            pulumi.set(__self__, "rest_api_get", rest_api_get)
        if rest_api_set is not None:
            pulumi.set(__self__, "rest_api_set", rest_api_set)
        if syslog_override is not None:
            pulumi.set(__self__, "syslog_override", syslog_override)
        if user_anonymize is not None:
            pulumi.set(__self__, "user_anonymize", user_anonymize)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="anonymizationHash")
    def anonymization_hash(self) -> Optional[pulumi.Input[str]]:
        """
        User name anonymization hash salt.
        """
        return pulumi.get(self, "anonymization_hash")

    @anonymization_hash.setter
    def anonymization_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anonymization_hash", value)

    @property
    @pulumi.getter(name="briefTrafficFormat")
    def brief_traffic_format(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable brief format traffic logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "brief_traffic_format")

    @brief_traffic_format.setter
    def brief_traffic_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "brief_traffic_format", value)

    @property
    @pulumi.getter(name="customLogFields")
    def custom_log_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingCustomLogFieldArgs']]]]:
        """
        Custom fields to append to all log messages. The structure of `custom_log_fields` block is documented below.
        """
        return pulumi.get(self, "custom_log_fields")

    @custom_log_fields.setter
    def custom_log_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingCustomLogFieldArgs']]]]):
        pulumi.set(self, "custom_log_fields", value)

    @property
    @pulumi.getter(name="daemonLog")
    def daemon_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable daemon logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "daemon_log")

    @daemon_log.setter
    def daemon_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daemon_log", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="expolicyImplicitLog")
    def expolicy_implicit_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable explicit proxy firewall implicit policy logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "expolicy_implicit_log")

    @expolicy_implicit_log.setter
    def expolicy_implicit_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expolicy_implicit_log", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable extended traffic logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter(name="fazOverride")
    def faz_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable override FortiAnalyzer settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "faz_override")

    @faz_override.setter
    def faz_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_override", value)

    @property
    @pulumi.getter(name="fwpolicy6ImplicitLog")
    def fwpolicy6_implicit_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable implicit firewall policy6 logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fwpolicy6_implicit_log")

    @fwpolicy6_implicit_log.setter
    def fwpolicy6_implicit_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fwpolicy6_implicit_log", value)

    @property
    @pulumi.getter(name="fwpolicyImplicitLog")
    def fwpolicy_implicit_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable implicit firewall policy logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fwpolicy_implicit_log")

    @fwpolicy_implicit_log.setter
    def fwpolicy_implicit_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fwpolicy_implicit_log", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="localInAllow")
    def local_in_allow(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local-in-allow logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_in_allow")

    @local_in_allow.setter
    def local_in_allow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_in_allow", value)

    @property
    @pulumi.getter(name="localInDenyBroadcast")
    def local_in_deny_broadcast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local-in-deny-broadcast logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_in_deny_broadcast")

    @local_in_deny_broadcast.setter
    def local_in_deny_broadcast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_in_deny_broadcast", value)

    @property
    @pulumi.getter(name="localInDenyUnicast")
    def local_in_deny_unicast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local-in-deny-unicast logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_in_deny_unicast")

    @local_in_deny_unicast.setter
    def local_in_deny_unicast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_in_deny_unicast", value)

    @property
    @pulumi.getter(name="localOut")
    def local_out(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local-out logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_out")

    @local_out.setter
    def local_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_out", value)

    @property
    @pulumi.getter(name="localOutIocDetection")
    def local_out_ioc_detection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local-out traffic IoC detection. Requires local-out to be enabled. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_out_ioc_detection")

    @local_out_ioc_detection.setter
    def local_out_ioc_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_out_ioc_detection", value)

    @property
    @pulumi.getter(name="logInvalidPacket")
    def log_invalid_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable invalid packet traffic logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_invalid_packet")

    @log_invalid_packet.setter
    def log_invalid_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_invalid_packet", value)

    @property
    @pulumi.getter(name="logPolicyComment")
    def log_policy_comment(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable inserting policy comments into traffic logs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_policy_comment")

    @log_policy_comment.setter
    def log_policy_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_policy_comment", value)

    @property
    @pulumi.getter(name="logPolicyName")
    def log_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable inserting policy name into traffic logs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_policy_name")

    @log_policy_name.setter
    def log_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_policy_name", value)

    @property
    @pulumi.getter(name="logUserInUpper")
    def log_user_in_upper(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logs with user-in-upper. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_user_in_upper")

    @log_user_in_upper.setter
    def log_user_in_upper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_user_in_upper", value)

    @property
    @pulumi.getter(name="longLiveSessionStat")
    def long_live_session_stat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable long-live-session statistics logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "long_live_session_stat")

    @long_live_session_stat.setter
    def long_live_session_stat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "long_live_session_stat", value)

    @property
    @pulumi.getter(name="neighborEvent")
    def neighbor_event(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable neighbor event logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "neighbor_event")

    @neighbor_event.setter
    def neighbor_event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbor_event", value)

    @property
    @pulumi.getter(name="resolveIp")
    def resolve_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding resolved domain names to traffic logs if possible. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "resolve_ip")

    @resolve_ip.setter
    def resolve_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolve_ip", value)

    @property
    @pulumi.getter(name="resolvePort")
    def resolve_port(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding resolved service names to traffic logs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "resolve_port")

    @resolve_port.setter
    def resolve_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolve_port", value)

    @property
    @pulumi.getter(name="restApiGet")
    def rest_api_get(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable REST API GET request logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rest_api_get")

    @rest_api_get.setter
    def rest_api_get(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rest_api_get", value)

    @property
    @pulumi.getter(name="restApiSet")
    def rest_api_set(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable REST API POST/PUT/DELETE request logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rest_api_set")

    @rest_api_set.setter
    def rest_api_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rest_api_set", value)

    @property
    @pulumi.getter(name="syslogOverride")
    def syslog_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable override Syslog settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "syslog_override")

    @syslog_override.setter
    def syslog_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "syslog_override", value)

    @property
    @pulumi.getter(name="userAnonymize")
    def user_anonymize(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable anonymizing user names in log messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "user_anonymize")

    @user_anonymize.setter
    def user_anonymize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_anonymize", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SettingState:
    def __init__(__self__, *,
                 anonymization_hash: Optional[pulumi.Input[str]] = None,
                 brief_traffic_format: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input['SettingCustomLogFieldArgs']]]] = None,
                 daemon_log: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 expolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 faz_override: Optional[pulumi.Input[str]] = None,
                 fwpolicy6_implicit_log: Optional[pulumi.Input[str]] = None,
                 fwpolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 local_in_allow: Optional[pulumi.Input[str]] = None,
                 local_in_deny_broadcast: Optional[pulumi.Input[str]] = None,
                 local_in_deny_unicast: Optional[pulumi.Input[str]] = None,
                 local_out: Optional[pulumi.Input[str]] = None,
                 local_out_ioc_detection: Optional[pulumi.Input[str]] = None,
                 log_invalid_packet: Optional[pulumi.Input[str]] = None,
                 log_policy_comment: Optional[pulumi.Input[str]] = None,
                 log_policy_name: Optional[pulumi.Input[str]] = None,
                 log_user_in_upper: Optional[pulumi.Input[str]] = None,
                 long_live_session_stat: Optional[pulumi.Input[str]] = None,
                 neighbor_event: Optional[pulumi.Input[str]] = None,
                 resolve_ip: Optional[pulumi.Input[str]] = None,
                 resolve_port: Optional[pulumi.Input[str]] = None,
                 rest_api_get: Optional[pulumi.Input[str]] = None,
                 rest_api_set: Optional[pulumi.Input[str]] = None,
                 syslog_override: Optional[pulumi.Input[str]] = None,
                 user_anonymize: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Setting resources.
        :param pulumi.Input[str] anonymization_hash: User name anonymization hash salt.
        :param pulumi.Input[str] brief_traffic_format: Enable/disable brief format traffic logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SettingCustomLogFieldArgs']]] custom_log_fields: Custom fields to append to all log messages. The structure of `custom_log_fields` block is documented below.
        :param pulumi.Input[str] daemon_log: Enable/disable daemon logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] expolicy_implicit_log: Enable/disable explicit proxy firewall implicit policy logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] extended_log: Enable/disable extended traffic logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] faz_override: Enable/disable override FortiAnalyzer settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fwpolicy6_implicit_log: Enable/disable implicit firewall policy6 logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fwpolicy_implicit_log: Enable/disable implicit firewall policy logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] local_in_allow: Enable/disable local-in-allow logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_in_deny_broadcast: Enable/disable local-in-deny-broadcast logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_in_deny_unicast: Enable/disable local-in-deny-unicast logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_out: Enable/disable local-out logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_out_ioc_detection: Enable/disable local-out traffic IoC detection. Requires local-out to be enabled. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_invalid_packet: Enable/disable invalid packet traffic logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_policy_comment: Enable/disable inserting policy comments into traffic logs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_policy_name: Enable/disable inserting policy name into traffic logs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_user_in_upper: Enable/disable logs with user-in-upper. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] long_live_session_stat: Enable/disable long-live-session statistics logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] neighbor_event: Enable/disable neighbor event logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] resolve_ip: Enable/disable adding resolved domain names to traffic logs if possible. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] resolve_port: Enable/disable adding resolved service names to traffic logs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] rest_api_get: Enable/disable REST API GET request logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] rest_api_set: Enable/disable REST API POST/PUT/DELETE request logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] syslog_override: Enable/disable override Syslog settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] user_anonymize: Enable/disable anonymizing user names in log messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if anonymization_hash is not None:
            pulumi.set(__self__, "anonymization_hash", anonymization_hash)
        if brief_traffic_format is not None:
            pulumi.set(__self__, "brief_traffic_format", brief_traffic_format)
        if custom_log_fields is not None:
            pulumi.set(__self__, "custom_log_fields", custom_log_fields)
        if daemon_log is not None:
            pulumi.set(__self__, "daemon_log", daemon_log)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if expolicy_implicit_log is not None:
            pulumi.set(__self__, "expolicy_implicit_log", expolicy_implicit_log)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if faz_override is not None:
            pulumi.set(__self__, "faz_override", faz_override)
        if fwpolicy6_implicit_log is not None:
            pulumi.set(__self__, "fwpolicy6_implicit_log", fwpolicy6_implicit_log)
        if fwpolicy_implicit_log is not None:
            pulumi.set(__self__, "fwpolicy_implicit_log", fwpolicy_implicit_log)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if local_in_allow is not None:
            pulumi.set(__self__, "local_in_allow", local_in_allow)
        if local_in_deny_broadcast is not None:
            pulumi.set(__self__, "local_in_deny_broadcast", local_in_deny_broadcast)
        if local_in_deny_unicast is not None:
            pulumi.set(__self__, "local_in_deny_unicast", local_in_deny_unicast)
        if local_out is not None:
            pulumi.set(__self__, "local_out", local_out)
        if local_out_ioc_detection is not None:
            pulumi.set(__self__, "local_out_ioc_detection", local_out_ioc_detection)
        if log_invalid_packet is not None:
            pulumi.set(__self__, "log_invalid_packet", log_invalid_packet)
        if log_policy_comment is not None:
            pulumi.set(__self__, "log_policy_comment", log_policy_comment)
        if log_policy_name is not None:
            pulumi.set(__self__, "log_policy_name", log_policy_name)
        if log_user_in_upper is not None:
            pulumi.set(__self__, "log_user_in_upper", log_user_in_upper)
        if long_live_session_stat is not None:
            pulumi.set(__self__, "long_live_session_stat", long_live_session_stat)
        if neighbor_event is not None:
            pulumi.set(__self__, "neighbor_event", neighbor_event)
        if resolve_ip is not None:
            pulumi.set(__self__, "resolve_ip", resolve_ip)
        if resolve_port is not None:
            pulumi.set(__self__, "resolve_port", resolve_port)
        if rest_api_get is not None:
            pulumi.set(__self__, "rest_api_get", rest_api_get)
        if rest_api_set is not None:
            pulumi.set(__self__, "rest_api_set", rest_api_set)
        if syslog_override is not None:
            pulumi.set(__self__, "syslog_override", syslog_override)
        if user_anonymize is not None:
            pulumi.set(__self__, "user_anonymize", user_anonymize)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="anonymizationHash")
    def anonymization_hash(self) -> Optional[pulumi.Input[str]]:
        """
        User name anonymization hash salt.
        """
        return pulumi.get(self, "anonymization_hash")

    @anonymization_hash.setter
    def anonymization_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anonymization_hash", value)

    @property
    @pulumi.getter(name="briefTrafficFormat")
    def brief_traffic_format(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable brief format traffic logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "brief_traffic_format")

    @brief_traffic_format.setter
    def brief_traffic_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "brief_traffic_format", value)

    @property
    @pulumi.getter(name="customLogFields")
    def custom_log_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingCustomLogFieldArgs']]]]:
        """
        Custom fields to append to all log messages. The structure of `custom_log_fields` block is documented below.
        """
        return pulumi.get(self, "custom_log_fields")

    @custom_log_fields.setter
    def custom_log_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingCustomLogFieldArgs']]]]):
        pulumi.set(self, "custom_log_fields", value)

    @property
    @pulumi.getter(name="daemonLog")
    def daemon_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable daemon logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "daemon_log")

    @daemon_log.setter
    def daemon_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daemon_log", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="expolicyImplicitLog")
    def expolicy_implicit_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable explicit proxy firewall implicit policy logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "expolicy_implicit_log")

    @expolicy_implicit_log.setter
    def expolicy_implicit_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expolicy_implicit_log", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable extended traffic logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter(name="fazOverride")
    def faz_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable override FortiAnalyzer settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "faz_override")

    @faz_override.setter
    def faz_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "faz_override", value)

    @property
    @pulumi.getter(name="fwpolicy6ImplicitLog")
    def fwpolicy6_implicit_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable implicit firewall policy6 logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fwpolicy6_implicit_log")

    @fwpolicy6_implicit_log.setter
    def fwpolicy6_implicit_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fwpolicy6_implicit_log", value)

    @property
    @pulumi.getter(name="fwpolicyImplicitLog")
    def fwpolicy_implicit_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable implicit firewall policy logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fwpolicy_implicit_log")

    @fwpolicy_implicit_log.setter
    def fwpolicy_implicit_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fwpolicy_implicit_log", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="localInAllow")
    def local_in_allow(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local-in-allow logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_in_allow")

    @local_in_allow.setter
    def local_in_allow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_in_allow", value)

    @property
    @pulumi.getter(name="localInDenyBroadcast")
    def local_in_deny_broadcast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local-in-deny-broadcast logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_in_deny_broadcast")

    @local_in_deny_broadcast.setter
    def local_in_deny_broadcast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_in_deny_broadcast", value)

    @property
    @pulumi.getter(name="localInDenyUnicast")
    def local_in_deny_unicast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local-in-deny-unicast logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_in_deny_unicast")

    @local_in_deny_unicast.setter
    def local_in_deny_unicast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_in_deny_unicast", value)

    @property
    @pulumi.getter(name="localOut")
    def local_out(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local-out logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_out")

    @local_out.setter
    def local_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_out", value)

    @property
    @pulumi.getter(name="localOutIocDetection")
    def local_out_ioc_detection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local-out traffic IoC detection. Requires local-out to be enabled. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_out_ioc_detection")

    @local_out_ioc_detection.setter
    def local_out_ioc_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_out_ioc_detection", value)

    @property
    @pulumi.getter(name="logInvalidPacket")
    def log_invalid_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable invalid packet traffic logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_invalid_packet")

    @log_invalid_packet.setter
    def log_invalid_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_invalid_packet", value)

    @property
    @pulumi.getter(name="logPolicyComment")
    def log_policy_comment(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable inserting policy comments into traffic logs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_policy_comment")

    @log_policy_comment.setter
    def log_policy_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_policy_comment", value)

    @property
    @pulumi.getter(name="logPolicyName")
    def log_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable inserting policy name into traffic logs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_policy_name")

    @log_policy_name.setter
    def log_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_policy_name", value)

    @property
    @pulumi.getter(name="logUserInUpper")
    def log_user_in_upper(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logs with user-in-upper. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_user_in_upper")

    @log_user_in_upper.setter
    def log_user_in_upper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_user_in_upper", value)

    @property
    @pulumi.getter(name="longLiveSessionStat")
    def long_live_session_stat(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable long-live-session statistics logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "long_live_session_stat")

    @long_live_session_stat.setter
    def long_live_session_stat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "long_live_session_stat", value)

    @property
    @pulumi.getter(name="neighborEvent")
    def neighbor_event(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable neighbor event logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "neighbor_event")

    @neighbor_event.setter
    def neighbor_event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbor_event", value)

    @property
    @pulumi.getter(name="resolveIp")
    def resolve_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding resolved domain names to traffic logs if possible. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "resolve_ip")

    @resolve_ip.setter
    def resolve_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolve_ip", value)

    @property
    @pulumi.getter(name="resolvePort")
    def resolve_port(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding resolved service names to traffic logs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "resolve_port")

    @resolve_port.setter
    def resolve_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolve_port", value)

    @property
    @pulumi.getter(name="restApiGet")
    def rest_api_get(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable REST API GET request logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rest_api_get")

    @rest_api_get.setter
    def rest_api_get(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rest_api_get", value)

    @property
    @pulumi.getter(name="restApiSet")
    def rest_api_set(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable REST API POST/PUT/DELETE request logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rest_api_set")

    @rest_api_set.setter
    def rest_api_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rest_api_set", value)

    @property
    @pulumi.getter(name="syslogOverride")
    def syslog_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable override Syslog settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "syslog_override")

    @syslog_override.setter
    def syslog_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "syslog_override", value)

    @property
    @pulumi.getter(name="userAnonymize")
    def user_anonymize(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable anonymizing user names in log messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "user_anonymize")

    @user_anonymize.setter
    def user_anonymize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_anonymize", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Setting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anonymization_hash: Optional[pulumi.Input[str]] = None,
                 brief_traffic_format: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingCustomLogFieldArgs']]]]] = None,
                 daemon_log: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 expolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 faz_override: Optional[pulumi.Input[str]] = None,
                 fwpolicy6_implicit_log: Optional[pulumi.Input[str]] = None,
                 fwpolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 local_in_allow: Optional[pulumi.Input[str]] = None,
                 local_in_deny_broadcast: Optional[pulumi.Input[str]] = None,
                 local_in_deny_unicast: Optional[pulumi.Input[str]] = None,
                 local_out: Optional[pulumi.Input[str]] = None,
                 local_out_ioc_detection: Optional[pulumi.Input[str]] = None,
                 log_invalid_packet: Optional[pulumi.Input[str]] = None,
                 log_policy_comment: Optional[pulumi.Input[str]] = None,
                 log_policy_name: Optional[pulumi.Input[str]] = None,
                 log_user_in_upper: Optional[pulumi.Input[str]] = None,
                 long_live_session_stat: Optional[pulumi.Input[str]] = None,
                 neighbor_event: Optional[pulumi.Input[str]] = None,
                 resolve_ip: Optional[pulumi.Input[str]] = None,
                 resolve_port: Optional[pulumi.Input[str]] = None,
                 rest_api_get: Optional[pulumi.Input[str]] = None,
                 rest_api_set: Optional[pulumi.Input[str]] = None,
                 syslog_override: Optional[pulumi.Input[str]] = None,
                 user_anonymize: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure general log settings.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.log.Setting("trname",
            brief_traffic_format="disable",
            daemon_log="disable",
            expolicy_implicit_log="disable",
            faz_override="disable",
            fwpolicy6_implicit_log="disable",
            fwpolicy_implicit_log="disable",
            local_in_allow="disable",
            local_in_deny_broadcast="disable",
            local_in_deny_unicast="disable",
            local_out="disable",
            log_invalid_packet="disable",
            log_policy_comment="disable",
            log_policy_name="disable",
            log_user_in_upper="disable",
            neighbor_event="disable",
            resolve_ip="disable",
            resolve_port="enable",
            syslog_override="disable",
            user_anonymize="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Log Setting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:log/setting:Setting labelname LogSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:log/setting:Setting labelname LogSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] anonymization_hash: User name anonymization hash salt.
        :param pulumi.Input[str] brief_traffic_format: Enable/disable brief format traffic logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingCustomLogFieldArgs']]]] custom_log_fields: Custom fields to append to all log messages. The structure of `custom_log_fields` block is documented below.
        :param pulumi.Input[str] daemon_log: Enable/disable daemon logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] expolicy_implicit_log: Enable/disable explicit proxy firewall implicit policy logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] extended_log: Enable/disable extended traffic logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] faz_override: Enable/disable override FortiAnalyzer settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fwpolicy6_implicit_log: Enable/disable implicit firewall policy6 logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fwpolicy_implicit_log: Enable/disable implicit firewall policy logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] local_in_allow: Enable/disable local-in-allow logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_in_deny_broadcast: Enable/disable local-in-deny-broadcast logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_in_deny_unicast: Enable/disable local-in-deny-unicast logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_out: Enable/disable local-out logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_out_ioc_detection: Enable/disable local-out traffic IoC detection. Requires local-out to be enabled. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_invalid_packet: Enable/disable invalid packet traffic logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_policy_comment: Enable/disable inserting policy comments into traffic logs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_policy_name: Enable/disable inserting policy name into traffic logs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_user_in_upper: Enable/disable logs with user-in-upper. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] long_live_session_stat: Enable/disable long-live-session statistics logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] neighbor_event: Enable/disable neighbor event logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] resolve_ip: Enable/disable adding resolved domain names to traffic logs if possible. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] resolve_port: Enable/disable adding resolved service names to traffic logs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] rest_api_get: Enable/disable REST API GET request logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] rest_api_set: Enable/disable REST API POST/PUT/DELETE request logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] syslog_override: Enable/disable override Syslog settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] user_anonymize: Enable/disable anonymizing user names in log messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SettingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure general log settings.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.log.Setting("trname",
            brief_traffic_format="disable",
            daemon_log="disable",
            expolicy_implicit_log="disable",
            faz_override="disable",
            fwpolicy6_implicit_log="disable",
            fwpolicy_implicit_log="disable",
            local_in_allow="disable",
            local_in_deny_broadcast="disable",
            local_in_deny_unicast="disable",
            local_out="disable",
            log_invalid_packet="disable",
            log_policy_comment="disable",
            log_policy_name="disable",
            log_user_in_upper="disable",
            neighbor_event="disable",
            resolve_ip="disable",
            resolve_port="enable",
            syslog_override="disable",
            user_anonymize="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Log Setting can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:log/setting:Setting labelname LogSetting
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:log/setting:Setting labelname LogSetting
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anonymization_hash: Optional[pulumi.Input[str]] = None,
                 brief_traffic_format: Optional[pulumi.Input[str]] = None,
                 custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingCustomLogFieldArgs']]]]] = None,
                 daemon_log: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 expolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 faz_override: Optional[pulumi.Input[str]] = None,
                 fwpolicy6_implicit_log: Optional[pulumi.Input[str]] = None,
                 fwpolicy_implicit_log: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 local_in_allow: Optional[pulumi.Input[str]] = None,
                 local_in_deny_broadcast: Optional[pulumi.Input[str]] = None,
                 local_in_deny_unicast: Optional[pulumi.Input[str]] = None,
                 local_out: Optional[pulumi.Input[str]] = None,
                 local_out_ioc_detection: Optional[pulumi.Input[str]] = None,
                 log_invalid_packet: Optional[pulumi.Input[str]] = None,
                 log_policy_comment: Optional[pulumi.Input[str]] = None,
                 log_policy_name: Optional[pulumi.Input[str]] = None,
                 log_user_in_upper: Optional[pulumi.Input[str]] = None,
                 long_live_session_stat: Optional[pulumi.Input[str]] = None,
                 neighbor_event: Optional[pulumi.Input[str]] = None,
                 resolve_ip: Optional[pulumi.Input[str]] = None,
                 resolve_port: Optional[pulumi.Input[str]] = None,
                 rest_api_get: Optional[pulumi.Input[str]] = None,
                 rest_api_set: Optional[pulumi.Input[str]] = None,
                 syslog_override: Optional[pulumi.Input[str]] = None,
                 user_anonymize: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingArgs.__new__(SettingArgs)

            __props__.__dict__["anonymization_hash"] = anonymization_hash
            __props__.__dict__["brief_traffic_format"] = brief_traffic_format
            __props__.__dict__["custom_log_fields"] = custom_log_fields
            __props__.__dict__["daemon_log"] = daemon_log
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["expolicy_implicit_log"] = expolicy_implicit_log
            __props__.__dict__["extended_log"] = extended_log
            __props__.__dict__["faz_override"] = faz_override
            __props__.__dict__["fwpolicy6_implicit_log"] = fwpolicy6_implicit_log
            __props__.__dict__["fwpolicy_implicit_log"] = fwpolicy_implicit_log
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["local_in_allow"] = local_in_allow
            __props__.__dict__["local_in_deny_broadcast"] = local_in_deny_broadcast
            __props__.__dict__["local_in_deny_unicast"] = local_in_deny_unicast
            __props__.__dict__["local_out"] = local_out
            __props__.__dict__["local_out_ioc_detection"] = local_out_ioc_detection
            __props__.__dict__["log_invalid_packet"] = log_invalid_packet
            __props__.__dict__["log_policy_comment"] = log_policy_comment
            __props__.__dict__["log_policy_name"] = log_policy_name
            __props__.__dict__["log_user_in_upper"] = log_user_in_upper
            __props__.__dict__["long_live_session_stat"] = long_live_session_stat
            __props__.__dict__["neighbor_event"] = neighbor_event
            __props__.__dict__["resolve_ip"] = resolve_ip
            __props__.__dict__["resolve_port"] = resolve_port
            __props__.__dict__["rest_api_get"] = rest_api_get
            __props__.__dict__["rest_api_set"] = rest_api_set
            __props__.__dict__["syslog_override"] = syslog_override
            __props__.__dict__["user_anonymize"] = user_anonymize
            __props__.__dict__["vdomparam"] = vdomparam
        super(Setting, __self__).__init__(
            'fortios:log/setting:Setting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            anonymization_hash: Optional[pulumi.Input[str]] = None,
            brief_traffic_format: Optional[pulumi.Input[str]] = None,
            custom_log_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingCustomLogFieldArgs']]]]] = None,
            daemon_log: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            expolicy_implicit_log: Optional[pulumi.Input[str]] = None,
            extended_log: Optional[pulumi.Input[str]] = None,
            faz_override: Optional[pulumi.Input[str]] = None,
            fwpolicy6_implicit_log: Optional[pulumi.Input[str]] = None,
            fwpolicy_implicit_log: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            local_in_allow: Optional[pulumi.Input[str]] = None,
            local_in_deny_broadcast: Optional[pulumi.Input[str]] = None,
            local_in_deny_unicast: Optional[pulumi.Input[str]] = None,
            local_out: Optional[pulumi.Input[str]] = None,
            local_out_ioc_detection: Optional[pulumi.Input[str]] = None,
            log_invalid_packet: Optional[pulumi.Input[str]] = None,
            log_policy_comment: Optional[pulumi.Input[str]] = None,
            log_policy_name: Optional[pulumi.Input[str]] = None,
            log_user_in_upper: Optional[pulumi.Input[str]] = None,
            long_live_session_stat: Optional[pulumi.Input[str]] = None,
            neighbor_event: Optional[pulumi.Input[str]] = None,
            resolve_ip: Optional[pulumi.Input[str]] = None,
            resolve_port: Optional[pulumi.Input[str]] = None,
            rest_api_get: Optional[pulumi.Input[str]] = None,
            rest_api_set: Optional[pulumi.Input[str]] = None,
            syslog_override: Optional[pulumi.Input[str]] = None,
            user_anonymize: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Setting':
        """
        Get an existing Setting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] anonymization_hash: User name anonymization hash salt.
        :param pulumi.Input[str] brief_traffic_format: Enable/disable brief format traffic logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SettingCustomLogFieldArgs']]]] custom_log_fields: Custom fields to append to all log messages. The structure of `custom_log_fields` block is documented below.
        :param pulumi.Input[str] daemon_log: Enable/disable daemon logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] expolicy_implicit_log: Enable/disable explicit proxy firewall implicit policy logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] extended_log: Enable/disable extended traffic logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] faz_override: Enable/disable override FortiAnalyzer settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fwpolicy6_implicit_log: Enable/disable implicit firewall policy6 logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fwpolicy_implicit_log: Enable/disable implicit firewall policy logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] local_in_allow: Enable/disable local-in-allow logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_in_deny_broadcast: Enable/disable local-in-deny-broadcast logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_in_deny_unicast: Enable/disable local-in-deny-unicast logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_out: Enable/disable local-out logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_out_ioc_detection: Enable/disable local-out traffic IoC detection. Requires local-out to be enabled. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_invalid_packet: Enable/disable invalid packet traffic logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_policy_comment: Enable/disable inserting policy comments into traffic logs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_policy_name: Enable/disable inserting policy name into traffic logs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_user_in_upper: Enable/disable logs with user-in-upper. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] long_live_session_stat: Enable/disable long-live-session statistics logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] neighbor_event: Enable/disable neighbor event logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] resolve_ip: Enable/disable adding resolved domain names to traffic logs if possible. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] resolve_port: Enable/disable adding resolved service names to traffic logs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] rest_api_get: Enable/disable REST API GET request logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] rest_api_set: Enable/disable REST API POST/PUT/DELETE request logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] syslog_override: Enable/disable override Syslog settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] user_anonymize: Enable/disable anonymizing user names in log messages. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingState.__new__(_SettingState)

        __props__.__dict__["anonymization_hash"] = anonymization_hash
        __props__.__dict__["brief_traffic_format"] = brief_traffic_format
        __props__.__dict__["custom_log_fields"] = custom_log_fields
        __props__.__dict__["daemon_log"] = daemon_log
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["expolicy_implicit_log"] = expolicy_implicit_log
        __props__.__dict__["extended_log"] = extended_log
        __props__.__dict__["faz_override"] = faz_override
        __props__.__dict__["fwpolicy6_implicit_log"] = fwpolicy6_implicit_log
        __props__.__dict__["fwpolicy_implicit_log"] = fwpolicy_implicit_log
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["local_in_allow"] = local_in_allow
        __props__.__dict__["local_in_deny_broadcast"] = local_in_deny_broadcast
        __props__.__dict__["local_in_deny_unicast"] = local_in_deny_unicast
        __props__.__dict__["local_out"] = local_out
        __props__.__dict__["local_out_ioc_detection"] = local_out_ioc_detection
        __props__.__dict__["log_invalid_packet"] = log_invalid_packet
        __props__.__dict__["log_policy_comment"] = log_policy_comment
        __props__.__dict__["log_policy_name"] = log_policy_name
        __props__.__dict__["log_user_in_upper"] = log_user_in_upper
        __props__.__dict__["long_live_session_stat"] = long_live_session_stat
        __props__.__dict__["neighbor_event"] = neighbor_event
        __props__.__dict__["resolve_ip"] = resolve_ip
        __props__.__dict__["resolve_port"] = resolve_port
        __props__.__dict__["rest_api_get"] = rest_api_get
        __props__.__dict__["rest_api_set"] = rest_api_set
        __props__.__dict__["syslog_override"] = syslog_override
        __props__.__dict__["user_anonymize"] = user_anonymize
        __props__.__dict__["vdomparam"] = vdomparam
        return Setting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="anonymizationHash")
    def anonymization_hash(self) -> pulumi.Output[str]:
        """
        User name anonymization hash salt.
        """
        return pulumi.get(self, "anonymization_hash")

    @property
    @pulumi.getter(name="briefTrafficFormat")
    def brief_traffic_format(self) -> pulumi.Output[str]:
        """
        Enable/disable brief format traffic logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "brief_traffic_format")

    @property
    @pulumi.getter(name="customLogFields")
    def custom_log_fields(self) -> pulumi.Output[Optional[Sequence['outputs.SettingCustomLogField']]]:
        """
        Custom fields to append to all log messages. The structure of `custom_log_fields` block is documented below.
        """
        return pulumi.get(self, "custom_log_fields")

    @property
    @pulumi.getter(name="daemonLog")
    def daemon_log(self) -> pulumi.Output[str]:
        """
        Enable/disable daemon logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "daemon_log")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="expolicyImplicitLog")
    def expolicy_implicit_log(self) -> pulumi.Output[str]:
        """
        Enable/disable explicit proxy firewall implicit policy logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "expolicy_implicit_log")

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> pulumi.Output[str]:
        """
        Enable/disable extended traffic logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extended_log")

    @property
    @pulumi.getter(name="fazOverride")
    def faz_override(self) -> pulumi.Output[str]:
        """
        Enable/disable override FortiAnalyzer settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "faz_override")

    @property
    @pulumi.getter(name="fwpolicy6ImplicitLog")
    def fwpolicy6_implicit_log(self) -> pulumi.Output[str]:
        """
        Enable/disable implicit firewall policy6 logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fwpolicy6_implicit_log")

    @property
    @pulumi.getter(name="fwpolicyImplicitLog")
    def fwpolicy_implicit_log(self) -> pulumi.Output[str]:
        """
        Enable/disable implicit firewall policy logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fwpolicy_implicit_log")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="localInAllow")
    def local_in_allow(self) -> pulumi.Output[str]:
        """
        Enable/disable local-in-allow logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_in_allow")

    @property
    @pulumi.getter(name="localInDenyBroadcast")
    def local_in_deny_broadcast(self) -> pulumi.Output[str]:
        """
        Enable/disable local-in-deny-broadcast logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_in_deny_broadcast")

    @property
    @pulumi.getter(name="localInDenyUnicast")
    def local_in_deny_unicast(self) -> pulumi.Output[str]:
        """
        Enable/disable local-in-deny-unicast logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_in_deny_unicast")

    @property
    @pulumi.getter(name="localOut")
    def local_out(self) -> pulumi.Output[str]:
        """
        Enable/disable local-out logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_out")

    @property
    @pulumi.getter(name="localOutIocDetection")
    def local_out_ioc_detection(self) -> pulumi.Output[str]:
        """
        Enable/disable local-out traffic IoC detection. Requires local-out to be enabled. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_out_ioc_detection")

    @property
    @pulumi.getter(name="logInvalidPacket")
    def log_invalid_packet(self) -> pulumi.Output[str]:
        """
        Enable/disable invalid packet traffic logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_invalid_packet")

    @property
    @pulumi.getter(name="logPolicyComment")
    def log_policy_comment(self) -> pulumi.Output[str]:
        """
        Enable/disable inserting policy comments into traffic logs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_policy_comment")

    @property
    @pulumi.getter(name="logPolicyName")
    def log_policy_name(self) -> pulumi.Output[str]:
        """
        Enable/disable inserting policy name into traffic logs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_policy_name")

    @property
    @pulumi.getter(name="logUserInUpper")
    def log_user_in_upper(self) -> pulumi.Output[str]:
        """
        Enable/disable logs with user-in-upper. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_user_in_upper")

    @property
    @pulumi.getter(name="longLiveSessionStat")
    def long_live_session_stat(self) -> pulumi.Output[str]:
        """
        Enable/disable long-live-session statistics logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "long_live_session_stat")

    @property
    @pulumi.getter(name="neighborEvent")
    def neighbor_event(self) -> pulumi.Output[str]:
        """
        Enable/disable neighbor event logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "neighbor_event")

    @property
    @pulumi.getter(name="resolveIp")
    def resolve_ip(self) -> pulumi.Output[str]:
        """
        Enable/disable adding resolved domain names to traffic logs if possible. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "resolve_ip")

    @property
    @pulumi.getter(name="resolvePort")
    def resolve_port(self) -> pulumi.Output[str]:
        """
        Enable/disable adding resolved service names to traffic logs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "resolve_port")

    @property
    @pulumi.getter(name="restApiGet")
    def rest_api_get(self) -> pulumi.Output[str]:
        """
        Enable/disable REST API GET request logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rest_api_get")

    @property
    @pulumi.getter(name="restApiSet")
    def rest_api_set(self) -> pulumi.Output[str]:
        """
        Enable/disable REST API POST/PUT/DELETE request logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rest_api_set")

    @property
    @pulumi.getter(name="syslogOverride")
    def syslog_override(self) -> pulumi.Output[str]:
        """
        Enable/disable override Syslog settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "syslog_override")

    @property
    @pulumi.getter(name="userAnonymize")
    def user_anonymize(self) -> pulumi.Output[str]:
        """
        Enable/disable anonymizing user names in log messages. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "user_anonymize")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

