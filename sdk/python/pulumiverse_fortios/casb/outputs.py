# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ProfileSaasApplication',
    'ProfileSaasApplicationAccessRule',
    'ProfileSaasApplicationCustomControl',
    'ProfileSaasApplicationCustomControlOption',
    'ProfileSaasApplicationCustomControlOptionUserInput',
    'ProfileSaasApplicationDomainControlDomain',
    'ProfileSaasApplicationSafeSearchControl',
    'ProfileSaasApplicationTenantControlTenant',
    'SaasapplicationDomain',
    'UseractivityControlOption',
    'UseractivityControlOptionOperation',
    'UseractivityControlOptionOperationValue',
    'UseractivityMatch',
    'UseractivityMatchRule',
    'UseractivityMatchRuleDomain',
    'UseractivityMatchRuleMethod',
]

@pulumi.output_type
class ProfileSaasApplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessRules":
            suggest = "access_rules"
        elif key == "customControls":
            suggest = "custom_controls"
        elif key == "domainControl":
            suggest = "domain_control"
        elif key == "domainControlDomains":
            suggest = "domain_control_domains"
        elif key == "safeSearch":
            suggest = "safe_search"
        elif key == "safeSearchControls":
            suggest = "safe_search_controls"
        elif key == "tenantControl":
            suggest = "tenant_control"
        elif key == "tenantControlTenants":
            suggest = "tenant_control_tenants"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileSaasApplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileSaasApplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileSaasApplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_rules: Optional[Sequence['outputs.ProfileSaasApplicationAccessRule']] = None,
                 custom_controls: Optional[Sequence['outputs.ProfileSaasApplicationCustomControl']] = None,
                 domain_control: Optional[str] = None,
                 domain_control_domains: Optional[Sequence['outputs.ProfileSaasApplicationDomainControlDomain']] = None,
                 log: Optional[str] = None,
                 name: Optional[str] = None,
                 safe_search: Optional[str] = None,
                 safe_search_controls: Optional[Sequence['outputs.ProfileSaasApplicationSafeSearchControl']] = None,
                 status: Optional[str] = None,
                 tenant_control: Optional[str] = None,
                 tenant_control_tenants: Optional[Sequence['outputs.ProfileSaasApplicationTenantControlTenant']] = None):
        """
        :param Sequence['ProfileSaasApplicationAccessRuleArgs'] access_rules: CASB profile access rule. The structure of `access_rule` block is documented below.
        :param Sequence['ProfileSaasApplicationCustomControlArgs'] custom_controls: CASB profile custom control. The structure of `custom_control` block is documented below.
        :param str domain_control: Enable/disable domain control. Valid values: `enable`, `disable`.
        :param Sequence['ProfileSaasApplicationDomainControlDomainArgs'] domain_control_domains: CASB profile domain control domains. The structure of `domain_control_domains` block is documented below.
        :param str log: Enable/disable log settings. Valid values: `enable`, `disable`.
        :param str name: CASB profile SaaS application name.
        :param str safe_search: Enable/disable safe search. Valid values: `enable`, `disable`.
        :param Sequence['ProfileSaasApplicationSafeSearchControlArgs'] safe_search_controls: CASB profile safe search control. The structure of `safe_search_control` block is documented below.
        :param str status: Enable/disable setting. Valid values: `enable`, `disable`.
        :param str tenant_control: Enable/disable tenant control. Valid values: `enable`, `disable`.
        :param Sequence['ProfileSaasApplicationTenantControlTenantArgs'] tenant_control_tenants: CASB profile tenant control tenants. The structure of `tenant_control_tenants` block is documented below.
        """
        if access_rules is not None:
            pulumi.set(__self__, "access_rules", access_rules)
        if custom_controls is not None:
            pulumi.set(__self__, "custom_controls", custom_controls)
        if domain_control is not None:
            pulumi.set(__self__, "domain_control", domain_control)
        if domain_control_domains is not None:
            pulumi.set(__self__, "domain_control_domains", domain_control_domains)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if safe_search is not None:
            pulumi.set(__self__, "safe_search", safe_search)
        if safe_search_controls is not None:
            pulumi.set(__self__, "safe_search_controls", safe_search_controls)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tenant_control is not None:
            pulumi.set(__self__, "tenant_control", tenant_control)
        if tenant_control_tenants is not None:
            pulumi.set(__self__, "tenant_control_tenants", tenant_control_tenants)

    @property
    @pulumi.getter(name="accessRules")
    def access_rules(self) -> Optional[Sequence['outputs.ProfileSaasApplicationAccessRule']]:
        """
        CASB profile access rule. The structure of `access_rule` block is documented below.
        """
        return pulumi.get(self, "access_rules")

    @property
    @pulumi.getter(name="customControls")
    def custom_controls(self) -> Optional[Sequence['outputs.ProfileSaasApplicationCustomControl']]:
        """
        CASB profile custom control. The structure of `custom_control` block is documented below.
        """
        return pulumi.get(self, "custom_controls")

    @property
    @pulumi.getter(name="domainControl")
    def domain_control(self) -> Optional[str]:
        """
        Enable/disable domain control. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "domain_control")

    @property
    @pulumi.getter(name="domainControlDomains")
    def domain_control_domains(self) -> Optional[Sequence['outputs.ProfileSaasApplicationDomainControlDomain']]:
        """
        CASB profile domain control domains. The structure of `domain_control_domains` block is documented below.
        """
        return pulumi.get(self, "domain_control_domains")

    @property
    @pulumi.getter
    def log(self) -> Optional[str]:
        """
        Enable/disable log settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        CASB profile SaaS application name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="safeSearch")
    def safe_search(self) -> Optional[str]:
        """
        Enable/disable safe search. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "safe_search")

    @property
    @pulumi.getter(name="safeSearchControls")
    def safe_search_controls(self) -> Optional[Sequence['outputs.ProfileSaasApplicationSafeSearchControl']]:
        """
        CASB profile safe search control. The structure of `safe_search_control` block is documented below.
        """
        return pulumi.get(self, "safe_search_controls")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Enable/disable setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tenantControl")
    def tenant_control(self) -> Optional[str]:
        """
        Enable/disable tenant control. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tenant_control")

    @property
    @pulumi.getter(name="tenantControlTenants")
    def tenant_control_tenants(self) -> Optional[Sequence['outputs.ProfileSaasApplicationTenantControlTenant']]:
        """
        CASB profile tenant control tenants. The structure of `tenant_control_tenants` block is documented below.
        """
        return pulumi.get(self, "tenant_control_tenants")


@pulumi.output_type
class ProfileSaasApplicationAccessRule(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 bypass: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str action: CASB access rule action. Valid values: `bypass`, `block`, `monitor`.
        :param str bypass: CASB bypass options. Valid values: `av`, `dlp`, `web-filter`, `file-filter`, `video-filter`.
        :param str name: CASB access rule activity name.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if bypass is not None:
            pulumi.set(__self__, "bypass", bypass)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        CASB access rule action. Valid values: `bypass`, `block`, `monitor`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def bypass(self) -> Optional[str]:
        """
        CASB bypass options. Valid values: `av`, `dlp`, `web-filter`, `file-filter`, `video-filter`.
        """
        return pulumi.get(self, "bypass")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        CASB access rule activity name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileSaasApplicationCustomControl(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 options: Optional[Sequence['outputs.ProfileSaasApplicationCustomControlOption']] = None):
        """
        :param str name: CASB custom control user activity name.
        :param Sequence['ProfileSaasApplicationCustomControlOptionArgs'] options: CASB custom control option. The structure of `option` block is documented below.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        CASB custom control user activity name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence['outputs.ProfileSaasApplicationCustomControlOption']]:
        """
        CASB custom control option. The structure of `option` block is documented below.
        """
        return pulumi.get(self, "options")


@pulumi.output_type
class ProfileSaasApplicationCustomControlOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userInputs":
            suggest = "user_inputs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfileSaasApplicationCustomControlOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfileSaasApplicationCustomControlOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfileSaasApplicationCustomControlOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 user_inputs: Optional[Sequence['outputs.ProfileSaasApplicationCustomControlOptionUserInput']] = None):
        """
        :param str name: CASB custom control option name.
        :param Sequence['ProfileSaasApplicationCustomControlOptionUserInputArgs'] user_inputs: CASB custom control user input. The structure of `user_input` block is documented below.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if user_inputs is not None:
            pulumi.set(__self__, "user_inputs", user_inputs)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        CASB custom control option name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="userInputs")
    def user_inputs(self) -> Optional[Sequence['outputs.ProfileSaasApplicationCustomControlOptionUserInput']]:
        """
        CASB custom control user input. The structure of `user_input` block is documented below.
        """
        return pulumi.get(self, "user_inputs")


@pulumi.output_type
class ProfileSaasApplicationCustomControlOptionUserInput(dict):
    def __init__(__self__, *,
                 value: Optional[str] = None):
        """
        :param str value: user input value.
        """
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        user input value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ProfileSaasApplicationDomainControlDomain(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Domain control domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Domain control domain name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileSaasApplicationSafeSearchControl(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Safe search control name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Safe search control name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ProfileSaasApplicationTenantControlTenant(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: Tenant control tenants name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Tenant control tenants name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SaasapplicationDomain(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None):
        """
        :param str domain: Domain list separated by space.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Domain list separated by space.
        """
        return pulumi.get(self, "domain")


@pulumi.output_type
class UseractivityControlOption(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 operations: Optional[Sequence['outputs.UseractivityControlOptionOperation']] = None,
                 status: Optional[str] = None):
        """
        :param str name: CASB control option name.
        :param Sequence['UseractivityControlOptionOperationArgs'] operations: CASB control option operations. The structure of `operations` block is documented below.
        :param str status: CASB control option status. Valid values: `enable`, `disable`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operations is not None:
            pulumi.set(__self__, "operations", operations)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        CASB control option name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operations(self) -> Optional[Sequence['outputs.UseractivityControlOptionOperation']]:
        """
        CASB control option operations. The structure of `operations` block is documented below.
        """
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        CASB control option status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class UseractivityControlOptionOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caseSensitive":
            suggest = "case_sensitive"
        elif key == "headerName":
            suggest = "header_name"
        elif key == "searchKey":
            suggest = "search_key"
        elif key == "searchPattern":
            suggest = "search_pattern"
        elif key == "valueFromInput":
            suggest = "value_from_input"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UseractivityControlOptionOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UseractivityControlOptionOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UseractivityControlOptionOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 case_sensitive: Optional[str] = None,
                 direction: Optional[str] = None,
                 header_name: Optional[str] = None,
                 name: Optional[str] = None,
                 search_key: Optional[str] = None,
                 search_pattern: Optional[str] = None,
                 target: Optional[str] = None,
                 value_from_input: Optional[str] = None,
                 values: Optional[Sequence['outputs.UseractivityControlOptionOperationValue']] = None):
        """
        :param str action: CASB operation action. Valid values: `append`, `prepend`, `replace`, `new`, `new-on-not-found`, `delete`.
        :param str case_sensitive: CASB operation search case sensitive. Valid values: `enable`, `disable`.
        :param str direction: CASB operation direction. Valid values: `request`.
        :param str header_name: CASB operation header name to search.
        :param str name: CASB control option operation name.
        :param str search_key: CASB operation key to search.
        :param str search_pattern: CASB operation search pattern. Valid values: `simple`, `substr`, `regexp`.
        :param str target: CASB operation target. Valid values: `header`, `path`.
        :param str value_from_input: Enable/disable value from user input. Valid values: `enable`, `disable`.
        :param Sequence['UseractivityControlOptionOperationValueArgs'] values: CASB operation new values. The structure of `values` block is documented below.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if search_key is not None:
            pulumi.set(__self__, "search_key", search_key)
        if search_pattern is not None:
            pulumi.set(__self__, "search_pattern", search_pattern)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if value_from_input is not None:
            pulumi.set(__self__, "value_from_input", value_from_input)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        CASB operation action. Valid values: `append`, `prepend`, `replace`, `new`, `new-on-not-found`, `delete`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[str]:
        """
        CASB operation search case sensitive. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter
    def direction(self) -> Optional[str]:
        """
        CASB operation direction. Valid values: `request`.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        """
        CASB operation header name to search.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        CASB control option operation name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="searchKey")
    def search_key(self) -> Optional[str]:
        """
        CASB operation key to search.
        """
        return pulumi.get(self, "search_key")

    @property
    @pulumi.getter(name="searchPattern")
    def search_pattern(self) -> Optional[str]:
        """
        CASB operation search pattern. Valid values: `simple`, `substr`, `regexp`.
        """
        return pulumi.get(self, "search_pattern")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        CASB operation target. Valid values: `header`, `path`.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="valueFromInput")
    def value_from_input(self) -> Optional[str]:
        """
        Enable/disable value from user input. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "value_from_input")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence['outputs.UseractivityControlOptionOperationValue']]:
        """
        CASB operation new values. The structure of `values` block is documented below.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class UseractivityControlOptionOperationValue(dict):
    def __init__(__self__, *,
                 value: Optional[str] = None):
        """
        :param str value: Operation value.
        """
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Operation value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UseractivityMatch(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 rules: Optional[Sequence['outputs.UseractivityMatchRule']] = None,
                 strategy: Optional[str] = None):
        """
        :param int id: CASB user activity match rules ID.
        :param Sequence['UseractivityMatchRuleArgs'] rules: CASB user activity rules. The structure of `rules` block is documented below.
        :param str strategy: CASB user activity rules strategy. Valid values: `and`, `or`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        CASB user activity match rules ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.UseractivityMatchRule']]:
        """
        CASB user activity rules. The structure of `rules` block is documented below.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def strategy(self) -> Optional[str]:
        """
        CASB user activity rules strategy. Valid values: `and`, `or`.
        """
        return pulumi.get(self, "strategy")


@pulumi.output_type
class UseractivityMatchRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caseSensitive":
            suggest = "case_sensitive"
        elif key == "headerName":
            suggest = "header_name"
        elif key == "matchPattern":
            suggest = "match_pattern"
        elif key == "matchValue":
            suggest = "match_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UseractivityMatchRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UseractivityMatchRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UseractivityMatchRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 case_sensitive: Optional[str] = None,
                 domains: Optional[Sequence['outputs.UseractivityMatchRuleDomain']] = None,
                 header_name: Optional[str] = None,
                 id: Optional[int] = None,
                 match_pattern: Optional[str] = None,
                 match_value: Optional[str] = None,
                 methods: Optional[Sequence['outputs.UseractivityMatchRuleMethod']] = None,
                 negate: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str case_sensitive: CASB user activity match case sensitive. Valid values: `enable`, `disable`.
        :param Sequence['UseractivityMatchRuleDomainArgs'] domains: CASB user activity domain list. The structure of `domains` block is documented below.
        :param str header_name: CASB user activity rule header name.
        :param int id: CASB user activity rule ID.
        :param str match_pattern: CASB user activity rule match pattern. Valid values: `simple`, `substr`, `regexp`.
        :param str match_value: CASB user activity rule match value.
        :param Sequence['UseractivityMatchRuleMethodArgs'] methods: CASB user activity method list. The structure of `methods` block is documented below.
        :param str negate: Enable/disable what the matching strategy must not be. Valid values: `enable`, `disable`.
        :param str type: CASB user activity rule type. Valid values: `domains`, `host`, `path`, `header`, `header-value`, `method`.
        """
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_pattern is not None:
            pulumi.set(__self__, "match_pattern", match_pattern)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[str]:
        """
        CASB user activity match case sensitive. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter
    def domains(self) -> Optional[Sequence['outputs.UseractivityMatchRuleDomain']]:
        """
        CASB user activity domain list. The structure of `domains` block is documented below.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        """
        CASB user activity rule header name.
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        CASB user activity rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchPattern")
    def match_pattern(self) -> Optional[str]:
        """
        CASB user activity rule match pattern. Valid values: `simple`, `substr`, `regexp`.
        """
        return pulumi.get(self, "match_pattern")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        """
        CASB user activity rule match value.
        """
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def methods(self) -> Optional[Sequence['outputs.UseractivityMatchRuleMethod']]:
        """
        CASB user activity method list. The structure of `methods` block is documented below.
        """
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def negate(self) -> Optional[str]:
        """
        Enable/disable what the matching strategy must not be. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "negate")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        CASB user activity rule type. Valid values: `domains`, `host`, `path`, `header`, `header-value`, `method`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class UseractivityMatchRuleDomain(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None):
        """
        :param str domain: Domain list separated by space.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Domain list separated by space.
        """
        return pulumi.get(self, "domain")


@pulumi.output_type
class UseractivityMatchRuleMethod(dict):
    def __init__(__self__, *,
                 method: Optional[str] = None):
        """
        :param str method: User activity method.
        """
        if method is not None:
            pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        """
        User activity method.
        """
        return pulumi.get(self, "method")


