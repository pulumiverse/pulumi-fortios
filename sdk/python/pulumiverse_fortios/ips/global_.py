# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GlobalArgs', 'Global']

@pulumi.input_type
class GlobalArgs:
    def __init__(__self__, *,
                 anomaly_mode: Optional[pulumi.Input[str]] = None,
                 av_mem_limit: Optional[pulumi.Input[int]] = None,
                 cp_accel_mode: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 deep_app_insp_db_limit: Optional[pulumi.Input[int]] = None,
                 deep_app_insp_timeout: Optional[pulumi.Input[int]] = None,
                 engine_count: Optional[pulumi.Input[int]] = None,
                 exclude_signatures: Optional[pulumi.Input[str]] = None,
                 fail_open: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 intelligent_mode: Optional[pulumi.Input[str]] = None,
                 ips_reserve_cpu: Optional[pulumi.Input[str]] = None,
                 ngfw_max_scan_range: Optional[pulumi.Input[int]] = None,
                 np_accel_mode: Optional[pulumi.Input[str]] = None,
                 packet_log_queue_depth: Optional[pulumi.Input[int]] = None,
                 session_limit_mode: Optional[pulumi.Input[str]] = None,
                 skype_client_public_ipaddr: Optional[pulumi.Input[str]] = None,
                 socket_size: Optional[pulumi.Input[int]] = None,
                 sync_session_ttl: Optional[pulumi.Input[str]] = None,
                 tls_active_probe: Optional[pulumi.Input['GlobalTlsActiveProbeArgs']] = None,
                 traffic_submit: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Global resource.
        :param pulumi.Input[str] anomaly_mode: Global blocking mode for rate-based anomalies. Valid values: `periodical`, `continuous`.
        :param pulumi.Input[int] av_mem_limit: Maximum percentage of system memory allowed for use on AV scanning (10 - 50, default = zero). To disable set to zero. When disabled, there is no limit on the AV memory usage.
        :param pulumi.Input[str] cp_accel_mode: IPS Pattern matching acceleration/offloading to CPx processors. Valid values: `none`, `basic`, `advanced`.
        :param pulumi.Input[str] database: Regular or extended IPS database. Regular protects against the latest common and in-the-wild attacks. Extended includes protection from legacy attacks. Valid values: `regular`, `extended`.
        :param pulumi.Input[int] deep_app_insp_db_limit: Limit on number of entries in deep application inspection database (1 - 2147483647, use recommended setting = 0).
        :param pulumi.Input[int] deep_app_insp_timeout: Timeout for Deep application inspection (1 - 2147483647 sec., 0 = use recommended setting).
        :param pulumi.Input[int] engine_count: Number of IPS engines running. If set to the default value of 0, FortiOS sets the number to optimize performance depending on the number of CPU cores.
        :param pulumi.Input[str] exclude_signatures: Excluded signatures.
        :param pulumi.Input[str] fail_open: Enable to allow traffic if the IPS process crashes. Default is disable and IPS traffic is blocked when the IPS process crashes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] intelligent_mode: Enable/disable IPS adaptive scanning (intelligent mode). Intelligent mode optimizes the scanning method for the type of traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_reserve_cpu: Enable/disable IPS daemon's use of CPUs other than CPU 0 Valid values: `disable`, `enable`.
        :param pulumi.Input[int] ngfw_max_scan_range: NGFW policy-mode app detection threshold.
        :param pulumi.Input[str] np_accel_mode: Acceleration mode for IPS processing by NPx processors. Valid values: `none`, `basic`.
        :param pulumi.Input[int] packet_log_queue_depth: Packet/pcap log queue depth per IPS engine.
        :param pulumi.Input[str] session_limit_mode: Method of counting concurrent sessions used by session limit anomalies. Choose between greater accuracy (accurate) or improved performance (heuristics). Valid values: `accurate`, `heuristic`.
        :param pulumi.Input[str] skype_client_public_ipaddr: Public IP addresses of your network that receive Skype sessions. Helps identify Skype sessions. Separate IP addresses with commas.
        :param pulumi.Input[int] socket_size: IPS socket buffer size. Max and default value depend on available memory. Can be changed to tune performance.
        :param pulumi.Input[str] sync_session_ttl: Enable/disable use of kernel session TTL for IPS sessions. Valid values: `enable`, `disable`.
        :param pulumi.Input['GlobalTlsActiveProbeArgs'] tls_active_probe: TLS active probe configuration. The structure of `tls_active_probe` block is documented below.
        :param pulumi.Input[str] traffic_submit: Enable/disable submitting attack data found by this FortiGate to FortiGuard. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if anomaly_mode is not None:
            pulumi.set(__self__, "anomaly_mode", anomaly_mode)
        if av_mem_limit is not None:
            pulumi.set(__self__, "av_mem_limit", av_mem_limit)
        if cp_accel_mode is not None:
            pulumi.set(__self__, "cp_accel_mode", cp_accel_mode)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if deep_app_insp_db_limit is not None:
            pulumi.set(__self__, "deep_app_insp_db_limit", deep_app_insp_db_limit)
        if deep_app_insp_timeout is not None:
            pulumi.set(__self__, "deep_app_insp_timeout", deep_app_insp_timeout)
        if engine_count is not None:
            pulumi.set(__self__, "engine_count", engine_count)
        if exclude_signatures is not None:
            pulumi.set(__self__, "exclude_signatures", exclude_signatures)
        if fail_open is not None:
            pulumi.set(__self__, "fail_open", fail_open)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if intelligent_mode is not None:
            pulumi.set(__self__, "intelligent_mode", intelligent_mode)
        if ips_reserve_cpu is not None:
            pulumi.set(__self__, "ips_reserve_cpu", ips_reserve_cpu)
        if ngfw_max_scan_range is not None:
            pulumi.set(__self__, "ngfw_max_scan_range", ngfw_max_scan_range)
        if np_accel_mode is not None:
            pulumi.set(__self__, "np_accel_mode", np_accel_mode)
        if packet_log_queue_depth is not None:
            pulumi.set(__self__, "packet_log_queue_depth", packet_log_queue_depth)
        if session_limit_mode is not None:
            pulumi.set(__self__, "session_limit_mode", session_limit_mode)
        if skype_client_public_ipaddr is not None:
            pulumi.set(__self__, "skype_client_public_ipaddr", skype_client_public_ipaddr)
        if socket_size is not None:
            pulumi.set(__self__, "socket_size", socket_size)
        if sync_session_ttl is not None:
            pulumi.set(__self__, "sync_session_ttl", sync_session_ttl)
        if tls_active_probe is not None:
            pulumi.set(__self__, "tls_active_probe", tls_active_probe)
        if traffic_submit is not None:
            pulumi.set(__self__, "traffic_submit", traffic_submit)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="anomalyMode")
    def anomaly_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Global blocking mode for rate-based anomalies. Valid values: `periodical`, `continuous`.
        """
        return pulumi.get(self, "anomaly_mode")

    @anomaly_mode.setter
    def anomaly_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anomaly_mode", value)

    @property
    @pulumi.getter(name="avMemLimit")
    def av_mem_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum percentage of system memory allowed for use on AV scanning (10 - 50, default = zero). To disable set to zero. When disabled, there is no limit on the AV memory usage.
        """
        return pulumi.get(self, "av_mem_limit")

    @av_mem_limit.setter
    def av_mem_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "av_mem_limit", value)

    @property
    @pulumi.getter(name="cpAccelMode")
    def cp_accel_mode(self) -> Optional[pulumi.Input[str]]:
        """
        IPS Pattern matching acceleration/offloading to CPx processors. Valid values: `none`, `basic`, `advanced`.
        """
        return pulumi.get(self, "cp_accel_mode")

    @cp_accel_mode.setter
    def cp_accel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cp_accel_mode", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Regular or extended IPS database. Regular protects against the latest common and in-the-wild attacks. Extended includes protection from legacy attacks. Valid values: `regular`, `extended`.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="deepAppInspDbLimit")
    def deep_app_insp_db_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Limit on number of entries in deep application inspection database (1 - 2147483647, use recommended setting = 0).
        """
        return pulumi.get(self, "deep_app_insp_db_limit")

    @deep_app_insp_db_limit.setter
    def deep_app_insp_db_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deep_app_insp_db_limit", value)

    @property
    @pulumi.getter(name="deepAppInspTimeout")
    def deep_app_insp_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for Deep application inspection (1 - 2147483647 sec., 0 = use recommended setting).
        """
        return pulumi.get(self, "deep_app_insp_timeout")

    @deep_app_insp_timeout.setter
    def deep_app_insp_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deep_app_insp_timeout", value)

    @property
    @pulumi.getter(name="engineCount")
    def engine_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of IPS engines running. If set to the default value of 0, FortiOS sets the number to optimize performance depending on the number of CPU cores.
        """
        return pulumi.get(self, "engine_count")

    @engine_count.setter
    def engine_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "engine_count", value)

    @property
    @pulumi.getter(name="excludeSignatures")
    def exclude_signatures(self) -> Optional[pulumi.Input[str]]:
        """
        Excluded signatures.
        """
        return pulumi.get(self, "exclude_signatures")

    @exclude_signatures.setter
    def exclude_signatures(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_signatures", value)

    @property
    @pulumi.getter(name="failOpen")
    def fail_open(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to allow traffic if the IPS process crashes. Default is disable and IPS traffic is blocked when the IPS process crashes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fail_open")

    @fail_open.setter
    def fail_open(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_open", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="intelligentMode")
    def intelligent_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS adaptive scanning (intelligent mode). Intelligent mode optimizes the scanning method for the type of traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "intelligent_mode")

    @intelligent_mode.setter
    def intelligent_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intelligent_mode", value)

    @property
    @pulumi.getter(name="ipsReserveCpu")
    def ips_reserve_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS daemon's use of CPUs other than CPU 0 Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ips_reserve_cpu")

    @ips_reserve_cpu.setter
    def ips_reserve_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_reserve_cpu", value)

    @property
    @pulumi.getter(name="ngfwMaxScanRange")
    def ngfw_max_scan_range(self) -> Optional[pulumi.Input[int]]:
        """
        NGFW policy-mode app detection threshold.
        """
        return pulumi.get(self, "ngfw_max_scan_range")

    @ngfw_max_scan_range.setter
    def ngfw_max_scan_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ngfw_max_scan_range", value)

    @property
    @pulumi.getter(name="npAccelMode")
    def np_accel_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Acceleration mode for IPS processing by NPx processors. Valid values: `none`, `basic`.
        """
        return pulumi.get(self, "np_accel_mode")

    @np_accel_mode.setter
    def np_accel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "np_accel_mode", value)

    @property
    @pulumi.getter(name="packetLogQueueDepth")
    def packet_log_queue_depth(self) -> Optional[pulumi.Input[int]]:
        """
        Packet/pcap log queue depth per IPS engine.
        """
        return pulumi.get(self, "packet_log_queue_depth")

    @packet_log_queue_depth.setter
    def packet_log_queue_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_log_queue_depth", value)

    @property
    @pulumi.getter(name="sessionLimitMode")
    def session_limit_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Method of counting concurrent sessions used by session limit anomalies. Choose between greater accuracy (accurate) or improved performance (heuristics). Valid values: `accurate`, `heuristic`.
        """
        return pulumi.get(self, "session_limit_mode")

    @session_limit_mode.setter
    def session_limit_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_limit_mode", value)

    @property
    @pulumi.getter(name="skypeClientPublicIpaddr")
    def skype_client_public_ipaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Public IP addresses of your network that receive Skype sessions. Helps identify Skype sessions. Separate IP addresses with commas.
        """
        return pulumi.get(self, "skype_client_public_ipaddr")

    @skype_client_public_ipaddr.setter
    def skype_client_public_ipaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skype_client_public_ipaddr", value)

    @property
    @pulumi.getter(name="socketSize")
    def socket_size(self) -> Optional[pulumi.Input[int]]:
        """
        IPS socket buffer size. Max and default value depend on available memory. Can be changed to tune performance.
        """
        return pulumi.get(self, "socket_size")

    @socket_size.setter
    def socket_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "socket_size", value)

    @property
    @pulumi.getter(name="syncSessionTtl")
    def sync_session_ttl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of kernel session TTL for IPS sessions. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sync_session_ttl")

    @sync_session_ttl.setter
    def sync_session_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_session_ttl", value)

    @property
    @pulumi.getter(name="tlsActiveProbe")
    def tls_active_probe(self) -> Optional[pulumi.Input['GlobalTlsActiveProbeArgs']]:
        """
        TLS active probe configuration. The structure of `tls_active_probe` block is documented below.
        """
        return pulumi.get(self, "tls_active_probe")

    @tls_active_probe.setter
    def tls_active_probe(self, value: Optional[pulumi.Input['GlobalTlsActiveProbeArgs']]):
        pulumi.set(self, "tls_active_probe", value)

    @property
    @pulumi.getter(name="trafficSubmit")
    def traffic_submit(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable submitting attack data found by this FortiGate to FortiGuard. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "traffic_submit")

    @traffic_submit.setter
    def traffic_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_submit", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _GlobalState:
    def __init__(__self__, *,
                 anomaly_mode: Optional[pulumi.Input[str]] = None,
                 av_mem_limit: Optional[pulumi.Input[int]] = None,
                 cp_accel_mode: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 deep_app_insp_db_limit: Optional[pulumi.Input[int]] = None,
                 deep_app_insp_timeout: Optional[pulumi.Input[int]] = None,
                 engine_count: Optional[pulumi.Input[int]] = None,
                 exclude_signatures: Optional[pulumi.Input[str]] = None,
                 fail_open: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 intelligent_mode: Optional[pulumi.Input[str]] = None,
                 ips_reserve_cpu: Optional[pulumi.Input[str]] = None,
                 ngfw_max_scan_range: Optional[pulumi.Input[int]] = None,
                 np_accel_mode: Optional[pulumi.Input[str]] = None,
                 packet_log_queue_depth: Optional[pulumi.Input[int]] = None,
                 session_limit_mode: Optional[pulumi.Input[str]] = None,
                 skype_client_public_ipaddr: Optional[pulumi.Input[str]] = None,
                 socket_size: Optional[pulumi.Input[int]] = None,
                 sync_session_ttl: Optional[pulumi.Input[str]] = None,
                 tls_active_probe: Optional[pulumi.Input['GlobalTlsActiveProbeArgs']] = None,
                 traffic_submit: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Global resources.
        :param pulumi.Input[str] anomaly_mode: Global blocking mode for rate-based anomalies. Valid values: `periodical`, `continuous`.
        :param pulumi.Input[int] av_mem_limit: Maximum percentage of system memory allowed for use on AV scanning (10 - 50, default = zero). To disable set to zero. When disabled, there is no limit on the AV memory usage.
        :param pulumi.Input[str] cp_accel_mode: IPS Pattern matching acceleration/offloading to CPx processors. Valid values: `none`, `basic`, `advanced`.
        :param pulumi.Input[str] database: Regular or extended IPS database. Regular protects against the latest common and in-the-wild attacks. Extended includes protection from legacy attacks. Valid values: `regular`, `extended`.
        :param pulumi.Input[int] deep_app_insp_db_limit: Limit on number of entries in deep application inspection database (1 - 2147483647, use recommended setting = 0).
        :param pulumi.Input[int] deep_app_insp_timeout: Timeout for Deep application inspection (1 - 2147483647 sec., 0 = use recommended setting).
        :param pulumi.Input[int] engine_count: Number of IPS engines running. If set to the default value of 0, FortiOS sets the number to optimize performance depending on the number of CPU cores.
        :param pulumi.Input[str] exclude_signatures: Excluded signatures.
        :param pulumi.Input[str] fail_open: Enable to allow traffic if the IPS process crashes. Default is disable and IPS traffic is blocked when the IPS process crashes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] intelligent_mode: Enable/disable IPS adaptive scanning (intelligent mode). Intelligent mode optimizes the scanning method for the type of traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_reserve_cpu: Enable/disable IPS daemon's use of CPUs other than CPU 0 Valid values: `disable`, `enable`.
        :param pulumi.Input[int] ngfw_max_scan_range: NGFW policy-mode app detection threshold.
        :param pulumi.Input[str] np_accel_mode: Acceleration mode for IPS processing by NPx processors. Valid values: `none`, `basic`.
        :param pulumi.Input[int] packet_log_queue_depth: Packet/pcap log queue depth per IPS engine.
        :param pulumi.Input[str] session_limit_mode: Method of counting concurrent sessions used by session limit anomalies. Choose between greater accuracy (accurate) or improved performance (heuristics). Valid values: `accurate`, `heuristic`.
        :param pulumi.Input[str] skype_client_public_ipaddr: Public IP addresses of your network that receive Skype sessions. Helps identify Skype sessions. Separate IP addresses with commas.
        :param pulumi.Input[int] socket_size: IPS socket buffer size. Max and default value depend on available memory. Can be changed to tune performance.
        :param pulumi.Input[str] sync_session_ttl: Enable/disable use of kernel session TTL for IPS sessions. Valid values: `enable`, `disable`.
        :param pulumi.Input['GlobalTlsActiveProbeArgs'] tls_active_probe: TLS active probe configuration. The structure of `tls_active_probe` block is documented below.
        :param pulumi.Input[str] traffic_submit: Enable/disable submitting attack data found by this FortiGate to FortiGuard. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if anomaly_mode is not None:
            pulumi.set(__self__, "anomaly_mode", anomaly_mode)
        if av_mem_limit is not None:
            pulumi.set(__self__, "av_mem_limit", av_mem_limit)
        if cp_accel_mode is not None:
            pulumi.set(__self__, "cp_accel_mode", cp_accel_mode)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if deep_app_insp_db_limit is not None:
            pulumi.set(__self__, "deep_app_insp_db_limit", deep_app_insp_db_limit)
        if deep_app_insp_timeout is not None:
            pulumi.set(__self__, "deep_app_insp_timeout", deep_app_insp_timeout)
        if engine_count is not None:
            pulumi.set(__self__, "engine_count", engine_count)
        if exclude_signatures is not None:
            pulumi.set(__self__, "exclude_signatures", exclude_signatures)
        if fail_open is not None:
            pulumi.set(__self__, "fail_open", fail_open)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if intelligent_mode is not None:
            pulumi.set(__self__, "intelligent_mode", intelligent_mode)
        if ips_reserve_cpu is not None:
            pulumi.set(__self__, "ips_reserve_cpu", ips_reserve_cpu)
        if ngfw_max_scan_range is not None:
            pulumi.set(__self__, "ngfw_max_scan_range", ngfw_max_scan_range)
        if np_accel_mode is not None:
            pulumi.set(__self__, "np_accel_mode", np_accel_mode)
        if packet_log_queue_depth is not None:
            pulumi.set(__self__, "packet_log_queue_depth", packet_log_queue_depth)
        if session_limit_mode is not None:
            pulumi.set(__self__, "session_limit_mode", session_limit_mode)
        if skype_client_public_ipaddr is not None:
            pulumi.set(__self__, "skype_client_public_ipaddr", skype_client_public_ipaddr)
        if socket_size is not None:
            pulumi.set(__self__, "socket_size", socket_size)
        if sync_session_ttl is not None:
            pulumi.set(__self__, "sync_session_ttl", sync_session_ttl)
        if tls_active_probe is not None:
            pulumi.set(__self__, "tls_active_probe", tls_active_probe)
        if traffic_submit is not None:
            pulumi.set(__self__, "traffic_submit", traffic_submit)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="anomalyMode")
    def anomaly_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Global blocking mode for rate-based anomalies. Valid values: `periodical`, `continuous`.
        """
        return pulumi.get(self, "anomaly_mode")

    @anomaly_mode.setter
    def anomaly_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anomaly_mode", value)

    @property
    @pulumi.getter(name="avMemLimit")
    def av_mem_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum percentage of system memory allowed for use on AV scanning (10 - 50, default = zero). To disable set to zero. When disabled, there is no limit on the AV memory usage.
        """
        return pulumi.get(self, "av_mem_limit")

    @av_mem_limit.setter
    def av_mem_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "av_mem_limit", value)

    @property
    @pulumi.getter(name="cpAccelMode")
    def cp_accel_mode(self) -> Optional[pulumi.Input[str]]:
        """
        IPS Pattern matching acceleration/offloading to CPx processors. Valid values: `none`, `basic`, `advanced`.
        """
        return pulumi.get(self, "cp_accel_mode")

    @cp_accel_mode.setter
    def cp_accel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cp_accel_mode", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Regular or extended IPS database. Regular protects against the latest common and in-the-wild attacks. Extended includes protection from legacy attacks. Valid values: `regular`, `extended`.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="deepAppInspDbLimit")
    def deep_app_insp_db_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Limit on number of entries in deep application inspection database (1 - 2147483647, use recommended setting = 0).
        """
        return pulumi.get(self, "deep_app_insp_db_limit")

    @deep_app_insp_db_limit.setter
    def deep_app_insp_db_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deep_app_insp_db_limit", value)

    @property
    @pulumi.getter(name="deepAppInspTimeout")
    def deep_app_insp_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for Deep application inspection (1 - 2147483647 sec., 0 = use recommended setting).
        """
        return pulumi.get(self, "deep_app_insp_timeout")

    @deep_app_insp_timeout.setter
    def deep_app_insp_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deep_app_insp_timeout", value)

    @property
    @pulumi.getter(name="engineCount")
    def engine_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of IPS engines running. If set to the default value of 0, FortiOS sets the number to optimize performance depending on the number of CPU cores.
        """
        return pulumi.get(self, "engine_count")

    @engine_count.setter
    def engine_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "engine_count", value)

    @property
    @pulumi.getter(name="excludeSignatures")
    def exclude_signatures(self) -> Optional[pulumi.Input[str]]:
        """
        Excluded signatures.
        """
        return pulumi.get(self, "exclude_signatures")

    @exclude_signatures.setter
    def exclude_signatures(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_signatures", value)

    @property
    @pulumi.getter(name="failOpen")
    def fail_open(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to allow traffic if the IPS process crashes. Default is disable and IPS traffic is blocked when the IPS process crashes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fail_open")

    @fail_open.setter
    def fail_open(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_open", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter(name="intelligentMode")
    def intelligent_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS adaptive scanning (intelligent mode). Intelligent mode optimizes the scanning method for the type of traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "intelligent_mode")

    @intelligent_mode.setter
    def intelligent_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intelligent_mode", value)

    @property
    @pulumi.getter(name="ipsReserveCpu")
    def ips_reserve_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPS daemon's use of CPUs other than CPU 0 Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ips_reserve_cpu")

    @ips_reserve_cpu.setter
    def ips_reserve_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_reserve_cpu", value)

    @property
    @pulumi.getter(name="ngfwMaxScanRange")
    def ngfw_max_scan_range(self) -> Optional[pulumi.Input[int]]:
        """
        NGFW policy-mode app detection threshold.
        """
        return pulumi.get(self, "ngfw_max_scan_range")

    @ngfw_max_scan_range.setter
    def ngfw_max_scan_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ngfw_max_scan_range", value)

    @property
    @pulumi.getter(name="npAccelMode")
    def np_accel_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Acceleration mode for IPS processing by NPx processors. Valid values: `none`, `basic`.
        """
        return pulumi.get(self, "np_accel_mode")

    @np_accel_mode.setter
    def np_accel_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "np_accel_mode", value)

    @property
    @pulumi.getter(name="packetLogQueueDepth")
    def packet_log_queue_depth(self) -> Optional[pulumi.Input[int]]:
        """
        Packet/pcap log queue depth per IPS engine.
        """
        return pulumi.get(self, "packet_log_queue_depth")

    @packet_log_queue_depth.setter
    def packet_log_queue_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_log_queue_depth", value)

    @property
    @pulumi.getter(name="sessionLimitMode")
    def session_limit_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Method of counting concurrent sessions used by session limit anomalies. Choose between greater accuracy (accurate) or improved performance (heuristics). Valid values: `accurate`, `heuristic`.
        """
        return pulumi.get(self, "session_limit_mode")

    @session_limit_mode.setter
    def session_limit_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_limit_mode", value)

    @property
    @pulumi.getter(name="skypeClientPublicIpaddr")
    def skype_client_public_ipaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Public IP addresses of your network that receive Skype sessions. Helps identify Skype sessions. Separate IP addresses with commas.
        """
        return pulumi.get(self, "skype_client_public_ipaddr")

    @skype_client_public_ipaddr.setter
    def skype_client_public_ipaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skype_client_public_ipaddr", value)

    @property
    @pulumi.getter(name="socketSize")
    def socket_size(self) -> Optional[pulumi.Input[int]]:
        """
        IPS socket buffer size. Max and default value depend on available memory. Can be changed to tune performance.
        """
        return pulumi.get(self, "socket_size")

    @socket_size.setter
    def socket_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "socket_size", value)

    @property
    @pulumi.getter(name="syncSessionTtl")
    def sync_session_ttl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of kernel session TTL for IPS sessions. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sync_session_ttl")

    @sync_session_ttl.setter
    def sync_session_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_session_ttl", value)

    @property
    @pulumi.getter(name="tlsActiveProbe")
    def tls_active_probe(self) -> Optional[pulumi.Input['GlobalTlsActiveProbeArgs']]:
        """
        TLS active probe configuration. The structure of `tls_active_probe` block is documented below.
        """
        return pulumi.get(self, "tls_active_probe")

    @tls_active_probe.setter
    def tls_active_probe(self, value: Optional[pulumi.Input['GlobalTlsActiveProbeArgs']]):
        pulumi.set(self, "tls_active_probe", value)

    @property
    @pulumi.getter(name="trafficSubmit")
    def traffic_submit(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable submitting attack data found by this FortiGate to FortiGuard. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "traffic_submit")

    @traffic_submit.setter
    def traffic_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "traffic_submit", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Global(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anomaly_mode: Optional[pulumi.Input[str]] = None,
                 av_mem_limit: Optional[pulumi.Input[int]] = None,
                 cp_accel_mode: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 deep_app_insp_db_limit: Optional[pulumi.Input[int]] = None,
                 deep_app_insp_timeout: Optional[pulumi.Input[int]] = None,
                 engine_count: Optional[pulumi.Input[int]] = None,
                 exclude_signatures: Optional[pulumi.Input[str]] = None,
                 fail_open: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 intelligent_mode: Optional[pulumi.Input[str]] = None,
                 ips_reserve_cpu: Optional[pulumi.Input[str]] = None,
                 ngfw_max_scan_range: Optional[pulumi.Input[int]] = None,
                 np_accel_mode: Optional[pulumi.Input[str]] = None,
                 packet_log_queue_depth: Optional[pulumi.Input[int]] = None,
                 session_limit_mode: Optional[pulumi.Input[str]] = None,
                 skype_client_public_ipaddr: Optional[pulumi.Input[str]] = None,
                 socket_size: Optional[pulumi.Input[int]] = None,
                 sync_session_ttl: Optional[pulumi.Input[str]] = None,
                 tls_active_probe: Optional[pulumi.Input[pulumi.InputType['GlobalTlsActiveProbeArgs']]] = None,
                 traffic_submit: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure IPS global parameter.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.ips.Global("trname",
            anomaly_mode="continuous",
            database="regular",
            deep_app_insp_db_limit=0,
            deep_app_insp_timeout=0,
            engine_count=0,
            exclude_signatures="industrial",
            fail_open="disable",
            intelligent_mode="enable",
            session_limit_mode="heuristic",
            socket_size=0,
            sync_session_ttl="enable",
            traffic_submit="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Ips Global can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:ips/global:Global labelname IpsGlobal
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:ips/global:Global labelname IpsGlobal
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] anomaly_mode: Global blocking mode for rate-based anomalies. Valid values: `periodical`, `continuous`.
        :param pulumi.Input[int] av_mem_limit: Maximum percentage of system memory allowed for use on AV scanning (10 - 50, default = zero). To disable set to zero. When disabled, there is no limit on the AV memory usage.
        :param pulumi.Input[str] cp_accel_mode: IPS Pattern matching acceleration/offloading to CPx processors. Valid values: `none`, `basic`, `advanced`.
        :param pulumi.Input[str] database: Regular or extended IPS database. Regular protects against the latest common and in-the-wild attacks. Extended includes protection from legacy attacks. Valid values: `regular`, `extended`.
        :param pulumi.Input[int] deep_app_insp_db_limit: Limit on number of entries in deep application inspection database (1 - 2147483647, use recommended setting = 0).
        :param pulumi.Input[int] deep_app_insp_timeout: Timeout for Deep application inspection (1 - 2147483647 sec., 0 = use recommended setting).
        :param pulumi.Input[int] engine_count: Number of IPS engines running. If set to the default value of 0, FortiOS sets the number to optimize performance depending on the number of CPU cores.
        :param pulumi.Input[str] exclude_signatures: Excluded signatures.
        :param pulumi.Input[str] fail_open: Enable to allow traffic if the IPS process crashes. Default is disable and IPS traffic is blocked when the IPS process crashes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] intelligent_mode: Enable/disable IPS adaptive scanning (intelligent mode). Intelligent mode optimizes the scanning method for the type of traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_reserve_cpu: Enable/disable IPS daemon's use of CPUs other than CPU 0 Valid values: `disable`, `enable`.
        :param pulumi.Input[int] ngfw_max_scan_range: NGFW policy-mode app detection threshold.
        :param pulumi.Input[str] np_accel_mode: Acceleration mode for IPS processing by NPx processors. Valid values: `none`, `basic`.
        :param pulumi.Input[int] packet_log_queue_depth: Packet/pcap log queue depth per IPS engine.
        :param pulumi.Input[str] session_limit_mode: Method of counting concurrent sessions used by session limit anomalies. Choose between greater accuracy (accurate) or improved performance (heuristics). Valid values: `accurate`, `heuristic`.
        :param pulumi.Input[str] skype_client_public_ipaddr: Public IP addresses of your network that receive Skype sessions. Helps identify Skype sessions. Separate IP addresses with commas.
        :param pulumi.Input[int] socket_size: IPS socket buffer size. Max and default value depend on available memory. Can be changed to tune performance.
        :param pulumi.Input[str] sync_session_ttl: Enable/disable use of kernel session TTL for IPS sessions. Valid values: `enable`, `disable`.
        :param pulumi.Input[pulumi.InputType['GlobalTlsActiveProbeArgs']] tls_active_probe: TLS active probe configuration. The structure of `tls_active_probe` block is documented below.
        :param pulumi.Input[str] traffic_submit: Enable/disable submitting attack data found by this FortiGate to FortiGuard. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[GlobalArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure IPS global parameter.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.ips.Global("trname",
            anomaly_mode="continuous",
            database="regular",
            deep_app_insp_db_limit=0,
            deep_app_insp_timeout=0,
            engine_count=0,
            exclude_signatures="industrial",
            fail_open="disable",
            intelligent_mode="enable",
            session_limit_mode="heuristic",
            socket_size=0,
            sync_session_ttl="enable",
            traffic_submit="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Ips Global can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:ips/global:Global labelname IpsGlobal
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:ips/global:Global labelname IpsGlobal
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param GlobalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GlobalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anomaly_mode: Optional[pulumi.Input[str]] = None,
                 av_mem_limit: Optional[pulumi.Input[int]] = None,
                 cp_accel_mode: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 deep_app_insp_db_limit: Optional[pulumi.Input[int]] = None,
                 deep_app_insp_timeout: Optional[pulumi.Input[int]] = None,
                 engine_count: Optional[pulumi.Input[int]] = None,
                 exclude_signatures: Optional[pulumi.Input[str]] = None,
                 fail_open: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 intelligent_mode: Optional[pulumi.Input[str]] = None,
                 ips_reserve_cpu: Optional[pulumi.Input[str]] = None,
                 ngfw_max_scan_range: Optional[pulumi.Input[int]] = None,
                 np_accel_mode: Optional[pulumi.Input[str]] = None,
                 packet_log_queue_depth: Optional[pulumi.Input[int]] = None,
                 session_limit_mode: Optional[pulumi.Input[str]] = None,
                 skype_client_public_ipaddr: Optional[pulumi.Input[str]] = None,
                 socket_size: Optional[pulumi.Input[int]] = None,
                 sync_session_ttl: Optional[pulumi.Input[str]] = None,
                 tls_active_probe: Optional[pulumi.Input[pulumi.InputType['GlobalTlsActiveProbeArgs']]] = None,
                 traffic_submit: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GlobalArgs.__new__(GlobalArgs)

            __props__.__dict__["anomaly_mode"] = anomaly_mode
            __props__.__dict__["av_mem_limit"] = av_mem_limit
            __props__.__dict__["cp_accel_mode"] = cp_accel_mode
            __props__.__dict__["database"] = database
            __props__.__dict__["deep_app_insp_db_limit"] = deep_app_insp_db_limit
            __props__.__dict__["deep_app_insp_timeout"] = deep_app_insp_timeout
            __props__.__dict__["engine_count"] = engine_count
            __props__.__dict__["exclude_signatures"] = exclude_signatures
            __props__.__dict__["fail_open"] = fail_open
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["intelligent_mode"] = intelligent_mode
            __props__.__dict__["ips_reserve_cpu"] = ips_reserve_cpu
            __props__.__dict__["ngfw_max_scan_range"] = ngfw_max_scan_range
            __props__.__dict__["np_accel_mode"] = np_accel_mode
            __props__.__dict__["packet_log_queue_depth"] = packet_log_queue_depth
            __props__.__dict__["session_limit_mode"] = session_limit_mode
            __props__.__dict__["skype_client_public_ipaddr"] = skype_client_public_ipaddr
            __props__.__dict__["socket_size"] = socket_size
            __props__.__dict__["sync_session_ttl"] = sync_session_ttl
            __props__.__dict__["tls_active_probe"] = tls_active_probe
            __props__.__dict__["traffic_submit"] = traffic_submit
            __props__.__dict__["vdomparam"] = vdomparam
        super(Global, __self__).__init__(
            'fortios:ips/global:Global',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            anomaly_mode: Optional[pulumi.Input[str]] = None,
            av_mem_limit: Optional[pulumi.Input[int]] = None,
            cp_accel_mode: Optional[pulumi.Input[str]] = None,
            database: Optional[pulumi.Input[str]] = None,
            deep_app_insp_db_limit: Optional[pulumi.Input[int]] = None,
            deep_app_insp_timeout: Optional[pulumi.Input[int]] = None,
            engine_count: Optional[pulumi.Input[int]] = None,
            exclude_signatures: Optional[pulumi.Input[str]] = None,
            fail_open: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            intelligent_mode: Optional[pulumi.Input[str]] = None,
            ips_reserve_cpu: Optional[pulumi.Input[str]] = None,
            ngfw_max_scan_range: Optional[pulumi.Input[int]] = None,
            np_accel_mode: Optional[pulumi.Input[str]] = None,
            packet_log_queue_depth: Optional[pulumi.Input[int]] = None,
            session_limit_mode: Optional[pulumi.Input[str]] = None,
            skype_client_public_ipaddr: Optional[pulumi.Input[str]] = None,
            socket_size: Optional[pulumi.Input[int]] = None,
            sync_session_ttl: Optional[pulumi.Input[str]] = None,
            tls_active_probe: Optional[pulumi.Input[pulumi.InputType['GlobalTlsActiveProbeArgs']]] = None,
            traffic_submit: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Global':
        """
        Get an existing Global resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] anomaly_mode: Global blocking mode for rate-based anomalies. Valid values: `periodical`, `continuous`.
        :param pulumi.Input[int] av_mem_limit: Maximum percentage of system memory allowed for use on AV scanning (10 - 50, default = zero). To disable set to zero. When disabled, there is no limit on the AV memory usage.
        :param pulumi.Input[str] cp_accel_mode: IPS Pattern matching acceleration/offloading to CPx processors. Valid values: `none`, `basic`, `advanced`.
        :param pulumi.Input[str] database: Regular or extended IPS database. Regular protects against the latest common and in-the-wild attacks. Extended includes protection from legacy attacks. Valid values: `regular`, `extended`.
        :param pulumi.Input[int] deep_app_insp_db_limit: Limit on number of entries in deep application inspection database (1 - 2147483647, use recommended setting = 0).
        :param pulumi.Input[int] deep_app_insp_timeout: Timeout for Deep application inspection (1 - 2147483647 sec., 0 = use recommended setting).
        :param pulumi.Input[int] engine_count: Number of IPS engines running. If set to the default value of 0, FortiOS sets the number to optimize performance depending on the number of CPU cores.
        :param pulumi.Input[str] exclude_signatures: Excluded signatures.
        :param pulumi.Input[str] fail_open: Enable to allow traffic if the IPS process crashes. Default is disable and IPS traffic is blocked when the IPS process crashes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] intelligent_mode: Enable/disable IPS adaptive scanning (intelligent mode). Intelligent mode optimizes the scanning method for the type of traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ips_reserve_cpu: Enable/disable IPS daemon's use of CPUs other than CPU 0 Valid values: `disable`, `enable`.
        :param pulumi.Input[int] ngfw_max_scan_range: NGFW policy-mode app detection threshold.
        :param pulumi.Input[str] np_accel_mode: Acceleration mode for IPS processing by NPx processors. Valid values: `none`, `basic`.
        :param pulumi.Input[int] packet_log_queue_depth: Packet/pcap log queue depth per IPS engine.
        :param pulumi.Input[str] session_limit_mode: Method of counting concurrent sessions used by session limit anomalies. Choose between greater accuracy (accurate) or improved performance (heuristics). Valid values: `accurate`, `heuristic`.
        :param pulumi.Input[str] skype_client_public_ipaddr: Public IP addresses of your network that receive Skype sessions. Helps identify Skype sessions. Separate IP addresses with commas.
        :param pulumi.Input[int] socket_size: IPS socket buffer size. Max and default value depend on available memory. Can be changed to tune performance.
        :param pulumi.Input[str] sync_session_ttl: Enable/disable use of kernel session TTL for IPS sessions. Valid values: `enable`, `disable`.
        :param pulumi.Input[pulumi.InputType['GlobalTlsActiveProbeArgs']] tls_active_probe: TLS active probe configuration. The structure of `tls_active_probe` block is documented below.
        :param pulumi.Input[str] traffic_submit: Enable/disable submitting attack data found by this FortiGate to FortiGuard. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GlobalState.__new__(_GlobalState)

        __props__.__dict__["anomaly_mode"] = anomaly_mode
        __props__.__dict__["av_mem_limit"] = av_mem_limit
        __props__.__dict__["cp_accel_mode"] = cp_accel_mode
        __props__.__dict__["database"] = database
        __props__.__dict__["deep_app_insp_db_limit"] = deep_app_insp_db_limit
        __props__.__dict__["deep_app_insp_timeout"] = deep_app_insp_timeout
        __props__.__dict__["engine_count"] = engine_count
        __props__.__dict__["exclude_signatures"] = exclude_signatures
        __props__.__dict__["fail_open"] = fail_open
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["intelligent_mode"] = intelligent_mode
        __props__.__dict__["ips_reserve_cpu"] = ips_reserve_cpu
        __props__.__dict__["ngfw_max_scan_range"] = ngfw_max_scan_range
        __props__.__dict__["np_accel_mode"] = np_accel_mode
        __props__.__dict__["packet_log_queue_depth"] = packet_log_queue_depth
        __props__.__dict__["session_limit_mode"] = session_limit_mode
        __props__.__dict__["skype_client_public_ipaddr"] = skype_client_public_ipaddr
        __props__.__dict__["socket_size"] = socket_size
        __props__.__dict__["sync_session_ttl"] = sync_session_ttl
        __props__.__dict__["tls_active_probe"] = tls_active_probe
        __props__.__dict__["traffic_submit"] = traffic_submit
        __props__.__dict__["vdomparam"] = vdomparam
        return Global(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="anomalyMode")
    def anomaly_mode(self) -> pulumi.Output[str]:
        """
        Global blocking mode for rate-based anomalies. Valid values: `periodical`, `continuous`.
        """
        return pulumi.get(self, "anomaly_mode")

    @property
    @pulumi.getter(name="avMemLimit")
    def av_mem_limit(self) -> pulumi.Output[int]:
        """
        Maximum percentage of system memory allowed for use on AV scanning (10 - 50, default = zero). To disable set to zero. When disabled, there is no limit on the AV memory usage.
        """
        return pulumi.get(self, "av_mem_limit")

    @property
    @pulumi.getter(name="cpAccelMode")
    def cp_accel_mode(self) -> pulumi.Output[str]:
        """
        IPS Pattern matching acceleration/offloading to CPx processors. Valid values: `none`, `basic`, `advanced`.
        """
        return pulumi.get(self, "cp_accel_mode")

    @property
    @pulumi.getter
    def database(self) -> pulumi.Output[str]:
        """
        Regular or extended IPS database. Regular protects against the latest common and in-the-wild attacks. Extended includes protection from legacy attacks. Valid values: `regular`, `extended`.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="deepAppInspDbLimit")
    def deep_app_insp_db_limit(self) -> pulumi.Output[int]:
        """
        Limit on number of entries in deep application inspection database (1 - 2147483647, use recommended setting = 0).
        """
        return pulumi.get(self, "deep_app_insp_db_limit")

    @property
    @pulumi.getter(name="deepAppInspTimeout")
    def deep_app_insp_timeout(self) -> pulumi.Output[int]:
        """
        Timeout for Deep application inspection (1 - 2147483647 sec., 0 = use recommended setting).
        """
        return pulumi.get(self, "deep_app_insp_timeout")

    @property
    @pulumi.getter(name="engineCount")
    def engine_count(self) -> pulumi.Output[int]:
        """
        Number of IPS engines running. If set to the default value of 0, FortiOS sets the number to optimize performance depending on the number of CPU cores.
        """
        return pulumi.get(self, "engine_count")

    @property
    @pulumi.getter(name="excludeSignatures")
    def exclude_signatures(self) -> pulumi.Output[str]:
        """
        Excluded signatures.
        """
        return pulumi.get(self, "exclude_signatures")

    @property
    @pulumi.getter(name="failOpen")
    def fail_open(self) -> pulumi.Output[str]:
        """
        Enable to allow traffic if the IPS process crashes. Default is disable and IPS traffic is blocked when the IPS process crashes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fail_open")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter(name="intelligentMode")
    def intelligent_mode(self) -> pulumi.Output[str]:
        """
        Enable/disable IPS adaptive scanning (intelligent mode). Intelligent mode optimizes the scanning method for the type of traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "intelligent_mode")

    @property
    @pulumi.getter(name="ipsReserveCpu")
    def ips_reserve_cpu(self) -> pulumi.Output[str]:
        """
        Enable/disable IPS daemon's use of CPUs other than CPU 0 Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ips_reserve_cpu")

    @property
    @pulumi.getter(name="ngfwMaxScanRange")
    def ngfw_max_scan_range(self) -> pulumi.Output[int]:
        """
        NGFW policy-mode app detection threshold.
        """
        return pulumi.get(self, "ngfw_max_scan_range")

    @property
    @pulumi.getter(name="npAccelMode")
    def np_accel_mode(self) -> pulumi.Output[str]:
        """
        Acceleration mode for IPS processing by NPx processors. Valid values: `none`, `basic`.
        """
        return pulumi.get(self, "np_accel_mode")

    @property
    @pulumi.getter(name="packetLogQueueDepth")
    def packet_log_queue_depth(self) -> pulumi.Output[int]:
        """
        Packet/pcap log queue depth per IPS engine.
        """
        return pulumi.get(self, "packet_log_queue_depth")

    @property
    @pulumi.getter(name="sessionLimitMode")
    def session_limit_mode(self) -> pulumi.Output[str]:
        """
        Method of counting concurrent sessions used by session limit anomalies. Choose between greater accuracy (accurate) or improved performance (heuristics). Valid values: `accurate`, `heuristic`.
        """
        return pulumi.get(self, "session_limit_mode")

    @property
    @pulumi.getter(name="skypeClientPublicIpaddr")
    def skype_client_public_ipaddr(self) -> pulumi.Output[Optional[str]]:
        """
        Public IP addresses of your network that receive Skype sessions. Helps identify Skype sessions. Separate IP addresses with commas.
        """
        return pulumi.get(self, "skype_client_public_ipaddr")

    @property
    @pulumi.getter(name="socketSize")
    def socket_size(self) -> pulumi.Output[int]:
        """
        IPS socket buffer size. Max and default value depend on available memory. Can be changed to tune performance.
        """
        return pulumi.get(self, "socket_size")

    @property
    @pulumi.getter(name="syncSessionTtl")
    def sync_session_ttl(self) -> pulumi.Output[str]:
        """
        Enable/disable use of kernel session TTL for IPS sessions. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sync_session_ttl")

    @property
    @pulumi.getter(name="tlsActiveProbe")
    def tls_active_probe(self) -> pulumi.Output['outputs.GlobalTlsActiveProbe']:
        """
        TLS active probe configuration. The structure of `tls_active_probe` block is documented below.
        """
        return pulumi.get(self, "tls_active_probe")

    @property
    @pulumi.getter(name="trafficSubmit")
    def traffic_submit(self) -> pulumi.Output[str]:
        """
        Enable/disable submitting attack data found by this FortiGate to FortiGuard. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "traffic_submit")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

