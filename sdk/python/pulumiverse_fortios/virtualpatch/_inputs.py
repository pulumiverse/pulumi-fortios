# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ProfileExemptionArgs',
    'ProfileExemptionDeviceArgs',
    'ProfileExemptionRuleArgs',
]

@pulumi.input_type
class ProfileExemptionArgs:
    def __init__(__self__, *,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileExemptionDeviceArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileExemptionRuleArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ProfileExemptionDeviceArgs']]] devices: Device MAC addresses. The structure of `device` block is documented below.
        :param pulumi.Input[int] id: IDs.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileExemptionRuleArgs']]] rules: Patch signature rule IDs. The structure of `rule` block is documented below.
        :param pulumi.Input[str] status: Enable/disable exemption. Valid values: `enable`, `disable`.
        """
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileExemptionDeviceArgs']]]]:
        """
        Device MAC addresses. The structure of `device` block is documented below.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileExemptionDeviceArgs']]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileExemptionRuleArgs']]]]:
        """
        Patch signature rule IDs. The structure of `rule` block is documented below.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileExemptionRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable exemption. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ProfileExemptionDeviceArgs:
    def __init__(__self__, *,
                 mac: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mac: Device MAC address.
        """
        if mac is not None:
            pulumi.set(__self__, "mac", mac)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        Device MAC address.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)


@pulumi.input_type
class ProfileExemptionRuleArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Rule IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


