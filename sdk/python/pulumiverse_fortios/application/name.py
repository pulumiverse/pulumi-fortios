# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NameArgs', 'Name']

@pulumi.input_type
class NameArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[int],
                 behavior: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['NameMetadataArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['NameParameterArgs']]]] = None,
                 popularity: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 risk: Optional[pulumi.Input[int]] = None,
                 sub_category: Optional[pulumi.Input[int]] = None,
                 technology: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Name resource.
        :param pulumi.Input[int] category: Application category ID.
        :param pulumi.Input[str] behavior: Application behavior.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fosid: Application ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['NameMetadataArgs']]] metadatas: Meta data. The structure of `metadata` block is documented below.
        :param pulumi.Input[str] name: Application name.
        :param pulumi.Input[str] parameter: Application parameter name.
        :param pulumi.Input[Sequence[pulumi.Input['NameParameterArgs']]] parameters: Application parameters. The structure of `parameters` block is documented below.
        :param pulumi.Input[int] popularity: Application popularity.
        :param pulumi.Input[str] protocol: Application protocol.
        :param pulumi.Input[int] risk: Application risk.
        :param pulumi.Input[int] sub_category: Application sub-category ID.
        :param pulumi.Input[str] technology: Application technology.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vendor: Application vendor.
        :param pulumi.Input[int] weight: Application weight.
        """
        pulumi.set(__self__, "category", category)
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if popularity is not None:
            pulumi.set(__self__, "popularity", popularity)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if risk is not None:
            pulumi.set(__self__, "risk", risk)
        if sub_category is not None:
            pulumi.set(__self__, "sub_category", sub_category)
        if technology is not None:
            pulumi.set(__self__, "technology", technology)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Input[int]:
        """
        Application category ID.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[int]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[pulumi.Input[str]]:
        """
        Application behavior.
        """
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        Application ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NameMetadataArgs']]]]:
        """
        Meta data. The structure of `metadata` block is documented below.
        """
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NameMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[str]]:
        """
        Application parameter name.
        """
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NameParameterArgs']]]]:
        """
        Application parameters. The structure of `parameters` block is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NameParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def popularity(self) -> Optional[pulumi.Input[int]]:
        """
        Application popularity.
        """
        return pulumi.get(self, "popularity")

    @popularity.setter
    def popularity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "popularity", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Application protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def risk(self) -> Optional[pulumi.Input[int]]:
        """
        Application risk.
        """
        return pulumi.get(self, "risk")

    @risk.setter
    def risk(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "risk", value)

    @property
    @pulumi.getter(name="subCategory")
    def sub_category(self) -> Optional[pulumi.Input[int]]:
        """
        Application sub-category ID.
        """
        return pulumi.get(self, "sub_category")

    @sub_category.setter
    def sub_category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sub_category", value)

    @property
    @pulumi.getter
    def technology(self) -> Optional[pulumi.Input[str]]:
        """
        Application technology.
        """
        return pulumi.get(self, "technology")

    @technology.setter
    def technology(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "technology", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vendor(self) -> Optional[pulumi.Input[str]]:
        """
        Application vendor.
        """
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Application weight.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class _NameState:
    def __init__(__self__, *,
                 behavior: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['NameMetadataArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['NameParameterArgs']]]] = None,
                 popularity: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 risk: Optional[pulumi.Input[int]] = None,
                 sub_category: Optional[pulumi.Input[int]] = None,
                 technology: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Name resources.
        :param pulumi.Input[str] behavior: Application behavior.
        :param pulumi.Input[int] category: Application category ID.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fosid: Application ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input['NameMetadataArgs']]] metadatas: Meta data. The structure of `metadata` block is documented below.
        :param pulumi.Input[str] name: Application name.
        :param pulumi.Input[str] parameter: Application parameter name.
        :param pulumi.Input[Sequence[pulumi.Input['NameParameterArgs']]] parameters: Application parameters. The structure of `parameters` block is documented below.
        :param pulumi.Input[int] popularity: Application popularity.
        :param pulumi.Input[str] protocol: Application protocol.
        :param pulumi.Input[int] risk: Application risk.
        :param pulumi.Input[int] sub_category: Application sub-category ID.
        :param pulumi.Input[str] technology: Application technology.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vendor: Application vendor.
        :param pulumi.Input[int] weight: Application weight.
        """
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if popularity is not None:
            pulumi.set(__self__, "popularity", popularity)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if risk is not None:
            pulumi.set(__self__, "risk", risk)
        if sub_category is not None:
            pulumi.set(__self__, "sub_category", sub_category)
        if technology is not None:
            pulumi.set(__self__, "technology", technology)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[pulumi.Input[str]]:
        """
        Application behavior.
        """
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[int]]:
        """
        Application category ID.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        Application ID.
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NameMetadataArgs']]]]:
        """
        Meta data. The structure of `metadata` block is documented below.
        """
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NameMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[str]]:
        """
        Application parameter name.
        """
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NameParameterArgs']]]]:
        """
        Application parameters. The structure of `parameters` block is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NameParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def popularity(self) -> Optional[pulumi.Input[int]]:
        """
        Application popularity.
        """
        return pulumi.get(self, "popularity")

    @popularity.setter
    def popularity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "popularity", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Application protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def risk(self) -> Optional[pulumi.Input[int]]:
        """
        Application risk.
        """
        return pulumi.get(self, "risk")

    @risk.setter
    def risk(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "risk", value)

    @property
    @pulumi.getter(name="subCategory")
    def sub_category(self) -> Optional[pulumi.Input[int]]:
        """
        Application sub-category ID.
        """
        return pulumi.get(self, "sub_category")

    @sub_category.setter
    def sub_category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sub_category", value)

    @property
    @pulumi.getter
    def technology(self) -> Optional[pulumi.Input[str]]:
        """
        Application technology.
        """
        return pulumi.get(self, "technology")

    @technology.setter
    def technology(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "technology", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter
    def vendor(self) -> Optional[pulumi.Input[str]]:
        """
        Application vendor.
        """
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Application weight.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


class Name(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 behavior: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NameMetadataArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NameParameterArgs']]]]] = None,
                 popularity: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 risk: Optional[pulumi.Input[int]] = None,
                 sub_category: Optional[pulumi.Input[int]] = None,
                 technology: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Configure application signatures.

        ## Import

        Application Name can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:application/name:Name labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:application/name:Name labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] behavior: Application behavior.
        :param pulumi.Input[int] category: Application category ID.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fosid: Application ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NameMetadataArgs']]]] metadatas: Meta data. The structure of `metadata` block is documented below.
        :param pulumi.Input[str] name: Application name.
        :param pulumi.Input[str] parameter: Application parameter name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NameParameterArgs']]]] parameters: Application parameters. The structure of `parameters` block is documented below.
        :param pulumi.Input[int] popularity: Application popularity.
        :param pulumi.Input[str] protocol: Application protocol.
        :param pulumi.Input[int] risk: Application risk.
        :param pulumi.Input[int] sub_category: Application sub-category ID.
        :param pulumi.Input[str] technology: Application technology.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vendor: Application vendor.
        :param pulumi.Input[int] weight: Application weight.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NameArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure application signatures.

        ## Import

        Application Name can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:application/name:Name labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:application/name:Name labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param NameArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NameArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 behavior: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[int]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NameMetadataArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NameParameterArgs']]]]] = None,
                 popularity: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 risk: Optional[pulumi.Input[int]] = None,
                 sub_category: Optional[pulumi.Input[int]] = None,
                 technology: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NameArgs.__new__(NameArgs)

            __props__.__dict__["behavior"] = behavior
            if category is None and not opts.urn:
                raise TypeError("Missing required property 'category'")
            __props__.__dict__["category"] = category
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["metadatas"] = metadatas
            __props__.__dict__["name"] = name
            __props__.__dict__["parameter"] = parameter
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["popularity"] = popularity
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["risk"] = risk
            __props__.__dict__["sub_category"] = sub_category
            __props__.__dict__["technology"] = technology
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["vendor"] = vendor
            __props__.__dict__["weight"] = weight
        super(Name, __self__).__init__(
            'fortios:application/name:Name',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            behavior: Optional[pulumi.Input[str]] = None,
            category: Optional[pulumi.Input[int]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NameMetadataArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parameter: Optional[pulumi.Input[str]] = None,
            parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NameParameterArgs']]]]] = None,
            popularity: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            risk: Optional[pulumi.Input[int]] = None,
            sub_category: Optional[pulumi.Input[int]] = None,
            technology: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            vendor: Optional[pulumi.Input[str]] = None,
            weight: Optional[pulumi.Input[int]] = None) -> 'Name':
        """
        Get an existing Name resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] behavior: Application behavior.
        :param pulumi.Input[int] category: Application category ID.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[int] fosid: Application ID.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NameMetadataArgs']]]] metadatas: Meta data. The structure of `metadata` block is documented below.
        :param pulumi.Input[str] name: Application name.
        :param pulumi.Input[str] parameter: Application parameter name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NameParameterArgs']]]] parameters: Application parameters. The structure of `parameters` block is documented below.
        :param pulumi.Input[int] popularity: Application popularity.
        :param pulumi.Input[str] protocol: Application protocol.
        :param pulumi.Input[int] risk: Application risk.
        :param pulumi.Input[int] sub_category: Application sub-category ID.
        :param pulumi.Input[str] technology: Application technology.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] vendor: Application vendor.
        :param pulumi.Input[int] weight: Application weight.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NameState.__new__(_NameState)

        __props__.__dict__["behavior"] = behavior
        __props__.__dict__["category"] = category
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["metadatas"] = metadatas
        __props__.__dict__["name"] = name
        __props__.__dict__["parameter"] = parameter
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["popularity"] = popularity
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["risk"] = risk
        __props__.__dict__["sub_category"] = sub_category
        __props__.__dict__["technology"] = technology
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["vendor"] = vendor
        __props__.__dict__["weight"] = weight
        return Name(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def behavior(self) -> pulumi.Output[str]:
        """
        Application behavior.
        """
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[int]:
        """
        Application category ID.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        Application ID.
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def metadatas(self) -> pulumi.Output[Optional[Sequence['outputs.NameMetadata']]]:
        """
        Meta data. The structure of `metadata` block is documented below.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Application name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameter(self) -> pulumi.Output[str]:
        """
        Application parameter name.
        """
        return pulumi.get(self, "parameter")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[Sequence['outputs.NameParameter']]]:
        """
        Application parameters. The structure of `parameters` block is documented below.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def popularity(self) -> pulumi.Output[int]:
        """
        Application popularity.
        """
        return pulumi.get(self, "popularity")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Application protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def risk(self) -> pulumi.Output[int]:
        """
        Application risk.
        """
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter(name="subCategory")
    def sub_category(self) -> pulumi.Output[int]:
        """
        Application sub-category ID.
        """
        return pulumi.get(self, "sub_category")

    @property
    @pulumi.getter
    def technology(self) -> pulumi.Output[str]:
        """
        Application technology.
        """
        return pulumi.get(self, "technology")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter
    def vendor(self) -> pulumi.Output[str]:
        """
        Application vendor.
        """
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Output[int]:
        """
        Application weight.
        """
        return pulumi.get(self, "weight")

