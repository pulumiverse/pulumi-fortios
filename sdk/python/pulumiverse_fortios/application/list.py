# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ListArgs', 'List']

@pulumi.input_type
class ListArgs:
    def __init__(__self__, *,
                 app_replacemsg: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 control_default_network_services: Optional[pulumi.Input[str]] = None,
                 deep_app_inspection: Optional[pulumi.Input[str]] = None,
                 default_network_services: Optional[pulumi.Input[Sequence[pulumi.Input['ListDefaultNetworkServiceArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enforce_default_app_port: Optional[pulumi.Input[str]] = None,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryArgs']]]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 force_inclusion_ssl_di_sigs: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 other_application_action: Optional[pulumi.Input[str]] = None,
                 other_application_log: Optional[pulumi.Input[str]] = None,
                 p2p_black_list: Optional[pulumi.Input[str]] = None,
                 p2p_block_list: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 unknown_application_action: Optional[pulumi.Input[str]] = None,
                 unknown_application_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a List resource.
        :param pulumi.Input[str] app_replacemsg: Enable/disable replacement messages for blocked applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] comment: comments
        :param pulumi.Input[str] control_default_network_services: Enable/disable enforcement of protocols over selected ports. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] deep_app_inspection: Enable/disable deep application inspection. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ListDefaultNetworkServiceArgs']]] default_network_services: Default network service entries. The structure of `default_network_services` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] enforce_default_app_port: Enable/disable default application port enforcement for allowed applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ListEntryArgs']]] entries: Application list entries. The structure of `entries` block is documented below.
        :param pulumi.Input[str] extended_log: Enable/disable extended logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] force_inclusion_ssl_di_sigs: Enable/disable forced inclusion of SSL deep inspection signatures. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] name: List name.
        :param pulumi.Input[str] options: Basic application protocol signatures allowed by default.
        :param pulumi.Input[str] other_application_action: Action for other applications. Valid values: `pass`, `block`.
        :param pulumi.Input[str] other_application_log: Enable/disable logging for other applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] p2p_black_list: P2P applications to be black listed. Valid values: `skype`, `edonkey`, `bittorrent`.
        :param pulumi.Input[str] p2p_block_list: P2P applications to be blocklisted. Valid values: `skype`, `edonkey`, `bittorrent`.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input[str] unknown_application_action: Pass or block traffic from unknown applications. Valid values: `pass`, `block`.
        :param pulumi.Input[str] unknown_application_log: Enable/disable logging for unknown applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if app_replacemsg is not None:
            pulumi.set(__self__, "app_replacemsg", app_replacemsg)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if control_default_network_services is not None:
            pulumi.set(__self__, "control_default_network_services", control_default_network_services)
        if deep_app_inspection is not None:
            pulumi.set(__self__, "deep_app_inspection", deep_app_inspection)
        if default_network_services is not None:
            pulumi.set(__self__, "default_network_services", default_network_services)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if enforce_default_app_port is not None:
            pulumi.set(__self__, "enforce_default_app_port", enforce_default_app_port)
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if force_inclusion_ssl_di_sigs is not None:
            pulumi.set(__self__, "force_inclusion_ssl_di_sigs", force_inclusion_ssl_di_sigs)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if other_application_action is not None:
            pulumi.set(__self__, "other_application_action", other_application_action)
        if other_application_log is not None:
            pulumi.set(__self__, "other_application_log", other_application_log)
        if p2p_black_list is not None:
            pulumi.set(__self__, "p2p_black_list", p2p_black_list)
        if p2p_block_list is not None:
            pulumi.set(__self__, "p2p_block_list", p2p_block_list)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if unknown_application_action is not None:
            pulumi.set(__self__, "unknown_application_action", unknown_application_action)
        if unknown_application_log is not None:
            pulumi.set(__self__, "unknown_application_log", unknown_application_log)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="appReplacemsg")
    def app_replacemsg(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable replacement messages for blocked applications. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "app_replacemsg")

    @app_replacemsg.setter
    def app_replacemsg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_replacemsg", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        comments
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="controlDefaultNetworkServices")
    def control_default_network_services(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforcement of protocols over selected ports. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "control_default_network_services")

    @control_default_network_services.setter
    def control_default_network_services(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_default_network_services", value)

    @property
    @pulumi.getter(name="deepAppInspection")
    def deep_app_inspection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable deep application inspection. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "deep_app_inspection")

    @deep_app_inspection.setter
    def deep_app_inspection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deep_app_inspection", value)

    @property
    @pulumi.getter(name="defaultNetworkServices")
    def default_network_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListDefaultNetworkServiceArgs']]]]:
        """
        Default network service entries. The structure of `default_network_services` block is documented below.
        """
        return pulumi.get(self, "default_network_services")

    @default_network_services.setter
    def default_network_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListDefaultNetworkServiceArgs']]]]):
        pulumi.set(self, "default_network_services", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="enforceDefaultAppPort")
    def enforce_default_app_port(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable default application port enforcement for allowed applications. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "enforce_default_app_port")

    @enforce_default_app_port.setter
    def enforce_default_app_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_default_app_port", value)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryArgs']]]]:
        """
        Application list entries. The structure of `entries` block is documented below.
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable extended logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter(name="forceInclusionSslDiSigs")
    def force_inclusion_ssl_di_sigs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forced inclusion of SSL deep inspection signatures. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "force_inclusion_ssl_di_sigs")

    @force_inclusion_ssl_di_sigs.setter
    def force_inclusion_ssl_di_sigs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_inclusion_ssl_di_sigs", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        List name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Basic application protocol signatures allowed by default.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="otherApplicationAction")
    def other_application_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for other applications. Valid values: `pass`, `block`.
        """
        return pulumi.get(self, "other_application_action")

    @other_application_action.setter
    def other_application_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "other_application_action", value)

    @property
    @pulumi.getter(name="otherApplicationLog")
    def other_application_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging for other applications. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "other_application_log")

    @other_application_log.setter
    def other_application_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "other_application_log", value)

    @property
    @pulumi.getter(name="p2pBlackList")
    def p2p_black_list(self) -> Optional[pulumi.Input[str]]:
        """
        P2P applications to be black listed. Valid values: `skype`, `edonkey`, `bittorrent`.
        """
        return pulumi.get(self, "p2p_black_list")

    @p2p_black_list.setter
    def p2p_black_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "p2p_black_list", value)

    @property
    @pulumi.getter(name="p2pBlockList")
    def p2p_block_list(self) -> Optional[pulumi.Input[str]]:
        """
        P2P applications to be blocklisted. Valid values: `skype`, `edonkey`, `bittorrent`.
        """
        return pulumi.get(self, "p2p_block_list")

    @p2p_block_list.setter
    def p2p_block_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "p2p_block_list", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        """
        Replacement message group.
        """
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter(name="unknownApplicationAction")
    def unknown_application_action(self) -> Optional[pulumi.Input[str]]:
        """
        Pass or block traffic from unknown applications. Valid values: `pass`, `block`.
        """
        return pulumi.get(self, "unknown_application_action")

    @unknown_application_action.setter
    def unknown_application_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_application_action", value)

    @property
    @pulumi.getter(name="unknownApplicationLog")
    def unknown_application_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging for unknown applications. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "unknown_application_log")

    @unknown_application_log.setter
    def unknown_application_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_application_log", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ListState:
    def __init__(__self__, *,
                 app_replacemsg: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 control_default_network_services: Optional[pulumi.Input[str]] = None,
                 deep_app_inspection: Optional[pulumi.Input[str]] = None,
                 default_network_services: Optional[pulumi.Input[Sequence[pulumi.Input['ListDefaultNetworkServiceArgs']]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enforce_default_app_port: Optional[pulumi.Input[str]] = None,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryArgs']]]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 force_inclusion_ssl_di_sigs: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 other_application_action: Optional[pulumi.Input[str]] = None,
                 other_application_log: Optional[pulumi.Input[str]] = None,
                 p2p_black_list: Optional[pulumi.Input[str]] = None,
                 p2p_block_list: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 unknown_application_action: Optional[pulumi.Input[str]] = None,
                 unknown_application_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering List resources.
        :param pulumi.Input[str] app_replacemsg: Enable/disable replacement messages for blocked applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] comment: comments
        :param pulumi.Input[str] control_default_network_services: Enable/disable enforcement of protocols over selected ports. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] deep_app_inspection: Enable/disable deep application inspection. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ListDefaultNetworkServiceArgs']]] default_network_services: Default network service entries. The structure of `default_network_services` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] enforce_default_app_port: Enable/disable default application port enforcement for allowed applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ListEntryArgs']]] entries: Application list entries. The structure of `entries` block is documented below.
        :param pulumi.Input[str] extended_log: Enable/disable extended logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] force_inclusion_ssl_di_sigs: Enable/disable forced inclusion of SSL deep inspection signatures. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] name: List name.
        :param pulumi.Input[str] options: Basic application protocol signatures allowed by default.
        :param pulumi.Input[str] other_application_action: Action for other applications. Valid values: `pass`, `block`.
        :param pulumi.Input[str] other_application_log: Enable/disable logging for other applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] p2p_black_list: P2P applications to be black listed. Valid values: `skype`, `edonkey`, `bittorrent`.
        :param pulumi.Input[str] p2p_block_list: P2P applications to be blocklisted. Valid values: `skype`, `edonkey`, `bittorrent`.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input[str] unknown_application_action: Pass or block traffic from unknown applications. Valid values: `pass`, `block`.
        :param pulumi.Input[str] unknown_application_log: Enable/disable logging for unknown applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if app_replacemsg is not None:
            pulumi.set(__self__, "app_replacemsg", app_replacemsg)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if control_default_network_services is not None:
            pulumi.set(__self__, "control_default_network_services", control_default_network_services)
        if deep_app_inspection is not None:
            pulumi.set(__self__, "deep_app_inspection", deep_app_inspection)
        if default_network_services is not None:
            pulumi.set(__self__, "default_network_services", default_network_services)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if enforce_default_app_port is not None:
            pulumi.set(__self__, "enforce_default_app_port", enforce_default_app_port)
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if force_inclusion_ssl_di_sigs is not None:
            pulumi.set(__self__, "force_inclusion_ssl_di_sigs", force_inclusion_ssl_di_sigs)
        if get_all_tables is not None:
            pulumi.set(__self__, "get_all_tables", get_all_tables)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if other_application_action is not None:
            pulumi.set(__self__, "other_application_action", other_application_action)
        if other_application_log is not None:
            pulumi.set(__self__, "other_application_log", other_application_log)
        if p2p_black_list is not None:
            pulumi.set(__self__, "p2p_black_list", p2p_black_list)
        if p2p_block_list is not None:
            pulumi.set(__self__, "p2p_block_list", p2p_block_list)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if unknown_application_action is not None:
            pulumi.set(__self__, "unknown_application_action", unknown_application_action)
        if unknown_application_log is not None:
            pulumi.set(__self__, "unknown_application_log", unknown_application_log)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="appReplacemsg")
    def app_replacemsg(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable replacement messages for blocked applications. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "app_replacemsg")

    @app_replacemsg.setter
    def app_replacemsg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_replacemsg", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        comments
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="controlDefaultNetworkServices")
    def control_default_network_services(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforcement of protocols over selected ports. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "control_default_network_services")

    @control_default_network_services.setter
    def control_default_network_services(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_default_network_services", value)

    @property
    @pulumi.getter(name="deepAppInspection")
    def deep_app_inspection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable deep application inspection. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "deep_app_inspection")

    @deep_app_inspection.setter
    def deep_app_inspection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deep_app_inspection", value)

    @property
    @pulumi.getter(name="defaultNetworkServices")
    def default_network_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListDefaultNetworkServiceArgs']]]]:
        """
        Default network service entries. The structure of `default_network_services` block is documented below.
        """
        return pulumi.get(self, "default_network_services")

    @default_network_services.setter
    def default_network_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListDefaultNetworkServiceArgs']]]]):
        pulumi.set(self, "default_network_services", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="enforceDefaultAppPort")
    def enforce_default_app_port(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable default application port enforcement for allowed applications. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "enforce_default_app_port")

    @enforce_default_app_port.setter
    def enforce_default_app_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_default_app_port", value)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryArgs']]]]:
        """
        Application list entries. The structure of `entries` block is documented below.
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable extended logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter(name="forceInclusionSslDiSigs")
    def force_inclusion_ssl_di_sigs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forced inclusion of SSL deep inspection signatures. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "force_inclusion_ssl_di_sigs")

    @force_inclusion_ssl_di_sigs.setter
    def force_inclusion_ssl_di_sigs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force_inclusion_ssl_di_sigs", value)

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> Optional[pulumi.Input[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @get_all_tables.setter
    def get_all_tables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "get_all_tables", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        List name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Basic application protocol signatures allowed by default.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="otherApplicationAction")
    def other_application_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for other applications. Valid values: `pass`, `block`.
        """
        return pulumi.get(self, "other_application_action")

    @other_application_action.setter
    def other_application_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "other_application_action", value)

    @property
    @pulumi.getter(name="otherApplicationLog")
    def other_application_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging for other applications. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "other_application_log")

    @other_application_log.setter
    def other_application_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "other_application_log", value)

    @property
    @pulumi.getter(name="p2pBlackList")
    def p2p_black_list(self) -> Optional[pulumi.Input[str]]:
        """
        P2P applications to be black listed. Valid values: `skype`, `edonkey`, `bittorrent`.
        """
        return pulumi.get(self, "p2p_black_list")

    @p2p_black_list.setter
    def p2p_black_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "p2p_black_list", value)

    @property
    @pulumi.getter(name="p2pBlockList")
    def p2p_block_list(self) -> Optional[pulumi.Input[str]]:
        """
        P2P applications to be blocklisted. Valid values: `skype`, `edonkey`, `bittorrent`.
        """
        return pulumi.get(self, "p2p_block_list")

    @p2p_block_list.setter
    def p2p_block_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "p2p_block_list", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        """
        Replacement message group.
        """
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter(name="unknownApplicationAction")
    def unknown_application_action(self) -> Optional[pulumi.Input[str]]:
        """
        Pass or block traffic from unknown applications. Valid values: `pass`, `block`.
        """
        return pulumi.get(self, "unknown_application_action")

    @unknown_application_action.setter
    def unknown_application_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_application_action", value)

    @property
    @pulumi.getter(name="unknownApplicationLog")
    def unknown_application_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging for unknown applications. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "unknown_application_log")

    @unknown_application_log.setter
    def unknown_application_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_application_log", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class List(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_replacemsg: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 control_default_network_services: Optional[pulumi.Input[str]] = None,
                 deep_app_inspection: Optional[pulumi.Input[str]] = None,
                 default_network_services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ListDefaultNetworkServiceArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enforce_default_app_port: Optional[pulumi.Input[str]] = None,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ListEntryArgs']]]]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 force_inclusion_ssl_di_sigs: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 other_application_action: Optional[pulumi.Input[str]] = None,
                 other_application_log: Optional[pulumi.Input[str]] = None,
                 p2p_black_list: Optional[pulumi.Input[str]] = None,
                 p2p_block_list: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 unknown_application_action: Optional[pulumi.Input[str]] = None,
                 unknown_application_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure application control lists.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.application.List("trname",
            app_replacemsg="enable",
            deep_app_inspection="enable",
            enforce_default_app_port="disable",
            extended_log="disable",
            options="allow-dns",
            other_application_action="pass",
            other_application_log="disable",
            unknown_application_action="pass",
            unknown_application_log="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Application List can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:application/list:List labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:application/list:List labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_replacemsg: Enable/disable replacement messages for blocked applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] comment: comments
        :param pulumi.Input[str] control_default_network_services: Enable/disable enforcement of protocols over selected ports. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] deep_app_inspection: Enable/disable deep application inspection. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ListDefaultNetworkServiceArgs']]]] default_network_services: Default network service entries. The structure of `default_network_services` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] enforce_default_app_port: Enable/disable default application port enforcement for allowed applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ListEntryArgs']]]] entries: Application list entries. The structure of `entries` block is documented below.
        :param pulumi.Input[str] extended_log: Enable/disable extended logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] force_inclusion_ssl_di_sigs: Enable/disable forced inclusion of SSL deep inspection signatures. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] name: List name.
        :param pulumi.Input[str] options: Basic application protocol signatures allowed by default.
        :param pulumi.Input[str] other_application_action: Action for other applications. Valid values: `pass`, `block`.
        :param pulumi.Input[str] other_application_log: Enable/disable logging for other applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] p2p_black_list: P2P applications to be black listed. Valid values: `skype`, `edonkey`, `bittorrent`.
        :param pulumi.Input[str] p2p_block_list: P2P applications to be blocklisted. Valid values: `skype`, `edonkey`, `bittorrent`.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input[str] unknown_application_action: Pass or block traffic from unknown applications. Valid values: `pass`, `block`.
        :param pulumi.Input[str] unknown_application_log: Enable/disable logging for unknown applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ListArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure application control lists.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.application.List("trname",
            app_replacemsg="enable",
            deep_app_inspection="enable",
            enforce_default_app_port="disable",
            extended_log="disable",
            options="allow-dns",
            other_application_action="pass",
            other_application_log="disable",
            unknown_application_action="pass",
            unknown_application_log="disable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Application List can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:application/list:List labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:application/list:List labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ListArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_replacemsg: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 control_default_network_services: Optional[pulumi.Input[str]] = None,
                 deep_app_inspection: Optional[pulumi.Input[str]] = None,
                 default_network_services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ListDefaultNetworkServiceArgs']]]]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 enforce_default_app_port: Optional[pulumi.Input[str]] = None,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ListEntryArgs']]]]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 force_inclusion_ssl_di_sigs: Optional[pulumi.Input[str]] = None,
                 get_all_tables: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 other_application_action: Optional[pulumi.Input[str]] = None,
                 other_application_log: Optional[pulumi.Input[str]] = None,
                 p2p_black_list: Optional[pulumi.Input[str]] = None,
                 p2p_block_list: Optional[pulumi.Input[str]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 unknown_application_action: Optional[pulumi.Input[str]] = None,
                 unknown_application_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ListArgs.__new__(ListArgs)

            __props__.__dict__["app_replacemsg"] = app_replacemsg
            __props__.__dict__["comment"] = comment
            __props__.__dict__["control_default_network_services"] = control_default_network_services
            __props__.__dict__["deep_app_inspection"] = deep_app_inspection
            __props__.__dict__["default_network_services"] = default_network_services
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["enforce_default_app_port"] = enforce_default_app_port
            __props__.__dict__["entries"] = entries
            __props__.__dict__["extended_log"] = extended_log
            __props__.__dict__["force_inclusion_ssl_di_sigs"] = force_inclusion_ssl_di_sigs
            __props__.__dict__["get_all_tables"] = get_all_tables
            __props__.__dict__["name"] = name
            __props__.__dict__["options"] = options
            __props__.__dict__["other_application_action"] = other_application_action
            __props__.__dict__["other_application_log"] = other_application_log
            __props__.__dict__["p2p_black_list"] = p2p_black_list
            __props__.__dict__["p2p_block_list"] = p2p_block_list
            __props__.__dict__["replacemsg_group"] = replacemsg_group
            __props__.__dict__["unknown_application_action"] = unknown_application_action
            __props__.__dict__["unknown_application_log"] = unknown_application_log
            __props__.__dict__["vdomparam"] = vdomparam
        super(List, __self__).__init__(
            'fortios:application/list:List',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_replacemsg: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            control_default_network_services: Optional[pulumi.Input[str]] = None,
            deep_app_inspection: Optional[pulumi.Input[str]] = None,
            default_network_services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ListDefaultNetworkServiceArgs']]]]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            enforce_default_app_port: Optional[pulumi.Input[str]] = None,
            entries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ListEntryArgs']]]]] = None,
            extended_log: Optional[pulumi.Input[str]] = None,
            force_inclusion_ssl_di_sigs: Optional[pulumi.Input[str]] = None,
            get_all_tables: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            options: Optional[pulumi.Input[str]] = None,
            other_application_action: Optional[pulumi.Input[str]] = None,
            other_application_log: Optional[pulumi.Input[str]] = None,
            p2p_black_list: Optional[pulumi.Input[str]] = None,
            p2p_block_list: Optional[pulumi.Input[str]] = None,
            replacemsg_group: Optional[pulumi.Input[str]] = None,
            unknown_application_action: Optional[pulumi.Input[str]] = None,
            unknown_application_log: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'List':
        """
        Get an existing List resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_replacemsg: Enable/disable replacement messages for blocked applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] comment: comments
        :param pulumi.Input[str] control_default_network_services: Enable/disable enforcement of protocols over selected ports. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] deep_app_inspection: Enable/disable deep application inspection. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ListDefaultNetworkServiceArgs']]]] default_network_services: Default network service entries. The structure of `default_network_services` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        :param pulumi.Input[str] enforce_default_app_port: Enable/disable default application port enforcement for allowed applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ListEntryArgs']]]] entries: Application list entries. The structure of `entries` block is documented below.
        :param pulumi.Input[str] extended_log: Enable/disable extended logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] force_inclusion_ssl_di_sigs: Enable/disable forced inclusion of SSL deep inspection signatures. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] get_all_tables: Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        :param pulumi.Input[str] name: List name.
        :param pulumi.Input[str] options: Basic application protocol signatures allowed by default.
        :param pulumi.Input[str] other_application_action: Action for other applications. Valid values: `pass`, `block`.
        :param pulumi.Input[str] other_application_log: Enable/disable logging for other applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] p2p_black_list: P2P applications to be black listed. Valid values: `skype`, `edonkey`, `bittorrent`.
        :param pulumi.Input[str] p2p_block_list: P2P applications to be blocklisted. Valid values: `skype`, `edonkey`, `bittorrent`.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input[str] unknown_application_action: Pass or block traffic from unknown applications. Valid values: `pass`, `block`.
        :param pulumi.Input[str] unknown_application_log: Enable/disable logging for unknown applications. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ListState.__new__(_ListState)

        __props__.__dict__["app_replacemsg"] = app_replacemsg
        __props__.__dict__["comment"] = comment
        __props__.__dict__["control_default_network_services"] = control_default_network_services
        __props__.__dict__["deep_app_inspection"] = deep_app_inspection
        __props__.__dict__["default_network_services"] = default_network_services
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["enforce_default_app_port"] = enforce_default_app_port
        __props__.__dict__["entries"] = entries
        __props__.__dict__["extended_log"] = extended_log
        __props__.__dict__["force_inclusion_ssl_di_sigs"] = force_inclusion_ssl_di_sigs
        __props__.__dict__["get_all_tables"] = get_all_tables
        __props__.__dict__["name"] = name
        __props__.__dict__["options"] = options
        __props__.__dict__["other_application_action"] = other_application_action
        __props__.__dict__["other_application_log"] = other_application_log
        __props__.__dict__["p2p_black_list"] = p2p_black_list
        __props__.__dict__["p2p_block_list"] = p2p_block_list
        __props__.__dict__["replacemsg_group"] = replacemsg_group
        __props__.__dict__["unknown_application_action"] = unknown_application_action
        __props__.__dict__["unknown_application_log"] = unknown_application_log
        __props__.__dict__["vdomparam"] = vdomparam
        return List(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appReplacemsg")
    def app_replacemsg(self) -> pulumi.Output[str]:
        """
        Enable/disable replacement messages for blocked applications. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "app_replacemsg")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        comments
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="controlDefaultNetworkServices")
    def control_default_network_services(self) -> pulumi.Output[str]:
        """
        Enable/disable enforcement of protocols over selected ports. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "control_default_network_services")

    @property
    @pulumi.getter(name="deepAppInspection")
    def deep_app_inspection(self) -> pulumi.Output[str]:
        """
        Enable/disable deep application inspection. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "deep_app_inspection")

    @property
    @pulumi.getter(name="defaultNetworkServices")
    def default_network_services(self) -> pulumi.Output[Optional[Sequence['outputs.ListDefaultNetworkService']]]:
        """
        Default network service entries. The structure of `default_network_services` block is documented below.
        """
        return pulumi.get(self, "default_network_services")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        Sort sub-tables, please do not set this parameter when configuring static sub-tables. Options: [ false, true, natural, alphabetical ]. false: Default value, do not sort tables; true/natural: sort tables in natural order. For example: [ a10, a2 ] -> [ a2, a10 ]; alphabetical: sort tables in alphabetical order. For example: [ a10, a2 ] -> [ a10, a2 ].
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="enforceDefaultAppPort")
    def enforce_default_app_port(self) -> pulumi.Output[str]:
        """
        Enable/disable default application port enforcement for allowed applications. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "enforce_default_app_port")

    @property
    @pulumi.getter
    def entries(self) -> pulumi.Output[Optional[Sequence['outputs.ListEntry']]]:
        """
        Application list entries. The structure of `entries` block is documented below.
        """
        return pulumi.get(self, "entries")

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> pulumi.Output[str]:
        """
        Enable/disable extended logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extended_log")

    @property
    @pulumi.getter(name="forceInclusionSslDiSigs")
    def force_inclusion_ssl_di_sigs(self) -> pulumi.Output[str]:
        """
        Enable/disable forced inclusion of SSL deep inspection signatures. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "force_inclusion_ssl_di_sigs")

    @property
    @pulumi.getter(name="getAllTables")
    def get_all_tables(self) -> pulumi.Output[Optional[str]]:
        """
        Get all sub-tables including unconfigured tables. Do not set this variable to true if you configure sub-table in another resource, otherwish conflicts and overwrite will occur. Options: [ false, true ]. false: Default value, do not get unconfigured tables; true: get all tables including unconfigured tables.
        """
        return pulumi.get(self, "get_all_tables")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        List name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[str]:
        """
        Basic application protocol signatures allowed by default.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="otherApplicationAction")
    def other_application_action(self) -> pulumi.Output[str]:
        """
        Action for other applications. Valid values: `pass`, `block`.
        """
        return pulumi.get(self, "other_application_action")

    @property
    @pulumi.getter(name="otherApplicationLog")
    def other_application_log(self) -> pulumi.Output[str]:
        """
        Enable/disable logging for other applications. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "other_application_log")

    @property
    @pulumi.getter(name="p2pBlackList")
    def p2p_black_list(self) -> pulumi.Output[str]:
        """
        P2P applications to be black listed. Valid values: `skype`, `edonkey`, `bittorrent`.
        """
        return pulumi.get(self, "p2p_black_list")

    @property
    @pulumi.getter(name="p2pBlockList")
    def p2p_block_list(self) -> pulumi.Output[str]:
        """
        P2P applications to be blocklisted. Valid values: `skype`, `edonkey`, `bittorrent`.
        """
        return pulumi.get(self, "p2p_block_list")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> pulumi.Output[str]:
        """
        Replacement message group.
        """
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter(name="unknownApplicationAction")
    def unknown_application_action(self) -> pulumi.Output[str]:
        """
        Pass or block traffic from unknown applications. Valid values: `pass`, `block`.
        """
        return pulumi.get(self, "unknown_application_action")

    @property
    @pulumi.getter(name="unknownApplicationLog")
    def unknown_application_log(self) -> pulumi.Output[str]:
        """
        Enable/disable logging for unknown applications. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "unknown_application_log")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

