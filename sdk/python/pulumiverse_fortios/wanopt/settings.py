# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SettingsArgs', 'Settings']

@pulumi.input_type
class SettingsArgs:
    def __init__(__self__, *,
                 host_id: pulumi.Input[str],
                 auto_detect_algorithm: Optional[pulumi.Input[str]] = None,
                 tunnel_optimization: Optional[pulumi.Input[str]] = None,
                 tunnel_ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Settings resource.
        :param pulumi.Input[str] host_id: Local host ID (must also be entered in the remote FortiGate's peer list).
        :param pulumi.Input[str] auto_detect_algorithm: Auto detection algorithms used in tunnel negotiations. Valid values: `simple`, `diff-req-resp`.
        :param pulumi.Input[str] tunnel_optimization: WANOpt tunnel optimization option. Valid values: `memory-usage`, `balanced`, `throughput`.
        :param pulumi.Input[str] tunnel_ssl_algorithm: Relative strength of encryption algorithms accepted during tunnel negotiation. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        pulumi.set(__self__, "host_id", host_id)
        if auto_detect_algorithm is not None:
            pulumi.set(__self__, "auto_detect_algorithm", auto_detect_algorithm)
        if tunnel_optimization is not None:
            pulumi.set(__self__, "tunnel_optimization", tunnel_optimization)
        if tunnel_ssl_algorithm is not None:
            pulumi.set(__self__, "tunnel_ssl_algorithm", tunnel_ssl_algorithm)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Input[str]:
        """
        Local host ID (must also be entered in the remote FortiGate's peer list).
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "host_id", value)

    @property
    @pulumi.getter(name="autoDetectAlgorithm")
    def auto_detect_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Auto detection algorithms used in tunnel negotiations. Valid values: `simple`, `diff-req-resp`.
        """
        return pulumi.get(self, "auto_detect_algorithm")

    @auto_detect_algorithm.setter
    def auto_detect_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_detect_algorithm", value)

    @property
    @pulumi.getter(name="tunnelOptimization")
    def tunnel_optimization(self) -> Optional[pulumi.Input[str]]:
        """
        WANOpt tunnel optimization option. Valid values: `memory-usage`, `balanced`, `throughput`.
        """
        return pulumi.get(self, "tunnel_optimization")

    @tunnel_optimization.setter
    def tunnel_optimization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_optimization", value)

    @property
    @pulumi.getter(name="tunnelSslAlgorithm")
    def tunnel_ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Relative strength of encryption algorithms accepted during tunnel negotiation. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "tunnel_ssl_algorithm")

    @tunnel_ssl_algorithm.setter
    def tunnel_ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_ssl_algorithm", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SettingsState:
    def __init__(__self__, *,
                 auto_detect_algorithm: Optional[pulumi.Input[str]] = None,
                 host_id: Optional[pulumi.Input[str]] = None,
                 tunnel_optimization: Optional[pulumi.Input[str]] = None,
                 tunnel_ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Settings resources.
        :param pulumi.Input[str] auto_detect_algorithm: Auto detection algorithms used in tunnel negotiations. Valid values: `simple`, `diff-req-resp`.
        :param pulumi.Input[str] host_id: Local host ID (must also be entered in the remote FortiGate's peer list).
        :param pulumi.Input[str] tunnel_optimization: WANOpt tunnel optimization option. Valid values: `memory-usage`, `balanced`, `throughput`.
        :param pulumi.Input[str] tunnel_ssl_algorithm: Relative strength of encryption algorithms accepted during tunnel negotiation. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if auto_detect_algorithm is not None:
            pulumi.set(__self__, "auto_detect_algorithm", auto_detect_algorithm)
        if host_id is not None:
            pulumi.set(__self__, "host_id", host_id)
        if tunnel_optimization is not None:
            pulumi.set(__self__, "tunnel_optimization", tunnel_optimization)
        if tunnel_ssl_algorithm is not None:
            pulumi.set(__self__, "tunnel_ssl_algorithm", tunnel_ssl_algorithm)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="autoDetectAlgorithm")
    def auto_detect_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Auto detection algorithms used in tunnel negotiations. Valid values: `simple`, `diff-req-resp`.
        """
        return pulumi.get(self, "auto_detect_algorithm")

    @auto_detect_algorithm.setter
    def auto_detect_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_detect_algorithm", value)

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[pulumi.Input[str]]:
        """
        Local host ID (must also be entered in the remote FortiGate's peer list).
        """
        return pulumi.get(self, "host_id")

    @host_id.setter
    def host_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_id", value)

    @property
    @pulumi.getter(name="tunnelOptimization")
    def tunnel_optimization(self) -> Optional[pulumi.Input[str]]:
        """
        WANOpt tunnel optimization option. Valid values: `memory-usage`, `balanced`, `throughput`.
        """
        return pulumi.get(self, "tunnel_optimization")

    @tunnel_optimization.setter
    def tunnel_optimization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_optimization", value)

    @property
    @pulumi.getter(name="tunnelSslAlgorithm")
    def tunnel_ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Relative strength of encryption algorithms accepted during tunnel negotiation. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "tunnel_ssl_algorithm")

    @tunnel_ssl_algorithm.setter
    def tunnel_ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_ssl_algorithm", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class Settings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_detect_algorithm: Optional[pulumi.Input[str]] = None,
                 host_id: Optional[pulumi.Input[str]] = None,
                 tunnel_optimization: Optional[pulumi.Input[str]] = None,
                 tunnel_ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure WAN optimization settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.wanopt.Settings("trname",
            auto_detect_algorithm="simple",
            host_id="default-id",
            tunnel_ssl_algorithm="high")
        ```

        ## Import

        Wanopt Settings can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wanopt/settings:Settings labelname WanoptSettings
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wanopt/settings:Settings labelname WanoptSettings
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_detect_algorithm: Auto detection algorithms used in tunnel negotiations. Valid values: `simple`, `diff-req-resp`.
        :param pulumi.Input[str] host_id: Local host ID (must also be entered in the remote FortiGate's peer list).
        :param pulumi.Input[str] tunnel_optimization: WANOpt tunnel optimization option. Valid values: `memory-usage`, `balanced`, `throughput`.
        :param pulumi.Input[str] tunnel_ssl_algorithm: Relative strength of encryption algorithms accepted during tunnel negotiation. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure WAN optimization settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_fortios as fortios

        trname = fortios.wanopt.Settings("trname",
            auto_detect_algorithm="simple",
            host_id="default-id",
            tunnel_ssl_algorithm="high")
        ```

        ## Import

        Wanopt Settings can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wanopt/settings:Settings labelname WanoptSettings
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wanopt/settings:Settings labelname WanoptSettings
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_detect_algorithm: Optional[pulumi.Input[str]] = None,
                 host_id: Optional[pulumi.Input[str]] = None,
                 tunnel_optimization: Optional[pulumi.Input[str]] = None,
                 tunnel_ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingsArgs.__new__(SettingsArgs)

            __props__.__dict__["auto_detect_algorithm"] = auto_detect_algorithm
            if host_id is None and not opts.urn:
                raise TypeError("Missing required property 'host_id'")
            __props__.__dict__["host_id"] = host_id
            __props__.__dict__["tunnel_optimization"] = tunnel_optimization
            __props__.__dict__["tunnel_ssl_algorithm"] = tunnel_ssl_algorithm
            __props__.__dict__["vdomparam"] = vdomparam
        super(Settings, __self__).__init__(
            'fortios:wanopt/settings:Settings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_detect_algorithm: Optional[pulumi.Input[str]] = None,
            host_id: Optional[pulumi.Input[str]] = None,
            tunnel_optimization: Optional[pulumi.Input[str]] = None,
            tunnel_ssl_algorithm: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'Settings':
        """
        Get an existing Settings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_detect_algorithm: Auto detection algorithms used in tunnel negotiations. Valid values: `simple`, `diff-req-resp`.
        :param pulumi.Input[str] host_id: Local host ID (must also be entered in the remote FortiGate's peer list).
        :param pulumi.Input[str] tunnel_optimization: WANOpt tunnel optimization option. Valid values: `memory-usage`, `balanced`, `throughput`.
        :param pulumi.Input[str] tunnel_ssl_algorithm: Relative strength of encryption algorithms accepted during tunnel negotiation. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingsState.__new__(_SettingsState)

        __props__.__dict__["auto_detect_algorithm"] = auto_detect_algorithm
        __props__.__dict__["host_id"] = host_id
        __props__.__dict__["tunnel_optimization"] = tunnel_optimization
        __props__.__dict__["tunnel_ssl_algorithm"] = tunnel_ssl_algorithm
        __props__.__dict__["vdomparam"] = vdomparam
        return Settings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoDetectAlgorithm")
    def auto_detect_algorithm(self) -> pulumi.Output[str]:
        """
        Auto detection algorithms used in tunnel negotiations. Valid values: `simple`, `diff-req-resp`.
        """
        return pulumi.get(self, "auto_detect_algorithm")

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> pulumi.Output[str]:
        """
        Local host ID (must also be entered in the remote FortiGate's peer list).
        """
        return pulumi.get(self, "host_id")

    @property
    @pulumi.getter(name="tunnelOptimization")
    def tunnel_optimization(self) -> pulumi.Output[str]:
        """
        WANOpt tunnel optimization option. Valid values: `memory-usage`, `balanced`, `throughput`.
        """
        return pulumi.get(self, "tunnel_optimization")

    @property
    @pulumi.getter(name="tunnelSslAlgorithm")
    def tunnel_ssl_algorithm(self) -> pulumi.Output[str]:
        """
        Relative strength of encryption algorithms accepted during tunnel negotiation. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "tunnel_ssl_algorithm")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

