# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AccesscontrollistLayer3Ipv4RuleArgs',
    'AccesscontrollistLayer3Ipv6RuleArgs',
    'AddrgrpAddressArgs',
    'ApcfgprofileCommandListArgs',
    'ArrpprofileDarrpOptimizeScheduleArgs',
    'BonjourprofilePolicyListArgs',
    'IntercontrollerInterControllerPeerArgs',
    'MpskprofileMpskGroupArgs',
    'MpskprofileMpskGroupMpskKeyArgs',
    'MpskprofileMpskGroupMpskKeyMpskScheduleArgs',
    'QosprofileDscpWmmBeArgs',
    'QosprofileDscpWmmBkArgs',
    'QosprofileDscpWmmViArgs',
    'QosprofileDscpWmmVoArgs',
    'SettingDarrpOptimizeScheduleArgs',
    'SettingOffendingSsidArgs',
    'SnmpCommunityArgs',
    'SnmpCommunityHostArgs',
    'SnmpUserArgs',
    'TimersDarrpTimeArgs',
    'VapMacFilterListArgs',
    'VapMpskKeyArgs',
    'VapMpskKeyMpskScheduleArgs',
    'VapPortalMessageOverridesArgs',
    'VapRadiusMacAuthUsergroupArgs',
    'VapSelectedUsergroupArgs',
    'VapUsergroupArgs',
    'VapVlanNameArgs',
    'VapVlanPoolArgs',
    'VapgroupVapArgs',
    'WidsprofileApBgscanDisableScheduleArgs',
    'WidsprofileApScanChannelList2g5gArgs',
    'WidsprofileApScanChannelList6gArgs',
    'WtpLanArgs',
    'WtpRadio1Args',
    'WtpRadio1ChannelArgs',
    'WtpRadio1VapArgs',
    'WtpRadio2Args',
    'WtpRadio2ChannelArgs',
    'WtpRadio2VapArgs',
    'WtpRadio3Args',
    'WtpRadio3ChannelArgs',
    'WtpRadio3VapArgs',
    'WtpRadio4Args',
    'WtpRadio4ChannelArgs',
    'WtpRadio4VapArgs',
    'WtpSplitTunnelingAclArgs',
    'WtpgroupWtpArgs',
    'WtpprofileDenyMacListArgs',
    'WtpprofileEslSesDongleArgs',
    'WtpprofileLanArgs',
    'WtpprofileLbsArgs',
    'WtpprofileLedScheduleArgs',
    'WtpprofilePlatformArgs',
    'WtpprofileRadio1Args',
    'WtpprofileRadio1ChannelArgs',
    'WtpprofileRadio1VapArgs',
    'WtpprofileRadio2Args',
    'WtpprofileRadio2ChannelArgs',
    'WtpprofileRadio2VapArgs',
    'WtpprofileRadio3Args',
    'WtpprofileRadio3ChannelArgs',
    'WtpprofileRadio3VapArgs',
    'WtpprofileRadio4Args',
    'WtpprofileRadio4ChannelArgs',
    'WtpprofileRadio4VapArgs',
    'WtpprofileSplitTunnelingAclArgs',
]

@pulumi.input_type
class AccesscontrollistLayer3Ipv4RuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dstaddr: Optional[pulumi.Input[str]] = None,
                 dstport: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 srcaddr: Optional[pulumi.Input[str]] = None,
                 srcport: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Policy action (allow | deny). Valid values: `allow`, `deny`.
        :param pulumi.Input[str] comment: Description.
        :param pulumi.Input[str] dstaddr: Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        :param pulumi.Input[int] dstport: Destination port (0 - 65535, default = 0, meaning any).
        :param pulumi.Input[int] protocol: Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
        :param pulumi.Input[int] rule_id: Rule ID (1 - 65535).
        :param pulumi.Input[str] srcaddr: Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        :param pulumi.Input[int] srcport: Source port (0 - 65535, default = 0, meaning any).
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstport is not None:
            pulumi.set(__self__, "dstport", dstport)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcport is not None:
            pulumi.set(__self__, "srcport", srcport)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Policy action (allow | deny). Valid values: `allow`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        """
        return pulumi.get(self, "dstaddr")

    @dstaddr.setter
    def dstaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr", value)

    @property
    @pulumi.getter
    def dstport(self) -> Optional[pulumi.Input[int]]:
        """
        Destination port (0 - 65535, default = 0, meaning any).
        """
        return pulumi.get(self, "dstport")

    @dstport.setter
    def dstport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dstport", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule ID (1 - 65535).
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        """
        return pulumi.get(self, "srcaddr")

    @srcaddr.setter
    def srcaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr", value)

    @property
    @pulumi.getter
    def srcport(self) -> Optional[pulumi.Input[int]]:
        """
        Source port (0 - 65535, default = 0, meaning any).
        """
        return pulumi.get(self, "srcport")

    @srcport.setter
    def srcport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "srcport", value)


@pulumi.input_type
class AccesscontrollistLayer3Ipv6RuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dstaddr: Optional[pulumi.Input[str]] = None,
                 dstport: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 srcaddr: Optional[pulumi.Input[str]] = None,
                 srcport: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Policy action (allow | deny). Valid values: `allow`, `deny`.
        :param pulumi.Input[str] comment: Description.
        :param pulumi.Input[str] dstaddr: Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        :param pulumi.Input[int] dstport: Destination port (0 - 65535, default = 0, meaning any).
        :param pulumi.Input[int] protocol: Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
        :param pulumi.Input[int] rule_id: Rule ID (1 - 65535).
        :param pulumi.Input[str] srcaddr: Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        :param pulumi.Input[int] srcport: Source port (0 - 65535, default = 0, meaning any).
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstport is not None:
            pulumi.set(__self__, "dstport", dstport)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcport is not None:
            pulumi.set(__self__, "srcport", srcport)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Policy action (allow | deny). Valid values: `allow`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        """
        return pulumi.get(self, "dstaddr")

    @dstaddr.setter
    def dstaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr", value)

    @property
    @pulumi.getter
    def dstport(self) -> Optional[pulumi.Input[int]]:
        """
        Destination port (0 - 65535, default = 0, meaning any).
        """
        return pulumi.get(self, "dstport")

    @dstport.setter
    def dstport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dstport", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule ID (1 - 65535).
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        """
        return pulumi.get(self, "srcaddr")

    @srcaddr.setter
    def srcaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr", value)

    @property
    @pulumi.getter
    def srcport(self) -> Optional[pulumi.Input[int]]:
        """
        Source port (0 - 65535, default = 0, meaning any).
        """
        return pulumi.get(self, "srcport")

    @srcport.setter
    def srcport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "srcport", value)


@pulumi.input_type
class AddrgrpAddressArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Address ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Address ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ApcfgprofileCommandListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passwd_value: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Command ID.
        :param pulumi.Input[str] name: AP local configuration command name.
        :param pulumi.Input[str] passwd_value: AP local configuration command password value.
        :param pulumi.Input[str] type: The command type (default = non-password). Valid values: `non-password`, `password`.
        :param pulumi.Input[str] value: AP local configuration command value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passwd_value is not None:
            pulumi.set(__self__, "passwd_value", passwd_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Command ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        AP local configuration command name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passwdValue")
    def passwd_value(self) -> Optional[pulumi.Input[str]]:
        """
        AP local configuration command password value.
        """
        return pulumi.get(self, "passwd_value")

    @passwd_value.setter
    def passwd_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd_value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The command type (default = non-password). Valid values: `non-password`, `password`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        AP local configuration command value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ArrpprofileDarrpOptimizeScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Schedule name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class BonjourprofilePolicyListArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 from_vlan: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 services: Optional[pulumi.Input[str]] = None,
                 to_vlan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] from_vlan: VLAN ID from which the Bonjour service is advertised (0 - 4094, default = 0).
        :param pulumi.Input[int] policy_id: Policy ID.
        :param pulumi.Input[str] services: Bonjour services for the VLAN connecting to the Bonjour network.
        :param pulumi.Input[str] to_vlan: VLAN ID to which the Bonjour service is made available (0 - 4094, default = all).
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if from_vlan is not None:
            pulumi.set(__self__, "from_vlan", from_vlan)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if to_vlan is not None:
            pulumi.set(__self__, "to_vlan", to_vlan)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fromVlan")
    def from_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN ID from which the Bonjour service is advertised (0 - 4094, default = 0).
        """
        return pulumi.get(self, "from_vlan")

    @from_vlan.setter
    def from_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_vlan", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[str]]:
        """
        Bonjour services for the VLAN connecting to the Bonjour network.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="toVlan")
    def to_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN ID to which the Bonjour service is made available (0 - 4094, default = all).
        """
        return pulumi.get(self, "to_vlan")

    @to_vlan.setter
    def to_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to_vlan", value)


@pulumi.input_type
class IntercontrollerInterControllerPeerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 peer_ip: Optional[pulumi.Input[str]] = None,
                 peer_port: Optional[pulumi.Input[int]] = None,
                 peer_priority: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] peer_ip: Peer wireless controller's IP address.
        :param pulumi.Input[int] peer_port: Port used by the wireless controller's for inter-controller communications (1024 - 49150, default = 5246).
        :param pulumi.Input[str] peer_priority: Peer wireless controller's priority (primary or secondary, default = primary). Valid values: `primary`, `secondary`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if peer_ip is not None:
            pulumi.set(__self__, "peer_ip", peer_ip)
        if peer_port is not None:
            pulumi.set(__self__, "peer_port", peer_port)
        if peer_priority is not None:
            pulumi.set(__self__, "peer_priority", peer_priority)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Peer wireless controller's IP address.
        """
        return pulumi.get(self, "peer_ip")

    @peer_ip.setter
    def peer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_ip", value)

    @property
    @pulumi.getter(name="peerPort")
    def peer_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port used by the wireless controller's for inter-controller communications (1024 - 49150, default = 5246).
        """
        return pulumi.get(self, "peer_port")

    @peer_port.setter
    def peer_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "peer_port", value)

    @property
    @pulumi.getter(name="peerPriority")
    def peer_priority(self) -> Optional[pulumi.Input[str]]:
        """
        Peer wireless controller's priority (primary or secondary, default = primary). Valid values: `primary`, `secondary`.
        """
        return pulumi.get(self, "peer_priority")

    @peer_priority.setter
    def peer_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_priority", value)


@pulumi.input_type
class MpskprofileMpskGroupArgs:
    def __init__(__self__, *,
                 mpsk_keys: Optional[pulumi.Input[Sequence[pulumi.Input['MpskprofileMpskGroupMpskKeyArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vlan_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['MpskprofileMpskGroupMpskKeyArgs']]] mpsk_keys: List of multiple PSK entries. The structure of `mpsk_key` block is documented below.
        :param pulumi.Input[str] name: MPSK group name.
        :param pulumi.Input[int] vlan_id: Optional VLAN ID.
        :param pulumi.Input[str] vlan_type: MPSK group VLAN options. Valid values: `no-vlan`, `fixed-vlan`.
        """
        if mpsk_keys is not None:
            pulumi.set(__self__, "mpsk_keys", mpsk_keys)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vlan_type is not None:
            pulumi.set(__self__, "vlan_type", vlan_type)

    @property
    @pulumi.getter(name="mpskKeys")
    def mpsk_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MpskprofileMpskGroupMpskKeyArgs']]]]:
        """
        List of multiple PSK entries. The structure of `mpsk_key` block is documented below.
        """
        return pulumi.get(self, "mpsk_keys")

    @mpsk_keys.setter
    def mpsk_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MpskprofileMpskGroupMpskKeyArgs']]]]):
        pulumi.set(self, "mpsk_keys", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        MPSK group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        Optional VLAN ID.
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vlanType")
    def vlan_type(self) -> Optional[pulumi.Input[str]]:
        """
        MPSK group VLAN options. Valid values: `no-vlan`, `fixed-vlan`.
        """
        return pulumi.get(self, "vlan_type")

    @vlan_type.setter
    def vlan_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_type", value)


@pulumi.input_type
class MpskprofileMpskGroupMpskKeyArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 concurrent_client_limit_type: Optional[pulumi.Input[str]] = None,
                 concurrent_clients: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 mpsk_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['MpskprofileMpskGroupMpskKeyMpskScheduleArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] concurrent_client_limit_type: MPSK client limit type options. Valid values: `default`, `unlimited`, `specified`.
        :param pulumi.Input[int] concurrent_clients: Number of clients that can connect using this pre-shared key (1 - 65535, default is 256).
        :param pulumi.Input[str] mac: MAC address.
        :param pulumi.Input[Sequence[pulumi.Input['MpskprofileMpskGroupMpskKeyMpskScheduleArgs']]] mpsk_schedules: Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpsk_schedules` block is documented below.
        :param pulumi.Input[str] name: Pre-shared key name.
        :param pulumi.Input[str] passphrase: WPA Pre-shared key.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if concurrent_client_limit_type is not None:
            pulumi.set(__self__, "concurrent_client_limit_type", concurrent_client_limit_type)
        if concurrent_clients is not None:
            pulumi.set(__self__, "concurrent_clients", concurrent_clients)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mpsk_schedules is not None:
            pulumi.set(__self__, "mpsk_schedules", mpsk_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="concurrentClientLimitType")
    def concurrent_client_limit_type(self) -> Optional[pulumi.Input[str]]:
        """
        MPSK client limit type options. Valid values: `default`, `unlimited`, `specified`.
        """
        return pulumi.get(self, "concurrent_client_limit_type")

    @concurrent_client_limit_type.setter
    def concurrent_client_limit_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "concurrent_client_limit_type", value)

    @property
    @pulumi.getter(name="concurrentClients")
    def concurrent_clients(self) -> Optional[pulumi.Input[int]]:
        """
        Number of clients that can connect using this pre-shared key (1 - 65535, default is 256).
        """
        return pulumi.get(self, "concurrent_clients")

    @concurrent_clients.setter
    def concurrent_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrent_clients", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter(name="mpskSchedules")
    def mpsk_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MpskprofileMpskGroupMpskKeyMpskScheduleArgs']]]]:
        """
        Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpsk_schedules` block is documented below.
        """
        return pulumi.get(self, "mpsk_schedules")

    @mpsk_schedules.setter
    def mpsk_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MpskprofileMpskGroupMpskKeyMpskScheduleArgs']]]]):
        pulumi.set(self, "mpsk_schedules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        WPA Pre-shared key.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)


@pulumi.input_type
class MpskprofileMpskGroupMpskKeyMpskScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Schedule name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class QosprofileDscpWmmBeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: DSCP WMM mapping numbers (0 - 63).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP WMM mapping numbers (0 - 63).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class QosprofileDscpWmmBkArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: DSCP WMM mapping numbers (0 - 63).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP WMM mapping numbers (0 - 63).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class QosprofileDscpWmmViArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: DSCP WMM mapping numbers (0 - 63).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP WMM mapping numbers (0 - 63).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class QosprofileDscpWmmVoArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: DSCP WMM mapping numbers (0 - 63).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP WMM mapping numbers (0 - 63).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SettingDarrpOptimizeScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Schedule name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SettingOffendingSsidArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ssid_pattern: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Actions taken for detected offending SSID. Valid values: `log`, `suppress`.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] ssid_pattern: Define offending SSID pattern (case insensitive), eg: word, word*, *word, wo*rd.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ssid_pattern is not None:
            pulumi.set(__self__, "ssid_pattern", ssid_pattern)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Actions taken for detected offending SSID. Valid values: `log`, `suppress`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ssidPattern")
    def ssid_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Define offending SSID pattern (case insensitive), eg: word, word*, *word, wo*rd.
        """
        return pulumi.get(self, "ssid_pattern")

    @ssid_pattern.setter
    def ssid_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssid_pattern", value)


@pulumi.input_type
class SnmpCommunityArgs:
    def __init__(__self__, *,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpCommunityHostArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_v1_status: Optional[pulumi.Input[str]] = None,
                 query_v2c_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_v1_status: Optional[pulumi.Input[str]] = None,
                 trap_v2c_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SnmpCommunityHostArgs']]] hosts: Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        :param pulumi.Input[int] id: Community ID.
        :param pulumi.Input[str] name: Community name.
        :param pulumi.Input[str] query_v1_status: Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] query_v2c_status: Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable this SNMP community. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] trap_v1_status: Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] trap_v2c_status: Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_v1_status is not None:
            pulumi.set(__self__, "query_v1_status", query_v1_status)
        if query_v2c_status is not None:
            pulumi.set(__self__, "query_v2c_status", query_v2c_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_v1_status is not None:
            pulumi.set(__self__, "trap_v1_status", trap_v1_status)
        if trap_v2c_status is not None:
            pulumi.set(__self__, "trap_v2c_status", trap_v2c_status)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnmpCommunityHostArgs']]]]:
        """
        Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpCommunityHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Community ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Community name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryV1Status")
    def query_v1_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "query_v1_status")

    @query_v1_status.setter
    def query_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v1_status", value)

    @property
    @pulumi.getter(name="queryV2cStatus")
    def query_v2c_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "query_v2c_status")

    @query_v2c_status.setter
    def query_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v2c_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this SNMP community. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapV1Status")
    def trap_v1_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trap_v1_status")

    @trap_v1_status.setter
    def trap_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v1_status", value)

    @property
    @pulumi.getter(name="trapV2cStatus")
    def trap_v2c_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trap_v2c_status")

    @trap_v2c_status.setter
    def trap_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v2c_status", value)


@pulumi.input_type
class SnmpCommunityHostArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Host entry ID.
        :param pulumi.Input[str] ip: IPv4 address of the SNMP manager (host).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Host entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the SNMP manager (host).
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SnmpUserArgs:
    def __init__(__self__, *,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_hosts: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_proto: Authentication protocol. Valid values: `md5`, `sha`.
        :param pulumi.Input[str] auth_pwd: Password for authentication protocol.
        :param pulumi.Input[str] name: SNMP User Name
        :param pulumi.Input[str] notify_hosts: Configure SNMP User Notify Hosts.
        :param pulumi.Input[str] priv_proto: Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
        :param pulumi.Input[str] priv_pwd: Password for privacy (encryption) protocol.
        :param pulumi.Input[str] queries: Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] security_level: Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
        :param pulumi.Input[str] status: SNMP User Enable Valid values: `enable`, `disable`.
        :param pulumi.Input[str] trap_status: Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
        """
        if auth_proto is not None:
            pulumi.set(__self__, "auth_proto", auth_proto)
        if auth_pwd is not None:
            pulumi.set(__self__, "auth_pwd", auth_pwd)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_hosts is not None:
            pulumi.set(__self__, "notify_hosts", notify_hosts)
        if priv_proto is not None:
            pulumi.set(__self__, "priv_proto", priv_proto)
        if priv_pwd is not None:
            pulumi.set(__self__, "priv_pwd", priv_pwd)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_status is not None:
            pulumi.set(__self__, "trap_status", trap_status)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication protocol. Valid values: `md5`, `sha`.
        """
        return pulumi.get(self, "auth_proto")

    @auth_proto.setter
    def auth_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_proto", value)

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> Optional[pulumi.Input[str]]:
        """
        Password for authentication protocol.
        """
        return pulumi.get(self, "auth_pwd")

    @auth_pwd.setter
    def auth_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_pwd", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP User Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyHosts")
    def notify_hosts(self) -> Optional[pulumi.Input[str]]:
        """
        Configure SNMP User Notify Hosts.
        """
        return pulumi.get(self, "notify_hosts")

    @notify_hosts.setter
    def notify_hosts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_hosts", value)

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
        """
        return pulumi.get(self, "priv_proto")

    @priv_proto.setter
    def priv_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_proto", value)

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> Optional[pulumi.Input[str]]:
        """
        Password for privacy (encryption) protocol.
        """
        return pulumi.get(self, "priv_pwd")

    @priv_pwd.setter
    def priv_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_pwd", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        """
        Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP User Enable Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapStatus")
    def trap_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trap_status")

    @trap_status.setter
    def trap_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_status", value)


@pulumi.input_type
class TimersDarrpTimeArgs:
    def __init__(__self__, *,
                 time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] time: Time.
        """
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        """
        Time.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class VapMacFilterListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 mac_filter_policy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] mac: MAC address.
        :param pulumi.Input[str] mac_filter_policy: Deny or allow the client with this MAC address. Valid values: `allow`, `deny`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mac_filter_policy is not None:
            pulumi.set(__self__, "mac_filter_policy", mac_filter_policy)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter(name="macFilterPolicy")
    def mac_filter_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Deny or allow the client with this MAC address. Valid values: `allow`, `deny`.
        """
        return pulumi.get(self, "mac_filter_policy")

    @mac_filter_policy.setter
    def mac_filter_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_filter_policy", value)


@pulumi.input_type
class VapMpskKeyArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 concurrent_clients: Optional[pulumi.Input[str]] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 mpsk_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['VapMpskKeyMpskScheduleArgs']]]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] concurrent_clients: Number of clients that can connect using this pre-shared key.
        :param pulumi.Input[str] key_name: Pre-shared key name.
        :param pulumi.Input[Sequence[pulumi.Input['VapMpskKeyMpskScheduleArgs']]] mpsk_schedules: Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpsk_schedules` block is documented below.
        :param pulumi.Input[str] passphrase: WPA Pre-shared key.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if concurrent_clients is not None:
            pulumi.set(__self__, "concurrent_clients", concurrent_clients)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if mpsk_schedules is not None:
            pulumi.set(__self__, "mpsk_schedules", mpsk_schedules)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="concurrentClients")
    def concurrent_clients(self) -> Optional[pulumi.Input[str]]:
        """
        Number of clients that can connect using this pre-shared key.
        """
        return pulumi.get(self, "concurrent_clients")

    @concurrent_clients.setter
    def concurrent_clients(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "concurrent_clients", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared key name.
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="mpskSchedules")
    def mpsk_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VapMpskKeyMpskScheduleArgs']]]]:
        """
        Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpsk_schedules` block is documented below.
        """
        return pulumi.get(self, "mpsk_schedules")

    @mpsk_schedules.setter
    def mpsk_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VapMpskKeyMpskScheduleArgs']]]]):
        pulumi.set(self, "mpsk_schedules", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        WPA Pre-shared key.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)


@pulumi.input_type
class VapMpskKeyMpskScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Schedule name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VapPortalMessageOverridesArgs:
    def __init__(__self__, *,
                 auth_disclaimer_page: Optional[pulumi.Input[str]] = None,
                 auth_login_failed_page: Optional[pulumi.Input[str]] = None,
                 auth_login_page: Optional[pulumi.Input[str]] = None,
                 auth_reject_page: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_disclaimer_page: Override auth-disclaimer-page message with message from portal-message-overrides group.
        :param pulumi.Input[str] auth_login_failed_page: Override auth-login-failed-page message with message from portal-message-overrides group.
        :param pulumi.Input[str] auth_login_page: Override auth-login-page message with message from portal-message-overrides group.
        :param pulumi.Input[str] auth_reject_page: Override auth-reject-page message with message from portal-message-overrides group.
        """
        if auth_disclaimer_page is not None:
            pulumi.set(__self__, "auth_disclaimer_page", auth_disclaimer_page)
        if auth_login_failed_page is not None:
            pulumi.set(__self__, "auth_login_failed_page", auth_login_failed_page)
        if auth_login_page is not None:
            pulumi.set(__self__, "auth_login_page", auth_login_page)
        if auth_reject_page is not None:
            pulumi.set(__self__, "auth_reject_page", auth_reject_page)

    @property
    @pulumi.getter(name="authDisclaimerPage")
    def auth_disclaimer_page(self) -> Optional[pulumi.Input[str]]:
        """
        Override auth-disclaimer-page message with message from portal-message-overrides group.
        """
        return pulumi.get(self, "auth_disclaimer_page")

    @auth_disclaimer_page.setter
    def auth_disclaimer_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_disclaimer_page", value)

    @property
    @pulumi.getter(name="authLoginFailedPage")
    def auth_login_failed_page(self) -> Optional[pulumi.Input[str]]:
        """
        Override auth-login-failed-page message with message from portal-message-overrides group.
        """
        return pulumi.get(self, "auth_login_failed_page")

    @auth_login_failed_page.setter
    def auth_login_failed_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_login_failed_page", value)

    @property
    @pulumi.getter(name="authLoginPage")
    def auth_login_page(self) -> Optional[pulumi.Input[str]]:
        """
        Override auth-login-page message with message from portal-message-overrides group.
        """
        return pulumi.get(self, "auth_login_page")

    @auth_login_page.setter
    def auth_login_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_login_page", value)

    @property
    @pulumi.getter(name="authRejectPage")
    def auth_reject_page(self) -> Optional[pulumi.Input[str]]:
        """
        Override auth-reject-page message with message from portal-message-overrides group.
        """
        return pulumi.get(self, "auth_reject_page")

    @auth_reject_page.setter
    def auth_reject_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_reject_page", value)


@pulumi.input_type
class VapRadiusMacAuthUsergroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: User group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VapSelectedUsergroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: User group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VapUsergroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: User group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VapVlanNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: VLAN name.
        :param pulumi.Input[int] vlan_id: VLAN ID.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID.
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class VapVlanPoolArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 wtp_group: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] wtp_group: WTP group name.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if wtp_group is not None:
            pulumi.set(__self__, "wtp_group", wtp_group)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="wtpGroup")
    def wtp_group(self) -> Optional[pulumi.Input[str]]:
        """
        WTP group name.
        """
        return pulumi.get(self, "wtp_group")

    @wtp_group.setter
    def wtp_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_group", value)


@pulumi.input_type
class VapgroupVapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: vap name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        vap name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WidsprofileApBgscanDisableScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Schedule name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WidsprofileApScanChannelList2g5gArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel 6g number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel 6g number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WidsprofileApScanChannelList6gArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel 6g number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel 6g number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WtpLanArgs:
    def __init__(__self__, *,
                 port1_mode: Optional[pulumi.Input[str]] = None,
                 port1_ssid: Optional[pulumi.Input[str]] = None,
                 port2_mode: Optional[pulumi.Input[str]] = None,
                 port2_ssid: Optional[pulumi.Input[str]] = None,
                 port3_mode: Optional[pulumi.Input[str]] = None,
                 port3_ssid: Optional[pulumi.Input[str]] = None,
                 port4_mode: Optional[pulumi.Input[str]] = None,
                 port4_ssid: Optional[pulumi.Input[str]] = None,
                 port5_mode: Optional[pulumi.Input[str]] = None,
                 port5_ssid: Optional[pulumi.Input[str]] = None,
                 port6_mode: Optional[pulumi.Input[str]] = None,
                 port6_ssid: Optional[pulumi.Input[str]] = None,
                 port7_mode: Optional[pulumi.Input[str]] = None,
                 port7_ssid: Optional[pulumi.Input[str]] = None,
                 port8_mode: Optional[pulumi.Input[str]] = None,
                 port8_ssid: Optional[pulumi.Input[str]] = None,
                 port_esl_mode: Optional[pulumi.Input[str]] = None,
                 port_esl_ssid: Optional[pulumi.Input[str]] = None,
                 port_mode: Optional[pulumi.Input[str]] = None,
                 port_ssid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] port1_mode: LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port1_ssid: Bridge LAN port 1 to SSID.
        :param pulumi.Input[str] port2_mode: LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port2_ssid: Bridge LAN port 2 to SSID.
        :param pulumi.Input[str] port3_mode: LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port3_ssid: Bridge LAN port 3 to SSID.
        :param pulumi.Input[str] port4_mode: LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port4_ssid: Bridge LAN port 4 to SSID.
        :param pulumi.Input[str] port5_mode: LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port5_ssid: Bridge LAN port 5 to SSID.
        :param pulumi.Input[str] port6_mode: LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port6_ssid: Bridge LAN port 6 to SSID.
        :param pulumi.Input[str] port7_mode: LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port7_ssid: Bridge LAN port 7 to SSID.
        :param pulumi.Input[str] port8_mode: LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port8_ssid: Bridge LAN port 8 to SSID.
        :param pulumi.Input[str] port_esl_mode: ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port_esl_ssid: Bridge ESL port to SSID.
               
               The `radio_1` block supports:
        :param pulumi.Input[str] port_mode: LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port_ssid: Bridge LAN port to SSID.
        """
        if port1_mode is not None:
            pulumi.set(__self__, "port1_mode", port1_mode)
        if port1_ssid is not None:
            pulumi.set(__self__, "port1_ssid", port1_ssid)
        if port2_mode is not None:
            pulumi.set(__self__, "port2_mode", port2_mode)
        if port2_ssid is not None:
            pulumi.set(__self__, "port2_ssid", port2_ssid)
        if port3_mode is not None:
            pulumi.set(__self__, "port3_mode", port3_mode)
        if port3_ssid is not None:
            pulumi.set(__self__, "port3_ssid", port3_ssid)
        if port4_mode is not None:
            pulumi.set(__self__, "port4_mode", port4_mode)
        if port4_ssid is not None:
            pulumi.set(__self__, "port4_ssid", port4_ssid)
        if port5_mode is not None:
            pulumi.set(__self__, "port5_mode", port5_mode)
        if port5_ssid is not None:
            pulumi.set(__self__, "port5_ssid", port5_ssid)
        if port6_mode is not None:
            pulumi.set(__self__, "port6_mode", port6_mode)
        if port6_ssid is not None:
            pulumi.set(__self__, "port6_ssid", port6_ssid)
        if port7_mode is not None:
            pulumi.set(__self__, "port7_mode", port7_mode)
        if port7_ssid is not None:
            pulumi.set(__self__, "port7_ssid", port7_ssid)
        if port8_mode is not None:
            pulumi.set(__self__, "port8_mode", port8_mode)
        if port8_ssid is not None:
            pulumi.set(__self__, "port8_ssid", port8_ssid)
        if port_esl_mode is not None:
            pulumi.set(__self__, "port_esl_mode", port_esl_mode)
        if port_esl_ssid is not None:
            pulumi.set(__self__, "port_esl_ssid", port_esl_ssid)
        if port_mode is not None:
            pulumi.set(__self__, "port_mode", port_mode)
        if port_ssid is not None:
            pulumi.set(__self__, "port_ssid", port_ssid)

    @property
    @pulumi.getter(name="port1Mode")
    def port1_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port1_mode")

    @port1_mode.setter
    def port1_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port1_mode", value)

    @property
    @pulumi.getter(name="port1Ssid")
    def port1_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 1 to SSID.
        """
        return pulumi.get(self, "port1_ssid")

    @port1_ssid.setter
    def port1_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port1_ssid", value)

    @property
    @pulumi.getter(name="port2Mode")
    def port2_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port2_mode")

    @port2_mode.setter
    def port2_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port2_mode", value)

    @property
    @pulumi.getter(name="port2Ssid")
    def port2_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 2 to SSID.
        """
        return pulumi.get(self, "port2_ssid")

    @port2_ssid.setter
    def port2_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port2_ssid", value)

    @property
    @pulumi.getter(name="port3Mode")
    def port3_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port3_mode")

    @port3_mode.setter
    def port3_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port3_mode", value)

    @property
    @pulumi.getter(name="port3Ssid")
    def port3_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 3 to SSID.
        """
        return pulumi.get(self, "port3_ssid")

    @port3_ssid.setter
    def port3_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port3_ssid", value)

    @property
    @pulumi.getter(name="port4Mode")
    def port4_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port4_mode")

    @port4_mode.setter
    def port4_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port4_mode", value)

    @property
    @pulumi.getter(name="port4Ssid")
    def port4_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 4 to SSID.
        """
        return pulumi.get(self, "port4_ssid")

    @port4_ssid.setter
    def port4_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port4_ssid", value)

    @property
    @pulumi.getter(name="port5Mode")
    def port5_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port5_mode")

    @port5_mode.setter
    def port5_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port5_mode", value)

    @property
    @pulumi.getter(name="port5Ssid")
    def port5_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 5 to SSID.
        """
        return pulumi.get(self, "port5_ssid")

    @port5_ssid.setter
    def port5_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port5_ssid", value)

    @property
    @pulumi.getter(name="port6Mode")
    def port6_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port6_mode")

    @port6_mode.setter
    def port6_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port6_mode", value)

    @property
    @pulumi.getter(name="port6Ssid")
    def port6_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 6 to SSID.
        """
        return pulumi.get(self, "port6_ssid")

    @port6_ssid.setter
    def port6_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port6_ssid", value)

    @property
    @pulumi.getter(name="port7Mode")
    def port7_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port7_mode")

    @port7_mode.setter
    def port7_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port7_mode", value)

    @property
    @pulumi.getter(name="port7Ssid")
    def port7_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 7 to SSID.
        """
        return pulumi.get(self, "port7_ssid")

    @port7_ssid.setter
    def port7_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port7_ssid", value)

    @property
    @pulumi.getter(name="port8Mode")
    def port8_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port8_mode")

    @port8_mode.setter
    def port8_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port8_mode", value)

    @property
    @pulumi.getter(name="port8Ssid")
    def port8_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 8 to SSID.
        """
        return pulumi.get(self, "port8_ssid")

    @port8_ssid.setter
    def port8_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port8_ssid", value)

    @property
    @pulumi.getter(name="portEslMode")
    def port_esl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port_esl_mode")

    @port_esl_mode.setter
    def port_esl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_esl_mode", value)

    @property
    @pulumi.getter(name="portEslSsid")
    def port_esl_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge ESL port to SSID.

        The `radio_1` block supports:
        """
        return pulumi.get(self, "port_esl_ssid")

    @port_esl_ssid.setter
    def port_esl_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_esl_ssid", value)

    @property
    @pulumi.getter(name="portMode")
    def port_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port_mode")

    @port_mode.setter
    def port_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_mode", value)

    @property
    @pulumi.getter(name="portSsid")
    def port_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port to SSID.
        """
        return pulumi.get(self, "port_ssid")

    @port_ssid.setter
    def port_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_ssid", value)


@pulumi.input_type
class WtpRadio1Args:
    def __init__(__self__, *,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio1ChannelArgs']]]] = None,
                 drma_manual_mode: Optional[pulumi.Input[str]] = None,
                 override_analysis: Optional[pulumi.Input[str]] = None,
                 override_band: Optional[pulumi.Input[str]] = None,
                 override_channel: Optional[pulumi.Input[str]] = None,
                 override_txpower: Optional[pulumi.Input[str]] = None,
                 override_vaps: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 radio_id: Optional[pulumi.Input[int]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio1VapArgs']]]] = None):
        """
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 4 operates on.
        :param pulumi.Input[Sequence[pulumi.Input['WtpRadio1ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] drma_manual_mode: Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        :param pulumi.Input[str] override_analysis: Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_band: Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_channel: Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_txpower: Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_vaps: Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[int] radio_id: radio-id
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WtpRadio1VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 4 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio1ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio1ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        """
        return pulumi.get(self, "drma_manual_mode")

    @drma_manual_mode.setter
    def drma_manual_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_manual_mode", value)

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_analysis")

    @override_analysis.setter
    def override_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_analysis", value)

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_band")

    @override_band.setter
    def override_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_band", value)

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_channel")

    @override_channel.setter
    def override_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_channel", value)

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_txpower")

    @override_txpower.setter
    def override_txpower(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_txpower", value)

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_vaps")

    @override_vaps.setter
    def override_vaps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_vaps", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[pulumi.Input[int]]:
        """
        radio-id
        """
        return pulumi.get(self, "radio_id")

    @radio_id.setter
    def radio_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radio_id", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio1VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio1VapArgs']]]]):
        pulumi.set(self, "vaps", value)


@pulumi.input_type
class WtpRadio1ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WtpRadio1VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WtpRadio2Args:
    def __init__(__self__, *,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio2ChannelArgs']]]] = None,
                 drma_manual_mode: Optional[pulumi.Input[str]] = None,
                 override_analysis: Optional[pulumi.Input[str]] = None,
                 override_band: Optional[pulumi.Input[str]] = None,
                 override_channel: Optional[pulumi.Input[str]] = None,
                 override_txpower: Optional[pulumi.Input[str]] = None,
                 override_vaps: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 radio_id: Optional[pulumi.Input[int]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio2VapArgs']]]] = None):
        """
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 4 operates on.
        :param pulumi.Input[Sequence[pulumi.Input['WtpRadio2ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] drma_manual_mode: Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        :param pulumi.Input[str] override_analysis: Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_band: Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_channel: Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_txpower: Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_vaps: Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[int] radio_id: radio-id
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WtpRadio2VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 4 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio2ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio2ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        """
        return pulumi.get(self, "drma_manual_mode")

    @drma_manual_mode.setter
    def drma_manual_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_manual_mode", value)

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_analysis")

    @override_analysis.setter
    def override_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_analysis", value)

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_band")

    @override_band.setter
    def override_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_band", value)

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_channel")

    @override_channel.setter
    def override_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_channel", value)

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_txpower")

    @override_txpower.setter
    def override_txpower(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_txpower", value)

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_vaps")

    @override_vaps.setter
    def override_vaps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_vaps", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[pulumi.Input[int]]:
        """
        radio-id
        """
        return pulumi.get(self, "radio_id")

    @radio_id.setter
    def radio_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radio_id", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio2VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio2VapArgs']]]]):
        pulumi.set(self, "vaps", value)


@pulumi.input_type
class WtpRadio2ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WtpRadio2VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WtpRadio3Args:
    def __init__(__self__, *,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio3ChannelArgs']]]] = None,
                 drma_manual_mode: Optional[pulumi.Input[str]] = None,
                 override_analysis: Optional[pulumi.Input[str]] = None,
                 override_band: Optional[pulumi.Input[str]] = None,
                 override_channel: Optional[pulumi.Input[str]] = None,
                 override_txpower: Optional[pulumi.Input[str]] = None,
                 override_vaps: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio3VapArgs']]]] = None):
        """
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 4 operates on.
        :param pulumi.Input[Sequence[pulumi.Input['WtpRadio3ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] drma_manual_mode: Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        :param pulumi.Input[str] override_analysis: Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_band: Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_channel: Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_txpower: Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_vaps: Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WtpRadio3VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 4 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio3ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio3ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        """
        return pulumi.get(self, "drma_manual_mode")

    @drma_manual_mode.setter
    def drma_manual_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_manual_mode", value)

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_analysis")

    @override_analysis.setter
    def override_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_analysis", value)

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_band")

    @override_band.setter
    def override_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_band", value)

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_channel")

    @override_channel.setter
    def override_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_channel", value)

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_txpower")

    @override_txpower.setter
    def override_txpower(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_txpower", value)

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_vaps")

    @override_vaps.setter
    def override_vaps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_vaps", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio3VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio3VapArgs']]]]):
        pulumi.set(self, "vaps", value)


@pulumi.input_type
class WtpRadio3ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WtpRadio3VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WtpRadio4Args:
    def __init__(__self__, *,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio4ChannelArgs']]]] = None,
                 drma_manual_mode: Optional[pulumi.Input[str]] = None,
                 override_analysis: Optional[pulumi.Input[str]] = None,
                 override_band: Optional[pulumi.Input[str]] = None,
                 override_channel: Optional[pulumi.Input[str]] = None,
                 override_txpower: Optional[pulumi.Input[str]] = None,
                 override_vaps: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio4VapArgs']]]] = None):
        """
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 4 operates on.
        :param pulumi.Input[Sequence[pulumi.Input['WtpRadio4ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] drma_manual_mode: Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        :param pulumi.Input[str] override_analysis: Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_band: Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_channel: Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_txpower: Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_vaps: Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WtpRadio4VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 4 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio4ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio4ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        """
        return pulumi.get(self, "drma_manual_mode")

    @drma_manual_mode.setter
    def drma_manual_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_manual_mode", value)

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_analysis")

    @override_analysis.setter
    def override_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_analysis", value)

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_band")

    @override_band.setter
    def override_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_band", value)

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_channel")

    @override_channel.setter
    def override_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_channel", value)

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_txpower")

    @override_txpower.setter
    def override_txpower(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_txpower", value)

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_vaps")

    @override_vaps.setter
    def override_vaps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_vaps", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio4VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpRadio4VapArgs']]]]):
        pulumi.set(self, "vaps", value)


@pulumi.input_type
class WtpRadio4ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WtpRadio4VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WtpSplitTunnelingAclArgs:
    def __init__(__self__, *,
                 dest_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dest_ip: Destination IP and mask for the split-tunneling subnet.
        :param pulumi.Input[int] id: ID.
        """
        if dest_ip is not None:
            pulumi.set(__self__, "dest_ip", dest_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IP and mask for the split-tunneling subnet.
        """
        return pulumi.get(self, "dest_ip")

    @dest_ip.setter
    def dest_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WtpgroupWtpArgs:
    def __init__(__self__, *,
                 wtp_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] wtp_id: WTP ID.
        """
        if wtp_id is not None:
            pulumi.set(__self__, "wtp_id", wtp_id)

    @property
    @pulumi.getter(name="wtpId")
    def wtp_id(self) -> Optional[pulumi.Input[str]]:
        """
        WTP ID.
        """
        return pulumi.get(self, "wtp_id")

    @wtp_id.setter
    def wtp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_id", value)


@pulumi.input_type
class WtpprofileDenyMacListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] mac: A WiFi device with this MAC address is denied access to this WTP, FortiAP or AP.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        A WiFi device with this MAC address is denied access to this WTP, FortiAP or AP.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)


@pulumi.input_type
class WtpprofileEslSesDongleArgs:
    def __init__(__self__, *,
                 apc_addr_type: Optional[pulumi.Input[str]] = None,
                 apc_fqdn: Optional[pulumi.Input[str]] = None,
                 apc_ip: Optional[pulumi.Input[str]] = None,
                 apc_port: Optional[pulumi.Input[int]] = None,
                 coex_level: Optional[pulumi.Input[str]] = None,
                 compliance_level: Optional[pulumi.Input[str]] = None,
                 esl_channel: Optional[pulumi.Input[str]] = None,
                 output_power: Optional[pulumi.Input[str]] = None,
                 scd_enable: Optional[pulumi.Input[str]] = None,
                 tls_cert_verification: Optional[pulumi.Input[str]] = None,
                 tls_fqdn_verification: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] apc_addr_type: ESL SES-imagotag APC address type (default = fqdn). Valid values: `fqdn`, `ip`.
        :param pulumi.Input[str] apc_fqdn: FQDN of ESL SES-imagotag Access Point Controller (APC).
        :param pulumi.Input[str] apc_ip: IP address of ESL SES-imagotag Access Point Controller (APC).
        :param pulumi.Input[int] apc_port: Port of ESL SES-imagotag Access Point Controller (APC).
        :param pulumi.Input[str] coex_level: ESL SES-imagotag dongle coexistence level (default = none). Valid values: `none`.
        :param pulumi.Input[str] compliance_level: Compliance levels for the ESL solution integration (default = compliance-level-2). Valid values: `compliance-level-2`.
        :param pulumi.Input[str] esl_channel: ESL SES-imagotag dongle channel (default = 127). Valid values: `-1`, `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `127`.
        :param pulumi.Input[str] output_power: ESL SES-imagotag dongle output power (default = A). Valid values: `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`.
        :param pulumi.Input[str] scd_enable: Enable/disable ESL SES-imagotag Serial Communication Daemon (SCD) (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tls_cert_verification: Enable/disable TLS Certificate verification. (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tls_fqdn_verification: Enable/disable TLS Certificate verification. (default = disable). Valid values: `enable`, `disable`.
        """
        if apc_addr_type is not None:
            pulumi.set(__self__, "apc_addr_type", apc_addr_type)
        if apc_fqdn is not None:
            pulumi.set(__self__, "apc_fqdn", apc_fqdn)
        if apc_ip is not None:
            pulumi.set(__self__, "apc_ip", apc_ip)
        if apc_port is not None:
            pulumi.set(__self__, "apc_port", apc_port)
        if coex_level is not None:
            pulumi.set(__self__, "coex_level", coex_level)
        if compliance_level is not None:
            pulumi.set(__self__, "compliance_level", compliance_level)
        if esl_channel is not None:
            pulumi.set(__self__, "esl_channel", esl_channel)
        if output_power is not None:
            pulumi.set(__self__, "output_power", output_power)
        if scd_enable is not None:
            pulumi.set(__self__, "scd_enable", scd_enable)
        if tls_cert_verification is not None:
            pulumi.set(__self__, "tls_cert_verification", tls_cert_verification)
        if tls_fqdn_verification is not None:
            pulumi.set(__self__, "tls_fqdn_verification", tls_fqdn_verification)

    @property
    @pulumi.getter(name="apcAddrType")
    def apc_addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        ESL SES-imagotag APC address type (default = fqdn). Valid values: `fqdn`, `ip`.
        """
        return pulumi.get(self, "apc_addr_type")

    @apc_addr_type.setter
    def apc_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apc_addr_type", value)

    @property
    @pulumi.getter(name="apcFqdn")
    def apc_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN of ESL SES-imagotag Access Point Controller (APC).
        """
        return pulumi.get(self, "apc_fqdn")

    @apc_fqdn.setter
    def apc_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apc_fqdn", value)

    @property
    @pulumi.getter(name="apcIp")
    def apc_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of ESL SES-imagotag Access Point Controller (APC).
        """
        return pulumi.get(self, "apc_ip")

    @apc_ip.setter
    def apc_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apc_ip", value)

    @property
    @pulumi.getter(name="apcPort")
    def apc_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of ESL SES-imagotag Access Point Controller (APC).
        """
        return pulumi.get(self, "apc_port")

    @apc_port.setter
    def apc_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "apc_port", value)

    @property
    @pulumi.getter(name="coexLevel")
    def coex_level(self) -> Optional[pulumi.Input[str]]:
        """
        ESL SES-imagotag dongle coexistence level (default = none). Valid values: `none`.
        """
        return pulumi.get(self, "coex_level")

    @coex_level.setter
    def coex_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coex_level", value)

    @property
    @pulumi.getter(name="complianceLevel")
    def compliance_level(self) -> Optional[pulumi.Input[str]]:
        """
        Compliance levels for the ESL solution integration (default = compliance-level-2). Valid values: `compliance-level-2`.
        """
        return pulumi.get(self, "compliance_level")

    @compliance_level.setter
    def compliance_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compliance_level", value)

    @property
    @pulumi.getter(name="eslChannel")
    def esl_channel(self) -> Optional[pulumi.Input[str]]:
        """
        ESL SES-imagotag dongle channel (default = 127). Valid values: `-1`, `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `127`.
        """
        return pulumi.get(self, "esl_channel")

    @esl_channel.setter
    def esl_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "esl_channel", value)

    @property
    @pulumi.getter(name="outputPower")
    def output_power(self) -> Optional[pulumi.Input[str]]:
        """
        ESL SES-imagotag dongle output power (default = A). Valid values: `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`.
        """
        return pulumi.get(self, "output_power")

    @output_power.setter
    def output_power(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_power", value)

    @property
    @pulumi.getter(name="scdEnable")
    def scd_enable(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ESL SES-imagotag Serial Communication Daemon (SCD) (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scd_enable")

    @scd_enable.setter
    def scd_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scd_enable", value)

    @property
    @pulumi.getter(name="tlsCertVerification")
    def tls_cert_verification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable TLS Certificate verification. (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tls_cert_verification")

    @tls_cert_verification.setter
    def tls_cert_verification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_cert_verification", value)

    @property
    @pulumi.getter(name="tlsFqdnVerification")
    def tls_fqdn_verification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable TLS Certificate verification. (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tls_fqdn_verification")

    @tls_fqdn_verification.setter
    def tls_fqdn_verification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_fqdn_verification", value)


@pulumi.input_type
class WtpprofileLanArgs:
    def __init__(__self__, *,
                 port1_mode: Optional[pulumi.Input[str]] = None,
                 port1_ssid: Optional[pulumi.Input[str]] = None,
                 port2_mode: Optional[pulumi.Input[str]] = None,
                 port2_ssid: Optional[pulumi.Input[str]] = None,
                 port3_mode: Optional[pulumi.Input[str]] = None,
                 port3_ssid: Optional[pulumi.Input[str]] = None,
                 port4_mode: Optional[pulumi.Input[str]] = None,
                 port4_ssid: Optional[pulumi.Input[str]] = None,
                 port5_mode: Optional[pulumi.Input[str]] = None,
                 port5_ssid: Optional[pulumi.Input[str]] = None,
                 port6_mode: Optional[pulumi.Input[str]] = None,
                 port6_ssid: Optional[pulumi.Input[str]] = None,
                 port7_mode: Optional[pulumi.Input[str]] = None,
                 port7_ssid: Optional[pulumi.Input[str]] = None,
                 port8_mode: Optional[pulumi.Input[str]] = None,
                 port8_ssid: Optional[pulumi.Input[str]] = None,
                 port_esl_mode: Optional[pulumi.Input[str]] = None,
                 port_esl_ssid: Optional[pulumi.Input[str]] = None,
                 port_mode: Optional[pulumi.Input[str]] = None,
                 port_ssid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] port1_mode: LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port1_ssid: Bridge LAN port 1 to SSID.
        :param pulumi.Input[str] port2_mode: LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port2_ssid: Bridge LAN port 2 to SSID.
        :param pulumi.Input[str] port3_mode: LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port3_ssid: Bridge LAN port 3 to SSID.
        :param pulumi.Input[str] port4_mode: LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port4_ssid: Bridge LAN port 4 to SSID.
        :param pulumi.Input[str] port5_mode: LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port5_ssid: Bridge LAN port 5 to SSID.
        :param pulumi.Input[str] port6_mode: LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port6_ssid: Bridge LAN port 6 to SSID.
        :param pulumi.Input[str] port7_mode: LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port7_ssid: Bridge LAN port 7 to SSID.
        :param pulumi.Input[str] port8_mode: LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port8_ssid: Bridge LAN port 8 to SSID.
        :param pulumi.Input[str] port_esl_mode: ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port_esl_ssid: Bridge ESL port to SSID.
        :param pulumi.Input[str] port_mode: LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port_ssid: Bridge LAN port to SSID.
        """
        if port1_mode is not None:
            pulumi.set(__self__, "port1_mode", port1_mode)
        if port1_ssid is not None:
            pulumi.set(__self__, "port1_ssid", port1_ssid)
        if port2_mode is not None:
            pulumi.set(__self__, "port2_mode", port2_mode)
        if port2_ssid is not None:
            pulumi.set(__self__, "port2_ssid", port2_ssid)
        if port3_mode is not None:
            pulumi.set(__self__, "port3_mode", port3_mode)
        if port3_ssid is not None:
            pulumi.set(__self__, "port3_ssid", port3_ssid)
        if port4_mode is not None:
            pulumi.set(__self__, "port4_mode", port4_mode)
        if port4_ssid is not None:
            pulumi.set(__self__, "port4_ssid", port4_ssid)
        if port5_mode is not None:
            pulumi.set(__self__, "port5_mode", port5_mode)
        if port5_ssid is not None:
            pulumi.set(__self__, "port5_ssid", port5_ssid)
        if port6_mode is not None:
            pulumi.set(__self__, "port6_mode", port6_mode)
        if port6_ssid is not None:
            pulumi.set(__self__, "port6_ssid", port6_ssid)
        if port7_mode is not None:
            pulumi.set(__self__, "port7_mode", port7_mode)
        if port7_ssid is not None:
            pulumi.set(__self__, "port7_ssid", port7_ssid)
        if port8_mode is not None:
            pulumi.set(__self__, "port8_mode", port8_mode)
        if port8_ssid is not None:
            pulumi.set(__self__, "port8_ssid", port8_ssid)
        if port_esl_mode is not None:
            pulumi.set(__self__, "port_esl_mode", port_esl_mode)
        if port_esl_ssid is not None:
            pulumi.set(__self__, "port_esl_ssid", port_esl_ssid)
        if port_mode is not None:
            pulumi.set(__self__, "port_mode", port_mode)
        if port_ssid is not None:
            pulumi.set(__self__, "port_ssid", port_ssid)

    @property
    @pulumi.getter(name="port1Mode")
    def port1_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port1_mode")

    @port1_mode.setter
    def port1_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port1_mode", value)

    @property
    @pulumi.getter(name="port1Ssid")
    def port1_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 1 to SSID.
        """
        return pulumi.get(self, "port1_ssid")

    @port1_ssid.setter
    def port1_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port1_ssid", value)

    @property
    @pulumi.getter(name="port2Mode")
    def port2_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port2_mode")

    @port2_mode.setter
    def port2_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port2_mode", value)

    @property
    @pulumi.getter(name="port2Ssid")
    def port2_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 2 to SSID.
        """
        return pulumi.get(self, "port2_ssid")

    @port2_ssid.setter
    def port2_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port2_ssid", value)

    @property
    @pulumi.getter(name="port3Mode")
    def port3_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port3_mode")

    @port3_mode.setter
    def port3_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port3_mode", value)

    @property
    @pulumi.getter(name="port3Ssid")
    def port3_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 3 to SSID.
        """
        return pulumi.get(self, "port3_ssid")

    @port3_ssid.setter
    def port3_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port3_ssid", value)

    @property
    @pulumi.getter(name="port4Mode")
    def port4_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port4_mode")

    @port4_mode.setter
    def port4_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port4_mode", value)

    @property
    @pulumi.getter(name="port4Ssid")
    def port4_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 4 to SSID.
        """
        return pulumi.get(self, "port4_ssid")

    @port4_ssid.setter
    def port4_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port4_ssid", value)

    @property
    @pulumi.getter(name="port5Mode")
    def port5_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port5_mode")

    @port5_mode.setter
    def port5_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port5_mode", value)

    @property
    @pulumi.getter(name="port5Ssid")
    def port5_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 5 to SSID.
        """
        return pulumi.get(self, "port5_ssid")

    @port5_ssid.setter
    def port5_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port5_ssid", value)

    @property
    @pulumi.getter(name="port6Mode")
    def port6_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port6_mode")

    @port6_mode.setter
    def port6_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port6_mode", value)

    @property
    @pulumi.getter(name="port6Ssid")
    def port6_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 6 to SSID.
        """
        return pulumi.get(self, "port6_ssid")

    @port6_ssid.setter
    def port6_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port6_ssid", value)

    @property
    @pulumi.getter(name="port7Mode")
    def port7_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port7_mode")

    @port7_mode.setter
    def port7_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port7_mode", value)

    @property
    @pulumi.getter(name="port7Ssid")
    def port7_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 7 to SSID.
        """
        return pulumi.get(self, "port7_ssid")

    @port7_ssid.setter
    def port7_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port7_ssid", value)

    @property
    @pulumi.getter(name="port8Mode")
    def port8_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port8_mode")

    @port8_mode.setter
    def port8_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port8_mode", value)

    @property
    @pulumi.getter(name="port8Ssid")
    def port8_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 8 to SSID.
        """
        return pulumi.get(self, "port8_ssid")

    @port8_ssid.setter
    def port8_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port8_ssid", value)

    @property
    @pulumi.getter(name="portEslMode")
    def port_esl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port_esl_mode")

    @port_esl_mode.setter
    def port_esl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_esl_mode", value)

    @property
    @pulumi.getter(name="portEslSsid")
    def port_esl_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge ESL port to SSID.
        """
        return pulumi.get(self, "port_esl_ssid")

    @port_esl_ssid.setter
    def port_esl_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_esl_ssid", value)

    @property
    @pulumi.getter(name="portMode")
    def port_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port_mode")

    @port_mode.setter
    def port_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_mode", value)

    @property
    @pulumi.getter(name="portSsid")
    def port_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port to SSID.
        """
        return pulumi.get(self, "port_ssid")

    @port_ssid.setter
    def port_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_ssid", value)


@pulumi.input_type
class WtpprofileLbsArgs:
    def __init__(__self__, *,
                 aeroscout: Optional[pulumi.Input[str]] = None,
                 aeroscout_ap_mac: Optional[pulumi.Input[str]] = None,
                 aeroscout_mmu_report: Optional[pulumi.Input[str]] = None,
                 aeroscout_mu: Optional[pulumi.Input[str]] = None,
                 aeroscout_mu_factor: Optional[pulumi.Input[int]] = None,
                 aeroscout_mu_timeout: Optional[pulumi.Input[int]] = None,
                 aeroscout_server_ip: Optional[pulumi.Input[str]] = None,
                 aeroscout_server_port: Optional[pulumi.Input[int]] = None,
                 ekahau_blink_mode: Optional[pulumi.Input[str]] = None,
                 ekahau_tag: Optional[pulumi.Input[str]] = None,
                 erc_server_ip: Optional[pulumi.Input[str]] = None,
                 erc_server_port: Optional[pulumi.Input[int]] = None,
                 fortipresence: Optional[pulumi.Input[str]] = None,
                 fortipresence_ble: Optional[pulumi.Input[str]] = None,
                 fortipresence_frequency: Optional[pulumi.Input[int]] = None,
                 fortipresence_port: Optional[pulumi.Input[int]] = None,
                 fortipresence_project: Optional[pulumi.Input[str]] = None,
                 fortipresence_rogue: Optional[pulumi.Input[str]] = None,
                 fortipresence_secret: Optional[pulumi.Input[str]] = None,
                 fortipresence_server: Optional[pulumi.Input[str]] = None,
                 fortipresence_server_addr_type: Optional[pulumi.Input[str]] = None,
                 fortipresence_server_fqdn: Optional[pulumi.Input[str]] = None,
                 fortipresence_unassoc: Optional[pulumi.Input[str]] = None,
                 polestar: Optional[pulumi.Input[str]] = None,
                 polestar_accumulation_interval: Optional[pulumi.Input[int]] = None,
                 polestar_asset_addrgrp_list: Optional[pulumi.Input[str]] = None,
                 polestar_asset_uuid_list1: Optional[pulumi.Input[str]] = None,
                 polestar_asset_uuid_list2: Optional[pulumi.Input[str]] = None,
                 polestar_asset_uuid_list3: Optional[pulumi.Input[str]] = None,
                 polestar_asset_uuid_list4: Optional[pulumi.Input[str]] = None,
                 polestar_protocol: Optional[pulumi.Input[str]] = None,
                 polestar_reporting_interval: Optional[pulumi.Input[int]] = None,
                 polestar_server_fqdn: Optional[pulumi.Input[str]] = None,
                 polestar_server_path: Optional[pulumi.Input[str]] = None,
                 polestar_server_port: Optional[pulumi.Input[int]] = None,
                 polestar_server_token: Optional[pulumi.Input[str]] = None,
                 station_locate: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aeroscout: Enable/disable AeroScout Real Time Location Service (RTLS) support. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] aeroscout_ap_mac: Use BSSID or board MAC address as AP MAC address in the Aeroscout AP message. Valid values: `bssid`, `board-mac`.
        :param pulumi.Input[str] aeroscout_mmu_report: Enable/disable MU compounded report. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] aeroscout_mu: Enable/disable AeroScout support. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] aeroscout_mu_factor: AeroScout Mobile Unit (MU) mode dilution factor (default = 20).
        :param pulumi.Input[int] aeroscout_mu_timeout: AeroScout MU mode timeout (0 - 65535 sec, default = 5).
        :param pulumi.Input[str] aeroscout_server_ip: IP address of AeroScout server.
        :param pulumi.Input[int] aeroscout_server_port: AeroScout server UDP listening port.
        :param pulumi.Input[str] ekahau_blink_mode: Enable/disable Ekahua blink mode (also called AiRISTA Flow Blink Mode) to find the location of devices connected to a wireless LAN (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ekahau_tag: WiFi frame MAC address or WiFi Tag.
        :param pulumi.Input[str] erc_server_ip: IP address of Ekahua RTLS Controller (ERC).
        :param pulumi.Input[int] erc_server_port: Ekahua RTLS Controller (ERC) UDP listening port.
        :param pulumi.Input[str] fortipresence: Enable/disable FortiPresence to monitor the location and activity of WiFi clients even if they don't connect to this WiFi network (default = disable). Valid values: `foreign`, `both`, `disable`.
        :param pulumi.Input[str] fortipresence_ble: Enable/disable FortiPresence finding and reporting BLE devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fortipresence_frequency: FortiPresence report transmit frequency (5 - 65535 sec, default = 30).
        :param pulumi.Input[int] fortipresence_port: FortiPresence server UDP listening port (default = 3000).
        :param pulumi.Input[str] fortipresence_project: FortiPresence project name (max. 16 characters, default = fortipresence).
        :param pulumi.Input[str] fortipresence_rogue: Enable/disable FortiPresence finding and reporting rogue APs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortipresence_secret: FortiPresence secret password (max. 16 characters).
        :param pulumi.Input[str] fortipresence_server: FortiPresence server IP address.
        :param pulumi.Input[str] fortipresence_server_addr_type: FortiPresence server address type (default = ipv4). Valid values: `ipv4`, `fqdn`.
        :param pulumi.Input[str] fortipresence_server_fqdn: FQDN of FortiPresence server.
        :param pulumi.Input[str] fortipresence_unassoc: Enable/disable FortiPresence finding and reporting unassociated stations. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] polestar: Enable/disable PoleStar BLE NAO Track Real Time Location Service (RTLS) support (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] polestar_accumulation_interval: Time that measurements should be accumulated in seconds (default = 2).
        :param pulumi.Input[str] polestar_asset_addrgrp_list: Tags and asset addrgrp list to be reported.
        :param pulumi.Input[str] polestar_asset_uuid_list1: Tags and asset UUID list 1 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
        :param pulumi.Input[str] polestar_asset_uuid_list2: Tags and asset UUID list 2 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
        :param pulumi.Input[str] polestar_asset_uuid_list3: Tags and asset UUID list 3 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
        :param pulumi.Input[str] polestar_asset_uuid_list4: Tags and asset UUID list 4 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
        :param pulumi.Input[str] polestar_protocol: Select the protocol to report Measurements, Advertising Data, or Location Data to NAO Cloud. (default = WSS). Valid values: `WSS`.
        :param pulumi.Input[int] polestar_reporting_interval: Time between reporting accumulated measurements in seconds (default = 2).
        :param pulumi.Input[str] polestar_server_fqdn: FQDN of PoleStar Nao Track Server (default = ws.nao-cloud.com).
        :param pulumi.Input[str] polestar_server_path: Path of PoleStar Nao Track Server (default = /v1/token/<access_token>/pst-v2).
        :param pulumi.Input[int] polestar_server_port: Port of PoleStar Nao Track Server (default = 443).
        :param pulumi.Input[str] polestar_server_token: Access Token of PoleStar Nao Track Server.
        :param pulumi.Input[str] station_locate: Enable/disable client station locating services for all clients, whether associated or not (default = disable). Valid values: `enable`, `disable`.
        """
        if aeroscout is not None:
            pulumi.set(__self__, "aeroscout", aeroscout)
        if aeroscout_ap_mac is not None:
            pulumi.set(__self__, "aeroscout_ap_mac", aeroscout_ap_mac)
        if aeroscout_mmu_report is not None:
            pulumi.set(__self__, "aeroscout_mmu_report", aeroscout_mmu_report)
        if aeroscout_mu is not None:
            pulumi.set(__self__, "aeroscout_mu", aeroscout_mu)
        if aeroscout_mu_factor is not None:
            pulumi.set(__self__, "aeroscout_mu_factor", aeroscout_mu_factor)
        if aeroscout_mu_timeout is not None:
            pulumi.set(__self__, "aeroscout_mu_timeout", aeroscout_mu_timeout)
        if aeroscout_server_ip is not None:
            pulumi.set(__self__, "aeroscout_server_ip", aeroscout_server_ip)
        if aeroscout_server_port is not None:
            pulumi.set(__self__, "aeroscout_server_port", aeroscout_server_port)
        if ekahau_blink_mode is not None:
            pulumi.set(__self__, "ekahau_blink_mode", ekahau_blink_mode)
        if ekahau_tag is not None:
            pulumi.set(__self__, "ekahau_tag", ekahau_tag)
        if erc_server_ip is not None:
            pulumi.set(__self__, "erc_server_ip", erc_server_ip)
        if erc_server_port is not None:
            pulumi.set(__self__, "erc_server_port", erc_server_port)
        if fortipresence is not None:
            pulumi.set(__self__, "fortipresence", fortipresence)
        if fortipresence_ble is not None:
            pulumi.set(__self__, "fortipresence_ble", fortipresence_ble)
        if fortipresence_frequency is not None:
            pulumi.set(__self__, "fortipresence_frequency", fortipresence_frequency)
        if fortipresence_port is not None:
            pulumi.set(__self__, "fortipresence_port", fortipresence_port)
        if fortipresence_project is not None:
            pulumi.set(__self__, "fortipresence_project", fortipresence_project)
        if fortipresence_rogue is not None:
            pulumi.set(__self__, "fortipresence_rogue", fortipresence_rogue)
        if fortipresence_secret is not None:
            pulumi.set(__self__, "fortipresence_secret", fortipresence_secret)
        if fortipresence_server is not None:
            pulumi.set(__self__, "fortipresence_server", fortipresence_server)
        if fortipresence_server_addr_type is not None:
            pulumi.set(__self__, "fortipresence_server_addr_type", fortipresence_server_addr_type)
        if fortipresence_server_fqdn is not None:
            pulumi.set(__self__, "fortipresence_server_fqdn", fortipresence_server_fqdn)
        if fortipresence_unassoc is not None:
            pulumi.set(__self__, "fortipresence_unassoc", fortipresence_unassoc)
        if polestar is not None:
            pulumi.set(__self__, "polestar", polestar)
        if polestar_accumulation_interval is not None:
            pulumi.set(__self__, "polestar_accumulation_interval", polestar_accumulation_interval)
        if polestar_asset_addrgrp_list is not None:
            pulumi.set(__self__, "polestar_asset_addrgrp_list", polestar_asset_addrgrp_list)
        if polestar_asset_uuid_list1 is not None:
            pulumi.set(__self__, "polestar_asset_uuid_list1", polestar_asset_uuid_list1)
        if polestar_asset_uuid_list2 is not None:
            pulumi.set(__self__, "polestar_asset_uuid_list2", polestar_asset_uuid_list2)
        if polestar_asset_uuid_list3 is not None:
            pulumi.set(__self__, "polestar_asset_uuid_list3", polestar_asset_uuid_list3)
        if polestar_asset_uuid_list4 is not None:
            pulumi.set(__self__, "polestar_asset_uuid_list4", polestar_asset_uuid_list4)
        if polestar_protocol is not None:
            pulumi.set(__self__, "polestar_protocol", polestar_protocol)
        if polestar_reporting_interval is not None:
            pulumi.set(__self__, "polestar_reporting_interval", polestar_reporting_interval)
        if polestar_server_fqdn is not None:
            pulumi.set(__self__, "polestar_server_fqdn", polestar_server_fqdn)
        if polestar_server_path is not None:
            pulumi.set(__self__, "polestar_server_path", polestar_server_path)
        if polestar_server_port is not None:
            pulumi.set(__self__, "polestar_server_port", polestar_server_port)
        if polestar_server_token is not None:
            pulumi.set(__self__, "polestar_server_token", polestar_server_token)
        if station_locate is not None:
            pulumi.set(__self__, "station_locate", station_locate)

    @property
    @pulumi.getter
    def aeroscout(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AeroScout Real Time Location Service (RTLS) support. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "aeroscout")

    @aeroscout.setter
    def aeroscout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout", value)

    @property
    @pulumi.getter(name="aeroscoutApMac")
    def aeroscout_ap_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Use BSSID or board MAC address as AP MAC address in the Aeroscout AP message. Valid values: `bssid`, `board-mac`.
        """
        return pulumi.get(self, "aeroscout_ap_mac")

    @aeroscout_ap_mac.setter
    def aeroscout_ap_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout_ap_mac", value)

    @property
    @pulumi.getter(name="aeroscoutMmuReport")
    def aeroscout_mmu_report(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MU compounded report. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "aeroscout_mmu_report")

    @aeroscout_mmu_report.setter
    def aeroscout_mmu_report(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout_mmu_report", value)

    @property
    @pulumi.getter(name="aeroscoutMu")
    def aeroscout_mu(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AeroScout support. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "aeroscout_mu")

    @aeroscout_mu.setter
    def aeroscout_mu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout_mu", value)

    @property
    @pulumi.getter(name="aeroscoutMuFactor")
    def aeroscout_mu_factor(self) -> Optional[pulumi.Input[int]]:
        """
        AeroScout Mobile Unit (MU) mode dilution factor (default = 20).
        """
        return pulumi.get(self, "aeroscout_mu_factor")

    @aeroscout_mu_factor.setter
    def aeroscout_mu_factor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aeroscout_mu_factor", value)

    @property
    @pulumi.getter(name="aeroscoutMuTimeout")
    def aeroscout_mu_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        AeroScout MU mode timeout (0 - 65535 sec, default = 5).
        """
        return pulumi.get(self, "aeroscout_mu_timeout")

    @aeroscout_mu_timeout.setter
    def aeroscout_mu_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aeroscout_mu_timeout", value)

    @property
    @pulumi.getter(name="aeroscoutServerIp")
    def aeroscout_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of AeroScout server.
        """
        return pulumi.get(self, "aeroscout_server_ip")

    @aeroscout_server_ip.setter
    def aeroscout_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout_server_ip", value)

    @property
    @pulumi.getter(name="aeroscoutServerPort")
    def aeroscout_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        AeroScout server UDP listening port.
        """
        return pulumi.get(self, "aeroscout_server_port")

    @aeroscout_server_port.setter
    def aeroscout_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aeroscout_server_port", value)

    @property
    @pulumi.getter(name="ekahauBlinkMode")
    def ekahau_blink_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Ekahua blink mode (also called AiRISTA Flow Blink Mode) to find the location of devices connected to a wireless LAN (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ekahau_blink_mode")

    @ekahau_blink_mode.setter
    def ekahau_blink_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ekahau_blink_mode", value)

    @property
    @pulumi.getter(name="ekahauTag")
    def ekahau_tag(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi frame MAC address or WiFi Tag.
        """
        return pulumi.get(self, "ekahau_tag")

    @ekahau_tag.setter
    def ekahau_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ekahau_tag", value)

    @property
    @pulumi.getter(name="ercServerIp")
    def erc_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of Ekahua RTLS Controller (ERC).
        """
        return pulumi.get(self, "erc_server_ip")

    @erc_server_ip.setter
    def erc_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "erc_server_ip", value)

    @property
    @pulumi.getter(name="ercServerPort")
    def erc_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Ekahua RTLS Controller (ERC) UDP listening port.
        """
        return pulumi.get(self, "erc_server_port")

    @erc_server_port.setter
    def erc_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "erc_server_port", value)

    @property
    @pulumi.getter
    def fortipresence(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiPresence to monitor the location and activity of WiFi clients even if they don't connect to this WiFi network (default = disable). Valid values: `foreign`, `both`, `disable`.
        """
        return pulumi.get(self, "fortipresence")

    @fortipresence.setter
    def fortipresence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence", value)

    @property
    @pulumi.getter(name="fortipresenceBle")
    def fortipresence_ble(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiPresence finding and reporting BLE devices. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortipresence_ble")

    @fortipresence_ble.setter
    def fortipresence_ble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_ble", value)

    @property
    @pulumi.getter(name="fortipresenceFrequency")
    def fortipresence_frequency(self) -> Optional[pulumi.Input[int]]:
        """
        FortiPresence report transmit frequency (5 - 65535 sec, default = 30).
        """
        return pulumi.get(self, "fortipresence_frequency")

    @fortipresence_frequency.setter
    def fortipresence_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortipresence_frequency", value)

    @property
    @pulumi.getter(name="fortipresencePort")
    def fortipresence_port(self) -> Optional[pulumi.Input[int]]:
        """
        FortiPresence server UDP listening port (default = 3000).
        """
        return pulumi.get(self, "fortipresence_port")

    @fortipresence_port.setter
    def fortipresence_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortipresence_port", value)

    @property
    @pulumi.getter(name="fortipresenceProject")
    def fortipresence_project(self) -> Optional[pulumi.Input[str]]:
        """
        FortiPresence project name (max. 16 characters, default = fortipresence).
        """
        return pulumi.get(self, "fortipresence_project")

    @fortipresence_project.setter
    def fortipresence_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_project", value)

    @property
    @pulumi.getter(name="fortipresenceRogue")
    def fortipresence_rogue(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiPresence finding and reporting rogue APs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortipresence_rogue")

    @fortipresence_rogue.setter
    def fortipresence_rogue(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_rogue", value)

    @property
    @pulumi.getter(name="fortipresenceSecret")
    def fortipresence_secret(self) -> Optional[pulumi.Input[str]]:
        """
        FortiPresence secret password (max. 16 characters).
        """
        return pulumi.get(self, "fortipresence_secret")

    @fortipresence_secret.setter
    def fortipresence_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_secret", value)

    @property
    @pulumi.getter(name="fortipresenceServer")
    def fortipresence_server(self) -> Optional[pulumi.Input[str]]:
        """
        FortiPresence server IP address.
        """
        return pulumi.get(self, "fortipresence_server")

    @fortipresence_server.setter
    def fortipresence_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_server", value)

    @property
    @pulumi.getter(name="fortipresenceServerAddrType")
    def fortipresence_server_addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        FortiPresence server address type (default = ipv4). Valid values: `ipv4`, `fqdn`.
        """
        return pulumi.get(self, "fortipresence_server_addr_type")

    @fortipresence_server_addr_type.setter
    def fortipresence_server_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_server_addr_type", value)

    @property
    @pulumi.getter(name="fortipresenceServerFqdn")
    def fortipresence_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN of FortiPresence server.
        """
        return pulumi.get(self, "fortipresence_server_fqdn")

    @fortipresence_server_fqdn.setter
    def fortipresence_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_server_fqdn", value)

    @property
    @pulumi.getter(name="fortipresenceUnassoc")
    def fortipresence_unassoc(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiPresence finding and reporting unassociated stations. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortipresence_unassoc")

    @fortipresence_unassoc.setter
    def fortipresence_unassoc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_unassoc", value)

    @property
    @pulumi.getter
    def polestar(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PoleStar BLE NAO Track Real Time Location Service (RTLS) support (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "polestar")

    @polestar.setter
    def polestar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polestar", value)

    @property
    @pulumi.getter(name="polestarAccumulationInterval")
    def polestar_accumulation_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time that measurements should be accumulated in seconds (default = 2).
        """
        return pulumi.get(self, "polestar_accumulation_interval")

    @polestar_accumulation_interval.setter
    def polestar_accumulation_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polestar_accumulation_interval", value)

    @property
    @pulumi.getter(name="polestarAssetAddrgrpList")
    def polestar_asset_addrgrp_list(self) -> Optional[pulumi.Input[str]]:
        """
        Tags and asset addrgrp list to be reported.
        """
        return pulumi.get(self, "polestar_asset_addrgrp_list")

    @polestar_asset_addrgrp_list.setter
    def polestar_asset_addrgrp_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polestar_asset_addrgrp_list", value)

    @property
    @pulumi.getter(name="polestarAssetUuidList1")
    def polestar_asset_uuid_list1(self) -> Optional[pulumi.Input[str]]:
        """
        Tags and asset UUID list 1 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
        """
        return pulumi.get(self, "polestar_asset_uuid_list1")

    @polestar_asset_uuid_list1.setter
    def polestar_asset_uuid_list1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polestar_asset_uuid_list1", value)

    @property
    @pulumi.getter(name="polestarAssetUuidList2")
    def polestar_asset_uuid_list2(self) -> Optional[pulumi.Input[str]]:
        """
        Tags and asset UUID list 2 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
        """
        return pulumi.get(self, "polestar_asset_uuid_list2")

    @polestar_asset_uuid_list2.setter
    def polestar_asset_uuid_list2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polestar_asset_uuid_list2", value)

    @property
    @pulumi.getter(name="polestarAssetUuidList3")
    def polestar_asset_uuid_list3(self) -> Optional[pulumi.Input[str]]:
        """
        Tags and asset UUID list 3 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
        """
        return pulumi.get(self, "polestar_asset_uuid_list3")

    @polestar_asset_uuid_list3.setter
    def polestar_asset_uuid_list3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polestar_asset_uuid_list3", value)

    @property
    @pulumi.getter(name="polestarAssetUuidList4")
    def polestar_asset_uuid_list4(self) -> Optional[pulumi.Input[str]]:
        """
        Tags and asset UUID list 4 to be reported (string in the format of 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX').
        """
        return pulumi.get(self, "polestar_asset_uuid_list4")

    @polestar_asset_uuid_list4.setter
    def polestar_asset_uuid_list4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polestar_asset_uuid_list4", value)

    @property
    @pulumi.getter(name="polestarProtocol")
    def polestar_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Select the protocol to report Measurements, Advertising Data, or Location Data to NAO Cloud. (default = WSS). Valid values: `WSS`.
        """
        return pulumi.get(self, "polestar_protocol")

    @polestar_protocol.setter
    def polestar_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polestar_protocol", value)

    @property
    @pulumi.getter(name="polestarReportingInterval")
    def polestar_reporting_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time between reporting accumulated measurements in seconds (default = 2).
        """
        return pulumi.get(self, "polestar_reporting_interval")

    @polestar_reporting_interval.setter
    def polestar_reporting_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polestar_reporting_interval", value)

    @property
    @pulumi.getter(name="polestarServerFqdn")
    def polestar_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN of PoleStar Nao Track Server (default = ws.nao-cloud.com).
        """
        return pulumi.get(self, "polestar_server_fqdn")

    @polestar_server_fqdn.setter
    def polestar_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polestar_server_fqdn", value)

    @property
    @pulumi.getter(name="polestarServerPath")
    def polestar_server_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of PoleStar Nao Track Server (default = /v1/token/<access_token>/pst-v2).
        """
        return pulumi.get(self, "polestar_server_path")

    @polestar_server_path.setter
    def polestar_server_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polestar_server_path", value)

    @property
    @pulumi.getter(name="polestarServerPort")
    def polestar_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of PoleStar Nao Track Server (default = 443).
        """
        return pulumi.get(self, "polestar_server_port")

    @polestar_server_port.setter
    def polestar_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polestar_server_port", value)

    @property
    @pulumi.getter(name="polestarServerToken")
    def polestar_server_token(self) -> Optional[pulumi.Input[str]]:
        """
        Access Token of PoleStar Nao Track Server.
        """
        return pulumi.get(self, "polestar_server_token")

    @polestar_server_token.setter
    def polestar_server_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polestar_server_token", value)

    @property
    @pulumi.getter(name="stationLocate")
    def station_locate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable client station locating services for all clients, whether associated or not (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "station_locate")

    @station_locate.setter
    def station_locate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "station_locate", value)


@pulumi.input_type
class WtpprofileLedScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: LED schedule name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        LED schedule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WtpprofilePlatformArgs:
    def __init__(__self__, *,
                 ddscan: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ddscan: Enable/disable use of one radio for dedicated dual-band scanning to detect RF characterization and wireless threat management. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mode: Configure operation mode of 5G radios (default = single-5G). Valid values: `single-5G`, `dual-5G`.
        :param pulumi.Input[str] type: WTP, FortiAP or AP platform type. There are built-in WTP profiles for all supported FortiAP models. You can select a built-in profile and customize it or create a new profile.
        """
        if ddscan is not None:
            pulumi.set(__self__, "ddscan", ddscan)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ddscan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of one radio for dedicated dual-band scanning to detect RF characterization and wireless threat management. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ddscan")

    @ddscan.setter
    def ddscan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddscan", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure operation mode of 5G radios (default = single-5G). Valid values: `single-5G`, `dual-5G`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        WTP, FortiAP or AP platform type. There are built-in WTP profiles for all supported FortiAP models. You can select a built-in profile and customize it or create a new profile.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WtpprofileRadio1Args:
    def __init__(__self__, *,
                 airtime_fairness: Optional[pulumi.Input[str]] = None,
                 amsdu: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_addr: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_bufsize: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_chan: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_ctl: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_data: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_beacon: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_other: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_probe: Optional[pulumi.Input[str]] = None,
                 arrp_profile: Optional[pulumi.Input[str]] = None,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 band5g_type: Optional[pulumi.Input[str]] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 beacon_interval: Optional[pulumi.Input[int]] = None,
                 bss_color: Optional[pulumi.Input[int]] = None,
                 bss_color_mode: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 channel_bonding: Optional[pulumi.Input[str]] = None,
                 channel_utilization: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio1ChannelArgs']]]] = None,
                 coexistence: Optional[pulumi.Input[str]] = None,
                 darrp: Optional[pulumi.Input[str]] = None,
                 drma: Optional[pulumi.Input[str]] = None,
                 drma_sensitivity: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 frag_threshold: Optional[pulumi.Input[int]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 iperf_protocol: Optional[pulumi.Input[str]] = None,
                 iperf_server_port: Optional[pulumi.Input[int]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_distance: Optional[pulumi.Input[int]] = None,
                 mimo_mode: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 n80211d: Optional[pulumi.Input[str]] = None,
                 optional_antenna: Optional[pulumi.Input[str]] = None,
                 optional_antenna_gain: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 powersave_optimize: Optional[pulumi.Input[str]] = None,
                 protection_mode: Optional[pulumi.Input[str]] = None,
                 radio_id: Optional[pulumi.Input[int]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sam_bssid: Optional[pulumi.Input[str]] = None,
                 sam_ca_certificate: Optional[pulumi.Input[str]] = None,
                 sam_captive_portal: Optional[pulumi.Input[str]] = None,
                 sam_client_certificate: Optional[pulumi.Input[str]] = None,
                 sam_cwp_failure_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_match_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_password: Optional[pulumi.Input[str]] = None,
                 sam_cwp_success_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_test_url: Optional[pulumi.Input[str]] = None,
                 sam_cwp_username: Optional[pulumi.Input[str]] = None,
                 sam_eap_method: Optional[pulumi.Input[str]] = None,
                 sam_password: Optional[pulumi.Input[str]] = None,
                 sam_private_key: Optional[pulumi.Input[str]] = None,
                 sam_private_key_password: Optional[pulumi.Input[str]] = None,
                 sam_report_intv: Optional[pulumi.Input[int]] = None,
                 sam_security_type: Optional[pulumi.Input[str]] = None,
                 sam_server_fqdn: Optional[pulumi.Input[str]] = None,
                 sam_server_ip: Optional[pulumi.Input[str]] = None,
                 sam_server_type: Optional[pulumi.Input[str]] = None,
                 sam_ssid: Optional[pulumi.Input[str]] = None,
                 sam_test: Optional[pulumi.Input[str]] = None,
                 sam_username: Optional[pulumi.Input[str]] = None,
                 short_guard_interval: Optional[pulumi.Input[str]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 transmit_optimize: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio1VapArgs']]]] = None,
                 wids_profile: Optional[pulumi.Input[str]] = None,
                 zero_wait_dfs: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] airtime_fairness: Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] amsdu: Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_handoff: Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_addr: MAC address to monitor.
        :param pulumi.Input[int] ap_sniffer_bufsize: Sniffer buffer size (1 - 32 MB, default = 16).
        :param pulumi.Input[int] ap_sniffer_chan: Channel on which to operate the sniffer (default = 6).
        :param pulumi.Input[str] ap_sniffer_ctl: Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_data: Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_beacon: Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_other: Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_probe: Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] arrp_profile: Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 3 operates on.
        :param pulumi.Input[str] band5g_type: WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        :param pulumi.Input[str] bandwidth_admission_control: Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bandwidth_capacity: Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        :param pulumi.Input[int] beacon_interval: Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        :param pulumi.Input[int] bss_color: BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        :param pulumi.Input[str] bss_color_mode: BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        :param pulumi.Input[str] call_admission_control: Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] call_capacity: Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        :param pulumi.Input[str] channel_bonding: Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        :param pulumi.Input[str] channel_utilization: Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio1ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] coexistence: Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] darrp: Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] drma: Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] drma_sensitivity: Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        :param pulumi.Input[int] dtim: Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        :param pulumi.Input[int] frag_threshold: Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] frequency_handoff: Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] iperf_protocol: Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        :param pulumi.Input[int] iperf_server_port: Iperf service port number.
        :param pulumi.Input[int] max_clients: Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
        :param pulumi.Input[int] max_distance: Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        :param pulumi.Input[str] mimo_mode: Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
        :param pulumi.Input[str] mode: Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        :param pulumi.Input[str] n80211d: Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] optional_antenna: Optional antenna used on FAP (default = none).
        :param pulumi.Input[str] optional_antenna_gain: Optional antenna gain in dBi (0 to 20, default = 0).
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[str] powersave_optimize: Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        :param pulumi.Input[str] protection_mode: Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        :param pulumi.Input[int] radio_id: radio-id
        :param pulumi.Input[int] rts_threshold: Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] sam_bssid: BSSID for WiFi network.
        :param pulumi.Input[str] sam_ca_certificate: CA certificate for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[str] sam_captive_portal: Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sam_client_certificate: Client certificate for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[str] sam_cwp_failure_string: Failure identification on the page after an incorrect login.
        :param pulumi.Input[str] sam_cwp_match_string: Identification string from the captive portal login form.
        :param pulumi.Input[str] sam_cwp_password: Password for captive portal authentication.
        :param pulumi.Input[str] sam_cwp_success_string: Success identification on the page after a successful login.
        :param pulumi.Input[str] sam_cwp_test_url: Website the client is trying to access.
        :param pulumi.Input[str] sam_cwp_username: Username for captive portal authentication.
        :param pulumi.Input[str] sam_eap_method: Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
        :param pulumi.Input[str] sam_password: Passphrase for WiFi network connection.
        :param pulumi.Input[str] sam_private_key: Private key for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[str] sam_private_key_password: Password for private key file for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[int] sam_report_intv: SAM report interval (sec), 0 for a one-time report.
        :param pulumi.Input[str] sam_security_type: Select WiFi network security type (default = "wpa-personal").
        :param pulumi.Input[str] sam_server_fqdn: SAM test server domain name.
        :param pulumi.Input[str] sam_server_ip: SAM test server IP address.
        :param pulumi.Input[str] sam_server_type: Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] sam_ssid: SSID for WiFi network.
        :param pulumi.Input[str] sam_test: Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        :param pulumi.Input[str] sam_username: Username for WiFi network connection.
        :param pulumi.Input[str] short_guard_interval: Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] transmit_optimize: Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio1VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        :param pulumi.Input[str] wids_profile: Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        :param pulumi.Input[str] zero_wait_dfs: Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mimo_mode is not None:
            pulumi.set(__self__, "mimo_mode", mimo_mode)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if n80211d is not None:
            pulumi.set(__self__, "n80211d", n80211d)
        if optional_antenna is not None:
            pulumi.set(__self__, "optional_antenna", optional_antenna)
        if optional_antenna_gain is not None:
            pulumi.set(__self__, "optional_antenna_gain", optional_antenna_gain)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_ca_certificate is not None:
            pulumi.set(__self__, "sam_ca_certificate", sam_ca_certificate)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_client_certificate is not None:
            pulumi.set(__self__, "sam_client_certificate", sam_client_certificate)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_eap_method is not None:
            pulumi.set(__self__, "sam_eap_method", sam_eap_method)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_private_key is not None:
            pulumi.set(__self__, "sam_private_key", sam_private_key)
        if sam_private_key_password is not None:
            pulumi.set(__self__, "sam_private_key_password", sam_private_key_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "airtime_fairness")

    @airtime_fairness.setter
    def airtime_fairness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "airtime_fairness", value)

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "amsdu")

    @amsdu.setter
    def amsdu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amsdu", value)

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_handoff")

    @ap_handoff.setter
    def ap_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_handoff", value)

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address to monitor.
        """
        return pulumi.get(self, "ap_sniffer_addr")

    @ap_sniffer_addr.setter
    def ap_sniffer_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_addr", value)

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[pulumi.Input[int]]:
        """
        Sniffer buffer size (1 - 32 MB, default = 16).
        """
        return pulumi.get(self, "ap_sniffer_bufsize")

    @ap_sniffer_bufsize.setter
    def ap_sniffer_bufsize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_bufsize", value)

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[pulumi.Input[int]]:
        """
        Channel on which to operate the sniffer (default = 6).
        """
        return pulumi.get(self, "ap_sniffer_chan")

    @ap_sniffer_chan.setter
    def ap_sniffer_chan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_chan", value)

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_ctl")

    @ap_sniffer_ctl.setter
    def ap_sniffer_ctl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_ctl", value)

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_data")

    @ap_sniffer_data.setter
    def ap_sniffer_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_data", value)

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @ap_sniffer_mgmt_beacon.setter
    def ap_sniffer_mgmt_beacon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_beacon", value)

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @ap_sniffer_mgmt_other.setter
    def ap_sniffer_mgmt_other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_other", value)

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @ap_sniffer_mgmt_probe.setter
    def ap_sniffer_mgmt_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_probe", value)

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        """
        return pulumi.get(self, "arrp_profile")

    @arrp_profile.setter
    def arrp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arrp_profile", value)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 3 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        """
        return pulumi.get(self, "band5g_type")

    @band5g_type.setter
    def band5g_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band5g_type", value)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        """
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        """
        return pulumi.get(self, "beacon_interval")

    @beacon_interval.setter
    def beacon_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beacon_interval", value)

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[pulumi.Input[int]]:
        """
        BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        """
        return pulumi.get(self, "bss_color")

    @bss_color.setter
    def bss_color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bss_color", value)

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[pulumi.Input[str]]:
        """
        BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        """
        return pulumi.get(self, "bss_color_mode")

    @bss_color_mode.setter
    def bss_color_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_mode", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        """
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[pulumi.Input[str]]:
        """
        Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        """
        return pulumi.get(self, "channel_bonding")

    @channel_bonding.setter
    def channel_bonding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_bonding", value)

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "channel_utilization")

    @channel_utilization.setter
    def channel_utilization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_utilization", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio1ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio1ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "coexistence")

    @coexistence.setter
    def coexistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coexistence", value)

    @property
    @pulumi.getter
    def darrp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "darrp")

    @darrp.setter
    def darrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "darrp", value)

    @property
    @pulumi.getter
    def drma(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "drma")

    @drma.setter
    def drma(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma", value)

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        """
        return pulumi.get(self, "drma_sensitivity")

    @drma_sensitivity.setter
    def drma_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_sensitivity", value)

    @property
    @pulumi.getter
    def dtim(self) -> Optional[pulumi.Input[int]]:
        """
        Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        """
        return pulumi.get(self, "dtim")

    @dtim.setter
    def dtim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtim", value)

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "frag_threshold")

    @frag_threshold.setter
    def frag_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frag_threshold", value)

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "frequency_handoff")

    @frequency_handoff.setter
    def frequency_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_handoff", value)

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        """
        return pulumi.get(self, "iperf_protocol")

    @iperf_protocol.setter
    def iperf_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iperf_protocol", value)

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Iperf service port number.
        """
        return pulumi.get(self, "iperf_server_port")

    @iperf_server_port.setter
    def iperf_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iperf_server_port", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
        """
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        """
        return pulumi.get(self, "max_distance")

    @max_distance.setter
    def max_distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_distance", value)

    @property
    @pulumi.getter(name="mimoMode")
    def mimo_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
        """
        return pulumi.get(self, "mimo_mode")

    @mimo_mode.setter
    def mimo_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mimo_mode", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def n80211d(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "n80211d")

    @n80211d.setter
    def n80211d(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n80211d", value)

    @property
    @pulumi.getter(name="optionalAntenna")
    def optional_antenna(self) -> Optional[pulumi.Input[str]]:
        """
        Optional antenna used on FAP (default = none).
        """
        return pulumi.get(self, "optional_antenna")

    @optional_antenna.setter
    def optional_antenna(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_antenna", value)

    @property
    @pulumi.getter(name="optionalAntennaGain")
    def optional_antenna_gain(self) -> Optional[pulumi.Input[str]]:
        """
        Optional antenna gain in dBi (0 to 20, default = 0).
        """
        return pulumi.get(self, "optional_antenna_gain")

    @optional_antenna_gain.setter
    def optional_antenna_gain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_antenna_gain", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        """
        return pulumi.get(self, "powersave_optimize")

    @powersave_optimize.setter
    def powersave_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "powersave_optimize", value)

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        """
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_mode", value)

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[pulumi.Input[int]]:
        """
        radio-id
        """
        return pulumi.get(self, "radio_id")

    @radio_id.setter
    def radio_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radio_id", value)

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "rts_threshold")

    @rts_threshold.setter
    def rts_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rts_threshold", value)

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[pulumi.Input[str]]:
        """
        BSSID for WiFi network.
        """
        return pulumi.get(self, "sam_bssid")

    @sam_bssid.setter
    def sam_bssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_bssid", value)

    @property
    @pulumi.getter(name="samCaCertificate")
    def sam_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        CA certificate for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_ca_certificate")

    @sam_ca_certificate.setter
    def sam_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ca_certificate", value)

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sam_captive_portal")

    @sam_captive_portal.setter
    def sam_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_captive_portal", value)

    @property
    @pulumi.getter(name="samClientCertificate")
    def sam_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Client certificate for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_client_certificate")

    @sam_client_certificate.setter
    def sam_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_client_certificate", value)

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[pulumi.Input[str]]:
        """
        Failure identification on the page after an incorrect login.
        """
        return pulumi.get(self, "sam_cwp_failure_string")

    @sam_cwp_failure_string.setter
    def sam_cwp_failure_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_failure_string", value)

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[pulumi.Input[str]]:
        """
        Identification string from the captive portal login form.
        """
        return pulumi.get(self, "sam_cwp_match_string")

    @sam_cwp_match_string.setter
    def sam_cwp_match_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_match_string", value)

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_password")

    @sam_cwp_password.setter
    def sam_cwp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_password", value)

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[pulumi.Input[str]]:
        """
        Success identification on the page after a successful login.
        """
        return pulumi.get(self, "sam_cwp_success_string")

    @sam_cwp_success_string.setter
    def sam_cwp_success_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_success_string", value)

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[pulumi.Input[str]]:
        """
        Website the client is trying to access.
        """
        return pulumi.get(self, "sam_cwp_test_url")

    @sam_cwp_test_url.setter
    def sam_cwp_test_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_test_url", value)

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_username")

    @sam_cwp_username.setter
    def sam_cwp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_username", value)

    @property
    @pulumi.getter(name="samEapMethod")
    def sam_eap_method(self) -> Optional[pulumi.Input[str]]:
        """
        Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
        """
        return pulumi.get(self, "sam_eap_method")

    @sam_eap_method.setter
    def sam_eap_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_eap_method", value)

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase for WiFi network connection.
        """
        return pulumi.get(self, "sam_password")

    @sam_password.setter
    def sam_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_password", value)

    @property
    @pulumi.getter(name="samPrivateKey")
    def sam_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_private_key")

    @sam_private_key.setter
    def sam_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_private_key", value)

    @property
    @pulumi.getter(name="samPrivateKeyPassword")
    def sam_private_key_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for private key file for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_private_key_password")

    @sam_private_key_password.setter
    def sam_private_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_private_key_password", value)

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[pulumi.Input[int]]:
        """
        SAM report interval (sec), 0 for a one-time report.
        """
        return pulumi.get(self, "sam_report_intv")

    @sam_report_intv.setter
    def sam_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sam_report_intv", value)

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select WiFi network security type (default = "wpa-personal").
        """
        return pulumi.get(self, "sam_security_type")

    @sam_security_type.setter
    def sam_security_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_security_type", value)

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server domain name.
        """
        return pulumi.get(self, "sam_server_fqdn")

    @sam_server_fqdn.setter
    def sam_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_fqdn", value)

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server IP address.
        """
        return pulumi.get(self, "sam_server_ip")

    @sam_server_ip.setter
    def sam_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_ip", value)

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "sam_server_type")

    @sam_server_type.setter
    def sam_server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_type", value)

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        SSID for WiFi network.
        """
        return pulumi.get(self, "sam_ssid")

    @sam_ssid.setter
    def sam_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ssid", value)

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        """
        return pulumi.get(self, "sam_test")

    @sam_test.setter
    def sam_test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_test", value)

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for WiFi network connection.
        """
        return pulumi.get(self, "sam_username")

    @sam_username.setter
    def sam_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_username", value)

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "short_guard_interval")

    @short_guard_interval.setter
    def short_guard_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_guard_interval", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        """
        return pulumi.get(self, "transmit_optimize")

    @transmit_optimize.setter
    def transmit_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transmit_optimize", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio1VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio1VapArgs']]]]):
        pulumi.set(self, "vaps", value)

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        """
        return pulumi.get(self, "wids_profile")

    @wids_profile.setter
    def wids_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wids_profile", value)

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "zero_wait_dfs")

    @zero_wait_dfs.setter
    def zero_wait_dfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zero_wait_dfs", value)


@pulumi.input_type
class WtpprofileRadio1ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WtpprofileRadio1VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WtpprofileRadio2Args:
    def __init__(__self__, *,
                 airtime_fairness: Optional[pulumi.Input[str]] = None,
                 amsdu: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_addr: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_bufsize: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_chan: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_ctl: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_data: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_beacon: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_other: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_probe: Optional[pulumi.Input[str]] = None,
                 arrp_profile: Optional[pulumi.Input[str]] = None,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 band5g_type: Optional[pulumi.Input[str]] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 beacon_interval: Optional[pulumi.Input[int]] = None,
                 bss_color: Optional[pulumi.Input[int]] = None,
                 bss_color_mode: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 channel_bonding: Optional[pulumi.Input[str]] = None,
                 channel_utilization: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio2ChannelArgs']]]] = None,
                 coexistence: Optional[pulumi.Input[str]] = None,
                 darrp: Optional[pulumi.Input[str]] = None,
                 drma: Optional[pulumi.Input[str]] = None,
                 drma_sensitivity: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 frag_threshold: Optional[pulumi.Input[int]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 iperf_protocol: Optional[pulumi.Input[str]] = None,
                 iperf_server_port: Optional[pulumi.Input[int]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_distance: Optional[pulumi.Input[int]] = None,
                 mimo_mode: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 n80211d: Optional[pulumi.Input[str]] = None,
                 optional_antenna: Optional[pulumi.Input[str]] = None,
                 optional_antenna_gain: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 powersave_optimize: Optional[pulumi.Input[str]] = None,
                 protection_mode: Optional[pulumi.Input[str]] = None,
                 radio_id: Optional[pulumi.Input[int]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sam_bssid: Optional[pulumi.Input[str]] = None,
                 sam_ca_certificate: Optional[pulumi.Input[str]] = None,
                 sam_captive_portal: Optional[pulumi.Input[str]] = None,
                 sam_client_certificate: Optional[pulumi.Input[str]] = None,
                 sam_cwp_failure_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_match_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_password: Optional[pulumi.Input[str]] = None,
                 sam_cwp_success_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_test_url: Optional[pulumi.Input[str]] = None,
                 sam_cwp_username: Optional[pulumi.Input[str]] = None,
                 sam_eap_method: Optional[pulumi.Input[str]] = None,
                 sam_password: Optional[pulumi.Input[str]] = None,
                 sam_private_key: Optional[pulumi.Input[str]] = None,
                 sam_private_key_password: Optional[pulumi.Input[str]] = None,
                 sam_report_intv: Optional[pulumi.Input[int]] = None,
                 sam_security_type: Optional[pulumi.Input[str]] = None,
                 sam_server_fqdn: Optional[pulumi.Input[str]] = None,
                 sam_server_ip: Optional[pulumi.Input[str]] = None,
                 sam_server_type: Optional[pulumi.Input[str]] = None,
                 sam_ssid: Optional[pulumi.Input[str]] = None,
                 sam_test: Optional[pulumi.Input[str]] = None,
                 sam_username: Optional[pulumi.Input[str]] = None,
                 short_guard_interval: Optional[pulumi.Input[str]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 transmit_optimize: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio2VapArgs']]]] = None,
                 wids_profile: Optional[pulumi.Input[str]] = None,
                 zero_wait_dfs: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] airtime_fairness: Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] amsdu: Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_handoff: Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_addr: MAC address to monitor.
        :param pulumi.Input[int] ap_sniffer_bufsize: Sniffer buffer size (1 - 32 MB, default = 16).
        :param pulumi.Input[int] ap_sniffer_chan: Channel on which to operate the sniffer (default = 6).
        :param pulumi.Input[str] ap_sniffer_ctl: Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_data: Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_beacon: Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_other: Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_probe: Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] arrp_profile: Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 3 operates on.
        :param pulumi.Input[str] band5g_type: WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        :param pulumi.Input[str] bandwidth_admission_control: Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bandwidth_capacity: Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        :param pulumi.Input[int] beacon_interval: Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        :param pulumi.Input[int] bss_color: BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        :param pulumi.Input[str] bss_color_mode: BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        :param pulumi.Input[str] call_admission_control: Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] call_capacity: Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        :param pulumi.Input[str] channel_bonding: Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        :param pulumi.Input[str] channel_utilization: Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio2ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] coexistence: Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] darrp: Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] drma: Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] drma_sensitivity: Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        :param pulumi.Input[int] dtim: Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        :param pulumi.Input[int] frag_threshold: Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] frequency_handoff: Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] iperf_protocol: Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        :param pulumi.Input[int] iperf_server_port: Iperf service port number.
        :param pulumi.Input[int] max_clients: Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
        :param pulumi.Input[int] max_distance: Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        :param pulumi.Input[str] mimo_mode: Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
        :param pulumi.Input[str] mode: Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        :param pulumi.Input[str] n80211d: Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] optional_antenna: Optional antenna used on FAP (default = none).
        :param pulumi.Input[str] optional_antenna_gain: Optional antenna gain in dBi (0 to 20, default = 0).
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[str] powersave_optimize: Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        :param pulumi.Input[str] protection_mode: Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        :param pulumi.Input[int] radio_id: radio-id
        :param pulumi.Input[int] rts_threshold: Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] sam_bssid: BSSID for WiFi network.
        :param pulumi.Input[str] sam_ca_certificate: CA certificate for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[str] sam_captive_portal: Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sam_client_certificate: Client certificate for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[str] sam_cwp_failure_string: Failure identification on the page after an incorrect login.
        :param pulumi.Input[str] sam_cwp_match_string: Identification string from the captive portal login form.
        :param pulumi.Input[str] sam_cwp_password: Password for captive portal authentication.
        :param pulumi.Input[str] sam_cwp_success_string: Success identification on the page after a successful login.
        :param pulumi.Input[str] sam_cwp_test_url: Website the client is trying to access.
        :param pulumi.Input[str] sam_cwp_username: Username for captive portal authentication.
        :param pulumi.Input[str] sam_eap_method: Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
        :param pulumi.Input[str] sam_password: Passphrase for WiFi network connection.
        :param pulumi.Input[str] sam_private_key: Private key for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[str] sam_private_key_password: Password for private key file for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[int] sam_report_intv: SAM report interval (sec), 0 for a one-time report.
        :param pulumi.Input[str] sam_security_type: Select WiFi network security type (default = "wpa-personal").
        :param pulumi.Input[str] sam_server_fqdn: SAM test server domain name.
        :param pulumi.Input[str] sam_server_ip: SAM test server IP address.
        :param pulumi.Input[str] sam_server_type: Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] sam_ssid: SSID for WiFi network.
        :param pulumi.Input[str] sam_test: Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        :param pulumi.Input[str] sam_username: Username for WiFi network connection.
        :param pulumi.Input[str] short_guard_interval: Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] transmit_optimize: Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio2VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        :param pulumi.Input[str] wids_profile: Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        :param pulumi.Input[str] zero_wait_dfs: Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mimo_mode is not None:
            pulumi.set(__self__, "mimo_mode", mimo_mode)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if n80211d is not None:
            pulumi.set(__self__, "n80211d", n80211d)
        if optional_antenna is not None:
            pulumi.set(__self__, "optional_antenna", optional_antenna)
        if optional_antenna_gain is not None:
            pulumi.set(__self__, "optional_antenna_gain", optional_antenna_gain)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_ca_certificate is not None:
            pulumi.set(__self__, "sam_ca_certificate", sam_ca_certificate)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_client_certificate is not None:
            pulumi.set(__self__, "sam_client_certificate", sam_client_certificate)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_eap_method is not None:
            pulumi.set(__self__, "sam_eap_method", sam_eap_method)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_private_key is not None:
            pulumi.set(__self__, "sam_private_key", sam_private_key)
        if sam_private_key_password is not None:
            pulumi.set(__self__, "sam_private_key_password", sam_private_key_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "airtime_fairness")

    @airtime_fairness.setter
    def airtime_fairness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "airtime_fairness", value)

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "amsdu")

    @amsdu.setter
    def amsdu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amsdu", value)

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_handoff")

    @ap_handoff.setter
    def ap_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_handoff", value)

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address to monitor.
        """
        return pulumi.get(self, "ap_sniffer_addr")

    @ap_sniffer_addr.setter
    def ap_sniffer_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_addr", value)

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[pulumi.Input[int]]:
        """
        Sniffer buffer size (1 - 32 MB, default = 16).
        """
        return pulumi.get(self, "ap_sniffer_bufsize")

    @ap_sniffer_bufsize.setter
    def ap_sniffer_bufsize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_bufsize", value)

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[pulumi.Input[int]]:
        """
        Channel on which to operate the sniffer (default = 6).
        """
        return pulumi.get(self, "ap_sniffer_chan")

    @ap_sniffer_chan.setter
    def ap_sniffer_chan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_chan", value)

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_ctl")

    @ap_sniffer_ctl.setter
    def ap_sniffer_ctl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_ctl", value)

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_data")

    @ap_sniffer_data.setter
    def ap_sniffer_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_data", value)

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @ap_sniffer_mgmt_beacon.setter
    def ap_sniffer_mgmt_beacon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_beacon", value)

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @ap_sniffer_mgmt_other.setter
    def ap_sniffer_mgmt_other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_other", value)

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @ap_sniffer_mgmt_probe.setter
    def ap_sniffer_mgmt_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_probe", value)

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        """
        return pulumi.get(self, "arrp_profile")

    @arrp_profile.setter
    def arrp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arrp_profile", value)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 3 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        """
        return pulumi.get(self, "band5g_type")

    @band5g_type.setter
    def band5g_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band5g_type", value)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        """
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        """
        return pulumi.get(self, "beacon_interval")

    @beacon_interval.setter
    def beacon_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beacon_interval", value)

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[pulumi.Input[int]]:
        """
        BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        """
        return pulumi.get(self, "bss_color")

    @bss_color.setter
    def bss_color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bss_color", value)

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[pulumi.Input[str]]:
        """
        BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        """
        return pulumi.get(self, "bss_color_mode")

    @bss_color_mode.setter
    def bss_color_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_mode", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        """
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[pulumi.Input[str]]:
        """
        Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        """
        return pulumi.get(self, "channel_bonding")

    @channel_bonding.setter
    def channel_bonding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_bonding", value)

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "channel_utilization")

    @channel_utilization.setter
    def channel_utilization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_utilization", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio2ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio2ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "coexistence")

    @coexistence.setter
    def coexistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coexistence", value)

    @property
    @pulumi.getter
    def darrp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "darrp")

    @darrp.setter
    def darrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "darrp", value)

    @property
    @pulumi.getter
    def drma(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "drma")

    @drma.setter
    def drma(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma", value)

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        """
        return pulumi.get(self, "drma_sensitivity")

    @drma_sensitivity.setter
    def drma_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_sensitivity", value)

    @property
    @pulumi.getter
    def dtim(self) -> Optional[pulumi.Input[int]]:
        """
        Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        """
        return pulumi.get(self, "dtim")

    @dtim.setter
    def dtim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtim", value)

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "frag_threshold")

    @frag_threshold.setter
    def frag_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frag_threshold", value)

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "frequency_handoff")

    @frequency_handoff.setter
    def frequency_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_handoff", value)

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        """
        return pulumi.get(self, "iperf_protocol")

    @iperf_protocol.setter
    def iperf_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iperf_protocol", value)

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Iperf service port number.
        """
        return pulumi.get(self, "iperf_server_port")

    @iperf_server_port.setter
    def iperf_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iperf_server_port", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
        """
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        """
        return pulumi.get(self, "max_distance")

    @max_distance.setter
    def max_distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_distance", value)

    @property
    @pulumi.getter(name="mimoMode")
    def mimo_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
        """
        return pulumi.get(self, "mimo_mode")

    @mimo_mode.setter
    def mimo_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mimo_mode", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def n80211d(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "n80211d")

    @n80211d.setter
    def n80211d(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n80211d", value)

    @property
    @pulumi.getter(name="optionalAntenna")
    def optional_antenna(self) -> Optional[pulumi.Input[str]]:
        """
        Optional antenna used on FAP (default = none).
        """
        return pulumi.get(self, "optional_antenna")

    @optional_antenna.setter
    def optional_antenna(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_antenna", value)

    @property
    @pulumi.getter(name="optionalAntennaGain")
    def optional_antenna_gain(self) -> Optional[pulumi.Input[str]]:
        """
        Optional antenna gain in dBi (0 to 20, default = 0).
        """
        return pulumi.get(self, "optional_antenna_gain")

    @optional_antenna_gain.setter
    def optional_antenna_gain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_antenna_gain", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        """
        return pulumi.get(self, "powersave_optimize")

    @powersave_optimize.setter
    def powersave_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "powersave_optimize", value)

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        """
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_mode", value)

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[pulumi.Input[int]]:
        """
        radio-id
        """
        return pulumi.get(self, "radio_id")

    @radio_id.setter
    def radio_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radio_id", value)

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "rts_threshold")

    @rts_threshold.setter
    def rts_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rts_threshold", value)

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[pulumi.Input[str]]:
        """
        BSSID for WiFi network.
        """
        return pulumi.get(self, "sam_bssid")

    @sam_bssid.setter
    def sam_bssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_bssid", value)

    @property
    @pulumi.getter(name="samCaCertificate")
    def sam_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        CA certificate for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_ca_certificate")

    @sam_ca_certificate.setter
    def sam_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ca_certificate", value)

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sam_captive_portal")

    @sam_captive_portal.setter
    def sam_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_captive_portal", value)

    @property
    @pulumi.getter(name="samClientCertificate")
    def sam_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Client certificate for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_client_certificate")

    @sam_client_certificate.setter
    def sam_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_client_certificate", value)

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[pulumi.Input[str]]:
        """
        Failure identification on the page after an incorrect login.
        """
        return pulumi.get(self, "sam_cwp_failure_string")

    @sam_cwp_failure_string.setter
    def sam_cwp_failure_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_failure_string", value)

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[pulumi.Input[str]]:
        """
        Identification string from the captive portal login form.
        """
        return pulumi.get(self, "sam_cwp_match_string")

    @sam_cwp_match_string.setter
    def sam_cwp_match_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_match_string", value)

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_password")

    @sam_cwp_password.setter
    def sam_cwp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_password", value)

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[pulumi.Input[str]]:
        """
        Success identification on the page after a successful login.
        """
        return pulumi.get(self, "sam_cwp_success_string")

    @sam_cwp_success_string.setter
    def sam_cwp_success_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_success_string", value)

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[pulumi.Input[str]]:
        """
        Website the client is trying to access.
        """
        return pulumi.get(self, "sam_cwp_test_url")

    @sam_cwp_test_url.setter
    def sam_cwp_test_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_test_url", value)

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_username")

    @sam_cwp_username.setter
    def sam_cwp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_username", value)

    @property
    @pulumi.getter(name="samEapMethod")
    def sam_eap_method(self) -> Optional[pulumi.Input[str]]:
        """
        Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
        """
        return pulumi.get(self, "sam_eap_method")

    @sam_eap_method.setter
    def sam_eap_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_eap_method", value)

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase for WiFi network connection.
        """
        return pulumi.get(self, "sam_password")

    @sam_password.setter
    def sam_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_password", value)

    @property
    @pulumi.getter(name="samPrivateKey")
    def sam_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_private_key")

    @sam_private_key.setter
    def sam_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_private_key", value)

    @property
    @pulumi.getter(name="samPrivateKeyPassword")
    def sam_private_key_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for private key file for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_private_key_password")

    @sam_private_key_password.setter
    def sam_private_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_private_key_password", value)

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[pulumi.Input[int]]:
        """
        SAM report interval (sec), 0 for a one-time report.
        """
        return pulumi.get(self, "sam_report_intv")

    @sam_report_intv.setter
    def sam_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sam_report_intv", value)

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select WiFi network security type (default = "wpa-personal").
        """
        return pulumi.get(self, "sam_security_type")

    @sam_security_type.setter
    def sam_security_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_security_type", value)

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server domain name.
        """
        return pulumi.get(self, "sam_server_fqdn")

    @sam_server_fqdn.setter
    def sam_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_fqdn", value)

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server IP address.
        """
        return pulumi.get(self, "sam_server_ip")

    @sam_server_ip.setter
    def sam_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_ip", value)

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "sam_server_type")

    @sam_server_type.setter
    def sam_server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_type", value)

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        SSID for WiFi network.
        """
        return pulumi.get(self, "sam_ssid")

    @sam_ssid.setter
    def sam_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ssid", value)

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        """
        return pulumi.get(self, "sam_test")

    @sam_test.setter
    def sam_test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_test", value)

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for WiFi network connection.
        """
        return pulumi.get(self, "sam_username")

    @sam_username.setter
    def sam_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_username", value)

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "short_guard_interval")

    @short_guard_interval.setter
    def short_guard_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_guard_interval", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        """
        return pulumi.get(self, "transmit_optimize")

    @transmit_optimize.setter
    def transmit_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transmit_optimize", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio2VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio2VapArgs']]]]):
        pulumi.set(self, "vaps", value)

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        """
        return pulumi.get(self, "wids_profile")

    @wids_profile.setter
    def wids_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wids_profile", value)

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "zero_wait_dfs")

    @zero_wait_dfs.setter
    def zero_wait_dfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zero_wait_dfs", value)


@pulumi.input_type
class WtpprofileRadio2ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WtpprofileRadio2VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WtpprofileRadio3Args:
    def __init__(__self__, *,
                 airtime_fairness: Optional[pulumi.Input[str]] = None,
                 amsdu: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_addr: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_bufsize: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_chan: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_ctl: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_data: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_beacon: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_other: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_probe: Optional[pulumi.Input[str]] = None,
                 arrp_profile: Optional[pulumi.Input[str]] = None,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 band5g_type: Optional[pulumi.Input[str]] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 beacon_interval: Optional[pulumi.Input[int]] = None,
                 bss_color: Optional[pulumi.Input[int]] = None,
                 bss_color_mode: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 channel_bonding: Optional[pulumi.Input[str]] = None,
                 channel_utilization: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio3ChannelArgs']]]] = None,
                 coexistence: Optional[pulumi.Input[str]] = None,
                 darrp: Optional[pulumi.Input[str]] = None,
                 drma: Optional[pulumi.Input[str]] = None,
                 drma_sensitivity: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 frag_threshold: Optional[pulumi.Input[int]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 iperf_protocol: Optional[pulumi.Input[str]] = None,
                 iperf_server_port: Optional[pulumi.Input[int]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_distance: Optional[pulumi.Input[int]] = None,
                 mimo_mode: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 n80211d: Optional[pulumi.Input[str]] = None,
                 optional_antenna: Optional[pulumi.Input[str]] = None,
                 optional_antenna_gain: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 powersave_optimize: Optional[pulumi.Input[str]] = None,
                 protection_mode: Optional[pulumi.Input[str]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sam_bssid: Optional[pulumi.Input[str]] = None,
                 sam_ca_certificate: Optional[pulumi.Input[str]] = None,
                 sam_captive_portal: Optional[pulumi.Input[str]] = None,
                 sam_client_certificate: Optional[pulumi.Input[str]] = None,
                 sam_cwp_failure_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_match_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_password: Optional[pulumi.Input[str]] = None,
                 sam_cwp_success_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_test_url: Optional[pulumi.Input[str]] = None,
                 sam_cwp_username: Optional[pulumi.Input[str]] = None,
                 sam_eap_method: Optional[pulumi.Input[str]] = None,
                 sam_password: Optional[pulumi.Input[str]] = None,
                 sam_private_key: Optional[pulumi.Input[str]] = None,
                 sam_private_key_password: Optional[pulumi.Input[str]] = None,
                 sam_report_intv: Optional[pulumi.Input[int]] = None,
                 sam_security_type: Optional[pulumi.Input[str]] = None,
                 sam_server_fqdn: Optional[pulumi.Input[str]] = None,
                 sam_server_ip: Optional[pulumi.Input[str]] = None,
                 sam_server_type: Optional[pulumi.Input[str]] = None,
                 sam_ssid: Optional[pulumi.Input[str]] = None,
                 sam_test: Optional[pulumi.Input[str]] = None,
                 sam_username: Optional[pulumi.Input[str]] = None,
                 short_guard_interval: Optional[pulumi.Input[str]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 transmit_optimize: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio3VapArgs']]]] = None,
                 wids_profile: Optional[pulumi.Input[str]] = None,
                 zero_wait_dfs: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] airtime_fairness: Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] amsdu: Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_handoff: Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_addr: MAC address to monitor.
        :param pulumi.Input[int] ap_sniffer_bufsize: Sniffer buffer size (1 - 32 MB, default = 16).
        :param pulumi.Input[int] ap_sniffer_chan: Channel on which to operate the sniffer (default = 6).
        :param pulumi.Input[str] ap_sniffer_ctl: Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_data: Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_beacon: Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_other: Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_probe: Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] arrp_profile: Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 3 operates on.
        :param pulumi.Input[str] band5g_type: WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        :param pulumi.Input[str] bandwidth_admission_control: Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bandwidth_capacity: Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        :param pulumi.Input[int] beacon_interval: Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        :param pulumi.Input[int] bss_color: BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        :param pulumi.Input[str] bss_color_mode: BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        :param pulumi.Input[str] call_admission_control: Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] call_capacity: Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        :param pulumi.Input[str] channel_bonding: Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        :param pulumi.Input[str] channel_utilization: Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio3ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] coexistence: Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] darrp: Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] drma: Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] drma_sensitivity: Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        :param pulumi.Input[int] dtim: Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        :param pulumi.Input[int] frag_threshold: Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] frequency_handoff: Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] iperf_protocol: Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        :param pulumi.Input[int] iperf_server_port: Iperf service port number.
        :param pulumi.Input[int] max_clients: Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
        :param pulumi.Input[int] max_distance: Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        :param pulumi.Input[str] mimo_mode: Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
        :param pulumi.Input[str] mode: Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        :param pulumi.Input[str] n80211d: Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] optional_antenna: Optional antenna used on FAP (default = none).
        :param pulumi.Input[str] optional_antenna_gain: Optional antenna gain in dBi (0 to 20, default = 0).
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[str] powersave_optimize: Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        :param pulumi.Input[str] protection_mode: Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        :param pulumi.Input[int] rts_threshold: Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] sam_bssid: BSSID for WiFi network.
        :param pulumi.Input[str] sam_ca_certificate: CA certificate for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[str] sam_captive_portal: Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sam_client_certificate: Client certificate for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[str] sam_cwp_failure_string: Failure identification on the page after an incorrect login.
        :param pulumi.Input[str] sam_cwp_match_string: Identification string from the captive portal login form.
        :param pulumi.Input[str] sam_cwp_password: Password for captive portal authentication.
        :param pulumi.Input[str] sam_cwp_success_string: Success identification on the page after a successful login.
        :param pulumi.Input[str] sam_cwp_test_url: Website the client is trying to access.
        :param pulumi.Input[str] sam_cwp_username: Username for captive portal authentication.
        :param pulumi.Input[str] sam_eap_method: Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
        :param pulumi.Input[str] sam_password: Passphrase for WiFi network connection.
        :param pulumi.Input[str] sam_private_key: Private key for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[str] sam_private_key_password: Password for private key file for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[int] sam_report_intv: SAM report interval (sec), 0 for a one-time report.
        :param pulumi.Input[str] sam_security_type: Select WiFi network security type (default = "wpa-personal").
        :param pulumi.Input[str] sam_server_fqdn: SAM test server domain name.
        :param pulumi.Input[str] sam_server_ip: SAM test server IP address.
        :param pulumi.Input[str] sam_server_type: Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] sam_ssid: SSID for WiFi network.
        :param pulumi.Input[str] sam_test: Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        :param pulumi.Input[str] sam_username: Username for WiFi network connection.
        :param pulumi.Input[str] short_guard_interval: Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] transmit_optimize: Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio3VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        :param pulumi.Input[str] wids_profile: Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        :param pulumi.Input[str] zero_wait_dfs: Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mimo_mode is not None:
            pulumi.set(__self__, "mimo_mode", mimo_mode)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if n80211d is not None:
            pulumi.set(__self__, "n80211d", n80211d)
        if optional_antenna is not None:
            pulumi.set(__self__, "optional_antenna", optional_antenna)
        if optional_antenna_gain is not None:
            pulumi.set(__self__, "optional_antenna_gain", optional_antenna_gain)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_ca_certificate is not None:
            pulumi.set(__self__, "sam_ca_certificate", sam_ca_certificate)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_client_certificate is not None:
            pulumi.set(__self__, "sam_client_certificate", sam_client_certificate)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_eap_method is not None:
            pulumi.set(__self__, "sam_eap_method", sam_eap_method)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_private_key is not None:
            pulumi.set(__self__, "sam_private_key", sam_private_key)
        if sam_private_key_password is not None:
            pulumi.set(__self__, "sam_private_key_password", sam_private_key_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "airtime_fairness")

    @airtime_fairness.setter
    def airtime_fairness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "airtime_fairness", value)

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "amsdu")

    @amsdu.setter
    def amsdu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amsdu", value)

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_handoff")

    @ap_handoff.setter
    def ap_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_handoff", value)

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address to monitor.
        """
        return pulumi.get(self, "ap_sniffer_addr")

    @ap_sniffer_addr.setter
    def ap_sniffer_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_addr", value)

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[pulumi.Input[int]]:
        """
        Sniffer buffer size (1 - 32 MB, default = 16).
        """
        return pulumi.get(self, "ap_sniffer_bufsize")

    @ap_sniffer_bufsize.setter
    def ap_sniffer_bufsize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_bufsize", value)

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[pulumi.Input[int]]:
        """
        Channel on which to operate the sniffer (default = 6).
        """
        return pulumi.get(self, "ap_sniffer_chan")

    @ap_sniffer_chan.setter
    def ap_sniffer_chan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_chan", value)

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_ctl")

    @ap_sniffer_ctl.setter
    def ap_sniffer_ctl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_ctl", value)

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_data")

    @ap_sniffer_data.setter
    def ap_sniffer_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_data", value)

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @ap_sniffer_mgmt_beacon.setter
    def ap_sniffer_mgmt_beacon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_beacon", value)

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @ap_sniffer_mgmt_other.setter
    def ap_sniffer_mgmt_other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_other", value)

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @ap_sniffer_mgmt_probe.setter
    def ap_sniffer_mgmt_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_probe", value)

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        """
        return pulumi.get(self, "arrp_profile")

    @arrp_profile.setter
    def arrp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arrp_profile", value)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 3 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        """
        return pulumi.get(self, "band5g_type")

    @band5g_type.setter
    def band5g_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band5g_type", value)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        """
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        """
        return pulumi.get(self, "beacon_interval")

    @beacon_interval.setter
    def beacon_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beacon_interval", value)

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[pulumi.Input[int]]:
        """
        BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        """
        return pulumi.get(self, "bss_color")

    @bss_color.setter
    def bss_color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bss_color", value)

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[pulumi.Input[str]]:
        """
        BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        """
        return pulumi.get(self, "bss_color_mode")

    @bss_color_mode.setter
    def bss_color_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_mode", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        """
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[pulumi.Input[str]]:
        """
        Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        """
        return pulumi.get(self, "channel_bonding")

    @channel_bonding.setter
    def channel_bonding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_bonding", value)

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "channel_utilization")

    @channel_utilization.setter
    def channel_utilization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_utilization", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio3ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio3ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "coexistence")

    @coexistence.setter
    def coexistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coexistence", value)

    @property
    @pulumi.getter
    def darrp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "darrp")

    @darrp.setter
    def darrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "darrp", value)

    @property
    @pulumi.getter
    def drma(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "drma")

    @drma.setter
    def drma(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma", value)

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        """
        return pulumi.get(self, "drma_sensitivity")

    @drma_sensitivity.setter
    def drma_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_sensitivity", value)

    @property
    @pulumi.getter
    def dtim(self) -> Optional[pulumi.Input[int]]:
        """
        Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        """
        return pulumi.get(self, "dtim")

    @dtim.setter
    def dtim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtim", value)

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "frag_threshold")

    @frag_threshold.setter
    def frag_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frag_threshold", value)

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "frequency_handoff")

    @frequency_handoff.setter
    def frequency_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_handoff", value)

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        """
        return pulumi.get(self, "iperf_protocol")

    @iperf_protocol.setter
    def iperf_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iperf_protocol", value)

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Iperf service port number.
        """
        return pulumi.get(self, "iperf_server_port")

    @iperf_server_port.setter
    def iperf_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iperf_server_port", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
        """
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        """
        return pulumi.get(self, "max_distance")

    @max_distance.setter
    def max_distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_distance", value)

    @property
    @pulumi.getter(name="mimoMode")
    def mimo_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
        """
        return pulumi.get(self, "mimo_mode")

    @mimo_mode.setter
    def mimo_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mimo_mode", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def n80211d(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "n80211d")

    @n80211d.setter
    def n80211d(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n80211d", value)

    @property
    @pulumi.getter(name="optionalAntenna")
    def optional_antenna(self) -> Optional[pulumi.Input[str]]:
        """
        Optional antenna used on FAP (default = none).
        """
        return pulumi.get(self, "optional_antenna")

    @optional_antenna.setter
    def optional_antenna(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_antenna", value)

    @property
    @pulumi.getter(name="optionalAntennaGain")
    def optional_antenna_gain(self) -> Optional[pulumi.Input[str]]:
        """
        Optional antenna gain in dBi (0 to 20, default = 0).
        """
        return pulumi.get(self, "optional_antenna_gain")

    @optional_antenna_gain.setter
    def optional_antenna_gain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_antenna_gain", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        """
        return pulumi.get(self, "powersave_optimize")

    @powersave_optimize.setter
    def powersave_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "powersave_optimize", value)

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        """
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_mode", value)

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "rts_threshold")

    @rts_threshold.setter
    def rts_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rts_threshold", value)

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[pulumi.Input[str]]:
        """
        BSSID for WiFi network.
        """
        return pulumi.get(self, "sam_bssid")

    @sam_bssid.setter
    def sam_bssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_bssid", value)

    @property
    @pulumi.getter(name="samCaCertificate")
    def sam_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        CA certificate for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_ca_certificate")

    @sam_ca_certificate.setter
    def sam_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ca_certificate", value)

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sam_captive_portal")

    @sam_captive_portal.setter
    def sam_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_captive_portal", value)

    @property
    @pulumi.getter(name="samClientCertificate")
    def sam_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Client certificate for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_client_certificate")

    @sam_client_certificate.setter
    def sam_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_client_certificate", value)

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[pulumi.Input[str]]:
        """
        Failure identification on the page after an incorrect login.
        """
        return pulumi.get(self, "sam_cwp_failure_string")

    @sam_cwp_failure_string.setter
    def sam_cwp_failure_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_failure_string", value)

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[pulumi.Input[str]]:
        """
        Identification string from the captive portal login form.
        """
        return pulumi.get(self, "sam_cwp_match_string")

    @sam_cwp_match_string.setter
    def sam_cwp_match_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_match_string", value)

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_password")

    @sam_cwp_password.setter
    def sam_cwp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_password", value)

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[pulumi.Input[str]]:
        """
        Success identification on the page after a successful login.
        """
        return pulumi.get(self, "sam_cwp_success_string")

    @sam_cwp_success_string.setter
    def sam_cwp_success_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_success_string", value)

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[pulumi.Input[str]]:
        """
        Website the client is trying to access.
        """
        return pulumi.get(self, "sam_cwp_test_url")

    @sam_cwp_test_url.setter
    def sam_cwp_test_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_test_url", value)

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_username")

    @sam_cwp_username.setter
    def sam_cwp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_username", value)

    @property
    @pulumi.getter(name="samEapMethod")
    def sam_eap_method(self) -> Optional[pulumi.Input[str]]:
        """
        Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
        """
        return pulumi.get(self, "sam_eap_method")

    @sam_eap_method.setter
    def sam_eap_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_eap_method", value)

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase for WiFi network connection.
        """
        return pulumi.get(self, "sam_password")

    @sam_password.setter
    def sam_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_password", value)

    @property
    @pulumi.getter(name="samPrivateKey")
    def sam_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_private_key")

    @sam_private_key.setter
    def sam_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_private_key", value)

    @property
    @pulumi.getter(name="samPrivateKeyPassword")
    def sam_private_key_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for private key file for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_private_key_password")

    @sam_private_key_password.setter
    def sam_private_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_private_key_password", value)

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[pulumi.Input[int]]:
        """
        SAM report interval (sec), 0 for a one-time report.
        """
        return pulumi.get(self, "sam_report_intv")

    @sam_report_intv.setter
    def sam_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sam_report_intv", value)

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select WiFi network security type (default = "wpa-personal").
        """
        return pulumi.get(self, "sam_security_type")

    @sam_security_type.setter
    def sam_security_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_security_type", value)

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server domain name.
        """
        return pulumi.get(self, "sam_server_fqdn")

    @sam_server_fqdn.setter
    def sam_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_fqdn", value)

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server IP address.
        """
        return pulumi.get(self, "sam_server_ip")

    @sam_server_ip.setter
    def sam_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_ip", value)

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "sam_server_type")

    @sam_server_type.setter
    def sam_server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_type", value)

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        SSID for WiFi network.
        """
        return pulumi.get(self, "sam_ssid")

    @sam_ssid.setter
    def sam_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ssid", value)

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        """
        return pulumi.get(self, "sam_test")

    @sam_test.setter
    def sam_test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_test", value)

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for WiFi network connection.
        """
        return pulumi.get(self, "sam_username")

    @sam_username.setter
    def sam_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_username", value)

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "short_guard_interval")

    @short_guard_interval.setter
    def short_guard_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_guard_interval", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        """
        return pulumi.get(self, "transmit_optimize")

    @transmit_optimize.setter
    def transmit_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transmit_optimize", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio3VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio3VapArgs']]]]):
        pulumi.set(self, "vaps", value)

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        """
        return pulumi.get(self, "wids_profile")

    @wids_profile.setter
    def wids_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wids_profile", value)

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "zero_wait_dfs")

    @zero_wait_dfs.setter
    def zero_wait_dfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zero_wait_dfs", value)


@pulumi.input_type
class WtpprofileRadio3ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WtpprofileRadio3VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WtpprofileRadio4Args:
    def __init__(__self__, *,
                 airtime_fairness: Optional[pulumi.Input[str]] = None,
                 amsdu: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_addr: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_bufsize: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_chan: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_ctl: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_data: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_beacon: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_other: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_probe: Optional[pulumi.Input[str]] = None,
                 arrp_profile: Optional[pulumi.Input[str]] = None,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 band5g_type: Optional[pulumi.Input[str]] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 beacon_interval: Optional[pulumi.Input[int]] = None,
                 bss_color: Optional[pulumi.Input[int]] = None,
                 bss_color_mode: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 channel_bonding: Optional[pulumi.Input[str]] = None,
                 channel_utilization: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio4ChannelArgs']]]] = None,
                 coexistence: Optional[pulumi.Input[str]] = None,
                 darrp: Optional[pulumi.Input[str]] = None,
                 drma: Optional[pulumi.Input[str]] = None,
                 drma_sensitivity: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 frag_threshold: Optional[pulumi.Input[int]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 iperf_protocol: Optional[pulumi.Input[str]] = None,
                 iperf_server_port: Optional[pulumi.Input[int]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_distance: Optional[pulumi.Input[int]] = None,
                 mimo_mode: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 n80211d: Optional[pulumi.Input[str]] = None,
                 optional_antenna: Optional[pulumi.Input[str]] = None,
                 optional_antenna_gain: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 powersave_optimize: Optional[pulumi.Input[str]] = None,
                 protection_mode: Optional[pulumi.Input[str]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sam_bssid: Optional[pulumi.Input[str]] = None,
                 sam_ca_certificate: Optional[pulumi.Input[str]] = None,
                 sam_captive_portal: Optional[pulumi.Input[str]] = None,
                 sam_client_certificate: Optional[pulumi.Input[str]] = None,
                 sam_cwp_failure_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_match_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_password: Optional[pulumi.Input[str]] = None,
                 sam_cwp_success_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_test_url: Optional[pulumi.Input[str]] = None,
                 sam_cwp_username: Optional[pulumi.Input[str]] = None,
                 sam_eap_method: Optional[pulumi.Input[str]] = None,
                 sam_password: Optional[pulumi.Input[str]] = None,
                 sam_private_key: Optional[pulumi.Input[str]] = None,
                 sam_private_key_password: Optional[pulumi.Input[str]] = None,
                 sam_report_intv: Optional[pulumi.Input[int]] = None,
                 sam_security_type: Optional[pulumi.Input[str]] = None,
                 sam_server_fqdn: Optional[pulumi.Input[str]] = None,
                 sam_server_ip: Optional[pulumi.Input[str]] = None,
                 sam_server_type: Optional[pulumi.Input[str]] = None,
                 sam_ssid: Optional[pulumi.Input[str]] = None,
                 sam_test: Optional[pulumi.Input[str]] = None,
                 sam_username: Optional[pulumi.Input[str]] = None,
                 short_guard_interval: Optional[pulumi.Input[str]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 transmit_optimize: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio4VapArgs']]]] = None,
                 wids_profile: Optional[pulumi.Input[str]] = None,
                 zero_wait_dfs: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] airtime_fairness: Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] amsdu: Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_handoff: Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_addr: MAC address to monitor.
        :param pulumi.Input[int] ap_sniffer_bufsize: Sniffer buffer size (1 - 32 MB, default = 16).
        :param pulumi.Input[int] ap_sniffer_chan: Channel on which to operate the sniffer (default = 6).
        :param pulumi.Input[str] ap_sniffer_ctl: Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_data: Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_beacon: Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_other: Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_probe: Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] arrp_profile: Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 3 operates on.
        :param pulumi.Input[str] band5g_type: WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        :param pulumi.Input[str] bandwidth_admission_control: Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bandwidth_capacity: Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        :param pulumi.Input[int] beacon_interval: Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        :param pulumi.Input[int] bss_color: BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        :param pulumi.Input[str] bss_color_mode: BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        :param pulumi.Input[str] call_admission_control: Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] call_capacity: Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        :param pulumi.Input[str] channel_bonding: Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        :param pulumi.Input[str] channel_utilization: Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio4ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] coexistence: Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] darrp: Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] drma: Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] drma_sensitivity: Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        :param pulumi.Input[int] dtim: Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        :param pulumi.Input[int] frag_threshold: Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] frequency_handoff: Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] iperf_protocol: Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        :param pulumi.Input[int] iperf_server_port: Iperf service port number.
        :param pulumi.Input[int] max_clients: Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
        :param pulumi.Input[int] max_distance: Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        :param pulumi.Input[str] mimo_mode: Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
        :param pulumi.Input[str] mode: Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        :param pulumi.Input[str] n80211d: Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] optional_antenna: Optional antenna used on FAP (default = none).
        :param pulumi.Input[str] optional_antenna_gain: Optional antenna gain in dBi (0 to 20, default = 0).
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[str] powersave_optimize: Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        :param pulumi.Input[str] protection_mode: Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        :param pulumi.Input[int] rts_threshold: Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] sam_bssid: BSSID for WiFi network.
        :param pulumi.Input[str] sam_ca_certificate: CA certificate for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[str] sam_captive_portal: Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sam_client_certificate: Client certificate for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[str] sam_cwp_failure_string: Failure identification on the page after an incorrect login.
        :param pulumi.Input[str] sam_cwp_match_string: Identification string from the captive portal login form.
        :param pulumi.Input[str] sam_cwp_password: Password for captive portal authentication.
        :param pulumi.Input[str] sam_cwp_success_string: Success identification on the page after a successful login.
        :param pulumi.Input[str] sam_cwp_test_url: Website the client is trying to access.
        :param pulumi.Input[str] sam_cwp_username: Username for captive portal authentication.
        :param pulumi.Input[str] sam_eap_method: Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
        :param pulumi.Input[str] sam_password: Passphrase for WiFi network connection.
        :param pulumi.Input[str] sam_private_key: Private key for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[str] sam_private_key_password: Password for private key file for WPA2/WPA3-ENTERPRISE.
        :param pulumi.Input[int] sam_report_intv: SAM report interval (sec), 0 for a one-time report.
        :param pulumi.Input[str] sam_security_type: Select WiFi network security type (default = "wpa-personal").
        :param pulumi.Input[str] sam_server_fqdn: SAM test server domain name.
        :param pulumi.Input[str] sam_server_ip: SAM test server IP address.
        :param pulumi.Input[str] sam_server_type: Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] sam_ssid: SSID for WiFi network.
        :param pulumi.Input[str] sam_test: Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        :param pulumi.Input[str] sam_username: Username for WiFi network connection.
        :param pulumi.Input[str] short_guard_interval: Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] transmit_optimize: Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio4VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        :param pulumi.Input[str] wids_profile: Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        :param pulumi.Input[str] zero_wait_dfs: Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mimo_mode is not None:
            pulumi.set(__self__, "mimo_mode", mimo_mode)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if n80211d is not None:
            pulumi.set(__self__, "n80211d", n80211d)
        if optional_antenna is not None:
            pulumi.set(__self__, "optional_antenna", optional_antenna)
        if optional_antenna_gain is not None:
            pulumi.set(__self__, "optional_antenna_gain", optional_antenna_gain)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_ca_certificate is not None:
            pulumi.set(__self__, "sam_ca_certificate", sam_ca_certificate)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_client_certificate is not None:
            pulumi.set(__self__, "sam_client_certificate", sam_client_certificate)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_eap_method is not None:
            pulumi.set(__self__, "sam_eap_method", sam_eap_method)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_private_key is not None:
            pulumi.set(__self__, "sam_private_key", sam_private_key)
        if sam_private_key_password is not None:
            pulumi.set(__self__, "sam_private_key_password", sam_private_key_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "airtime_fairness")

    @airtime_fairness.setter
    def airtime_fairness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "airtime_fairness", value)

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "amsdu")

    @amsdu.setter
    def amsdu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amsdu", value)

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_handoff")

    @ap_handoff.setter
    def ap_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_handoff", value)

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address to monitor.
        """
        return pulumi.get(self, "ap_sniffer_addr")

    @ap_sniffer_addr.setter
    def ap_sniffer_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_addr", value)

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[pulumi.Input[int]]:
        """
        Sniffer buffer size (1 - 32 MB, default = 16).
        """
        return pulumi.get(self, "ap_sniffer_bufsize")

    @ap_sniffer_bufsize.setter
    def ap_sniffer_bufsize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_bufsize", value)

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[pulumi.Input[int]]:
        """
        Channel on which to operate the sniffer (default = 6).
        """
        return pulumi.get(self, "ap_sniffer_chan")

    @ap_sniffer_chan.setter
    def ap_sniffer_chan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_chan", value)

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_ctl")

    @ap_sniffer_ctl.setter
    def ap_sniffer_ctl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_ctl", value)

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_data")

    @ap_sniffer_data.setter
    def ap_sniffer_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_data", value)

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @ap_sniffer_mgmt_beacon.setter
    def ap_sniffer_mgmt_beacon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_beacon", value)

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @ap_sniffer_mgmt_other.setter
    def ap_sniffer_mgmt_other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_other", value)

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @ap_sniffer_mgmt_probe.setter
    def ap_sniffer_mgmt_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_probe", value)

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        """
        return pulumi.get(self, "arrp_profile")

    @arrp_profile.setter
    def arrp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arrp_profile", value)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 3 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        """
        return pulumi.get(self, "band5g_type")

    @band5g_type.setter
    def band5g_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band5g_type", value)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        """
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        """
        return pulumi.get(self, "beacon_interval")

    @beacon_interval.setter
    def beacon_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beacon_interval", value)

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[pulumi.Input[int]]:
        """
        BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        """
        return pulumi.get(self, "bss_color")

    @bss_color.setter
    def bss_color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bss_color", value)

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[pulumi.Input[str]]:
        """
        BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        """
        return pulumi.get(self, "bss_color_mode")

    @bss_color_mode.setter
    def bss_color_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_mode", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        """
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[pulumi.Input[str]]:
        """
        Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        """
        return pulumi.get(self, "channel_bonding")

    @channel_bonding.setter
    def channel_bonding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_bonding", value)

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "channel_utilization")

    @channel_utilization.setter
    def channel_utilization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_utilization", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio4ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio4ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "coexistence")

    @coexistence.setter
    def coexistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coexistence", value)

    @property
    @pulumi.getter
    def darrp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "darrp")

    @darrp.setter
    def darrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "darrp", value)

    @property
    @pulumi.getter
    def drma(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "drma")

    @drma.setter
    def drma(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma", value)

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        """
        return pulumi.get(self, "drma_sensitivity")

    @drma_sensitivity.setter
    def drma_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_sensitivity", value)

    @property
    @pulumi.getter
    def dtim(self) -> Optional[pulumi.Input[int]]:
        """
        Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        """
        return pulumi.get(self, "dtim")

    @dtim.setter
    def dtim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtim", value)

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "frag_threshold")

    @frag_threshold.setter
    def frag_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frag_threshold", value)

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "frequency_handoff")

    @frequency_handoff.setter
    def frequency_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_handoff", value)

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        """
        return pulumi.get(self, "iperf_protocol")

    @iperf_protocol.setter
    def iperf_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iperf_protocol", value)

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Iperf service port number.
        """
        return pulumi.get(self, "iperf_server_port")

    @iperf_server_port.setter
    def iperf_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iperf_server_port", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of stations (STAs) supported by the WTP (default = 0, meaning no client limitation).
        """
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        """
        return pulumi.get(self, "max_distance")

    @max_distance.setter
    def max_distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_distance", value)

    @property
    @pulumi.getter(name="mimoMode")
    def mimo_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure radio MIMO mode (default = default). Valid values: `default`, `1x1`, `2x2`, `3x3`, `4x4`, `8x8`.
        """
        return pulumi.get(self, "mimo_mode")

    @mimo_mode.setter
    def mimo_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mimo_mode", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def n80211d(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11d countryie(default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "n80211d")

    @n80211d.setter
    def n80211d(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n80211d", value)

    @property
    @pulumi.getter(name="optionalAntenna")
    def optional_antenna(self) -> Optional[pulumi.Input[str]]:
        """
        Optional antenna used on FAP (default = none).
        """
        return pulumi.get(self, "optional_antenna")

    @optional_antenna.setter
    def optional_antenna(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_antenna", value)

    @property
    @pulumi.getter(name="optionalAntennaGain")
    def optional_antenna_gain(self) -> Optional[pulumi.Input[str]]:
        """
        Optional antenna gain in dBi (0 to 20, default = 0).
        """
        return pulumi.get(self, "optional_antenna_gain")

    @optional_antenna_gain.setter
    def optional_antenna_gain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optional_antenna_gain", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        """
        return pulumi.get(self, "powersave_optimize")

    @powersave_optimize.setter
    def powersave_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "powersave_optimize", value)

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        """
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_mode", value)

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "rts_threshold")

    @rts_threshold.setter
    def rts_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rts_threshold", value)

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[pulumi.Input[str]]:
        """
        BSSID for WiFi network.
        """
        return pulumi.get(self, "sam_bssid")

    @sam_bssid.setter
    def sam_bssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_bssid", value)

    @property
    @pulumi.getter(name="samCaCertificate")
    def sam_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        CA certificate for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_ca_certificate")

    @sam_ca_certificate.setter
    def sam_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ca_certificate", value)

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sam_captive_portal")

    @sam_captive_portal.setter
    def sam_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_captive_portal", value)

    @property
    @pulumi.getter(name="samClientCertificate")
    def sam_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Client certificate for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_client_certificate")

    @sam_client_certificate.setter
    def sam_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_client_certificate", value)

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[pulumi.Input[str]]:
        """
        Failure identification on the page after an incorrect login.
        """
        return pulumi.get(self, "sam_cwp_failure_string")

    @sam_cwp_failure_string.setter
    def sam_cwp_failure_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_failure_string", value)

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[pulumi.Input[str]]:
        """
        Identification string from the captive portal login form.
        """
        return pulumi.get(self, "sam_cwp_match_string")

    @sam_cwp_match_string.setter
    def sam_cwp_match_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_match_string", value)

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_password")

    @sam_cwp_password.setter
    def sam_cwp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_password", value)

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[pulumi.Input[str]]:
        """
        Success identification on the page after a successful login.
        """
        return pulumi.get(self, "sam_cwp_success_string")

    @sam_cwp_success_string.setter
    def sam_cwp_success_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_success_string", value)

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[pulumi.Input[str]]:
        """
        Website the client is trying to access.
        """
        return pulumi.get(self, "sam_cwp_test_url")

    @sam_cwp_test_url.setter
    def sam_cwp_test_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_test_url", value)

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_username")

    @sam_cwp_username.setter
    def sam_cwp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_username", value)

    @property
    @pulumi.getter(name="samEapMethod")
    def sam_eap_method(self) -> Optional[pulumi.Input[str]]:
        """
        Select WPA2/WPA3-ENTERPRISE EAP Method (default = PEAP). Valid values: `both`, `tls`, `peap`.
        """
        return pulumi.get(self, "sam_eap_method")

    @sam_eap_method.setter
    def sam_eap_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_eap_method", value)

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase for WiFi network connection.
        """
        return pulumi.get(self, "sam_password")

    @sam_password.setter
    def sam_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_password", value)

    @property
    @pulumi.getter(name="samPrivateKey")
    def sam_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_private_key")

    @sam_private_key.setter
    def sam_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_private_key", value)

    @property
    @pulumi.getter(name="samPrivateKeyPassword")
    def sam_private_key_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for private key file for WPA2/WPA3-ENTERPRISE.
        """
        return pulumi.get(self, "sam_private_key_password")

    @sam_private_key_password.setter
    def sam_private_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_private_key_password", value)

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[pulumi.Input[int]]:
        """
        SAM report interval (sec), 0 for a one-time report.
        """
        return pulumi.get(self, "sam_report_intv")

    @sam_report_intv.setter
    def sam_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sam_report_intv", value)

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select WiFi network security type (default = "wpa-personal").
        """
        return pulumi.get(self, "sam_security_type")

    @sam_security_type.setter
    def sam_security_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_security_type", value)

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server domain name.
        """
        return pulumi.get(self, "sam_server_fqdn")

    @sam_server_fqdn.setter
    def sam_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_fqdn", value)

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server IP address.
        """
        return pulumi.get(self, "sam_server_ip")

    @sam_server_ip.setter
    def sam_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_ip", value)

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "sam_server_type")

    @sam_server_type.setter
    def sam_server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_type", value)

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        SSID for WiFi network.
        """
        return pulumi.get(self, "sam_ssid")

    @sam_ssid.setter
    def sam_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ssid", value)

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        """
        return pulumi.get(self, "sam_test")

    @sam_test.setter
    def sam_test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_test", value)

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for WiFi network connection.
        """
        return pulumi.get(self, "sam_username")

    @sam_username.setter
    def sam_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_username", value)

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "short_guard_interval")

    @short_guard_interval.setter
    def short_guard_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_guard_interval", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        """
        return pulumi.get(self, "transmit_optimize")

    @transmit_optimize.setter
    def transmit_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transmit_optimize", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio4VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WtpprofileRadio4VapArgs']]]]):
        pulumi.set(self, "vaps", value)

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        """
        return pulumi.get(self, "wids_profile")

    @wids_profile.setter
    def wids_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wids_profile", value)

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "zero_wait_dfs")

    @zero_wait_dfs.setter
    def zero_wait_dfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zero_wait_dfs", value)


@pulumi.input_type
class WtpprofileRadio4ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WtpprofileRadio4VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WtpprofileSplitTunnelingAclArgs:
    def __init__(__self__, *,
                 dest_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dest_ip: Destination IP and mask for the split-tunneling subnet.
               
               The `radio_1` block supports:
        :param pulumi.Input[int] id: ID.
        """
        if dest_ip is not None:
            pulumi.set(__self__, "dest_ip", dest_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IP and mask for the split-tunneling subnet.

        The `radio_1` block supports:
        """
        return pulumi.get(self, "dest_ip")

    @dest_ip.setter
    def dest_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


