# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['UtmprofileArgs', 'Utmprofile']

@pulumi.input_type
class UtmprofileArgs:
    def __init__(__self__, *,
                 antivirus_profile: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 utm_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Utmprofile resource.
        :param pulumi.Input[str] antivirus_profile: AntiVirus profile name.
        :param pulumi.Input[str] application_list: Application control list name.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] ips_sensor: IPS sensor name.
        :param pulumi.Input[str] name: UTM profile name.
        :param pulumi.Input[str] scan_botnet_connections: Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] utm_log: Enable/disable UTM logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] webfilter_profile: WebFilter profile name.
        """
        if antivirus_profile is not None:
            pulumi.set(__self__, "antivirus_profile", antivirus_profile)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if utm_log is not None:
            pulumi.set(__self__, "utm_log", utm_log)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)

    @property
    @pulumi.getter(name="antivirusProfile")
    def antivirus_profile(self) -> Optional[pulumi.Input[str]]:
        """
        AntiVirus profile name.
        """
        return pulumi.get(self, "antivirus_profile")

    @antivirus_profile.setter
    def antivirus_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antivirus_profile", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        """
        Application control list name.
        """
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        IPS sensor name.
        """
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        UTM profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        """
        Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter(name="utmLog")
    def utm_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable UTM logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utm_log")

    @utm_log.setter
    def utm_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_log", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        WebFilter profile name.
        """
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)


@pulumi.input_type
class _UtmprofileState:
    def __init__(__self__, *,
                 antivirus_profile: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 utm_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Utmprofile resources.
        :param pulumi.Input[str] antivirus_profile: AntiVirus profile name.
        :param pulumi.Input[str] application_list: Application control list name.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] ips_sensor: IPS sensor name.
        :param pulumi.Input[str] name: UTM profile name.
        :param pulumi.Input[str] scan_botnet_connections: Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] utm_log: Enable/disable UTM logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] webfilter_profile: WebFilter profile name.
        """
        if antivirus_profile is not None:
            pulumi.set(__self__, "antivirus_profile", antivirus_profile)
        if application_list is not None:
            pulumi.set(__self__, "application_list", application_list)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if ips_sensor is not None:
            pulumi.set(__self__, "ips_sensor", ips_sensor)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scan_botnet_connections is not None:
            pulumi.set(__self__, "scan_botnet_connections", scan_botnet_connections)
        if utm_log is not None:
            pulumi.set(__self__, "utm_log", utm_log)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)
        if webfilter_profile is not None:
            pulumi.set(__self__, "webfilter_profile", webfilter_profile)

    @property
    @pulumi.getter(name="antivirusProfile")
    def antivirus_profile(self) -> Optional[pulumi.Input[str]]:
        """
        AntiVirus profile name.
        """
        return pulumi.get(self, "antivirus_profile")

    @antivirus_profile.setter
    def antivirus_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antivirus_profile", value)

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> Optional[pulumi.Input[str]]:
        """
        Application control list name.
        """
        return pulumi.get(self, "application_list")

    @application_list.setter
    def application_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_list", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> Optional[pulumi.Input[str]]:
        """
        IPS sensor name.
        """
        return pulumi.get(self, "ips_sensor")

    @ips_sensor.setter
    def ips_sensor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_sensor", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        UTM profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> Optional[pulumi.Input[str]]:
        """
        Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @scan_botnet_connections.setter
    def scan_botnet_connections(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_botnet_connections", value)

    @property
    @pulumi.getter(name="utmLog")
    def utm_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable UTM logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utm_log")

    @utm_log.setter
    def utm_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "utm_log", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> Optional[pulumi.Input[str]]:
        """
        WebFilter profile name.
        """
        return pulumi.get(self, "webfilter_profile")

    @webfilter_profile.setter
    def webfilter_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter_profile", value)


class Utmprofile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 antivirus_profile: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 utm_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure UTM (Unified Threat Management) profile.

        ## Import

        WirelessController UtmProfile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/utmprofile:Utmprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/utmprofile:Utmprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] antivirus_profile: AntiVirus profile name.
        :param pulumi.Input[str] application_list: Application control list name.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] ips_sensor: IPS sensor name.
        :param pulumi.Input[str] name: UTM profile name.
        :param pulumi.Input[str] scan_botnet_connections: Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] utm_log: Enable/disable UTM logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] webfilter_profile: WebFilter profile name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[UtmprofileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure UTM (Unified Threat Management) profile.

        ## Import

        WirelessController UtmProfile can be imported using any of these accepted formats:

        ```sh
        $ pulumi import fortios:wirelesscontroller/utmprofile:Utmprofile labelname {{name}}
        ```

        If you do not want to import arguments of block:

        $ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
        $ pulumi import fortios:wirelesscontroller/utmprofile:Utmprofile labelname {{name}}
        ```

        $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param UtmprofileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UtmprofileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 antivirus_profile: Optional[pulumi.Input[str]] = None,
                 application_list: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 ips_sensor: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scan_botnet_connections: Optional[pulumi.Input[str]] = None,
                 utm_log: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 webfilter_profile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UtmprofileArgs.__new__(UtmprofileArgs)

            __props__.__dict__["antivirus_profile"] = antivirus_profile
            __props__.__dict__["application_list"] = application_list
            __props__.__dict__["comment"] = comment
            __props__.__dict__["ips_sensor"] = ips_sensor
            __props__.__dict__["name"] = name
            __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
            __props__.__dict__["utm_log"] = utm_log
            __props__.__dict__["vdomparam"] = vdomparam
            __props__.__dict__["webfilter_profile"] = webfilter_profile
        super(Utmprofile, __self__).__init__(
            'fortios:wirelesscontroller/utmprofile:Utmprofile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            antivirus_profile: Optional[pulumi.Input[str]] = None,
            application_list: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            ips_sensor: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            scan_botnet_connections: Optional[pulumi.Input[str]] = None,
            utm_log: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None,
            webfilter_profile: Optional[pulumi.Input[str]] = None) -> 'Utmprofile':
        """
        Get an existing Utmprofile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] antivirus_profile: AntiVirus profile name.
        :param pulumi.Input[str] application_list: Application control list name.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] ips_sensor: IPS sensor name.
        :param pulumi.Input[str] name: UTM profile name.
        :param pulumi.Input[str] scan_botnet_connections: Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] utm_log: Enable/disable UTM logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        :param pulumi.Input[str] webfilter_profile: WebFilter profile name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UtmprofileState.__new__(_UtmprofileState)

        __props__.__dict__["antivirus_profile"] = antivirus_profile
        __props__.__dict__["application_list"] = application_list
        __props__.__dict__["comment"] = comment
        __props__.__dict__["ips_sensor"] = ips_sensor
        __props__.__dict__["name"] = name
        __props__.__dict__["scan_botnet_connections"] = scan_botnet_connections
        __props__.__dict__["utm_log"] = utm_log
        __props__.__dict__["vdomparam"] = vdomparam
        __props__.__dict__["webfilter_profile"] = webfilter_profile
        return Utmprofile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="antivirusProfile")
    def antivirus_profile(self) -> pulumi.Output[str]:
        """
        AntiVirus profile name.
        """
        return pulumi.get(self, "antivirus_profile")

    @property
    @pulumi.getter(name="applicationList")
    def application_list(self) -> pulumi.Output[str]:
        """
        Application control list name.
        """
        return pulumi.get(self, "application_list")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[str]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="ipsSensor")
    def ips_sensor(self) -> pulumi.Output[str]:
        """
        IPS sensor name.
        """
        return pulumi.get(self, "ips_sensor")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        UTM profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scanBotnetConnections")
    def scan_botnet_connections(self) -> pulumi.Output[str]:
        """
        Block or monitor connections to Botnet servers or disable Botnet scanning. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "scan_botnet_connections")

    @property
    @pulumi.getter(name="utmLog")
    def utm_log(self) -> pulumi.Output[str]:
        """
        Enable/disable UTM logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "utm_log")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[str]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @property
    @pulumi.getter(name="webfilterProfile")
    def webfilter_profile(self) -> pulumi.Output[str]:
        """
        WebFilter profile name.
        """
        return pulumi.get(self, "webfilter_profile")

